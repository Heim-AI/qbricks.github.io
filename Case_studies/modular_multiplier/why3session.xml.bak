<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="modular_multiplier.mlw"/>
<theory name="Multiplier" proved="true">
 <goal name="VC multiplier_pre" expl="VC for multiplier_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC multiplier_pre.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.17" steps="364"/></proof>
  </goal>
  <goal name="VC multiplier_pre.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.18" steps="366"/></proof>
  </goal>
  <goal name="VC multiplier_pre.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.39" steps="366"/></proof>
  </goal>
  <goal name="VC multiplier_pre.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.27" steps="374"/></proof>
  </goal>
  <goal name="VC multiplier_pre.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.4.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.60" steps="374"/></proof>
   </goal>
   <goal name="VC multiplier_pre.4.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.84" steps="374"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.5.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.63" steps="374"/></proof>
   </goal>
   <goal name="VC multiplier_pre.5.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.16" steps="374"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.6.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.12" steps="375"/></proof>
   </goal>
   <goal name="VC multiplier_pre.6.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.07" steps="375"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.7.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.98" steps="377"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.06" steps="384"/></proof>
  </goal>
  <goal name="VC multiplier_pre.9" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mul_assoc">
   <goal name="VC multiplier_pre.9.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="leq_trans_mult_right">
    <goal name="VC multiplier_pre.9.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="1.14" steps="385"/></proof>
    </goal>
    <goal name="VC multiplier_pre.9.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="2.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.10.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.29" steps="386"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.11.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.43" steps="386"/></proof>
   </goal>
   <goal name="VC multiplier_pre.11.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.50" steps="386"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.41" steps="386"/></proof>
  </goal>
  <goal name="VC multiplier_pre.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.45" steps="386"/></proof>
  </goal>
  <goal name="VC multiplier_pre.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.46" steps="386"/></proof>
  </goal>
  <goal name="VC multiplier_pre.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.43" steps="386"/></proof>
  </goal>
  <goal name="VC multiplier_pre.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.25" steps="386"/></proof>
  </goal>
  <goal name="VC multiplier_pre.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.17" steps="387"/></proof>
  </goal>
  <goal name="VC multiplier_pre.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.01" steps="389"/></proof>
  </goal>
  <goal name="VC multiplier_pre.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="364"/></proof>
  </goal>
  <goal name="VC multiplier_pre.20" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.20.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.38" steps="364"/></proof>
   </goal>
   <goal name="VC multiplier_pre.20.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.46" steps="364"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.46" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_pre.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.47" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_pre.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.12" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_pre.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.36" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_pre.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.26" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_pre.26" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.26.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.04" steps="372"/></proof>
   </goal>
   <goal name="VC multiplier_pre.26.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.06" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.06" steps="374"/></proof>
  </goal>
  <goal name="VC multiplier_pre.28" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.86" steps="378"/></proof>
  </goal>
  <goal name="VC multiplier_pre.29" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="378"/></proof>
  </goal>
  <goal name="VC multiplier_pre.30" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="384"/></proof>
  </goal>
  <goal name="VC multiplier_pre.31" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="7.63" steps="424"/></proof>
  </goal>
  <goal name="VC multiplier_pre.32" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.32" steps="364"/></proof>
  </goal>
  <goal name="VC multiplier_pre.33" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.33.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.38" steps="393"/></proof>
   </goal>
   <goal name="VC multiplier_pre.33.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC multiplier_pre.33.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC multiplier_pre.33.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="leq_trans_facrev">
      <goal name="VC multiplier_pre.33.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="1.43" steps="399"/></proof>
      </goal>
      <goal name="VC multiplier_pre.33.1.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC multiplier_pre.33.1.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="5.98" steps="401"/></proof>
       </goal>
       <goal name="VC multiplier_pre.33.1.0.0.1.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="size_cont">
        <goal name="VC multiplier_pre.33.1.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.62" steps="399"/></proof>
        </goal>
        <goal name="VC multiplier_pre.33.1.0.0.1.1.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.60" steps="399"/></proof>
        </goal>
        <goal name="VC multiplier_pre.33.1.0.0.1.1.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.92" steps="399"/></proof>
        </goal>
        <goal name="VC multiplier_pre.33.1.0.0.1.1.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.88"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC multiplier_pre.33.1.0.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="8.79" steps="401"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.34" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.34.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC multiplier_pre.34.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_to_sem">
     <goal name="VC multiplier_pre.34.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width result )" arg2="(n+ (n+1+1))">
      <goal name="VC multiplier_pre.34.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="VC multiplier_pre.34.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.06" steps="402"/></proof>
       </goal>
       <goal name="VC multiplier_pre.34.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.12" steps="402"/></proof>
       </goal>
       <goal name="VC multiplier_pre.34.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="7.05" steps="404"/></proof>
       </goal>
       <goal name="VC multiplier_pre.34.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="VC multiplier_pre.34.0.0.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.12" steps="402"/></proof>
        </goal>
        <goal name="VC multiplier_pre.34.0.0.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.18" steps="402"/></proof>
        </goal>
        <goal name="VC multiplier_pre.34.0.0.0.0.3.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="5.99" steps="404"/></proof>
        </goal>
        <goal name="VC multiplier_pre.34.0.0.0.0.3.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.19" steps="402"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC multiplier_pre.34.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="1.02" steps="402"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC multiplier_pre.34.0.0.1" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="result" arg2="(cont (modular_adder (pick * power_ 2 (n - 1)) bound n) 0 n ((2 * n) + 2))">
      <goal name="VC multiplier_pre.34.0.0.1.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(ket n i)" arg2="(bv_to_ket (int_to_bv i n))">
       <goal name="VC multiplier_pre.34.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(i &lt; power_ 2 (n-1))">
        <goal name="VC multiplier_pre.34.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="H21">
         <goal name="VC multiplier_pre.34.0.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_one">
          <goal name="VC multiplier_pre.34.0.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC multiplier_pre.34.0.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
           <transf name="replace" proved="true" arg1="(getbv (int_to_bv i n) @ 0)" arg2="0">
            <goal name="VC multiplier_pre.34.0.0.1.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
            <proof prover="0"><result status="valid" time="1.58"/></proof>
            </goal>
            <goal name="VC multiplier_pre.34.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="5.83" steps="406"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC multiplier_pre.34.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="1.16" steps="404"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC multiplier_pre.34.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width (modular_adder (pick * power_ 2 (n - 1)) bound n))" arg2="(n+1+1)">
          <goal name="VC multiplier_pre.34.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC multiplier_pre.34.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.90" steps="404"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.88" steps="404"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="6.32" steps="406"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.0.0.1.0.0.0.1.0.3" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.05" steps="404"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC multiplier_pre.34.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="3"><result status="valid" time="1.40" steps="404"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC multiplier_pre.34.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="6.32" steps="406"/></proof>
         </goal>
         <goal name="VC multiplier_pre.34.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="6.33" steps="406"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC multiplier_pre.34.0.0.1.0.0.1" expl="false case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="H20">
         <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0" expl="false case (apply premises)" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_one">
          <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0" expl="false case (apply premises)" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0" expl="false case (apply premises)" proved="true">
           <transf name="apply" proved="true" arg1="kronecker_eq">
            <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.19" steps="404"/></proof>
            </goal>
            <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(b + (pick * ((getbv (int_to_bv i n) @ 0) * power_ 2 (n - 1))))" arg2="((pick * power_ 2 (n - 1)) + b)">
             <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="sem_to_path_sem">
              <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="modular_adder_spec1">
                <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="1.20" steps="404"/></proof>
                </goal>
                <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="1.41" steps="404"/></proof>
                </goal>
                <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="1.10" steps="404"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="3"><result status="valid" time="8.67" steps="406"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC multiplier_pre.34.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="1.05" steps="404"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC multiplier_pre.34.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width (modular_adder (pick * power_ 2 (n - 1)) bound n))" arg2="(n+1+1)">
          <goal name="VC multiplier_pre.34.0.0.1.0.0.1.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC multiplier_pre.34.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.10" steps="404"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.0.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.19" steps="404"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.0.0.1.0.0.1.1.0.2" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="5.85" steps="406"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.0.0.1.0.0.1.1.0.3" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.87" steps="404"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC multiplier_pre.34.0.0.1.0.0.1.1.1" expl="equality hypothesis" proved="true">
          <proof prover="3"><result status="valid" time="0.79" steps="404"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC multiplier_pre.34.0.0.1.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="6.08" steps="406"/></proof>
         </goal>
         <goal name="VC multiplier_pre.34.0.0.1.0.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="5.20" steps="406"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC multiplier_pre.34.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.50"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC multiplier_pre.34.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.93" steps="402"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC multiplier_pre.34.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC multiplier_pre.34.1.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="sem_comp" arg2="o,(cont (modular_adder (pick * power_ 2 ((n - j) - 1)) bound n) j n
    ((2 * n) + 2)),(kronecker (ket n i) (kronecker (apply_qft (n + 1) b) (ket 1 0))),(kronecker (ket n i)
     (kronecker
      (apply_qft (n + 1)
       (mod
        (b         + (pick
            * ind_isum
              (fun (k:int) -&gt;
                (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1))
              0 ((j - 1) + 1)))
        bound))
      (ket 1 0))),(kronecker (ket n i)
    (kronecker
     (apply_qft (n + 1)
      (mod
       (b
        + (pick
           * ind_isum
             (fun (k:int) -&gt;
               (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1))
             0 (j + 1)))
       bound))
     (ket 1 0)))">
     <goal name="VC multiplier_pre.34.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H14">
      <goal name="VC multiplier_pre.34.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC multiplier_pre.34.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H15">
        <goal name="VC multiplier_pre.34.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.06" steps="409"/></proof>
        </goal>
        <goal name="VC multiplier_pre.34.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.02" steps="409"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC multiplier_pre.34.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(ket n i)" arg2="(bv_to_ket (int_to_bv i n))">
        <goal name="VC multiplier_pre.34.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ind_isum
            (fun (k:int) -&gt;
              (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1))
            0 (j + 1))" arg2="(ind_isum
            (fun (k:int) -&gt;
              (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1))
            0 j + ((getbv (int_to_bv i n) @ j) * power_ 2 ((n - j) - 1)))">
         <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="path_sem_to_sem">
          <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(width
   (cont (modular_adder (pick * power_ 2 ((n - j) - 1)) bound n) j n
    ((2 * n) + 2)))" arg2="(n+ (n+1+1))">
           <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="kronecker_ket_l">
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.90" steps="409"/></proof>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.75" steps="409"/></proof>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="6.29" steps="412"/></proof>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.3.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.02" steps="409"/></proof>
             </goal>
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.3.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.28" steps="409"/></proof>
             </goal>
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.3.2" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="6.25" steps="412"/></proof>
             </goal>
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.0.3.3" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.94" steps="409"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="1.25" steps="409"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <transf name="case" proved="true" arg1="(getbv (int_to_bv i n) @ j = 0)">
           <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0" expl="true case (apply premises)" proved="true">
           <transf name="rewrite" proved="true" arg1="H32">
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.0" expl="true case (apply premises)" proved="true">
            <transf name="replace" proved="true" arg1="(ind_isum
              (fun (k:int) -&gt;
                (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1))
              0 j + ((getbv (int_to_bv i n) @ j) * power_ 2 ((n - j) - 1)))" arg2="(ind_isum
              (fun (k:int) -&gt;
                (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1))
              0 j )">
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="replace" proved="true" arg1="(j-1+1)" arg2="j">
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="3"><result status="valid" time="1.27" steps="411"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="add_zero">
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.06" steps="411"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(width (modular_adder (pick * power_ 2 ((n - j) - 1)) bound n))" arg2="(n+1+1)">
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.1.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_ket_l">
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.37" steps="411"/></proof>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.1.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.93" steps="411"/></proof>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.1.0.2" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.90"/></proof>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.1.0.3" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.06" steps="411"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="3"><result status="valid" time="1.22" steps="411"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="6.31" steps="414"/></proof>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.0.3" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.25" steps="411"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1" expl="false case (apply premises)" proved="true">
           <transf name="rewrite" proved="true" arg1="H31">
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0" expl="false case (apply premises)" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0" expl="false case (apply premises)" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_eq">
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.70" steps="411"/></proof>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="((j - 1) + 1)" arg2="j">
               <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="sem_to_path_sem">
                <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="(forall a b c. mod (b+ (pick *(a+c))) bound = mod ((pick * c) + (b+ (pick *a))) bound)">
                 <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                  <proof prover="3"><result status="valid" time="0.76" steps="411"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="h">
                  <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="((getbv (int_to_bv i n) @ j) * power_ 2 ((n - j) - 1))" arg2="(power_ 2 ((n - j) - 1))">
                   <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="modular_adder_spec">
                    <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.74" steps="411"/></proof>
                    </goal>
                    <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.72" steps="411"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="0"><result status="valid" time="2.55"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="3"><result status="valid" time="0.72" steps="411"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.1" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(width (modular_adder (pick * power_ 2 ((n - j) - 1)) bound n))" arg2="(n+1+1)">
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.1.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_ket_l">
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.62" steps="411"/></proof>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.1.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.55" steps="411"/></proof>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.1.0.2" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="4.99" steps="414"/></proof>
              </goal>
              <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.1.0.3" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.61" steps="411"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.1.1" expl="equality hypothesis" proved="true">
             <proof prover="3"><result status="valid" time="0.77" steps="411"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.2" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="4.83" steps="414"/></proof>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.0.1.1.3" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="3.19"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC multiplier_pre.34.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_re">
          <goal name="VC multiplier_pre.34.1.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC multiplier_pre.34.1.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="((j + 1) - 1)" arg2="j">
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.1.0.0.0" expl="equality hypothesis" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC multiplier_pre.34.1.0.0.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="0.61" steps="409"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC multiplier_pre.34.1.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="0.78" steps="409"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC multiplier_pre.34.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC multiplier_pre.34.1.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
          <goal name="VC multiplier_pre.34.1.0.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="ket_eq">
           <goal name="VC multiplier_pre.34.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.77" steps="367"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.1.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="15.25"/></proof>
           </goal>
           <goal name="VC multiplier_pre.34.1.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.92"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC multiplier_pre.34.1.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.68" steps="409"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.35" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.35.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="358"/></proof>
   </goal>
   <goal name="VC multiplier_pre.35.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.61" steps="358"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.36" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="364"/></proof>
  </goal>
  <goal name="VC multiplier_pre.37" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="365"/></proof>
  </goal>
  <goal name="VC multiplier_pre.38" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(pick*i)" arg2="(pick* (ind_isum
             (fun (k:int) -&gt;
               (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1))
             0 ((n - 1) + 1)))">
   <goal name="VC multiplier_pre.38.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H6">
    <goal name="VC multiplier_pre.38.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.69" steps="373"/></proof>
    </goal>
    <goal name="VC multiplier_pre.38.0.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.63" steps="373"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC multiplier_pre.38.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="((n - 1) + 1)" arg2="n">
    <goal name="VC multiplier_pre.38.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="int_to_bv_sum_rev">
     <goal name="VC multiplier_pre.38.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.75" steps="373"/></proof>
     </goal>
     <goal name="VC multiplier_pre.38.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.72" steps="373"/></proof>
     </goal>
     <goal name="VC multiplier_pre.38.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.20"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC multiplier_pre.38.1.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="0.59" steps="373"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_pre.39" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_pre.39.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="365"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC multiplier_qft_pre" expl="VC for multiplier_qft_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC multiplier_qft_pre.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="366"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="366"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.54" steps="366"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="368"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="372"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="373"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="373"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="374"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.8" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC multiplier_qft_pre.8.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_pre.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.85"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.10" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="384"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.11" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="385"/></proof>
  </goal>
  <goal name="VC multiplier_qft_pre.12" expl="postcondition" proved="true">
  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H4">
   <goal name="VC multiplier_qft_pre.12.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H4">
    <goal name="VC multiplier_qft_pre.12.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.62"/></proof>
    </goal>
    <goal name="VC multiplier_qft_pre.12.0.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="3.51" steps="387"/></proof>
    </goal>
    <goal name="VC multiplier_qft_pre.12.0.2" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.59" steps="385"/></proof>
    </goal>
    <goal name="VC multiplier_qft_pre.12.0.3" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="3.70" steps="387"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_pre.13" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n b))" arg2="(ket (n + 1) b)">
   <goal name="VC multiplier_qft_pre.13.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.87"/></proof>
   </goal>
   <goal name="VC multiplier_qft_pre.13.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_kets">
    <goal name="VC multiplier_qft_pre.13.1.0" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="0.56" steps="387"/></proof>
    </goal>
    <goal name="VC multiplier_qft_pre.13.1.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.57" steps="387"/></proof>
    </goal>
    <goal name="VC multiplier_qft_pre.13.1.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.75" steps="387"/></proof>
    </goal>
    <goal name="VC multiplier_qft_pre.13.1.3" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.76" steps="389"/></proof>
    </goal>
    <goal name="VC multiplier_qft_pre.13.1.4" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.65"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_pre.14" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC multiplier_qft_pre.14.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC multiplier_qft_pre.14.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC multiplier_qft_pre.14.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="apply_function_in_qft_basis_spec">
      <goal name="VC multiplier_qft_pre.14.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="apply_function_in_qft_basis_spec">
       <goal name="VC multiplier_qft_pre.14.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="0.74" steps="351"/></proof>
       </goal>
       <goal name="VC multiplier_qft_pre.14.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.74" steps="351"/></proof>
       </goal>
       <goal name="VC multiplier_qft_pre.14.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.93" steps="351"/></proof>
       </goal>
       <goal name="VC multiplier_qft_pre.14.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.74" steps="351"/></proof>
       </goal>
       <goal name="VC multiplier_qft_pre.14.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.73" steps="351"/></proof>
       </goal>
       <goal name="VC multiplier_qft_pre.14.0.0.0.0.5" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC multiplier_qft_pre.14.0.0.0.0.5.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.94"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC multiplier_qft_pre.14.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.72" steps="351"/></proof>
      </goal>
      <goal name="VC multiplier_qft_pre.14.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.79" steps="351"/></proof>
      </goal>
      <goal name="VC multiplier_qft_pre.14.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.93" steps="351"/></proof>
      </goal>
      <goal name="VC multiplier_qft_pre.14.0.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.85" steps="351"/></proof>
      </goal>
      <goal name="VC multiplier_qft_pre.14.0.0.0.5" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC multiplier_qft_pre.14.0.0.0.5.0" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.22"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC multiplier_qft_swap" expl="VC for multiplier_qft_swap" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC multiplier_qft_swap.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="362"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="363"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.2.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="363"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="363"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.3.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="365"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.5.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.70" steps="370"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.5.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.65" steps="370"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="370"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.8.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.65" steps="371"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.8.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.71" steps="371"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="380"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="392"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.77" steps="393"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.77" steps="393"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="395"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.76" steps="395"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="395"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.16.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="395"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.16.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.62" steps="395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.17.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.64" steps="395"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.17.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="395"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.18" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.18.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.65" steps="396"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.18.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.66" steps="396"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="396"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.20" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="398"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="399"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="400"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="401"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="401"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="401"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="401"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="401"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.28" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.26" steps="403"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.29" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="403"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.30" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="399"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.31" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="399"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.32.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.64" steps="401"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.33" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="399"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.34" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="407"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.35" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="415"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.36" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="425"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.79" steps="425"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.38" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="437"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="439"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.40" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="439"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.41" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="439"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.42" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="449"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.43" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="453"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.44" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="455"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.45" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="467"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.46" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.46.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.68" steps="471"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.46.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.82" steps="471"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.47" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.47.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.78" steps="472"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.48" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.48.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.66" steps="472"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.48.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.68" steps="472"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.49.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.81" steps="474"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.50" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.79" steps="473"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.51" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.76" steps="473"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.52" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.52.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.80" steps="473"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.52.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.66" steps="473"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.53" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="473"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.54" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="474"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.55" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(width (multiplier_qft_pre pick bound n 0 i))" arg2="(n+ (n+1+1))">
   <goal name="VC multiplier_qft_swap.55.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="kronecker_ket_l">
    <goal name="VC multiplier_qft_swap.55.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.77" steps="473"/></proof>
    </goal>
    <goal name="VC multiplier_qft_swap.55.0.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.88" steps="473"/></proof>
    </goal>
    <goal name="VC multiplier_qft_swap.55.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.75"/></proof>
    </goal>
    <goal name="VC multiplier_qft_swap.55.0.3" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="kronecker_ket_l">
     <goal name="VC multiplier_qft_swap.55.0.3.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.68" steps="473"/></proof>
     </goal>
     <goal name="VC multiplier_qft_swap.55.0.3.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.67" steps="473"/></proof>
     </goal>
     <goal name="VC multiplier_qft_swap.55.0.3.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.77"/></proof>
     </goal>
     <goal name="VC multiplier_qft_swap.55.0.3.3" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.69" steps="473"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC multiplier_qft_swap.55.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="0.66" steps="473"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.56" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.44"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.01"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.58" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.81" steps="479"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.59" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.59.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.86" steps="475"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.59.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.71" steps="475"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.60" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.60.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.72" steps="476"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.61" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.82" steps="476"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.62" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.85" steps="478"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.63" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.85" steps="477"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.64" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.64.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.70" steps="477"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.64.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.76" steps="477"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.65" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.86" steps="477"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.66" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multiplier_qft_swap.66.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.81" steps="477"/></proof>
   </goal>
   <goal name="VC multiplier_qft_swap.66.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.72" steps="477"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.67" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="478"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.68" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="477"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.69" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="477"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.70" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.86"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.71" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="480"/></proof>
  </goal>
  <goal name="VC multiplier_qft_swap.72" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_to_sem">
   <goal name="VC multiplier_qft_swap.72.0" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(width result)" arg2="(n+ (n+1+1))">
    <goal name="VC multiplier_qft_swap.72.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="kronecker_ket_l">
     <goal name="VC multiplier_qft_swap.72.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.71" steps="481"/></proof>
     </goal>
     <goal name="VC multiplier_qft_swap.72.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.69" steps="481"/></proof>
     </goal>
     <goal name="VC multiplier_qft_swap.72.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.55"/></proof>
     </goal>
     <goal name="VC multiplier_qft_swap.72.0.0.3" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC multiplier_qft_swap.72.0.0.3.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.70" steps="481"/></proof>
      </goal>
      <goal name="VC multiplier_qft_swap.72.0.0.3.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.75" steps="481"/></proof>
      </goal>
      <goal name="VC multiplier_qft_swap.72.0.0.3.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.63"/></proof>
      </goal>
      <goal name="VC multiplier_qft_swap.72.0.0.3.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.73" steps="481"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC multiplier_qft_swap.72.0.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="0.70" steps="481"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC multiplier_qft_swap.72.1" expl="apply premises" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC multiplier_qft_swap.72.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC multiplier_qft_swap.72.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H20">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multiplier_qft_swap.73" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC multiplier_qft_swap.73.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC multiplier_qft_swap.73.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="sequence_eq">
     <goal name="VC multiplier_qft_swap.73.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.02" steps="444"/></proof>
     </goal>
     <goal name="VC multiplier_qft_swap.73.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="multiplier_qft_pre_def">
      <goal name="VC multiplier_qft_swap.73.0.0.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC multiplier_qft_swap.73.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="instantiate" proved="true" arg1="multiplier_qft_pre_spec" arg2="pick,bound,n,0,i&#39;">
         <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.0" expl="destruct premise" proved="true">
          <proof prover="3"><result status="valid" time="1.01" steps="444"/></proof>
          </goal>
          <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.0" expl="destruct premise" proved="true">
           <proof prover="3"><result status="valid" time="1.03" steps="444"/></proof>
           </goal>
           <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.0" expl="destruct premise" proved="true">
            <proof prover="3"><result status="valid" time="0.99" steps="444"/></proof>
            </goal>
            <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
             <proof prover="3"><result status="valid" time="1.02" steps="444"/></proof>
             </goal>
             <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.1.1" expl="apply premises" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst">
              <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.1.1.0" expl="destruct premise" proved="true">
              <proof prover="3"><result status="valid" time="1.14" steps="444"/></proof>
              </goal>
              <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.1.1.1" expl="apply premises" proved="true">
              <transf name="instantiate" proved="true" arg1="Hinst" arg2="i">
               <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.1.1.1.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="Hinst">
                <goal name="VC multiplier_qft_swap.73.0.0.1.0.0.0.0.1.1.1.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="1.11" steps="446"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC multiplier_qft_swap.73.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.08" steps="444"/></proof>
      </goal>
      <goal name="VC multiplier_qft_swap.73.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.06" steps="444"/></proof>
      </goal>
      <goal name="VC multiplier_qft_swap.73.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.02" steps="444"/></proof>
      </goal>
      <goal name="VC multiplier_qft_swap.73.0.0.1.4" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.03" steps="444"/></proof>
      </goal>
      <goal name="VC multiplier_qft_swap.73.0.0.1.5" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.07" steps="444"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC multiplier_qft_swap.73.0.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.07" steps="444"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC restricted_modular_multiplier" expl="VC for restricted_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC restricted_modular_multiplier.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="364"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.41" steps="366"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="366"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="370"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="370"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.49" steps="371"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="374"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="375"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.8" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.56"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="380"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="380"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="380"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="381"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="388"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="400"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="8.61" steps="402"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.13" steps="402"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.64" steps="400"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.42" steps="400"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="8.57" steps="401"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.20" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.11" steps="404"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.06" steps="405"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.75"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.17" steps="402"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.38" steps="402"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.34" steps="402"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.13" steps="403"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.39" steps="404"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.28" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.11" steps="406"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.29" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.01" steps="406"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.30" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.99" steps="407"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.31" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.03" steps="408"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.32" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.98" steps="409"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.33" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.46" steps="409"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.34" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.03" steps="409"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.35" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.07" steps="409"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.36" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.42" steps="409"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.12" steps="409"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.38" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.56" steps="409"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.13" steps="408"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.40" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.08" steps="416"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.41" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.46" steps="424"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.42" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.83" steps="434"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.43" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.03" steps="434"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.44" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.16" steps="446"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.45" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.28" steps="448"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.46" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.19" steps="456"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.47" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.10" steps="466"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.48" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.15" steps="466"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.49" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.83" steps="470"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.50" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.13" steps="472"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.51" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.56" steps="484"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.52" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.58" steps="488"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.54" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.53" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.55" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.60" steps="488"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.56" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.51" steps="488"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.60"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.58" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.60" steps="492"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.59" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.65" steps="493"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.60" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.57"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.61" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.13" steps="488"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.62" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.30" steps="488"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.63" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.44" steps="488"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.64" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.80" steps="489"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.65" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.94" steps="488"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.66" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod
       (i + (mod (- modular_inverse pick bound) bound * mod (pick * i) bound))
       bound)" arg2="0" arg3="in" arg4="H7">
   <goal name="VC restricted_modular_multiplier.66.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.86" steps="490"/></proof>
   </goal>
   <goal name="VC restricted_modular_multiplier.66.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(mod (i + (mod (- modular_inverse pick bound) bound * mod (pick * i) bound))
  bound)" arg2="(mod ((mod i bound) + (mod (- modular_inverse pick bound) bound * mod (pick * i) bound))
  bound)">
    <goal name="VC restricted_modular_multiplier.66.1.0" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="(mod
  (mod i bound
   + (mod (- modular_inverse pick bound) bound * mod (pick * i) bound))
  bound)" arg2="(mod
  (mod i bound
   + mod (mod (- modular_inverse pick bound) bound * mod (pick * i) bound)bound)
  bound)">
     <goal name="VC restricted_modular_multiplier.66.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_mod_mult">
      <goal name="VC restricted_modular_multiplier.66.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="replace" proved="true" arg1="( mod ((- modular_inverse pick bound) * (pick * i)) bound)" arg2="(mod (mod (- modular_inverse pick bound * pick) bound * mod i bound)bound )">
       <goal name="VC restricted_modular_multiplier.66.1.0.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(mod ((- modular_inverse pick bound) * pick) bound)" arg2="(mod(-1)bound)">
        <goal name="VC restricted_modular_multiplier.66.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="mod_mod_mult">
         <goal name="VC restricted_modular_multiplier.66.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="2.97"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.66.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.65" steps="488"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC restricted_modular_multiplier.66.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="assert" proved="true" arg1="(forall a b. mod a bound = mod b bound -&gt; mod (-a) bound = mod (-b) bound)">
         <goal name="VC restricted_modular_multiplier.66.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="1.85"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.66.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="2.03"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC restricted_modular_multiplier.66.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="mod_mod_mult">
        <goal name="VC restricted_modular_multiplier.66.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.67" steps="488"/></proof>
        </goal>
        <goal name="VC restricted_modular_multiplier.66.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.68" steps="488"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC restricted_modular_multiplier.66.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.69" steps="488"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC restricted_modular_multiplier.66.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="add_mod_right">
      <goal name="VC restricted_modular_multiplier.66.1.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.70" steps="488"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.66.1.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.88" steps="488"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC restricted_modular_multiplier.66.1.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.82"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC restricted_modular_multiplier.67" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.68" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.01" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.69" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.53"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.70" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="492"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.71" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.72" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.73" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.06"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.74" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="494"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.75" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="495"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.76" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.07"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.77" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.79" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.78" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.79" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.80" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="491"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.81" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.82" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="490"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.83" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.96"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.84" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="493"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.85" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="494"/></proof>
  </goal>
  <goal name="VC restricted_modular_multiplier.86" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n 0))" arg2="(ket (n+1) 0)" arg3="in" arg4="H">
   <goal name="VC restricted_modular_multiplier.86.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(kronecker (ket (n + 1) 0) (ket 1 0))" arg2="(ket (n+2) 0)" arg3="in" arg4="H">
    <goal name="VC restricted_modular_multiplier.86.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.71" steps="496"/></proof>
    </goal>
    <goal name="VC restricted_modular_multiplier.86.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="2.07"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC restricted_modular_multiplier.86.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_kets">
    <goal name="VC restricted_modular_multiplier.86.1.0" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="0.67" steps="494"/></proof>
    </goal>
    <goal name="VC restricted_modular_multiplier.86.1.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.71" steps="494"/></proof>
    </goal>
    <goal name="VC restricted_modular_multiplier.86.1.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.69" steps="494"/></proof>
    </goal>
    <goal name="VC restricted_modular_multiplier.86.1.3" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.73" steps="494"/></proof>
    </goal>
    <goal name="VC restricted_modular_multiplier.86.1.4" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.64"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC restricted_modular_multiplier.87" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC restricted_modular_multiplier.87.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC restricted_modular_multiplier.87.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="sequence_eq">
     <goal name="VC restricted_modular_multiplier.87.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.99" steps="458"/></proof>
     </goal>
     <goal name="VC restricted_modular_multiplier.87.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="multiplier_qft_swap_def">
      <goal name="VC restricted_modular_multiplier.87.0.0.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC restricted_modular_multiplier.87.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC restricted_modular_multiplier.87.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="multiplier_qft_swap_spec">
         <goal name="VC restricted_modular_multiplier.87.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.02" steps="458"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.00" steps="458"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.96" steps="458"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.1.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.98" steps="458"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.1.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.99" steps="458"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.98" steps="458"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.03" steps="458"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.01" steps="458"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.1.4" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.05" steps="458"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC restricted_modular_multiplier.87.0.0.2" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="multiplier_qft_pre_def">
      <goal name="VC restricted_modular_multiplier.87.0.0.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="multiplier_qft_pre_spec">
         <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.03" steps="458"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.69"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.06" steps="458"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.04" steps="458"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.77"/></proof>
         </goal>
         <goal name="VC restricted_modular_multiplier.87.0.0.2.0.0.0.5" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.36"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.07" steps="458"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.2.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="7.15"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.2.3" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.13" steps="458"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.2.4" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.08" steps="458"/></proof>
      </goal>
      <goal name="VC restricted_modular_multiplier.87.0.0.2.5" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.09"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC check_first_bit_is_one_for_multiplier" expl="VC for check_first_bit_is_one_for_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC check_first_bit_is_one_for_multiplier.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="350"/></proof>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="356"/></proof>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="356"/></proof>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="358"/></proof>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="362"/></proof>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="363"/></proof>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="364"/></proof>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H5">
   <goal name="VC check_first_bit_is_one_for_multiplier.7.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.30" steps="371"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.7.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.35" steps="371"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.7.2" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="369"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.7.3" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.38" steps="371"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.7.4" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="369"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.7.5" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.21" steps="371"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_first_bit_is_one_for_multiplier.8" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
   <goal name="VC check_first_bit_is_one_for_multiplier.8.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.29" steps="371"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.8.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.24" steps="371"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.8.2" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="369"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.8.3" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.28" steps="371"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.8.4" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.61" steps="369"/></proof>
   </goal>
   <goal name="VC check_first_bit_is_one_for_multiplier.8.5" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.64" steps="371"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC check_order_pre" expl="VC for check_order_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC check_order_pre.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="358"/></proof>
  </goal>
  <goal name="VC check_order_pre.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="364"/></proof>
  </goal>
  <goal name="VC check_order_pre.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="364"/></proof>
  </goal>
  <goal name="VC check_order_pre.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="370"/></proof>
  </goal>
  <goal name="VC check_order_pre.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="382"/></proof>
  </goal>
  <goal name="VC check_order_pre.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="384"/></proof>
  </goal>
  <goal name="VC check_order_pre.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="384"/></proof>
  </goal>
  <goal name="VC check_order_pre.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="386"/></proof>
  </goal>
  <goal name="VC check_order_pre.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="387"/></proof>
  </goal>
  <goal name="VC check_order_pre.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.80" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.11.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.63" steps="388"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="389"/></proof>
  </goal>
  <goal name="VC check_order_pre.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.36"/></proof>
  </goal>
  <goal name="VC check_order_pre.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="391"/></proof>
  </goal>
  <goal name="VC check_order_pre.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.17.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.62" steps="390"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="398"/></proof>
  </goal>
  <goal name="VC check_order_pre.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="410"/></proof>
  </goal>
  <goal name="VC check_order_pre.20" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="422"/></proof>
  </goal>
  <goal name="VC check_order_pre.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="424"/></proof>
  </goal>
  <goal name="VC check_order_pre.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="424"/></proof>
  </goal>
  <goal name="VC check_order_pre.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="424"/></proof>
  </goal>
  <goal name="VC check_order_pre.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="426"/></proof>
  </goal>
  <goal name="VC check_order_pre.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.79" steps="426"/></proof>
  </goal>
  <goal name="VC check_order_pre.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="438"/></proof>
  </goal>
  <goal name="VC check_order_pre.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="438"/></proof>
  </goal>
  <goal name="VC check_order_pre.28" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.28.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.65" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.29" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(i - bound)" arg2="(mod (i - bound) (power_ 2 (n + 1)))">
   <goal name="VC check_order_pre.29.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H1">
    <goal name="VC check_order_pre.29.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.76"/></proof>
    </goal>
    <goal name="VC check_order_pre.29.0.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
     <goal name="VC check_order_pre.29.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC check_order_pre.29.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.78" steps="438"/></proof>
      </goal>
      <goal name="VC check_order_pre.29.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.66" steps="438"/></proof>
      </goal>
      <goal name="VC check_order_pre.29.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="4.71" steps="443"/></proof>
      </goal>
      <goal name="VC check_order_pre.29.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.65" steps="438"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC check_order_pre.29.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.76" steps="438"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC check_order_pre.29.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="1.89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.82"/></proof>
  </goal>
  <goal name="VC check_order_pre.31" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="442"/></proof>
  </goal>
  <goal name="VC check_order_pre.32" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="390"/></proof>
  </goal>
  <goal name="VC check_order_pre.33" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="398"/></proof>
  </goal>
  <goal name="VC check_order_pre.34" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.11" steps="413"/></proof>
  </goal>
  <goal name="VC check_order_pre.35" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.35.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.74" steps="410"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.36" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="422"/></proof>
  </goal>
  <goal name="VC check_order_pre.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="429"/></proof>
  </goal>
  <goal name="VC check_order_pre.38" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.69" steps="437"/></proof>
  </goal>
  <goal name="VC check_order_pre.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="433"/></proof>
  </goal>
  <goal name="VC check_order_pre.40" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.80" steps="437"/></proof>
  </goal>
  <goal name="VC check_order_pre.41" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.41.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.76" steps="439"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.42" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.42.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.61" steps="439"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.43" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="451"/></proof>
  </goal>
  <goal name="VC check_order_pre.44" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="451"/></proof>
  </goal>
  <goal name="VC check_order_pre.45" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.76" steps="451"/></proof>
  </goal>
  <goal name="VC check_order_pre.46" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H1">
   <goal name="VC check_order_pre.46.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.09"/></proof>
   </goal>
   <goal name="VC check_order_pre.46.1" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
    <goal name="VC check_order_pre.46.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="kronecker_ket_l">
     <goal name="VC check_order_pre.46.1.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.72" steps="451"/></proof>
     </goal>
     <goal name="VC check_order_pre.46.1.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.67" steps="451"/></proof>
     </goal>
     <goal name="VC check_order_pre.46.1.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.78"/></proof>
     </goal>
     <goal name="VC check_order_pre.46.1.0.3" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.62" steps="451"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC check_order_pre.46.1.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="0.64" steps="451"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.47" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
   <goal name="VC check_order_pre.47.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC check_order_pre.47.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(- power_ 2 n &lt;= (i-bound))">
     <goal name="VC check_order_pre.47.0.0.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.77" steps="453"/></proof>
     </goal>
     <goal name="VC check_order_pre.47.0.0.1" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(i - bound),(power_ 2 (n + 1)),(-1),(power_ 2 (n + 1) + (i-bound))">
      <goal name="VC check_order_pre.47.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.95"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC check_order_pre.47.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.54"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.48" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="455"/></proof>
  </goal>
  <goal name="VC check_order_pre.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.49.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.65" steps="440"/></proof>
   </goal>
   <goal name="VC check_order_pre.49.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.71" steps="453"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order_pre.50" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.51" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.52" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.83" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.53" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="388"/></proof>
  </goal>
  <goal name="VC check_order_pre.54" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.76" steps="438"/></proof>
  </goal>
  <goal name="VC check_order_pre.55" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.83" steps="391"/></proof>
  </goal>
  <goal name="VC check_order_pre.56" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="474"/></proof>
  </goal>
  <goal name="VC check_order_pre.57" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order_pre.57.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.78" steps="444"/></proof>
   </goal>
   <goal name="VC check_order_pre.57.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC check_order_pre.57.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="result" arg2="(sequence (place_substract_in_comput_basis bound n ((2 * n) + 4))
   (check_first_bit_is_one_for_multiplier n))">
     <goal name="VC check_order_pre.57.1.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.62" steps="458"/></proof>
     </goal>
     <goal name="VC check_order_pre.57.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.80" steps="458"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC check_order" expl="VC for check_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC check_order.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order.0.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.66" steps="358"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order.1.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.74" steps="358"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="364"/></proof>
  </goal>
  <goal name="VC check_order.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order.3.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.58" steps="364"/></proof>
   </goal>
   <goal name="VC check_order.3.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="364"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order.4.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.60" steps="364"/></proof>
   </goal>
   <goal name="VC check_order.4.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.73" steps="364"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="370"/></proof>
  </goal>
  <goal name="VC check_order.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="382"/></proof>
  </goal>
  <goal name="VC check_order.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="382"/></proof>
  </goal>
  <goal name="VC check_order.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="384"/></proof>
  </goal>
  <goal name="VC check_order.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="384"/></proof>
  </goal>
  <goal name="VC check_order.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="384"/></proof>
  </goal>
  <goal name="VC check_order.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="386"/></proof>
  </goal>
  <goal name="VC check_order.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="387"/></proof>
  </goal>
  <goal name="VC check_order.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="389"/></proof>
  </goal>
  <goal name="VC check_order.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="389"/></proof>
  </goal>
  <goal name="VC check_order.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="389"/></proof>
  </goal>
  <goal name="VC check_order.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="389"/></proof>
  </goal>
  <goal name="VC check_order.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="389"/></proof>
  </goal>
  <goal name="VC check_order.20" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="389"/></proof>
  </goal>
  <goal name="VC check_order.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="392"/></proof>
  </goal>
  <goal name="VC check_order.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="400"/></proof>
  </goal>
  <goal name="VC check_order.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="412"/></proof>
  </goal>
  <goal name="VC check_order.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="424"/></proof>
  </goal>
  <goal name="VC check_order.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="426"/></proof>
  </goal>
  <goal name="VC check_order.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="426"/></proof>
  </goal>
  <goal name="VC check_order.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="438"/></proof>
  </goal>
  <goal name="VC check_order.28" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.81" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.29" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.30" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.31" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.32" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.33" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.34" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.35" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="440"/></proof>
  </goal>
  <goal name="VC check_order.36" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(ket (n + 1) (mod ((i-bound + bound) ) (power_ 2 (n+1))))">
   <goal name="VC check_order.36.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H7">
    <goal name="VC check_order.36.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.20"/></proof>
    </goal>
    <goal name="VC check_order.36.0.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
     <goal name="VC check_order.36.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC check_order.36.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.73" steps="440"/></proof>
      </goal>
      <goal name="VC check_order.36.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.73" steps="440"/></proof>
      </goal>
      <goal name="VC check_order.36.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.44"/></proof>
      </goal>
      <goal name="VC check_order.36.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.68" steps="440"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC check_order.36.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.68" steps="440"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC check_order.36.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="1.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="442"/></proof>
  </goal>
  <goal name="VC check_order.38" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="390"/></proof>
  </goal>
  <goal name="VC check_order.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="398"/></proof>
  </goal>
  <goal name="VC check_order.40" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="410"/></proof>
  </goal>
  <goal name="VC check_order.41" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="422"/></proof>
  </goal>
  <goal name="VC check_order.42" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="424"/></proof>
  </goal>
  <goal name="VC check_order.43" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="5.00" steps="430"/></proof>
  </goal>
  <goal name="VC check_order.44" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="424"/></proof>
  </goal>
  <goal name="VC check_order.45" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.83" steps="436"/></proof>
  </goal>
  <goal name="VC check_order.46" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.87" steps="443"/></proof>
  </goal>
  <goal name="VC check_order.47" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="447"/></proof>
  </goal>
  <goal name="VC check_order.48" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="451"/></proof>
  </goal>
  <goal name="VC check_order.49" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="451"/></proof>
  </goal>
  <goal name="VC check_order.50" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="451"/></proof>
  </goal>
  <goal name="VC check_order.51" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="451"/></proof>
  </goal>
  <goal name="VC check_order.52" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="451"/></proof>
  </goal>
  <goal name="VC check_order.53" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="451"/></proof>
  </goal>
  <goal name="VC check_order.54" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(ket (n + 1) (mod (mod (i-bound)(power_ 2 (n+1))+bound) (power_ 2 (n+1))))">
   <goal name="VC check_order.54.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H7">
    <goal name="VC check_order.54.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.67"/></proof>
    </goal>
    <goal name="VC check_order.54.0.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="((((2 * n) + 4) - n) - 1)" arg2="(n+2+1)">
     <goal name="VC check_order.54.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC check_order.54.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.70" steps="453"/></proof>
      </goal>
      <goal name="VC check_order.54.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.66" steps="453"/></proof>
      </goal>
      <goal name="VC check_order.54.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.79"/></proof>
      </goal>
      <goal name="VC check_order.54.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.63" steps="453"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC check_order.54.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.69" steps="453"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC check_order.54.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="add_mod_left">
    <goal name="VC check_order.54.1.0" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="1.94"/></proof>
    </goal>
    <goal name="VC check_order.54.1.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.50"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.55" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order.55.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.77" steps="455"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.56" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.83" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.57" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC check_order.57.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.66" steps="442"/></proof>
   </goal>
   <goal name="VC check_order.57.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.68" steps="453"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC check_order.58" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.59" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.60" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.61" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.62" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="388"/></proof>
  </goal>
  <goal name="VC check_order.63" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="5.30" steps="437"/></proof>
  </goal>
  <goal name="VC check_order.64" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="391"/></proof>
  </goal>
  <goal name="VC check_order.65" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.80" steps="472"/></proof>
  </goal>
  <goal name="VC check_order.66" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.82" steps="396"/></proof>
  </goal>
  <goal name="VC check_order.67" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC check_order.67.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC check_order.67.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="2.29"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC uncheck_order" expl="VC for uncheck_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC uncheck_order.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="358"/></proof>
  </goal>
  <goal name="VC uncheck_order.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC uncheck_order.1.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="358"/></proof>
   </goal>
   <goal name="VC uncheck_order.1.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.71" steps="358"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC uncheck_order.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC uncheck_order.2.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.58" steps="358"/></proof>
   </goal>
   <goal name="VC uncheck_order.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.58" steps="358"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC uncheck_order.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC uncheck_order.3.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.77" steps="364"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC uncheck_order.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="370"/></proof>
  </goal>
  <goal name="VC uncheck_order.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="371"/></proof>
  </goal>
  <goal name="VC uncheck_order.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="371"/></proof>
  </goal>
  <goal name="VC uncheck_order.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.75" steps="379"/></proof>
  </goal>
  <goal name="VC uncheck_order.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.74" steps="379"/></proof>
  </goal>
  <goal name="VC uncheck_order.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(check_order n bound i&#39;)" arg2="(check_order n bound i)">
   <goal name="VC uncheck_order.9.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.63" steps="376"/></proof>
   </goal>
   <goal name="VC uncheck_order.9.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC uncheck_order.9.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="check_order_def">
     <goal name="VC uncheck_order.9.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC uncheck_order.9.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC uncheck_order.9.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="check_order_spec">
        <goal name="VC uncheck_order.9.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.84" steps="336"/></proof>
        </goal>
        <goal name="VC uncheck_order.9.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.85" steps="336"/></proof>
        </goal>
        <goal name="VC uncheck_order.9.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.12" steps="336"/></proof>
        </goal>
        <goal name="VC uncheck_order.9.1.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.03" steps="336"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC uncheck_order.9.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.82" steps="336"/></proof>
     </goal>
     <goal name="VC uncheck_order.9.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.89" steps="336"/></proof>
     </goal>
     <goal name="VC uncheck_order.9.1.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.80" steps="336"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_restricted_modular_multiplier" expl="VC for cont_restricted_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_restricted_modular_multiplier.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="364"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="364"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="364"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.85" steps="364"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.91" steps="365"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="368"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="384"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="384"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="384"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.86" steps="384"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.01" steps="385"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="388"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="385"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="387"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="387"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.53" steps="388"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="389"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="390"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="390"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.75"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.37"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="395"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="396"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="396"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="389"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="389"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.76" steps="389"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="389"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.28" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.34" steps="390"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.29" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="393"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.30" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="389"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.31" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="389"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.32" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="390"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.33" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
   <goal name="VC cont_restricted_modular_multiplier.33.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
    <goal name="VC cont_restricted_modular_multiplier.33.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H5">
     <goal name="VC cont_restricted_modular_multiplier.33.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.92"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.34" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
   <goal name="VC cont_restricted_modular_multiplier.34.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H5">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.35" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="395"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.36" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="370"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="370"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.38" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="381"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.39" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="382"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.40" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="383"/></proof>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.41" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cont_restricted_modular_multiplier.41.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cont_restricted_modular_multiplier.41.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket n i))">
     <goal name="VC cont_restricted_modular_multiplier.41.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ket (n + 1) (mod (pick * i) bound))" arg2="(kronecker (ket 1 0) (ket n (mod (pick * i) bound)))">
      <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
       <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
        <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="place_kron_right_sem">
         <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.93" steps="347"/></proof>
         </goal>
         <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.92" steps="347"/></proof>
         </goal>
         <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.51"/></proof>
         </goal>
         <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="6.35"/></proof>
         </goal>
         <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.0.0.0.4" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.91" steps="347"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_kets">
       <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.92" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.92" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.92" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.72"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.41.0.0.0.1.4" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="5.82"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_restricted_modular_multiplier.41.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_kets">
      <goal name="VC cont_restricted_modular_multiplier.41.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.80" steps="347"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.41.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.93" steps="347"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.41.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.90" steps="347"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.41.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.54"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.41.0.0.1.4" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="4.96"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.42" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cont_restricted_modular_multiplier.42.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cont_restricted_modular_multiplier.42.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ket (n + 1) i)" arg2="(kronecker (ket 1 0) (ket n i))">
     <goal name="VC cont_restricted_modular_multiplier.42.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ket (n + 1) (mod (pick * i) bound))" arg2="(kronecker (ket 1 0) (ket n (mod (pick * i) bound)))">
      <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="place_kron_right_sem">
        <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.93" steps="347"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.77" steps="347"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.89"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="8.14"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.94" steps="347"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_kets">
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.96" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.93" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.92" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.79"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.0.1.4" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.72"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_restricted_modular_multiplier.42.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_kets">
      <goal name="VC cont_restricted_modular_multiplier.42.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.90" steps="347"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.42.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.92" steps="347"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.42.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.96" steps="347"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.42.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.81"/></proof>
      </goal>
      <goal name="VC cont_restricted_modular_multiplier.42.0.0.1.4" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="power_to_">
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.1.4.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.77" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.42.0.0.1.4.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.73" steps="347"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_restricted_modular_multiplier.43" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cont_restricted_modular_multiplier.43.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cont_restricted_modular_multiplier.43.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="o" arg2="(cont_last_qbit_kron
     (restricted_modular_multiplier pick bound n (mod i bound)))">
     <goal name="VC cont_restricted_modular_multiplier.43.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(restricted_modular_multiplier pick bound n (mod i&#39; bound))" arg2="(restricted_modular_multiplier pick bound n (mod i bound))">
       <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="0.86" steps="347"/></proof>
       </goal>
       <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="restricted_modular_multiplier_def">
        <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="restricted_modular_multiplier_spec">
           <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.82" steps="347"/></proof>
           </goal>
           <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.79" steps="347"/></proof>
           </goal>
           <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.85" steps="347"/></proof>
           </goal>
           <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.98"/></proof>
           </goal>
           <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.89" steps="347"/></proof>
           </goal>
           <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.32"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.83" steps="347"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.85" steps="347"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.88" steps="347"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="6.88"/></proof>
        </goal>
        <goal name="VC cont_restricted_modular_multiplier.43.0.0.0.0.1.5" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.77" steps="347"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_restricted_modular_multiplier.43.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="instantiate" proved="true" arg1="H14" arg2="0">
      <goal name="VC cont_restricted_modular_multiplier.43.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC cont_restricted_modular_multiplier.43.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.92" steps="349"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_multiplier_with_ancillas" expl="VC for modular_multiplier_with_ancillas" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modular_multiplier_with_ancillas.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="364"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="364"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="364"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="364"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="364"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="370"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="370"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="371"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="376"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="388"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="388"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="388"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="388"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="388"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="390"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="390"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="391"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="392"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="394"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="395"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.20" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.27" steps="402"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="399"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.28" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="402"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.29" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="410"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.30" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="422"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.31" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="422"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.32" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.33" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="436"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.34" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="436"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.35" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="448"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.36" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="455"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="459"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.38" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.40" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.41" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.42" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.43" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.44" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.83" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.45" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="464"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.46" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.47" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.48" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.49" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="398"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.50" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="406"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.51" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="418"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.52" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="430"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.53" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="432"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.54" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="432"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.55" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="432"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.56" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.57" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.58" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.59" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.60" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.61" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.62" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.63" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.81" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.64" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.65" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="435"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.66" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.67" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="436"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.68" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="438"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.69" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.70" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.85" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.71" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.72" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.73" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.74" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.75" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.76" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="397"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.77" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.78" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.87"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.79" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.76" steps="398"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.80" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="399"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.81" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.82" steps="498"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.82" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.77" steps="406"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.83" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.84" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC modular_multiplier_with_ancillas.84.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="sequence_eq">
    <goal name="VC modular_multiplier_with_ancillas.84.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.75" steps="404"/></proof>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.84.0.1" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="check_order_def">
     <goal name="VC modular_multiplier_with_ancillas.84.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC modular_multiplier_with_ancillas.84.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC modular_multiplier_with_ancillas.84.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="check_order_spec">
        <goal name="VC modular_multiplier_with_ancillas.84.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.77" steps="404"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.84.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.80" steps="404"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.84.0.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.85" steps="404"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.84.0.1.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.86" steps="404"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.84.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.75" steps="404"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.84.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.69" steps="404"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.84.0.1.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.75" steps="404"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.84.0.2" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(cont_restricted_modular_multiplier pick bound n i&#39;)" arg2="(place
     (cont_last_qbit_kron
      (restricted_modular_multiplier pick bound n (mod i bound)))
     1 ((2 * n) + 4))">
     <goal name="VC modular_multiplier_with_ancillas.84.0.2.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC modular_multiplier_with_ancillas.84.0.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="cont_restricted_modular_multiplier_spec">
       <goal name="VC modular_multiplier_with_ancillas.84.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.76" steps="404"/></proof>
       </goal>
       <goal name="VC modular_multiplier_with_ancillas.84.0.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.76" steps="404"/></proof>
       </goal>
       <goal name="VC modular_multiplier_with_ancillas.84.0.2.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.77" steps="404"/></proof>
       </goal>
       <goal name="VC modular_multiplier_with_ancillas.84.0.2.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.75" steps="404"/></proof>
       </goal>
       <goal name="VC modular_multiplier_with_ancillas.84.0.2.0.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.75" steps="404"/></proof>
       </goal>
       <goal name="VC modular_multiplier_with_ancillas.84.0.2.0.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.73" steps="404"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.84.0.2.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.85" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="372"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.86" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.77" steps="372"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.87" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="372"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.88" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.67"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.89" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="378"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.90" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="390"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.91" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="390"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.92" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="390"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.93" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.30"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.94" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="394"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.95" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="396"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.96" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.94" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.97" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.11" steps="405"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.98" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="401"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.99" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="402"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.100" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.101" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.102" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.103" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.104" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.105" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.82" steps="402"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.106" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="410"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.107" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="422"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.108" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="422"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.109" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.73" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.110" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="441"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.111" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="445"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.112" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="445"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.113" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="449"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.114" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.86" steps="451"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.115" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="451"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.116" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.117" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.118" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.86" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.119" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.30"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.120" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="463"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.121" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.82"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.122" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="465"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.123" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.124" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="408"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.125" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="420"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.126" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="432"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.127" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.128" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.129" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="434"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.130" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="436"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.131" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="436"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.132" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="436"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.133" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="436"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.134" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="437"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.135" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="442"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.136" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="444"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.137" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="446"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.138" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.76" steps="398"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.139" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="399"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.140" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.98"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.141" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.142" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.143" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.144" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.145" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.77"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.146" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="400"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.147" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.33"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.148" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="402"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.149" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="403"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.150" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.90" steps="498"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.151" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC modular_multiplier_with_ancillas.151.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC modular_multiplier_with_ancillas.151.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="result" arg2="(sequence o (uncheck_order n bound i))">
     <goal name="VC modular_multiplier_with_ancillas.151.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.81" steps="471"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.151.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="result_def">
       <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="sequence_eq">
        <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.14" steps="436"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.11" steps="436"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="uncheck_order_def">
         <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="uncheck_order_spec">
            <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.07" steps="436"/></proof>
            </goal>
            <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.01" steps="436"/></proof>
            </goal>
            <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.00" steps="436"/></proof>
            </goal>
            <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.98" steps="436"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.99" steps="436"/></proof>
         </goal>
         <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.99" steps="436"/></proof>
         </goal>
         <goal name="VC modular_multiplier_with_ancillas.151.0.0.1.0.0.2.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.99" steps="436"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_multiplier_with_ancillas.151.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC modular_multiplier_with_ancillas.151.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="result" arg2="(sequence o (uncheck_order n bound i))">
     <goal name="VC modular_multiplier_with_ancillas.151.1.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.69" steps="456"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.151.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="result_def">
       <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="sequence_eq">
        <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.98" steps="417"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.89" steps="417"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="uncheck_order_def">
         <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="uncheck_order_spec">
            <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.02" steps="417"/></proof>
            </goal>
            <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.02" steps="417"/></proof>
            </goal>
            <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.01" steps="417"/></proof>
            </goal>
            <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.46"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.88" steps="417"/></proof>
         </goal>
         <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="1.05" steps="417"/></proof>
         </goal>
         <goal name="VC modular_multiplier_with_ancillas.151.1.0.1.0.0.2.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.93"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.152" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
   <goal name="VC modular_multiplier_with_ancillas.152.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_kets">
    <goal name="VC modular_multiplier_with_ancillas.152.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
     <goal name="VC modular_multiplier_with_ancillas.152.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n (mod (pick * i) bound)))" arg2="( (ket (n+1) (mod (pick * i) bound)))">
      <goal name="VC modular_multiplier_with_ancillas.152.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="3.67"/></proof>
      </goal>
      <goal name="VC modular_multiplier_with_ancillas.152.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="2.69"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.152.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.75" steps="498"/></proof>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.152.0.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.79" steps="498"/></proof>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.152.0.3" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.85" steps="498"/></proof>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.152.0.4" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="2.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.153" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
   <goal name="VC modular_multiplier_with_ancillas.153.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(kronecker (ket 1 0) (ket n i))" arg2="( (ket (n+1) i))">
    <goal name="VC modular_multiplier_with_ancillas.153.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="3.40"/></proof>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.153.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_kets">
     <goal name="VC modular_multiplier_with_ancillas.153.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.78" steps="410"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.153.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.78" steps="410"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.153.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.75" steps="410"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.153.0.1.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.89" steps="412"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.153.0.1.4" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="power_to_">
      <goal name="VC modular_multiplier_with_ancillas.153.0.1.4.0" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.76" steps="410"/></proof>
      </goal>
      <goal name="VC modular_multiplier_with_ancillas.153.0.1.4.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.74" steps="410"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.154" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.75" steps="404"/></proof>
  </goal>
  <goal name="VC modular_multiplier_with_ancillas.155" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC modular_multiplier_with_ancillas.155.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="sequence_eq">
    <goal name="VC modular_multiplier_with_ancillas.155.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.75" steps="409"/></proof>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.155.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.60"/></proof>
    </goal>
    <goal name="VC modular_multiplier_with_ancillas.155.0.2" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="uncheck_order_def">
     <goal name="VC modular_multiplier_with_ancillas.155.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC modular_multiplier_with_ancillas.155.0.2.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC modular_multiplier_with_ancillas.155.0.2.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="uncheck_order_spec">
        <goal name="VC modular_multiplier_with_ancillas.155.0.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.78" steps="409"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.155.0.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.83" steps="409"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.155.0.2.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.97"/></proof>
        </goal>
        <goal name="VC modular_multiplier_with_ancillas.155.0.2.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.76"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.155.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.76" steps="409"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.155.0.2.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.74" steps="409"/></proof>
     </goal>
     <goal name="VC modular_multiplier_with_ancillas.155.0.2.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC permut_modular_multiplier" expl="VC for permut_modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permut_modular_multiplier.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="360"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="360"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="360"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="360"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="362"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_bijective_auto">
   <goal name="VC permut_modular_multiplier.5.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC permut_modular_multiplier.5.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="2.26"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC permut_modular_multiplier.5.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC permut_modular_multiplier.5.1.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(if e&#39; = 2*n+3 then 0 else e&#39;+1)">
     <goal name="VC permut_modular_multiplier.5.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC permut_modular_multiplier.5.1.0.0.0" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC permut_modular_multiplier.5.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC permut_modular_multiplier.5.1.0.0.0.0.0" proved="true">
        <proof prover="3"><result status="valid" time="4.01" steps="379"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.5.1.0.0.0.0.1" proved="true">
        <proof prover="2"><result status="valid" time="3.82"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC permut_modular_multiplier.5.1.0.0.1" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC permut_modular_multiplier.5.1.0.0.1.0" proved="true">
       <proof prover="2"><result status="valid" time="1.58"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC permut_modular_multiplier.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="383"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="384"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="385"/></proof>
  </goal>
  <goal name="VC permut_modular_multiplier.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 4) 0))" arg2="(kronecker(kronecker (ket n i) (ket (n + 3) 0)) (ket 1 0))">
   <goal name="VC permut_modular_multiplier.9.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(kronecker (ket n  (mod (pick * i) bound)) (ket (n + 4) 0))" arg2="(kronecker(kronecker (ket n  (mod (pick * i) bound)) (ket (n + 3) 0)) (ket 1 0))">
    <goal name="VC permut_modular_multiplier.9.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_to_sem">
     <goal name="VC permut_modular_multiplier.9.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(width result)" arg2="(n+(n+3)+1)">
      <goal name="VC permut_modular_multiplier.9.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="VC permut_modular_multiplier.9.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.70" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.70" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="VC permut_modular_multiplier.9.0.0.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.70" steps="390"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.72" steps="390"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.0.0.2.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="4.00" steps="392"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.0.0.2.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="4.53" steps="392"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC permut_modular_multiplier.9.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.69" steps="390"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC permut_modular_multiplier.9.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.67" steps="390"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC permut_modular_multiplier.9.0.0.1" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC permut_modular_multiplier.9.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="result_def">
       <goal name="VC permut_modular_multiplier.9.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="with_permutation_kronecker">
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.01" steps="348"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.89" steps="348"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="7.86"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+(n+3))">
         <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.3.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.3.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.3.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.89" steps="348"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.3.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.54"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.3.0.3" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="5.88"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="0.90" steps="348"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="6.27"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.5" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="(n+(n+3))">
         <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.5.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.5.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.81" steps="348"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.5.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.5.0.2" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="8.21"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.5.0.3" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="7.06"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.5.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="0.95" steps="348"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.58"/></proof>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.7" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_is_a_ket_basis_elt">
         <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.7.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.54"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.7.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ket_is_a_ket_basis_elt">
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.7.1.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.90" steps="348"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.7.1.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.53"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="sem_to_path_sem">
         <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
          <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(modular_multiplier_with_ancillas pick bound n 0)" arg2="(modular_multiplier_with_ancillas pick bound n i)">
           <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
             <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="modular_multiplier_with_ancillas_spec3">
              <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.91" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.92" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.93" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.94" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.79" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.90" steps="348"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="modular_multiplier_with_ancillas_spec1">
             <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="goal_comm">
              <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="modular_multiplier_with_ancillas_spec">
               <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.90" steps="348"/></proof>
               </goal>
               <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.97" steps="348"/></proof>
               </goal>
               <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.95" steps="348"/></proof>
               </goal>
               <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="1.00" steps="348"/></proof>
               </goal>
               <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0.0.4" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.81" steps="348"/></proof>
               </goal>
               <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.0.0.5" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.78" steps="348"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.78" steps="348"/></proof>
             </goal>
             <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
             </goal>
             <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.3" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.81" steps="348"/></proof>
             </goal>
             <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.4" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.89" steps="348"/></proof>
             </goal>
             <goal name="VC permut_modular_multiplier.9.0.0.1.0.0.8.0.0.1.0.5" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.88" steps="348"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC permut_modular_multiplier.9.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
     <goal name="VC permut_modular_multiplier.9.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_eq">
      <goal name="VC permut_modular_multiplier.9.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.71" steps="390"/></proof>
      </goal>
      <goal name="VC permut_modular_multiplier.9.0.1.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_kets">
       <goal name="VC permut_modular_multiplier.9.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.75" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.0.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.67" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.0.1.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.65" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.0.1.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="4.10" steps="392"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.0.1.0.1.4" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="4.64" steps="392"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC permut_modular_multiplier.9.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_kets_">
    <goal name="VC permut_modular_multiplier.9.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_kets_">
     <goal name="VC permut_modular_multiplier.9.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_kets_">
      <goal name="VC permut_modular_multiplier.9.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ket_eq">
       <goal name="VC permut_modular_multiplier.9.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.70" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.59" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.1.0.0.0.2" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(((i * power_ 2 (n + 3)) + 0) * power_ 2 1)" arg2="(i *(( power_ 2 (n + 3))  * power_ 2 1)+0)">
        <goal name="VC permut_modular_multiplier.9.1.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="power__sum_rev">
         <goal name="VC permut_modular_multiplier.9.1.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.63" steps="390"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.9.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.70" steps="390"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.9.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.70" steps="390"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.9.1.0.0.0.2.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.68" steps="390"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC permut_modular_multiplier.9.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.57" steps="390"/></proof>
      </goal>
      <goal name="VC permut_modular_multiplier.9.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.67" steps="390"/></proof>
      </goal>
      <goal name="VC permut_modular_multiplier.9.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC permut_modular_multiplier.9.1.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="4.16" steps="392"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.9.1.0.0.3.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(power_ 2 (n + (n + 3)))" arg2="(power_ 2 n * power_ 2 ( (n + 3)))">
        <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_zero">
         <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.0.0" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="(i &lt; power_ 2 n )">
          <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="0.69" steps="390"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.0.0.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="comp_trans_mult">
           <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.61" steps="392"/></proof>
           </goal>
           <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="4.01" steps="394"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.62" steps="390"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.9.1.0.0.3.1.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="4.87" steps="392"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC permut_modular_multiplier.9.1.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="4.77" steps="392"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC permut_modular_multiplier.9.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.66" steps="390"/></proof>
     </goal>
     <goal name="VC permut_modular_multiplier.9.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.67" steps="390"/></proof>
     </goal>
     <goal name="VC permut_modular_multiplier.9.1.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.64" steps="390"/></proof>
     </goal>
     <goal name="VC permut_modular_multiplier.9.1.0.4" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="4.27" steps="392"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC permut_modular_multiplier.9.1.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.65" steps="390"/></proof>
    </goal>
    <goal name="VC permut_modular_multiplier.9.1.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.73" steps="390"/></proof>
    </goal>
    <goal name="VC permut_modular_multiplier.9.1.3" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.63" steps="390"/></proof>
    </goal>
    <goal name="VC permut_modular_multiplier.9.1.4" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="4.75" steps="392"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC permut_modular_multiplier.10" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (ket n i) (ket (n + 4) 0))" arg2="(kronecker(kronecker (ket n i) (ket (n + 3) 0)) (ket 1 0))">
   <goal name="VC permut_modular_multiplier.10.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_to_sem">
    <goal name="VC permut_modular_multiplier.10.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(width result)" arg2="(n+(n+3)+1)">
     <goal name="VC permut_modular_multiplier.10.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC permut_modular_multiplier.10.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.67" steps="390"/></proof>
      </goal>
      <goal name="VC permut_modular_multiplier.10.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.59" steps="390"/></proof>
      </goal>
      <goal name="VC permut_modular_multiplier.10.0.0.0.2" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_ket_l">
       <goal name="VC permut_modular_multiplier.10.0.0.0.2.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.62" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.0.0.2.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.60" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.0.0.2.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="4.03" steps="392"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.0.0.2.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="4.02" steps="392"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC permut_modular_multiplier.10.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.66" steps="390"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC permut_modular_multiplier.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.68" steps="390"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC permut_modular_multiplier.10.0.1" expl="apply premises" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC permut_modular_multiplier.10.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="result_def">
      <goal name="VC permut_modular_multiplier.10.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="with_permutation_kronecker">
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.84" steps="348"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.78" steps="348"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.58"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.3" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="( n+ (n+3))">
        <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.92" steps="348"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.76" steps="348"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.0.2" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ket_l">
          <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.0.2.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.82" steps="348"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.0.2.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.86" steps="348"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.0.3" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.65"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.10.0.1.0.0.3.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.86" steps="348"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="6.15"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.5" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(((2 * n) + 4) - 1)" arg2="( n+ (n+3))">
        <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.76" steps="348"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.88" steps="348"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.0.2" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ket_l">
          <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.0.2.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.89" steps="348"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.0.2.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.0.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="5.72"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.10.0.1.0.0.5.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.79" steps="348"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.6" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.57"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.7" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_is_a_ket_basis_elt">
        <goal name="VC permut_modular_multiplier.10.0.1.0.0.7.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_is_a_ket_basis_elt">
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.7.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.7.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="9.41"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.10.0.1.0.0.7.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_is_a_ket_basis_elt">
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.7.1.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.86" steps="348"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.7.1.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.52"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC permut_modular_multiplier.10.0.1.0.0.8" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sem_to_path_sem">
        <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
         <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(modular_multiplier_with_ancillas pick bound n 0)" arg2="(modular_multiplier_with_ancillas pick bound n i)">
          <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="7.60"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="modular_multiplier_with_ancillas_spec1">
            <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="goal_comm">
             <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="modular_multiplier_with_ancillas_spec">
              <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.86" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.85" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.89" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.79" steps="348"/></proof>
              </goal>
              <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.86" steps="348"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.89" steps="348"/></proof>
            </goal>
            <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.84" steps="348"/></proof>
            </goal>
            <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.3" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
            </goal>
            <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.4" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.85" steps="348"/></proof>
            </goal>
            <goal name="VC permut_modular_multiplier.10.0.1.0.0.8.0.0.1.0.5" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.83" steps="348"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC permut_modular_multiplier.10.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_kets_">
    <goal name="VC permut_modular_multiplier.10.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_kets_">
     <goal name="VC permut_modular_multiplier.10.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_kets_">
      <goal name="VC permut_modular_multiplier.10.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ket_eq">
       <goal name="VC permut_modular_multiplier.10.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.59" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.56" steps="390"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.1.0.0.0.2" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(((i * power_ 2 (n + 3)) + 0) * power_ 2 1)" arg2="(i *(( power_ 2 (n + 3))  * power_ 2 1)+0)">
        <goal name="VC permut_modular_multiplier.10.1.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="power__sum_rev">
         <goal name="VC permut_modular_multiplier.10.1.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.66" steps="390"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.63" steps="390"/></proof>
         </goal>
         <goal name="VC permut_modular_multiplier.10.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.65" steps="390"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.10.1.0.0.0.2.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.63" steps="390"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC permut_modular_multiplier.10.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.61" steps="390"/></proof>
      </goal>
      <goal name="VC permut_modular_multiplier.10.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.60" steps="390"/></proof>
      </goal>
      <goal name="VC permut_modular_multiplier.10.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC permut_modular_multiplier.10.1.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="4.21" steps="392"/></proof>
       </goal>
       <goal name="VC permut_modular_multiplier.10.1.0.0.3.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(power_ 2 (n + (n + 3)))" arg2="(power_ 2 n * power_ 2 ( (n + 3)))">
        <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_zero">
         <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.0.0" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="(i &lt; power_ 2 n )">
          <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="0.78" steps="390"/></proof>
          </goal>
          <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.0.0.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="comp_trans_mult">
           <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.71" steps="390"/></proof>
           </goal>
           <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="4.06" steps="392"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.69" steps="390"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permut_modular_multiplier.10.1.0.0.3.1.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="4.01" steps="392"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC permut_modular_multiplier.10.1.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.90" steps="392"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC permut_modular_multiplier.10.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.57" steps="390"/></proof>
     </goal>
     <goal name="VC permut_modular_multiplier.10.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.59" steps="390"/></proof>
     </goal>
     <goal name="VC permut_modular_multiplier.10.1.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.56" steps="390"/></proof>
     </goal>
     <goal name="VC permut_modular_multiplier.10.1.0.4" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="4.94" steps="392"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC permut_modular_multiplier.10.1.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.65" steps="390"/></proof>
    </goal>
    <goal name="VC permut_modular_multiplier.10.1.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.63" steps="390"/></proof>
    </goal>
    <goal name="VC permut_modular_multiplier.10.1.3" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.72" steps="390"/></proof>
    </goal>
    <goal name="VC permut_modular_multiplier.10.1.4" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="4.29" steps="392"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_multiplier" expl="VC for modular_multiplier" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modular_multiplier.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.23" steps="358"/></proof>
  </goal>
  <goal name="VC modular_multiplier.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.71" steps="356"/></proof>
  </goal>
  <goal name="VC modular_multiplier.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.35" steps="357"/></proof>
  </goal>
  <goal name="VC modular_multiplier.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="360"/></proof>
  </goal>
  <goal name="VC modular_multiplier.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.88"/></proof>
  </goal>
  <goal name="VC modular_multiplier.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="362"/></proof>
  </goal>
  <goal name="VC modular_multiplier.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="362"/></proof>
  </goal>
  <goal name="VC modular_multiplier.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC modular_multiplier.7.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(fun x -&gt; if exists i. 0&lt;= i &lt; bound /\ x = ket n i then (ket n (mod (mod pick bound * (ket_to_int x)) bound))  else x)">
    <goal name="VC modular_multiplier.7.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC modular_multiplier.7.0.0.0" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC modular_multiplier.7.0.0.0.0" proved="true">
      <transf name="apply" proved="true" arg1="sem_to_path_sem">
       <goal name="VC modular_multiplier.7.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC modular_multiplier.7.0.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H">
          <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(ket_to_int (ket n i))" arg2="i">
           <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="3.78" steps="376"/></proof>
           </goal>
           <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="ket_to_int_ket">
            <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.68" steps="374"/></proof>
            </goal>
            <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="power_to_">
             <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.71" steps="374"/></proof>
             </goal>
             <goal name="VC modular_multiplier.7.0.0.0.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.72" steps="374"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="x" arg2="(ket n (ket_to_int x))">
          <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="H6">
           <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(ket_to_int x&lt; bound -&gt; (exists i:int. (0 &lt;= i /\ i &lt; bound) /\ x = ket n i))">
             <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="exists" proved="true" arg1="(ket_to_int x)">
               <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0.0.0.0.0" proved="true">
                <proof prover="3"><result status="valid" time="3.57" steps="372"/></proof>
                </goal>
                <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0.0.0.0.1" proved="true">
                <proof prover="3"><result status="valid" time="0.68" steps="370"/></proof>
                </goal>
                <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0.0.0.0.2" proved="true">
                <proof prover="0"><result status="valid" time="2.07"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.61"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="power_no_">
             <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.59"/></proof>
             </goal>
             <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.57" steps="368"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC modular_multiplier.7.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="1.39"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_multiplier.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="368"/></proof>
  </goal>
  <goal name="VC modular_multiplier.9" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="369"/></proof>
  </goal>
  <goal name="VC modular_multiplier.10" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="370"/></proof>
  </goal>
  <goal name="VC modular_multiplier.11" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
   <goal name="VC modular_multiplier.11.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.68" steps="377"/></proof>
   </goal>
   <goal name="VC modular_multiplier.11.1" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(mod (pick * i) bound)" arg2="(mod (mod pick bound * i) bound)">
    <goal name="VC modular_multiplier.11.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H10">
     <goal name="VC modular_multiplier.11.1.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.65" steps="375"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modular_multiplier.11.1.1" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="(mod pick bound * i)" arg2="(mod pick bound * mod i bound)">
     <goal name="VC modular_multiplier.11.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_mod_mult">
      <goal name="VC modular_multiplier.11.1.1.0.0" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.75" steps="375"/></proof>
      </goal>
      <goal name="VC modular_multiplier.11.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.72" steps="375"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC modular_multiplier.11.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="3.65" steps="377"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_multiplier.12" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H7">
   <goal name="VC modular_multiplier.12.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="4.03" steps="377"/></proof>
   </goal>
   <goal name="VC modular_multiplier.12.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="3.60" steps="377"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC multiplier_gate_bound" expl="VC for multiplier_gate_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC multiplier_gate_bound.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="350"/></proof>
  </goal>
  <goal name="VC multiplier_gate_bound.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="352"/></proof>
  </goal>
  <goal name="VC multiplier_gate_bound.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.12" steps="355"/></proof>
  </goal>
  <goal name="VC multiplier_gate_bound.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.16" steps="357"/></proof>
  </goal>
  <goal name="VC multiplier_gate_bound.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="357"/></proof>
  </goal>
  <goal name="VC multiplier_gate_bound.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.53" steps="354"/></proof>
  </goal>
  <goal name="VC multiplier_gate_bound.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.21" steps="368"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
