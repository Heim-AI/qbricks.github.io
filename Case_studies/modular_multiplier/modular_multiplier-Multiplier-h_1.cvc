%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 real arithmetic
div_by_zero: (REAL) -> REAL;
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witness_sort
  ASSERT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

infix_eqeq: (ty, uni, uni) -> BOOLEAN;

t : TYPE;

t1: ty;

infix_asdt: (t, t) -> t;

set: (ty) -> ty;

mem: (ty, uni, uni) -> BOOLEAN;

div: (INT, INT) -> INT;

mod: (INT, INT) -> INT;

infix_mngt: (ty, ty) -> ty;

infix_at: (ty, ty, uni, uni) -> uni;

% infix @_sort
  ASSERT
  (FORALL (a1 : ty, b20 : ty):
  (FORALL (x8 : uni, x9 : uni): (sort(b20, infix_at(b20, a1, x8, x9)))));

int_iterate: (ty, uni, uni, INT, INT) -> uni;

% int_iterate_sort
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (x8 : uni, x9 : uni, x10 : INT, x11 : INT): (sort(im1, 
  int_iterate(im1, x8, x9, x10, x11)))));

ind_isum: ((ARRAY INT OF INT), INT, INT) -> INT;

infix_pl_closure: (ARRAY INT OF (ARRAY INT OF INT));

t2tb5: ((ARRAY INT OF INT)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY INT OF INT)): (sort(infix_mngt(int, int), t2tb5(x8))));

tb2t5: (uni) -> (ARRAY INT OF INT);

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF INT)):PATTERN (t2tb5(i26)):  (tb2t5(
  t2tb5(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb5(tb2t5(j))):  (t2tb5(tb2t5(j)) = j));

t2tb3: (INT) -> uni;

% t2tb_sort
  ASSERT (FORALL (x8 : INT): (sort(int, t2tb3(x8))));

tb2t3: (uni) -> INT;

% BridgeL
  ASSERT
  (FORALL (i26 : INT):PATTERN (t2tb3(i26)):  (tb2t3(t2tb3(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb3(tb2t3(j))):  (t2tb3(tb2t3(j)) = j));

t2tb13: ((ARRAY INT OF (ARRAY INT OF INT))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY INT OF (ARRAY INT OF INT))): (sort(infix_mngt(int, 
  infix_mngt(int, int)), t2tb13(x8))));

tb2t13: (uni) -> (ARRAY INT OF (ARRAY INT OF INT));

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF (ARRAY INT OF INT))):PATTERN (t2tb13(i26)):  (
  tb2t13(t2tb13(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb13(tb2t13(j))):  (t2tb13(tb2t13(j)) = j));

% infix +_closure_def
  ASSERT
  (FORALL (y : INT, y1 : INT): (tb2t3(infix_at(int, int, infix_at(
  infix_mngt(int, int), int, t2tb13(infix_pl_closure), t2tb3(y)), 
  t2tb3(y1))) = (y + y1)));

% ind_isum_def
  ASSERT
  (FORALL (f : (ARRAY INT OF INT), i26 : INT, j : INT): (ind_isum(f, i26,
  j) = tb2t3(int_iterate(int, t2tb13(infix_pl_closure), t2tb5(f), i26, j))));

power: (INT, INT) -> INT;

power_: (INT, INT) -> INT;

% power__def
  ASSERT
  (FORALL (e1 : INT, i26 : INT):
  (IF (0 <= i26) THEN (power_(e1, i26) = power(e1, i26)) ELSE (power_(e1,
  i26) = 0) ENDIF));

polysquare: (INT, INT, INT, INT) -> INT;

angle : TYPE;

angle1: ty;

ang_add: (angle, angle) -> angle;

ang_zero: angle;

matrix: (ty) -> ty;

elts: (ty, uni) -> uni;

% elts_sort
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (x8 : uni): (sort(infix_mngt(int, infix_mngt(int, a1)), elts(a1,
  x8)))));

rows: (ty, uni) -> INT;

columns: (ty, uni) -> INT;

valid_index: (ty, uni, INT, INT) -> BOOLEAN;

% valid_index_def
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (a2 : uni, r : INT, c : INT):
  ((valid_index(a1, a2, r, c))
  <=> (((0 <= r) AND (r < rows(a1, a2)))
      AND ((0 <= c) AND (c < columns(a1, a2)))))));

get1: (ty, uni, INT, INT) -> uni;

% get_sort
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (x8 : uni, x9 : INT, x10 : INT): (sort(a1, get1(a1, x8, x9, x10)))));

% get_def
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (a2 : uni, r : INT, c : INT): (get1(a1, a2, r, c) = infix_at(a1,
  int, infix_at(infix_mngt(int, a1), int, elts(a1, a2), t2tb3(r)), 
  t2tb3(c)))));

make_f: (ty, INT, INT, uni) -> uni;

% make_f_sort
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (x8 : INT, x9 : INT, x10 : uni): (sort(matrix(a1), make_f(a1, x8,
  x9, x10)))));

matrix_t: TYPE;

kronecker: (matrix_t, matrix_t) -> matrix_t;

result9: (matrix_t, matrix_t) -> (ARRAY INT OF (ARRAY INT OF t));

t2tb8: ((ARRAY INT OF t)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY INT OF t)): (sort(infix_mngt(int, t1), t2tb8(x8))));

tb2t8: (uni) -> (ARRAY INT OF t);

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF t)):PATTERN (t2tb8(i26)):  (tb2t8(
  t2tb8(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb8(tb2t8(j))): 
  ((sort(infix_mngt(int, t1), j)) => (t2tb8(tb2t8(j)) = j)));

t2tb11: ((ARRAY INT OF (ARRAY INT OF t))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY INT OF (ARRAY INT OF t))): (sort(infix_mngt(int, 
  infix_mngt(int, t1)), t2tb11(x8))));

tb2t11: (uni) -> (ARRAY INT OF (ARRAY INT OF t));

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF (ARRAY INT OF t))):PATTERN (t2tb11(i26)):  (
  tb2t11(t2tb11(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb11(tb2t11(j))): 
  ((sort(infix_mngt(int, infix_mngt(int, t1)), j)) => (t2tb11(
  tb2t11(j)) = j)));

t2tb: (t) -> uni;

% t2tb_sort
  ASSERT (FORALL (x8 : t): (sort(t1, t2tb(x8))));

tb2t: (uni) -> t;

% BridgeL
  ASSERT (FORALL (i26 : t):PATTERN (t2tb(i26)):  (tb2t(t2tb(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb(tb2t(j))): 
  ((sort(t1, j)) => (t2tb(tb2t(j)) = j)));

t2tb18: (matrix_t) -> uni;

% t2tb_sort
  ASSERT (FORALL (x8 : matrix_t): (sort(matrix(t1), t2tb18(x8))));

tb2t18: (uni) -> matrix_t;

% BridgeL
  ASSERT
  (FORALL (i26 : matrix_t):PATTERN (t2tb18(i26)):  (tb2t18(
  t2tb18(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb18(tb2t18(j))): 
  ((sort(matrix(t1), j)) => (t2tb18(tb2t18(j)) = j)));

% result_def
  ASSERT
  (FORALL (m : matrix_t, n28 : matrix_t, i26 : INT, j : INT): (tb2t(
  infix_at(t1, int, infix_at(infix_mngt(int, t1), int, t2tb11(result9(m,
  n28)), t2tb3(i26)), t2tb3(j))) = infix_asdt(tb2t(get1(t1, t2tb18(m), 
  div(i26, rows(t1, t2tb18(n28))), div(j, columns(t1, t2tb18(n28))))), tb2t(
  get1(t1, t2tb18(n28), mod(i26, rows(t1, t2tb18(n28))), mod(j, columns(t1, 
  t2tb18(n28))))))));

% kronecker_def
  ASSERT
  (FORALL (m : matrix_t, n28 : matrix_t): (kronecker(m, n28) = tb2t18(
  make_f(t1, (rows(t1, t2tb18(m)) * rows(t1, t2tb18(n28))), (columns(t1, 
  t2tb18(m)) * columns(t1, t2tb18(n28))), t2tb11(result9(m, n28))))));

max: (INT, INT) -> INT;

% max_def
  ASSERT
  (FORALL (x8 : INT, y : INT):
  (IF (x8 <= y) THEN (max(x8, y) = y) ELSE (max(x8, y) = x8) ENDIF));

ang_sum: ((ARRAY INT OF angle), INT, INT) -> angle;

ang_add_closure: (ARRAY angle OF (ARRAY angle OF angle));

t2tb23: ((ARRAY angle OF angle)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY angle OF angle)): (sort(infix_mngt(angle1, angle1), 
  t2tb23(x8))));

tb2t23: (uni) -> (ARRAY angle OF angle);

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY angle OF angle)):PATTERN (t2tb23(i26)):  (tb2t23(
  t2tb23(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb23(tb2t23(j))): 
  ((sort(infix_mngt(angle1, angle1), j)) => (t2tb23(tb2t23(j)) = j)));

t2tb24: (angle) -> uni;

% t2tb_sort
  ASSERT (FORALL (x8 : angle): (sort(angle1, t2tb24(x8))));

tb2t24: (uni) -> angle;

% BridgeL
  ASSERT
  (FORALL (i26 : angle):PATTERN (t2tb24(i26)):  (tb2t24(t2tb24(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb24(tb2t24(j))): 
  ((sort(angle1, j)) => (t2tb24(tb2t24(j)) = j)));

t2tb25: ((ARRAY angle OF (ARRAY angle OF angle))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY angle OF (ARRAY angle OF angle))): (sort(
  infix_mngt(angle1, infix_mngt(angle1, angle1)), t2tb25(x8))));

tb2t25: (uni) -> (ARRAY angle OF (ARRAY angle OF angle));

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY angle OF (ARRAY angle OF angle))):PATTERN (
  t2tb25(i26)):  (tb2t25(t2tb25(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb25(tb2t25(j))): 
  ((sort(infix_mngt(angle1, infix_mngt(angle1, angle1)), j)) => (t2tb25(
  tb2t25(j)) = j)));

% ang_add_closure_def
  ASSERT
  (FORALL (y : angle, y1 : angle): (tb2t24(infix_at(angle1, angle1, infix_at(
  infix_mngt(angle1, angle1), angle1, t2tb25(ang_add_closure), t2tb24(y)), 
  t2tb24(y1))) = ang_add(y, y1)));

t2tb26: ((ARRAY INT OF angle)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY INT OF angle)): (sort(infix_mngt(int, angle1), 
  t2tb26(x8))));

tb2t26: (uni) -> (ARRAY INT OF angle);

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF angle)):PATTERN (t2tb26(i26)):  (tb2t26(
  t2tb26(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb26(tb2t26(j))): 
  ((sort(infix_mngt(int, angle1), j)) => (t2tb26(tb2t26(j)) = j)));

% ang_sum_def
  ASSERT
  (FORALL (f : (ARRAY INT OF angle), i26 : INT, j : INT):
  (IF (j <= i26) THEN (ang_sum(f, i26, j) = ang_zero) ELSE (ang_sum(f, i26,
  j) = tb2t24(int_iterate(angle1, t2tb25(ang_add_closure), t2tb26(f), i26,
  j))) ENDIF));

bitvec : TYPE;

bitvec1: ty;

value: (bitvec) -> (ARRAY INT OF INT);

length: (bitvec) -> INT;

in_range: (bitvec, INT) -> BOOLEAN;

% in_range_def
  ASSERT
  (FORALL (bv : bitvec, r : INT):
  ((in_range(bv, r)) <=> ((0 <= r) AND (r < length(bv)))));

bv_to_int: (bitvec) -> INT;

result66: (bitvec) -> (ARRAY INT OF INT);

% result_def
  ASSERT
  (FORALL (bv : bitvec, k : INT): (tb2t3(infix_at(int, int, t2tb5(
  result66(bv)), 
  t2tb3(k))) = (IF (in_range(bv, k)) THEN (tb2t3(infix_at(int, int, t2tb5(
               value(bv)), t2tb3(k))) * power(2, ((length(bv) - 1) - k)))
               ELSE 1 ENDIF)));

% bv_to_int_def
  ASSERT
  (FORALL (bv : bitvec): (bv_to_int(bv) = ind_isum(result66(bv), 0, 
  length(bv))));

hpart: (bitvec, INT) -> bitvec;

tpart: (bitvec, INT) -> bitvec;

htpart: (bitvec, INT, INT) -> bitvec;

is_a_ket_l: (matrix_t, INT) -> BOOLEAN;

% is_a_ket_l_def
  ASSERT
  (FORALL (m : matrix_t, l : INT):
  ((is_a_ket_l(m, l))
  <=> ((0 <= l)
      AND ((columns(t1, t2tb18(m)) = 1) AND (rows(t1, t2tb18(m)) = power(2,
          l))))));

ket: (INT, INT) -> matrix_t;

bin_to_ket: (INT, (ARRAY INT OF INT)) -> matrix_t;

bv_to_ket: (bitvec) -> matrix_t;

% bv_to_ket_def
  ASSERT
  (FORALL (bv : bitvec): (bv_to_ket(bv) = ket(length(bv), bv_to_int(bv))));

circuit : TYPE;

circuit1: ty;

width: (circuit) -> INT;

size: (circuit) -> INT;

ancillas: (circuit) -> INT;

range: (circuit) -> INT;

basis_ket: (circuit, bitvec, bitvec) -> bitvec;

basis_ket_i: (circuit, bitvec, bitvec, INT) -> INT;

% basis_ket_i_def
  ASSERT
  (FORALL (c : circuit, x8 : bitvec, y : bitvec, i26 : INT): (basis_ket_i(c,
  x8, y, i26) = tb2t3(infix_at(int, int, t2tb5(value(basis_ket(c, x8, y))), 
  t2tb3(i26)))));

ang_ind_i: (circuit, bitvec, bitvec, INT) -> angle;

ang_ind_bound: (circuit) -> INT;

ang_ind: (circuit, bitvec, bitvec) -> angle;

ang_ind_i_closure: (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))));

t2tb50: ((ARRAY bitvec OF (ARRAY INT OF angle))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY bitvec OF (ARRAY INT OF angle))): (sort(
  infix_mngt(bitvec1, infix_mngt(int, angle1)), t2tb50(x8))));

tb2t50: (uni) -> (ARRAY bitvec OF (ARRAY INT OF angle));

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY bitvec OF (ARRAY INT OF angle))):PATTERN (
  t2tb50(i26)):  (tb2t50(t2tb50(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb50(tb2t50(j))): 
  ((sort(infix_mngt(bitvec1, infix_mngt(int, angle1)), j)) => (t2tb50(
  tb2t50(j)) = j)));

t2tb30: (bitvec) -> uni;

% t2tb_sort
  ASSERT (FORALL (x8 : bitvec): (sort(bitvec1, t2tb30(x8))));

tb2t30: (uni) -> bitvec;

% BridgeL
  ASSERT
  (FORALL (i26 : bitvec):PATTERN (t2tb30(i26)):  (tb2t30(t2tb30(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb30(tb2t30(j))): 
  ((sort(bitvec1, j)) => (t2tb30(tb2t30(j)) = j)));

t2tb51: ((ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)))):
  (sort(infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))), 
  t2tb51(x8))));

tb2t51: (uni) -> (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)));

% BridgeL
  ASSERT
  (FORALL
  (i26 : (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)))):PATTERN (
  t2tb51(i26)):  (tb2t51(t2tb51(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb51(tb2t51(j))): 
  ((sort(infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))),
  j)) => (t2tb51(tb2t51(j)) = j)));

t2tb52: (circuit) -> uni;

% t2tb_sort
  ASSERT (FORALL (x8 : circuit): (sort(circuit1, t2tb52(x8))));

tb2t52: (uni) -> circuit;

% BridgeL
  ASSERT
  (FORALL (i26 : circuit):PATTERN (t2tb52(i26)):  (tb2t52(
  t2tb52(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb52(tb2t52(j))): 
  ((sort(circuit1, j)) => (t2tb52(tb2t52(j)) = j)));

t2tb53: ((ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL
  (x8 : (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))))):
  (sort(infix_mngt(circuit1, infix_mngt(bitvec1, infix_mngt(bitvec1, 
  infix_mngt(int, angle1)))), t2tb53(x8))));

tb2t53: (uni) -> (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))));

% BridgeL
  ASSERT
  (FORALL
  (i26 : (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))))):PATTERN (
  t2tb53(i26)):  (tb2t53(t2tb53(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb53(tb2t53(j))): 
  ((sort(infix_mngt(circuit1, infix_mngt(bitvec1, infix_mngt(bitvec1, 
  infix_mngt(int, angle1)))), j)) => (t2tb53(tb2t53(j)) = j)));

% ang_ind_i_closure_def
  ASSERT
  (FORALL (y : circuit, y1 : bitvec, y2 : bitvec, y3 : INT): (tb2t24(
  infix_at(angle1, int, infix_at(infix_mngt(int, angle1), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(int, angle1)), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))),
  circuit1, t2tb53(ang_ind_i_closure), t2tb52(y)), t2tb30(y1)), t2tb30(y2)), 
  t2tb3(y3))) = ang_ind_i(y, y1, y2, y3)));

% ang_ind_def
  ASSERT
  (FORALL (c : circuit, x8 : bitvec, y : bitvec): (ang_ind(c, x8, y) = 
  ang_sum(tb2t26(infix_at(infix_mngt(int, angle1), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(int, angle1)), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))),
  circuit1, t2tb53(ang_ind_i_closure), t2tb52(c)), t2tb30(x8)), t2tb30(y))),
  0, ang_ind_bound(c))));

sequence: (circuit, circuit) -> circuit;

sequence_iter_anc: ((ARRAY INT OF circuit), INT, INT, INT, INT,
  INT) -> circuit;

pat_sem: (circuit, matrix_t) -> matrix_t;

sem: (circuit, matrix_t, matrix_t) -> BOOLEAN;

% sem_def
  ASSERT
  (FORALL (c : circuit, x8 : matrix_t, y : matrix_t):
  ((sem(c, x8, y))
  <=> ((is_a_ket_l(x8, width(c))) AND (infix_eqeq(matrix(t1), t2tb18(
      pat_sem(c, x8)), t2tb18(y))))));

place: (circuit, INT, INT) -> circuit;

cont_size: INT;

cont: (circuit, INT, INT, INT) -> circuit;

apply_qft: (INT, INT) -> matrix_t;

modular_adder_: (INT, INT, INT, INT) -> circuit;

modular_adder: (INT, INT, INT) -> circuit;

adder_gate_bound: (INT) -> INT;

pick26: INT;

bound27: INT;

b19: INT;

n27: INT;

x7: bitvec;

i25: INT;

result116: circuit;

% H
  ASSERT (columns(t1, t2tb18(bv_to_ket(x7))) = 1);

% H
  ASSERT (bv_to_ket(x7) = bin_to_ket(length(x7), value(x7)));

% H
  ASSERT (rows(t1, t2tb18(kronecker(bv_to_ket(x7), apply_qft((n27 + 1),
  b19)))) = (rows(t1, t2tb18(bv_to_ket(x7))) * rows(t1, t2tb18(
  apply_qft((n27 + 1), b19)))));

% H
  ASSERT (columns(t1, t2tb18(kronecker(bv_to_ket(x7), apply_qft((n27 + 1),
  b19)))) = (columns(t1, t2tb18(bv_to_ket(x7))) * columns(t1, t2tb18(
  apply_qft((n27 + 1), b19)))));

% H
  ASSERT
  (FORALL (i26 : INT, j : INT):
  ((valid_index(t1, t2tb18(kronecker(bv_to_ket(x7), apply_qft((n27 + 1),
  b19))), i26, j)) => (tb2t(get1(t1, t2tb18(kronecker(bv_to_ket(x7), 
  apply_qft((n27 + 1), b19))), i26, j)) = infix_asdt(tb2t(get1(t1, t2tb18(
  bv_to_ket(x7)), div(i26, rows(t1, t2tb18(apply_qft((n27 + 1), b19)))), 
  div(j, columns(t1, t2tb18(apply_qft((n27 + 1), b19)))))), tb2t(get1(t1, 
  t2tb18(apply_qft((n27 + 1), b19)), mod(i26, rows(t1, t2tb18(
  apply_qft((n27 + 1), b19)))), mod(j, columns(t1, t2tb18(
  apply_qft((n27 + 1), b19))))))))));

% H
  ASSERT (size(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27)) <= polysquare((n27 + 1), ((14 * cont_size) + 12), 0,
  ((cont_size * 8) + 8)));

% H
  ASSERT (ancillas(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27)) = 1);

% H
  ASSERT (width(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27)) = (n27 + 1));

% H
  ASSERT
  (FORALL (b20 : INT):
  (((0 <= b20) AND (b20 < bound27)) => (modular_adder((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27, n27) = modular_adder_(mod((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27), bound27, n27, b20))));

% H
  ASSERT
  (FORALL (b20 : INT):
  (((0 <= b20) AND (b20 < bound27)) => (pat_sem(modular_adder((pick26 * 
  power_(2, ((n27 - i25) - 1))), bound27, n27), apply_qft((n27 + 1), b20)) = 
  apply_qft((n27 + 1), mod(((pick26 * power_(2, ((n27 - i25) - 1))) + b20),
  bound27)))));

% H
  ASSERT (size(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27), i25, n27, ((2 * n27) + 1))) <= (size(
  modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27,
  n27)) * cont_size));

% H
  ASSERT (ancillas(cont(modular_adder((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27, n27), i25, n27, ((2 * n27) + 1))) = 0);

% H
  ASSERT (range(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27), i25, n27, ((2 * n27) + 1))) = range(modular_adder((pick26 * 
  power_(2, ((n27 - i25) - 1))), bound27, n27)));

% H
  ASSERT (width(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27), i25, n27, ((2 * n27) + 1))) = ((2 * n27) + 1));

% H
  ASSERT (ancillas(cont(modular_adder((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27, n27), i25, n27, ((2 * n27) + 1))) = ancillas(
  modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27, n27)));

% H
  ASSERT
  (FORALL (bv : bitvec, y : bitvec):
  ((length(bv) = ((2 * n27) + 1))
  => ((length(y) = range(modular_adder((pick26 * power_(2,
     ((n27 - i25) - 1))), bound27, n27)))
     => ((tb2t3(infix_at(int, int, t2tb5(value(bv)), t2tb3(i25))) = 0) => (
        basis_ket(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
        bound27, n27), i25, n27, ((2 * n27) + 1)), bv, y) = bv)))));

% H
  ASSERT
  (FORALL (bv : bitvec, y : bitvec):
  ((length(bv) = ((2 * n27) + 1))
  => ((length(y) = range(modular_adder((pick26 * power_(2,
     ((n27 - i25) - 1))), bound27, n27)))
     => ((tb2t3(infix_at(int, int, t2tb5(value(bv)), t2tb3(i25))) = 0) => (
        ang_ind(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
        bound27, n27), i25, n27, ((2 * n27) + 1)), bv, y) = ang_zero)))));

% H
  ASSERT
  (FORALL (bv : bitvec, y : bitvec):
  (FORALL (i26 : INT):
  ((length(bv) = ((2 * n27) + 1))
  => ((length(y) = range(modular_adder((pick26 * power_(2,
     ((n27 - i25) - 1))), bound27, n27)))
     => (((0 <= i26) AND (i26 < ((2 * n27) + 1)))
        => ((tb2t3(infix_at(int, int, t2tb5(value(bv)), t2tb3(i25))) = 1)
           => (basis_ket_i(cont(modular_adder((pick26 * power_(2,
           ((n27 - i25) - 1))), bound27, n27), i25, n27, ((2 * n27) + 1)),
           bv, y,
           i26) = (IF ((n27 <= i26) AND (i26 < (n27 + width(
                      modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
                      bound27, n27)))))
                  THEN basis_ket_i(modular_adder((pick26 * power_(2,
                  ((n27 - i25) - 1))), bound27, n27), htpart(bv, n27, width(
                  modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
                  bound27, n27))), y, (i26 - n27)) ELSE tb2t3(infix_at(int,
                  int, t2tb5(value(bv)), t2tb3(i26))) ENDIF))))))));

% H
  ASSERT
  (FORALL (bv : bitvec, y : bitvec):
  ((length(bv) = ((2 * n27) + 1))
  => ((length(y) = range(modular_adder((pick26 * power_(2,
     ((n27 - i25) - 1))), bound27, n27)))
     => ((tb2t3(infix_at(int, int, t2tb5(value(bv)), t2tb3(i25))) = 1) => (
        ang_ind(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
        bound27, n27), i25, n27, ((2 * n27) + 1)), bv, y) = ang_ind(
        modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27, n27), 
        htpart(bv, n27, width(modular_adder((pick26 * power_(2,
        ((n27 - i25) - 1))), bound27, n27))), y))))));

% H
  ASSERT
  (FORALL (bv : bitvec):
  ((length(bv) = ((2 * n27) + 1))
  => ((length(bv) = ((2 * n27) + 1))
     => ((tb2t3(infix_at(int, int, t2tb5(value(bv)), t2tb3(i25))) = 0)
        => (sem(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
        bound27, n27), i25, n27, ((2 * n27) + 1)), bv_to_ket(bv), 
        bv_to_ket(bv)))))));

% H
  ASSERT
  (FORALL (bv : bitvec):
  ((length(bv) = ((2 * n27) + 1))
  => ((tb2t3(infix_at(int, int, t2tb5(value(bv)), t2tb3(i25))) = 1) => (sem(
     cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27,
     n27), i25, n27, ((2 * n27) + 1)), bv_to_ket(bv), pat_sem(place(
     modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27, n27),
     n27, ((2 * n27) + 1)), bv_to_ket(bv)))))));

% H
  ASSERT (width(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27), i25, n27, ((2 * n27) + 1))) = ((2 * n27) + 1));

fc1904: (ARRAY INT OF circuit);

o194: (ARRAY INT OF INT);

t2tb54: ((ARRAY INT OF circuit)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x8 : (ARRAY INT OF circuit)): (sort(infix_mngt(int, circuit1), 
  t2tb54(x8))));

tb2t54: (uni) -> (ARRAY INT OF circuit);

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF circuit)):PATTERN (t2tb54(i26)):  (tb2t54(
  t2tb54(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb54(tb2t54(j))): 
  ((sort(infix_mngt(int, circuit1), j)) => (t2tb54(tb2t54(j)) = j)));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1904), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% o_def
  ASSERT
  (FORALL (k : INT): (tb2t3(infix_at(int, int, t2tb5(o194), t2tb3(k))) = (
  tb2t3(infix_at(int, int, t2tb5(value(x7)), t2tb3(k))) * power_(2,
  ((n27 - k) - 1)))));

% H
  ASSERT (pat_sem(sequence(sequence_iter_anc(fc1904, ((2 * n27) + 1), 0,
  ((i25 - 1) + 1), 1, (cont_size * adder_gate_bound(n27))), cont(
  modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27, n27), i25,
  n27, ((2 * n27) + 1))), kronecker(bv_to_ket(x7), apply_qft((n27 + 1),
  b19))) = kronecker(bv_to_ket(x7), apply_qft((n27 + 1), 
  mod((b19 + (pick26 * ind_isum(o194, 0, (i25 + 1)))), bound27))));

% H
  ASSERT (size(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27)) <= polysquare((n27 + 1), ((14 * cont_size) + 12), 0,
  ((cont_size * 8) + 8)));

% H
  ASSERT (ancillas(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27)) = 1);

% H
  ASSERT (width(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27)) = (n27 + 1));

% H
  ASSERT
  (FORALL (b20 : INT):
  (((0 <= b20) AND (b20 < bound27)) => (modular_adder((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27, n27) = modular_adder_(mod((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27), bound27, n27, b20))));

% H
  ASSERT
  (FORALL (b20 : INT):
  (((0 <= b20) AND (b20 < bound27)) => (pat_sem(modular_adder((pick26 * 
  power_(2, ((n27 - i25) - 1))), bound27, n27), apply_qft((n27 + 1), b20)) = 
  apply_qft((n27 + 1), mod(((pick26 * power_(2, ((n27 - i25) - 1))) + b20),
  bound27)))));

% H
  ASSERT (size(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27), i25, n27, ((2 * n27) + 1))) <= (size(
  modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27,
  n27)) * cont_size));

% H
  ASSERT (ancillas(cont(modular_adder((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27, n27), i25, n27, ((2 * n27) + 1))) = 0);

% H
  ASSERT (range(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27), i25, n27, ((2 * n27) + 1))) = range(modular_adder((pick26 * 
  power_(2, ((n27 - i25) - 1))), bound27, n27)));

% H
  ASSERT (width(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
  bound27, n27), i25, n27, ((2 * n27) + 1))) = ((2 * n27) + 1));

fc1906: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1906), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT (ancillas(result116) = max(ancillas(sequence_iter_anc(fc1906,
  ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
  adder_gate_bound(n27)))), ancillas(cont(modular_adder((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27, n27), i25, n27, ((2 * n27) + 1)))));

fc1907: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1907), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT (size(result116) = (size(sequence_iter_anc(fc1907, ((2 * n27) + 1),
  0, ((i25 - 1) + 1), 1, (cont_size * adder_gate_bound(n27)))) + size(cont(
  modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27, n27), i25,
  n27, ((2 * n27) + 1)))));

fc1908: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1908), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT (range(result116) = (range(sequence_iter_anc(fc1908,
  ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
  adder_gate_bound(n27)))) + range(cont(modular_adder((pick26 * power_(2,
  ((n27 - i25) - 1))), bound27, n27), i25, n27, ((2 * n27) + 1)))));

fc1909: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1909), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT (width(result116) = width(sequence_iter_anc(fc1909, ((2 * n27) + 1),
  0, ((i25 - 1) + 1), 1, (cont_size * adder_gate_bound(n27)))));

fc1910: (ARRAY INT OF circuit);

fc1911: (ARRAY INT OF circuit);

fc1912: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1910), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1911), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1912), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT
  (FORALL (x8 : bitvec, y : bitvec):
  ((length(x8) = width(result116))
  => ((length(y) = range(result116)) => (basis_ket(result116, x8, y) = 
     basis_ket(cont(modular_adder((pick26 * power_(2, ((n27 - i25) - 1))),
     bound27, n27), i25, n27, ((2 * n27) + 1)), basis_ket(
     sequence_iter_anc(fc1910, ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1,
     (cont_size * adder_gate_bound(n27))), x8, hpart(y, range(
     sequence_iter_anc(fc1911, ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1,
     (cont_size * adder_gate_bound(n27)))))), tpart(y, range(
     sequence_iter_anc(fc1912, ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1,
     (cont_size * adder_gate_bound(n27))))))))));

fc1913: (ARRAY INT OF circuit);

fc1914: (ARRAY INT OF circuit);

fc1915: (ARRAY INT OF circuit);

fc1916: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1913), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1914), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1915), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1916), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT
  (FORALL (x8 : bitvec, y : bitvec):
  (FORALL (i26 : INT):
  ((length(x8) = width(result116))
  => ((length(y) = range(result116))
     => (((0 <= i26) AND (i26 < width(sequence_iter_anc(fc1913,
         ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
         adder_gate_bound(n27))))))
        => (basis_ket_i(result116, x8, y, i26) = basis_ket_i(cont(
        modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27, n27),
        i25, n27, ((2 * n27) + 1)), basis_ket(sequence_iter_anc(fc1914,
        ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
        adder_gate_bound(n27))), x8, hpart(y, range(sequence_iter_anc(fc1915,
        ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
        adder_gate_bound(n27)))))), tpart(y, range(sequence_iter_anc(fc1916,
        ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
        adder_gate_bound(n27))))), i26)))))));

fc1917: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1917), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT (ang_ind_bound(result116) = (ang_ind_bound(sequence_iter_anc(fc1917,
  ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
  adder_gate_bound(n27)))) + ang_ind_bound(cont(modular_adder((pick26 * 
  power_(2, ((n27 - i25) - 1))), bound27, n27), i25, n27,
  ((2 * n27) + 1)))));

fc1918: (ARRAY INT OF circuit);

fc1919: (ARRAY INT OF circuit);

fc1920: (ARRAY INT OF circuit);

fc1921: (ARRAY INT OF circuit);

fc1922: (ARRAY INT OF circuit);

fc1923: (ARRAY INT OF circuit);

fc1924: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1918), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1919), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1920), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1921), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1922), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1923), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1924), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT
  (FORALL (x8 : bitvec, y : bitvec):
  (FORALL (i26 : INT):
  ((length(x8) = width(result116))
  => ((length(y) = range(result116))
     => (((0 <= i26) AND (i26 < ang_ind_bound(result116))) => (
        ang_ind_i(result116, x8, y,
        i26) = (IF (i26 < ang_ind_bound(sequence_iter_anc(fc1918,
               ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
               adder_gate_bound(n27))))) THEN ang_ind_i(
               sequence_iter_anc(fc1919, ((2 * n27) + 1), 0, ((i25 - 1) + 1),
               1, (cont_size * adder_gate_bound(n27))), x8, hpart(y, range(
               sequence_iter_anc(fc1920, ((2 * n27) + 1), 0, ((i25 - 1) + 1),
               1, (cont_size * adder_gate_bound(n27))))), i26) ELSE 
               ang_ind_i(cont(modular_adder((pick26 * power_(2,
               ((n27 - i25) - 1))), bound27, n27), i25, n27,
               ((2 * n27) + 1)), basis_ket(sequence_iter_anc(fc1921,
               ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
               adder_gate_bound(n27))), x8, hpart(y, range(
               sequence_iter_anc(fc1922, ((2 * n27) + 1), 0, ((i25 - 1) + 1),
               1, (cont_size * adder_gate_bound(n27)))))), tpart(y, range(
               sequence_iter_anc(fc1923, ((2 * n27) + 1), 0, ((i25 - 1) + 1),
               1, (cont_size * adder_gate_bound(n27))))), (i26 - range(
               sequence_iter_anc(fc1924, ((2 * n27) + 1), 0, ((i25 - 1) + 1),
               1, (cont_size * adder_gate_bound(n27)))))) ENDIF)))))));

fc1925: (ARRAY INT OF circuit);

fc1926: (ARRAY INT OF circuit);

fc1927: (ARRAY INT OF circuit);

fc1928: (ARRAY INT OF circuit);

fc1929: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1925), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1926), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1927), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1928), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1929), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT
  (FORALL (x8 : bitvec, y : bitvec):
  ((length(x8) = width(result116))
  => ((length(y) = range(result116)) => (ang_ind(result116, x8, y) = ang_add(
     ang_ind(sequence_iter_anc(fc1925, ((2 * n27) + 1), 0, ((i25 - 1) + 1),
     1, (cont_size * adder_gate_bound(n27))), x8, hpart(y, range(
     sequence_iter_anc(fc1926, ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1,
     (cont_size * adder_gate_bound(n27)))))), ang_ind(cont(
     modular_adder((pick26 * power_(2, ((n27 - i25) - 1))), bound27, n27),
     i25, n27, ((2 * n27) + 1)), basis_ket(sequence_iter_anc(fc1927,
     ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
     adder_gate_bound(n27))), x8, hpart(y, range(sequence_iter_anc(fc1928,
     ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
     adder_gate_bound(n27)))))), tpart(y, range(sequence_iter_anc(fc1929,
     ((2 * n27) + 1), 0, ((i25 - 1) + 1), 1, (cont_size * 
     adder_gate_bound(n27)))))))))));

fc1898: (ARRAY INT OF circuit);

% fc_def
  ASSERT
  (FORALL (k : INT): (tb2t52(infix_at(circuit1, int, t2tb54(fc1898), 
  t2tb3(k))) = cont(modular_adder((pick26 * power_(2, ((n27 - k) - 1))),
  bound27, n27), k, n27, ((2 * n27) + 1))));

% H
  ASSERT (result116 = sequence_iter_anc(fc1898, ((2 * n27) + 1), 0,
  (i25 + 1), 1, (cont_size * adder_gate_bound(n27))));

% H
  ASSERT (ancillas(result116) = 1);

% H
  ASSERT (width(result116) = ((2 * n27) + 1));

QUERY
% h
  FALSE;
