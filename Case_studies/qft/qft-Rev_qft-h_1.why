(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic infix_eqeq : 'a, 'a -> prop

type complex

logic c_zero : complex

logic c_one : complex

logic ac infix_asdt : complex, complex -> complex

axiom NonTrivialRing : (not (c_zero = c_one))

type 'a set

logic mem : 'a, 'a set -> prop

logic power : int, int -> int

type angle

logic ang_zero : angle

logic int_to_ang : int, int -> angle

logic pow_inv_sqrt_2 : int -> complex

type 'a matrix

logic elts : 'a matrix -> (int,(int,'a) farray) farray

logic rows : 'a matrix -> int

logic columns : 'a matrix -> int

function get(a: 'a1 matrix, r: int, c: int) : 'a1 = ((elts(a)[r])[c])

logic make_f : int, int, (int,(int,'a) farray) farray -> 'a matrix

logic result : complex, complex matrix -> (int,(int,complex) farray) farray

axiom result_def :
  (forall s:complex. forall m:complex matrix. forall i:int. forall j:int.
  (((result(s, m)[i])[j]) = infix_asdt(s, get(m, i, j))))

function infix_asdtdt(s: complex, m: complex matrix) : complex matrix =
  make_f(rows(m), columns(m), result(s, m))

logic is_a_ket : complex matrix -> prop

predicate is_a_ket_l(m: complex matrix, l: int) = ((0 <= l) and
  ((columns(m) = 1) and (rows(m) = power(2, l))))

logic ket_length : complex matrix -> int

logic add_ket_l : complex matrix, complex matrix, int -> complex matrix

logic ket : int, int -> complex matrix

logic ket_basis : int -> complex matrix set

predicate is_a_ket_basis_elt(m: complex matrix) = (is_a_ket(m) and mem(m,
  ket_basis(ket_length(m))))

type pps

logic h_width : pps -> int

logic h_range : pps -> int

logic h_basis_ket : pps -> ((int,int) farray,((int,int) farray,(int,int) farray) farray) farray

logic h_angle : pps -> ((int,int) farray,((int,int) farray,angle) farray) farray

logic pps_apply : pps, complex matrix -> complex matrix

logic pps_id : pps

logic pps_hadamard : pps

axiom pps_hadamard_def : (h_width(pps_hadamard) = 1)

axiom pps_hadamard_def1 : (h_range(pps_hadamard) = 1)

axiom pps_hadamard_def2 :
  (forall x:(int,int) farray. forall y:(int,int) farray.
  (forall i:int. ((((h_basis_ket(pps_hadamard)[x])[y])[i]) = (y[i]))))

axiom pps_hadamard_def3 :
  (forall x:(int,int) farray. forall y:(int,int) farray.
  ((((x[0]) = (y[0])) and ((y[0]) = 1)) ->
  (((h_angle(pps_hadamard)[x])[y]) = int_to_ang(1, 1))))

axiom pps_hadamard_def4 :
  (forall x:(int,int) farray. forall y:(int,int) farray.
  ((not (((x[0]) = (y[0])) and ((y[0]) = 1))) ->
  (((h_angle(pps_hadamard)[x])[y]) = ang_zero)))

type circuit

logic circ_to_pps : circuit -> pps

logic width : circuit -> int

logic size : circuit -> int

logic ancillas : circuit -> int

logic range : circuit -> int

logic basis_ket : circuit, (int,int) farray, (int,int) farray, int -> int

logic ang_ind : circuit, (int,int) farray, (int,int) farray -> angle

logic path_sem_basis : circuit, complex matrix -> complex matrix

logic id : circuit

axiom id_def : (circ_to_pps(id) = pps_id)

axiom id_def1 : (ancillas(id) = 0)

axiom id_def2 : (size(id) = 0)

axiom id_def3 : (range(id) = 0)

axiom id_def4 : (width(id) = 1)

axiom id_def5 :
  (forall x:(int,int) farray. forall y:(int,int) farray.
  (forall i:int. (basis_ket(id, x, y, i) = (x[i]))))

axiom id_def6 :
  (forall x:(int,int) farray. forall y:(int,int) farray. (ang_ind(id, x,
  y) = ang_zero))

axiom path_sem_id_basis :
  (forall x:complex matrix. (is_a_ket_l(x, 1) -> (is_a_ket_basis_elt(x) ->
  (path_sem_basis(id, x) = x))))

axiom qbit_zero_spec : (get(ket(1, 0), 0, 0) = c_one)

axiom qbit_zero_spec1 : (get(ket(1, 0), 1, 0) = c_zero)

axiom qbit_zero_spec2 : is_a_ket_l(ket(1, 0), 1)

axiom qbit_zero_spec3 : (rows(ket(1, 0)) = 2)

axiom qbit_zero_spec4 : (columns(ket(1, 0)) = 1)

axiom qbit_zero_spec5 : (get(ket(1, 0), 0, 0) = c_one)

axiom qbit_zero_spec6 : (get(ket(1, 0), 1, 0) = c_zero)

axiom qbit_zero_spec7 : is_a_ket_basis_elt(ket(1, 0))

axiom qbit_plus_spec : (pps_apply(pps_hadamard, ket(1,
  0)) = infix_asdtdt(pow_inv_sqrt_2(1), add_ket_l(ket(1, 0), ket(1, 1), 1)))

axiom qbit_plus_spec1 : is_a_ket_l(pps_apply(pps_hadamard, ket(1, 0)), 1)

axiom qbit_plus_spec2 : (rows(pps_apply(pps_hadamard, ket(1, 0))) = 2)

axiom qbit_plus_spec3 : (columns(pps_apply(pps_hadamard, ket(1, 0))) = 1)

axiom qbit_plus_spec4 : (get(pps_apply(pps_hadamard, ket(1, 0)), 0,
  0) = pow_inv_sqrt_2(1))

axiom qbit_plus_spec5 : (get(pps_apply(pps_hadamard, ket(1, 0)), 1,
  0) = pow_inv_sqrt_2(1))

axiom set_correct_pps :
  (forall c:circuit. forall h:pps. ((h_width(h) = width(c)) ->
  (forall x:complex matrix. (is_a_ket_l(x, width(c)) ->
  (is_a_ket_basis_elt(x) -> (pps_apply(h, x) = path_sem_basis(c, x)))))))

goal h : false
