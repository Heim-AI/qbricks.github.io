(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require HighOrd.
Require int.Int.
Require int.Abs.
Require int.MinMax.
Require int.EuclideanDivision.
Require real.Real.
Require map.Map.
Require map.Const.
Require set.Set.

Axiom t : Type.
Parameter t_WhyType : WhyType t.
Existing Instance t_WhyType.

Parameter teq: t -> t -> Prop.

Axiom teq_spec : forall (x:t) (y:t), (teq x y) -> (x = y).

Axiom teq_spec1 : forall (x:t) (y:t), (x = y) -> teq x y.

Parameter tzero: t.

Parameter tone: t.

Parameter prefix_mndt: t -> t.

Parameter infix_pldt: t -> t -> t.

Parameter infix_asdt: t -> t -> t.

Parameter inv: t -> t.

Axiom Assoc :
  forall (x:t) (y:t) (z:t),
  ((infix_pldt (infix_pldt x y) z) = (infix_pldt x (infix_pldt y z))).

Axiom Unit_def_l : forall (x:t), ((infix_pldt tzero x) = x).

Axiom Unit_def_r : forall (x:t), ((infix_pldt x tzero) = x).

Axiom Inv_def_l : forall (x:t), ((infix_pldt (prefix_mndt x) x) = tzero).

Axiom Inv_def_r : forall (x:t), ((infix_pldt x (prefix_mndt x)) = tzero).

Axiom Comm : forall (x:t) (y:t), ((infix_pldt x y) = (infix_pldt y x)).

Axiom Assoc1 :
  forall (x:t) (y:t) (z:t),
  ((infix_asdt (infix_asdt x y) z) = (infix_asdt x (infix_asdt y z))).

Axiom Mul_distr_l :
  forall (x:t) (y:t) (z:t),
  ((infix_asdt x (infix_pldt y z)) =
   (infix_pldt (infix_asdt x y) (infix_asdt x z))).

Axiom Mul_distr_r :
  forall (x:t) (y:t) (z:t),
  ((infix_asdt (infix_pldt y z) x) =
   (infix_pldt (infix_asdt y x) (infix_asdt z x))).

Axiom Comm1 : forall (x:t) (y:t), ((infix_asdt x y) = (infix_asdt y x)).

Axiom Unitary : forall (x:t), ((infix_asdt tone x) = x).

Axiom NonTrivialRing : ~ (tzero = tone).

Axiom Inverse :
  forall (x:t), ~ (x = tzero) -> ((infix_asdt x (inv x)) = tone).

(* Why3 assumption *)
Definition infix_mn (x:t) (y:t) : t := infix_pldt x (prefix_mndt y).

(* Why3 assumption *)
Definition infix_sl (x:t) (y:t) : t := infix_asdt x (inv y).

Axiom add_div :
  forall (x:t) (y:t) (z:t), ~ (z = tzero) ->
  ((infix_sl (infix_pldt x y) z) =
   (infix_pldt (infix_sl x z) (infix_sl y z))).

Axiom sub_div :
  forall (x:t) (y:t) (z:t), ~ (z = tzero) ->
  ((infix_sl (infix_mn x y) z) = (infix_mn (infix_sl x z) (infix_sl y z))).

Axiom neg_div :
  forall (x:t) (y:t), ~ (y = tzero) ->
  ((infix_sl (prefix_mndt x) y) = (prefix_mndt (infix_sl x y))).

Axiom assoc_mul_div :
  forall (x:t) (y:t) (z:t), ~ (z = tzero) ->
  ((infix_sl (infix_asdt x y) z) = (infix_asdt x (infix_sl y z))).

Axiom assoc_div_mul :
  forall (x:t) (y:t) (z:t), (~ (y = tzero) /\ ~ (z = tzero)) ->
  ((infix_sl (infix_sl x y) z) = (infix_sl x (infix_asdt y z))).

Axiom assoc_div_div :
  forall (x:t) (y:t) (z:t), (~ (y = tzero) /\ ~ (z = tzero)) ->
  ((infix_sl x (infix_sl y z)) = (infix_sl (infix_asdt x z) y)).

(* Why3 assumption *)
Definition infix_mndt (x:t) (y:t) : t := infix_pldt x (prefix_mndt y).

Parameter infix_sldt: t -> t -> t.

Axiom infix_sldt_def :
  forall (x:t) (y:t), ~ (y = tzero) ->
  ((infix_sldt x y) = (infix_asdt x (inv y))).

Axiom infix_sldt_spec :
  forall (x:t) (y:t), ~ (y = tzero) ->
  ((infix_sldt x y) = (infix_asdt x (inv y))).

Parameter infix_slas: R -> R -> R.

Axiom infix_slas_def :
  forall (x:R) (y:R), ~ (y = 0%R) -> ((infix_slas x y) = (x / y)%R).

Parameter infix_eqas: R -> R -> Prop.

Axiom infix_eqas_spec : forall (x:R) (y:R), (infix_eqas x y) -> (x = y).

Axiom infix_eqas_spec1 : forall (x:R) (y:R), (x = y) -> infix_eqas x y.

Parameter infix_lsgtas: R -> R -> Prop.

Axiom infix_lsgtas_spec :
  forall (x:R) (y:R), (infix_lsgtas x y) -> ~ (x = y).

Axiom infix_lsgtas_spec1 : forall (x:R) (y:R), ~ (x = y) -> infix_lsgtas x y.

(* Why3 assumption *)
Definition infix_mnas (x:R) (y:R) : R := (x + (-y)%R)%R.

(* Why3 assumption *)
Definition infix_lsas (x:R) (y:R) : Prop := (x <= y)%R /\ (infix_lsgtas x y).

Parameter from_int: Z -> R.

Axiom Zero : ((from_int 0%Z) = 0%R).

Axiom One : ((from_int 1%Z) = 1%R).

Axiom Add :
  forall (x:Z) (y:Z),
  ((from_int (x + y)%Z) = ((from_int x) + (from_int y))%R).

Axiom Sub :
  forall (x:Z) (y:Z),
  ((from_int (x - y)%Z) = (infix_mnas (from_int x) (from_int y))).

Axiom Mul :
  forall (x:Z) (y:Z),
  ((from_int (x * y)%Z) = ((from_int x) * (from_int y))%R).

Axiom Neg : forall (x:Z), ((from_int (-x)%Z) = (-(from_int x))%R).

Axiom Injective :
  forall (x:Z) (y:Z), ((from_int x) = (from_int y)) -> (x = y).

Axiom Monotonic :
  forall (x:Z) (y:Z), (x <= y)%Z -> ((from_int x) <= (from_int y))%R.

Axiom r_zeroLessOne : (0%R <= 1%R)%R.

Axiom r_compatOrderAdd :
  forall (x:R) (y:R) (z:R), (x <= y)%R -> ((x + z)%R <= (y + z)%R)%R.

Axiom r_compatOrderMult :
  forall (x:R) (y:R) (z:R), (x <= y)%R -> (0%R <= z)%R ->
  ((x * z)%R <= (y * z)%R)%R.

Axiom inv_order :
  forall (a:R) (b:R), (infix_lsas 0%R a) -> (infix_lsas 0%R b) ->
  (a <= b)%R -> ((1%R / b)%R <= (1%R / a)%R)%R.

Axiom inv_strict_order :
  forall (a:R) (b:R), (infix_lsas 0%R a) -> (infix_lsas 0%R b) ->
  (infix_lsas a b) -> infix_lsas (1%R / b)%R (1%R / a)%R.

Axiom Absorbing_zero :
  forall (a:t) (b:t), ((infix_asdt a b) = tzero) -> ~ (a = tzero) ->
  (b = tzero).

Axiom Absorbing_zero1 :
  forall (a:t) (b:t), (a = tzero) -> ((infix_asdt a b) = tzero).

Axiom Absorbing_zero2 :
  forall (a:t) (b:t), (b = tzero) -> ((infix_asdt a b) = tzero).

Axiom absorbing_zero :
  forall (a:t) (b:t), ((infix_asdt a b) = tzero) -> ~ (a = tzero) ->
  (b = tzero).

Axiom absorbing_zero1 :
  forall (a:t) (b:t), ((infix_asdt a b) = tzero) -> ~ (b = tzero) ->
  (a = tzero).

Axiom invol_neg : forall (a:t), ((prefix_mndt (prefix_mndt a)) = a).

Axiom injective_neg :
  forall (a:t) (b:t), ((prefix_mndt a) = (prefix_mndt b)) -> (a = b).

Axiom find_opposite :
  forall (a:t) (b:t), ((infix_mndt a b) = tzero) -> (a = b).

Axiom add_opposite : forall (a:t), ((infix_pldt a (prefix_mndt a)) = tzero).

Axiom opposite : forall (a:t), ((infix_mndt a a) = tzero).

Axiom mult_num :
  forall (a:t) (b:t) (c:t), ~ (c = tzero) ->
  ((infix_sldt (infix_asdt a b) c) = (infix_asdt a (infix_sldt b c))).

Axiom div_as_mult_inv :
  forall (a:t) (b:t), ~ (b = tzero) ->
  ((infix_sldt a b) = (infix_asdt a (infix_sldt tone b))).

Axiom div_rev :
  forall (a:t) (b:t), ~ (b = tzero) ->
  ((infix_asdt a (infix_sldt tone b)) = (infix_sldt a b)).

Axiom mult_div_num :
  forall (a:t) (b:t) (c:t), ~ (c = tzero) ->
  ((infix_asdt (infix_sldt a c) b) = (infix_sldt (infix_asdt a b) c)).

Axiom mult_denom :
  forall (a:t) (b:t) (c:t), ~ (c = tzero) -> ~ (b = tzero) ->
  ((infix_sldt a (infix_asdt b c)) =
   (infix_asdt (infix_sldt a b) (infix_sldt tone c))).

Axiom mult_simpl :
  forall (a:t) (b:t) (c:t), ~ (c = tzero) -> ~ (b = tzero) ->
  ((infix_sldt (infix_asdt a b) (infix_asdt c b)) = (infix_sldt a c)).

Axiom non_zero_prod :
  forall (a:t) (b:t), ~ (a = tzero) -> ~ (b = tzero) ->
  ~ ((infix_asdt a b) = tzero).

Axiom minus_tone :
  forall (a:t), ((prefix_mndt a) = (infix_asdt (prefix_mndt tone) a)).

Axiom mult_neg_l :
  forall (a:t) (b:t),
  ((infix_asdt (prefix_mndt a) b) = (prefix_mndt (infix_asdt a b))).

Axiom mult_neg_r :
  forall (a:t) (b:t),
  ((infix_asdt a (prefix_mndt b)) = (prefix_mndt (infix_asdt a b))).

Axiom neg_neg_out : forall (a:t), ((prefix_mndt (prefix_mndt a)) = a).

Axiom div_neg_l :
  forall (a:t) (b:t), ~ (b = tzero) ->
  ((infix_sldt (prefix_mndt a) b) = (prefix_mndt (infix_sldt a b))).

Axiom div_neg_r :
  forall (a:t) (b:t), ~ (b = tzero) ->
  ((infix_sldt a (prefix_mndt b)) = (prefix_mndt (infix_sldt a b))).

Axiom invadd :
  forall (i:t), ((prefix_mndt i) = (infix_asdt (prefix_mndt tone) i)).

Axiom notZeroAdd :
  forall (x:t) (y:t), ~ (x = tzero) -> ~ ((infix_pldt x y) = y).

Parameter im: t.

Axiom im_Def : ((infix_asdt im im) = (prefix_mndt tone)).

Parameter r_to_t: R -> t.

Axiom r_to_t_zero : ((r_to_t 0%R) = tzero).

Axiom r_to_t_one : ((r_to_t 1%R) = tone).

Axiom r_to_t_add :
  forall (i:R) (j:R),
  ((infix_pldt (r_to_t i) (r_to_t j)) = (r_to_t (i + j)%R)).

Axiom r_to_t_inv :
  forall (i:R), ((r_to_t (-i)%R) = (prefix_mndt (r_to_t i))).

Axiom r_to_t_mult :
  forall (i:R) (j:R),
  ((infix_asdt (r_to_t i) (r_to_t j)) = (r_to_t (i * j)%R)).

Axiom r_to_t_sub :
  forall (i:R) (j:R),
  ((infix_mndt (r_to_t i) (r_to_t j)) = (r_to_t (infix_mnas i j))).

Axiom r_to_t_div :
  forall (i:R) (j:R), ~ (j = 0%R) ->
  ((infix_sldt (r_to_t i) (r_to_t j)) = (r_to_t (infix_slas i j))).

Parameter real_part: t -> R.

Parameter im_part: t -> R.

Axiom Real_part_add :
  forall (i:t) (j:t),
  ((real_part (infix_pldt i j)) = ((real_part i) + (real_part j))%R).

Axiom Im_part_add :
  forall (i:t) (j:t),
  ((im_part (infix_pldt i j)) = ((im_part i) + (im_part j))%R).

Axiom Real_part_opposite :
  forall (i:t), ((real_part (prefix_mndt i)) = (-(real_part i))%R).

Axiom Im_part_opposite :
  forall (i:t), ((im_part (prefix_mndt i)) = (-(im_part i))%R).

Axiom real_part_add :
  forall (i:t) (j:t),
  ((real_part (infix_pldt i j)) = ((real_part i) + (real_part j))%R).

Axiom mult_im_rev : forall (a:t), ((infix_asdt a im) = (infix_asdt im a)).

Axiom im_im_elim :
  forall (a:t), ((infix_asdt im (infix_asdt im a)) = (prefix_mndt a)).

Axiom im_im_fact :
  forall (a:t) (b:t),
  ((infix_asdt (infix_asdt im a) (infix_asdt im b)) =
   (prefix_mndt (infix_asdt a b))).

Axiom minus_minus_fact :
  forall (a:t) (b:t),
  ((infix_asdt (prefix_mndt a) (prefix_mndt b)) = (infix_asdt a b)).

Axiom minus_minus_add :
  forall (a:t) (b:t),
  ((infix_pldt (prefix_mndt a) (prefix_mndt b)) =
   (prefix_mndt (infix_pldt a b))).

Axiom minus_minus_add_rev :
  forall (a:t) (b:t),
  ((prefix_mndt (infix_pldt a b)) =
   (infix_pldt (prefix_mndt a) (prefix_mndt b))).

Axiom minus_out_left :
  forall (a:t) (b:t),
  ((infix_asdt (prefix_mndt a) b) = (prefix_mndt (infix_asdt a b))).

Axiom minus_out_right :
  forall (a:t) (b:t),
  ((infix_asdt a (prefix_mndt b)) = (prefix_mndt (infix_asdt a b))).

Axiom minus_in_left :
  forall (a:t) (b:t),
  ((prefix_mndt (infix_asdt a b)) = (infix_asdt (prefix_mndt a) b)).

Axiom minus_in_right :
  forall (a:t) (b:t),
  ((prefix_mndt (infix_asdt a b)) = (infix_asdt a (prefix_mndt b))).

Axiom minus_add_out_left :
  forall (a:t) (b:t),
  ((infix_pldt (prefix_mndt a) b) =
   (prefix_mndt (infix_pldt a (prefix_mndt b)))).

Axiom minus_add_out_right :
  forall (a:t) (b:t),
  ((infix_pldt a (prefix_mndt b)) =
   (prefix_mndt (infix_pldt (prefix_mndt a) b))).

Axiom minus_add_in :
  forall (a:t) (b:t),
  ((prefix_mndt (infix_pldt a b)) =
   (infix_pldt (prefix_mndt a) (prefix_mndt b))).

Axiom minus_add_out :
  forall (a:t) (b:t),
  ((infix_pldt (prefix_mndt a) (prefix_mndt b)) =
   (prefix_mndt (infix_pldt a b))).

Axiom minus_eq :
  forall (a:t) (b:t), (a = b) -> ((prefix_mndt a) = (prefix_mndt b)).

Axiom im_out_right :
  forall (a:t) (b:t),
  ((infix_asdt (infix_asdt im a) b) = (infix_asdt im (infix_asdt a b))).

Axiom im_out_left :
  forall (a:t) (b:t),
  ((infix_asdt a (infix_asdt im b)) = (infix_asdt im (infix_asdt a b))).

Axiom im_part_add :
  forall (i:t) (j:t),
  ((im_part (infix_pldt i j)) = ((im_part i) + (im_part j))%R).

Axiom Complex_decomp :
  forall (i:t),
  (i =
   (infix_pldt (r_to_t (real_part i)) (infix_asdt im (r_to_t (im_part i))))).

Axiom Unic_decomp :
  forall (i:t), forall (x:R) (y:R),
  (i = (infix_pldt (r_to_t x) (infix_asdt im (r_to_t y)))) ->
  (x = (real_part i)).

Axiom Unic_decomp1 :
  forall (i:t), forall (x:R) (y:R),
  (i = (infix_pldt (r_to_t x) (infix_asdt im (r_to_t y)))) ->
  (y = (im_part i)).

Axiom injective_real_part :
  forall (i:t) (j:t), ~ ((real_part i) = (real_part j)) -> ~ (i = j).

Axiom injective_im_part :
  forall (i:t) (j:t), ~ ((im_part i) = (im_part j)) -> ~ (i = j).

Axiom complex_decomp :
  forall (i:t),
  (i =
   (infix_pldt (r_to_t (real_part i)) (infix_asdt im (r_to_t (im_part i))))).

Axiom unic_decomp :
  forall (i:t) (x:R) (y:R),
  (i = (infix_pldt (r_to_t x) (infix_asdt im (r_to_t y)))) ->
  (x = (real_part i)).

Axiom unic_decomp1 :
  forall (i:t) (x:R) (y:R),
  (i = (infix_pldt (r_to_t x) (infix_asdt im (r_to_t y)))) ->
  (y = (im_part i)).

(* Why3 assumption *)
Definition real_ (x:t) : Prop := ((im_part x) = 0%R).

(* Why3 assumption *)
Definition pure_im_ (x:t) : Prop := ((real_part x) = 0%R).

Axiom r_to_t_real : forall (x:t), (real_ x) -> (x = (r_to_t (real_part x))).

Axiom real_r_to_t : forall (x:R), real_ (r_to_t x).

Axiom r_to_t_pure_im :
  forall (x:t), (pure_im_ x) -> (x = (infix_asdt im (r_to_t (im_part x)))).

Axiom simpl_frac :
  forall (x:t) (y:t), ~ (y = tzero) -> ((infix_sldt (infix_asdt x y) y) = x).

Axiom simpl_frac_ :
  forall (x:t) (y:t) (z:t), ~ (y = tzero) -> ~ (z = tzero) ->
  ((infix_sldt (infix_asdt x y) (infix_asdt z y)) = (infix_sldt x z)).

Axiom fact_frac :
  forall (x:t) (y:t) (z:t), ~ (z = tzero) ->
  ((infix_sldt (infix_asdt x y) z) = (infix_asdt x (infix_sldt y z))).

Axiom fact_frac_rev :
  forall (x:t) (y:t) (z:t), ~ (z = tzero) ->
  ((infix_asdt x (infix_sldt y z)) = (infix_sldt (infix_asdt x y) z)).

Axiom inv_mult :
  forall (x:t) (y:t), ~ (x = tzero) -> ~ (y = tzero) ->
  ((infix_asdt (infix_sldt tone x) (infix_sldt tone y)) =
   (infix_sldt tone (infix_asdt x y))).

Axiom div_div :
  forall (x:t) (y:t) (z:t), ~ (y = tzero) -> ~ (z = tzero) ->
  ((infix_sldt (infix_sldt x y) z) = (infix_sldt x (infix_asdt y z))).

Axiom div_div_rev :
  forall (x:t) (y:t) (z:t), ~ (y = tzero) -> ~ (z = tzero) ->
  ((infix_sldt x (infix_asdt y z)) = (infix_sldt (infix_sldt x y) z)).

Axiom involutive_inv :
  forall (a:t), ~ (a = tzero) -> ((infix_sldt tone (infix_sldt tone a)) = a).

Axiom twice :
  forall (i:t), ((infix_asdt (infix_pldt tone tone) i) = (infix_pldt i i)).

Axiom twice_half :
  ((infix_asdt (infix_pldt tone tone)
    (infix_sldt tone (infix_pldt tone tone)))
   = tone).

Axiom half_plus_half :
  forall (i:t),
  ((infix_pldt (infix_sldt i (infix_pldt tone tone))
    (infix_sldt i (infix_pldt tone tone)))
   = i).

Parameter infix_lseqdt: t -> t -> Prop.

Axiom Inf_eq_def :
  forall (x:t) (y:t), (infix_lseqdt x y) -> (real_ x) \/ (x = y).

Axiom Inf_eq_def1 :
  forall (x:t) (y:t), (infix_lseqdt x y) -> (real_ y) \/ (x = y).

Axiom Inf_eq_def2 :
  forall (x:t) (y:t), (infix_lseqdt x y) ->
  ((real_part x) <= (real_part y))%R \/ (x = y).

Axiom Inf_eq_def3 :
  forall (x:t) (y:t),
  ((real_ x) /\ ((real_ y) /\ ((real_part x) <= (real_part y))%R)) ->
  infix_lseqdt x y.

Axiom Inf_eq_def4 : forall (x:t) (y:t), (x = y) -> infix_lseqdt x y.

Parameter infix_lsdt: t -> t -> Prop.

Parameter infix_gteqdt: t -> t -> Prop.

Parameter infix_gtdt: t -> t -> Prop.

Parameter square_rt: t -> t.

Axiom square_rt_spec :
  forall (x:t), ((infix_asdt (square_rt x) (square_rt x)) = x).

Axiom inf_st : forall (x:t) (y:t), (infix_lsdt x y) -> infix_lseqdt x y.

Axiom inf_st1 : forall (x:t) (y:t), (infix_lsdt x y) -> ~ (x = y).

Axiom inf_st2 :
  forall (x:t) (y:t), ((infix_lseqdt x y) /\ ~ (x = y)) -> infix_lsdt x y.

Axiom sup_eq : forall (x:t) (y:t), (infix_gteqdt x y) -> infix_lseqdt y x.

Axiom sup_eq1 : forall (x:t) (y:t), (infix_lseqdt y x) -> infix_gteqdt x y.

Axiom sup_st : forall (x:t) (y:t), (infix_gtdt x y) -> infix_gteqdt x y.

Axiom sup_st1 : forall (x:t) (y:t), (infix_gtdt x y) -> ~ (x = y).

Axiom sup_st2 :
  forall (x:t) (y:t), ((infix_gteqdt x y) /\ ~ (x = y)) -> infix_gtdt x y.

Axiom real_square_rt :
  forall (x:t), (real_ x) -> (infix_lseqdt tzero x) -> real_ (square_rt x).

Axiom pos_square_rt :
  forall (x:t), (real_ x) -> (infix_lseqdt tzero x) ->
  infix_gteqdt (square_rt x) tzero.

Axiom square_rt_mult :
  forall (t1:t) (t':t), (real_ t1) -> (infix_lseqdt tzero t1) ->
  (real_ t') -> (infix_lseqdt tzero t') ->
  ((infix_asdt (square_rt t1) (square_rt t')) =
   (square_rt (infix_asdt t1 t'))).

Axiom Refl : forall (x:t), infix_lseqdt x x.

Axiom Trans :
  forall (x:t) (y:t) (z:t), (infix_lseqdt x y) -> (infix_lseqdt y z) ->
  infix_lseqdt x z.

Axiom Antisymm :
  forall (x:t) (y:t), (infix_lseqdt x y) -> (infix_lseqdt y x) -> (x = y).

Axiom Refl1 : forall (x:t), infix_gteqdt x x.

Axiom Trans1 :
  forall (x:t) (y:t) (z:t), (infix_gteqdt x y) -> (infix_gteqdt y z) ->
  infix_gteqdt x z.

Axiom Antisymm1 :
  forall (x:t) (y:t), (infix_gteqdt x y) -> (infix_gteqdt y x) -> (x = y).

Axiom Trans2 :
  forall (x:t) (y:t) (z:t), (infix_lsdt x y) -> (infix_lsdt y z) ->
  infix_lsdt x z.

Axiom Asymm : forall (x:t) (y:t), (infix_lsdt x y) -> ~ (infix_lsdt y x).

Axiom Trans3 :
  forall (x:t) (y:t) (z:t), (infix_gtdt x y) -> (infix_gtdt y z) ->
  infix_gtdt x z.

Axiom Asymm1 : forall (x:t) (y:t), (infix_gtdt x y) -> ~ (infix_gtdt y x).

Axiom r_to_t_inf :
  forall (i:R) (j:R), (infix_lseqdt (r_to_t i) (r_to_t j)) -> (i <= j)%R.

Axiom r_to_t_inf1 :
  forall (i:R) (j:R), (i <= j)%R -> infix_lseqdt (r_to_t i) (r_to_t j).

Parameter pi: t.

Axiom pi_def : real_ pi.

Axiom pi_def1 : infix_lsdt tzero pi.

Axiom inf_to_non_sup_eq :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> (infix_lsdt x y) ->
  ~ (infix_gteqdt x y).

Axiom sup_eq_to_non_inf :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> (infix_gteqdt x y) ->
  ~ (infix_lsdt x y).

Axiom sup_to_inf :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> (infix_gtdt x y) ->
  infix_lsdt y x.

Axiom inf_to_sup :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> (infix_lsdt x y) ->
  infix_gtdt y x.

Axiom sup_to_non_inf_eq :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> (infix_gtdt x y) ->
  ~ (infix_lseqdt x y).

Axiom inf_eq_to_non_sup :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> (infix_lseqdt x y) ->
  ~ (infix_gtdt x y).

Axiom non_inf_eq_to_sup :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> ~ (infix_lseqdt x y) ->
  infix_gtdt x y.

Axiom non_sup_toinf_eq :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> ~ (infix_gtdt x y) ->
  infix_lseqdt x y.

Axiom compat_r_to_t_infeq :
  forall (a:R) (b:R), (a <= b)%R -> infix_lseqdt (r_to_t a) (r_to_t b).

Axiom compat_r_to_t_inf :
  forall (a:R) (b:R), (infix_lsas a b) -> infix_lsdt (r_to_t a) (r_to_t b).

Axiom compat_r_to_t_supeq :
  forall (a:R) (b:R), (b <= a)%R -> infix_gteqdt (r_to_t a) (r_to_t b).

Axiom compat_r_to_t_sup :
  forall (a:R) (b:R), (infix_lsas b a) -> infix_gtdt (r_to_t a) (r_to_t b).

Axiom unic_inv :
  forall (i:t) (j:t), ~ (i = tzero) -> ((infix_asdt i j) = tone) ->
  (j = (inv i)).

Axiom inf_eq_def :
  forall (x:t) (y:t), (infix_lseqdt x y) -> (real_ x) \/ (x = y).

Axiom inf_eq_def1 :
  forall (x:t) (y:t), (infix_lseqdt x y) -> (real_ y) \/ (x = y).

Axiom inf_eq_def2 :
  forall (x:t) (y:t), (infix_lseqdt x y) ->
  ((real_part x) <= (real_part y))%R \/ (x = y).

Axiom inf_eq_def3 :
  forall (x:t) (y:t),
  ((real_ x) /\ ((real_ y) /\ ((real_part x) <= (real_part y))%R)) ->
  infix_lseqdt x y.

Axiom inf_eq_def4 : forall (x:t) (y:t), (x = y) -> infix_lseqdt x y.

Axiom inf_minus :
  forall (x:t) (y:t), (infix_lsdt x y) ->
  infix_lsdt (prefix_mndt y) (prefix_mndt x).

(* Why3 assumption *)
Definition t_real_part (x:t) : t := r_to_t (real_part x).

Axiom t_real_part_spec : forall (x:t), real_ (t_real_part x).

Axiom t_real_part_inv :
  forall (x:t),
  ((t_real_part (prefix_mndt x)) = (prefix_mndt (t_real_part x))).

(* Why3 assumption *)
Definition t_im_part (x:t) : t := r_to_t (im_part x).

Axiom t_im_part_spec : forall (x:t), real_ (t_im_part x).

Axiom t_im_part_inv :
  forall (x:t), ((t_im_part (prefix_mndt x)) = (prefix_mndt (t_im_part x))).

Axiom decomp_mult :
  forall (a:t) (b:t),
  ((infix_asdt a b) =
   (infix_pldt
    (infix_mndt (infix_asdt (r_to_t (real_part a)) (r_to_t (real_part b)))
     (infix_asdt (r_to_t (im_part a)) (r_to_t (im_part b))))
    (infix_asdt im
     (infix_pldt (infix_asdt (r_to_t (real_part a)) (r_to_t (im_part b)))
      (infix_asdt (r_to_t (real_part b)) (r_to_t (im_part a))))))).

Axiom decomp_mult_real_part :
  forall (a:t) (b:t),
  ((real_part (infix_asdt a b)) =
   (infix_mnas ((real_part a) * (real_part b))%R
    ((im_part a) * (im_part b))%R)).

Axiom t_mult_real :
  forall (a:t) (b:t),
  ((t_real_part (infix_asdt a b)) =
   (infix_mndt (infix_asdt (t_real_part a) (t_real_part b))
    (infix_asdt (t_im_part a) (t_im_part b)))).

Axiom mult_real_real :
  forall (a:t) (b:t), (real_ a) -> (real_ b) ->
  ((infix_asdt a b) =
   (infix_asdt (r_to_t (real_part a)) (r_to_t (real_part b)))).

Axiom mult_real_real1 :
  forall (a:t) (b:t), (real_ a) -> (real_ b) ->
  ((infix_asdt (r_to_t (real_part a)) (r_to_t (real_part b))) =
   (r_to_t ((real_part a) * (real_part b))%R)).

Axiom mult_real_real2 :
  forall (a:t) (b:t), (real_ a) -> (real_ b) ->
  ((real_part (infix_asdt a b)) = ((real_part a) * (real_part b))%R).

Axiom mult_real_real3 :
  forall (a:t) (b:t), (real_ a) -> (real_ b) ->
  ((im_part (infix_asdt a b)) = 0%R).

Axiom compat_order_mult :
  forall (x:t) (y:t) (z:t), (infix_lseqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lseqdt tzero z) ->
  infix_lseqdt (infix_asdt x z) (infix_asdt y z).

Axiom mult_pos :
  forall (x:t) (y:t), (infix_lseqdt tzero x) -> (infix_lseqdt tzero y) ->
  infix_lseqdt tzero (infix_asdt x y).

Axiom inf_def : forall (x:t) (y:t), (infix_lsdt x y) -> real_ x.

Axiom inf_def1 : forall (x:t) (y:t), (infix_lsdt x y) -> real_ y.

Axiom inf_def2 :
  forall (x:t) (y:t), (infix_lsdt x y) ->
  infix_lsas (real_part x) (real_part y).

Axiom inf_def3 :
  forall (x:t) (y:t),
  ((real_ x) /\ ((real_ y) /\ (infix_lsas (real_part x) (real_part y)))) ->
  infix_lsdt x y.

Axiom sup_eq_def :
  forall (x:t) (y:t), (infix_gteqdt x y) -> (real_ x) \/ (x = y).

Axiom sup_eq_def1 :
  forall (x:t) (y:t), (infix_gteqdt x y) -> (real_ y) \/ (x = y).

Axiom sup_eq_def2 :
  forall (x:t) (y:t), (infix_gteqdt x y) ->
  ((real_part y) <= (real_part x))%R \/ (x = y).

Axiom sup_eq_def3 :
  forall (x:t) (y:t),
  ((real_ x) /\ ((real_ y) /\ ((real_part y) <= (real_part x))%R)) ->
  infix_gteqdt x y.

Axiom sup_eq_def4 : forall (x:t) (y:t), (x = y) -> infix_gteqdt x y.

Axiom sup_def : forall (x:t) (y:t), (infix_gtdt x y) -> real_ x.

Axiom sup_def1 : forall (x:t) (y:t), (infix_gtdt x y) -> real_ y.

Axiom sup_def2 :
  forall (x:t) (y:t), (infix_gtdt x y) ->
  infix_lsas (real_part y) (real_part x).

Axiom sup_def3 :
  forall (x:t) (y:t),
  ((real_ x) /\ ((real_ y) /\ (infix_lsas (real_part y) (real_part x)))) ->
  infix_gtdt x y.

Axiom decomp_mult_im_part :
  forall (a:t) (b:t),
  ((im_part (infix_asdt a b)) =
   (((real_part a) * (im_part b))%R + ((real_part b) * (im_part a))%R)%R).

Axiom lower_inv :
  forall (a:t) (b:t) (c:t), (infix_lsdt tzero b) -> (infix_lseqdt tzero a) ->
  (infix_lseqdt b c) -> infix_gteqdt (infix_sldt a b) (infix_sldt a c).

Axiom assoc_mult_div :
  forall (x:t) (y:t) (z:t), ~ (z = tzero) ->
  ((infix_asdt x (infix_sldt y z)) = (infix_sldt (infix_asdt x y) z)).

Axiom transitive_infeq :
  forall (a:t) (b:t) (c:t), (infix_lseqdt a b) -> (infix_lseqdt b c) ->
  infix_lseqdt a c.

Axiom transitive_supeq :
  forall (a:t) (b:t) (c:t), (infix_gteqdt a b) -> (infix_gteqdt b c) ->
  infix_gteqdt a c.

Axiom compat_mult_sup_eq_right :
  forall (a:t) (b:t) (c:t), (infix_lseqdt tzero a) -> (infix_gteqdt b c) ->
  infix_gteqdt (infix_asdt a b) (infix_asdt a c).

Axiom infeq_to_supeq :
  forall (a:t) (b:t), (infix_lseqdt a b) -> infix_gteqdt b a.

Axiom lower_over_cons :
  forall (a:t) (b:t) (c:t), (infix_lsdt tzero c) -> (infix_lseqdt tzero a) ->
  (infix_lseqdt a b) -> infix_lseqdt (infix_sldt a c) (infix_sldt b c).

Axiom supeq_elim_left :
  forall (a:t) (b:t), (infix_gteqdt a b) ->
  infix_gteqdt tzero (infix_mndt b a).

Axiom sup_elim_left :
  forall (a:t) (b:t), (infix_gtdt a b) -> infix_gtdt tzero (infix_mndt b a).

Axiom infeq_elim_left :
  forall (a:t) (b:t), (infix_lseqdt a b) ->
  infix_lseqdt tzero (infix_mndt b a).

Axiom inf_elim_left :
  forall (a:t) (b:t), (infix_lsdt a b) -> infix_lsdt tzero (infix_mndt b a).

Axiom t_im_real :
  forall (a:t) (b:t),
  ((t_im_part (infix_asdt a b)) =
   (infix_pldt (infix_asdt (t_real_part a) (t_im_part b))
    (infix_asdt (t_im_part a) (t_real_part b)))).

Axiom t_decomp_mult :
  forall (a:t) (b:t),
  ((infix_asdt a b) =
   (infix_pldt
    (infix_mndt (infix_asdt (t_real_part a) (t_real_part b))
     (infix_asdt (t_im_part a) (t_im_part b)))
    (infix_asdt im
     (infix_pldt (infix_asdt (t_real_part a) (t_im_part b))
      (infix_asdt (t_im_part a) (t_real_part b)))))).

Axiom t_complex_decomp :
  forall (i:t),
  (i = (infix_pldt (t_real_part i) (infix_asdt im (t_im_part i)))).

Axiom t_unic_decomp :
  forall (i:t) (a:t) (b:t), (real_ a) -> (real_ b) ->
  (i = (infix_pldt a (infix_asdt im b))) -> (a = (t_real_part i)).

Axiom t_unic_decomp1 :
  forall (i:t) (a:t) (b:t), (real_ a) -> (real_ b) ->
  (i = (infix_pldt a (infix_asdt im b))) -> (b = (t_im_part i)).

Axiom t_decomp_minus :
  forall (i:t) (a:t) (b:t), (real_ a) -> (real_ b) ->
  (i = (infix_mndt a (infix_asdt im b))) -> (a = (t_real_part i)).

Axiom t_decomp_minus1 :
  forall (i:t) (a:t) (b:t), (real_ a) -> (real_ b) ->
  (i = (infix_mndt a (infix_asdt im b))) -> ((prefix_mndt b) = (t_im_part i)).

Axiom real_sum :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> real_ (infix_pldt x y).

Axiom set : forall (a:Type), Type.
Parameter set_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (set a).
Existing Instance set_WhyType.

Parameter mem: forall {a:Type} {a_WT:WhyType a}, a -> (set a) -> Prop.

Parameter infix_eqeq:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (set a) -> Prop.

Axiom infix_eqeq_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (infix_eqeq s1 s2) -> forall (x:a),
  (mem x s1) -> mem x s2.

Axiom infix_eqeq_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (infix_eqeq s1 s2) -> forall (x:a),
  (mem x s2) -> mem x s1.

Axiom infix_eqeq_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (forall (x:a), (mem x s1) <-> (mem x s2)) ->
  infix_eqeq s1 s2.

Axiom extensionality :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (infix_eqeq s1 s2) -> (s1 = s2).

Parameter subset:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (set a) -> Prop.

Axiom subset_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (subset s1 s2) -> forall (x:a), (mem x s1) ->
  mem x s2.

Axiom subset_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (forall (x:a), (mem x s1) -> mem x s2) ->
  subset s1 s2.

Axiom subset_refl :
  forall {a:Type} {a_WT:WhyType a}, forall (s:set a), subset s s.

Axiom subset_trans :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a) (s3:set a), (subset s1 s2) ->
  (subset s2 s3) -> subset s1 s3.

Parameter is_empty: forall {a:Type} {a_WT:WhyType a}, (set a) -> Prop.

Axiom is_empty_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (is_empty s) -> forall (x:a), ~ (mem x s).

Axiom is_empty_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (forall (x:a), ~ (mem x s)) -> is_empty s.

Parameter empty: forall {a:Type} {a_WT:WhyType a}, set a.

Axiom empty_def : forall {a:Type} {a_WT:WhyType a}, is_empty (empty : set a).

Parameter add: forall {a:Type} {a_WT:WhyType a}, a -> (set a) -> set a.

Axiom add_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), forall (y:a), (mem y (add x s)) ->
  (y = x) \/ (mem y s).

Axiom add_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), forall (y:a), (y = x) -> mem y (add x s).

Axiom add_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), forall (y:a), (mem y s) -> mem y (add x s).

Parameter remove: forall {a:Type} {a_WT:WhyType a}, a -> (set a) -> set a.

Axiom remove_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), forall (y:a), (mem y (remove x s)) -> ~ (y = x).

Axiom remove_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), forall (y:a), (mem y (remove x s)) -> mem y s.

Axiom remove_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), forall (y:a), (~ (y = x) /\ (mem y s)) ->
  mem y (remove x s).

Axiom add_remove :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), (mem x s) -> ((add x (remove x s)) = s).

Axiom remove_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), ((remove x (add x s)) = (remove x s)).

Axiom subset_remove :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a) (s:set a), subset (remove x s) s.

Parameter union:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (set a) -> set a.

Axiom union_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), (mem x (union s1 s2)) ->
  (mem x s1) \/ (mem x s2).

Axiom union_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), (mem x s1) ->
  mem x (union s1 s2).

Axiom union_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), (mem x s2) ->
  mem x (union s1 s2).

Parameter inter:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (set a) -> set a.

Axiom inter_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), (mem x (inter s1 s2)) ->
  mem x s1.

Axiom inter_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), (mem x (inter s1 s2)) ->
  mem x s2.

Axiom inter_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), ((mem x s1) /\ (mem x s2)) ->
  mem x (inter s1 s2).

Parameter diff:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (set a) -> set a.

Axiom diff_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), (mem x (diff s1 s2)) ->
  mem x s1.

Axiom diff_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), (mem x (diff s1 s2)) ->
  ~ (mem x s2).

Axiom diff_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), forall (x:a), ((mem x s1) /\ ~ (mem x s2)) ->
  mem x (diff s1 s2).

Axiom subset_diff :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), subset (diff s1 s2) s1.

Parameter choose: forall {a:Type} {a_WT:WhyType a}, (set a) -> a.

Axiom choose_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), ~ (is_empty s) -> mem (choose s) s.

Parameter cardinal: forall {a:Type} {a_WT:WhyType a}, (set a) -> Z.

Axiom cardinal_nonneg :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (0%Z <= (cardinal s))%Z.

Axiom cardinal_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), ((cardinal s) = 0%Z) -> is_empty s.

Axiom cardinal_empty1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (is_empty s) -> ((cardinal s) = 0%Z).

Axiom cardinal_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a), forall (s:set a), ~ (mem x s) ->
  ((cardinal (add x s)) = (1%Z + (cardinal s))%Z).

Axiom cardinal_remove :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a), forall (s:set a), (mem x s) ->
  ((cardinal s) = (1%Z + (cardinal (remove x s)))%Z).

Axiom cardinal_subset :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (subset s1 s2) ->
  ((cardinal s1) <= (cardinal s2))%Z.

Axiom subset_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a), (subset s1 s2) ->
  ((cardinal s1) = (cardinal s2)) -> infix_eqeq s1 s2.

Axiom cardinal1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), ((cardinal s) = 1%Z) -> forall (x:a), (mem x s) ->
  (x = (choose s)).

Axiom real_diff :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> real_ (infix_mndt x y).

Axiom pure_im_sum :
  forall (x:t) (y:t), (pure_im_ x) -> (pure_im_ y) ->
  pure_im_ (infix_pldt x y).

Axiom equal_decomp :
  forall (x:t) (y:t), ((real_part x) = (real_part y)) ->
  ((im_part x) = (im_part y)) -> (x = y).

Axiom t_equal_decomp :
  forall (x:t) (y:t), ((t_real_part x) = (t_real_part y)) ->
  ((t_im_part x) = (t_im_part y)) -> (x = y).

Axiom pure_im_diff :
  forall (x:t) (y:t), (pure_im_ x) -> (pure_im_ y) ->
  pure_im_ (infix_mndt x y).

Axiom real_mult :
  forall (x:t) (y:t), (real_ x) -> (real_ y) -> real_ (infix_asdt x y).

Axiom real_inv :
  forall (x:t), (real_ x) -> ~ (x = tzero) -> real_ (infix_sldt tone x).

Axiom real_div :
  forall (x:t) (y:t), (real_ x) -> ~ (y = tzero) -> (real_ y) ->
  real_ (infix_sldt x y).

Axiom mult_im_im :
  forall (a:t) (b:t), (pure_im_ a) -> (pure_im_ b) ->
  ((infix_asdt a b) =
   (infix_asdt (infix_asdt im im)
    (infix_asdt (r_to_t (im_part a)) (r_to_t (im_part b))))).

Axiom mult_im_im1 :
  forall (a:t) (b:t), (pure_im_ a) -> (pure_im_ b) ->
  ((infix_asdt a b) = (prefix_mndt (r_to_t ((im_part a) * (im_part b))%R))).

Axiom mult_im_im2 :
  forall (a:t) (b:t), (pure_im_ a) -> (pure_im_ b) ->
  ((real_part (infix_asdt a b)) = (-((im_part a) * (im_part b))%R)%R).

Axiom mult_im_im3 :
  forall (a:t) (b:t), (pure_im_ a) -> (pure_im_ b) ->
  ((im_part (infix_asdt a b)) = 0%R).

Axiom mult_real_im :
  forall (a:t) (b:t), (real_ a) -> (pure_im_ b) ->
  ((infix_asdt a b) =
   (infix_asdt im (infix_asdt (r_to_t (real_part a)) (r_to_t (im_part b))))).

Axiom mult_real_im1 :
  forall (a:t) (b:t), (real_ a) -> (pure_im_ b) ->
  ((infix_asdt a b) =
   (infix_asdt im (r_to_t ((real_part a) * (im_part b))%R))).

Axiom mult_real_im2 :
  forall (a:t) (b:t), (real_ a) -> (pure_im_ b) ->
  ((real_part (infix_asdt a b)) = 0%R).

Axiom mult_real_im3 :
  forall (a:t) (b:t), (real_ a) -> (pure_im_ b) ->
  ((im_part (infix_asdt a b)) = ((real_part a) * (im_part b))%R).

Axiom mult_im_real :
  forall (a:t) (b:t), (pure_im_ a) -> (real_ b) ->
  ((infix_asdt a b) =
   (infix_asdt im (infix_asdt (r_to_t (im_part a)) (r_to_t (real_part b))))).

Axiom mult_im_real1 :
  forall (a:t) (b:t), (pure_im_ a) -> (real_ b) ->
  ((infix_asdt a b) =
   (infix_asdt im (r_to_t ((im_part a) * (real_part b))%R))).

Axiom mult_im_real2 :
  forall (a:t) (b:t), (pure_im_ a) -> (real_ b) ->
  ((real_part (infix_asdt a b)) = 0%R).

Axiom mult_im_real3 :
  forall (a:t) (b:t), (pure_im_ a) -> (real_ b) ->
  ((im_part (infix_asdt a b)) = ((im_part a) * (real_part b))%R).

Axiom decomp_mult_gen :
  forall (a:t) (b:t),
  ((real_part (infix_asdt a b)) =
   (infix_mnas ((real_part a) * (real_part b))%R
    ((im_part a) * (im_part b))%R)).

Axiom decomp_mult_gen1 :
  forall (a:t) (b:t),
  ((im_part (infix_asdt a b)) =
   (((real_part a) * (im_part b))%R + ((im_part a) * (real_part b))%R)%R).

Axiom inv_real :
  forall (a:t), ~ (a = tzero) -> (real_ a) ->
  ((real_part (infix_sldt tone a)) = (infix_slas 1%R (real_part a))).

Axiom inv_real1 :
  forall (a:t), ~ (a = tzero) -> (real_ a) -> real_ (infix_sldt tone a).

Axiom zeroLessOne : infix_lseqdt tzero tone.

Axiom compatOrderAdd :
  forall (x:t) (y:t) (z:t), (infix_lseqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> infix_lseqdt (infix_pldt x z) (infix_pldt y z).

Axiom strict_compatOrderAdd :
  forall (x:t) (y:t) (z:t) (t1:t), (infix_lsdt x y) -> (infix_lsdt z t1) ->
  (real_ x) -> (real_ y) -> (real_ z) -> (real_ t1) ->
  infix_lsdt (infix_pldt x z) (infix_pldt y t1).

Axiom compat_sup_add :
  forall (x:t) (y:t) (z:t) (t1:t), (infix_gtdt x y) -> (infix_gtdt z t1) ->
  (real_ x) -> (real_ y) -> (real_ z) -> (real_ t1) ->
  infix_gtdt (infix_pldt x z) (infix_pldt y t1).

Axiom compat_supeq_mult :
  forall (x:t) (y:t) (z:t), (infix_gteqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lseqdt tzero z) ->
  infix_gteqdt (infix_asdt x z) (infix_asdt y z).

Axiom compat_supeq_div :
  forall (x:t) (y:t) (z:t), (infix_gteqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_gteqdt (infix_sldt x z) (infix_sldt y z).

Axiom compat_infeq_div :
  forall (x:t) (y:t) (z:t), (infix_lseqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_lseqdt (infix_sldt x z) (infix_sldt y z).

Axiom compat_sup_div :
  forall (x:t) (y:t) (z:t), (infix_gtdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_gtdt (infix_sldt x z) (infix_sldt y z).

Axiom compat_inf_div :
  forall (x:t) (y:t) (z:t), (infix_lsdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_lsdt (infix_sldt x z) (infix_sldt y z).

Axiom strict_compat_order_mult :
  forall (x:t) (y:t) (z:t), (infix_lsdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_lsdt (infix_asdt x z) (infix_asdt y z).

Axiom compat_order_mult_left :
  forall (x:t) (y:t) (z:t), (infix_lseqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lseqdt tzero z) ->
  infix_lseqdt (infix_asdt x z) (infix_asdt y z).

Axiom strict_compat_order_mult_left :
  forall (x:t) (y:t) (z:t), (infix_lsdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_lsdt (infix_asdt z x) (infix_asdt z y).

Axiom compat_sup_mult :
  forall (x:t) (y:t) (z:t), (infix_gteqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lseqdt tzero z) ->
  infix_gteqdt (infix_asdt x z) (infix_asdt y z).

Axiom strict_compat_sup_mult :
  forall (x:t) (y:t) (z:t), (infix_gtdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_gtdt (infix_asdt x z) (infix_asdt y z).

Axiom compat_sup_mult_left :
  forall (x:t) (y:t) (z:t), (infix_gteqdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lseqdt tzero z) ->
  infix_gteqdt (infix_asdt z x) (infix_asdt z y).

Axiom strict_compat_sup_mult_left :
  forall (x:t) (y:t) (z:t), (infix_gtdt x y) -> (real_ x) -> (real_ y) ->
  (real_ z) -> (infix_lsdt tzero z) ->
  infix_gtdt (infix_asdt z x) (infix_asdt z y).

Axiom inv_eqinf :
  forall (x:t) (y:t), (real_ x) -> (real_ y) ->
  ((infix_lsdt tzero x) /\ (infix_lseqdt x y)) ->
  infix_gteqdt (infix_sldt tone x) (infix_sldt tone y).

Axiom inv_inf :
  forall (x:t) (y:t), (real_ x) -> (real_ y) ->
  ((infix_lsdt tzero x) /\ (infix_lsdt x y)) ->
  infix_gtdt (infix_sldt tone x) (infix_sldt tone y).

Axiom inv_eqsup :
  forall (x:t) (y:t), (real_ x) -> (real_ y) ->
  ((infix_gteqdt x y) /\ (infix_gtdt y tzero)) ->
  infix_lseqdt (infix_sldt tone x) (infix_sldt tone y).

Axiom inv_sup :
  forall (x:t) (y:t), (real_ x) -> (real_ y) ->
  ((infix_gtdt x y) /\ (infix_gtdt y tzero)) ->
  infix_lsdt (infix_sldt tone x) (infix_sldt tone y).

Axiom inv_pos :
  forall (x:t), (real_ x) -> (infix_lsdt tzero x) ->
  infix_gtdt (infix_sldt tone x) tzero.

Axiom inv_neg :
  forall (x:t), (real_ x) -> (infix_gtdt tzero x) ->
  infix_lsdt (infix_sldt tone x) tzero.

Axiom zero_add_t :
  forall (a1:t) (a2:t), (a1 = tzero) -> ((infix_pldt a1 a2) = a2).

Axiom add_zero_t :
  forall (a1:t) (a2:t), (a2 = tzero) -> ((infix_pldt a1 a2) = a1).

Axiom one_mult_t :
  forall (a1:t) (a2:t), (a1 = tone) -> ((infix_asdt a1 a2) = a2).

Axiom one_mult_t_const : forall (a:t), ((infix_asdt tone a) = a).

Axiom zero_mult_t_const : forall (a:t), ((infix_asdt tzero a) = tzero).

Axiom mult_zero_t_const : forall (a:t), ((infix_asdt a tzero) = tzero).

Axiom zero_mult_t :
  forall (a1:t) (a2:t), (a1 = tzero) -> ((infix_asdt a1 a2) = tzero).

Axiom mult_zero_t :
  forall (a1:t) (a2:t), (a1 = tzero) -> ((infix_asdt a2 a1) = tzero).

Axiom mult_one_t :
  forall (a1:t) (a2:t), (a2 = tone) -> ((infix_asdt a1 a2) = a1).

Axiom add_eq_t :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ((infix_pldt a1 b1) = (infix_pldt a2 b2)).

Axiom add_eq_t_rev :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ((infix_pldt a1 b1) = (infix_pldt b2 a2)).

Axiom subs_eq :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ((infix_mndt a1 b1) = (infix_mndt a2 b2)).

Axiom subst_itself :
  forall (a1:t) (a2:t), (a1 = a2) -> ((infix_mndt a1 a2) = tzero).

Axiom add_op :
  forall (a1:t) (a2:t), (a1 = (prefix_mndt a2)) ->
  ((infix_pldt a1 a2) = tzero).

Axiom mult_eq_t :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ((infix_asdt a1 b1) = (infix_asdt a2 b2)).

Axiom mult_eq_t_rev :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ((infix_asdt a1 b1) = (infix_asdt b2 a2)).

Axiom mult_comm : forall (a:t) (b:t), ((infix_asdt a b) = (infix_asdt b a)).

Axiom mult_assoc :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt (infix_asdt a b) c) = (infix_asdt a (infix_asdt b c))).

Axiom mult_assoc_rev :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt a (infix_asdt b c)) = (infix_asdt (infix_asdt a b) c)).

Axiom div_mult :
  forall (a:t) (b:t) (c:t), ~ (c = tzero) ->
  ((infix_asdt a (infix_sldt b c)) = (infix_sldt (infix_asdt a b) c)).

Axiom div_mult_rev :
  forall (a:t) (b:t) (c:t), ~ (c = tzero) ->
  ((infix_sldt (infix_asdt a b) c) = (infix_asdt a (infix_sldt b c))).

Axiom triang_p :
  forall (a:t) (b:t),
  ((infix_asdt (infix_pldt a b) (infix_pldt a b)) =
   (infix_pldt
    (infix_pldt (infix_asdt a a)
     (infix_asdt (infix_asdt (infix_pldt tone tone) a) b))
    (infix_asdt b b))).

Axiom triang_n :
  forall (a:t) (b:t),
  ((infix_asdt (infix_mndt a b) (infix_mndt a b)) =
   (infix_pldt
    (infix_mndt (infix_asdt a a)
     (infix_asdt (infix_asdt (infix_pldt tone tone) a) b))
    (infix_asdt b b))).

Axiom triang_s :
  forall (a:t) (b:t) (c:t) (d:t) (e:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c)
    (infix_pldt (infix_mndt d b) e))
   = (infix_pldt (infix_pldt a c) (infix_pldt d e))).

Axiom triang_t :
  forall (a:t) (b:t),
  ((infix_asdt (infix_pldt a b) (infix_mndt a b)) =
   (infix_mndt (infix_asdt a a) (infix_asdt b b))).

Axiom triang_sr :
  forall (a:t) (b:t) (c:t) (d:t) (e:t),
  ((infix_pldt (infix_pldt (infix_mndt a b) c)
    (infix_pldt (infix_pldt d b) e))
   = (infix_pldt (infix_pldt a c) (infix_pldt d e))).

Axiom modulus_pre_pre :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_asdt a b) (infix_asdt c d))
    (infix_pldt (infix_asdt a d) (infix_asdt c b)))
   =
   (infix_pldt (infix_asdt a (infix_pldt b d))
    (infix_asdt c (infix_pldt b d)))).

Axiom modulus_pre_pre1 :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_asdt a b) (infix_asdt c d))
    (infix_pldt (infix_asdt a d) (infix_asdt c b)))
   = (infix_asdt (infix_pldt a c) (infix_pldt b d))).

Axiom modulus_pre :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt
    (infix_pldt (infix_asdt (infix_asdt a b) (infix_asdt a b))
     (infix_asdt (infix_asdt c d) (infix_asdt c d)))
    (infix_pldt (infix_asdt (infix_asdt a d) (infix_asdt a d))
     (infix_asdt (infix_asdt c b) (infix_asdt c b))))
   =
   (infix_asdt (infix_pldt (infix_asdt a a) (infix_asdt c c))
    (infix_pldt (infix_asdt b b) (infix_asdt d d)))).

(* Why3 assumption *)
Definition modulus (x:t) : t :=
  square_rt
  (infix_pldt (infix_asdt (t_real_part x) (t_real_part x))
   (infix_asdt (t_im_part x) (t_im_part x))).

Axiom modulus_spec : forall (x:t), infix_lseqdt tzero (modulus x).

(* Why3 assumption *)
Definition tone_modulus (x:t) : Prop := ((modulus x) = tone).

Axiom modulus_eq :
  forall (x:t) (y:t),
  ((infix_asdt (t_real_part x) (t_real_part x)) =
   (infix_asdt (t_real_part y) (t_real_part y))) ->
  ((infix_asdt (t_im_part x) (t_im_part x)) =
   (infix_asdt (t_im_part y) (t_im_part y))) ->
  ((modulus x) = (modulus y)).

Axiom modulus_itself :
  forall (x:t) (y:t), (x = y) -> ((modulus x) = (modulus y)).

Axiom strict_positive_modulus :
  forall (x:t), ~ (x = tzero) -> infix_lsdt tzero (modulus x).

Axiom mult_modulus :
  forall (x:t) (y:t),
  ((modulus (infix_asdt x y)) = (infix_asdt (modulus x) (modulus y))).

Axiom mult_tone_modulus :
  forall (x:t) (y:t), (tone_modulus x) -> (tone_modulus y) ->
  tone_modulus (infix_asdt x y).

Axiom div_eq :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ~ (b1 = tzero) -> ((infix_sldt a1 b1) = (infix_sldt a2 b2)).

Axiom add_eq_inv_t :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ((infix_pldt a1 b1) = (infix_pldt b2 a2)).

Axiom mult_eq_inv_t :
  forall (a1:t) (a2:t) (b1:t) (b2:t), (a1 = a2) -> (b1 = b2) ->
  ((infix_asdt a1 b1) = (infix_asdt b2 a2)).

Axiom sum_frac :
  forall (a1:t) (a2:t) (b:t), ~ (b = tzero) ->
  ((infix_pldt (infix_sldt a1 b) (infix_sldt a2 b)) =
   (infix_sldt (infix_pldt a1 a2) b)).

Axiom sum_frac_rev :
  forall (a1:t) (a2:t) (b:t), ~ (b = tzero) ->
  ((infix_sldt (infix_pldt a1 a2) b) =
   (infix_pldt (infix_sldt a1 b) (infix_sldt a2 b))).

Parameter op: forall {im1:Type} {im1_WT:WhyType im1}, im1 -> im1 -> im1.

Parameter po: forall {im1:Type} {im1_WT:WhyType im1}, im1 -> im1 -> im1.

Parameter inver: forall {im1:Type} {im1_WT:WhyType im1}, im1 -> im1.

Parameter filter:
  forall {a:Type} {a_WT:WhyType a}, (a -> bool) -> (set a) -> set a.

Axiom filter_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> bool) (u:set a), forall (x:a), (mem x (filter p u)) ->
  ((p x) = true).

Axiom filter_def1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> bool) (u:set a), forall (x:a), (mem x (filter p u)) ->
  mem x u.

Axiom filter_def2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> bool) (u:set a), forall (x:a),
  (((p x) = true) /\ (mem x u)) -> mem x (filter p u).

Axiom filter_cardinal :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> bool) (u:set a), ((cardinal (filter p u)) <= (cardinal u))%Z.

Parameter map:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a -> b) ->
  (set a) -> set b.

Axiom map_def1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), forall (y:b), (mem y (map f u)) ->
  exists x:a, (mem x u) /\ (y = (f x)).

Axiom map_def11 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), forall (y:b),
  (exists x:a, (mem x u) /\ (y = (f x))) -> mem y (map f u).

Axiom map_def2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), forall (x:a), (mem x u) -> mem (f x) (map f u).

Axiom map_cardinal :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), ((cardinal (map f u)) <= (cardinal u))%Z.

Axiom assert_equal : True.

Axiom goal_comm :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:a) (b:a), (a1 = b) -> (b = a1).

Parameter fir:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a* b)%type ->
  a.

Parameter sec:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a* b)%type ->
  b.

Axiom projections :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (o:(a* b)%type), (o = (fir o, sec o)).

Axiom get_fir :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (b1:b), ((fir (a1, b1)) = a1).

Axiom get_sec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (b1:b), ((sec (a1, b1)) = b1).

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | mk_ref : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments mk_ref {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | mk_ref x => x
  end.

Axiom union_exchange :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), ~ (is_empty s') ->
  ((union (add (choose s') s) (remove (choose s') s')) = (union s s')).

Axiom get_filter :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> bool) (s:set a) (x:a), (mem x (filter p s)) ->
  ((p x) = true).

Axiom get_filter1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> bool) (s:set a) (x:a), (mem x (filter p s)) -> mem x s.

Axiom set_filter :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:a -> bool) (s:set a) (x:a), ((p x) = true) -> (mem x s) ->
  mem x (filter p s).

Axiom inter_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (is_empty s) -> is_empty (inter s s').

Axiom inter_empty_comm :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (is_empty s') -> is_empty (inter s s').

Axiom inter_sym :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), ((inter s s') = (inter s' s)).

Axiom union_sym :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), ((union s s') = (union s' s)).

Axiom union_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (is_empty s) -> ((union s s') = s').

Axiom union_comm :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (is_empty s') -> ((union s s') = s).

Axiom union_members :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), forall (a1:a), (mem a1 (union s s')) ->
  ~ (mem a1 s) -> mem a1 s'.

Axiom union_members1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), forall (a1:a), (mem a1 (union s s')) ->
  ~ (mem a1 s') -> mem a1 s.

Axiom union_alt :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (e:a), (mem e (union s s')) -> ~ (mem e s) ->
  mem e s'.

Axiom union_empty_comm :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (is_empty s') -> ((union s s') = s).

Axiom set_subset :
  forall {a:Type} {a_WT:WhyType a},
  forall (s':set a) (s:set a), (forall (e:a), (mem e s') -> mem e s) ->
  subset s' s.

Axiom set_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (forall (e:a), ~ (mem e s)) -> (s = (empty : set a)).

Axiom set_empty1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (forall (e:a), ~ (mem e s)) -> is_empty s.

Axiom set_equal :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (forall (e:a), (mem e s) -> mem e s') ->
  (forall (e:a), (mem e s') -> mem e s) -> (s = s').

Axiom get_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (s = (empty : set a)) -> forall (e:a), ~ (mem e s).

Axiom get_empty1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (s = (empty : set a)) -> is_empty s.

Axiom get_non_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), ~ (is_empty s) -> exists e:a, mem e s.

Axiom set_non_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (exists e:a, mem e s) -> ~ (is_empty s).

Axiom set_non_empty1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (exists e:a, mem e s) -> (0%Z < (cardinal s))%Z.

Axiom set_pos_card_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (a1:a), (mem a1 s) -> (0%Z < (cardinal s))%Z.

Axiom union_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (x:a), ~ (mem x s') ->
  ((union s (add x s')) = (add x (union s s'))).

Axiom union_add_mem :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (x:a) (y:a), (mem x (add y (union s s'))) ->
  ~ (mem x s') -> ~ (mem x s) -> (x = y).

Axiom union_add_comm :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (x:a), ~ (mem x s') ->
  ((add x (union s s')) = (union s (add x s'))).

Axiom remove_add1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (x:a), ~ (mem x s) -> ((remove x (add x s)) = s).

Axiom add_remove1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (x:a), (mem x s) -> ((add x (remove x s)) = s).

(* Why3 assumption *)
Definition p_injective {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    (f:a -> b) (s:set a) : Prop :=
  forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
  ~ ((f e) = (f e')).

Axiom set_map_mem :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (b1:b),
  (exists a1:a, (mem a1 s) /\ (b1 = (f a1))) -> mem b1 (map f s).

Axiom map_add :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (x:a), ~ (mem x s) ->
  ((map f (add x s)) = (add (f x) (map f s))).

Axiom map_eq :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:a -> b) (s:set a),
  (forall (e:a), (mem e s) -> ((f e) = (g e))) -> ((map f s) = (map g s)).

Axiom injective_map_cardinal :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), (p_injective f s) ->
  ((cardinal (map f s)) = (cardinal s)).

Axiom set_map_mem_el :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (b1:b) (a1:a), (mem a1 s) -> (b1 = (f a1)) ->
  mem b1 (map f s).

Axiom set_map_mem_el_gen :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (b1:b),
  (exists a1:a, (mem a1 s) /\ (b1 = (f a1))) -> mem b1 (map f s).

Axiom map_antec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (b1:b), (mem b1 (map f s)) ->
  exists a1:a, (mem a1 s) /\ (b1 = (f a1)).

Axiom map_antec_gen :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), forall (b1:b), (mem b1 (map f s)) ->
  exists a1:a, (mem a1 s) /\ (b1 = (f a1)).

Axiom map_remove_choose :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b), (p_injective f s) ->
  ((map f (remove (choose s) s)) = (remove (f (choose s)) (map f s))).

Parameter antec_set:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (set a) ->
  (a -> b) -> b -> set a.

Parameter result:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a -> b) ->
  b -> a -> bool.

Axiom result_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (b1:b) (e:a), (((result f b1) e) = true) <-> ((f e) = b1).

Axiom antec_set_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b) (b1:b), (mem b1 (map f s)) ->
  ((antec_set s f b1) = (filter (result f b1) s)).

Parameter remove_s:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (set a) -> set a.

Parameter result1: forall {a:Type} {a_WT:WhyType a}, (set a) -> a -> bool.

Axiom result_def1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s':set a) (e:a), (((result1 s') e) = true) <-> ~ (mem e s').

Axiom remove_s_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (subset s' s) ->
  ((remove_s s s') = (filter (result1 s') s)).

Axiom remove_s_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (subset s' s) -> forall (e:a),
  (mem e (remove_s s s')) -> mem e s.

Axiom remove_s_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (subset s' s) -> forall (e:a),
  (mem e (remove_s s s')) -> ~ (mem e s').

Axiom remove_s_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), (subset s' s) -> forall (e:a),
  ((mem e s) /\ ~ (mem e s')) -> mem e (remove_s s s').

Parameter remove_antecs:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (set a) ->
  (a -> b) -> b -> set a.

Axiom remove_antecs_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b) (b1:b), (mem b1 (map f s)) ->
  ((remove_antecs s f b1) = (remove_s s (antec_set s f b1))).

Axiom remove_antecs_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b) (b1:b), (mem b1 (map f s)) -> forall (e:a),
  (mem e (remove_antecs s f b1)) -> mem e s.

Axiom remove_antecs_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b) (b1:b), (mem b1 (map f s)) -> forall (e:a),
  (mem e (remove_antecs s f b1)) -> ~ ((f e) = b1).

Axiom remove_antecs_spec2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b) (b1:b), (mem b1 (map f s)) -> forall (e:a),
  ((mem e s) /\ ~ ((f e) = b1)) -> mem e (remove_antecs s f b1).

Axiom remove_antecs_spec3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b) (b1:b), (mem b1 (map f s)) ->
  ((cardinal (remove_antecs s f b1)) < (cardinal s))%Z.

Axiom map_remove_antec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (f:a -> b) (b1:b), (mem b1 (map f s)) ->
  ((map f (remove_antecs s f b1)) = (remove b1 (map f s))).

Axiom map_non_empty :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), (0%Z < (cardinal s))%Z ->
  (0%Z < (cardinal (map f s)))%Z.

Axiom non_empty_map :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), (0%Z < (cardinal (map f s)))%Z ->
  (0%Z < (cardinal s))%Z.

Parameter right_injections:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, a -> (set b) ->
  set (a* b)%type.

Axiom right_injections_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), (is_empty s) ->
  ((right_injections a1 s) = (empty : set (a* b)%type)).

Axiom right_injections_def1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), ~ (is_empty s) ->
  ((right_injections a1 s) =
   (add (a1, choose s) (right_injections a1 (remove (choose s) s)))).

Axiom right_injections_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b),
  ((cardinal (right_injections a1 s)) = (cardinal s)).

Axiom right_injections_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), forall (a':a), forall (b1:b),
  (mem (a', b1) (right_injections a1 s)) -> (a' = a1).

Axiom right_injections_spec2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), forall (a':a), forall (b1:b),
  (mem (a', b1) (right_injections a1 s)) -> mem b1 s.

Axiom right_injections_spec3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), forall (a':a), forall (b1:b),
  ((a' = a1) /\ (mem b1 s)) -> mem (a', b1) (right_injections a1 s).

Axiom right_injections_spec4 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b),
  ((right_injections a1 s) = (map (fun (b1:b) => (a1, b1)) s)).

Parameter left_injections:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (set a) -> b ->
  set (a* b)%type.

Axiom left_injections_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), (is_empty s) ->
  ((left_injections s b1) = (empty : set (a* b)%type)).

Axiom left_injections_def1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), ~ (is_empty s) ->
  ((left_injections s b1) =
   (add (choose s, b1) (left_injections (remove (choose s) s) b1))).

Axiom left_injections_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), forall (a1:a), forall (b':b),
  (mem (a1, b') (left_injections s b1)) -> mem a1 s.

Axiom left_injections_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), forall (a1:a), forall (b':b),
  (mem (a1, b') (left_injections s b1)) -> (b' = b1).

Axiom left_injections_spec2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), forall (a1:a), forall (b':b),
  ((mem a1 s) /\ (b' = b1)) -> mem (a1, b') (left_injections s b1).

Axiom left_injections_spec3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), ((cardinal (left_injections s b1)) = (cardinal s)).

Axiom left_injections_spec4 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b),
  ((left_injections s b1) = (map (fun (a1:a) => (a1, b1)) s)).

Axiom right_injections_l :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b),
  ((cardinal (right_injections a1 s)) = (cardinal s)).

Axiom right_injections_l1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), forall (a':a), forall (b1:b),
  (mem (a', b1) (right_injections a1 s)) -> (a' = a1).

Axiom right_injections_l2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), forall (a':a), forall (b1:b),
  (mem (a', b1) (right_injections a1 s)) -> mem b1 s.

Axiom right_injections_l3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b), forall (a':a), forall (b1:b),
  ((a' = a1) /\ (mem b1 s)) -> mem (a', b1) (right_injections a1 s).

Axiom right_injections_l4 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (s:set b),
  ((right_injections a1 s) = (map (fun (b1:b) => (a1, b1)) s)).

Axiom left_injections_l :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), forall (a1:a), forall (b':b),
  (mem (a1, b') (left_injections s b1)) -> mem a1 s.

Axiom left_injections_l1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), forall (a1:a), forall (b':b),
  (mem (a1, b') (left_injections s b1)) -> (b' = b1).

Axiom left_injections_l2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), forall (a1:a), forall (b':b),
  ((mem a1 s) /\ (b' = b1)) -> mem (a1, b') (left_injections s b1).

Axiom left_injections_l3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b), ((cardinal (left_injections s b1)) = (cardinal s)).

Axiom left_injections_l4 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b),
  ((left_injections s b1) = (map (fun (a1:a) => (a1, b1)) s)).

Axiom disjoint_injections :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b) (c:b), ~ (b1 = c) ->
  is_empty (inter (right_injections b1 s) (right_injections c s)).

Axiom disjoint_injections1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (b1:b) (c:b), ~ (b1 = c) ->
  is_empty (inter (left_injections s b1) (left_injections s c)).

Axiom induction :
  forall {a:Type} {a_WT:WhyType a},
  forall (p:(set a) -> bool) (t1:set a),
  (forall (s:set a), (is_empty s) -> ((p s) = true)) ->
  (forall (s:set a), ((p s) = true) -> forall (t2:a), ~ (mem t2 s) ->
   ((p (add t2 s)) = true)) ->
  ((p t1) = true).

Axiom cardinal_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a),
  ((cardinal (union s s')) =
   (((cardinal s) + (cardinal s'))%Z - (cardinal (inter s s')))%Z).

Axiom cardinal_sum_empty_inter :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a), ((inter s s') = (empty : set a)) ->
  ((cardinal (union s s')) = ((cardinal s) + (cardinal s'))%Z).

Parameter cartesian_product:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (set a) ->
  (set b) -> set (a* b)%type.

Axiom cartesian_product_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b),
  ((cardinal (cartesian_product s1 s2)) = ((cardinal s1) * (cardinal s2))%Z).

Axiom cartesian_product_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (a1:a), forall (b1:b),
  (mem (a1, b1) (cartesian_product s1 s2)) -> mem a1 s1.

Axiom cartesian_product_spec2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (a1:a), forall (b1:b),
  (mem (a1, b1) (cartesian_product s1 s2)) -> mem b1 s2.

Axiom cartesian_product_spec3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (a1:a), forall (b1:b),
  ((mem a1 s1) /\ (mem b1 s2)) -> mem (a1, b1) (cartesian_product s1 s2).

Axiom cartesian_product_spec4 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type),
  (mem o (cartesian_product s1 s2)) -> mem (fir o) s1.

Axiom cartesian_product_spec5 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type),
  (mem o (cartesian_product s1 s2)) -> mem (sec o) s2.

Axiom cartesian_product_spec6 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type),
  ((mem (fir o) s1) /\ (mem (sec o) s2)) -> mem o (cartesian_product s1 s2).

(* Why3 assumption *)
Definition commute {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    (o:(a* b)%type) : (b* a)%type :=
  match o with
  | (a1, b1) => (b1, a1)
  end.

Axiom commute_inj :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b), ~ (a1 = a') ->
  ~ ((commute (a1, b1)) = (commute (a', b'))).

Axiom commute_inj1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b), ~ (b1 = b') ->
  ~ ((commute (a1, b1)) = (commute (a', b'))).

Axiom mem_cartesian_product :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b) (a1:a) (b1:b), (mem a1 s1) -> (mem b1 s2) ->
  mem (a1, b1) (cartesian_product s1 s2).

Axiom commute_inj_gen :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b),
  p_injective (fun (y0:(a* b)%type) => (commute y0))
  (cartesian_product s1 s2).

(* Why3 assumption *)
Definition commute_product {a:Type} {a_WT:WhyType a}
    {b:Type} {b_WT:WhyType b} (s1:set a) (s2:set b) : set (b* a)%type :=
  map (fun (y0:(a* b)%type) => (commute y0)) (cartesian_product s1 s2).

Axiom commute_product_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b),
  ((commute_product s1 s2) = (cartesian_product s2 s1)).

(* Why3 assumption *)
Definition commute_product_el {a:Type} {a_WT:WhyType a}
    {b:Type} {b_WT:WhyType b} (s1:set a) (s2:set b) : set (b* a)%type :=
  map (fun (y0:(a* b)%type) => (commute y0)) (cartesian_product s1 s2).

Axiom commute_product_el_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type), forall (x:a) (x1:b),
  (o = (x, x1)) -> (mem o (cartesian_product s1 s2)) -> mem x s1.

Axiom commute_product_el_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type), forall (x:a) (x1:b),
  (o = (x, x1)) -> (mem o (cartesian_product s1 s2)) -> mem x1 s2.

Axiom commute_product_el_spec2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type), forall (x:a) (x1:b),
  (o = (x, x1)) -> ((mem x s1) /\ (mem x1 s2)) ->
  mem o (cartesian_product s1 s2).

Axiom commute_product_el_spec3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type), forall (x:a) (x1:b),
  (o = (x, x1)) -> ((mem x s1) /\ (mem x1 s2)) ->
  mem (x1, x) (commute_product_el s1 s2).

Axiom commute_product_el_spec4 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type), forall (x:a) (x1:b),
  (o = (x, x1)) -> (mem (x1, x) (commute_product_el s1 s2)) -> mem x s1.

Axiom commute_product_el_spec5 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), forall (o:(a* b)%type), forall (x:a) (x1:b),
  (o = (x, x1)) -> (mem (x1, x) (commute_product_el s1 s2)) -> mem x1 s2.

Axiom cartesian_product_union :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b) (s3:set b),
  ((cartesian_product s1 (union s2 s3)) =
   (union (cartesian_product s1 s2) (cartesian_product s1 s3))).

Axiom cartesian_union_product :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set a) (s3:set b),
  ((cartesian_product (union s1 s2) s3) =
   (union (cartesian_product s1 s3) (cartesian_product s2 s3))).

Axiom cartesian_product_cardone_r :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), ((cardinal s1) = 1%Z) ->
  infix_eqeq (cartesian_product s1 s2) (right_injections (choose s1) s2).

Axiom cartesian_product_cardone_r1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), ((cardinal s1) = 1%Z) ->
  infix_eqeq (cartesian_product s1 s2)
  (map (fun (e2:b) => (choose s1, e2)) s2).

Axiom cartesian_product_cardone_l :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), ((cardinal s2) = 1%Z) ->
  infix_eqeq (cartesian_product s1 s2) (left_injections s1 (choose s2)).

Axiom cartesian_product_cardone_l1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b), ((cardinal s2) = 1%Z) ->
  infix_eqeq (cartesian_product s1 s2)
  (map (fun (e1:a) => (e1, choose s2)) s1).

Axiom disjoint_cartesian_product_l :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set a) (s3:set b),
  ((inter s1 s2) = (empty : set a)) ->
  ((inter (cartesian_product s1 s3) (cartesian_product s2 s3)) =
   (empty : set (a* b)%type)).

Axiom disjoint_cartesian_product_r :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b) (s3:set b),
  ((inter s2 s3) = (empty : set b)) ->
  ((inter (cartesian_product s1 s2) (cartesian_product s1 s3)) =
   (empty : set (a* b)%type)).

(* Why3 assumption *)
Definition op_neutral_left {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) (neutral:im1) : Prop :=
  forall (e:im1), (((op1 neutral) e) = e).

(* Why3 assumption *)
Definition op_neutral_right {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) (neutral:im1) : Prop :=
  forall (e:im1), (((op1 e) neutral) = e).

(* Why3 assumption *)
Definition op_assoc {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1) :
    Prop :=
  forall (a:im1) (b:im1) (c:im1),
  (((op1 ((op1 a) b)) c) = ((op1 a) ((op1 b) c))).

(* Why3 assumption *)
Definition op_neutral_left_comm {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) (neutral:im1) : Prop :=
  forall (a:im1), (forall (b:im1), (((op1 a) b) = b)) -> (a = neutral).

(* Why3 assumption *)
Definition commut {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1) :
    Prop :=
  forall (a:im1) (b:im1), (((op1 a) b) = ((op1 b) a)).

(* Why3 assumption *)
Definition assoc {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1) :
    Prop :=
  forall (a:im1) (b:im1) (c:im1),
  (((op1 ((op1 a) b)) c) = ((op1 a) ((op1 b) c))).

(* Why3 assumption *)
Definition opposite_n {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1)
    (po1:im1 -> im1 -> im1) (neutral:im1) : Prop :=
  forall (a:im1), (((po1 a) a) = neutral).

(* Why3 assumption *)
Definition inverse {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1)
    (po1:im1 -> im1 -> im1) (inver1:im1 -> im1) : Prop :=
  forall (a:im1) (b:im1), (((po1 a) b) = ((op1 a) (inver1 b))).

(* Why3 assumption *)
Definition opposite1 {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1)
    (po1:im1 -> im1 -> im1) : Prop :=
  forall (a:im1) (b:im1), (((op1 ((po1 a) b)) b) = a).

(* Why3 assumption *)
Definition opposite_com {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) : Prop :=
  forall (a:im1) (b:im1), (((po1 ((op1 a) b)) b) = a).

Axiom refl :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (a:im1) (b:im1), (commut op1) ->
  (((op1 a) b) = ((op1 b) a)).

(* Why3 assumption *)
Definition neutral {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1)
    (neut:im1) : Prop :=
  (op_neutral_left op1 neut) /\
  ((op_neutral_right op1 neut) /\ (op_assoc op1)).

Axiom set_neutral :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (neut:im1), (op_neutral_left op1 neut) ->
  (op_neutral_right op1 neut) -> (op_assoc op1) -> neutral op1 neut.

(* Why3 assumption *)
Definition has_neutral {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) : Prop :=
  exists e:im1, neutral op1 e.

(* Why3 assumption *)
Definition iterates {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1)
    (neutral1:im1) : Prop :=
  (op_neutral_left op1 neutral1) /\
  ((op_neutral_right op1 neutral1) /\ (op_assoc op1)).

(* Why3 assumption *)
Definition iterable {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1) :
    Prop :=
  exists e:im1, iterates op1 e.

Axiom iterates_ :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (neutral1:im1),
  (op_neutral_left op1 neutral1) -> (op_neutral_right op1 neutral1) ->
  (op_assoc op1) -> iterates op1 neutral1.

Axiom iterates_1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (neutral1:im1),
  (op_neutral_left op1 neutral1) -> (op_neutral_right op1 neutral1) ->
  (op_assoc op1) -> iterable op1.

Parameter neutral_elt:
  forall {im1:Type} {im1_WT:WhyType im1}, (im1 -> im1 -> im1) -> im1.

Axiom neutral_elt_spec :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1), forall (e:im1), (neutral op1 e) ->
  ((neutral_elt op1) = e).

Axiom neutral_elt_spec1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1), forall (e:im1), ((neutral_elt op1) = e) ->
  neutral op1 e.

(* Why3 assumption *)
Definition inverse_tuple {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (neutral1:im1) : Prop :=
  (opposite_n op1 po1 neutral1) /\
  ((opposite1 op1 po1) /\ (opposite_com op1 po1)).

Parameter iterate:
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  (im1 -> im1 -> im1) -> (set a) -> (a -> im1) -> im1.

Axiom Iterate_def_empty :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1), forall (s:set a), forall (f:a -> im1),
  (commut op1) -> (iterable op1) -> (is_empty s) ->
  ((iterate op1 (empty : set a) f) = (neutral_elt op1)).

Axiom Iterate_one :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1), forall (s:set a), forall (f:a -> im1),
  forall (x:a), (is_empty s) -> (commut op1) ->
  ((iterate op1 (add x s) f) = (f x)).

Axiom Iterate_add :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1), forall (s:set a), forall (f:a -> im1),
  forall (x:a), (0%Z < (cardinal s))%Z -> (commut op1) -> ~ (mem x s) ->
  ((iterate op1 (add x s) f) = ((op1 (f x)) (iterate op1 s f))).

Axiom minus_zero :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (a:im1),
  (iterable op1) -> (inverse_tuple op1 po1 (neutral_elt op1)) ->
  (((po1 a) (neutral_elt op1)) = a).

Axiom unic :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (a:im1) (b:im1)
    (c:im1),
  (iterable op1) -> (commut op1) -> (((op1 a) b) = ((op1 a) c)) ->
  (inverse_tuple op1 po1 (neutral_elt op1)) -> (b = c).

Axiom substract_comm :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (a:im1) (b:im1),
  (iterable op1) -> (commut op1) ->
  (inverse_tuple op1 po1 (neutral_elt op1)) -> (((po1 ((op1 a) b)) a) = b).

Axiom substract_comm1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (a:im1) (b:im1),
  (iterable op1) -> (commut op1) ->
  (inverse_tuple op1 po1 (neutral_elt op1)) -> (((po1 ((op1 b) a)) a) = b).

Axiom substract_comm2 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (a:im1) (b:im1)
    (c:im1),
  (iterable op1) -> (commut op1) ->
  (inverse_tuple op1 po1 (neutral_elt op1)) ->
  (((po1 a) ((po1 b) c)) = ((op1 ((po1 a) b)) c)).

Axiom substract_comm3 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (a:im1) (b:im1)
    (c:im1),
  (iterable op1) -> (commut op1) ->
  (inverse_tuple op1 po1 (neutral_elt op1)) ->
  (((po1 ((op1 a) b)) c) = ((op1 a) ((po1 b) c))).

Parameter int_iterate:
  forall {im1:Type} {im1_WT:WhyType im1}, (im1 -> im1 -> im1) ->
  (Z -> im1) -> Z -> Z -> im1.

Axiom int_iterate_def :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), ~ (j <= i)%Z ->
  (j <= i)%Z -> ((int_iterate op1 f i j) = (neutral_elt op1)).

Axiom int_iterate_def1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), ~ (j <= i)%Z ->
  ~ (j <= i)%Z -> (j = (i + 1%Z)%Z) -> ((int_iterate op1 f i j) = (f i)).

Axiom int_iterate_def2 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), ~ (j <= i)%Z ->
  ~ (j <= i)%Z -> ~ (j = (i + 1%Z)%Z) ->
  ((int_iterate op1 f i j) = ((op1 (f i)) (int_iterate op1 f (i + 1%Z)%Z j))).

Axiom int_iterate_def3 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (iterable op1) ->
  (j <= i)%Z -> ((int_iterate op1 f i j) = (neutral_elt op1)).

Axiom int_iterate_def4 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (iterable op1) ->
  ~ (j <= i)%Z -> (j = (i + 1%Z)%Z) -> ((int_iterate op1 f i j) = (f i)).

Axiom int_iterate_def5 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (iterable op1) ->
  ~ (j <= i)%Z -> ~ (j = (i + 1%Z)%Z) ->
  ((int_iterate op1 f i j) = ((op1 (f i)) (int_iterate op1 f (i + 1%Z)%Z j))).

Axiom int_iterate_spec :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), ~ (j <= i)%Z ->
  (j <= i)%Z -> ((int_iterate op1 f i j) = (neutral_elt op1)).

Axiom int_iterate_spec1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), ~ (j <= i)%Z ->
  (j = (i + 1%Z)%Z) ->
  ((int_iterate op1 f i j) = ((op1 (f i)) (neutral_elt op1))).

Axiom int_iterate_spec2 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (iterable op1) ->
  (j <= i)%Z -> ((int_iterate op1 f i j) = (neutral_elt op1)).

Axiom int_iterate_spec3 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (iterable op1) ->
  (j = (i + 1%Z)%Z) ->
  ((int_iterate op1 f i j) = ((op1 (f i)) (neutral_elt op1))).

Parameter int_int_iterate:
  forall {im1:Type} {im1_WT:WhyType im1}, (im1 -> im1 -> im1) ->
  (Z -> Z -> im1) -> Z -> Z -> Z -> Z -> im1.

Axiom int_int_iterate_def :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (iterable op1) -> (j <= i)%Z ->
  ((int_int_iterate op1 f i j k l) = (neutral_elt op1)).

Axiom int_int_iterate_def1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (iterable op1) -> ~ (j <= i)%Z ->
  ((int_int_iterate op1 f i j k l) =
   ((op1 (int_iterate op1 (f i) k l))
    (int_int_iterate op1 f (i + 1%Z)%Z j k l))).

Parameter element: forall {a:Type} {a_WT:WhyType a}, (set a) -> a.

Axiom element_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), ((cardinal s) = 1%Z) -> ((element s) = (choose s)).

Axiom cardone :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (a1:a), (forall (b:a), (mem b s) <-> (b = a1)) ->
  (0%Z < (cardinal s))%Z -> ((cardinal s) = 1%Z).

Axiom cardone1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (a1:a), (forall (b:a), (mem b s) <-> (b = a1)) ->
  (0%Z < (cardinal s))%Z -> ((element s) = a1).

Axiom set_cardone :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (0%Z < (cardinal s))%Z ->
  (exists a1:a, forall (b:a), (mem b s) <-> (b = a1)) -> ((cardinal s) = 1%Z).

Axiom get_cardone :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), ((cardinal s) = 1%Z) ->
  exists a1:a, forall (b:a), (mem b s) <-> (b = a1).

Axiom set_cardone_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (a1:a), (forall (b:a), (mem b s) <-> (b = a1)) ->
  ((cardinal s) = 1%Z).

Axiom set_cardone_elt1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (a1:a), (forall (b:a), (mem b s) <-> (b = a1)) ->
  ((element s) = a1).

Axiom set_cardone_elt_ :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (a1:a), (forall (b:a), (mem b s) <-> (b = a1)) ->
  ((cardinal s) = 1%Z).

Axiom cardzero :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a), (forall (b:a), ~ (mem b s)) -> ((cardinal s) = 0%Z).

Axiom to_set_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (e:a), ((cardinal (add e (empty : set a))) = 1%Z).

Axiom to_set_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (e:a), forall (b:a), (mem b (add e (empty : set a))) -> (b = e).

Parameter to_fset: Z -> Z -> set Z.

Axiom to_fset_spec :
  forall (i:Z) (j:Z), (i < j)%Z -> ((cardinal (to_fset i j)) = (j - i)%Z).

Axiom to_fset_spec1 :
  forall (i:Z) (j:Z), (j <= i)%Z -> is_empty (to_fset i j).

Axiom to_fset_spec2 :
  forall (i:Z) (j:Z), forall (k:Z), (mem k (to_fset i j)) -> (i <= k)%Z.

Axiom to_fset_spec3 :
  forall (i:Z) (j:Z), forall (k:Z), (mem k (to_fset i j)) -> (k < j)%Z.

Axiom to_fset_spec4 :
  forall (i:Z) (j:Z), forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) ->
  mem k (to_fset i j).

Axiom to_fset_unit_ext :
  forall (i:Z) (j:Z), (i < j)%Z ->
  ((to_fset i j) = (add i (to_fset (i + 1%Z)%Z j))).

Axiom to_fset_ext :
  forall (i:Z) (i':Z) (j:Z), ((i <= i')%Z /\ (i' <= j)%Z) ->
  ((to_fset i j) = (union (to_fset i i') (to_fset i' j))).

Axiom card_fset :
  forall (n:Z), (0%Z <= n)%Z -> ((cardinal (to_fset 0%Z n)) = n).

(* Why3 assumption *)
Definition p_injective_in {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    (f:a -> b) (s:set a) (s':set b) : Prop :=
  forall (e:a), (mem e s) ->
  (mem (f e) s') /\
  forall (e1:a) (e':a), (mem e1 s) -> (mem e' s) -> ~ (e1 = e') ->
  ~ ((f e1) = (f e')).

(* Why3 assumption *)
Definition equal_func {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    (f:a -> b) (g:a -> b) : Prop :=
  forall (e:a), ((f e) = (g e)).

Axiom set_equal_func :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:a -> b), (forall (e:a), ((f e) = (g e))) -> (f = g).

Axiom get_equal_func :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:a -> b), (equal_func f g) -> forall (e:a),
  ((f e) = (g e)).

Axiom set_injective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a),
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  p_injective f s.

Axiom image_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), forall (a1:b), (mem a1 (map f s)) ->
  exists antec_a:a, (mem antec_a s) /\ (a1 = (f antec_a)).

Axiom image_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), forall (a1:b),
  (exists antec_a:a, (mem antec_a s) /\ (a1 = (f antec_a))) ->
  mem a1 (map f s).

Axiom card_image :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), ((cardinal (map f s)) <= (cardinal s))%Z.

Axiom card_image_injective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), (p_injective f s) ->
  ((cardinal (map f s)) = (cardinal s)).

Axiom get_injective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), (p_injective f s) -> forall (e:a) (e':a),
  (mem e s) -> (mem e' s) -> ~ (e = e') -> ~ ((f e) = (f e')).

Axiom set_injective_in :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b),
  (forall (e:a), (mem e s) -> mem (f e) s') ->
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  p_injective f s.

Axiom get_injective_in :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_injective_in f s s') ->
  forall (e:a), (mem e s) -> mem (f e) s'.

Axiom get_injective_in1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_injective_in f s s') ->
  forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
  ~ ((f e) = (f e')).

(* Why3 assumption *)
Definition p_surjective {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    (f:a -> b) (s:set a) (s':set b) : Prop :=
  (forall (e:a), (mem e s) -> mem (f e) s') /\
  forall (e':b), (mem e' s') -> exists e:a, (mem e s) /\ ((f e) = e').

Axiom set_surjective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b),
  (forall (e:a), (mem e s) -> mem (f e) s') ->
  (forall (e':b), (mem e' s') -> exists e:a, (mem e s) /\ ((f e) = e')) ->
  p_surjective f s s'.

Axiom get_surjective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_surjective f s s') ->
  forall (e:a), (mem e s) -> mem (f e) s'.

Axiom get_surjective1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_surjective f s s') ->
  forall (e':b), (mem e' s') -> exists e:a, (mem e s) /\ ((f e) = e').

Axiom image_surjective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_surjective f s s') ->
  ((map f s) = s').

(* Why3 assumption *)
Definition p_bijective {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    (f:a -> b) (s:set a) (s':set b) : Prop :=
  (p_injective_in f s s') /\ (p_surjective f s s').

Axiom bijective_is_injective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  p_injective f s.

Axiom bijective_is_surjective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  p_surjective f s s'.

Axiom set_bijective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b),
  (forall (e:a), (mem e s) -> mem (f e) s') ->
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  (forall (e':b), (mem e' s') -> exists e:a, (mem e s) /\ ((f e) = e')) ->
  p_bijective f s s'.

Axiom set_bijective1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b),
  (forall (e:a), (mem e s) -> mem (f e) s') ->
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  (forall (e':b), (mem e' s') -> exists e:a, (mem e s) /\ ((f e) = e')) ->
  ((map f s) = s').

Axiom bijectivity_is_transitive :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {c:Type} {c_WT:WhyType c},
  forall (f:a -> b) (g:b -> c) (s:set a) (s':set b) (s'':set c),
  (p_bijective f s s') -> (p_bijective g s' s'') ->
  p_bijective (fun (k:a) => (g (f k))) s s''.

Axiom bijective_image :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> a) (s:set a) (s':set a), (p_bijective f s s') ->
  ((cardinal s) = (cardinal s')).

Axiom bijective_image1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> a) (s:set a) (s':set a), (p_bijective f s s') ->
  (s' = (map f s)).

Axiom get_bijective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  forall (e:a), (mem e s) -> mem (f e) s'.

Axiom get_bijective1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
  ~ ((f e) = (f e')).

Axiom get_bijective2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  forall (e':b), (mem e' s') -> exists e:a, (mem e s) /\ ((f e) = e').

Axiom get_bijective3 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  ((cardinal s) = (cardinal s')).

Axiom bijective_eq :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  (forall (e:a), (mem e s) -> ((f e) = (g e))) -> p_bijective g s s'.

Axiom bijective_eq_gen :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  forall (g:a -> b), (forall (e:a), (mem e s) -> ((f e) = (g e))) ->
  p_bijective g s s'.

Axiom bij_equal_card :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a), ((cardinal s) = (cardinal (map f s))) ->
  p_bijective f s (map f s).

Axiom set_bijective_auto :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> a) (s:set a), (forall (e:a), (mem e s) -> mem (f e) s) ->
  (forall (e':a), (mem e' s) -> exists e:a, (mem e s) /\ ((f e) = e')) ->
  p_bijective f s s.

Axiom iterate_empty :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (is_empty s) ->
  (commut op1) -> (iterable op1) -> ((iterate op1 s t1) = (neutral_elt op1)).

Axiom iterate_one :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1),
  ((cardinal s) = 1%Z) -> (commut op1) ->
  ((iterate op1 s t1) = (t1 (choose s))).

Axiom iterate_add :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1) (x:a),
  (commut op1) -> (iterable op1) -> ~ (mem x s) ->
  ((iterate op1 (add x s) f) = ((op1 (f x)) (iterate op1 s f))).

Axiom iterate_add_ :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1) (x:a),
  (commut op1) -> ~ (mem x s) -> ~ (is_empty s) ->
  ((iterate op1 (add x s) f) = ((op1 (f x)) (iterate op1 s f))).

Axiom iterate_remove :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1) (x:a),
  (commut op1) -> (iterable op1) ->
  (inverse_tuple op1 (fun (y0:im1) (y1:im1) => (po y0 y1)) (neutral_elt op1)) ->
  (mem x s) -> ((iterate op1 (remove x s) f) = (po (iterate op1 s f) (f x))).

Axiom iterate_def_choose :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1),
  ~ ((cardinal s) = 1%Z) -> (commut op1) -> ~ (is_empty s) ->
  ((iterate op1 s f) =
   ((op1 (f (choose s))) (iterate op1 (remove (choose s) s) f))).

Axiom iterate_def_choose1 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1), (iterable op1) ->
  (commut op1) -> ~ (is_empty s) ->
  ((iterate op1 s f) =
   ((op1 (f (choose s))) (iterate op1 (remove (choose s) s) f))).

Axiom choose_any :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1) (t1:a),
  (iterable op1) -> (commut op1) -> (mem t1 s) ->
  ((iterate op1 s f) = ((op1 (f t1)) (iterate op1 (remove t1 s) f))).

Axiom iterate_comp_iterate :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s1:set a) (f:a -> im1) (g:a -> im1),
  (iterable op1) -> (commut op1) -> (assoc op1) ->
  ((iterate op1 s1 (fun (k:a) => ((op1 (f k)) (g k)))) =
   ((op1 (iterate op1 s1 (fun (k:a) => (f k))))
    (iterate op1 s1 (fun (k:a) => (g k))))).

Axiom iterate_comp_iterate_com :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s1:set a) (f:a -> im1) (g:a -> im1),
  (iterable op1) -> (commut op1) ->
  (((op1 (iterate op1 s1 (fun (k:a) => (f k))))
    (iterate op1 s1 (fun (k:a) => (g k))))
   = (iterate op1 s1 (fun (k:a) => ((op1 (f k)) (g k))))).

Axiom iterate_transitivity :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (po1:im1 -> im1 -> im1) (s1:set a)
    (s2:set a) (f:a -> im1),
  (iterable op1) -> (commut op1) ->
  (inverse_tuple op1 po1 (neutral_elt op1)) ->
  ((iterate op1 (union s1 s2) f) =
   ((po1 ((op1 (iterate op1 s1 f)) (iterate op1 s2 f)))
    (iterate op1 (inter s1 s2) f))).

Axiom iterate_disjoint_transitivity :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s1:set a) (s2:set a) (t1:a -> im1),
  (iterable op1) -> (commut op1) -> ((inter s1 s2) = (empty : set a)) ->
  ((iterate op1 (union s1 s2) t1) =
   ((op1 (iterate op1 s1 t1)) (iterate op1 s2 t1))).

Axiom iterate_eq :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1) (g:a -> im1),
  (forall (x:a), (mem x s) -> ((f x) = (g x))) -> (commut op1) ->
  ~ (is_empty s) -> ((iterate op1 s f) = (iterate op1 s g)).

Axiom iterate_eq1 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f:a -> im1) (g:a -> im1),
  (forall (x:a), (mem x s) -> ((f x) = (g x))) -> (commut op1) ->
  (iterable op1) -> ((iterate op1 s f) = (iterate op1 s g)).

Axiom iterate_map :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set b) (f:b -> a) (t1:a -> im1),
  ~ (is_empty s) -> (commut op1) -> (p_injective f s) ->
  ((iterate op1 (map f s) t1) = (iterate op1 s (fun (b1:b) => (t1 (f b1))))).

Axiom iterate_map1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set b) (f:b -> a) (t1:a -> im1),
  (iterable op1) -> (commut op1) -> (p_injective f s) ->
  ((iterate op1 (map f s) t1) = (iterate op1 s (fun (b1:b) => (t1 (f b1))))).

Axiom iterate_cardone :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (iterable op1) ->
  (commut op1) -> ((cardinal s) = 1%Z) ->
  ((iterate op1 s t1) = (t1 (element s))).

Axiom iterate_cardzero :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (commut op1) ->
  (iterable op1) -> ((cardinal s) = 0%Z) ->
  ((iterate op1 s t1) = (neutral_elt op1)).

Axiom injec_iterate :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (a1:a) (s:set b) (f:a -> b -> im1),
  (iterable op1) -> (commut op1) ->
  ((iterate op1 s (f a1)) =
   (iterate op1 (cartesian_product (add a1 (empty : set a)) s)
    (fun (o:(a* b)%type) => ((f (fir o)) (sec o))))).

Axiom iterate_cartesian_product :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s1:set a) (s2:set b) (f:a -> b -> im1),
  (iterable op1) -> (commut op1) ->
  ((iterate op1 s1 (fun (a1:a) => (iterate op1 s2 (f a1)))) =
   (iterate op1 (cartesian_product s1 s2)
    (fun (o:(a* b)%type) => ((f (fir o)) (sec o))))).

Axiom iterate_eq_func :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (f1:a -> im1) (f2:a -> im1),
  (commut op1) -> (iterable op1) -> (p_injective f1 s) ->
  (p_injective f2 s) -> ((map f1 s) = (map f2 s)) ->
  ((iterate op1 s f1) = (iterate op1 s f2)).

Axiom int_iterate_def_empty :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (j <= i)%Z ->
  (iterable op1) -> ((int_iterate op1 f i j) = (neutral_elt op1)).

Axiom int_iterate_def_plus_one :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (i < j)%Z ->
  ~ ((i + 1%Z)%Z = j) ->
  ((int_iterate op1 f i j) = ((op1 (f i)) (int_iterate op1 f (i + 1%Z)%Z j))).

Axiom int_iterate_def_plus_one1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (i < j)%Z ->
  (iterable op1) ->
  ((int_iterate op1 f i j) = ((op1 (f i)) (int_iterate op1 f (i + 1%Z)%Z j))).

Axiom int_iterate_cardone :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z),
  (j = (i + 1%Z)%Z) -> ((int_iterate op1 f i j) = (f i)).

Axiom int_iterate_def_plus_one_com :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (i < j)%Z ->
  ~ (j = (i + 1%Z)%Z) ->
  (((op1 (f i)) (int_iterate op1 f (i + 1%Z)%Z j)) = (int_iterate op1 f i j)).

Axiom int_iterate_def_plus_one_com1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (i < j)%Z ->
  (iterable op1) ->
  (((op1 (f i)) (int_iterate op1 f (i + 1%Z)%Z j)) = (int_iterate op1 f i j)).

Axiom int_iterate_to_iterate :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), ~ (j <= i)%Z ->
  (commut op1) -> ((int_iterate op1 f i j) = (iterate op1 (to_fset i j) f)).

Axiom int_iterate_to_iterate1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (iterable op1) ->
  (commut op1) -> ((int_iterate op1 f i j) = (iterate op1 (to_fset i j) f)).

Axiom int_iterate_right_extension :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (iterable op1) ->
  (i < j)%Z ->
  ((int_iterate op1 f i j) =
   ((op1 (int_iterate op1 f i (j - 1%Z)%Z)) (f (j - 1%Z)%Z))).

Axiom int_iterate_right_extension_ :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z), (assoc op1) ->
  ((i + 1%Z)%Z < j)%Z ->
  ((int_iterate op1 f i j) =
   ((op1 (int_iterate op1 f i (j - 1%Z)%Z)) (f (j - 1%Z)%Z))).

Axiom int_iterate_transitivity :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (k:Z) (j:Z),
  (iterable op1) -> (iterable op1) ->
  (op_neutral_left op1 (neutral_elt op1)) -> ((i <= k)%Z /\ (k <= j)%Z) ->
  ((int_iterate op1 f i j) =
   ((op1 (int_iterate op1 f i k)) (int_iterate op1 f k j))).

Axiom int_iterate_transitivity_ :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (k:Z) (j:Z),
  (op_neutral_left op1 (neutral_elt op1)) -> ((i < k)%Z /\ (k < j)%Z) ->
  ((int_iterate op1 f i j) =
   ((op1 (int_iterate op1 f i k)) (int_iterate op1 f k j))).

Axiom int_iterate_comp_iterate :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (g:Z -> im1) (i:Z) (j:Z),
  (iterable op1) -> (op_neutral_right op1 (neutral_elt op1)) ->
  (commut op1) ->
  ((int_iterate op1 (fun (k:Z) => ((op1 (f k)) (g k))) i j) =
   ((op1 (int_iterate op1 f i j)) (int_iterate op1 g i j))).

Axiom int_iterate_attr_no_f :
  forall {im1:Type} {im1_WT:WhyType im1} {im2:Type} {im2_WT:WhyType im2},
  forall (op1:im1 -> im1 -> im1) (op2:im2 -> im2 -> im2) (t1:Z -> im1)
    (t2:Z -> im2) (f:im1 -> im2) (i:Z) (j:Z),
  (forall (x:Z), forall (y:im1),
   (((op2 (t2 x)) (f y)) = (f ((op1 (t1 x)) y)))) ->
  ((f (neutral_elt op1)) = (neutral_elt op2)) -> (iterable op1) ->
  (iterable op2) -> (forall (i1:Z), ((f (t1 i1)) = (t2 i1))) ->
  ((int_iterate op2 t2 i j) = (f (int_iterate op1 t1 i j))).

Axiom int_iterate_attr :
  forall {im1:Type} {im1_WT:WhyType im1} {im2:Type} {im2_WT:WhyType im2},
  forall (op1:im1 -> im1 -> im1) (op2:im2 -> im2 -> im2) (t1:Z -> im1)
    (f:im1 -> im2) (i:Z) (j:Z),
  (forall (x:Z), forall (y:im1),
   (((op2 (f (t1 x))) (f y)) = (f ((op1 (t1 x)) y)))) ->
  ((f (neutral_elt op1)) = (neutral_elt op2)) -> (iterable op1) ->
  (iterable op2) ->
  ((int_iterate op2 (fun (e:Z) => (f (t1 e))) i j) =
   (f (int_iterate op1 t1 i j))).

Axiom int_iterate_attr_comm :
  forall {im1:Type} {im1_WT:WhyType im1} {im2:Type} {im2_WT:WhyType im2},
  forall (op1:im1 -> im1 -> im1) (op2:im2 -> im2 -> im2) (t1:Z -> im1)
    (f:im1 -> im2) (i:Z) (j:Z),
  (forall (x:Z), forall (y:im1),
   (((op2 (f (t1 x))) (f y)) = (f ((op1 (t1 x)) y)))) ->
  ((f (neutral_elt op1)) = (neutral_elt op2)) -> (iterable op1) ->
  (iterable op2) ->
  ((f (int_iterate op1 t1 i j)) =
   (int_iterate op2 (fun (e:Z) => (f (t1 e))) i j)).

Axiom int_iterate_eq :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (g:Z -> im1) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ~ (j <= i)%Z -> ((int_iterate op1 f i j) = (int_iterate op1 g i j)).

Axiom int_iterate_eq1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (g:Z -> im1) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  (iterable op1) -> ((int_iterate op1 f i j) = (int_iterate op1 g i j)).

Axiom int_iterate_left_right :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (l:Z) (k:Z) (h:Z),
  (iterable op1) -> (commut op1) -> ((l <= k)%Z /\ (k <= h)%Z) ->
  ((int_iterate op1 f l k) =
   (int_iterate op1 (fun (a:Z) => (f ((h - (a + 1%Z)%Z)%Z + l)%Z))
    ((h - k)%Z + l)%Z h)).

Axiom int_iterate_eq_func :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (i:Z) (j:Z) (f:Z -> im1) (g:Z -> im1),
  (iterable op1) -> (commut op1) -> (p_injective f (to_fset i j)) ->
  (p_injective g (to_fset i j)) ->
  ((map f (to_fset i j)) = (map g (to_fset i j))) ->
  ((int_iterate op1 f i j) = (int_iterate op1 g i j)).

Axiom int_iterate_map :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z)
    (t1:Z -> im1),
  ~ (j <= i)%Z -> (commut op1) ->
  (p_bijective f (to_fset i j) (to_fset k l)) ->
  ((int_iterate op1 t1 k l) =
   (int_iterate op1 (fun (b:Z) => (t1 (f b))) i j)).

Axiom int_iterate_map1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z)
    (t1:Z -> im1),
  (iterable op1) -> (commut op1) ->
  (p_bijective f (to_fset i j) (to_fset k l)) ->
  ((int_iterate op1 t1 k l) =
   (int_iterate op1 (fun (b:Z) => (t1 (f b))) i j)).

Axiom int_iterate_transl :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> im1) (i:Z) (j:Z) (k:Z),
  (iterable op1) ->
  ((int_iterate op1 f i j) =
   (int_iterate op1 (fun (b:Z) => (f (b + k)%Z)) (i - k)%Z (j - k)%Z)).

Axiom int_iterate_map_auto :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (i:Z) (j:Z) (f:Z -> Z) (t1:Z -> im1),
  ~ (j <= i)%Z -> (commut op1) ->
  (p_bijective f (to_fset i j) (to_fset i j)) ->
  ((int_iterate op1 t1 i j) =
   (int_iterate op1 (fun (b:Z) => (t1 (f b))) i j)).

Axiom int_iterate_map_auto1 :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (i:Z) (j:Z) (f:Z -> Z) (t1:Z -> im1),
  (iterable op1) -> (commut op1) ->
  (p_bijective f (to_fset i j) (to_fset i j)) ->
  ((int_iterate op1 t1 i j) =
   (int_iterate op1 (fun (b:Z) => (t1 (f b))) i j)).

Parameter result2:
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  (im1 -> im1 -> im1) -> (a -> im1) -> a -> bool.

Axiom result_def2 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (t1:a -> im1) (e:a),
  (((result2 op1 t1) e) = true) <-> ~ (neutral op1 (t1 e)).

(* Why3 assumption *)
Definition nonn_part {a:Type} {a_WT:WhyType a}
    {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1) (s:set a)
    (t1:a -> im1) : set a :=
  filter (result2 op1 t1) s.

Axiom nonn_part_spec :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (nonn_part op1 s t1)) -> mem e s.

Axiom nonn_part_spec1 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (nonn_part op1 s t1)) -> ~ (neutral op1 (t1 e)).

Axiom nonn_part_spec2 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  ((mem e s) /\ ~ (neutral op1 (t1 e))) -> mem e (nonn_part op1 s t1).

Parameter result3:
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  (im1 -> im1 -> im1) -> (a -> im1) -> a -> bool.

Axiom result_def3 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (t1:a -> im1) (e:a),
  (((result3 op1 t1) e) = true) <-> (neutral op1 (t1 e)).

(* Why3 assumption *)
Definition n_part {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1) : set a :=
  filter (result3 op1 t1) s.

Axiom n_part_spec :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (n_part op1 s t1)) -> mem e s.

Axiom n_part_spec1 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (n_part op1 s t1)) -> neutral op1 (t1 e).

Axiom n_part_spec2 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  ((mem e s) /\ (neutral op1 (t1 e))) -> mem e (n_part op1 s t1).

Axiom nullity_partition :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (commut op1) ->
  (s = (union (nonn_part op1 s t1) (n_part op1 s t1))).

Axiom nullity_partition1 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (commut op1) ->
  ((inter (nonn_part op1 s t1) (n_part op1 s t1)) = (empty : set a)).

Axiom iterate_neutral :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (iterable op1) ->
  (commut op1) ->
  (forall (a1:a), (mem a1 s) -> ((t1 a1) = (neutral_elt op1))) ->
  ((iterate op1 s t1) = (neutral_elt op1)).

Axiom iterate_nullity_partition :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (iterable op1) ->
  (commut op1) ->
  ((iterate op1 s t1) = (iterate op1 (nonn_part op1 s t1) t1)).

(* Why3 assumption *)
Definition couple {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1} (f:a -> b -> im1) (o:(a* b)%type) : im1 :=
  match o with
  | (a1, b1) => (f a1) b1
  end.

Axiom null_product :
  forall (a:t) (b:t), ((infix_asdt a b) = tzero) ->
  (a = tzero) \/ (b = tzero).

Axiom couple_value :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1},
  forall (f:a -> b -> im1) (o:(a* b)%type),
  ((couple f o) = ((f (fir o)) (sec o))).

Axiom couple_value_dev :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1},
  forall (f:a -> b -> im1) (o:(a* b)%type) (a1:a) (b1:b), (o = (a1, b1)) ->
  ((couple f o) = ((f a1) b1)).

Axiom neutral_tzero :
  neutral (fun (y0:t) (y1:t) => (infix_pldt y0 y1)) tzero.

Axiom neutral_tzero1 : iterable (fun (y0:t) (y1:t) => (infix_pldt y0 y1)).

(* Why3 assumption *)
Definition sum {a:Type} {a_WT:WhyType a} (s:set a) (t1:a -> t) : t :=
  iterate (fun (y0:t) (y1:t) => (infix_pldt y0 y1)) s t1.

Axiom sum_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), (is_empty s) -> ((sum s t1) = tzero).

Axiom sum_one :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), ((cardinal s) = 1%Z) ->
  ((sum s t1) = (t1 (choose s))).

Axiom sum_add :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> t) (x:b), ~ (mem x s) ->
  ((sum (add x s) f) = (infix_pldt (f x) (sum s f))).

Axiom sum_plus_one :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> t), (1%Z < (cardinal s))%Z ->
  ((sum s f) = (infix_pldt (f (choose s)) (sum (remove (choose s) s) f))).

Axiom sum_real :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> t), (forall (a1:a), (mem a1 s) -> real_ (f a1)) ->
  (0%Z < (cardinal s))%Z -> real_ (sum s f).

Axiom map_sum_eq :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> a) (t1:a -> t), (p_injective f s) ->
  ((sum (map f s) t1) = (sum s (fun (b1:b) => (t1 (f b1))))).

Axiom sum_comp :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> t) (g:b -> t),
  ((sum s (fun (k:b) => (infix_pldt (f k) (g k)))) =
   (infix_pldt (sum s f) (sum s g))).

Axiom sum_iter_ :
  opposite_n (fun (y0:t) (y1:t) => (infix_pldt y0 y1))
  (fun (y0:t) (y1:t) => (infix_mndt y0 y1)) tzero.

Axiom sum_iter_1 :
  opposite1 (fun (y0:t) (y1:t) => (infix_pldt y0 y1))
  (fun (y0:t) (y1:t) => (infix_mndt y0 y1)).

Axiom sum_iter_2 :
  opposite_com (fun (y0:t) (y1:t) => (infix_pldt y0 y1))
  (fun (y0:t) (y1:t) => (infix_mndt y0 y1)).

Axiom sum_iter_3 :
  inverse_tuple (fun (y0:t) (y1:t) => (infix_pldt y0 y1))
  (fun (y0:t) (y1:t) => (infix_mndt y0 y1)) tzero.

Axiom neutral_zero :
  ((neutral_elt (fun (y0:t) (y1:t) => (infix_pldt y0 y1))) = tzero).

Axiom sum_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> t) (g:a -> t),
  (forall (x:a), (mem x s) -> ((f x) = (g x))) -> ((sum s f) = (sum s g)).

Axiom sum_eq_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (f:a -> t) (g:a -> t), (s = s') ->
  (forall (x:a), (mem x s) -> ((f x) = (g x))) -> ((sum s f) = (sum s' g)).

Axiom sum_disjoint_transitivity :
  forall {a:Type} {a_WT:WhyType a},
  forall (s1:set a) (s2:set a) (t1:a -> t),
  ((inter s1 s2) = (empty : set a)) ->
  ((sum (union s1 s2) t1) = (infix_pldt (sum s1 t1) (sum s2 t1))).

Axiom sum_to_cartesian_product :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b) (f:a -> b -> t),
  ((sum s1 (fun (a1:a) => (sum s2 (f a1)))) =
   (sum (cartesian_product s1 s2)
    (fun (o:(a* b)%type) => ((f (fir o)) (sec o))))).

Axiom sum_from_cartesian_product :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b) (f:a -> b -> t),
  ((sum (cartesian_product s1 s2)
    (fun (o:(a* b)%type) => ((f (fir o)) (sec o))))
   = (sum s1 (fun (a1:a) => (sum s2 (f a1))))).

(* Why3 assumption *)
Definition ind_sum (f:Z -> t) (i:Z) (j:Z) : t :=
  int_iterate (fun (y0:t) (y1:t) => (infix_pldt y0 y1)) f i j.

Axiom ind_sum_to_int_iterate :
  forall (f:Z -> t) (i:Z) (j:Z),
  ((ind_sum f i j) =
   (int_iterate (fun (y0:t) (y1:t) => (infix_pldt y0 y1)) f i j)).

Axiom ind_sum_cardone :
  forall (f:Z -> t) (i:Z) (j:Z), (j = (i + 1%Z)%Z) ->
  ((ind_sum f i j) = (f i)).

Axiom ind_sum_right_extension :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_sum f i j) = (infix_pldt (ind_sum f i (j - 1%Z)%Z) (f (j - 1%Z)%Z))).

Axiom ind_sum_plus_one :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_sum f i j) = (infix_pldt (f i) (ind_sum f (i + 1%Z)%Z j))).

Axiom real_ind_sum :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> real_ (f k)) ->
  real_ (ind_sum f i j).

Axiom ind_sum_eq :
  forall (f:Z -> t) (g:Z -> t) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ind_sum f i j) = (ind_sum g i j)).

Parameter fc: (Z -> t) -> t -> Z -> Z -> Z -> t.

Axiom fc_def :
  forall (f:Z -> t) (g:t) (i:Z) (j:Z) (k:Z),
  (((i <= k)%Z /\ (k < j)%Z) -> (((fc f g i j) k) = (f k))) /\
  (~ ((i <= k)%Z /\ (k < j)%Z) -> (((fc f g i j) k) = g)).

Axiom ind_sum_eq_del_bound :
  forall (f:Z -> t) (g:t) (i:Z) (j:Z),
  ((ind_sum (fc f g i j) i j) = (ind_sum f i j)).

Parameter fc1: (Z -> t) -> t -> Z -> Z -> Z -> t.

Axiom fc_def1 :
  forall (f:Z -> t) (g:t) (i:Z) (j:Z) (k:Z),
  (((i <= k)%Z /\ (k < j)%Z) -> (((fc1 f g i j) k) = (f k))) /\
  (~ ((i <= k)%Z /\ (k < j)%Z) -> (((fc1 f g i j) k) = g)).

Axiom ind_sum_eq_del_bound_rev :
  forall (f:Z -> t) (g:t) (i:Z) (j:Z),
  ((ind_sum f i j) = (ind_sum (fc1 f g i j) i j)).

Axiom ind_sum_eq_gen :
  forall (f:Z -> t) (g:Z -> t) (i1:Z) (j1:Z) (i2:Z) (j2:Z), (i1 = i2) ->
  (j1 = j2) ->
  (forall (k:Z), ((i1 <= k)%Z /\ (k < j1)%Z) -> ((f k) = (g k))) ->
  ((ind_sum f i1 j1) = (ind_sum g i2 j2)).

Axiom ind_sum_eq_bound :
  forall (f:Z -> t) (g:Z -> t) (i:Z) (j:Z), (i = j) ->
  (forall (k:Z), ((0%Z <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ind_sum f 0%Z i) = (ind_sum g 0%Z j)).

Axiom ind_sum_comp :
  forall (f:Z -> t) (g:Z -> t) (i:Z) (j:Z),
  ((ind_sum (fun (k:Z) => (infix_pldt (f k) (g k))) i j) =
   (infix_pldt (ind_sum f i j) (ind_sum g i j))).

Axiom ind_sum_to_iterate :
  forall (f:Z -> t) (i:Z) (j:Z),
  ((ind_sum f i j) =
   (iterate (fun (y0:t) (y1:t) => (infix_pldt y0 y1)) (to_fset i j) f)).

Axiom ind_sum_to_sum :
  forall (f:Z -> t) (i:Z) (j:Z), ((ind_sum f i j) = (sum (to_fset i j) f)).

Axiom map_ind_sum_eq :
  forall (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z) (t1:Z -> t),
  (p_bijective f (to_fset i j) (to_fset k l)) ->
  ((ind_sum t1 k l) = (ind_sum (fun (b:Z) => (t1 (f b))) i j)).

Axiom sum_scal :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> t) (s:set a) (c:t),
  ((sum s (fun (x:a) => (infix_asdt c (f x)))) = (infix_asdt c (sum s f))).

Axiom sum_scal_right :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> t) (s:set a) (c:t),
  ((sum s (fun (x:a) => (infix_asdt (f x) c))) = (infix_asdt (sum s f) c)).

Axiom sum_scal_rev_right :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> t) (s:set a) (c:t),
  ((infix_asdt (sum s f) c) = (sum s (fun (x:a) => (infix_asdt (f x) c)))).

Axiom sum_scal_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> t) (s:set a) (c:t),
  ((infix_asdt c (sum s f)) = (sum s (fun (x:a) => (infix_asdt c (f x))))).

Axiom ind_sum_scal :
  forall (f:Z -> t) (i:Z) (j:Z) (a:t),
  ((ind_sum (fun (i1:Z) => (infix_asdt a (f i1))) i j) =
   (infix_asdt a (ind_sum f i j))).

Axiom ind_sum_scal_rev :
  forall (f:Z -> t) (i:Z) (j:Z) (a:t),
  ((infix_asdt a (ind_sum f i j)) =
   (ind_sum (fun (i1:Z) => (infix_asdt a (f i1))) i j)).

Axiom scal_ind_sum :
  forall (f:Z -> t) (i:Z) (j:Z) (a:t),
  ((ind_sum (fun (i1:Z) => (infix_asdt (f i1) a)) i j) =
   (infix_asdt (ind_sum f i j) a)).

Axiom scal_ind_sum_rev :
  forall (f:Z -> t) (i:Z) (j:Z) (a:t),
  ((infix_asdt (ind_sum f i j) a) =
   (ind_sum (fun (i1:Z) => (infix_asdt (f i1) a)) i j)).

Axiom sum_scal_gen :
  forall (f:Z -> t) (s:set Z), forall (a:t),
  ((sum s (fun (i:Z) => (infix_asdt a (f i)))) = (infix_asdt a (sum s f))).

Axiom ind_sum_scal_gen :
  forall (f:Z -> t) (i:Z) (j:Z), forall (a:t),
  ((ind_sum (fun (i1:Z) => (infix_asdt a (f i1))) i j) =
   (infix_asdt a (ind_sum f i j))).

Axiom int_int_iterate_def_empty :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (j <= i)%Z -> (iterable op1) ->
  ((int_int_iterate op1 f i j k l) = (neutral_elt op1)).

Axiom int_int_iterate_def_plus_one :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (i < j)%Z -> (iterable op1) ->
  ((int_int_iterate op1 f i j k l) =
   ((op1 (int_iterate op1 (fun (n:Z) => ((f i) n)) k l))
    (int_int_iterate op1 f (i + 1%Z)%Z j k l))).

Axiom int_int_iterate_to_int_iterate :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (i <= j)%Z -> (iterable op1) ->
  ((int_int_iterate op1 f i j k l) =
   (int_iterate op1 (fun (a:Z) => (int_iterate op1 (f a) k l)) i j)).

Axiom int_iterate_to_int_int_iterate :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (i <= j)%Z -> (iterable op1) ->
  ((int_iterate op1 (fun (a:Z) => (int_iterate op1 (f a) k l)) i j) =
   (int_int_iterate op1 f i j k l)).

Axiom int_int_iterate_to_iterate :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (i <= j)%Z -> (iterable op1) -> (commut op1) ->
  ((int_int_iterate op1 f i j k l) =
   (iterate op1 (cartesian_product (to_fset i j) (to_fset k l))
    (fun (o:(Z* Z)%type) => ((f (fir o)) (sec o))))).

Axiom iterate_commute :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s1:set a) (s2:set b) (f:a -> b -> im1),
  (iterable op1) -> (commut op1) ->
  ((iterate op1 (cartesian_product s1 s2)
    (fun (o:(a* b)%type) => ((f (fir o)) (sec o))))
   =
   (iterate op1 (cartesian_product s2 s1)
    (fun (o:(b* a)%type) => ((f (sec o)) (fir o))))).

Axiom int_int_iterate_commute :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (iterable op1) -> (commut op1) -> (i <= j)%Z -> (k <= l)%Z ->
  ((int_int_iterate op1 f i j k l) =
   (int_int_iterate op1 (fun (a:Z) (b:Z) => ((f b) a)) k l i j)).

Axiom int_iterate_commute :
  forall {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (f:Z -> Z -> im1) (i:Z) (j:Z) (k:Z) (l:Z),
  (iterable op1) -> (commut op1) -> (i <= j)%Z -> (k <= l)%Z ->
  ((int_iterate op1 (fun (a:Z) => (int_iterate op1 (f a) k l)) i j) =
   (int_iterate op1
    (fun (a:Z) => (int_iterate op1 (fun (b:Z) => ((f b) a)) i j)) k l)).

Axiom ind_sum_commute :
  forall (f:Z -> Z -> t) (i:Z) (j:Z) (k:Z) (l:Z), (i <= j)%Z -> (k <= l)%Z ->
  ((ind_sum (fun (k1:Z) => (ind_sum (f k1) k l)) i j) =
   (ind_sum (fun (k1:Z) => (ind_sum (fun (k2:Z) => ((f k2) k1)) i j)) k l)).

Axiom sum_commute :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b -> t) (sa:set a) (sb:set b),
  ((sum sa (fun (a1:a) => (sum sb (f a1)))) =
   (sum sb (fun (b1:b) => (sum sa (fun (a1:a) => ((f a1) b1)))))).

(* Why3 assumption *)
Definition non_tzero {a:Type} {a_WT:WhyType a} (s:set a) (t1:a -> t) : set a :=
  nonn_part (fun (y0:t) (y1:t) => (infix_pldt y0 y1)) s t1.

Axiom non_tzero_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), forall (e:a), (mem e (non_tzero s t1)) ->
  mem e s.

Axiom non_tzero_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), forall (e:a), (mem e (non_tzero s t1)) ->
  ~ ((t1 e) = tzero).

Axiom non_tzero_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), forall (e:a),
  ((mem e s) /\ ~ ((t1 e) = tzero)) -> mem e (non_tzero s t1).

Axiom get_non_tzero_member :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (e:a), (mem e (non_tzero s t1)) -> mem e s.

Axiom get_non_tzero_member1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (e:a), (mem e (non_tzero s t1)) ->
  ~ ((t1 e) = tzero).

Axiom set_non_tzero_member :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (e:a), (mem e s) -> ~ ((t1 e) = tzero) ->
  mem e (non_tzero s t1).

Axiom set_non_tzero_member_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), forall (e:a),
  ((mem e s) /\ ~ ((t1 e) = tzero)) -> mem e (non_tzero s t1).

Axiom set_non_tzero_member_gen_ :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), forall (e:a),
  ((mem e s) /\ ~ ((t1 e) = tzero)) -> mem e (non_tzero s t1).

Axiom sum_nullity_partition :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), ((sum s t1) = (sum (non_tzero s t1) t1)).

Axiom non_null_map :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> a) (t1:a -> t),
  ((non_tzero (map f s) t1) =
   (map f (non_tzero s (fun (b:a) => (t1 (f b)))))).

Axiom map_sum_eq_nonnull :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> a) (t1:a -> t),
  (p_bijective f (non_tzero s (fun (b:a) => (t1 (f b))))
   (non_tzero (map f s) t1)) ->
  ((sum (non_tzero (map f s) t1) t1) =
   (sum (non_tzero s (fun (b:a) => (t1 (f b)))) (fun (b:a) => (t1 (f b))))).

Axiom sum_null_but_one :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), ((cardinal (non_tzero s t1)) = 1%Z) ->
  ((sum s t1) = (t1 (element (non_tzero s t1)))).

Axiom sum_null :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t), ((cardinal (non_tzero s t1)) = 0%Z) ->
  ((sum s t1) = tzero).

Axiom sum_null_ :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t),
  (forall (e:a), (mem e s) -> ((t1 e) = tzero)) -> ((sum s t1) = tzero).

Axiom sum_null_forall :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t),
  (forall (e:a), (mem e s) -> ((t1 e) = tzero)) -> ((sum s t1) = tzero).

Axiom ind_sum_null :
  forall (t1:Z -> t) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((t1 k) = tzero)) ->
  ((ind_sum t1 i j) = tzero).

Axiom sum_null_but_one_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (elt:a),
  ((mem elt s) /\ ~ ((t1 elt) = tzero)) ->
  (forall (a1:a), (mem a1 s) -> ~ (a1 = elt) -> ((t1 a1) = tzero)) ->
  ((sum s t1) = (t1 elt)).

Axiom sum_null_but_maybe_one_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (t1:a -> t) (s:set a) (elt:a), (mem elt s) ->
  (forall (k:a), (mem k s) -> ~ (k = elt) -> ((t1 k) = tzero)) ->
  ((sum s t1) = (t1 elt)).

Axiom ind_sum_null_but_maybe_one_elt :
  forall (t1:Z -> t) (i:Z) (j:Z) (ind:Z), ((i <= ind)%Z /\ (ind < j)%Z) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ~ (k = ind) ->
   ((t1 k) = tzero)) ->
  ((ind_sum t1 i j) = (t1 ind)).

Axiom neutral_tone : neutral (fun (y0:t) (y1:t) => (infix_asdt y0 y1)) tone.

Axiom neutral_tone1 : iterable (fun (y0:t) (y1:t) => (infix_asdt y0 y1)).

Axiom product_iter :
  op_neutral_left (fun (y0:t) (y1:t) => (infix_asdt y0 y1)) tone.

Axiom product_iter1 :
  op_neutral_right (fun (y0:t) (y1:t) => (infix_asdt y0 y1)) tone.

Axiom product_iter2 : op_assoc (fun (y0:t) (y1:t) => (infix_asdt y0 y1)).

Axiom product_iter3 : commut (fun (y0:t) (y1:t) => (infix_asdt y0 y1)).

Axiom product_iter4 :
  iterates (fun (y0:t) (y1:t) => (infix_asdt y0 y1)) tone.

(* Why3 assumption *)
Definition product {a:Type} {a_WT:WhyType a} (s:set a) (t1:a -> t) : t :=
  iterate (fun (y0:t) (y1:t) => (infix_asdt y0 y1)) s t1.

Axiom product_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (t':a -> t),
  (forall (e:a), (mem e s) -> ((t1 e) = (t' e))) ->
  ((product s t1) = (product s t')).

Axiom product_eq_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (t1:a -> t) (t':a -> t), (s = s') ->
  (forall (e:a), (mem e s) -> ((t1 e) = (t' e))) ->
  ((product s t1) = (product s' t')).

Axiom product_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> t), (is_empty s) -> ((product s f) = tone).

Axiom product_iter_ : iterable (fun (y0:t) (y1:t) => (infix_asdt y0 y1)).

Axiom add_product :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> t) (x:a), ~ (mem x s) ->
  ((product (add x s) f) = (infix_asdt (f x) (product s f))).

Axiom product_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> t) (x:a), ~ (mem x s) ->
  ((product (add x s) f) = (infix_asdt (product s f) (f x))).

Axiom neutral_one :
  ((neutral_elt (fun (y0:t) (y1:t) => (infix_asdt y0 y1))) = tone).

(* Why3 assumption *)
Definition ind_product (f:Z -> t) (i:Z) (j:Z) : t :=
  int_iterate (fun (y0:t) (y1:t) => (infix_asdt y0 y1)) f i j.

Axiom ind_product_eq :
  forall (f:Z -> t) (g:Z -> t) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ind_product f i j) = (ind_product g i j)).

Axiom ind_product_cardone :
  forall (f:Z -> t) (i:Z) (j:Z), (j = (i + 1%Z)%Z) ->
  ((ind_product f i j) = (f i)).

Axiom ind_product_eq_gen :
  forall (f:Z -> t) (g:Z -> t) (i1:Z) (j1:Z) (i2:Z) (j2:Z),
  (forall (k:Z), ((i1 <= k)%Z /\ (k < j1)%Z) -> ((f k) = (g k))) ->
  (i1 = i2) -> (j1 = j2) -> ((ind_product f i1 j1) = (ind_product g i2 j2)).

Axiom ind_product_right_extension :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_product f i j) =
   (infix_asdt (ind_product f i (j - 1%Z)%Z) (f (j - 1%Z)%Z))).

Axiom ind_product_left_extension :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_product f i j) = (infix_asdt (f i) (ind_product f (i + 1%Z)%Z j))).

Axiom ind_product_to_product :
  forall (f:Z -> t) (i:Z) (j:Z),
  ((ind_product f i j) = (product (to_fset i j) f)).

Axiom map_product_eq :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> a) (t1:a -> t), (p_injective f s) ->
  ((product (map f s) t1) = (product s (fun (b1:b) => (t1 (f b1))))).

Axiom map_ind_product_eq :
  forall (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z) (t1:Z -> t),
  (p_bijective f (to_fset i j) (to_fset k l)) ->
  ((ind_product t1 k l) = (ind_product (fun (b:Z) => (t1 (f b))) i j)).

Axiom ind_product_right_extension_comm :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  ((infix_asdt (ind_product f i (j - 1%Z)%Z) (f (j - 1%Z)%Z)) =
   (ind_product f i j)).

Axiom ind_product_eq_func :
  forall (i:Z) (j:Z) (f1:Z -> t) (f2:Z -> t),
  (p_injective f1 (to_fset i j)) -> (p_injective f2 (to_fset i j)) ->
  ((map f1 (to_fset i j)) = (map f2 (to_fset i j))) ->
  ((ind_product f1 i j) = (ind_product f2 i j)).

Axiom ind_product_trans :
  forall (f:Z -> t) (i:Z) (k:Z) (j:Z), ((i <= k)%Z /\ (k <= j)%Z) ->
  ((ind_product f i j) =
   (infix_asdt (ind_product f i k) (ind_product f k j))).

Axiom ind_product_zero_pre :
  forall (f:Z -> t) (i:Z) (t1:Z) (j:Z), ((i <= t1)%Z /\ (t1 < j)%Z) ->
  ((f t1) = tzero) -> ((ind_product f i j) = tzero).

Axiom ind_product_zero :
  forall (f:Z -> t) (i:Z) (j:Z), (i <= j)%Z ->
  (exists t1:Z, ((i <= t1)%Z /\ (t1 < j)%Z) /\ ((f t1) = tzero)) ->
  ((ind_product f i j) = tzero).

Axiom ind_product_zero_elt :
  forall (f:Z -> t) (i:Z) (j:Z) (t1:Z), (i <= j)%Z ->
  ((i <= t1)%Z /\ (t1 < j)%Z) -> ((f t1) = tzero) ->
  ((ind_product f i j) = tzero).

Axiom ind_product_const_tone :
  forall (f:Z -> t) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (t1:Z), ((i <= t1)%Z /\ (t1 < j)%Z) -> ((f t1) = tone)) ->
  ((ind_product f i j) = tone).

Axiom div_plus_one :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  (((int.EuclideanDivision.div i j) * j)%Z <= i)%Z.

Axiom div_plus_one1 :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  (i < (((int.EuclideanDivision.div i j) + 1%Z)%Z * j)%Z)%Z.

Axiom zero_add : forall (a1:Z) (a2:Z), (a1 = 0%Z) -> ((a1 + a2)%Z = a2).

Axiom add_zero : forall (a1:Z) (a2:Z), (a2 = 0%Z) -> ((a1 + a2)%Z = a1).

Axiom one_mult : forall (a1:Z) (a2:Z), (a1 = 1%Z) -> ((a1 * a2)%Z = a2).

Axiom mult_one : forall (a1:Z) (a2:Z), (a2 = 1%Z) -> ((a1 * a2)%Z = a1).

Axiom add_eq :
  forall (a1:Z) (a2:Z) (b1:Z) (b2:Z), (a1 = a2) -> (b1 = b2) ->
  ((a1 + b1)%Z = (a2 + b2)%Z).

Axiom mult_eq :
  forall (a1:Z) (a2:Z) (b1:Z) (b2:Z), (a1 = a2) -> (b1 = b2) ->
  ((a1 * b1)%Z = (a2 * b2)%Z).

Axiom add_eq_inv :
  forall (a1:Z) (a2:Z) (b1:Z) (b2:Z), (a1 = a2) -> (b1 = b2) ->
  ((a1 + b1)%Z = (b2 + a2)%Z).

Axiom mult_eq_inv :
  forall (a1:Z) (a2:Z) (b1:Z) (b2:Z), (a1 = a2) -> (b1 = b2) ->
  ((a1 * b1)%Z = (b2 * a2)%Z).

Axiom bound_eq :
  forall (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < j)%Z) ->
  (i = (int.EuclideanDivision.mod1 i j)).

Axiom bound_eq_rev :
  forall (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < j)%Z) ->
  ((int.EuclideanDivision.mod1 i j) = i).

Axiom unicity_div_mod :
  forall (i:Z) (j:Z) (q:Z) (r:Z), (0%Z <= i)%Z -> (0%Z <= q)%Z ->
  (0%Z <= r)%Z -> (0%Z < j)%Z -> (i = ((q * j)%Z + r)%Z) ->
  ((0%Z <= r)%Z /\ (r < j)%Z) -> (q = (int.EuclideanDivision.div i j)).

Axiom unicity_div_mod1 :
  forall (i:Z) (j:Z) (q:Z) (r:Z), (0%Z <= i)%Z -> (0%Z <= q)%Z ->
  (0%Z <= r)%Z -> (0%Z < j)%Z -> (i = ((q * j)%Z + r)%Z) ->
  ((0%Z <= r)%Z /\ (r < j)%Z) -> (r = (int.EuclideanDivision.mod1 i j)).

Axiom unicity_div_gen :
  forall (j:Z) (q:Z), (0%Z <= q)%Z -> (0%Z < j)%Z -> forall (i:Z),
  (0%Z <= i)%Z ->
  ((0%Z <= (i - (q * j)%Z)%Z)%Z /\ ((i - (q * j)%Z)%Z < j)%Z) ->
  (q = (int.EuclideanDivision.div i j)).

Axiom unicity_div_gen1 :
  forall (j:Z) (q:Z), (0%Z <= q)%Z -> (0%Z < j)%Z -> forall (i:Z),
  (0%Z <= i)%Z ->
  ((0%Z <= (i - (q * j)%Z)%Z)%Z /\ ((i - (q * j)%Z)%Z < j)%Z) ->
  ((i - (j * q)%Z)%Z = (int.EuclideanDivision.mod1 i j)).

Axiom bound_mod :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  (0%Z <= (int.EuclideanDivision.mod1 i j))%Z.

Axiom bound_mod1 :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  ((int.EuclideanDivision.mod1 i j) < j)%Z.

Axiom mod_eq :
  forall (a:Z) (b:Z) (d:Z), (a = b) ->
  ((int.EuclideanDivision.mod1 a d) = (int.EuclideanDivision.mod1 b d)).

Axiom e_div_eq :
  forall (a:Z) (b:Z) (d:Z), (a = b) ->
  ((int.EuclideanDivision.div a d) = (int.EuclideanDivision.div b d)).

Axiom decomp :
  forall (i:Z) (j:Z), ~ (0%Z = j) ->
  (i =
   ((j * (int.EuclideanDivision.div i j))%Z +
    (int.EuclideanDivision.mod1 i j))%Z).

Axiom div_mod_eq :
  forall (i:Z) (j:Z) (q:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z -> (0%Z < q)%Z ->
  ((int.EuclideanDivision.div i q) = (int.EuclideanDivision.div j q)) ->
  ((int.EuclideanDivision.mod1 i q) = (int.EuclideanDivision.mod1 j q)) ->
  (i = j).

Axiom mod_zero :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  ((int.EuclideanDivision.mod1 i j) = 0%Z) ->
  (i = (j * (int.EuclideanDivision.div i j))%Z).

Axiom div_plus_quotient :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  ((int.EuclideanDivision.div (i + j)%Z j) =
   ((int.EuclideanDivision.div i j) + 1%Z)%Z).

Axiom div_plus_fact_gen_div :
  forall (i:Z) (j:Z) (k:Z), (0%Z < j)%Z ->
  ((int.EuclideanDivision.div (i + (k * j)%Z)%Z j) =
   ((int.EuclideanDivision.div i j) + k)%Z).

Axiom mod_plus_fact_gen_mod :
  forall (i:Z) (j:Z) (k:Z), (0%Z < j)%Z ->
  ((int.EuclideanDivision.mod1 ((k * j)%Z + i)%Z j) =
   (int.EuclideanDivision.mod1 i j)).

Axiom bound_div :
  forall (i:Z) (q:Z) (f:Z), (0%Z <= i)%Z -> (0%Z <= q)%Z -> (0%Z <= f)%Z ->
  (i < (f * q)%Z)%Z -> (0%Z <= (int.EuclideanDivision.div i q))%Z.

Axiom bound_div1 :
  forall (i:Z) (q:Z) (f:Z), (0%Z <= i)%Z -> (0%Z <= q)%Z -> (0%Z <= f)%Z ->
  (i < (f * q)%Z)%Z -> (0%Z <= ((int.EuclideanDivision.div i q) * q)%Z)%Z.

Axiom bound_div2 :
  forall (i:Z) (q:Z) (f:Z), (0%Z <= i)%Z -> (0%Z <= q)%Z -> (0%Z <= f)%Z ->
  (i < (f * q)%Z)%Z -> (((int.EuclideanDivision.div i q) * q)%Z <= i)%Z.

Axiom bound_div3 :
  forall (i:Z) (q:Z) (f:Z), (0%Z <= i)%Z -> (0%Z <= q)%Z -> (0%Z <= f)%Z ->
  (i < (f * q)%Z)%Z ->
  (i < (q * ((int.EuclideanDivision.div i q) + 1%Z)%Z)%Z)%Z.

Axiom bound_div4 :
  forall (i:Z) (q:Z) (f:Z), (0%Z <= i)%Z -> (0%Z <= q)%Z -> (0%Z <= f)%Z ->
  (i < (f * q)%Z)%Z -> ((int.EuclideanDivision.div i q) < f)%Z.

Axiom mod_upper_bound :
  forall (i:Z) (q:Z), (0%Z < i)%Z -> (i = q) ->
  ((int.EuclideanDivision.mod1 i q) = 0%Z).

Axiom bound_div_gen :
  forall (q:Z) (f:Z), (0%Z < q)%Z -> (0%Z <= f)%Z -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (q * f)%Z)%Z) ->
  ((int.EuclideanDivision.div i q) < f)%Z.

Axiom mod_invariant :
  forall (i:Z) (q:Z) (f:Z), (0%Z <= i)%Z -> (0%Z < q)%Z -> (0%Z < f)%Z ->
  ((int.EuclideanDivision.mod1
    ((q * (f * (int.EuclideanDivision.div i (q * f)%Z))%Z)%Z +
     (int.EuclideanDivision.mod1 i (q * f)%Z))%Z
    q)
   = (int.EuclideanDivision.mod1 (int.EuclideanDivision.mod1 i (q * f)%Z) q)).

Axiom mod_inf :
  forall (i:Z) (q:Z), ((0%Z <= i)%Z /\ (i < q)%Z) ->
  ((int.EuclideanDivision.mod1 i q) = i).

Axiom mod_mod_left :
  forall (i:Z) (j:Z) (f:Z), (0%Z < j)%Z -> (0%Z < f)%Z ->
  ((int.EuclideanDivision.mod1 (int.EuclideanDivision.mod1 i (f * j)%Z) j) =
   (int.EuclideanDivision.mod1 i j)).

Axiom mod_mod_i :
  forall (i:Z) (j:Z), (0%Z < j)%Z ->
  ((int.EuclideanDivision.mod1 (int.EuclideanDivision.mod1 i j) j) =
   (int.EuclideanDivision.mod1 i j)).

Axiom binary_prod :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  ((int.EuclideanDivision.mod1
    ((int.EuclideanDivision.mod1 i 2%Z) *
     (int.EuclideanDivision.mod1 j 2%Z))%Z
    2%Z)
   = (int.EuclideanDivision.mod1 (i * j)%Z 2%Z)).

Axiom add_mod :
  forall (a:Z) (b:Z) (c:Z), (0%Z < c)%Z ->
  ((int.EuclideanDivision.mod1
    ((int.EuclideanDivision.mod1 a c) + (int.EuclideanDivision.mod1 b c))%Z
    c)
   = (int.EuclideanDivision.mod1 (a + b)%Z c)).

Axiom mod_mod_right :
  forall (i:Z) (j:Z) (f:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> (0%Z < f)%Z ->
  ((int.EuclideanDivision.mod1 (int.EuclideanDivision.mod1 i (j * f)%Z) j) =
   (int.EuclideanDivision.mod1 i j)).

Axiom mod_mod_rev :
  forall (i:Z) (j:Z) (f:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> (0%Z < f)%Z ->
  ((int.EuclideanDivision.mod1 i j) =
   (int.EuclideanDivision.mod1 (int.EuclideanDivision.mod1 i (j * f)%Z) j)).

Axiom mod_mod_rev1 :
  forall (i:Z) (j:Z) (f:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> (0%Z < f)%Z ->
  ((int.EuclideanDivision.mod1 i j) =
   (int.EuclideanDivision.mod1 (int.EuclideanDivision.mod1 i (f * j)%Z) j)).

Axiom mod_mod_plus :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  ((int.EuclideanDivision.mod1 i j) =
   (int.EuclideanDivision.mod1 (int.EuclideanDivision.mod1 i (j + j)%Z) j)).

Axiom mult_assoc1 :
  forall (i:Z) (q:Z) (f:Z), (0%Z <= i)%Z -> (0%Z < q)%Z -> (0%Z < f)%Z ->
  ((q * (f * (int.EuclideanDivision.div i (q * f)%Z))%Z)%Z =
   ((q * f)%Z * (int.EuclideanDivision.div i (q * f)%Z))%Z).

Axiom div_div1 :
  forall (i:Z) (j:Z) (k:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> (0%Z < k)%Z ->
  ((int.EuclideanDivision.div (int.EuclideanDivision.div i k) j) =
   (int.EuclideanDivision.div i (k * j)%Z)).

Axiom div_div2 :
  forall (i:Z) (j:Z) (k:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> (0%Z < k)%Z ->
  ((int.EuclideanDivision.div (int.EuclideanDivision.div i k) j) =
   (int.EuclideanDivision.div i (j * k)%Z)).

Axiom mod_div :
  forall (i:Z) (j:Z) (k:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> (0%Z < k)%Z ->
  ((int.EuclideanDivision.div (int.EuclideanDivision.mod1 i (j * k)%Z) j) =
   (int.EuclideanDivision.mod1 (int.EuclideanDivision.div i j) k)).

Axiom inf_mul :
  forall (ia:Z) (ib:Z) (a:Z) (b:Z), ((0%Z <= ia)%Z /\ (ia < a)%Z) ->
  ((0%Z <= ib)%Z /\ (ib < b)%Z) -> (((a * ib)%Z + ia)%Z < (a * b)%Z)%Z.

Axiom inf_mul1 :
  forall (ia:Z) (ib:Z) (a:Z) (b:Z), ((0%Z <= ia)%Z /\ (ia < a)%Z) ->
  ((0%Z <= ib)%Z /\ (ib < b)%Z) -> (((ib * a)%Z + ia)%Z < (b * a)%Z)%Z.

Axiom inf_mul_gen :
  forall (n:Z) (v:Z) (p:Z), ((0%Z <= p)%Z /\ (p < v)%Z) -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < n)%Z) -> (((k * v)%Z + p)%Z < (n * v)%Z)%Z.

Axiom inf_mul_gen_b :
  forall (n:Z) (v:Z) (p:Z), ((0%Z <= p)%Z /\ (p < n)%Z) -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < v)%Z) -> (((p * v)%Z + k)%Z < (n * v)%Z)%Z.

Axiom inf_mul_comm :
  forall (i:Z) (bi:Z) (quot:Z) (rest:Z), ((0%Z <= i)%Z /\ (i < bi)%Z) ->
  (0%Z < rest)%Z -> (0%Z < quot)%Z -> (bi = (quot * rest)%Z) ->
  ((int.EuclideanDivision.mod1 i rest) < rest)%Z.

Parameter result4:
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  (im1 -> im1 -> im1) -> (a -> im1) -> a -> bool.

Axiom result_def4 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (t1:a -> im1) (e:a),
  (((result4 op1 t1) e) = true) <-> ~ (neutral op1 (t1 e)).

(* Why3 assumption *)
Definition nonn_part1 {a:Type} {a_WT:WhyType a}
    {im1:Type} {im1_WT:WhyType im1} (op1:im1 -> im1 -> im1) (s:set a)
    (t1:a -> im1) : set a :=
  filter (result4 op1 t1) s.

Axiom nonn_part_spec3 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (nonn_part1 op1 s t1)) -> mem e s.

Axiom nonn_part_spec4 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (nonn_part1 op1 s t1)) -> ~ (neutral op1 (t1 e)).

Axiom nonn_part_spec5 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  ((mem e s) /\ ~ (neutral op1 (t1 e))) -> mem e (nonn_part1 op1 s t1).

Parameter result5:
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  (im1 -> im1 -> im1) -> (a -> im1) -> a -> bool.

Axiom result_def5 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (t1:a -> im1) (e:a),
  (((result5 op1 t1) e) = true) <-> (neutral op1 (t1 e)).

(* Why3 assumption *)
Definition n_part1 {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1}
    (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1) : set a :=
  filter (result5 op1 t1) s.

Axiom n_part_spec3 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (n_part1 op1 s t1)) -> mem e s.

Axiom n_part_spec4 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  (mem e (n_part1 op1 s t1)) -> neutral op1 (t1 e).

Axiom n_part_spec5 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), forall (e:a),
  ((mem e s) /\ (neutral op1 (t1 e))) -> mem e (n_part1 op1 s t1).

Axiom nullity_partition2 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (commut op1) ->
  (s = (union (nonn_part1 op1 s t1) (n_part1 op1 s t1))).

Axiom nullity_partition3 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (commut op1) ->
  ((inter (nonn_part1 op1 s t1) (n_part1 op1 s t1)) = (empty : set a)).

Axiom iterate_neutral1 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (iterable op1) ->
  (commut op1) ->
  (forall (a1:a), (mem a1 s) -> ((t1 a1) = (neutral_elt op1))) ->
  ((iterate op1 s t1) = (neutral_elt op1)).

Axiom iterate_nullity_partition1 :
  forall {a:Type} {a_WT:WhyType a} {im1:Type} {im1_WT:WhyType im1},
  forall (op1:im1 -> im1 -> im1) (s:set a) (t1:a -> im1), (iterable op1) ->
  (commut op1) ->
  ((iterate op1 s t1) = (iterate op1 (nonn_part1 op1 s t1) t1)).

Parameter indic: forall {a:Type} {a_WT:WhyType a}, a -> a -> t.

Axiom indic_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:a) (a':a),
  ((a1 = a') -> ((indic a1 a') = tone)) /\
  (~ (a1 = a') -> ((indic a1 a') = tzero)).

Axiom get_indic :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:a) (a':a),
  ((a1 = a') -> ((indic a1 a') = tone)) /\
  (~ (a1 = a') -> ((indic a1 a') = tzero)).

Parameter indic_bool: forall {a:Type} {a_WT:WhyType a}, a -> a -> bool.

Axiom indic_bool_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:a) (a':a),
  ((a1 = a') -> ((indic_bool a1 a') = true)) /\
  (~ (a1 = a') -> ((indic_bool a1 a') = false)).

Axiom indic_comm :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:a) (a':a), ((indic a1 a') = (indic a' a1)).

Axiom indic_transl_r :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:a) (b:a) (c:a), (b = c) -> ((indic a1 b) = (indic a1 c)).

Axiom indic_transl_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:a) (b:a) (c:a), (b = c) -> ((indic b a1) = (indic c a1)).

Parameter indic_2:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, a -> a -> b ->
  b -> t.

Axiom indic_2_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b),
  ((((indic_bool a1 a') = true) /\ ((indic_bool b1 b') = true)) ->
   ((indic_2 a1 a' b1 b') = tone)) /\
  (~ (((indic_bool a1 a') = true) /\ ((indic_bool b1 b') = true)) ->
   ((indic_2 a1 a' b1 b') = tzero)).

Axiom indic_2_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b),
  ((indic_2 a1 a' b1 b') = (infix_asdt (indic a1 a') (indic b1 b'))).

Axiom indic_2_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b),
  ((indic_2 a1 a' b1 b') = (indic (a1, b1) (a', b'))).

Axiom indic_2_if :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (i:a) (k:a) (j:b) (l:b),
  (((i = k) /\ (j = l)) -> ((indic_2 i k j l) = tone)) /\
  (~ ((i = k) /\ (j = l)) -> ((indic_2 i k j l) = tzero)).

Axiom indic_2_comm :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b),
  ((indic_2 a1 a' b1 b') = (indic_2 a' a1 b1 b')).

Axiom indic_2_comm1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b),
  ((indic_2 a1 a' b1 b') = (indic_2 a1 a' b' b1)).

Axiom indic_2_comm2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (a1:a) (a':a) (b1:b) (b':b),
  ((indic_2 a1 a' b1 b') = (indic_2 a' a1 b' b1)).

(* Why3 assumption *)
Definition sum_indic {a:Type} {a_WT:WhyType a} (s:set a) (t1:a -> t) 
    (i:a) : t :=
  sum s (fun (e:a) => (infix_asdt (t1 e) (indic i e))).

Parameter ind_sum_indic: (Z -> t) -> Z -> Z -> Z -> t.

Axiom ind_sum_indic_def :
  forall (t1:Z -> t) (l:Z) (h:Z) (i:Z), (l < h)%Z ->
  ((ind_sum_indic t1 l h i) =
   (ind_sum (fun (e:Z) => (infix_asdt (t1 e) (indic i e))) l h)).

Axiom ind_sum_indic_spec :
  forall (t1:Z -> t) (l:Z) (h:Z) (i:Z), (l < h)%Z ->
  ((ind_sum_indic t1 l h i) = (sum_indic (to_fset l h) t1 i)).

Axiom sum_indic_t :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (i:a), (mem i s) ->
  ((sum_indic s t1 i) = (t1 i)).

Axiom sum_indic_ts :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (i:a), (mem i s) ->
  ((sum s (fun (e:a) => (infix_asdt (t1 e) (indic i e)))) = (t1 i)).

Axiom ind_sum_indic_t :
  forall (t1:Z -> t) (l:Z) (h:Z) (i:Z), ((l <= i)%Z /\ (i < h)%Z) ->
  ((ind_sum_indic t1 l h i) = (t1 i)).

Axiom ind_sum_indic_t1 :
  forall (t1:Z -> t) (l:Z) (h:Z) (i:Z), ((l <= i)%Z /\ (i < h)%Z) ->
  ((ind_sum (fun (e:Z) => (infix_asdt (t1 e) (indic i e))) l h) = (t1 i)).

Axiom ind_sum_indic_t_quant :
  forall (t1:Z -> t) (l:Z) (h:Z), forall (i:Z), ((l <= i)%Z /\ (i < h)%Z) ->
  ((ind_sum (fun (e:Z) => (infix_asdt (t1 e) (indic i e))) l h) = (t1 i)).

Axiom indic_div_mod :
  forall (i:Z) (j:Z) (q:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z -> (0%Z < q)%Z ->
  ((indic i j) =
   (infix_asdt
    (indic (int.EuclideanDivision.mod1 i q) (int.EuclideanDivision.mod1 j q))
    (indic (int.EuclideanDivision.div i q) (int.EuclideanDivision.div j q)))).

Axiom indic_div_mod_gen :
  forall (q:Z), (0%Z < q)%Z -> forall (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (0%Z <= j)%Z) ->
  ((indic i j) =
   (infix_asdt
    (indic (int.EuclideanDivision.mod1 i q) (int.EuclideanDivision.mod1 j q))
    (indic (int.EuclideanDivision.div i q) (int.EuclideanDivision.div j q)))).

Axiom set_inf : True.

Axiom set_infeq : True.

Axiom bounded_cycle :
  forall (a:Z) (b:Z) (c:Z) (d:Z), (0%Z <= a)%Z -> (0%Z < b)%Z ->
  ((0%Z <= d)%Z /\ (d < b)%Z) -> (0%Z < c)%Z ->
  ((int.EuclideanDivision.div ((a * b)%Z + d)%Z (b * c)%Z) =
   (int.EuclideanDivision.div a c)).

Axiom neutrals : (0%Z = (neutral_elt (fun (y0:Z) (y1:Z) => (y0 + y1)%Z))).

Axiom neutrals1 : (1%Z = (neutral_elt (fun (y0:Z) (y1:Z) => (y0 * y1)%Z))).

Axiom neutrals2 : iterable (fun (y0:Z) (y1:Z) => (y0 + y1)%Z).

Axiom neutrals3 : iterable (fun (y0:Z) (y1:Z) => (y0 * y1)%Z).

(* Why3 assumption *)
Definition isum {a:Type} {a_WT:WhyType a} (s:set a) (t1:a -> Z) : Z :=
  iterate (fun (y0:Z) (y1:Z) => (y0 + y1)%Z) s t1.

Axiom isum_iter : iterates (fun (y0:Z) (y1:Z) => (y0 + y1)%Z) 0%Z.

Axiom isum_iter__ : iterable (fun (y0:Z) (y1:Z) => (y0 + y1)%Z).

Axiom isum_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> Z) (t':a -> Z),
  (forall (e:a), (mem e s) -> ((t1 e) = (t' e))) ->
  ((isum s t1) = (isum s t')).

Axiom isum_eq_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (t1:a -> Z) (t':a -> Z), (s = s') ->
  (forall (e:a), (mem e s) -> ((t1 e) = (t' e))) ->
  ((isum s t1) = (isum s t')).

Axiom isum_add :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> Z) (x:b), ~ (mem x s) ->
  ((isum (add x s) f) = ((f x) + (isum s f))%Z).

Axiom mul_assoc :
  forall (a:Z) (b:Z) (c:Z), (((a * b)%Z * c)%Z = (a * (b * c)%Z)%Z).

Axiom mul_comm : forall (a:Z) (b:Z), ((a * b)%Z = (b * a)%Z).

Axiom mul_assoc_rev :
  forall (a:Z) (b:Z) (c:Z), ((a * (b * c)%Z)%Z = ((a * b)%Z * c)%Z).

Axiom mult_add_distr :
  forall (a:Z) (b:Z) (c:Z) (d:Z),
  (((a + b)%Z * (c + d)%Z)%Z =
   ((((a * c)%Z + (a * d)%Z)%Z + (b * c)%Z)%Z + (b * d)%Z)%Z).

Axiom mult_add_right :
  forall (a:Z) (b:Z) (c:Z), (((a + b)%Z * c)%Z = ((a * c)%Z + (b * c)%Z)%Z).

Axiom mult_add_right_rev :
  forall (a:Z) (b:Z) (c:Z), (((a * c)%Z + (b * c)%Z)%Z = ((a + b)%Z * c)%Z).

Axiom mult_add_left :
  forall (a:Z) (b:Z) (c:Z), ((a * (b + c)%Z)%Z = ((a * b)%Z + (a * c)%Z)%Z).

Axiom mult_add_left_rev :
  forall (a:Z) (b:Z) (c:Z), (((a * b)%Z + (a * c)%Z)%Z = (a * (b + c)%Z)%Z).

Axiom mult_add_distr_rev :
  forall (a:Z) (b:Z) (c:Z) (d:Z),
  (((((a * c)%Z + (a * d)%Z)%Z + (b * c)%Z)%Z + (b * d)%Z)%Z =
   ((a + b)%Z * (c + d)%Z)%Z).

Axiom mul_assoc_comm :
  forall (a:Z) (b:Z) (c:Z), (((a * b)%Z * c)%Z = (b * (a * c)%Z)%Z).

Axiom mul_assoc_rev_comm :
  forall (a:Z) (b:Z) (c:Z), ((a * (b * c)%Z)%Z = ((a * c)%Z * b)%Z).

Axiom add_assoc :
  forall (a:Z) (b:Z) (c:Z), (((a + b)%Z + c)%Z = (a + (b + c)%Z)%Z).

Axiom add_assoc_rev :
  forall (a:Z) (b:Z) (c:Z), ((a + (b + c)%Z)%Z = ((a + b)%Z + c)%Z).

Axiom isum_empty :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> Z), (is_empty s) -> ((isum s f) = 0%Z).

Axiom isum_iter_ :
  opposite_n (fun (y0:Z) (y1:Z) => (y0 + y1)%Z)
  (fun (y0:Z) (y1:Z) => (y0 - y1)%Z) 0%Z.

Axiom isum_iter_1 :
  opposite1 (fun (y0:Z) (y1:Z) => (y0 + y1)%Z)
  (fun (y0:Z) (y1:Z) => (y0 - y1)%Z).

Axiom isum_iter_2 :
  opposite_com (fun (y0:Z) (y1:Z) => (y0 + y1)%Z)
  (fun (y0:Z) (y1:Z) => (y0 - y1)%Z).

Axiom isum_iter_3 :
  inverse_tuple (fun (y0:Z) (y1:Z) => (y0 + y1)%Z)
  (fun (y0:Z) (y1:Z) => (y0 - y1)%Z) 0%Z.

(* Why3 assumption *)
Definition ind_isum (f:Z -> Z) (i:Z) (j:Z) : Z :=
  int_iterate (fun (y0:Z) (y1:Z) => (y0 + y1)%Z) f i j.

Axiom ind_isum_empty :
  forall (f:Z -> Z) (i:Z) (j:Z), (j <= i)%Z -> ((ind_isum f i j) = 0%Z).

Axiom ind_isum_one :
  forall (f:Z -> Z) (i:Z) (j:Z), (j = (i + 1%Z)%Z) ->
  ((ind_isum f i j) = (f i)).

Axiom ind_isum_plus_one :
  forall (f:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_isum f i j) = ((f i) + (ind_isum f (i + 1%Z)%Z j))%Z).

Axiom ind_isum_to_isum :
  forall (f:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_isum f i j) = (isum (to_fset i j) f)).

Axiom ind_isum_const :
  forall (k:Z) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_isum ((fun (y0:Z) (y1:Z) => y0) k) i j) = (k * (j - i)%Z)%Z).

Axiom ind_isum_null :
  forall (f:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = 0%Z)) ->
  ((ind_isum f i j) = 0%Z).

Axiom ind_isum_right_extension :
  forall (f:Z -> Z) (i:Z) (j:Z), (i <= j)%Z ->
  ((ind_isum f i (j + 1%Z)%Z) = ((ind_isum f i j) + (f j))%Z).

Axiom ind_isum_eq :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ind_isum f i j) = (ind_isum g i j)).

Parameter fc2: (Z -> Z) -> (Z -> Z) -> (Z -> bool) -> Z -> Z.

Axiom fc_def2 :
  forall (f:Z -> Z) (g:Z -> Z) (p:Z -> bool) (k:Z),
  (((p k) = true) -> (((fc2 f g p) k) = (f k))) /\
  (~ ((p k) = true) -> (((fc2 f g p) k) = (g k))).

Axiom ind_isum_to_guard :
  forall (f:Z -> Z) (g:Z -> Z) (p:Z -> bool) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((p k) = true)) ->
  ((ind_isum (fc2 f g p) i j) = (ind_isum f i j)).

Parameter fc3: (Z -> Z) -> (Z -> Z) -> (Z -> bool) -> Z -> Z.

Axiom fc_def3 :
  forall (f:Z -> Z) (g:Z -> Z) (p:Z -> bool) (k:Z),
  (((p k) = true) -> (((fc3 f g p) k) = (g k))) /\
  (~ ((p k) = true) -> (((fc3 f g p) k) = (f k))).

Axiom ind_isum_no_guard :
  forall (f:Z -> Z) (g:Z -> Z) (p:Z -> bool) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ~ ((p k) = true)) ->
  ((ind_isum (fc3 f g p) i j) = (ind_isum f i j)).

Axiom ind_isum_eq_gen :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z) (i1:Z) (j:Z) (j1:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) -> (i = i1) ->
  (j = j1) -> ((ind_isum f i j) = (ind_isum g i1 j1)).

Axiom ind_isum_func_const :
  forall (k:Z) (f:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (l:Z), ((i <= l)%Z /\ (l < j)%Z) -> ((f l) = k)) ->
  ((ind_isum f i j) = (k * (j - i)%Z)%Z).

Axiom ind_isum_pos :
  forall (f:Z -> Z) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> (0%Z <= (f k))%Z) ->
  (0%Z <= (ind_isum f i j))%Z.

(* Why3 assumption *)
Definition ind_iproduct (f:Z -> Z) (i:Z) (j:Z) : Z :=
  int_iterate (fun (y0:Z) (y1:Z) => (y0 * y1)%Z) f i j.

Axiom ind_iproduct_eq :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ind_iproduct f i j) = (ind_iproduct g i j)).

Axiom ind_iproduct_eq_gen :
  forall (f:Z -> Z) (g:Z -> Z) (i1:Z) (j1:Z) (i2:Z) (j2:Z),
  (forall (k:Z), ((i1 <= k)%Z /\ (k < j1)%Z) -> ((f k) = (g k))) ->
  (i1 = i2) -> (j1 = j2) -> ((ind_iproduct f i1 j1) = (ind_iproduct g i2 j2)).

Axiom mult_one_int : forall (a:Z) (b:Z), (b = 1%Z) -> ((a * b)%Z = a).

Axiom one_mult_int : forall (a:Z) (b:Z), (a = 1%Z) -> ((a * b)%Z = b).

Axiom mult_zero_int : forall (a:Z) (b:Z), (b = 0%Z) -> ((a * b)%Z = 0%Z).

Axiom zero_mult_int : forall (a:Z) (b:Z), (a = 0%Z) -> ((a * b)%Z = 0%Z).

Axiom iproduct_to_iterate :
  forall (f:Z -> Z) (i:Z) (j:Z),
  ((ind_iproduct f i j) =
   (int_iterate (fun (y0:Z) (y1:Z) => (y0 * y1)%Z) f i j)).

Axiom ind_isum_map_auto :
  forall (i:Z) (j:Z) (f:Z -> Z) (t1:Z -> Z),
  (p_bijective f (to_fset i j) (to_fset i j)) ->
  ((ind_isum t1 i j) = (ind_isum (fun (b:Z) => (t1 (f b))) i j)).

Axiom ind_isum_map :
  forall (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z) (t1:Z -> Z),
  (p_bijective f (to_fset i j) (to_fset k l)) ->
  ((ind_isum t1 k l) = (ind_isum (fun (b:Z) => (t1 (f b))) i j)).

Axiom ind_isum_map_auto_bij :
  forall (i:Z) (j:Z) (f:Z -> Z) (t1:Z -> Z),
  (forall (e:Z), ((i <= e)%Z /\ (e < j)%Z) ->
   (i <= (f e))%Z /\ ((f e) < j)%Z) ->
  (forall (e:Z) (e':Z), ((i <= e)%Z /\ (e < j)%Z) ->
   ((i <= e')%Z /\ (e' < j)%Z) -> ~ (e = e') -> ~ ((f e) = (f e'))) ->
  (forall (e':Z), ((i <= e')%Z /\ (e' < j)%Z) ->
   exists e:Z, ((i <= e)%Z /\ (e < j)%Z) /\ ((f e) = e')) ->
  ((ind_isum t1 i j) = (ind_isum (fun (b:Z) => (t1 (f b))) i j)).

Axiom ind_isum_map_bij :
  forall (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z) (t1:Z -> Z),
  (forall (e:Z), ((i <= e)%Z /\ (e < j)%Z) ->
   (k <= (f e))%Z /\ ((f e) < l)%Z) ->
  (forall (e:Z) (e':Z), ((i <= e)%Z /\ (e < j)%Z) ->
   ((i <= e')%Z /\ (e' < j)%Z) -> ~ (e = e') -> ~ ((f e) = (f e'))) ->
  (forall (e':Z), ((k <= e')%Z /\ (e' < l)%Z) ->
   exists e:Z, ((i <= e)%Z /\ (e < j)%Z) /\ ((f e) = e')) ->
  ((ind_isum t1 k l) = (ind_isum (fun (b:Z) => (t1 (f b))) i j)).

Axiom ind_iproduct_empty :
  forall (f:Z -> Z) (i:Z) (j:Z), (j <= i)%Z -> ((ind_iproduct f i j) = 1%Z).

Axiom ind_iproduct_plus_one :
  forall (f:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_iproduct f i j) = ((f i) * (ind_iproduct f (i + 1%Z)%Z j))%Z).

Axiom ind_iproduct_right_extension :
  forall (f:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  ((ind_iproduct f i j) =
   ((ind_iproduct f i (j - 1%Z)%Z) * (f (j - 1%Z)%Z))%Z).

Axiom ind_iproduct_right_extension_comm :
  forall (f:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  (((ind_iproduct f i (j - 1%Z)%Z) * (f (j - 1%Z)%Z))%Z =
   (ind_iproduct f i j)).

Axiom ind_iproduct_one :
  forall (f:Z -> Z) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = 1%Z)) ->
  ((ind_iproduct f i j) = 1%Z).

Axiom positive_iproduct :
  forall (f:Z -> Z) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> (0%Z < (f k))%Z) ->
  (0%Z < (ind_iproduct f i j))%Z.

Axiom ind_iproduct_left_right :
  forall (f:Z -> Z) (l:Z) (k:Z) (h:Z), ((l <= k)%Z /\ (k <= h)%Z) ->
  ((ind_iproduct f l k) =
   (ind_iproduct (fun (a:Z) => (f ((h - (a + 1%Z)%Z)%Z + l)%Z))
    ((h - k)%Z + l)%Z h)).

Axiom iterable_imult : iterable (fun (y0:Z) (y1:Z) => (y0 * y1)%Z).

Axiom int_minus_distr :
  forall (a:Z) (b:Z), ((-(a + b)%Z)%Z = ((-a)%Z + (-b)%Z)%Z).

Axiom int_minus_eq : forall (a:Z) (b:Z), (a = b) -> ((-a)%Z = (-b)%Z).

Axiom ind_iproduct_map_auto :
  forall (i:Z) (j:Z) (f:Z -> Z) (t1:Z -> Z),
  (p_bijective f (to_fset i j) (to_fset i j)) ->
  ((ind_iproduct t1 i j) = (ind_iproduct (fun (b:Z) => (t1 (f b))) i j)).

Axiom ind_iproduct_map :
  forall (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z) (t1:Z -> Z),
  (p_bijective f (to_fset i j) (to_fset k l)) ->
  ((ind_iproduct t1 k l) = (ind_iproduct (fun (b:Z) => (t1 (f b))) i j)).

Axiom ind_iproduct_trans :
  forall (f:Z -> Z) (i:Z) (k:Z) (j:Z), ((i <= k)%Z /\ (k <= j)%Z) ->
  ((ind_iproduct f i j) = ((ind_iproduct f i k) * (ind_iproduct f k j))%Z).

Axiom ind_isum_transl :
  forall (f:Z -> Z) (i:Z) (j:Z) (k:Z),
  ((ind_isum f i j) =
   (ind_isum (fun (b:Z) => (f (b + k)%Z)) (i - k)%Z (j - k)%Z)).

Axiom ind_isum_transl_plus_one :
  forall (f:Z -> Z) (i:Z) (j:Z),
  ((ind_isum f i j) =
   (ind_isum (fun (b:Z) => (f (b - 1%Z)%Z)) (i + 1%Z)%Z (j + 1%Z)%Z)).

Axiom ind_isum_transl_minus_one :
  forall (f:Z -> Z) (i:Z) (j:Z),
  ((ind_isum f i j) =
   (ind_isum (fun (b:Z) => (f (b + 1%Z)%Z)) (i - 1%Z)%Z (j - 1%Z)%Z)).

Axiom ind_isum_scal :
  forall (f:Z -> Z) (i:Z) (j:Z) (a:Z), (i <= j)%Z ->
  ((ind_isum (fun (i1:Z) => (a * (f i1))%Z) i j) = (a * (ind_isum f i j))%Z).

Axiom minus_ind_isum :
  forall (f:Z -> Z) (i:Z) (j:Z), (i <= j)%Z ->
  ((-(ind_isum f i j))%Z = (ind_isum (fun (i1:Z) => (-(f i1))%Z) i j)).

Axiom minus_ind_isum_rev :
  forall (f:Z -> Z) (i:Z) (j:Z), (i <= j)%Z ->
  ((ind_isum (fun (i1:Z) => (-(f i1))%Z) i j) = (-(ind_isum f i j))%Z).

Axiom ind_isum_scal_rev :
  forall (f:Z -> Z) (i:Z) (j:Z) (a:Z), (i <= j)%Z ->
  ((a * (ind_isum f i j))%Z = (ind_isum (fun (i1:Z) => (a * (f i1))%Z) i j)).

Axiom ind_isum_scal_rev_right :
  forall (f:Z -> Z) (i:Z) (j:Z) (a:Z), (i <= j)%Z ->
  (((ind_isum f i j) * a)%Z = (ind_isum (fun (i1:Z) => ((f i1) * a)%Z) i j)).

Axiom ind_isum_scal_right :
  forall (f:Z -> Z) (i:Z) (j:Z) (a:Z), (i <= j)%Z ->
  ((ind_isum (fun (i1:Z) => ((f i1) * a)%Z) i j) = ((ind_isum f i j) * a)%Z).

Axiom ind_isum_bound :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) < (g k))%Z) ->
  ((ind_isum f i j) < (ind_isum g i j))%Z.

Axiom comp_trans_equal_strict :
  forall (a:Z) (b:Z) (c:Z), (a <= b)%Z -> (b < c)%Z -> (a < c)%Z.

Axiom compeq_trans_sum :
  forall (a:Z) (b:Z) (c:Z), (b <= c)%Z -> ((a + b)%Z <= (a + c)%Z)%Z.

Axiom compeq_trans_sum_zero :
  forall (a:Z) (b:Z), (0%Z <= b)%Z -> (a <= (a + b)%Z)%Z.

Axiom comp_trans_sum :
  forall (a:Z) (b:Z) (c:Z), (b < c)%Z -> ((a + b)%Z < (a + c)%Z)%Z.

Axiom ind_isum_bound_eq :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) <= (g k))%Z) ->
  ((ind_isum f i j) <= (ind_isum g i j))%Z.

Axiom ind_isum_scal_gen :
  forall (f:Z -> Z) (i:Z) (j:Z), forall (a:Z), ((i <= a)%Z /\ (a < j)%Z) ->
  ((ind_isum (fun (i1:Z) => (a * (f i1))%Z) i j) = (a * (ind_isum f i j))%Z).

Axiom ind_isum_trans :
  forall (f:Z -> Z) (i:Z) (k:Z) (j:Z), ((i <= k)%Z /\ (k <= j)%Z) ->
  ((ind_isum f i j) = ((ind_isum f i k) + (ind_isum f k j))%Z).

Parameter power: Z -> Z -> Z.

Axiom power_def :
  forall (e:Z) (i:Z), (0%Z <= i)%Z -> (i = 0%Z) -> ((power e i) = 1%Z).

Axiom power_def1 :
  forall (e:Z) (i:Z), (0%Z <= i)%Z -> ~ (i = 0%Z) ->
  ((power e i) = (e * (power e (i - 1%Z)%Z))%Z).

Axiom Power_zero : forall (i:Z), ((power i 0%Z) = 1%Z).

Axiom Power_one : forall (i:Z), ((power i 1%Z) = i).

Axiom Power_sum :
  forall (x:Z) (y:Z) (i:Z), (0%Z <= x)%Z -> (0%Z <= y)%Z ->
  ((power i (x + y)%Z) = ((power i x) * (power i y))%Z).

Axiom Power_mult :
  forall (x:Z) (y:Z) (i:Z), (0%Z <= x)%Z -> (0%Z <= y)%Z ->
  ((power i (x * y)%Z) = (power (power i x) y)).

Axiom power_plus_one :
  forall (e:Z) (i:Z), (0%Z <= i)%Z ->
  ((power e (i + 1%Z)%Z) = (e * (power e i))%Z).

Axiom power_to_ind_iproduct :
  forall (e:Z) (i:Z), (0%Z <= i)%Z ->
  ((power e i) = (ind_iproduct ((fun (y0:Z) (y1:Z) => y0) e) 0%Z i)).

Axiom power_transl :
  forall (e:Z) (k:Z) (i:Z), (0%Z <= i)%Z ->
  ((power e i) = (ind_iproduct ((fun (y0:Z) (y1:Z) => y0) e) k (k + i)%Z)).

Axiom ind_iproduct_to_power :
  forall (e:Z) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i <= j)%Z) ->
  ((ind_iproduct ((fun (y0:Z) (y1:Z) => y0) e) i j) = (power e (j - i)%Z)).

Axiom ind_iproduct_to_power_gen :
  forall (e:Z), forall (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i <= j)%Z) ->
  ((ind_iproduct ((fun (y0:Z) (y1:Z) => y0) e) i j) = (power e (j - i)%Z)).

Axiom power_sum :
  forall (x:Z) (n:Z) (m:Z), (0%Z <= n)%Z -> (0%Z <= m)%Z ->
  ((power x (n + m)%Z) = ((power x n) * (power x m))%Z).

Axiom power_sum_rev :
  forall (x:Z) (n:Z) (m:Z), (0%Z <= n)%Z -> (0%Z <= m)%Z ->
  (((power x n) * (power x m))%Z = (power x (n + m)%Z)).

Axiom power_eq :
  forall (x:Z) (n:Z) (m:Z), (n = m) -> ((power x n) = (power x m)).

Axiom power_eq_gen :
  forall (x:Z) (y:Z) (n:Z) (m:Z), (n = m) -> (x = y) ->
  ((power x n) = (power y m)).

Axiom power_decomp :
  forall (i:Z), (1%Z <= i)%Z ->
  ((ind_isum (fun (k:Z) => (power 2%Z (k + 1%Z)%Z)) 0%Z i) <
   (power 2%Z (i + 1%Z)%Z))%Z.

Parameter fc4: Z -> Z -> Z.

Axiom fc_def4 :
  forall (i:Z) (k:Z),
  (((1%Z <= k)%Z /\ (k < (i + 1%Z)%Z)%Z) ->
   (((fc4 i) k) = (power 2%Z (k - 1%Z)%Z))) /\
  (~ ((1%Z <= k)%Z /\ (k < (i + 1%Z)%Z)%Z) -> (((fc4 i) k) = 0%Z)).

Axiom power_decomp_minus_one :
  forall (i:Z), (1%Z <= i)%Z ->
  ((ind_isum (fc4 i) 1%Z i) < (power 2%Z (i - 1%Z)%Z))%Z.

Axiom power_decomp_ :
  forall (i:Z), (1%Z <= i)%Z ->
  ((ind_isum (fun (k:Z) => (power 2%Z k)) 0%Z i) < (power 2%Z i))%Z.

Axiom power_decomp_one :
  forall (i:Z), (1%Z <= i)%Z ->
  ((ind_isum (fun (k:Z) => (power 2%Z (k + 1%Z)%Z)) 1%Z i) <
   (power 2%Z (i + 1%Z)%Z))%Z.

Axiom power_decomp_one_ :
  forall (i:Z), (1%Z <= i)%Z ->
  ((ind_isum (fun (k:Z) => (power 2%Z k)) 1%Z i) < (power 2%Z i))%Z.

Axiom growing_mult :
  forall (n:Z) (m:Z), (0%Z <= n)%Z -> (1%Z <= m)%Z -> (n <= (n * m)%Z)%Z.

Axiom strict_growing_mult :
  forall (n:Z) (m:Z), (1%Z < n)%Z -> (1%Z < m)%Z -> (n < (n * m)%Z)%Z.

Axiom init_exp : forall (k:Z), ((power k 0%Z) = 1%Z).

Axiom init_exp1 : forall (k:Z), ((power k 1%Z) = k).

Axiom init_exp2 : forall (k:Z), ((power k 2%Z) = (k * k)%Z).

Axiom positive_int_exp :
  forall (k:Z) (n:Z), (1%Z <= k)%Z -> (0%Z <= n)%Z -> (1%Z <= (power k n))%Z.

Axiom positive_int_exp1 :
  forall (k:Z) (n:Z), (1%Z <= k)%Z -> (0%Z <= n)%Z -> (0%Z < (power k n))%Z.

Axiom positive_int_exp2 :
  forall (k:Z) (n:Z), (1%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((power k n) <= (power k (n + 1%Z)%Z))%Z.

Axiom strict_positive_int_exp :
  forall (k:Z) (n:Z), (1%Z < k)%Z -> (0%Z < n)%Z -> (1%Z < (power k n))%Z.

Axiom strict_positive_int_exp1 :
  forall (k:Z) (n:Z), (1%Z < k)%Z -> (0%Z < n)%Z ->
  ((power k (n - 1%Z)%Z) < (power k n))%Z.

Axiom strict_positive_int_exp2 :
  forall (k:Z) (n:Z), (1%Z < k)%Z -> (0%Z < n)%Z ->
  ((power k n) < (power k (n + 1%Z)%Z))%Z.

Axiom power_minus_one :
  forall (i:Z), (0%Z <= i)%Z -> ((int.EuclideanDivision.mod1 i 2%Z) = 0%Z) ->
  ((power (-1%Z)%Z i) = 1%Z).

Axiom power_minus_one1 :
  forall (i:Z), (0%Z <= i)%Z -> ((int.EuclideanDivision.mod1 i 2%Z) = 1%Z) ->
  ((power (-1%Z)%Z i) = (-1%Z)%Z).

Axiom growing_exp :
  forall (k:Z) (m:Z) (n:Z), (1%Z <= k)%Z -> ((0%Z <= m)%Z /\ (m <= n)%Z) ->
  ((power k m) <= (power k n))%Z.

Axiom strict_growing_exp :
  forall (k:Z) (m:Z) (n:Z), (1%Z < k)%Z -> ((0%Z <= m)%Z /\ (m < n)%Z) ->
  ((power k m) < (power k n))%Z.

Axiom unicity_exp :
  forall (k:Z) (m:Z) (n:Z), (1%Z < k)%Z -> (0%Z <= m)%Z -> (0%Z <= n)%Z ->
  ((power k m) = (power k n)) -> (m = n).

Axiom unicity_exp1 :
  forall (k:Z) (m:Z) (n:Z), (1%Z < k)%Z -> (0%Z <= m)%Z -> (0%Z <= n)%Z ->
  (m = n) -> ((power k m) = (power k n)).

Axiom bounded_sum_exp :
  forall (i:Z) (j:Z) (m:Z) (n:Z), (0%Z <= m)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  (((i * (power 2%Z n))%Z + j)%Z < (power 2%Z (m + n)%Z))%Z.

Axiom power_minus_one2 :
  forall (i:Z), (0%Z <= i)%Z -> ((int.EuclideanDivision.mod1 i 2%Z) = 0%Z) ->
  ((power (-1%Z)%Z i) = 1%Z).

Axiom power_minus_one3 :
  forall (i:Z), (0%Z <= i)%Z -> ((int.EuclideanDivision.mod1 i 2%Z) = 1%Z) ->
  ((power (-1%Z)%Z i) = (-1%Z)%Z).

Parameter kth_right: Z -> Z -> Z -> (Z -> Z) -> Z.

Axiom kth_right_def :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (1%Z <= k)%Z ->
  (forall (l:Z), (((h - k)%Z <= l)%Z /\ (l < h)%Z) -> (0%Z < (f l))%Z) ->
  ((kth_right i k h f) =
   (int.EuclideanDivision.mod1
    (int.EuclideanDivision.div i (ind_iproduct f ((h - k)%Z + 1%Z)%Z h))
    (f (h - k)%Z))).

Axiom kth_right_spec :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (1%Z <= k)%Z ->
  (forall (l:Z), (((h - k)%Z <= l)%Z /\ (l < h)%Z) -> (0%Z < (f l))%Z) ->
  (0%Z <= (kth_right i k h f))%Z.

Axiom kth_right_spec1 :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (1%Z <= k)%Z ->
  (forall (l:Z), (((h - k)%Z <= l)%Z /\ (l < h)%Z) -> (0%Z < (f l))%Z) ->
  ((kth_right i k h f) < (f (h - k)%Z))%Z.

Axiom kth_right_eq :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z) (g:Z -> Z), (0%Z <= i)%Z ->
  (1%Z <= k)%Z ->
  (forall (l:Z), (((h - k)%Z <= l)%Z /\ (l <= h)%Z) -> (0%Z < (f l))%Z) ->
  (forall (l:Z), (((h - k)%Z <= l)%Z /\ (l <= h)%Z) -> ((f l) = (g l))) ->
  ((kth_right i k h f) = (kth_right i k h g)).

Axiom kth_right_trans :
  forall (i:Z) (k:Z) (h:Z) (t1:Z) (f:Z -> Z), (0%Z <= i)%Z -> (1%Z <= k)%Z ->
  (forall (l:Z), (0%Z < (f l))%Z) -> (0%Z <= h)%Z -> (0%Z <= t1)%Z ->
  ((kth_right (int.EuclideanDivision.div i (ind_iproduct f h (h + t1)%Z)) k h
    f)
   = (kth_right i (k + t1)%Z (h + t1)%Z f)).

Parameter kth_left: Z -> Z -> Z -> Z -> (Z -> Z) -> Z.

Axiom kth_left_def :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (0%Z <= l)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (ind:Z), ((l <= ind)%Z /\ (ind < h)%Z) -> (0%Z < (f ind))%Z) ->
  ((kth_left i k l h f) = (kth_right i (((h - l)%Z - k)%Z + 1%Z)%Z h f)).

Axiom kth_left_spec :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (0%Z <= l)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (ind:Z), ((l <= ind)%Z /\ (ind < h)%Z) -> (0%Z < (f ind))%Z) ->
  ((kth_left i k l h f) =
   (int.EuclideanDivision.mod1
    (int.EuclideanDivision.div i (ind_iproduct f (l + k)%Z h))
    (f ((l + k)%Z - 1%Z)%Z))).

Axiom kth_left_spec1 :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (0%Z <= l)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (ind:Z), ((l <= ind)%Z /\ (ind < h)%Z) -> (0%Z < (f ind))%Z) ->
  (0%Z <= (kth_left i k l h f))%Z.

Axiom kth_left_spec2 :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (0%Z <= l)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (ind:Z), ((l <= ind)%Z /\ (ind < h)%Z) -> (0%Z < (f ind))%Z) ->
  ((kth_left i k l h f) < (f ((l + k)%Z - 1%Z)%Z))%Z.

Axiom kth_left_eq :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z) (g:Z -> Z), (0%Z <= i)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) -> (0%Z <= l)%Z ->
  (forall (ind:Z), ((l <= ind)%Z /\ (ind < h)%Z) ->
   ((f ind) = (g ind)) /\ (0%Z < (g ind))%Z) ->
  ((kth_left i k l h f) = (kth_left i k l h g)).

Axiom kth_left_to_mod_div :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (0%Z <= l)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (ind:Z), ((l <= ind)%Z /\ (ind <= h)%Z) -> (0%Z < (f ind))%Z) ->
  ((kth_left i k l h f) =
   (int.EuclideanDivision.mod1
    (int.EuclideanDivision.div i (ind_iproduct f (l + k)%Z h))
    (f ((l + k)%Z - 1%Z)%Z))).

Axiom kth_left_trans :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (0%Z <= l)%Z ->
  ((1%Z <= k)%Z /\ (k < (h - l)%Z)%Z) ->
  (forall (ind:Z), ((l <= ind)%Z /\ (ind <= h)%Z) -> (0%Z < (f ind))%Z) ->
  ((kth_left i k l h f) =
   (kth_left (int.EuclideanDivision.div i (f (h - 1%Z)%Z)) k l (h - 1%Z)%Z f)).

Axiom div_isum_exponents :
  forall (i:Z) (k:Z) (n:Z) (m:Z), (0%Z <= i)%Z -> (0%Z < k)%Z ->
  (0%Z <= n)%Z -> (0%Z <= m)%Z ->
  ((power k (n + m)%Z) = ((power k n) * (power k m))%Z).

Axiom div_isum_exponents1 :
  forall (i:Z) (k:Z) (n:Z) (m:Z), (0%Z <= i)%Z -> (0%Z < k)%Z ->
  (0%Z <= n)%Z -> (0%Z <= m)%Z ->
  ((power k (n + 1%Z)%Z) = ((power k n) * k)%Z).

Axiom div_isum_exponents2 :
  forall (i:Z) (k:Z) (n:Z) (m:Z), (0%Z <= i)%Z -> (0%Z < k)%Z ->
  (0%Z <= n)%Z -> (0%Z <= m)%Z -> ((power k 1%Z) = k).

Axiom div_isum_exponents3 :
  forall (i:Z) (k:Z) (n:Z) (m:Z), (0%Z <= i)%Z -> (0%Z < k)%Z ->
  (0%Z <= n)%Z -> (0%Z <= m)%Z ->
  ((int.EuclideanDivision.div (int.EuclideanDivision.div i (power k n))
    (power k m))
   = (int.EuclideanDivision.div i (power k (n + m)%Z))).

Axiom div_isum_exponents4 :
  forall (i:Z) (k:Z) (n:Z) (m:Z), (0%Z <= i)%Z -> (0%Z < k)%Z ->
  (0%Z <= n)%Z -> (0%Z <= m)%Z ->
  ((int.EuclideanDivision.div (int.EuclideanDivision.div i (power k n)) k) =
   (int.EuclideanDivision.div i (power k (n + 1%Z)%Z))).

Parameter divp: Z -> Z -> Z.

Axiom divp_def :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  ((divp i j) = ((int.EuclideanDivision.div i j) * j)%Z).

Axiom divp_spec :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  (i = ((divp i j) + (int.EuclideanDivision.mod1 i j))%Z).

Axiom divp_spec1 :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> ((divp i j) <= i)%Z.

Axiom divp_spec2 :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z ->
  (i < (((divp i j) + 1%Z)%Z * j)%Z)%Z.

Axiom divp_spec3 :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z < j)%Z -> (j < i)%Z ->
  (0%Z < (divp i j))%Z.

Axiom kth_right_div_mod :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (1%Z <= k)%Z ->
  (forall (k1:Z), (0%Z < (f k1))%Z) ->
  ((kth_right i k h f) =
   (int.EuclideanDivision.div
    (int.EuclideanDivision.mod1 i (ind_iproduct f (h - k)%Z h))
    (ind_iproduct f ((h - k)%Z + 1%Z)%Z h))).

Axiom kth_head :
  forall (i:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (1%Z <= h)%Z ->
  (forall (k:Z), (0%Z < (f k))%Z) ->
  ((kth_right i 1%Z h f) = (int.EuclideanDivision.mod1 i (f (h - 1%Z)%Z))).

Parameter weighted_kth_right: Z -> Z -> Z -> (Z -> Z) -> Z.

Axiom weighted_kth_right_def :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z ->
  (forall (k1:Z), (0%Z < (f k1))%Z) -> (1%Z <= k)%Z ->
  ((weighted_kth_right i k h f) =
   ((kth_right i k h f) * (ind_iproduct f ((h - k)%Z + 1%Z)%Z h))%Z).

Axiom weighted_kth_right_ :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z), (1%Z <= k)%Z -> (0%Z <= i)%Z ->
  (forall (k1:Z), (0%Z < (f k1))%Z) ->
  ((int.EuclideanDivision.mod1 i (ind_iproduct f (h - k)%Z h)) =
   ((weighted_kth_right i k h f) +
    (int.EuclideanDivision.mod1 i (ind_iproduct f ((h - k)%Z + 1%Z)%Z h)))%Z).

Axiom kth_right_decomposition :
  forall (i:Z) (k:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (1%Z <= k)%Z ->
  (forall (k1:Z), (0%Z < (f k1))%Z) ->
  ((int.EuclideanDivision.mod1 i (ind_iproduct f (h - k)%Z h)) =
   (ind_isum (fun (a:Z) => (weighted_kth_right i a h f)) 1%Z (k + 1%Z)%Z)).

Axiom kth_left_div_mod :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z ->
  ((0%Z <= l)%Z /\ (l <= h)%Z) -> ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (k1:Z), (0%Z < (f k1))%Z) ->
  ((kth_left i k l h f) =
   (int.EuclideanDivision.div
    (int.EuclideanDivision.mod1 i (ind_iproduct f ((l + k)%Z - 1%Z)%Z h))
    (ind_iproduct f (l + k)%Z h))).

Parameter weighted_kth_left: Z -> Z -> Z -> Z -> (Z -> Z) -> Z.

Axiom weighted_kth_left_def :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (l <= h)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (k1:Z), (0%Z < (f k1))%Z) ->
  ((weighted_kth_left i k l h f) =
   (weighted_kth_right i (((h - l)%Z - k)%Z + 1%Z)%Z h f)).

Axiom weighted_kth_left_ :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (l <= h)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (k1:Z), (0%Z < (f k1))%Z) ->
  ((int.EuclideanDivision.mod1 i (ind_iproduct f ((l + k)%Z - 1%Z)%Z h)) =
   ((weighted_kth_left i k l h f) +
    (int.EuclideanDivision.mod1 i (ind_iproduct f (l + k)%Z h)))%Z).

Axiom bounded_kth_left_decomposition :
  forall (i:Z) (k:Z) (l:Z) (h:Z) (f:Z -> Z), (0%Z <= i)%Z -> (l <= h)%Z ->
  ((1%Z <= k)%Z /\ (k <= (h - l)%Z)%Z) ->
  (forall (k1:Z), (0%Z < (f k1))%Z) ->
  ((int.EuclideanDivision.mod1 i (ind_iproduct f ((l + k)%Z - 1%Z)%Z h)) =
   (ind_isum (fun (a:Z) => (weighted_kth_left i a l h f)) k
    ((h - l)%Z + 1%Z)%Z)).

Axiom kth_left_decomposition :
  forall (i:Z) (l:Z) (h:Z) (f:Z -> Z),
  ((0%Z <= i)%Z /\ (i < (ind_iproduct f l h))%Z) -> (l < h)%Z ->
  (forall (k:Z), (0%Z < (f k))%Z) ->
  (i =
   (ind_isum (fun (a:Z) => (weighted_kth_left i a l h f)) 1%Z
    ((h - l)%Z + 1%Z)%Z)).

(* Why3 assumption *)
Definition binary (t1:Z -> Z) : Prop :=
  forall (k:Z), (0%Z <= (t1 k))%Z /\ ((t1 k) < 2%Z)%Z.

Axiom set_binary :
  forall (t1:Z -> Z),
  (forall (k:Z), (0%Z <= (t1 k))%Z /\ ((t1 k) < 2%Z)%Z) -> binary t1.

Axiom get_binary :
  forall (t1:Z -> Z), (binary t1) -> forall (k:Z), (0%Z <= (t1 k))%Z.

Axiom get_binary1 :
  forall (t1:Z -> Z), (binary t1) -> forall (k:Z), ((t1 k) < 2%Z)%Z.

(* Why3 assumption *)
Definition shift {a:Type} {a_WT:WhyType a} (f:Z -> a) (i:Z) (k:Z) : a :=
  f (k + i)%Z.

Axiom shift_value :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (i:Z) (k:Z), ((shift f i k) = (f (k + i)%Z)).

Axiom shiftz :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (k:Z), ((shift f 0%Z k) = (f k)).

Axiom shiftz_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (i:Z) (k:Z), (i = 0%Z) -> ((shift f i k) = (f k)).

Axiom shiftz_quant :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a),
  ((((fun (y0:Z -> a) (y1:Z) (y2:Z) => (shift y0 y1 y2)) f) 0%Z) = f).

Axiom shiftz_quant_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a),
  (f = (((fun (y0:Z -> a) (y1:Z) (y2:Z) => (shift y0 y1 y2)) f) 0%Z)).

Parameter concat_fun:
  forall {a:Type} {a_WT:WhyType a}, (Z -> a) -> (Z -> a) -> Z -> Z -> a.

Axiom concat_fun_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (g:Z -> a) (i:Z) (k:Z),
  ((k < i)%Z -> ((concat_fun f g i k) = (f k))) /\
  (~ (k < i)%Z -> ((concat_fun f g i k) = (g (k - i)%Z))).

Axiom shift_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (i:Z) (j:Z) (k:Z),
  ((shift (((fun (y0:Z -> a) (y1:Z) (y2:Z) => (shift y0 y1 y2)) f) j) i k) =
   (shift f (i + j)%Z k)).

Axiom concat_fun_value :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (g:Z -> a) (i:Z) (k:Z),
  ((k < i)%Z -> ((concat_fun f g i k) = (f k))) /\
  (~ (k < i)%Z -> ((concat_fun f g i k) = (g (k - i)%Z))).

Axiom concat_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (f1:Z -> a) (g1:Z -> a) (f2:Z -> a) (g2:Z -> a) (i1:Z) (i2:Z) (k:Z),
  (forall (l:Z), (l < i1)%Z -> ((f1 l) = (f2 l))) ->
  (forall (l:Z), (0%Z <= l)%Z -> ((g1 l) = (g2 l))) -> (i1 = i2) ->
  ((concat_fun f1 g1 i1 k) = (concat_fun f2 g2 i2 k)).

Parameter mod_func:
  forall {a:Type} {a_WT:WhyType a}, (Z -> a) -> Z -> Z -> a.

Axiom mod_func_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (k:Z) (i:Z), (0%Z < k)%Z ->
  ((mod_func f k i) = (f (int.EuclideanDivision.mod1 i k))).

Axiom mod_func_inf :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (k:Z) (i:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < k)%Z) -> ((mod_func f k i) = (f i)).

Axiom shift_mod :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (k:Z) (i:Z), (0%Z < k)%Z ->
  ((mod_func f k i) =
   (shift (((fun (y0:Z -> a) (y1:Z) (y2:Z) => (mod_func y0 y1 y2)) f) k) k i)).

Axiom shift_mod_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> a) (k:Z) (i:Z), (0%Z < k)%Z ->
  ((shift (((fun (y0:Z -> a) (y1:Z) (y2:Z) => (mod_func y0 y1 y2)) f) k) k i)
   = (mod_func f k i)).

Parameter head_bit: Z -> Z -> Z.

Axiom head_bit_def :
  forall (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) ->
  ((head_bit i k) = (int.EuclideanDivision.div i (power 2%Z (k - 1%Z)%Z))).

Axiom head_bit_spec :
  forall (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) -> (0%Z <= (head_bit i k))%Z.

Axiom head_bit_spec1 :
  forall (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) -> ((head_bit i k) <= 1%Z)%Z.

Parameter tail_bits: Z -> Z -> Z.

Axiom tail_bits_def :
  forall (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) ->
  ((tail_bits i k) = (int.EuclideanDivision.mod1 i (power 2%Z (k - 1%Z)%Z))).

Axiom tail_bits_spec :
  forall (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) -> (0%Z <= (tail_bits i k))%Z.

Axiom tail_bits_spec1 :
  forall (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) ->
  ((tail_bits i k) <= (power 2%Z (k - 1%Z)%Z))%Z.

Parameter ht_to_int: Z -> Z -> Z -> Z.

Axiom ht_to_int_def :
  forall (hi:Z) (ti:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= hi)%Z /\ (hi < 2%Z)%Z) ->
  ((0%Z <= ti)%Z /\ (ti < (power 2%Z (k - 1%Z)%Z))%Z) ->
  ((ht_to_int hi ti k) = ((hi * (power 2%Z (k - 1%Z)%Z))%Z + ti)%Z).

Axiom head_tail_inv :
  forall (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) ->
  ((ht_to_int (head_bit i k) (tail_bits i k) k) = i).

Axiom ht_to_int_head :
  forall (i:Z) (ti:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) ->
  ((0%Z <= ti)%Z /\ (ti < (power 2%Z (k - 1%Z)%Z))%Z) ->
  ((head_bit (ht_to_int (head_bit i k) ti k) k) = (head_bit i k)).

Axiom ht_to_int_tail :
  forall (hi:Z) (i:Z) (k:Z), (0%Z < k)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z k))%Z) ->
  ((0%Z <= hi)%Z /\ (hi < 2%Z)%Z) ->
  ((tail_bits (ht_to_int hi (tail_bits i k) k) k) = (tail_bits i k)).

Axiom concat_fun_bin_i :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z) (k:Z), (binary f) -> (binary g) ->
  (0%Z <= (concat_fun f g i k))%Z.

Axiom concat_fun_bin_i1 :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z) (k:Z), (binary f) -> (binary g) ->
  ((concat_fun f g i k) < 2%Z)%Z.

Axiom shift_bin_i :
  forall (f:Z -> Z) (i:Z) (k:Z), (binary f) -> (0%Z <= (shift f i k))%Z.

Axiom shift_bin_i1 :
  forall (f:Z -> Z) (i:Z) (k:Z), (binary f) -> ((shift f i k) < 2%Z)%Z.

Axiom concat_fun_bin :
  forall (f:Z -> Z) (g:Z -> Z) (i:Z), (binary f) -> (binary g) ->
  binary
  ((((fun (y0:Z -> Z) (y1:Z -> Z) (y2:Z) (y3:Z) => (concat_fun y0 y1 y2 y3))
     f)
    g)
   i).

Axiom mod_func_bin :
  forall (f:Z -> Z) (k:Z), (0%Z < k)%Z -> (binary f) ->
  binary (((fun (y0:Z -> Z) (y1:Z) (y2:Z) => (mod_func y0 y1 y2)) f) k).

Axiom shift_bin :
  forall (f:Z -> Z) (i:Z), (binary f) ->
  binary (((fun (y0:Z -> Z) (y1:Z) (y2:Z) => (shift y0 y1 y2)) f) i).

Axiom binary_comp :
  forall (f:Z -> Z) (g:Z -> Z), (binary f) -> binary (fun (x:Z) => (f (g x))).

Axiom set_is_all_binary :
  forall (t1:Z -> Z),
  (forall (k:Z), (0%Z <= (t1 k))%Z /\ ((t1 k) < 2%Z)%Z) -> binary t1.

Parameter nary_length: Z -> Z -> Z.

Axiom nary_length_spec :
  forall (i:Z) (n:Z), (1%Z < n)%Z -> (0%Z <= i)%Z -> (0%Z < i)%Z ->
  ((power n ((nary_length i n) - 1%Z)%Z) <= i)%Z.

Axiom nary_length_spec1 :
  forall (i:Z) (n:Z), (1%Z < n)%Z -> (0%Z <= i)%Z -> (0%Z < i)%Z ->
  (i < (power n (nary_length i n)))%Z.

Axiom nary_length_spec2 :
  forall (i:Z) (n:Z), (1%Z < n)%Z -> (0%Z <= i)%Z -> (i < n)%Z ->
  ((nary_length i n) = 1%Z).

Axiom nary_length_spec3 :
  forall (i:Z) (n:Z), (1%Z < n)%Z -> (0%Z <= i)%Z ->
  (1%Z <= (nary_length i n))%Z.

Axiom nary_length_spec4 :
  forall (i:Z) (n:Z), (1%Z < n)%Z -> (0%Z <= i)%Z ->
  (i = (int.EuclideanDivision.mod1 i (power n (nary_length i n)))).

Parameter binary_length: Z -> Z.

Axiom binary_length_def :
  forall (i:Z), (0%Z <= i)%Z -> ((binary_length i) = (nary_length i 2%Z)).

Axiom binary_length_spec :
  forall (i:Z), (0%Z <= i)%Z -> (0%Z < i)%Z ->
  ((power 2%Z ((binary_length i) - 1%Z)%Z) <= i)%Z.

Axiom binary_length_spec1 :
  forall (i:Z), (0%Z <= i)%Z -> (0%Z < i)%Z ->
  (i < (power 2%Z (binary_length i)))%Z.

Axiom binary_length_spec2 :
  forall (i:Z), (0%Z <= i)%Z -> (i < 2%Z)%Z -> ((binary_length i) = 1%Z).

Axiom binary_length_spec3 :
  forall (i:Z), (0%Z <= i)%Z -> (1%Z <= (binary_length i))%Z.

Axiom binary_length_spec4 :
  forall (i:Z), (0%Z <= i)%Z ->
  (i = (int.EuclideanDivision.mod1 i (power 2%Z (binary_length i)))).

Axiom set_binary_length :
  forall (i:Z) (k:Z), (0%Z <= i)%Z -> (0%Z <= k)%Z -> ~ (0%Z < i)%Z ->
  ~ (i < 2%Z)%Z -> (k = (binary_length i)).

Axiom set_binary_length1 :
  forall (i:Z) (k:Z), (0%Z <= i)%Z -> (0%Z <= k)%Z -> ~ (0%Z < i)%Z ->
  (k = 1%Z) -> (k = (binary_length i)).

Axiom set_binary_length2 :
  forall (i:Z) (k:Z), (0%Z <= i)%Z -> (0%Z <= k)%Z ->
  (((power 2%Z (k - 1%Z)%Z) <= i)%Z /\ (i < (power 2%Z k))%Z) ->
  ~ (i < 2%Z)%Z -> (k = (binary_length i)).

Axiom set_binary_length3 :
  forall (i:Z) (k:Z), (0%Z <= i)%Z -> (0%Z <= k)%Z ->
  (((power 2%Z (k - 1%Z)%Z) <= i)%Z /\ (i < (power 2%Z k))%Z) -> (k = 1%Z) ->
  (k = (binary_length i)).

Axiom set_binary_length_b :
  forall (i:Z) (k:Z), (0%Z <= i)%Z -> (0%Z < k)%Z -> (i < (power 2%Z k))%Z ->
  ((binary_length i) <= k)%Z.

Axiom real : forall (x:t), (real_ x) -> (x = (r_to_t (real_part x))).

Axiom pure_im :
  forall (x:t), (pure_im_ x) -> (x = (infix_asdt im (r_to_t (im_part x)))).

Axiom im_dec : ((real_part im) = 0%R).

Axiom im_dec1 : ((im_part im) = 1%R).

Axiom tone_dec : ((real_part tone) = 1%R).

Axiom tone_dec1 : ((im_part tone) = 0%R).

Axiom tzero_dec : ((real_part tzero) = 0%R).

Axiom tzero_dec1 : ((im_part tzero) = 0%R).

Axiom ttwo_dec : ((real_part (infix_pldt tone tone)) = 2%R).

Axiom ttwo_dec1 : ((im_part (infix_pldt tone tone)) = 0%R).

(* Why3 assumption *)
Definition i_to_t (i:Z) : t := r_to_t (from_int i).

Axiom i_to_t_spec : forall (i:Z), real_ (i_to_t i).

Axiom i_to_t_zero : ((i_to_t 0%Z) = tzero).

Axiom i_to_t_eq : forall (i:Z) (j:Z), (i = j) -> ((i_to_t i) = (i_to_t j)).

Axiom i_to_t_nzero : forall (i:Z), ~ (i = 0%Z) -> ~ ((i_to_t i) = tzero).

Axiom i_to_t_one : ((i_to_t 1%Z) = tone).

Axiom i_to_t_add :
  forall (i:Z) (j:Z),
  ((infix_pldt (i_to_t i) (i_to_t j)) = (i_to_t (i + j)%Z)).

Axiom i_to_t_add_rev :
  forall (i:Z) (j:Z),
  ((i_to_t (i + j)%Z) = (infix_pldt (i_to_t i) (i_to_t j))).

Axiom i_to_t_ttwo : ((i_to_t 2%Z) = (infix_pldt tone tone)).

Axiom i_to_t_mult :
  forall (i:Z) (j:Z),
  ((infix_asdt (i_to_t i) (i_to_t j)) = (i_to_t (i * j)%Z)).

Axiom i_to_t_mult_rev :
  forall (i:Z) (j:Z),
  ((i_to_t (i * j)%Z) = (infix_asdt (i_to_t i) (i_to_t j))).

Axiom i_to_t_mult_assoc :
  forall (x:t) (i:Z) (j:Z),
  ((infix_asdt x (i_to_t (i * j)%Z)) =
   (infix_asdt (infix_asdt x (i_to_t i)) (i_to_t j))).

Axiom i_to_t_mult_assoc_rev :
  forall (x:t) (i:Z) (j:Z),
  ((infix_asdt (infix_asdt x (i_to_t i)) (i_to_t j)) =
   (infix_asdt x (i_to_t (i * j)%Z))).

Axiom i_to_t_sub :
  forall (i:Z) (j:Z),
  ((infix_mndt (i_to_t i) (i_to_t j)) = (i_to_t (i - j)%Z)).

Axiom i_to_t_opp :
  forall (i:Z), ((i_to_t (-i)%Z) = (prefix_mndt (i_to_t i))).

Axiom i_to_t_div :
  forall (i:Z) (j:Z), ~ (j = 0%Z) ->
  ((infix_sldt (i_to_t (i * j)%Z) (i_to_t j)) = (i_to_t i)).

Axiom i_to_t_minus_mult :
  forall (i:Z) (j:Z),
  ((infix_asdt (i_to_t (-i)%Z) (i_to_t j)) =
   (infix_asdt (i_to_t i) (i_to_t (-j)%Z))).

Axiom compat_i_to_t_infeq :
  forall (a:Z) (b:Z), (a <= b)%Z -> infix_lseqdt (i_to_t a) (i_to_t b).

Axiom compat_i_to_t_inf :
  forall (a:Z) (b:Z), (a < b)%Z -> infix_lsdt (i_to_t a) (i_to_t b).

Axiom compat_i_to_t_supeq :
  forall (a:Z) (b:Z), (b <= a)%Z -> infix_gteqdt (i_to_t a) (i_to_t b).

Axiom compat_i_to_t_sup :
  forall (a:Z) (b:Z), (b < a)%Z -> infix_gtdt (i_to_t a) (i_to_t b).

Axiom positive_int_squrt :
  forall (i:Z), (0%Z < i)%Z -> infix_gtdt (square_rt (i_to_t i)) tzero.

Axiom non_null_int_squrt :
  forall (i:Z), (0%Z < i)%Z -> ~ ((square_rt (i_to_t i)) = tzero).

Axiom sum_constant :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t) (x:t),
  (forall (e:a), (mem e s) -> ((t1 e) = x)) ->
  ((sum s t1) = (infix_asdt (i_to_t (cardinal s)) x)).

Axiom sum_const_one :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (t1:a -> t),
  (forall (e:a), (mem e s) -> ((t1 e) = tone)) ->
  ((sum s t1) = (i_to_t (cardinal s))).

Axiom abs_eqinf :
  forall (x:Z) (y:Z), ((x <= y)%Z /\ (y <= 0%Z)%Z) ->
  ((ZArith.BinInt.Z.abs y) <= (ZArith.BinInt.Z.abs x))%Z.

Axiom abs_inf :
  forall (x:Z) (y:Z), ((0%Z < x)%Z /\ ((x < y)%Z /\ (y <= 0%Z)%Z)) ->
  ((ZArith.BinInt.Z.abs y) < (ZArith.BinInt.Z.abs x))%Z.

Axiom abs_eqsup :
  forall (x:Z) (y:Z), ((x <= 0%Z)%Z /\ (y <= x)%Z) ->
  ((ZArith.BinInt.Z.abs x) <= (ZArith.BinInt.Z.abs y))%Z.

Axiom abs_sup :
  forall (x:Z) (y:Z), ((x <= 0%Z)%Z /\ (y < x)%Z) ->
  ((ZArith.BinInt.Z.abs x) < (ZArith.BinInt.Z.abs y))%Z.

Axiom inv_negeq :
  forall (x:Z), (x <= 0%Z)%Z -> (0%Z <= (ZArith.BinInt.Z.abs x))%Z.

Axiom inv_neg1 :
  forall (x:Z), (x < 0%Z)%Z -> (0%Z < (ZArith.BinInt.Z.abs x))%Z.

Parameter cpower: t -> Z -> t.

Axiom Cpower_zero : forall (i:t), ((cpower i 0%Z) = tone).

Axiom Cpower_one : forall (i:t), ((cpower i 1%Z) = i).

Axiom Cpower_sum :
  forall (i:t), forall (n:Z) (m:Z), ~ (i = tzero) ->
  ((cpower i (n + m)%Z) = (infix_asdt (cpower i n) (cpower i m))).

Axiom Cpower_sum1 :
  forall (i:t), forall (n:Z) (m:Z), ~ (n = (-m)%Z) ->
  ((cpower i (n + m)%Z) = (infix_asdt (cpower i n) (cpower i m))).

Axiom zero_poower : forall (e:Z), ~ (e = 0%Z) -> ((cpower tzero e) = tzero).

Axiom real_squarert_two : real_ (square_rt (infix_pldt tone tone)).

Axiom squarertTwo :
  ((cpower (square_rt (infix_pldt tone tone)) 2%Z) = (infix_pldt tone tone)).

Axiom complete_rt_two :
  forall (a:t),
  (a =
   (infix_sldt (square_rt (infix_pldt tone tone)) (infix_pldt tone tone))) ->
  ((infix_asdt (square_rt (infix_pldt tone tone)) a) = tone).

Axiom cpower_sum :
  forall (x:t) (n:Z) (m:Z), ~ (x = tzero) ->
  ((cpower x (n + m)%Z) = (infix_asdt (cpower x n) (cpower x m))).

Axiom cpower_sum1 :
  forall (x:t) (n:Z) (m:Z), ~ (n = (-m)%Z) ->
  ((cpower x (n + m)%Z) = (infix_asdt (cpower x n) (cpower x m))).

Axiom cpower_one : forall (x:t) (n:Z), (n = 1%Z) -> ((cpower x n) = x).

Axiom cpower_sum_rev :
  forall (x:t) (n:Z) (m:Z), ~ (x = tzero) ->
  ((infix_asdt (cpower x n) (cpower x m)) = (cpower x (n + m)%Z)).

Axiom cpower_sum_rev1 :
  forall (x:t) (n:Z) (m:Z), ~ (n = (-m)%Z) ->
  ((infix_asdt (cpower x n) (cpower x m)) = (cpower x (n + m)%Z)).

Axiom cpower_plus_one :
  forall (e:t) (i:Z), ~ (e = tzero) ->
  ((cpower e (i + 1%Z)%Z) = (infix_asdt (cpower e i) e)).

Axiom cpower_plus_one1 :
  forall (e:t) (i:Z), ~ (i = (-1%Z)%Z) ->
  ((cpower e (i + 1%Z)%Z) = (infix_asdt (cpower e i) e)).

Axiom cpower_zero : forall (e:t), ((cpower e 0%Z) = tone).

Axiom cpower_eq :
  forall (e:t) (e':t) (i:Z) (i':Z), (e = e') -> (i = i') ->
  ((cpower e i) = (cpower e' i')).

Axiom cpower_inv :
  forall (e:t) (i:Z), ~ (e = tzero) ->
  ((infix_asdt (cpower e i) (cpower e (-i)%Z)) = tone).

Axiom cpower_inv_rew :
  forall (e:t) (i:Z), ~ (e = tzero) ->
  ((cpower e i) = (infix_sldt tone (cpower e (-i)%Z))).

Axiom inv_cpower :
  forall (e:t) (i:Z), ~ ((cpower e i) = tzero) ->
  ((infix_sldt tone (cpower e i)) = (cpower e (-i)%Z)).

Axiom cpower_mult_split :
  forall (x:t) (y:t) (m:Z), (0%Z <= m)%Z ->
  ((cpower (infix_asdt x y) m) = (infix_asdt (cpower x m) (cpower y m))).

Axiom cpower_inv_out :
  forall (x:t) (y:t), ~ (y = tzero) ->
  ((infix_asdt (cpower (infix_asdt (infix_sldt tone (square_rt y)) x) 2%Z) y)
   = (cpower x 2%Z)).

Axiom cpower_tone_pos :
  forall (m:Z), (0%Z <= m)%Z -> ((cpower tone m) = tone).

Axiom mult_cpower :
  forall (x:t) (x':t) (i:Z), (0%Z <= i)%Z ->
  ((infix_asdt (cpower x i) (cpower x' i)) = (cpower (infix_asdt x x') i)).

Axiom mult_cpower_rev :
  forall (x:t) (x':t) (i:Z), (0%Z <= i)%Z ->
  ((cpower (infix_asdt x x') i) = (infix_asdt (cpower x i) (cpower x' i))).

Axiom cpower_iterate :
  forall (e:t) (i:Z), (0%Z <= i)%Z ->
  ((cpower e i) =
   (int_iterate (fun (y0:t) (y1:t) => (infix_asdt y0 y1))
    ((fun (y0:t) (y1:Z) => y0) e) 0%Z i)).

Axiom cpower_modulus :
  forall (x:t) (n:Z), (0%Z <= n)%Z ->
  ((modulus (cpower x n)) = (cpower (modulus x) n)).

Axiom cpower_modulus1 :
  forall (x:t) (n:Z), (0%Z <= n)%Z -> (0%Z < n)%Z ->
  (infix_lsdt (modulus x) tone) -> infix_lsdt (modulus (cpower x n)) tone.

Axiom cpower_modulus2 :
  forall (x:t) (n:Z), (0%Z <= n)%Z -> (0%Z < n)%Z -> ((modulus x) = tone) ->
  ((modulus (cpower x n)) = tone).

Axiom cpower_modulus3 :
  forall (x:t) (n:Z), (0%Z <= n)%Z -> (0%Z < n)%Z ->
  (infix_gtdt (modulus x) tone) -> infix_gtdt (modulus (cpower x n)) tone.

Axiom cpower_modulus4 :
  forall (x:t) (n:Z), (0%Z <= n)%Z -> (0%Z < n)%Z ->
  (infix_lsdt (modulus (cpower x n)) tone) -> infix_lsdt (modulus x) tone.

Axiom cpower_modulus5 :
  forall (x:t) (n:Z), (0%Z <= n)%Z -> (0%Z < n)%Z ->
  ((modulus (cpower x n)) = tone) -> ((modulus x) = tone).

Axiom cpower_modulus6 :
  forall (x:t) (n:Z), (0%Z <= n)%Z -> (0%Z < n)%Z ->
  (infix_gtdt (modulus (cpower x n)) tone) -> infix_gtdt (modulus x) tone.

Axiom cpower_mult_pre :
  forall (x:t) (n:Z) (m:Z), (0%Z <= m)%Z ->
  ((cpower x (n * m)%Z) = (cpower (cpower x n) m)).

Axiom cpower_mult :
  forall (x:t) (n:Z) (m:Z), ((cpower x (n * m)%Z) = (cpower (cpower x n) m)).

Axiom non_zero_cpower_pos :
  forall (i:t) (n:Z), ~ (i = tzero) -> (0%Z <= n)%Z ->
  ~ ((cpower i n) = tzero).

Axiom inv_cpower_ :
  forall (e:t) (i:Z), ~ (e = tzero) ->
  ((infix_sldt tone (cpower e i)) = (cpower e (-i)%Z)).

Axiom zero_cpower_pos :
  forall (n:Z), (0%Z < n)%Z -> ((cpower tzero n) = tzero).

Axiom zero_cpower : forall (n:Z), ~ (n = 0%Z) -> ((cpower tzero n) = tzero).

Axiom non_zero_cpower :
  forall (i:t) (n:Z), ~ (i = tzero) -> ~ ((cpower i n) = tzero).

Axiom real_cpower_pos :
  forall (elt:t) (i:Z), (real_ elt) -> (0%Z <= i)%Z -> real_ (cpower elt i).

Axiom real_cpower :
  forall (elt:t) (i:Z), (real_ elt) -> real_ (cpower elt i).

Axiom real_modulus_square :
  forall (x:t), (real_ x) -> ((cpower (modulus x) 2%Z) = (cpower x 2%Z)).

Axiom real_modulus_pos :
  forall (x:t), (real_ x) -> (infix_gteqdt x tzero) -> ((modulus x) = x).

Axiom square_frac_modulus :
  forall (x:t) (y:t),
  ((cpower (modulus (infix_sldt x y)) 2%Z) =
   (infix_sldt (cpower (modulus x) 2%Z) (cpower (modulus y) 2%Z))).

Axiom extract_2_sq_modulus :
  forall (x:t) (y:t) (a:t), ~ (a = tzero) -> ~ (y = tzero) ->
  ((infix_sldt (cpower (modulus x) 2%Z) (cpower (modulus y) 2%Z)) =
   (infix_sldt (infix_asdt a (cpower (modulus x) 2%Z))
    (infix_asdt a (cpower (modulus y) 2%Z)))).

Axiom cpower_2_modulus_simpl :
  forall (x:t) (y:t) (z:t), ~ (x = tzero) -> ~ (y = tzero) ->
  ~ (z = tzero) ->
  ((infix_sldt (cpower (modulus (infix_asdt x y)) 2%Z)
    (cpower (modulus (infix_asdt z y)) 2%Z))
   = (infix_sldt (cpower (modulus x) 2%Z) (cpower (modulus z) 2%Z))).

Axiom pre_cond_int_ :
  forall (a:t) (b:t) (c:t), (infix_lsdt a b) -> (infix_lsdt tzero c) ->
  infix_lsdt (infix_asdt a c) (infix_asdt b c).

Axiom growing_mult1 :
  forall (n:t) (m:t), (infix_lseqdt tzero n) -> (infix_lseqdt tone m) ->
  infix_lseqdt n (infix_asdt n m).

Axiom strict_growing_mult_pos :
  forall (n:t) (m:t), (infix_lsdt tone n) -> (infix_lsdt tone m) ->
  infix_lsdt n (infix_asdt n m).

Axiom init_exp3 : forall (k:t), ((cpower k 0%Z) = tone).

Axiom init_exp4 : forall (k:t), ((cpower k 1%Z) = k).

Axiom init_exp5 : forall (k:t), ((cpower k 2%Z) = (infix_asdt k k)).

Axiom int_exp_pos :
  forall (k:t) (n:Z), (infix_lseqdt tone k) -> (0%Z <= n)%Z ->
  infix_gteqdt (cpower k n) tone.

Axiom int_exp_pos1 :
  forall (k:t) (n:Z), (infix_lseqdt tone k) -> (0%Z <= n)%Z ->
  infix_gtdt (cpower k n) tzero.

Axiom int_exp_pos2 :
  forall (k:t) (n:Z), (infix_lseqdt tone k) -> (0%Z <= n)%Z ->
  infix_lseqdt (cpower k n) (cpower k (n + 1%Z)%Z).

Axiom strict_int_exp_pos :
  forall (k:t) (n:Z), (infix_lsdt tone k) -> (0%Z < n)%Z ->
  infix_gtdt (cpower k n) tone.

Axiom strict_int_exp_pos1 :
  forall (k:t) (n:Z), (infix_lsdt tone k) -> (0%Z < n)%Z ->
  infix_lsdt (cpower k (n - 1%Z)%Z) (cpower k n).

Axiom strict_int_exp_pos2 :
  forall (k:t) (n:Z), (infix_lsdt tone k) -> (0%Z < n)%Z ->
  infix_lsdt (cpower k n) (cpower k (n + 1%Z)%Z).

Axiom strict_int_exp_neg :
  forall (k:t) (n:Z), (infix_lsdt tone k) -> (n < 0%Z)%Z ->
  infix_lsdt (cpower k n) tone.

Axiom strict_int_exp_neg1 :
  forall (k:t) (n:Z), (infix_lsdt tone k) -> (n < 0%Z)%Z ->
  infix_lsdt (cpower k (n - 1%Z)%Z) (cpower k n).

Axiom strict_int_exp_neg2 :
  forall (k:t) (n:Z), (infix_lsdt tone k) -> (n < 0%Z)%Z ->
  infix_lsdt (cpower k n) (cpower k (n + 1%Z)%Z).

Axiom int_exp_neg :
  forall (k:t) (n:Z), (infix_lseqdt tone k) -> (n < 0%Z)%Z ->
  infix_lseqdt (cpower k n) tone.

Axiom int_exp_neg1 :
  forall (k:t) (n:Z), (infix_lseqdt tone k) -> (n < 0%Z)%Z ->
  infix_gtdt (cpower k n) tzero.

Axiom int_exp_neg2 :
  forall (k:t) (n:Z), (infix_lseqdt tone k) -> (n < 0%Z)%Z ->
  infix_lseqdt (cpower k n) (cpower k (n + 1%Z)%Z).

Axiom positive_exp :
  forall (k:t) (m:Z), (infix_lseqdt tone k) -> infix_lsdt tzero (cpower k m).

Axiom growing_exp_pos :
  forall (k:t) (m:Z) (n:Z), (infix_lseqdt tone k) ->
  ((0%Z <= m)%Z /\ (m <= n)%Z) -> infix_lseqdt (cpower k m) (cpower k n).

Axiom growing_exp1 :
  forall (k:t) (m:Z) (n:Z), (infix_lseqdt tone k) -> (m <= n)%Z ->
  infix_lseqdt (cpower k m) (cpower k n).

Axiom strict_growing_exp1 :
  forall (k:t) (m:Z) (n:Z), (infix_lsdt tone k) -> (m < n)%Z ->
  infix_lsdt (cpower k m) (cpower k n).

Axiom cpower_comm_pos :
  forall (x:t) (y:t) (n:Z), (infix_lseqdt tone x) -> (infix_lseqdt tone y) ->
  (0%Z <= n)%Z ->
  ((cpower (infix_asdt x y) n) = (infix_asdt (cpower x n) (cpower y n))).

Axiom cpower_comm :
  forall (x:t) (y:t) (n:Z), (infix_lseqdt tone x) -> (infix_lseqdt tone y) ->
  ((cpower (infix_asdt x y) n) = (infix_asdt (cpower x n) (cpower y n))).

Axiom unicity_exp2 :
  forall (k:t) (m:Z) (n:Z), (infix_lsdt tone k) ->
  ((cpower k m) = (cpower k n)) -> (m = n).

Axiom unicity_exp3 :
  forall (k:t) (m:Z) (n:Z), (infix_lsdt tone k) -> (m = n) ->
  ((cpower k m) = (cpower k n)).

Axiom geometric_series :
  forall (a:t) (q:t) (n:Z), (1%Z <= n)%Z ->
  ((sum (to_fset 0%Z n) (fun (i:Z) => (infix_asdt a (cpower q i)))) =
   (infix_sldt (infix_asdt a (infix_mndt tone (cpower q (n + 1%Z)%Z)))
    (infix_mndt tone q))).

Axiom geometric_series_init_one :
  forall (q:t) (n:Z), (1%Z <= n)%Z ->
  ((sum (to_fset 0%Z n) (fun (i:Z) => (cpower q i))) =
   (infix_sldt (infix_mndt tone (cpower q (n + 1%Z)%Z)) (infix_mndt tone q))).

Axiom positive_cpower_2 :
  forall (x:t), ~ (tzero = x) -> infix_lsdt tzero (cpower x 2%Z).

Axiom positive_cpower_2_mod :
  forall (x:t), infix_lseqdt tzero (cpower (modulus x) 2%Z).

Axiom growing_cpower_2 :
  forall (x:t) (y:t), ((infix_lseqdt tzero x) /\ (infix_lseqdt x y)) ->
  infix_lseqdt (cpower x 2%Z) (cpower y 2%Z).

Parameter power_: Z -> Z -> Z.

Axiom power__def :
  forall (e:Z) (i:Z),
  ((0%Z <= i)%Z -> ((power_ e i) = (power e i))) /\
  (~ (0%Z <= i)%Z -> ((power_ e i) = 0%Z)).

Axiom Power_zero_ : forall (i:Z), ((power_ i 0%Z) = 1%Z).

Axiom Power_one_ : forall (i:Z), ((power_ i 1%Z) = i).

Axiom Power_sum_ :
  forall (x:Z) (y:Z) (i:Z), (0%Z <= x)%Z -> (0%Z <= y)%Z ->
  ((power_ i (x + y)%Z) = ((power_ i x) * (power_ i y))%Z).

Axiom Power_mult_ :
  forall (x:Z) (y:Z) (i:Z), (0%Z <= x)%Z -> (0%Z <= y)%Z ->
  ((power i (x * y)%Z) = (power (power i x) y)).

Axiom Power_pos_ : forall (i:Z), (0%Z <= i)%Z -> (0%Z < (power_ i 0%Z))%Z.

Axiom Power_pos_gen_ :
  forall (i:Z) (j:Z), (0%Z < i)%Z -> (0%Z <= j)%Z -> (0%Z < (power_ i j))%Z.

Axiom cpower_incr_power_2 :
  forall (k:Z), (0%Z <= k)%Z ->
  ((cpower (i_to_t (power 2%Z k)) 2%Z) = (i_to_t (power_ 2%Z (2%Z * k)%Z))).

Axiom cpower_modulus_incr_power_2 :
  forall (k:Z), (0%Z <= k)%Z ->
  ((cpower (modulus (i_to_t (power 2%Z k))) 2%Z) =
   (i_to_t (power_ 2%Z (2%Z * k)%Z))).

Axiom cpower_modulus_supeq :
  forall (x:t) (y:t) (i:Z), (1%Z <= i)%Z ->
  (infix_gteqdt (modulus x) (modulus y)) ->
  infix_gteqdt (cpower (modulus x) i) (cpower (modulus y) i).

Axiom matrix : forall (a:Type), Type.
Parameter matrix_WhyType :
  forall (a:Type) {a_WT:WhyType a}, WhyType (matrix a).
Existing Instance matrix_WhyType.

Parameter elts: forall {a:Type} {a_WT:WhyType a}, (matrix a) -> Z -> Z -> a.

Parameter rows: forall {a:Type} {a_WT:WhyType a}, (matrix a) -> Z.

Parameter columns: forall {a:Type} {a_WT:WhyType a}, (matrix a) -> Z.

Axiom matrix'invariant :
  forall {a:Type} {a_WT:WhyType a},
  forall (self:matrix a), (0%Z < (rows self))%Z.

Axiom matrix'invariant1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (self:matrix a), (0%Z < (columns self))%Z.

(* Why3 assumption *)
Definition valid_index {a:Type} {a_WT:WhyType a} (a1:matrix a) (r:Z) 
    (c:Z) : Prop :=
  ((0%Z <= r)%Z /\ (r < (rows a1))%Z) /\
  ((0%Z <= c)%Z /\ (c < (columns a1))%Z).

(* Why3 assumption *)
Definition equal_size {a:Type} {a_WT:WhyType a} (a1:matrix a) (b:matrix a) :
    Prop :=
  ((rows a1) = (rows b)) /\ ((columns a1) = (columns b)).

Parameter get: forall {a:Type} {a_WT:WhyType a}, (matrix a) -> Z -> Z -> a.

Axiom get_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z), ((get a1 r c) = (((elts a1) r) c)).

Parameter make: forall {a:Type} {a_WT:WhyType a}, Z -> Z -> a -> matrix a.

Axiom make_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (v:a), ((0%Z < r)%Z /\ (0%Z < c)%Z) ->
  ((rows (make r c v)) = r).

Axiom make_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (v:a), ((0%Z < r)%Z /\ (0%Z < c)%Z) ->
  ((columns (make r c v)) = c).

Axiom make_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (v:a), ((0%Z < r)%Z /\ (0%Z < c)%Z) ->
  forall (i:Z) (j:Z),
  (((0%Z <= i)%Z /\ (i < r)%Z) /\ ((0%Z <= j)%Z /\ (j < c)%Z)) ->
  ((get (make r c v) i j) = v).

Axiom make_value :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (i:Z) (j:Z) (v:a), ((0%Z < r)%Z /\ (0%Z < c)%Z) ->
  ((0%Z <= i)%Z /\ (i < r)%Z) -> ((0%Z <= j)%Z /\ (j < c)%Z) ->
  ((get (make r c v) i j) = v).

(* Why3 assumption *)
Definition mat_indices {a:Type} {a_WT:WhyType a} (m:matrix a) :
    set (Z* Z)%type :=
  cartesian_product (to_fset 0%Z (rows m)) (to_fset 0%Z (columns m)).

Axiom mat_indices_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a), forall (i:Z) (j:Z), (valid_index m i j) ->
  mem (i, j) (mat_indices m).

Axiom mat_indices_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a), forall (i:Z) (j:Z), (mem (i, j) (mat_indices m)) ->
  valid_index m i j.

Parameter set1:
  forall {a:Type} {a_WT:WhyType a}, (matrix a) -> Z -> Z -> a -> matrix a.

Axiom set_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  ((rows (set1 a1 r c v)) = (rows a1)).

Axiom set_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  ((columns (set1 a1 r c v)) = (columns a1)).

Axiom set_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  forall (i:Z) (j:Z), (valid_index a1 i j) ->
  (((i = r) /\ (j = c)) -> ((get (set1 a1 r c v) i j) = v)) /\
  (~ ((i = r) /\ (j = c)) -> ((get (set1 a1 r c v) i j) = (get a1 i j))).

Axiom set_spec3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  ((get (set1 a1 r c v) r c) = v).

Axiom set_spec4 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  forall (i:Z) (j:Z), (valid_index (set1 a1 r c v) i j) -> ~ (i = r) ->
  ((get (set1 a1 r c v) i j) = (get a1 i j)).

Axiom set_spec5 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  forall (i:Z) (j:Z), (valid_index (set1 a1 r c v) i j) -> ~ (j = c) ->
  ((get (set1 a1 r c v) i j) = (get a1 i j)).

Axiom set_valid_index :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows a1))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns a1))%Z) -> valid_index a1 i j.

Axiom get_valid_index :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z), ((rows a1) = r) -> ((columns a1) = c) ->
  forall (i:Z) (j:Z), (valid_index a1 i j) -> (0%Z <= i)%Z.

Axiom get_valid_index1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z), ((rows a1) = r) -> ((columns a1) = c) ->
  forall (i:Z) (j:Z), (valid_index a1 i j) -> (i < r)%Z.

Axiom get_valid_index2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z), ((rows a1) = r) -> ((columns a1) = c) ->
  forall (i:Z) (j:Z), (valid_index a1 i j) -> (0%Z <= j)%Z.

Axiom get_valid_index3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z), ((rows a1) = r) -> ((columns a1) = c) ->
  forall (i:Z) (j:Z), (valid_index a1 i j) -> (j < c)%Z.

Axiom get_valid_index_params :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (i:Z) (j:Z), ((rows a1) = r) ->
  ((columns a1) = c) -> (valid_index a1 i j) -> (0%Z <= i)%Z.

Axiom get_valid_index_params1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (i:Z) (j:Z), ((rows a1) = r) ->
  ((columns a1) = c) -> (valid_index a1 i j) -> (i < r)%Z.

Axiom get_valid_index_params2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (i:Z) (j:Z), ((rows a1) = r) ->
  ((columns a1) = c) -> (valid_index a1 i j) -> (0%Z <= j)%Z.

Axiom get_valid_index_params3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (i:Z) (j:Z), ((rows a1) = r) ->
  ((columns a1) = c) -> (valid_index a1 i j) -> (j < c)%Z.

Axiom set_values :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  forall (i:Z) (j:Z), (valid_index a1 i j) ->
  (((i = r) /\ (j = c)) -> ((get (set1 a1 r c v) i j) = v)) /\
  (~ ((i = r) /\ (j = c)) -> ((get (set1 a1 r c v) i j) = (get a1 i j))).

Axiom set_rows :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  ((rows (set1 a1 r c v)) = (rows a1)).

Axiom set_columns :
  forall {a:Type} {a_WT:WhyType a},
  forall (a1:matrix a) (r:Z) (c:Z) (v:a), (valid_index a1 r c) ->
  ((columns (set1 a1 r c v)) = (columns a1)).

Parameter make_f:
  forall {a:Type} {a_WT:WhyType a}, Z -> Z -> (Z -> Z -> a) -> matrix a.

Axiom make_f_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((rows (make_f r c f)) = r).

Axiom make_f_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((columns (make_f r c f)) = c).

Axiom make_f_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a), (0%Z < r)%Z -> (0%Z < c)%Z ->
  forall (i:Z) (j:Z), ((get (make_f r c f) i j) = ((f i) j)).

Axiom assert_make :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a) (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < r)%Z) -> ((0%Z <= j)%Z /\ (j < c)%Z) ->
  ((get (make_f r c f) i j) = ((f i) j)).

Axiom assert_make_r :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((rows (make_f r c f)) = r).

Axiom assert_make_c :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((columns (make_f r c f)) = c).

(* Why3 assumption *)
Definition to_indexes {a:Type} {a_WT:WhyType a} (m:matrix a) :
    set (Z* Z)%type :=
  cartesian_product (to_fset 0%Z (rows m)) (to_fset 0%Z (columns m)).

Axiom to_indexes_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a),
  ((cardinal (to_indexes m)) = ((rows m) * (columns m))%Z).

Axiom set_to_indexes_mem :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) -> mem (i, j) (to_indexes m).

Axiom get_to_indexes_mem :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (o:(Z* Z)%type), (mem o (to_indexes m)) ->
  (0%Z <= (fir o))%Z.

Axiom get_to_indexes_mem1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (o:(Z* Z)%type), (mem o (to_indexes m)) ->
  ((fir o) < (rows m))%Z.

Axiom get_to_indexes_mem2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (o:(Z* Z)%type), (mem o (to_indexes m)) ->
  (0%Z <= (sec o))%Z.

Axiom get_to_indexes_mem3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (o:(Z* Z)%type), (mem o (to_indexes m)) ->
  ((sec o) < (columns m))%Z.

Parameter equal:
  forall {a:Type} {a_WT:WhyType a}, (matrix a) -> (matrix a) -> Prop.

Axiom equal_mat :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (equal m n) -> ((rows m) = (rows n)).

Axiom equal_mat1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (equal m n) ->
  ((columns m) = (columns n)).

Axiom equal_mat2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (equal m n) -> forall (i:Z) (j:Z),
  (valid_index m i j) -> ((get m i j) = (get n i j)).

Axiom equal_mat3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a),
  ((((rows m) = (rows n)) /\ ((columns m) = (columns n))) /\
   forall (i:Z) (j:Z), (valid_index m i j) -> ((get m i j) = (get n i j))) ->
  equal m n.

Axiom equality :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (equal m n) -> (m = n).

Axiom equality1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (m = n) -> equal m n.

Axiom mat_equality :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  (forall (i:Z) (j:Z), (valid_index m i j) -> ((get m i j) = (get n i j))) ->
  equal m n.

Parameter square: forall {a:Type} {a_WT:WhyType a}, (matrix a) -> Prop.

Axiom square_mat :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a), (square m) -> ((rows m) = (columns m)).

Axiom square_mat1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a), ((rows m) = (columns m)) -> square m.

Axiom equal_sym :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (equal m n) -> equal n m.

Axiom equal_sym1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (equal n m) -> equal m n.

Axiom equal_rex :
  forall {a:Type} {a_WT:WhyType a}, forall (m:matrix a), equal m m.

Axiom equal_trans :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a) (o:matrix a), (equal m n) ->
  (equal n o) -> equal m o.

Parameter equal_funct:
  forall {a:Type} {a_WT:WhyType a}, (Z -> matrix a) -> (Z -> matrix a) ->
  Prop.

Axiom equal_mat_funct :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> matrix a) (g:Z -> matrix a), forall (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < j)%Z) -> (equal_funct f g) -> forall (k:Z),
  ((i <= k)%Z /\ (k < j)%Z) -> equal (f k) (g k).

Axiom equal_mat_funct1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> matrix a) (g:Z -> matrix a), forall (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < j)%Z) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> equal (f k) (g k)) ->
  equal_funct f g.

Axiom set_equal_mat :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  (forall (i:Z) (j:Z), (valid_index m i j) -> ((get m i j) = (get n i j))) ->
  (m = n).

Axiom set_equal_mat_make :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a) (g:Z -> Z -> a), (0%Z < r)%Z ->
  (0%Z < c)%Z ->
  (forall (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
   ((0%Z <= j)%Z /\ (j < c)%Z) -> (((f i) j) = ((g i) j))) ->
  ((make_f r c f) = (make_f r c g)).

Axiom set_equal_mat_make_t :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (r':Z) (c:Z) (c':Z) (f:Z -> Z -> a) (g:Z -> Z -> a),
  (0%Z < r)%Z -> (0%Z < c)%Z -> (r = r') -> (c = c') ->
  (forall (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
   ((0%Z <= j)%Z /\ (j < c)%Z) -> (((f i) j) = ((g i) j))) ->
  ((make_f r c f) = (make_f r' c' g)).

Axiom get_equal_mat :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (m = n) -> ((rows m) = (rows n)).

Axiom get_equal_mat1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (m = n) -> ((columns m) = (columns n)).

Axiom get_equal_mat2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix a) (n:matrix a), (m = n) -> forall (i:Z) (j:Z),
  (valid_index m i j) -> ((get m i j) = (get n i j)).

Axiom equal_functions :
  forall {a:Type} {a_WT:WhyType a},
  forall (r:Z) (c:Z) (f:Z -> Z -> a) (g:Z -> Z -> a), (0%Z < r)%Z ->
  (0%Z < c)%Z ->
  (forall (i:Z) (j:Z),
   (((0%Z <= i)%Z /\ (i < r)%Z) /\ ((0%Z <= j)%Z /\ (j < c)%Z)) ->
   (((f i) j) = ((g i) j))) ->
  ((make_f r c f) = (make_f r c g)).

Axiom equal_functions_mat :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:Z -> Z -> a) (m:matrix a),
  (forall (i:Z) (j:Z),
   (((0%Z <= i)%Z /\ (i < (rows m))%Z) /\
    ((0%Z <= j)%Z /\ (j < (columns m))%Z)) ->
   (((f i) j) = (get m i j))) ->
  (m = (make_f (rows m) (columns m) f)).

(* Why3 assumption *)
Definition null_mat (a:matrix t) : Prop :=
  forall (i:Z) (j:Z), (valid_index a i j) -> ((get a i j) = tzero).

Axiom set_null_mat :
  forall (a:matrix t),
  (forall (i:Z) (j:Z), (valid_index a i j) -> ((get a i j) = tzero)) ->
  null_mat a.

Axiom get_null_mat :
  forall (a:matrix t), (null_mat a) -> forall (i:Z) (j:Z),
  (valid_index a i j) -> ((get a i j) = tzero).

Parameter kronecker_neutral: matrix t.

Axiom kronecker_neutral1 : (kronecker_neutral = (make 1%Z 1%Z tone)).

Parameter identity: Z -> matrix t.

Parameter result6: Z -> Z -> t.

Axiom result_def6 :
  forall (i:Z) (j:Z),
  ((i = j) -> (((result6 i) j) = tone)) /\
  (~ (i = j) -> (((result6 i) j) = tzero)).

Axiom identity_def :
  forall (n:Z), (0%Z <= n)%Z ->
  ((identity n) = (make_f (power 2%Z n) (power 2%Z n) result6)).

Axiom identity_spec :
  forall (n:Z), (0%Z <= n)%Z -> ((rows (identity n)) = (power 2%Z n)).

Axiom identity_spec1 :
  forall (n:Z), (0%Z <= n)%Z -> ((columns (identity n)) = (power 2%Z n)).

Axiom identity_spec2 :
  forall (n:Z), (0%Z <= n)%Z -> forall (i:Z) (j:Z),
  (valid_index (identity n) i j) ->
  ((i = j) -> ((get (identity n) i j) = tone)) /\
  (~ (i = j) -> ((get (identity n) i j) = tzero)).

(* Why3 assumption *)
Definition kronecker (m:matrix t) (n:matrix t) : matrix t :=
  make_f ((rows m) * (rows n))%Z ((columns m) * (columns n))%Z
  (fun (i:Z) (j:Z) =>
   (infix_asdt
    (get m (int.EuclideanDivision.div i (rows n))
     (int.EuclideanDivision.div j (columns n)))
    (get n (int.EuclideanDivision.mod1 i (rows n))
     (int.EuclideanDivision.mod1 j (columns n))))).

Axiom kronecker_spec :
  forall (m:matrix t) (n:matrix t),
  ((rows (kronecker m n)) = ((rows m) * (rows n))%Z).

Axiom kronecker_spec1 :
  forall (m:matrix t) (n:matrix t),
  ((columns (kronecker m n)) = ((columns m) * (columns n))%Z).

Axiom kronecker_spec2 :
  forall (m:matrix t) (n:matrix t), forall (i:Z) (j:Z),
  (valid_index (kronecker m n) i j) ->
  ((get (kronecker m n) i j) =
   (infix_asdt
    (get m (int.EuclideanDivision.div i (rows n))
     (int.EuclideanDivision.div j (columns n)))
    (get n (int.EuclideanDivision.mod1 i (rows n))
     (int.EuclideanDivision.mod1 j (columns n))))).

Axiom kronecker_eq :
  forall (m1:matrix t) (n1:matrix t) (m2:matrix t) (n2:matrix t),
  (m1 = m2) -> (n1 = n2) -> ((kronecker m1 n1) = (kronecker m2 n2)).

Axiom get_kronecker :
  forall (m:matrix t) (n:matrix t),
  ((kronecker m n) =
   (make_f ((rows m) * (rows n))%Z ((columns m) * (columns n))%Z
    (fun (i:Z) (j:Z) =>
     (infix_asdt
      (get m (int.EuclideanDivision.div i (rows n))
       (int.EuclideanDivision.div j (columns n)))
      (get n (int.EuclideanDivision.mod1 i (rows n))
       (int.EuclideanDivision.mod1 j (columns n))))))).

Axiom kronecker_values :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (valid_index (kronecker m n) i j) ->
  ((get (kronecker m n) i j) =
   (infix_asdt
    (get m (int.EuclideanDivision.div i (rows n))
     (int.EuclideanDivision.div j (columns n)))
    (get n (int.EuclideanDivision.mod1 i (rows n))
     (int.EuclideanDivision.mod1 j (columns n))))).

Axiom kronecker_rows :
  forall (m:matrix t) (n:matrix t),
  ((rows (kronecker m n)) = ((rows m) * (rows n))%Z).

Axiom kronecker_columns :
  forall (m:matrix t) (n:matrix t),
  ((columns (kronecker m n)) = ((columns m) * (columns n))%Z).

Axiom kronecker_values_gen :
  forall (m:matrix t) (n:matrix t), forall (i:Z) (j:Z),
  (valid_index (kronecker m n) i j) ->
  ((get (kronecker m n) i j) =
   (infix_asdt
    (get m (int.EuclideanDivision.div i (rows n))
     (int.EuclideanDivision.div j (columns n)))
    (get n (int.EuclideanDivision.mod1 i (rows n))
     (int.EuclideanDivision.mod1 j (columns n))))).

Axiom kronecker_mod_values :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (valid_index (kronecker m n) i j) ->
  ((get (kronecker m n) i j) =
   (infix_asdt
    (get m
     (int.EuclideanDivision.div
      (int.EuclideanDivision.mod1 i (rows (kronecker m n))) (rows n))
     (int.EuclideanDivision.div
      (int.EuclideanDivision.mod1 j (columns (kronecker m n))) (columns n)))
    (get n
     (int.EuclideanDivision.mod1
      (int.EuclideanDivision.mod1 i (rows (kronecker m n))) (rows n))
     (int.EuclideanDivision.mod1
      (int.EuclideanDivision.mod1 j (columns (kronecker m n))) (columns n))))).

Axiom kronecker_indexes :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z) (k:Z) (l:Z),
  (valid_index m i j) -> (valid_index n k l) ->
  valid_index (kronecker m n) ((i * (rows n))%Z + k)%Z
  ((j * (columns n))%Z + l)%Z.

Axiom kronecker_indexes_com :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (valid_index (kronecker m n) i j) ->
  valid_index m (int.EuclideanDivision.div i (rows n))
  (int.EuclideanDivision.div j (columns n)).

Axiom kronecker_indexes_com1 :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (valid_index (kronecker m n) i j) ->
  valid_index n (int.EuclideanDivision.mod1 i (rows n))
  (int.EuclideanDivision.mod1 j (columns n)).

Axiom kronecker_assoc_pre :
  forall (m:matrix t) (n:matrix t) (o:matrix t) (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < (((rows m) * (rows n))%Z * (rows o))%Z)%Z) ->
  ((0%Z <= j)%Z /\ (j < (((columns m) * (columns n))%Z * (columns o))%Z)%Z) ->
  ((get (kronecker (kronecker m n) o) i j) =
   (get (kronecker m (kronecker n o)) i j)).

Axiom kronecker_assoc :
  op_assoc (fun (y0:matrix t) (y1:matrix t) => (kronecker y0 y1)).

Axiom neutral_ : forall (m:matrix t), ((kronecker m kronecker_neutral) = m).

Axiom neutral_1 : forall (m:matrix t), ((kronecker kronecker_neutral m) = m).

Axiom neutral1 :
  (kronecker_neutral =
   (neutral_elt (fun (y0:matrix t) (y1:matrix t) => (kronecker y0 y1)))).

Axiom neutral2 :
  has_neutral (fun (y0:matrix t) (y1:matrix t) => (kronecker y0 y1)).

Axiom neutral3 :
  iterable (fun (y0:matrix t) (y1:matrix t) => (kronecker y0 y1)).

Axiom kronecker_equal :
  forall (m:matrix t) (ml:matrix t) (n:matrix t) (nl:matrix t),
  (equal m ml) -> (equal n nl) -> equal (kronecker m n) (kronecker ml nl).

Axiom kron_id :
  forall (m:Z) (n:Z), (0%Z <= m)%Z -> (0%Z <= n)%Z ->
  ((kronecker (identity m) (identity n)) = (identity (m + n)%Z)).

(* Why3 assumption *)
Definition frows (f:Z -> matrix t) (k:Z) : Z := rows (f k).

Axiom frows_spec : forall (f:Z -> matrix t) (k:Z), (0%Z < (frows f k))%Z.

(* Why3 assumption *)
Definition fcolumns (f:Z -> matrix t) (k:Z) : Z := columns (f k).

Axiom fcolumns_spec :
  forall (f:Z -> matrix t) (k:Z), (0%Z < (fcolumns f k))%Z.

Axiom const_fcol :
  forall (m:matrix t) (k:Z),
  ((fcolumns ((fun (y0:matrix t) (y1:Z) => y0) m) k) = (columns m)).

Axiom const_frows :
  forall (m:matrix t) (k:Z),
  ((frows ((fun (y0:matrix t) (y1:Z) => y0) m) k) = (rows m)).

Parameter mat_mult_no_bound: (matrix t) -> (matrix t) -> matrix t.

Axiom mat_mult_no_bound_def :
  forall (m:matrix t) (n:matrix t),
  (((columns m) = (rows n)) ->
   ((mat_mult_no_bound m n) =
    (make_f (rows m) (columns n)
     (fun (i:Z) (j:Z) =>
      (ind_sum (fun (k:Z) => (infix_asdt (get m i k) (get n k j))) 0%Z
       (columns m)))))) /\
  (~ ((columns m) = (rows n)) ->
   ((mat_mult_no_bound m n) = (make_f 1%Z 1%Z (fun (i:Z) (j:Z) => tzero)))).

Axiom mat_mult_no_bound_spec :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  ((rows (mat_mult_no_bound m n)) = (rows m)).

Axiom mat_mult_no_bound_spec1 :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  ((columns (mat_mult_no_bound m n)) = (columns n)).

Axiom mat_mult_no_bound_spec2 :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  forall (i:Z) (j:Z), (valid_index (mat_mult_no_bound m n) i j) ->
  ((get (mat_mult_no_bound m n) i j) =
   (ind_sum (fun (k:Z) => (infix_asdt (get m i k) (get n k j))) 0%Z
    (columns m))).

Parameter mat_mult: (matrix t) -> (matrix t) -> matrix t.

Axiom mat_mult_def :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  ((mat_mult m n) = (mat_mult_no_bound m n)).

Axiom mat_mult_spec :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  ((rows (mat_mult m n)) = (rows m)).

Axiom mat_mult_spec1 :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  ((columns (mat_mult m n)) = (columns n)).

Axiom mat_mult_spec2 :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  forall (i:Z) (j:Z), (valid_index (mat_mult m n) i j) ->
  ((get (mat_mult m n) i j) =
   (ind_sum (fun (k:Z) => (infix_asdt (get m i k) (get n k j))) 0%Z
    (columns m))).

Axiom mat_mult_values :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z), ((columns m) = (rows n)) ->
  (valid_index (mat_mult m n) i j) ->
  ((get (mat_mult m n) i j) =
   (ind_sum (fun (k:Z) => (infix_asdt (get m i k) (get n k j))) 0%Z
    (columns m))).

Axiom mat_mult_columns :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  ((columns (mat_mult m n)) = (columns n)).

Axiom mat_mult_rows :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  ((rows (mat_mult m n)) = (rows m)).

Axiom mat_mult_values_quant :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  forall (i:Z) (j:Z), (valid_index (mat_mult m n) i j) ->
  ((get (mat_mult m n) i j) =
   (ind_sum (fun (k:Z) => (infix_asdt (get m i k) (get n k j))) 0%Z
    (columns m))).

Parameter int_mat_prod: (Z -> matrix t) -> Z -> Z -> matrix t.

Axiom int_mat_prod_def :
  forall (f:Z -> matrix t) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z) (k':Z),
   (((i <= k)%Z /\ (k <= j)%Z) /\ ((i <= k')%Z /\ (k' <= j)%Z)) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  ((j - i)%Z = 0%Z) -> ((int_mat_prod f i j) = (f i)).

Axiom int_mat_prod_def1 :
  forall (f:Z -> matrix t) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z) (k':Z),
   (((i <= k)%Z /\ (k <= j)%Z) /\ ((i <= k')%Z /\ (k' <= j)%Z)) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  ~ ((j - i)%Z = 0%Z) ->
  ((int_mat_prod f i j) =
   (mat_mult_no_bound (int_mat_prod f i (j - 1%Z)%Z) (f j))).

Axiom int_mat_prod_spec :
  forall (f:Z -> matrix t) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z) (k':Z),
   (((i <= k)%Z /\ (k <= j)%Z) /\ ((i <= k')%Z /\ (k' <= j)%Z)) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  ((rows (int_mat_prod f i j)) = (rows (f i))).

Axiom int_mat_prod_spec1 :
  forall (f:Z -> matrix t) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z) (k':Z),
   (((i <= k)%Z /\ (k <= j)%Z) /\ ((i <= k')%Z /\ (k' <= j)%Z)) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  ((columns (int_mat_prod f i j)) = (columns (f i))).

Axiom int_mat_prod_spec2 :
  forall (f:Z -> matrix t) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z) (k':Z),
   (((i <= k)%Z /\ (k <= j)%Z) /\ ((i <= k')%Z /\ (k' <= j)%Z)) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  ((columns (int_mat_prod f i j)) = (rows (f i))).

Axiom int_mat_prod_zero :
  forall (f:Z -> matrix t) (i:Z) (j:Z), ((rows (f i)) = (columns (f i))) ->
  (i = j) -> ((int_mat_prod f i j) = (f i)).

Parameter int_mat_prod_plus_one: (Z -> matrix t) -> Z -> Z -> unit.

Axiom int_mat_prod_plus_one_def :
  forall (f:Z -> matrix t) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z) (k':Z),
   (((i <= k)%Z /\ (k <= j)%Z) /\ ((i <= k')%Z /\ (k' <= j)%Z)) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  ((int_mat_prod_plus_one f i j) = tt).

Axiom int_mat_prod_plus_one_spec :
  forall (f:Z -> matrix t) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z) (k':Z),
   (((i <= k)%Z /\ (k <= j)%Z) /\ ((i <= k')%Z /\ (k' <= j)%Z)) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  ((int_mat_prod f i j) = (mat_mult (int_mat_prod f i (j - 1%Z)%Z) (f j))).

Axiom int_mat_prod_eq :
  forall (f:Z -> matrix t) (g:Z -> matrix t) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z) (k':Z), ((i <= k)%Z /\ (k <= j)%Z) ->
   ((i <= k')%Z /\ (k' <= j)%Z) ->
   ((rows (f k)) = (rows (f k'))) /\ ((rows (f k')) = (columns (f k')))) ->
  (forall (k:Z), ((i <= k)%Z /\ (k <= j)%Z) -> ((f k) = (g k))) ->
  ((int_mat_prod f i j) = (int_mat_prod g i j)).

Axiom mat_mult_id :
  forall (n:Z) (m:matrix t), (0%Z <= n)%Z -> ((columns m) = (power 2%Z n)) ->
  ((mat_mult m (identity n)) = m).

Axiom id_mat_mult :
  forall (n:Z) (m:matrix t), (0%Z <= n)%Z -> ((rows m) = (power 2%Z n)) ->
  ((mat_mult (identity n) m) = m).

Axiom mat_mult_eq :
  forall (m:matrix t) (n:matrix t) (m':matrix t) (n':matrix t), (m = m') ->
  (n = n') -> ((columns m) = (rows n)) -> ((mat_mult m n) = (mat_mult m' n')).

Parameter add_mat: (matrix t) -> (matrix t) -> matrix t.

Axiom add_mat_def :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((add_mat m n) =
   (make_f (rows m) (columns m)
    (fun (i:Z) (j:Z) => (infix_pldt (get m i j) (get n i j))))).

Axiom add_mat_spec :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((columns (add_mat m n)) = (columns m)).

Axiom add_mat_spec1 : True.

Axiom add_mat_spec2 :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((rows (add_mat m n)) = (rows m)).

Axiom add_mat_spec3 :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((rows m) = (rows n)).

Axiom add_mat_spec4 :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> forall (i:Z) (j:Z),
  ((get (add_mat m n) i j) = (infix_pldt (get m i j) (get n i j))).

Axiom add_mat_equal :
  forall (m:matrix t) (n:matrix t) (m':matrix t) (n':matrix t),
  ((rows m) = (rows n)) -> ((columns m) = (columns n)) -> (m = m') ->
  (n = n') -> ((add_mat m n) = (add_mat m' n')).

Axiom add_value :
  forall (m:matrix t) (n:matrix t), ((columns m) = (columns n)) ->
  ((rows m) = (rows n)) -> ((columns m) = (columns n)) -> forall (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((get (add_mat m n) i j) = (infix_pldt (get m i j) (get n i j))).

Axiom add_values :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  ((columns m) = (columns n)) -> ((rows m) = (rows n)) ->
  ((get (add_mat m n) i j) = (infix_pldt (get m i j) (get n i j))).

Axiom add_mat_null_left :
  forall (m:matrix t) (n:matrix t), ((columns m) = (columns n)) ->
  ((rows m) = (rows n)) -> (null_mat m) -> ((add_mat m n) = n).

Axiom add_mat_null_right :
  forall (m:matrix t) (n:matrix t), ((columns m) = (columns n)) ->
  ((rows m) = (rows n)) -> (null_mat n) -> ((add_mat m n) = m).

Axiom set_equal_columns_elt :
  forall (m:matrix t) (n:matrix t) (i:Z),
  (((columns m) = (columns n)) /\ ((columns n) = i)) ->
  ((columns m) = (columns n)).

Axiom set_equal_rows_elt :
  forall (m:matrix t) (n:matrix t) (i:Z),
  (((rows m) = (rows n)) /\ ((rows n) = i)) -> ((rows m) = (rows n)).

Axiom add_columns :
  forall (m:matrix t) (n:matrix t), ((columns m) = (columns n)) ->
  ((rows m) = (rows n)) -> ((columns (add_mat m n)) = (columns m)).

Axiom add_rows :
  forall (m:matrix t) (n:matrix t), ((columns m) = (columns n)) ->
  ((rows m) = (rows n)) -> ((rows (add_mat m n)) = (rows m)).

Axiom set_equal_dim_elt :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (((rows m) = (rows n)) /\ ((rows n) = i)) ->
  (((columns m) = (columns n)) /\ ((columns n) = j)) ->
  ((columns m) = (columns n)).

Axiom set_equal_dim_elt1 :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (((rows m) = (rows n)) /\ ((rows n) = i)) ->
  (((columns m) = (columns n)) /\ ((columns n) = j)) -> ((rows m) = (rows n)).

Axiom set_dim_add :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (((rows m) = (rows n)) /\ ((rows n) = i)) ->
  (((columns m) = (columns n)) /\ ((columns n) = j)) ->
  ((rows (add_mat m n)) = i).

Axiom set_dim_add1 :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (((rows m) = (rows n)) /\ ((rows n) = i)) ->
  (((columns m) = (columns n)) /\ ((columns n) = j)) ->
  ((columns (add_mat m n)) = j).

Axiom add_mat_eq :
  forall (m:matrix t) (m1:matrix t) (n:matrix t) (n1:matrix t),
  ((rows m) = (rows n)) -> ((columns m) = (columns n)) -> (m = m1) ->
  (n = n1) -> ((add_mat m n) = (add_mat m1 n1)).

Axiom add_mat_comm :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((add_mat m n) = (add_mat n m)).

Parameter add_neutral: unit -> matrix t.

Axiom add_neutral_spec :
  forall (us:unit), forall (i:Z) (j:Z), (valid_index (add_neutral us) i j) ->
  ((get (add_neutral us) i j) = tzero).

Axiom add_neutral_spec1 :
  forall (us:unit), (0%Z < (rows (add_neutral us)))%Z.

Axiom add_neutral_spec2 :
  forall (us:unit), (0%Z < (columns (add_neutral us)))%Z.

Axiom distr_1_pre :
  forall (m:matrix t) (n:matrix t) (o:matrix t) (i:Z) (j:Z),
  ((rows m) = (rows n)) -> ((columns m) = (columns n)) ->
  ((columns m) = (rows o)) -> ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns o))%Z) ->
  ((get (mat_mult (add_mat m n) o) i j) =
   (get (add_mat (mat_mult m o) (mat_mult n o)) i j)).

Axiom distr_l :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((columns m) = (rows o)) ->
  ((mat_mult (add_mat m n) o) = (add_mat (mat_mult m o) (mat_mult n o))).

Axiom distr_2_pre :
  forall (m:matrix t) (n:matrix t) (o:matrix t) (i:Z) (j:Z),
  ((rows n) = (rows o)) -> ((columns n) = (columns o)) ->
  ((columns m) = (rows n)) -> ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns n))%Z) ->
  valid_index (mat_mult m (add_mat n o)) i j.

Axiom distr_2_pre1 :
  forall (m:matrix t) (n:matrix t) (o:matrix t) (i:Z) (j:Z),
  ((rows n) = (rows o)) -> ((columns n) = (columns o)) ->
  ((columns m) = (rows n)) -> ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns n))%Z) ->
  ((get (mat_mult m (add_mat n o)) i j) =
   (get (add_mat (mat_mult m n) (mat_mult m o)) i j)).

Axiom distr_r :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows n) = (rows o)) ->
  ((columns n) = (columns o)) -> ((columns m) = (rows n)) ->
  ((mat_mult m (add_mat n o)) = (add_mat (mat_mult m n) (mat_mult m o))).

(* Why3 assumption *)
Definition infix_asdtdt (s:t) (m:matrix t) : matrix t :=
  make_f (rows m) (columns m) (fun (i:Z) (j:Z) => (infix_asdt s (get m i j))).

Axiom infix_asdtdt_spec :
  forall (s:t) (m:matrix t), ((columns (infix_asdtdt s m)) = (columns m)).

Axiom infix_asdtdt_spec1 :
  forall (s:t) (m:matrix t), ((rows (infix_asdtdt s m)) = (rows m)).

Axiom infix_asdtdt_spec2 :
  forall (s:t) (m:matrix t), forall (i:Z) (j:Z),
  (valid_index (infix_asdtdt s m) i j) ->
  ((get (infix_asdtdt s m) i j) = (infix_asdt s (get m i j))).

Axiom infix_asdtdt_spec3 :
  forall (s:t) (m:matrix t), forall (i:Z) (j:Z),
  (valid_index (infix_asdtdt s m) i j) -> valid_index m i j.

Axiom infix_asdtdt_spec4 :
  forall (s:t) (m:matrix t), forall (i:Z) (j:Z), (valid_index m i j) ->
  valid_index (infix_asdtdt s m) i j.

Axiom scalar_columns :
  forall (m:matrix t) (a:t), ((columns (infix_asdtdt a m)) = (columns m)).

Axiom scalar_values :
  forall (m:matrix t) (a:t) (i:Z) (j:Z),
  ((get (infix_asdtdt a m) i j) = (infix_asdt a (get m i j))).

Axiom scalar_rows :
  forall (m:matrix t) (a:t), ((rows (infix_asdtdt a m)) = (rows m)).

Axiom scalar_null : forall (m:matrix t), null_mat (infix_asdtdt tzero m).

Axiom scalar_tone : forall (m:matrix t), ((infix_asdtdt tone m) = m).

Axiom scalar_tone_gen :
  forall (m:matrix t) (a:t), (a = tone) -> ((infix_asdtdt a m) = m).

Axiom scalar_null_gen :
  forall (m:matrix t) (a:t), (a = tzero) -> null_mat (infix_asdtdt a m).

Axiom scalar_plus :
  forall (m:matrix t) (a:t) (b:t),
  ((infix_asdtdt (infix_pldt a b) m) =
   (add_mat (infix_asdtdt a m) (infix_asdtdt b m))).

Axiom scalar_plus_rev :
  forall (m:matrix t) (a:t) (b:t),
  ((add_mat (infix_asdtdt a m) (infix_asdtdt b m)) =
   (infix_asdtdt (infix_pldt a b) m)).

Axiom add_scal :
  forall (m:matrix t) (n:matrix t) (a:t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((infix_asdtdt a (add_mat m n)) =
   (add_mat (infix_asdtdt a m) (infix_asdtdt a n))).

Axiom mat_mult_scal_values_l :
  forall (m:matrix t) (n:matrix t) (a:t) (i:Z) (j:Z),
  ((rows n) = (columns m)) -> ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns n))%Z) ->
  ((infix_asdt a (get (mat_mult m n) i j)) =
   (ind_sum
    (fun (k:Z) => (infix_asdt (infix_asdt a (get m i k)) (get n k j))) 0%Z
    (columns m))).

Axiom mat_mult_scal_values_r :
  forall (m:matrix t) (n:matrix t) (a:t) (i:Z) (j:Z),
  ((rows n) = (columns m)) -> ((rows m) = (columns n)) ->
  ((columns m) = (columns n)) -> ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns n))%Z) ->
  ((infix_asdt (get (mat_mult m n) i j) a) =
   (ind_sum
    (fun (k:Z) => (infix_asdt (infix_asdt a (get m i k)) (get n k j))) 0%Z
    (columns m))).

Axiom mat_mut_scal :
  forall (m:matrix t) (n:matrix t) (a:t), ((rows n) = (columns m)) ->
  ((mat_mult m (infix_asdtdt a n)) = (infix_asdtdt a (mat_mult m n))).

Axiom scal_mat_mut :
  forall (m:matrix t) (n:matrix t) (a:t), ((rows n) = (columns m)) ->
  ((mat_mult (infix_asdtdt a m) n) = (infix_asdtdt a (mat_mult m n))).

Axiom ind_sum_commute_scal_r :
  forall (f:Z -> Z -> t) (g:Z -> t) (i:Z) (j:Z) (k:Z) (l:Z), (i <= j)%Z ->
  (k <= l)%Z ->
  ((ind_sum (fun (k1:Z) => (infix_asdt (ind_sum (f k1) k l) (g k1))) i j) =
   (ind_sum
    (fun (k1:Z) =>
     (ind_sum (fun (k2:Z) => (infix_asdt ((f k2) k1) (g k2))) i j))
    k l)).

Axiom mat_mult_assoc_pre :
  forall (m:matrix t) (n:matrix t) (o:matrix t) (i:Z) (j:Z),
  ((columns m) = (rows n)) -> ((columns n) = (rows o)) ->
  ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns o))%Z) ->
  ((get (mat_mult (mat_mult m n) o) i j) =
   (get (mat_mult m (mat_mult n o)) i j)).

Axiom mat_mult_assoc :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((columns m) = (rows n)) ->
  ((columns n) = (rows o)) ->
  ((mat_mult (mat_mult m n) o) = (mat_mult m (mat_mult n o))).

Axiom mat_mult_assoc_quant :
  forall (m:matrix t) (n:matrix t), ((columns m) = (rows n)) ->
  forall (o:matrix t), ((columns n) = (rows o)) ->
  ((mat_mult (mat_mult m n) o) = (mat_mult m (mat_mult n o))).

Axiom mat_mult_assoc_comm :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((columns m) = (rows n)) ->
  ((columns n) = (rows o)) ->
  ((mat_mult m (mat_mult n o)) = (mat_mult (mat_mult m n) o)).

Axiom scalar_eq :
  forall (m:matrix t) (n:matrix t) (a:t), (m = n) ->
  ((infix_asdtdt a m) = (infix_asdtdt a n)).

Axiom scalar_eq_gen :
  forall (m:matrix t) (n:matrix t) (a:t) (b:t), (m = n) -> (a = b) ->
  ((infix_asdtdt a m) = (infix_asdtdt b n)).

Axiom scalar_add :
  forall (m:matrix t) (a:t) (b:t),
  ((infix_asdtdt (infix_pldt a b) m) =
   (add_mat (infix_asdtdt a m) (infix_asdtdt b m))).

Axiom scalar_assoc :
  forall (m:matrix t) (a:t) (b:t),
  ((infix_asdtdt a (infix_asdtdt b m)) = (infix_asdtdt (infix_asdt a b) m)).

Axiom scalar_assoc_rev :
  forall (m:matrix t) (a:t) (b:t),
  ((infix_asdtdt (infix_asdt a b) m) = (infix_asdtdt a (infix_asdtdt b m))).

Axiom eq_scalar :
  forall (m:matrix t) (a:t) (b:t),
  (exists i:Z, exists j:Z, (valid_index m i j) /\ ~ ((get m i j) = tzero)) ->
  ((infix_asdtdt a m) = (infix_asdtdt b m)) -> (a = b).

Parameter mat_substr: (matrix t) -> (matrix t) -> matrix t.

Axiom mat_substr_def :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((mat_substr m n) = (add_mat m (infix_asdtdt (prefix_mndt tone) n))).

Axiom mat_substr_spec :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((rows (mat_substr m n)) = (rows m)).

Axiom mat_substr_spec1 :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((columns (mat_substr m n)) = (columns m)).

Axiom mat_substr_spec2 :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> forall (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((get (mat_substr m n) i j) = (infix_mndt (get m i j) (get n i j))).

Axiom substr_rows :
  forall (m:matrix t) (n:matrix t) (r:Z),
  (((rows m) = (rows n)) /\ ((rows n) = r)) -> ((columns m) = (columns n)) ->
  ((rows (mat_substr m n)) = r).

Axiom substr_columns :
  forall (m:matrix t) (n:matrix t) (c:Z), ((rows m) = (rows n)) ->
  (((columns m) = (columns n)) /\ ((columns n) = c)) ->
  ((columns (mat_substr m n)) = c).

Axiom substr_value :
  forall (m:matrix t) (n:matrix t) (i:Z) (j:Z), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((get (mat_substr m n) i j) = (infix_mndt (get m i j) (get n i j))).

Axiom distr_l_substr :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ((columns m) = (rows o)) ->
  ((mat_mult (mat_substr m n) o) =
   (mat_substr (mat_mult m o) (mat_mult n o))).

Axiom distr_r_substr :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows n) = (rows o)) ->
  ((columns n) = (columns o)) -> ((columns m) = (rows o)) ->
  ((mat_mult m (mat_substr n o)) =
   (mat_substr (mat_mult m n) (mat_mult m o))).

Axiom add_real_part :
  forall (i:t) (j:t),
  ((infix_pldt (t_real_part i) (t_real_part j)) =
   (t_real_part (infix_pldt i j))).

Axiom add_im_part :
  forall (i:t) (j:t),
  ((infix_pldt (t_im_part i) (t_im_part j)) = (t_im_part (infix_pldt i j))).

Axiom add_real_part_rev :
  forall (i:t) (j:t),
  ((t_real_part (infix_pldt i j)) =
   (infix_pldt (t_real_part i) (t_real_part j))).

Axiom add_im_part_rev :
  forall (i:t) (j:t),
  ((t_im_part (infix_pldt i j)) = (infix_pldt (t_im_part i) (t_im_part j))).

Axiom mult_distr_add_r :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt a (infix_pldt b c)) =
   (infix_pldt (infix_asdt a b) (infix_asdt a c))).

Axiom mult_distr_minus :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt a (infix_mndt b c)) =
   (infix_mndt (infix_asdt a b) (infix_asdt a c))).

Axiom div_distr_add :
  forall (a:t) (b:t) (c:t), ~ (a = tzero) ->
  ((infix_sldt (infix_pldt b c) a) =
   (infix_pldt (infix_sldt b a) (infix_sldt c a))).

Axiom div_distr_minus :
  forall (a:t) (b:t) (c:t), ~ (a = tzero) ->
  ((infix_sldt (infix_mndt b c) a) =
   (infix_mndt (infix_sldt b a) (infix_sldt c a))).

Axiom div_distr_add_rev :
  forall (a:t) (b:t) (c:t), ~ (a = tzero) ->
  ((infix_pldt (infix_sldt b a) (infix_sldt c a)) =
   (infix_sldt (infix_pldt b c) a)).

Axiom div_distr_minus_rev :
  forall (a:t) (b:t) (c:t), ~ (a = tzero) ->
  ((infix_mndt (infix_sldt b a) (infix_sldt c a)) =
   (infix_sldt (infix_mndt b c) a)).

Axiom mult_distr_add_l :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt (infix_pldt b c) a) =
   (infix_pldt (infix_asdt a b) (infix_asdt a c))).

Axiom mult_distr_minus_r :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt a (infix_mndt b c)) =
   (infix_mndt (infix_asdt a b) (infix_asdt a c))).

Axiom minus_distr_op :
  forall (a:t) (b:t) (c:t),
  ((infix_mndt a (infix_pldt b c)) = (infix_mndt (infix_mndt a b) c)).

Axiom mult_distr_minus_l :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt (infix_mndt b c) a) =
   (infix_mndt (infix_asdt a b) (infix_asdt a c))).

Axiom assoc_right :
  forall (a:t) (b:t) (c:t),
  ((infix_pldt a (infix_pldt b c)) = (infix_pldt (infix_pldt a b) c)).

Axiom assoc_right_mult :
  forall (a:t) (b:t) (c:t),
  ((infix_asdt a (infix_asdt b c)) = (infix_asdt (infix_asdt a b) c)).

Axiom minus_elim :
  forall (a:t) (b:t), ((infix_mndt a b) = (infix_pldt a (prefix_mndt b))).

Axiom minus_distr_elim :
  forall (a:t) (b:t) (c:t),
  ((infix_mndt a (infix_pldt b c)) =
   (infix_pldt (infix_pldt a (prefix_mndt b)) (prefix_mndt c))).

Axiom plus_minus_distr_elim :
  forall (a:t) (b:t) (c:t),
  ((infix_pldt a (prefix_mndt (infix_pldt b c))) =
   (infix_pldt (infix_pldt a (prefix_mndt b)) (prefix_mndt c))).

Axiom def_by_minus :
  forall (x:t) (y:t) (z:t), (x = (infix_mndt y z)) -> (y = (infix_pldt y z)).

Axiom switch :
  forall (a:t) (b:t) (c:t),
  ((infix_pldt (infix_pldt a b) c) = (infix_pldt (infix_pldt a c) b)).

Axiom meet_a_c :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt a c) b) d)).

Axiom meet_a_d :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt a d) b) c)).

Axiom meet_b_c :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt b c) a) d)).

Axiom meet_b_d :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt b d) a) c)).

Axiom meet_c_d :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt c d) a) b)).

Axiom inv_add :
  forall (a:t) (b:t), ((infix_pldt (infix_pldt a (prefix_mndt a)) b) = b).

Axiom switch_m :
  forall (a:t) (b:t) (c:t),
  ((infix_pldt (infix_pldt a b) c) = (infix_pldt (infix_pldt a c) b)).

Axiom meet_a_c_m :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt a c) b) d)).

Axiom meet_a_d_m :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt a d) b) c)).

Axiom meet_b_c_m :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt b c) a) d)).

Axiom meet_b_d_m :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt b d) a) c)).

Axiom meet_c_d_m :
  forall (a:t) (b:t) (c:t) (d:t),
  ((infix_pldt (infix_pldt (infix_pldt a b) c) d) =
   (infix_pldt (infix_pldt (infix_pldt c d) a) b)).

Axiom t_real_part_add :
  forall (a:t) (b:t),
  ((t_real_part (infix_pldt a b)) =
   (infix_pldt (t_real_part a) (t_real_part b))).

Axiom t_real_part_subs :
  forall (a:t) (b:t),
  ((t_real_part (infix_mndt a b)) =
   (infix_mndt (t_real_part a) (t_real_part b))).

Axiom t_im_part_add :
  forall (a:t) (b:t),
  ((t_im_part (infix_pldt a b)) = (infix_pldt (t_im_part a) (t_im_part b))).

Axiom t_im_part_subs :
  forall (a:t) (b:t),
  ((t_im_part (infix_mndt a b)) = (infix_mndt (t_im_part a) (t_im_part b))).

Axiom t_real_part_real : forall (a:t), (real_ a) -> ((t_real_part a) = a).

Axiom t_real_part_im :
  forall (a:t), (pure_im_ a) -> ((t_real_part a) = tzero).

Axiom im_t_im_part_im :
  forall (a:t), (pure_im_ a) -> ((infix_asdt im (t_im_part a)) = a).

Axiom t_im_part_im :
  forall (a:t), (pure_im_ a) ->
  ((t_im_part a) = (infix_asdt (prefix_mndt im) a)).

Axiom t_im_part_real : forall (a:t), (real_ a) -> ((t_im_part a) = tzero).

Axiom a_div_b_mult_a :
  forall (a:t) (b:t) (c:t) (d:t), ~ (b = tzero) -> ~ (c = tzero) ->
  (d = (infix_sldt tone b)) -> (a = c) ->
  ((infix_asdt (infix_sldt a b) (infix_sldt tone c)) = d).

Axiom mat_substr_eq :
  forall (m:matrix t) (m':matrix t) (n:matrix t) (n':matrix t),
  ((rows m) = (rows n)) -> ((columns m) = (columns n)) -> (m = m') ->
  (n = n') -> ((mat_substr m n) = (mat_substr m' n')).

Axiom substr_decomp :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> (m = (add_mat n (mat_substr m n))).

Axiom get_equal_mat_to_substr :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> (m = n) ->
  ((mat_substr m n) = (make (rows m) (columns m) tzero)).

Axiom set_inequal_mat_by_substr :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) -> ~ (m = n) ->
  ~ ((mat_substr m n) = (make (rows m) (columns m) tzero)).

Axiom set_inequal_mat_by_substr1 :
  forall (m:matrix t) (n:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ~ ((mat_substr m n) = (make (rows m) (columns m) tzero)) -> ~ (m = n).

(* Why3 assumption *)
Definition constant_size {a:Type} {a_WT:WhyType a} (s:set a)
    (f:a -> matrix t) : Prop :=
  forall (e:a), (mem e s) ->
  ((rows (f e)) = (rows (f (choose s)))) /\
  ((columns (f e)) = (columns (f (choose s)))).

Axiom set_constant_size :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t),
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) ->
   ((rows (f e)) = (rows (f e')))) ->
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) ->
   ((columns (f e)) = (columns (f e')))) ->
  constant_size s f.

Axiom set_constant_size_exists :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t),
  (exists r:Z, forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (exists c:Z, forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  constant_size s f.

Axiom set_constant_size_t :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z),
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) -> constant_size s f.

Parameter fc5:
  forall {a:Type} {a_WT:WhyType a}, (a -> matrix t) -> (a -> bool) ->
  (matrix t) -> a -> matrix t.

Axiom fc_def5 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (p:a -> bool) (m:matrix t) (j:a),
  (((p j) = true) -> (((fc5 f p m) j) = (f j))) /\
  (~ ((p j) = true) -> (((fc5 f p m) j) = m)).

Axiom guarded_set_constant_size :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (p:a -> bool) (m:matrix t),
  (constant_size s f) -> (forall (e:a), (mem e s) -> ((p e) = true)) ->
  constant_size s (fc5 f p m).

Axiom set_constant_size_set :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> t) (m:matrix t) (i:Z) (j:Z),
  (valid_index m i j) -> constant_size s (fun (e:a) => (set1 m i j (f e))).

Axiom get_constant_size :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  forall (e:a) (e':a), (mem e s) -> (mem e' s) ->
  ((rows (f e)) = (rows (f e'))).

Axiom get_constant_size1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  forall (e:a) (e':a), (mem e s) -> (mem e' s) ->
  ((columns (f e)) = (columns (f e'))).

Parameter s_rows:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (a -> matrix t) -> Z.

Axiom s_rows_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  ((s_rows s f) = (rows (f (choose s)))).

Axiom s_rows_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (s_rows s f))%Z.

Axiom s_rows_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) -> forall (e:a),
  (mem e s) -> ((rows (f e)) = (s_rows s f)).

Axiom s_rows_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  forall (e:a) (e':a), (mem e s) -> (mem e' s) ->
  ((rows (f e)) = (rows (f e'))).

Parameter s_columns:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (a -> matrix t) -> Z.

Axiom s_columns_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  ((s_columns s f) = (columns (f (choose s)))).

Axiom s_columns_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (s_columns s f))%Z.

Axiom s_columns_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) -> forall (e:a),
  (mem e s) -> ((columns (f e)) = (s_columns s f)).

Axiom s_columns_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  forall (e:a) (e':a), (mem e s) -> (mem e' s) ->
  ((columns (f e)) = (columns (f e'))).

Axiom set_s_rows :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z), (constant_size s f) ->
  ((rows (f (choose s))) = r) -> ((s_rows s f) = r).

Axiom set_s_rows_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (elt:a), (constant_size s f) ->
  (mem elt s) -> ((s_rows s f) = (rows (f elt))).

Axiom set_s_columns :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z), (constant_size s f) ->
  ((columns (f (choose s))) = r) -> ((s_columns s f) = r).

Axiom set_s_columns_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (elt:a), (constant_size s f) ->
  (mem elt s) -> ((s_columns s f) = (columns (f elt))).

Axiom s_rows_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (g:a -> matrix t),
  (constant_size s f) -> (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((f e) = (g e))) ->
  ((s_rows s f) = (s_rows s g)).

Axiom set_constant_size_give :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) -> constant_size s f.

Axiom set_constant_size_give1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) -> forall (e:a),
  (mem e s) -> ((rows (f e)) = r).

Axiom set_constant_size_give2 : True.

Axiom set_constant_size_give3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) -> ((s_rows s f) = r).

Axiom set_constant_size_give4 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) -> ((s_columns s f) = c).

Axiom s_columns_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (g:a -> matrix t),
  (constant_size s f) -> (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((f e) = (g e))) ->
  ((s_columns s f) = (s_columns s g)).

Axiom subset_constant_size :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (f:a -> matrix t), (constant_size s f) ->
  ~ (is_empty s') -> (subset s' s) -> constant_size s' f.

Axiom subset_constant_size1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (f:a -> matrix t), (constant_size s f) ->
  ~ (is_empty s') -> (subset s' s) -> ((s_rows s' f) = (s_rows s f)).

Axiom subset_constant_size2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (f:a -> matrix t), (constant_size s f) ->
  ~ (is_empty s') -> (subset s' s) -> ((s_columns s' f) = (s_columns s f)).

Axiom set_s_rows_rem :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (1%Z < (cardinal s))%Z ->
  (constant_size s f) -> constant_size (remove (choose s) s) f.

Axiom set_s_rows_rem1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (1%Z < (cardinal s))%Z ->
  (constant_size s f) ->
  ((s_rows (remove (choose s) s) f) = (rows (f (choose s)))).

Axiom set_s_columns_rem :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (1%Z < (cardinal s))%Z ->
  (constant_size s f) -> constant_size (remove (choose s) s) f.

Axiom set_s_columns_rem1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (1%Z < (cardinal s))%Z ->
  (constant_size s f) ->
  ((s_columns (remove (choose s) s) f) = (columns (f (choose s)))).

Axiom set_s_rows_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (x:a), (0%Z < (cardinal s))%Z ->
  (constant_size s f) -> ((columns (f x)) = (s_columns s f)) ->
  ((rows (f x)) = (s_rows s f)) -> ((s_rows (add x s) f) = (s_rows s f)).

Axiom set_s_columns_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (x:a), (0%Z < (cardinal s))%Z ->
  (constant_size s f) -> ((columns (f x)) = (s_columns s f)) ->
  ((rows (f x)) = (s_rows s f)) ->
  ((s_columns (add x s) f) = (s_columns s f)).

Axiom set_s_rows_columns_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (x:a), (0%Z < (cardinal s))%Z ->
  (constant_size s f) -> ((columns (f x)) = (s_columns s f)) ->
  ((rows (f x)) = (s_rows s f)) ->
  ((s_columns (add x s) f) = (s_columns s f)).

Axiom set_s_rows_columns_add1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (x:a), (0%Z < (cardinal s))%Z ->
  (constant_size s f) -> ((columns (f x)) = (s_columns s f)) ->
  ((rows (f x)) = (s_rows s f)) -> ((s_rows (add x s) f) = (s_rows s f)).

Parameter mat_sum:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (a -> matrix t) -> matrix t.

Axiom mat_sum_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z -> ((cardinal s) = 1%Z) ->
  ((mat_sum s f) = (f (element s))).

Axiom mat_sum_def1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z -> ~ ((cardinal s) = 1%Z) ->
  ((mat_sum s f) =
   (add_mat (f (choose s)) (mat_sum (remove (choose s) s) f))).

Axiom mat_sum_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z -> ((rows (mat_sum s f)) = (s_rows s f)).

Axiom mat_sum_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z -> ((columns (mat_sum s f)) = (s_columns s f)).

Axiom mat_sum_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z -> forall (e:a), (mem e s) ->
  ((rows (f e)) = (s_rows s f)).

Axiom mat_sum_spec3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z -> forall (e:a), (mem e s) ->
  ((columns (f e)) = (s_columns s f)).

Axiom columns_mat_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (n:Z), ~ ((cardinal s) = 0%Z) ->
  (constant_size s f) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = n)) ->
  ((columns (mat_sum s f)) = n).

Axiom rows_mat_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (n:Z), ~ ((cardinal s) = 0%Z) ->
  (constant_size s f) -> (forall (e:a), (mem e s) -> ((rows (f e)) = n)) ->
  ((rows (mat_sum s f)) = n).

Axiom mat_sum_cardone :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), ((cardinal s) = 1%Z) ->
  ((mat_sum s f) = (f (element s))).

Axiom mat_sum_to_sum_pre :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (i:Z) (j:Z), (constant_size s f) ->
  (0%Z < (cardinal s))%Z -> ((0%Z <= i)%Z /\ (i < (s_rows s f))%Z) ->
  ((0%Z <= j)%Z /\ (j < (s_columns s f))%Z) ->
  ((get (mat_sum s f) i j) = (sum s (fun (e:a) => (get (f e) i j)))).

Axiom mat_sum_to_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((mat_sum s f) =
   (make_f (s_rows s f) (s_columns s f)
    (fun (i:Z) (j:Z) => (sum s (fun (e:a) => (get (f e) i j)))))).

Axiom mat_sum_value :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((mat_sum s f) =
   (make_f (s_rows s f) (s_columns s f)
    (fun (i:Z) (j:Z) => (sum s (fun (e:a) => (get (f e) i j)))))).

Axiom mat_sum_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (x:a), (0%Z < (cardinal s))%Z ->
  (constant_size s f) -> ((rows (f x)) = (s_rows s f)) ->
  ((columns (f x)) = (s_columns s f)) -> ~ (mem x s) ->
  ((mat_sum (add x s) f) = (add_mat (f x) (mat_sum s f))).

Axiom mat_sum_plus_one :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (1%Z < (cardinal s))%Z ->
  (constant_size s f) ->
  ((mat_sum s f) =
   (add_mat (f (choose s)) (mat_sum (remove (choose s) s) f))).

Axiom mat_sum_comp_pre :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> matrix t) (g:b -> matrix t) (i:Z) (j:Z),
  (constant_size s f) -> (constant_size s g) ->
  ((0%Z <= i)%Z /\ (i < (s_rows s f))%Z) ->
  ((0%Z <= j)%Z /\ (j < (s_columns s f))%Z) ->
  ((s_rows s f) = (s_rows s g)) -> ((s_columns s f) = (s_columns s g)) ->
  (0%Z < (cardinal s))%Z ->
  ((get (mat_sum s (fun (k:b) => (add_mat (f k) (g k)))) i j) =
   (get (add_mat (mat_sum s f) (mat_sum s g)) i j)).

Axiom mat_sum_comp :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> matrix t) (g:b -> matrix t),
  (constant_size s f) -> (constant_size s g) ->
  ((s_rows s f) = (s_rows s g)) -> ((s_columns s f) = (s_columns s g)) ->
  (0%Z < (cardinal s))%Z ->
  ((mat_sum s (fun (k:b) => (add_mat (f k) (g k)))) =
   (add_mat (mat_sum s f) (mat_sum s g))).

Axiom mat_sum_comp_rec :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> matrix t) (g:b -> matrix t),
  (constant_size s f) -> (constant_size s g) ->
  ((s_rows s f) = (s_rows s g)) -> ((s_columns s f) = (s_columns s g)) ->
  (0%Z < (cardinal s))%Z ->
  ((add_mat (mat_sum s f) (mat_sum s g)) =
   (mat_sum s (fun (k:b) => (add_mat (f k) (g k))))).

Axiom mat_sum_to_sum_fun :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (s':set b) (f:a -> b -> matrix t) (r:Z) (c:Z) (i:Z) (j:Z),
  (0%Z < (cardinal s))%Z -> (0%Z < (cardinal s'))%Z ->
  (forall (e:a), forall (e1:b), (mem e s) -> (mem e1 s') ->
   ((rows ((f e) e1)) = r)) ->
  (forall (e:a), forall (e1:b), (mem e s) -> (mem e1 s') ->
   ((columns ((f e) e1)) = c)) ->
  ((0%Z <= i)%Z /\ (i < r)%Z) -> ((0%Z <= j)%Z /\ (j < c)%Z) ->
  ((sum s (fun (e:a) => (get (mat_sum s' (f e)) i j))) =
   (sum s (fun (e:a) => (sum s' (fun (e1:b) => (get ((f e) e1) i j)))))).

Axiom mat_sum_to_sum_double_pre :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (s':set b) (f:a -> b -> matrix t) (r:Z) (c:Z) (i:Z) (j:Z),
  (forall (e:a) (e':b), (mem e s) -> (mem e' s') -> ((rows ((f e) e')) = r)) ->
  (forall (e:a) (e':b), (mem e s) -> (mem e' s') ->
   ((columns ((f e) e')) = c)) ->
  ((0%Z <= i)%Z /\ (i < r)%Z) -> ((0%Z <= j)%Z /\ (j < c)%Z) ->
  (0%Z < (cardinal s))%Z -> (0%Z < (cardinal s'))%Z ->
  ((get (mat_sum s (fun (e:a) => (mat_sum s' (f e)))) i j) =
   (sum s (fun (e:a) => (sum s' (fun (e':b) => (get ((f e) e') i j)))))).

Axiom mat_mult_sum_out_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (n:matrix t), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = (rows n))) ->
  (exists r:Z, forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  ((mat_mult (mat_sum s f) n) =
   (mat_sum s (fun (e:a) => (mat_mult (f e) n)))).

Parameter mat_sum_dim:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (a -> matrix t) -> Z -> 
  Z -> matrix t.

Axiom mat_sum_dim_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < r)%Z ->
  (0%Z < c)%Z -> (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ((cardinal s) = 0%Z) -> ((mat_sum_dim s f r c) = (make r c tzero)).

Axiom mat_sum_dim_def1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < r)%Z ->
  (0%Z < c)%Z -> (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ~ ((cardinal s) = 0%Z) -> ((mat_sum_dim s f r c) = (mat_sum s f)).

Axiom mat_sum_dim_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < r)%Z ->
  (0%Z < c)%Z -> (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  (0%Z < (cardinal s))%Z -> ((mat_sum_dim s f r c) = (mat_sum s f)).

Axiom mat_sum_dim_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < r)%Z ->
  (0%Z < c)%Z -> (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ((cardinal s) = 0%Z) -> ((mat_sum_dim s f r c) = (make r c tzero)).

Axiom mat_sum_dim_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < r)%Z ->
  (0%Z < c)%Z -> (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ((rows (mat_sum_dim s f r c)) = r).

Axiom mat_sum_dim_spec3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < r)%Z ->
  (0%Z < c)%Z -> (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ((columns (mat_sum_dim s f r c)) = c).

Axiom mat_sum_dim_to_mat_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), (0%Z < (cardinal s))%Z ->
  (0%Z < r)%Z -> (0%Z < c)%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ((mat_sum_dim s f r c) = (mat_sum s f)).

Axiom mat_sum_dim_to_make_zero :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (r:Z) (c:Z), ((cardinal s) = 0%Z) ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) -> (0%Z < r)%Z ->
  (0%Z < c)%Z -> ((mat_sum_dim s f r c) = (make r c tzero)).

Axiom mat_sum_dim_add :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (x:a) (r:Z) (c:Z),
  (0%Z <= (cardinal s))%Z -> ~ (mem x s) ->
  (forall (e:a), (mem e (add x s)) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e (add x s)) -> ((columns (f e)) = c)) ->
  (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((mat_sum_dim (add x s) f r c) = (add_mat (f x) (mat_sum_dim s f r c))).

Axiom mat_sum_scalar :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (a1:t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((mat_sum s (fun (k:a) => (infix_asdtdt a1 (f k)))) =
   (infix_asdtdt a1 (mat_sum s f))).

Axiom mat_sum_scalar_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (a1:t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((infix_asdtdt a1 (mat_sum s f)) =
   (mat_sum s (fun (k:a) => (infix_asdtdt a1 (f k))))).

Axiom mat_sum_const :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (x:matrix t), (0%Z < (cardinal s))%Z ->
  ((mat_sum s (fun (us:a) => x)) = (infix_asdtdt (i_to_t (cardinal s)) x)).

Axiom mat_sum_quot :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (x:matrix t), (0%Z < (cardinal s))%Z ->
  (x =
   (infix_asdtdt (infix_sldt tone (i_to_t (cardinal s)))
    (mat_sum s (fun (us:a) => x)))).

Axiom mat_sum_scalar_right :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (i:Z) (j:Z),
  (constant_size s f) -> (0%Z < (cardinal s))%Z ->
  ((0%Z <= i)%Z /\ (i < (s_rows s f))%Z) ->
  ((0%Z <= j)%Z /\ (j < (s_columns s f))%Z) ->
  ((infix_asdtdt (get (mat_sum s f) i j) m) =
   (mat_sum s (fun (k:a) => (infix_asdtdt (get (f k) i j) m)))).

Axiom mat_sum_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (g:a -> matrix t),
  (0%Z < (cardinal s))%Z -> (constant_size s f) ->
  (forall (a1:a), (mem a1 s) -> ((f a1) = (g a1))) ->
  ((mat_sum s f) = (mat_sum s g)).

Axiom mat_sum_eq_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (f:a -> matrix t) (g:a -> matrix t),
  (0%Z < (cardinal s))%Z -> (s = s') -> (constant_size s f) ->
  (forall (a1:a), (mem a1 s) -> ((f a1) = (g a1))) ->
  ((mat_sum s f) = (mat_sum s' g)).

Axiom mat_sum_eq_gen_int :
  forall (i1:Z) (i2:Z) (o1:Z) (o2:Z) (f:Z -> matrix t) (g:Z -> matrix t),
  (i1 < o1)%Z -> (i1 = o1) -> (i2 = o2) ->
  (constant_size (to_fset i1 o1) f) ->
  (forall (a:Z), (mem a (to_fset i1 o1)) -> ((f a) = (g a))) ->
  ((mat_sum (to_fset i1 o1) f) = (mat_sum (to_fset i2 o2) g)).

Axiom mat_sum_comp_eq :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> matrix t) (g:b -> matrix t) (h:b -> matrix t),
  (constant_size s f) -> (constant_size s g) -> (constant_size s h) ->
  (((s_rows s f) = (s_rows s g)) /\ ((s_rows s g) = (s_rows s h))) ->
  (((s_columns s f) = (s_columns s g)) /\
   ((s_columns s g) = (s_columns s h))) ->
  (0%Z < (cardinal s))%Z ->
  (forall (e:b), forall (i:Z) (j:Z), (mem e s) ->
   ((0%Z <= i)%Z /\ (i < (s_rows s f))%Z) ->
   ((0%Z <= j)%Z /\ (j < (s_columns s f))%Z) ->
   ((infix_pldt (get (f e) i j) (get (g e) i j)) = (get (h e) i j))) ->
  ((add_mat (mat_sum s f) (mat_sum s g)) = (mat_sum s h)).

Axiom mat_sum_dim_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (g:a -> matrix t) (r:Z) (c:Z),
  (0%Z < r)%Z -> (0%Z < c)%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  (forall (e:a), (mem e s) -> ((f e) = (g e))) ->
  ((mat_sum_dim s f r c) = (mat_sum_dim s g r c)).

Axiom constant_size_map :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:b -> matrix t) (s:set a) (t1:a -> b),
  (constant_size s (fun (a1:a) => (f (t1 a1)))) -> constant_size (map t1 s) f.

Axiom map_mat_sum :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:b -> matrix t) (s:set a) (t1:a -> b), (0%Z < (cardinal s))%Z ->
  (constant_size s (fun (a1:a) => (f (t1 a1)))) -> (p_injective t1 s) ->
  ((mat_sum (map t1 s) f) = (mat_sum s (fun (a1:a) => (f (t1 a1))))).

Axiom map_mat_sum_rec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:b -> matrix t) (s:set a) (t1:a -> b), (0%Z < (cardinal s))%Z ->
  (constant_size s (fun (a1:a) => (f (t1 a1)))) -> (p_injective t1 s) ->
  ((mat_sum s (fun (a1:a) => (f (t1 a1)))) = (mat_sum (map t1 s) f)).

Axiom mat_sum_id :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (0%Z < (cardinal s))%Z ->
  (constant_size s f) ->
  (constant_size (map f s) (fun (y0:matrix t) => y0)) -> (p_injective f s) ->
  ((mat_sum (map f s) (fun (y0:matrix t) => y0)) = (mat_sum s f)).

Parameter nonn_mat_subset:
  forall {a:Type} {a_WT:WhyType a}, (a -> matrix t) -> (set a) -> set a.

Parameter result7:
  forall {a:Type} {a_WT:WhyType a}, (a -> matrix t) -> (set a) -> a -> bool.

Axiom result_def7 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (e:a),
  (((result7 f s) e) = true) <->
  ~ (equal (f e) (make (s_rows s f) (s_columns s f) tzero)).

Axiom nonn_mat_subset_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) ->
  ((nonn_mat_subset f s) = (filter (result7 f s) s)).

Axiom nonn_mat_subset_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) ->
  subset (nonn_mat_subset f s) s.

Axiom nonn_mat_subset_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) -> forall (e:a),
  (mem e (nonn_mat_subset f s)) -> mem e s.

Axiom nonn_mat_subset_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) ->
  constant_size (nonn_mat_subset f s) f.

Axiom nonn_mat_subset_spec3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) ->
  ~ ((nonn_mat_subset f s) = (empty : set a)) ->
  ((s_rows (nonn_mat_subset f s) f) = (s_rows s f)).

Axiom nonn_mat_subset_spec4 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) ->
  ~ ((nonn_mat_subset f s) = (empty : set a)) ->
  ((s_columns (nonn_mat_subset f s) f) = (s_columns s f)).

Axiom mat_subset_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) -> forall (e:a),
  (mem e (nonn_mat_subset f s)) -> mem e s.

Axiom mat_subset_nonn_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (constant_size s f) -> forall (e:a),
  (mem e (nonn_mat_subset f s)) ->
  ~ ((f e) = (make (s_rows s f) (s_columns s f) tzero)).

Axiom nonn_mat_sum_cardzero :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (r:Z) (c:Z), ((cardinal s) = 0%Z) ->
  (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((mat_sum_dim s f r c) = (mat_sum_dim (nonn_mat_subset f s) f r c)).

Axiom nonn_mat_sum_cardone :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (r:Z) (c:Z), ((cardinal s) = 1%Z) ->
  (0%Z < r)%Z -> (0%Z < c)%Z -> ((rows (f (choose s))) = r) ->
  ((columns (f (choose s))) = c) ->
  ((mat_sum_dim s f r c) = (mat_sum_dim (nonn_mat_subset f s) f r c)).

Axiom mat_sum_null_but_maybe_one_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (e:a), (1%Z < (cardinal s))%Z ->
  (constant_size s f) -> (mem e s) ->
  (forall (e':a), (mem e' s) -> ~ (e = e') -> null_mat (f e')) ->
  ((mat_sum s f) = (f e)).

Axiom nonn_mat_sum_plus_one :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (r:Z) (c:Z), (1%Z < (cardinal s))%Z ->
  (0%Z < r)%Z -> (0%Z < c)%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ((mat_sum_dim (remove (choose s) s) f r c) =
   (mat_sum_dim (nonn_mat_subset f (remove (choose s) s)) f r c)) ->
  ((mat_sum_dim s f r c) = (mat_sum_dim (nonn_mat_subset f s) f r c)).

Axiom nonn_mat_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (r:Z) (c:Z), (0%Z < r)%Z ->
  (0%Z < c)%Z -> (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  ((mat_sum_dim s f r c) = (mat_sum_dim (nonn_mat_subset f s) f r c)).

Axiom mat_sum_map_map :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}
    {c:Type} {c_WT:WhyType c},
  forall (s1:set a) (s2:set b) (t1:a -> c) (t2:b -> c) (f:c -> matrix t),
  (0%Z < (cardinal s1))%Z -> (p_injective t1 s1) ->
  (constant_size s1 (fun (a1:a) => (f (t1 a1)))) ->
  (0%Z < (cardinal s2))%Z -> (p_injective t2 s2) ->
  (constant_size s2 (fun (a1:b) => (f (t2 a1)))) ->
  ((map t1 s1) = (map t2 s2)) ->
  ((mat_sum (map t1 s1) f) = (mat_sum (map t2 s2) f)).

Axiom mat_sum_disjoint_transitivity :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s1:set a) (s2:set a) (f:a -> matrix t),
  (constant_size s f) -> ((inter s1 s2) = (empty : set a)) ->
  ((union s1 s2) = s) -> (0%Z < (cardinal s1))%Z ->
  (0%Z < (cardinal s2))%Z ->
  ((add_mat (mat_sum s1 f) (mat_sum s2 f)) = (mat_sum s f)).

Axiom mat_sum_null :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a), (1%Z < (cardinal s))%Z ->
  (constant_size s f) ->
  (forall (e:a), (mem e s) -> forall (i:Z) (j:Z), (valid_index (f e) i j) ->
   ((get (f e) i j) = tzero)) ->
  forall (i:Z) (j:Z), (valid_index (mat_sum s f) i j) ->
  ((get (mat_sum s f) i j) = tzero).

Axiom mat_sum_null_b :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (r:Z) (c:Z), (1%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> ((rows (f e)) = r)) ->
  (forall (e:a), (mem e s) -> ((columns (f e)) = c)) ->
  (forall (e:a), (mem e s) -> forall (i:Z) (j:Z), (valid_index (f e) i j) ->
   ((get (f e) i j) = tzero)) ->
  forall (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> ((get (mat_sum s f) i j) = tzero).

Axiom map_add_mat_sum_t :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s:set a) (s':set b) (f:b -> matrix t) (injz:a -> b) (injo:a -> b),
  (constant_size s' f) -> (0%Z < (cardinal s))%Z ->
  ((inter (map injz s) (map injo s)) = (empty : set b)) ->
  ((union (map injz s) (map injo s)) = s') -> (p_injective injo s) ->
  (p_injective injz s) ->
  ((mat_sum s (fun (e:a) => (add_mat (f (injz e)) (f (injo e))))) =
   (mat_sum s' f)).

Axiom map_add_mat_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s1:set a) (s2:set a) (s':set a) (f:a -> matrix t)
    (g:a -> matrix t) (h:a -> matrix t),
  (constant_size s' h) -> (constant_size s f) -> (constant_size s g) ->
  (((s_rows s' h) = (s_rows s f)) /\ ((s_rows s f) = (s_rows s g))) ->
  (((s_columns s' h) = (s_columns s f)) /\
   ((s_columns s f) = (s_columns s g))) ->
  (0%Z < (cardinal s))%Z -> (p_injective f s) -> (p_injective g s) ->
  (p_injective h s') -> ((map f s) = (map h s1)) ->
  ((map g s) = (map h s2)) -> ((inter s1 s2) = (empty : set a)) ->
  ((union s1 s2) = s') ->
  ((mat_sum s (fun (e:a) => (add_mat (f e) (g e)))) =
   (mat_sum s' (fun (e:a) => (h e)))).

Parameter inv_func:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a -> b) ->
  (set a) -> (set b) -> b -> a.

Axiom inv_func_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b) (e':b), (p_bijective f s s') ->
  (mem e' s') ->
  ((inv_func f s s' e') =
   (element (filter (fun (e:a) => (indic_bool (f e) e')) s))).

Axiom inv_func_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b) (e':b), (p_bijective f s s') ->
  (mem e' s') -> mem (inv_func f s s' e') s.

Axiom inv_func_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b) (e':b), (p_bijective f s s') ->
  (mem e' s') -> ((f (inv_func f s s' e')) = e').

Axiom inv_rec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b) (e:a), (p_bijective f s s') ->
  (mem e s) -> ((inv_func f s s' (f e)) = e).

Parameter inv_:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a -> b) ->
  (set a) -> (set b) -> b -> a.

Axiom inv__def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b) (e:b), (p_bijective f s s') ->
  (mem e s') -> ((inv_ f s s' e) = (inv_func f s s' e)).

Axiom inv__spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b) (e:b), (p_bijective f s s') ->
  (mem e s') -> mem (inv_ f s s' e) s.

Axiom inv__spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b) (e:b), (p_bijective f s s') ->
  (mem e s') -> ((f (inv_ f s s' e)) = e).

Axiom inv_bijective :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  p_bijective
  ((((fun (y0:a -> b) (y1:set a) (y2:set b) (y3:b) => (inv_ y0 y1 y2 y3)) f)
    s)
   s')
  s' s.

Axiom set_bijective_inv :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:b -> a) (s:set a) (b1:b), (mem b1 (map f s)) ->
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  (forall (e':b), (mem e' (map f s)) -> (mem (g e') s) /\ ((f (g e')) = e')) ->
  p_bijective f s (map f s).

Axiom set_bijective_inv1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:b -> a) (s:set a) (b1:b), (mem b1 (map f s)) ->
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  (forall (e':b), (mem e' (map f s)) -> (mem (g e') s) /\ ((f (g e')) = e')) ->
  ((inv_func f s (map f s) b1) = (g b1)).

Axiom set_bij_inv :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:b -> a) (s:set a),
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  (forall (e':b), (mem e' (map f s)) -> (mem (g e') s) /\ ((f (g e')) = e')) ->
  p_bijective f s (map f s).

Axiom set_bij_inv1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:b -> a) (s:set a),
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  (forall (e':b), (mem e' (map f s)) -> (mem (g e') s) /\ ((f (g e')) = e')) ->
  p_bijective g (map f s) s.

Axiom set_bij_inv2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (g:b -> a) (s:set a),
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) -> ~ (e = e') ->
   ~ ((f e) = (f e'))) ->
  (forall (e':b), (mem e' (map f s)) -> (mem (g e') s) /\ ((f (g e')) = e')) ->
  forall (b1:b), (mem b1 (map f s)) -> ((inv_func f s (map f s) b1) = (g b1)).

Parameter inv_f:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a -> b) ->
  (set a) -> (set b) -> b -> a.

Axiom inv_f_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  forall (e:b), (mem e s') -> mem ((inv_f f s s') e) s.

Axiom inv_f_spec1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  forall (e:b), (mem e s') -> ((f ((inv_f f s s') e)) = e).

Axiom inv_f_spec2 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (s:set a) (s':set b), (p_bijective f s s') ->
  p_bijective (inv_f f s s') s' s.

Axiom bitvec : Type.
Parameter bitvec_WhyType : WhyType bitvec.
Existing Instance bitvec_WhyType.

Parameter value: bitvec -> Z -> Z.

Parameter length: bitvec -> Z.

Axiom bitvec'invariant : forall (self:bitvec), (0%Z <= (length self))%Z.

Axiom bitvec'invariant1 :
  forall (self:bitvec), forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (length self))%Z) -> (0%Z <= ((value self) i))%Z.

Axiom bitvec'invariant2 :
  forall (self:bitvec), forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (length self))%Z) -> (((value self) i) < 2%Z)%Z.

Axiom bitvec'invariant3 :
  forall (self:bitvec), forall (i:Z), ~ (0%Z <= i)%Z ->
  (((value self) i) = 0%Z).

Axiom bitvec'invariant4 :
  forall (self:bitvec), forall (i:Z), ~ (i < (length self))%Z ->
  (((value self) i) = 0%Z).

(* Why3 assumption *)
Definition bvlength (f:Z -> Z) (i:Z) : Prop :=
  forall (k:Z), ((0%Z <= k)%Z /\ (k < i)%Z) ->
  (0%Z <= (f k))%Z /\ ((f k) < 2%Z)%Z.

Axiom binary_mult :
  forall (a:Z) (b:Z),
  ((int.EuclideanDivision.mod1 (a * b)%Z 2%Z) =
   ((int.EuclideanDivision.mod1 a 2%Z) *
    (int.EuclideanDivision.mod1 b 2%Z))%Z).

Axiom getbv_spec : forall (a:bitvec), binary (value a).

Axiom getbv_spec1 : True.

Parameter to_bool: Z -> bool.

Axiom to_bool_def :
  forall (i:Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) -> ~ (i = 0%Z) ->
  ((to_bool i) = true).

Axiom to_bool_def1 :
  forall (i:Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) -> (i = 0%Z) ->
  ((to_bool i) = false).

Axiom getbv_bound : forall (bv:bitvec) (i:Z), (0%Z <= ((value bv) i))%Z.

Axiom getbv_bound1 : forall (bv:bitvec) (i:Z), (((value bv) i) < 2%Z)%Z.

Axiom getbv_eq :
  forall (bvx:bitvec) (bvy:bitvec) (i:Z), (bvx = bvy) ->
  (((value bvx) i) = ((value bvy) i)).

Axiom getbv_eq_gen :
  forall (bvx:bitvec) (bvy:bitvec) (i:Z) (j:Z), (bvx = bvy) -> (i = j) ->
  (((value bvx) i) = ((value bvy) j)).

Parameter setbv: (Z -> Z) -> Z -> Z -> Z -> Z.

Axiom setbv_def :
  forall (bv:Z -> Z) (i:Z) (j:Z) (k:Z),
  ((k = i) -> (((setbv bv i j) k) = j)) /\
  (~ (k = i) -> (((setbv bv i j) k) = (bv k))).

Axiom setbv_spec :
  forall (bv:Z -> Z) (i:Z) (j:Z), forall (k:Z), ~ (k = i) ->
  (((setbv bv i j) k) = (bv k)).

Axiom setbv_spec1 : forall (bv:Z -> Z) (i:Z) (j:Z), (((setbv bv i j) i) = j).

Parameter setbv_int: (Z -> Z) -> (Z -> Z) -> Z -> Z -> Z -> Z.

Axiom setbv_int_def :
  forall (bv1:Z -> Z) (bv2:Z -> Z) (i:Z) (j:Z) (k:Z),
  (((i < k)%Z /\ (k <= j)%Z) ->
   (((setbv_int bv1 bv2 i j) k) = (bv2 (k - i)%Z))) /\
  (~ ((i < k)%Z /\ (k <= j)%Z) -> (((setbv_int bv1 bv2 i j) k) = (bv1 k))).

Axiom setbv_int_spec :
  forall (bv1:Z -> Z) (bv2:Z -> Z) (i:Z) (j:Z), forall (k:Z),
  ((i < k)%Z /\ (k <= j)%Z) ->
  (((setbv_int bv1 bv2 i j) k) = (bv2 (k - i)%Z)).

Axiom setbv_int_spec1 :
  forall (bv1:Z -> Z) (bv2:Z -> Z) (i:Z) (j:Z), forall (k:Z), (k <= i)%Z ->
  (((setbv_int bv1 bv2 i j) k) = (bv1 k)).

Axiom setbv_int_spec2 :
  forall (bv1:Z -> Z) (bv2:Z -> Z) (i:Z) (j:Z), forall (k:Z), (j < k)%Z ->
  (((setbv_int bv1 bv2 i j) k) = (bv1 k)).

Axiom set_bvlength :
  forall (bv:bitvec) (i:Z),
  (forall (k:Z), ((1%Z <= k)%Z /\ (k < i)%Z) ->
   (0%Z <= ((value bv) k))%Z /\ (((value bv) k) < 2%Z)%Z) ->
  bvlength (value bv) i.

Axiom set_flength :
  forall (f:Z -> Z) (i:Z),
  (forall (k:Z), ((0%Z <= k)%Z /\ (k < i)%Z) ->
   (0%Z <= (f k))%Z /\ ((f k) < 2%Z)%Z) ->
  bvlength f i.

Axiom get_bvlength :
  forall (f:Z -> Z) (i:Z), (bvlength f i) -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < i)%Z) -> (0%Z <= (f k))%Z.

Axiom get_bvlength1 :
  forall (f:Z -> Z) (i:Z), (bvlength f i) -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < i)%Z) -> ((f k) < 2%Z)%Z.

Axiom set_bv_to :
  forall (f:Z -> Z) (i:Z), (0%Z < i)%Z ->
  (forall (j:Z), ((0%Z <= j)%Z /\ (j < i)%Z) ->
   (0%Z <= (f j))%Z /\ ((f j) <= 1%Z)%Z) ->
  bvlength f i.

Axiom set_in_range_val :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
  (0%Z <= ((value bv) i))%Z.

Axiom set_in_range_val1 :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
  (((value bv) i) < 2%Z)%Z.

Axiom bvlengthm :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
  bvlength (value bv) i.

(* Why3 assumption *)
Definition in_range (bv:bitvec) (r:Z) : Prop :=
  (0%Z <= r)%Z /\ (r < (length bv))%Z.

Axiom binary_bv :
  forall (bv:bitvec) (i:Z), (in_range bv i) -> (0%Z <= ((value bv) i))%Z.

Axiom binary_bv1 :
  forall (bv:bitvec) (i:Z), (in_range bv i) -> (((value bv) i) <= 1%Z)%Z.

Axiom equal_bv :
  forall (m:bitvec) (n:bitvec), (m = n) -> ((length m) = (length n)).

Axiom equal_bv1 :
  forall (m:bitvec) (n:bitvec), (m = n) -> forall (i:Z), (in_range m i) ->
  (((value m) i) = ((value n) i)).

Axiom equal_bv2 :
  forall (m:bitvec) (n:bitvec),
  (((length m) = (length n)) /\
   forall (i:Z), (in_range m i) -> (((value m) i) = ((value n) i))) ->
  (m = n).

Axiom set_equal_bv :
  forall (bv:bitvec) (bv':bitvec), ((length bv) = (length bv')) ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
   (((value bv) i) = ((value bv') i))) ->
  (bv = bv').

Axiom get_equal_bv :
  forall (bv:bitvec) (bv':bitvec), (bv = bv') -> ((length bv) = (length bv')).

Axiom get_equal_bv1 :
  forall (bv:bitvec) (bv':bitvec), (bv = bv') -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv))%Z) -> (((value bv) i) = ((value bv') i)).

Parameter make_bv: (Z -> Z) -> Z -> bitvec.

Axiom make_bv_spec :
  forall (f:Z -> Z) (s:Z),
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
   (0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) ->
  (0%Z <= s)%Z -> ((length (make_bv f s)) = s).

Axiom make_bv_spec1 :
  forall (f:Z -> Z) (s:Z),
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
   (0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) ->
  (0%Z <= s)%Z -> forall (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
  (((value (make_bv f s)) i) = (f i)).

Axiom make_bv_spec2 :
  forall (f:Z -> Z) (s:Z),
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
   (0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) ->
  (0%Z <= s)%Z -> forall (i:Z), ~ (0%Z <= i)%Z ->
  (((value (make_bv f s)) i) = 0%Z).

Axiom make_bv_spec3 :
  forall (f:Z -> Z) (s:Z),
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
   (0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) ->
  (0%Z <= s)%Z -> forall (i:Z), ~ (i < s)%Z ->
  (((value (make_bv f s)) i) = 0%Z).

Parameter make_bv_m: (Z -> Z) -> Z -> bitvec.

Axiom make_bv_m_def :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z ->
  ((make_bv_m f s) =
   (make_bv (fun (k:Z) => (int.EuclideanDivision.mod1 (f k) 2%Z)) s)).

Axiom make_bv_m_spec :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> ((length (make_bv_m f s)) = s).

Axiom make_bv_m_spec1 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> forall (i:Z),
  bvlength (value (make_bv_m f s)) i.

Axiom make_bv_m_spec2 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < s)%Z) ->
  (((value (make_bv_m f s)) k) = (int.EuclideanDivision.mod1 (f k) 2%Z)).

Axiom make_bv_m_spec3 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> forall (k:Z), ~ (0%Z <= k)%Z ->
  (((value (make_bv_m f s)) k) = 0%Z).

Axiom make_bv_m_spec4 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> forall (k:Z), ~ (k < s)%Z ->
  (((value (make_bv_m f s)) k) = 0%Z).

Axiom assert_make_bv_no_bound :
  forall (f:Z -> Z) (s:Z) (i:Z),
  (forall (i1:Z), ((0%Z <= i1)%Z /\ (i1 < s)%Z) ->
   (0%Z <= (f i1))%Z /\ ((f i1) < 2%Z)%Z) ->
  ((1%Z <= i)%Z /\ (i <= s)%Z) -> (((value (make_bv f 0%Z)) i) = 0%Z).

Axiom make_bv_length :
  forall (f:Z -> Z) (s:Z),
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
   (0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) ->
  (0%Z <= s)%Z -> ((length (make_bv f s)) = s).

Axiom assert_make_bv :
  forall (f:Z -> Z) (s:Z) (i:Z),
  (forall (i1:Z), ((0%Z <= i1)%Z /\ (i1 < s)%Z) ->
   (0%Z <= (f i1))%Z /\ ((f i1) < 2%Z)%Z) ->
  (0%Z <= s)%Z ->
  (((0%Z <= i)%Z /\ (i < s)%Z) -> (((value (make_bv f s)) i) = (f i))) /\
  (~ ((0%Z <= i)%Z /\ (i < s)%Z) -> (((value (make_bv f s)) i) = 0%Z)).

Axiom assert_make_m :
  forall (f:Z -> Z) (s:Z) (i:Z), (0%Z <= s)%Z ->
  (((0%Z <= i)%Z /\ (i < s)%Z) ->
   (((value (make_bv_m f s)) i) = (int.EuclideanDivision.mod1 (f i) 2%Z))) /\
  (~ ((0%Z <= i)%Z /\ (i < s)%Z) -> (((value (make_bv_m f s)) i) = 0%Z)).

Axiom assert_make_bv_b :
  forall (f:Z -> Z) (s:Z) (i:Z),
  (forall (i1:Z), ((0%Z <= i1)%Z /\ (i1 < s)%Z) ->
   (0%Z <= (f i1))%Z /\ ((f i1) < 2%Z)%Z) ->
  ((0%Z <= i)%Z /\ (i < s)%Z) -> (((value (make_bv f s)) i) = (f i)).

Axiom assert_make_m_b :
  forall (f:Z -> Z) (s:Z) (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
  (0%Z <= s)%Z ->
  (((value (make_bv_m f s)) i) = (int.EuclideanDivision.mod1 (f i) 2%Z)).

Axiom make_m_bv_length :
  forall (f:Z -> Z) (s:Z) (i:Z), (0%Z <= s)%Z ->
  bvlength (value (make_bv_m f s)) i.

Axiom make_m_length :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> ((length (make_bv_m f s)) = s).

Axiom set_equal_bv_make :
  forall (f:Z -> Z) (g:Z -> Z) (s:Z),
  (forall (i:Z), (0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) -> (0%Z <= s)%Z ->
  (forall (i:Z), ((f i) = (g i))) -> ((make_bv f s) = (make_bv g s)).

Axiom set_equal_bv_m_make :
  forall (f:Z -> Z) (g:Z -> Z) (s:Z), (0%Z <= s)%Z ->
  (forall (i:Z),
   ((int.EuclideanDivision.mod1 (f i) 2%Z) =
    (int.EuclideanDivision.mod1 (g i) 2%Z))) ->
  ((make_bv_m f s) = (make_bv_m g s)).

Axiom make_bv_itself :
  forall (x:bitvec) (n:Z), ((length x) = n) ->
  ((make_bv (fun (i:Z) => ((value x) i)) n) = x).

Parameter head: bitvec -> Z.

Axiom head_def :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  ((head bv) = ((value bv) 0%Z)).

Axiom head_spec :
  forall (bv:bitvec), (1%Z <= (length bv))%Z -> (0%Z <= (head bv))%Z.

Axiom head_spec1 :
  forall (bv:bitvec), (1%Z <= (length bv))%Z -> ((head bv) <= 1%Z)%Z.

Parameter makes_bv: (Z -> Z) -> Z -> bitvec.

Parameter result8: (Z -> Z) -> Z -> Z.

Axiom result_def8 :
  forall (f:Z -> Z) (i:Z),
  ((let q1_ := f i in (0%Z <= q1_)%Z /\ (q1_ < 2%Z)%Z) ->
   (((result8 f) i) = (f i))) /\
  (~ (let q1_ := f i in (0%Z <= q1_)%Z /\ (q1_ < 2%Z)%Z) ->
   (((result8 f) i) = 0%Z)).

Axiom makes_bv_def :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z ->
  ((makes_bv f s) = (make_bv (result8 f) s)).

Axiom makes_bv_spec :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> ((length (makes_bv f s)) = s).

Axiom makes_bv_spec1 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < s)%Z) -> ((0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) ->
  (((value (makes_bv f s)) i) = (f i)).

Axiom makes_bv_spec2 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < s)%Z) ->
   (0%Z <= (f i))%Z /\ ((f i) < 2%Z)%Z) ->
  ((makes_bv f s) = (make_bv f s)).

Axiom makes_bv_spec3 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> forall (i:Z), ~ (0%Z <= i)%Z ->
  (((value (makes_bv f s)) i) = 0%Z).

Axiom makes_bv_spec4 :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> forall (i:Z), ~ (i < s)%Z ->
  (((value (makes_bv f s)) i) = 0%Z).

Axiom assert_makes_bv_c :
  forall (f:Z -> Z) (s:Z) (i:Z),
  (forall (i1:Z), ((0%Z <= i1)%Z /\ (i1 < s)%Z) ->
   (0%Z <= (f i1))%Z /\ ((f i1) < 2%Z)%Z) ->
  (0%Z <= s)%Z ->
  (((0%Z <= i)%Z /\ (i < s)%Z) -> (((value (makes_bv f s)) i) = (f i))) /\
  (~ ((0%Z <= i)%Z /\ (i < s)%Z) -> (((value (makes_bv f s)) i) = 0%Z)).

Axiom assert_makes_bv_b :
  forall (f:Z -> Z) (s:Z) (i:Z),
  (forall (i1:Z), ((0%Z <= i1)%Z /\ (i1 < s)%Z) ->
   (0%Z <= (f i1))%Z /\ ((f i1) < 2%Z)%Z) ->
  (0%Z <= s)%Z -> ((0%Z <= i)%Z /\ (i < s)%Z) ->
  (((value (makes_bv f s)) i) = (f i)).

Axiom assert_makes_bv :
  forall (f:Z -> Z) (s:Z) (i:Z),
  (forall (i1:Z), ((0%Z <= i1)%Z /\ (i1 < s)%Z) ->
   (0%Z <= (f i1))%Z /\ ((f i1) < 2%Z)%Z) ->
  (0%Z <= s)%Z ->
  ((((0%Z <= i)%Z /\ (i < s)%Z) /\ (0%Z <= (f i))%Z) ->
   (((value (makes_bv f s)) i) = (f i))) /\
  (~ (((0%Z <= i)%Z /\ (i < s)%Z) /\ (0%Z <= (f i))%Z) ->
   (((value (makes_bv f s)) i) = 0%Z)).

Axiom makes_bv_length :
  forall (f:Z -> Z) (s:Z), (0%Z <= s)%Z -> ((length (makes_bv f s)) = s).

Parameter tail: bitvec -> bitvec.

Axiom tail_def :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  ((tail bv) =
   (make_bv (fun (i:Z) => ((value bv) (i + 1%Z)%Z)) ((length bv) - 1%Z)%Z)).

Axiom tail_spec :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  ((length (tail bv)) = ((length bv) - 1%Z)%Z).

Axiom tail_spec1 :
  forall (bv:bitvec), (1%Z <= (length bv))%Z -> forall (i:Z),
  (in_range (tail bv) i) ->
  (((value (tail bv)) i) = ((value bv) (i + 1%Z)%Z)).

Parameter concat_l: bitvec -> Z -> bitvec.

Parameter result9: bitvec -> Z -> Z -> Z.

Axiom result_def9 :
  forall (bv:bitvec) (i:Z) (k:Z),
  ((k = 0%Z) -> (((result9 bv i) k) = i)) /\
  (~ (k = 0%Z) -> (((result9 bv i) k) = ((value bv) (k - 1%Z)%Z))).

Axiom concat_l_def :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i <= 1%Z)%Z) ->
  ((concat_l bv i) = (make_bv (result9 bv i) ((length bv) + 1%Z)%Z)).

Axiom concat_l_spec :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i <= 1%Z)%Z) ->
  ((length (concat_l bv i)) = ((length bv) + 1%Z)%Z).

Axiom concat_l_spec1 :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i <= 1%Z)%Z) ->
  (((value (concat_l bv i)) 0%Z) = i).

Axiom concat_l_spec2 :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i <= 1%Z)%Z) -> forall (j:Z),
  (in_range bv j) -> (((value (concat_l bv i)) (j + 1%Z)%Z) = ((value bv) j)).

Axiom concat_l_value :
  forall (bv:bitvec) (i:Z) (k:Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((k = 0%Z) -> (((value (concat_l bv i)) k) = i)) /\
  (~ (k = 0%Z) ->
   (((0%Z < k)%Z /\ (k <= ((length bv) + 1%Z)%Z)%Z) ->
    (((value (concat_l bv i)) k) = ((value bv) (k - 1%Z)%Z))) /\
   (~ ((0%Z < k)%Z /\ (k <= ((length bv) + 1%Z)%Z)%Z) ->
    (((value (concat_l bv i)) k) = 0%Z))).

Axiom concat_l_value_b :
  forall (bv:bitvec) (i:Z) (k:Z),
  ((0%Z <= k)%Z /\ (k < ((length bv) + 1%Z)%Z)%Z) ->
  ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((k = 0%Z) -> (((value (concat_l bv i)) k) = i)) /\
  (~ (k = 0%Z) -> (((value (concat_l bv i)) k) = ((value bv) (k - 1%Z)%Z))).

Axiom concat_ht :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  (bv = (concat_l (tail bv) (head bv))).

Axiom concat_ht_union :
  forall (bv:bitvec), (2%Z <= (length bv))%Z ->
  ~ (bv = (concat_l (tail bv) 0%Z)) -> (bv = (concat_l (tail bv) 1%Z)).

Parameter result10: bitvec -> Z -> Z.

Axiom result_def10 :
  forall (bv:bitvec) (k:Z),
  ((in_range bv k) ->
   (((result10 bv) k) =
    (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)) /\
  (~ (in_range bv k) -> (((result10 bv) k) = 1%Z)).

(* Why3 assumption *)
Definition bv_to_int (bv:bitvec) : Z :=
  ind_isum (result10 bv) 0%Z (length bv).

Axiom bv_to_int_spec :
  forall (bv:bitvec),
  ((bv_to_int bv) =
   (ind_isum
    (fun (k:Z) =>
     (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
    0%Z (length bv))).

Axiom bv_to_int_spec1 : forall (bv:bitvec), (0%Z <= (bv_to_int bv))%Z.

Axiom bv_to_int_eq :
  forall (bv1:bitvec) (bv2:bitvec), (bv1 = bv2) ->
  ((bv_to_int bv1) = (bv_to_int bv2)).

Axiom bv_to_int_sum :
  forall (bv:bitvec),
  ((bv_to_int bv) =
   (ind_isum
    (fun (k:Z) =>
     (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
    0%Z (length bv))).

Axiom bv_to_int_sum_opp :
  forall (bv:bitvec),
  ((-(bv_to_int bv))%Z =
   (ind_isum
    (fun (k:Z) =>
     ((-((value bv) k))%Z * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
    0%Z (length bv))).

Axiom bv_to_int_onebit :
  forall (bv:bitvec), ((length bv) = 1%Z) ->
  ((bv_to_int bv) = ((value bv) 0%Z)).

Axiom ind_isum_bv_rev :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i <= (length bv))%Z) ->
  ((ind_isum
    (fun (l:Z) =>
     (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
    i (length bv))
   =
   (ind_isum
    (fun (l:Z) =>
     (((value bv) (((length bv) - 1%Z)%Z - l)%Z) * (power 2%Z l))%Z)
    0%Z ((length bv) - i)%Z)).

Axiom ind_isum_bin_rev :
  forall (f:Z -> Z) (n:Z) (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) -> (binary f) ->
  ((ind_isum (fun (l:Z) => ((f l) * (power 2%Z ((n - 1%Z)%Z - l)%Z))%Z) i n)
   =
   (ind_isum (fun (l:Z) => ((f ((n - 1%Z)%Z - l)%Z) * (power 2%Z l))%Z) 0%Z
    (n - i)%Z)).

Axiom ind_isum_bin_rev_z :
  forall (f:Z -> Z) (n:Z), (0%Z <= n)%Z -> (binary f) ->
  ((ind_isum (fun (l:Z) => ((f l) * (power 2%Z ((n - 1%Z)%Z - l)%Z))%Z) 0%Z
    n)
   =
   (ind_isum (fun (l:Z) => ((f ((n - 1%Z)%Z - l)%Z) * (power 2%Z l))%Z) 0%Z
    n)).

Axiom bv_to_int_sum_rev :
  forall (bv:bitvec),
  ((ind_isum
    (fun (k:Z) =>
     (((value bv) (((length bv) - 1%Z)%Z - k)%Z) * (power 2%Z k))%Z)
    0%Z (length bv))
   = (bv_to_int bv)).

Axiom ind_isum_bv_bound_growing :
  forall (bv:bitvec) (i:Z), ((0%Z < i)%Z /\ (i < (length bv))%Z) ->
  ((ind_isum (fun (l:Z) => (((value bv) l) * (power 2%Z l))%Z) 0%Z i) <
   (power 2%Z i))%Z.

Axiom ind_isum_bv_bound :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
  ((ind_isum
    (fun (l:Z) =>
     (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
    i (length bv))
   < (power 2%Z ((length bv) - i)%Z))%Z.

Axiom ind_isum_bin_bound :
  forall (f:Z -> Z) (n:Z) (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) -> (binary f) ->
  ((ind_isum (fun (l:Z) => ((f l) * (power 2%Z ((n - 1%Z)%Z - l)%Z))%Z) i n)
   < (power 2%Z (n - i)%Z))%Z.

Axiom bv_to_int_bound :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  ((bv_to_int bv) < (power 2%Z (length bv)))%Z.

Parameter is_a_ket: (matrix t) -> Prop.

Axiom Is_a_ket : forall (m:matrix t), (is_a_ket m) -> ((columns m) = 1%Z).

Axiom Is_a_ket1 :
  forall (m:matrix t), (is_a_ket m) ->
  exists s:Z, (0%Z <= s)%Z /\ ((rows m) = (power 2%Z s)).

Axiom Is_a_ket2 :
  forall (m:matrix t),
  (((columns m) = 1%Z) /\
   exists s:Z, (0%Z <= s)%Z /\ ((rows m) = (power 2%Z s))) ->
  is_a_ket m.

Parameter xor_i: Z -> Z -> Z.

Axiom xor_i_def :
  forall (i:Z) (i':Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((0%Z <= i')%Z /\ (i' < 2%Z)%Z) -> (i = 0%Z) -> ((xor_i i i') = i').

Axiom xor_i_def1 :
  forall (i:Z) (i':Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((0%Z <= i')%Z /\ (i' < 2%Z)%Z) -> ~ (i = 0%Z) ->
  ((xor_i i i') = (1%Z - i')%Z).

Axiom xor_i_spec :
  forall (i:Z) (i':Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((0%Z <= i')%Z /\ (i' < 2%Z)%Z) -> (i = 0%Z) -> (i' = 0%Z) ->
  ((xor_i i i') = 0%Z).

Axiom xor_i_spec1 :
  forall (i:Z) (i':Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((0%Z <= i')%Z /\ (i' < 2%Z)%Z) -> (i = 0%Z) -> (i' = 1%Z) ->
  ((xor_i i i') = 1%Z).

Axiom xor_i_spec2 :
  forall (i:Z) (i':Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((0%Z <= i')%Z /\ (i' < 2%Z)%Z) -> (i = 1%Z) -> (i' = 0%Z) ->
  ((xor_i i i') = 1%Z).

Axiom xor_i_spec3 :
  forall (i:Z) (i':Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((0%Z <= i')%Z /\ (i' < 2%Z)%Z) -> (i = 1%Z) -> (i' = 1%Z) ->
  ((xor_i i i') = 0%Z).

(* Why3 assumption *)
Definition is_a_ket_l (m:matrix t) (l:Z) : Prop :=
  (0%Z <= l)%Z /\ (((columns m) = 1%Z) /\ ((rows m) = (power 2%Z l))).

Axiom ket_l_rows :
  forall (m:matrix t) (l:Z), (is_a_ket_l m l) -> ((rows m) = (power 2%Z l)).

Axiom ket_l_columns :
  forall (m:matrix t), (exists l:Z, is_a_ket_l m l) -> ((columns m) = 1%Z).

Parameter ket_length: (matrix t) -> Z.

Axiom ket_length_def :
  forall (m:matrix t), (is_a_ket m) ->
  ((ket_length m) = ((binary_length (rows m)) - 1%Z)%Z).

Axiom ket_length_spec :
  forall (m:matrix t), (is_a_ket m) -> (0%Z <= (ket_length m))%Z.

Axiom ket_length_spec1 :
  forall (m:matrix t), (is_a_ket m) ->
  ((rows m) = (power 2%Z (ket_length m))).

Parameter get_ket_bv: (matrix t) -> bitvec -> t.

Axiom get_ket_bv_def :
  forall (x:matrix t) (bv:bitvec), (is_a_ket_l x (length bv)) ->
  ((get_ket_bv x bv) = (get x (bv_to_int bv) 0%Z)).

Axiom assert_make_ket :
  forall (r:Z) (c:Z) (f:Z -> Z -> t) (i:Z), (c = 1%Z) ->
  ((0%Z <= i)%Z /\ (i < r)%Z) -> ((get (make_f r c f) i 0%Z) = ((f i) 0%Z)).

Axiom mat_mult_ket_l :
  forall (m:matrix t) (k:matrix t) (n:Z), (is_a_ket_l k n) ->
  ((rows m) = (power 2%Z n)) -> ((columns m) = (power 2%Z n)) ->
  is_a_ket_l (mat_mult m k) n.

Axiom ket_kronecker_values :
  forall (m:matrix t) (n:matrix t) (i:Z), (is_a_ket m) -> (is_a_ket n) ->
  ((0%Z <= i)%Z /\ (i < ((rows m) * (rows n))%Z)%Z) ->
  ((get (kronecker m n) i 0%Z) =
   (infix_asdt (get m (int.EuclideanDivision.div i (rows n)) 0%Z)
    (get n (int.EuclideanDivision.mod1 i (rows n)) 0%Z))).

Axiom ket_l_to_ket :
  forall (m:matrix t) (l:Z), (is_a_ket_l m l) -> is_a_ket m.

Axiom ket_l_to_ket1 :
  forall (m:matrix t) (l:Z), (is_a_ket_l m l) -> ((ket_length m) = l).

Axiom ket_l_to_ket_gen :
  forall (m:matrix t), (exists l:Z, is_a_ket_l m l) -> is_a_ket m.

Axiom ket_to_ket_l :
  forall (m:matrix t), (is_a_ket m) -> is_a_ket_l m (ket_length m).

Axiom set_ket_valid_index :
  forall (m:matrix t) (i:Z), (is_a_ket m) ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) -> valid_index m i 0%Z.

Axiom ket_to_ket_l_l :
  forall (m:matrix t) (i:Z), (is_a_ket m) -> ((ket_length m) = i) ->
  is_a_ket_l m i.

Axiom set_constant_size_ket :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t),
  (forall (e:a), (mem e s) -> is_a_ket (f e)) ->
  (forall (e:a) (e':a), (mem e s) -> (mem e' s) ->
   ((ket_length (f e)) = (ket_length (f e')))) ->
  constant_size s f.

Parameter ket_norm_l: (matrix t) -> Z -> t.

Axiom ket_norm_l_def :
  forall (x:matrix t) (n:Z), (is_a_ket_l x n) ->
  ((ket_norm_l x n) =
   (sum (to_fset 0%Z (power 2%Z n))
    (fun (k:Z) =>
     (infix_asdt (modulus (get x k 0%Z)) (modulus (get x k 0%Z)))))).

Axiom ind_isum_mod_div :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
  ((int.EuclideanDivision.mod1
    (ind_isum
     (fun (k:Z) =>
      (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
     0%Z (length bv))
    (power 2%Z ((length bv) - i)%Z))
   =
   (ind_isum
    (fun (k:Z) =>
     (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
    i (length bv))).

Axiom ind_isum_mod_div1 :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
  ((int.EuclideanDivision.div
    (ind_isum
     (fun (k:Z) =>
      (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
     0%Z (length bv))
    (power 2%Z ((length bv) - i)%Z))
   =
   (ind_isum
    (fun (k:Z) => (((value bv) k) * (power 2%Z ((i - 1%Z)%Z - k)%Z))%Z) 0%Z
    i)).

Axiom mod_ind_isum :
  forall (f:Z -> Z) (i:Z) (l:Z), ((0%Z <= i)%Z /\ (i <= l)%Z) ->
  (binary f) ->
  ((int.EuclideanDivision.mod1
    (ind_isum (fun (k:Z) => ((f k) * (power 2%Z ((l - 1%Z)%Z - k)%Z))%Z) 0%Z
     l)
    (power 2%Z i))
   =
   (ind_isum (fun (k:Z) => ((f k) * (power 2%Z ((l - 1%Z)%Z - k)%Z))%Z)
    (l - i)%Z l)).

Axiom mod_ind_isum_z :
  forall (f:Z -> Z) (i:Z) (l:Z), ((0%Z <= i)%Z /\ (i <= l)%Z) ->
  (binary f) ->
  ((int.EuclideanDivision.mod1
    (ind_isum (fun (k:Z) => ((f k) * (power 2%Z ((l - 1%Z)%Z - k)%Z))%Z) 0%Z
     l)
    (power 2%Z i))
   =
   (ind_isum
    (fun (k:Z) =>
     ((f ((k + l)%Z - i)%Z) * (power 2%Z ((i - 1%Z)%Z - k)%Z))%Z)
    0%Z i)).

Axiom div_ind_isum :
  forall (f:Z -> Z) (i:Z) (l:Z), ((0%Z <= i)%Z /\ (i <= l)%Z) ->
  (binary f) ->
  ((int.EuclideanDivision.div
    (ind_isum (fun (k:Z) => ((f k) * (power 2%Z ((l - 1%Z)%Z - k)%Z))%Z) 0%Z
     l)
    (power 2%Z i))
   =
   (ind_isum
    (fun (k:Z) => ((f k) * (power 2%Z (((l - 1%Z)%Z - k)%Z - i)%Z))%Z) 0%Z
    (l - i)%Z)).

Axiom ind_isum_mod :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
  ((int.EuclideanDivision.mod1
    (ind_isum (fun (l:Z) => (((value bv) l) * (power 2%Z (i - l)%Z))%Z) 0%Z
     (i + 1%Z)%Z)
    2%Z)
   = ((value bv) i)).

Axiom bv_to_int_kth_pre :
  forall (bv:bitvec) (k:Z),
  ((0%Z <= k)%Z /\ (k < ((length bv) - 1%Z)%Z)%Z) ->
  (((value bv) k) =
   (int.EuclideanDivision.mod1
    (int.EuclideanDivision.div
     (ind_isum
      (fun (l:Z) =>
       (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
      0%Z (length bv))
     (power 2%Z (((length bv) - k)%Z - 1%Z)%Z))
    2%Z)).

Axiom bv_to_int_kth_pre1 :
  forall (bv:bitvec) (k:Z),
  ((0%Z <= k)%Z /\ (k < ((length bv) - 1%Z)%Z)%Z) ->
  (((value bv) k) =
   (int.EuclideanDivision.div
    (int.EuclideanDivision.mod1
     (ind_isum
      (fun (l:Z) =>
       (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
      0%Z (length bv))
     (power 2%Z ((length bv) - k)%Z))
    (power 2%Z (((length bv) - k)%Z - 1%Z)%Z))).

Parameter int_to_bv: Z -> Z -> bitvec.

Parameter result11: Z -> Z -> Z -> Z.

Axiom result_def11 :
  forall (i:Z) (n:Z) (k:Z),
  (((0%Z <= k)%Z /\ (k < n)%Z) ->
   (((result11 i n) k) =
    (int.EuclideanDivision.div
     (int.EuclideanDivision.mod1 i (power 2%Z (n - k)%Z))
     (power 2%Z ((n - k)%Z - 1%Z)%Z)))) /\
  (~ ((0%Z <= k)%Z /\ (k < n)%Z) -> (((result11 i n) k) = 0%Z)).

Axiom int_to_bv_def :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_bv i n) = (make_bv (result11 i n) n)).

Axiom int_to_bv_spec :
  forall (i:Z) (n:Z), (0%Z <= n)%Z -> ((length (int_to_bv i n)) = n).

Axiom int_to_bv_spec1 :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_bv i n) =
   (make_bv
    (fun (k:Z) =>
     (int.EuclideanDivision.div
      (int.EuclideanDivision.mod1 i (power 2%Z (n - k)%Z))
      (power 2%Z ((n - k)%Z - 1%Z)%Z)))
    n)).

Axiom int_to_bv_sum_pre :
  forall (i:Z) (n:Z) (k:Z), ((k <= n)%Z /\ (0%Z <= k)%Z) ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int.EuclideanDivision.mod1 i (power 2%Z k)) =
   (ind_isum
    (fun (l:Z) =>
     (((value (int_to_bv i n)) l) * (power 2%Z ((n - l)%Z - 1%Z)%Z))%Z)
    (n - k)%Z n)).

Axiom int_to_bv_sum :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  (i =
   (ind_isum
    (fun (k:Z) =>
     (((value (int_to_bv i n)) k) * (power 2%Z ((n - 1%Z)%Z - k)%Z))%Z)
    0%Z n)).

Axiom int_to_bv_mod_div :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_to_bv i n) =
   (make_bv
    (fun (k:Z) =>
     (int.EuclideanDivision.mod1
      (int.EuclideanDivision.div i (power 2%Z ((n - k)%Z - 1%Z)%Z)) 2%Z))
    n)).

Axiom mod_isum :
  forall (i:Z) (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((int.EuclideanDivision.mod1 i (power 2%Z k)) =
   (ind_isum
    (fun (l:Z) =>
     (((value (int_to_bv i n)) l) * (power 2%Z ((n - 1%Z)%Z - l)%Z))%Z)
    (n - k)%Z n)).

Axiom mod_isum_z :
  forall (i:Z) (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((int.EuclideanDivision.mod1 i (power 2%Z k)) =
   (ind_isum
    (fun (l:Z) =>
     (((value (int_to_bv i n)) (l + (n - k)%Z)%Z) *
      (power 2%Z ((k - l)%Z - 1%Z)%Z))%Z)
    0%Z k)).

Axiom div_isum :
  forall (i:Z) (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((int.EuclideanDivision.div i (power 2%Z k)) =
   (ind_isum
    (fun (l:Z) =>
     (((value (int_to_bv i n)) l) *
      (power 2%Z (((n - 1%Z)%Z - k)%Z - l)%Z))%Z)
    0%Z (n - k)%Z)).

Axiom int_to_bv_div_mod :
  forall (i:Z) (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((int_to_bv i n) =
   (make_bv
    (fun (k1:Z) =>
     (int.EuclideanDivision.div
      (int.EuclideanDivision.mod1 i (power 2%Z (n - k1)%Z))
      (power 2%Z ((n - k1)%Z - 1%Z)%Z)))
    n)).

Axiom int_to_bv_value :
  forall (i:Z) (n:Z) (k:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((0%Z <= k)%Z /\ (k < n)%Z) ->
  (((value (int_to_bv i n)) k) =
   (int.EuclideanDivision.mod1
    (int.EuclideanDivision.div i (power 2%Z ((n - k)%Z - 1%Z)%Z)) 2%Z)).

Axiom int_to_bv_zero :
  forall (n:Z), forall (k:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  (((value (int_to_bv 0%Z n)) k) = 0%Z).

Axiom int_to_sum :
  forall (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  (i =
   (ind_isum
    (fun (k:Z) =>
     (((value (int_to_bv i n)) k) * (power 2%Z ((n - k)%Z - 1%Z)%Z))%Z)
    0%Z n)).

Axiom int_to_bv_transl :
  forall (i:Z) (k:Z) (n:Z) (t1:Z), ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= k)%Z /\ (k < (n - t1)%Z)%Z) -> ((0%Z < t1)%Z /\ (t1 <= n)%Z) ->
  (((value
     (int_to_bv (int.EuclideanDivision.mod1 i (power 2%Z (n - t1)%Z))
      (n - t1)%Z))
    k)
   = ((value (int_to_bv i n)) (k + t1)%Z)).

Parameter bin_to_int: (Z -> Z) -> Z -> Z.

Axiom bin_to_int_def :
  forall (f:Z -> Z) (n:Z), (0%Z <= n)%Z -> (binary f) ->
  ((bin_to_int f n) = (bv_to_int (make_bv f n))).

Axiom bin_to_int_spec :
  forall (f:Z -> Z) (n:Z), (0%Z <= n)%Z -> (binary f) ->
  ((bin_to_int f n) =
   (ind_isum (fun (k:Z) => ((f k) * (power 2%Z ((n - 1%Z)%Z - k)%Z))%Z) 0%Z
    n)).

Axiom bin_to_int_spec1 :
  forall (f:Z -> Z) (n:Z), (0%Z <= n)%Z -> (binary f) ->
  (0%Z <= (bin_to_int f n))%Z.

Parameter int_to_bin: Z -> Z -> Z -> Z.

Axiom int_to_bin_def :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_to_bin i n) = (value (int_to_bv i n))).

Axiom int_to_bin_spec :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  (i =
   (ind_isum
    (fun (k:Z) => (((int_to_bin i n) k) * (power 2%Z ((n - 1%Z)%Z - k)%Z))%Z)
    0%Z n)).

Axiom int_to_bin_spec1 :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> binary (int_to_bin i n).

Axiom int_to_bin_spec2 :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < n)%Z) ->
  (((int_to_bin i n) k) =
   (int.EuclideanDivision.mod1
    (int.EuclideanDivision.div i (power 2%Z ((n - k)%Z - 1%Z)%Z)) 2%Z)).

Axiom int_to_bv_tail :
  forall (i:Z) (n:Z), (1%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_to_bv (tail_bits i n) (n - 1%Z)%Z) = (tail (int_to_bv i n))).

Axiom bound_sum_dec :
  forall (bv:bitvec) (i:Z), ((1%Z <= i)%Z /\ (i <= (length bv))%Z) ->
  ((ind_isum
    (fun (l:Z) => (((value bv) l) * (power 2%Z ((length bv) - l)%Z))%Z) i
    ((length bv) + 1%Z)%Z)
   < (power 2%Z (((length bv) - i)%Z + 1%Z)%Z))%Z.

Axiom bv_to_int_to_bv :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((bv_to_int (int_to_bv i n)) = i).

Axiom tail_bits_sum :
  forall (i:Z) (n:Z), (1%Z < n)%Z -> (0%Z <= i)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((tail_bits i n) =
   (ind_isum
    (fun (l:Z) =>
     (((value (int_to_bv i n)) l) * (power 2%Z ((n - 1%Z)%Z - l)%Z))%Z)
    1%Z n)).

Axiom int_to_bv_to_int :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  ((int_to_bv (bv_to_int bv) (length bv)) = bv).

Axiom concat_to_int :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i <= 1%Z)%Z) ->
  ((bv_to_int (concat_l bv i)) =
   ((bv_to_int bv) + (i * (power 2%Z (length bv)))%Z)%Z).

Axiom bounded_to_int :
  forall (bv:bitvec), ((bv_to_int bv) < (power 2%Z (length bv)))%Z.

Axiom int_to_bv_to_int_value :
  forall (bv:bitvec) (i:Z), (1%Z <= (length bv))%Z ->
  (((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
   (((value (int_to_bv (bv_to_int bv) (length bv))) i) = ((value bv) i))) /\
  (~ ((0%Z <= i)%Z /\ (i < (length bv))%Z) ->
   (((value (int_to_bv (bv_to_int bv) (length bv))) i) = 0%Z)).

Axiom int_to_bv_to_int_gen :
  forall (bv:bitvec) (n:Z), (1%Z <= (length bv))%Z -> (n = (length bv)) ->
  ((int_to_bv (bv_to_int bv) n) = bv).

Axiom bv_to_int_mod :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  ((int.EuclideanDivision.mod1 (bv_to_int bv)
    (power 2%Z ((length bv) - k)%Z))
   =
   (ind_isum
    (fun (l:Z) =>
     (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
    k (length bv))).

Axiom bv_to_int_mod_rev :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  ((ind_isum
    (fun (l:Z) =>
     (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
    k (length bv))
   =
   (int.EuclideanDivision.mod1 (bv_to_int bv)
    (power 2%Z ((length bv) - k)%Z))).

Axiom bv_to_int_mod_gen :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) -> forall (bv:bitvec),
  ((length bv) = n) ->
  ((int.EuclideanDivision.mod1 (bv_to_int bv)
    (power 2%Z ((length bv) - k)%Z))
   =
   (ind_isum
    (fun (l:Z) =>
     (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
    k (length bv))).

Axiom to_int_head_tail :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  ((bv_to_int bv) =
   ((bv_to_int (tail bv)) +
    ((head bv) * (power 2%Z ((length bv) - 1%Z)%Z))%Z)%Z).

Axiom to_int_head_tail1 :
  forall (bv:bitvec), (1%Z <= (length bv))%Z ->
  ((bv_to_int (tail bv)) =
   (int.EuclideanDivision.mod1 (bv_to_int bv)
    (power 2%Z ((length bv) - 1%Z)%Z))).

Axiom not_disj :
  forall (a:bool) (b:bool), ~ (a = true) -> ~ (b = true) -> ~ (a = true).

Axiom not_disj1 : True.

Parameter my_map:
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b}, (a -> b) ->
  (set a) -> set b.

Axiom my_map_def :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), ((cardinal u) = 0%Z) ->
  ((my_map f u) = (empty : set b)).

Axiom my_map_def1 :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), ~ ((cardinal u) = 0%Z) ->
  ((my_map f u) = (add (f (choose u)) (my_map f (remove (choose u) u)))).

Axiom my_map_spec :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), ((my_map f u) = (map f u)).

Axiom my_map_to_map :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), ((my_map f u) = (map f u)).

Axiom map_to_my_map :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:a -> b) (u:set a), ((map f u) = (my_map f u)).

Parameter n_bvs: Z -> set bitvec.

Axiom n_bvs_def :
  forall (n:Z), (0%Z <= n)%Z -> (n = 0%Z) ->
  ((n_bvs n) = (add (make_bv (fun (i:Z) => 0%Z) 0%Z) (empty : set bitvec))).

Axiom n_bvs_def1 :
  forall (n:Z), (0%Z <= n)%Z -> ~ (n = 0%Z) ->
  ((n_bvs n) =
   (union (my_map (fun (bv:bitvec) => (concat_l bv 0%Z)) (n_bvs (n - 1%Z)%Z))
    (my_map (fun (bv:bitvec) => (concat_l bv 1%Z)) (n_bvs (n - 1%Z)%Z)))).

Axiom n_bvs_spec :
  forall (n:Z), (0%Z <= n)%Z -> forall (f:bitvec), (mem f (n_bvs n)) ->
  ((length f) = n).

Axiom n_bvs_spec1 :
  forall (n:Z), (0%Z <= n)%Z -> forall (f:bitvec), (mem f (n_bvs n)) ->
  ((length f) = n).

Axiom n_bvs_spec2 :
  forall (n:Z), (0%Z <= n)%Z -> forall (f:bitvec), ((length f) = n) ->
  mem f (n_bvs n).

Axiom n_bvs_spec3 :
  forall (n:Z), (0%Z <= n)%Z -> (0%Z < (cardinal (n_bvs n)))%Z.

Axiom n_bvs_node :
  forall (n:Z), (0%Z < n)%Z ->
  ((inter (map (fun (bv:bitvec) => (concat_l bv 0%Z)) (n_bvs (n - 1%Z)%Z))
    (map (fun (bv:bitvec) => (concat_l bv 1%Z)) (n_bvs (n - 1%Z)%Z)))
   = (empty : set bitvec)).

Axiom n_bvs_node1 :
  forall (n:Z), (0%Z < n)%Z ->
  ((union (map (fun (bv:bitvec) => (concat_l bv 0%Z)) (n_bvs (n - 1%Z)%Z))
    (map (fun (bv:bitvec) => (concat_l bv 1%Z)) (n_bvs (n - 1%Z)%Z)))
   = (n_bvs n)).

Axiom injective_node :
  forall (n:Z), (0%Z <= n)%Z ->
  p_injective (fun (bv:bitvec) => (concat_l bv 0%Z)) (n_bvs n).

Axiom injective_node1 :
  forall (n:Z), (0%Z <= n)%Z ->
  p_injective (fun (bv:bitvec) => (concat_l bv 1%Z)) (n_bvs n).

Axiom mat_sum_n_bvs_pos :
  forall (n:Z) (f:bitvec -> matrix t), (0%Z < n)%Z ->
  (constant_size (n_bvs n) f) ->
  ((mat_sum (n_bvs n) f) =
   (add_mat
    (mat_sum (n_bvs (n - 1%Z)%Z) (fun (bv:bitvec) => (f (concat_l bv 0%Z))))
    (mat_sum (n_bvs (n - 1%Z)%Z) (fun (bv:bitvec) => (f (concat_l bv 1%Z)))))).

Axiom mat_sum_n_bvs_null :
  forall (f:bitvec -> matrix t),
  ((mat_sum (n_bvs 0%Z) f) =
   (f (make_bv ((fun (y0:Z) (y1:Z) => y0) 0%Z) 0%Z))).

Axiom mat_sum_n_bvs_null_eq :
  forall (f:bitvec -> matrix t) (x:matrix t),
  (x = (f (make_bv ((fun (y0:Z) (y1:Z) => y0) 0%Z) 0%Z))) ->
  ((mat_sum (n_bvs 0%Z) f) = x).

Axiom get_n_bvs : forall (bv:bitvec), mem bv (n_bvs (length bv)).

Axiom get_n_bvs_gen :
  forall (bv:bitvec) (l:Z), (l = (length bv)) -> mem bv (n_bvs l).

Axiom set_n_bvs :
  forall (bv:bitvec), (mem bv (n_bvs (length bv))) -> forall (i:Z),
  ~ (0%Z <= i)%Z -> (((value bv) i) = 0%Z).

Axiom set_n_bvs1 :
  forall (bv:bitvec), (mem bv (n_bvs (length bv))) -> forall (i:Z),
  ~ (i < (length bv))%Z -> (((value bv) i) = 0%Z).

Axiom int_to_bv_n_bvs :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> mem (int_to_bv i n) (n_bvs n).

Axiom n_bvs_def_pos :
  forall (n:Z), (0%Z < n)%Z ->
  ((n_bvs n) =
   (union (map (fun (bv:bitvec) => (concat_l bv 0%Z)) (n_bvs (n - 1%Z)%Z))
    (map (fun (bv:bitvec) => (concat_l bv 1%Z)) (n_bvs (n - 1%Z)%Z)))).

Axiom map_n_bvs :
  forall (n:Z), (0%Z < n)%Z ->
  ((to_fset 0%Z (power 2%Z n)) =
   (map (fun (y0:bitvec) => (bv_to_int y0)) (n_bvs n))).

Parameter first_div: bitvec -> bitvec -> Z.

Axiom first_div_spec :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2) -> forall (j:Z),
  ((0%Z <= j)%Z /\ (j < (first_div bv1 bv2))%Z) ->
  (((value bv1) j) = ((value bv2) j)).

Axiom first_div_spec1 :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2) -> ((first_div bv1 bv2) < (length bv1))%Z ->
  ~ (((value bv1) (first_div bv1 bv2)) = ((value bv2) (first_div bv1 bv2))).

Axiom first_div_spec2 :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2) -> (0%Z <= (first_div bv1 bv2))%Z.

Axiom first_div_spec3 :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2) -> ((first_div bv1 bv2) < (length bv1))%Z.

Axiom injective_concat :
  forall (i:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= i)%Z /\ (i <= 1%Z)%Z) ->
  p_injective (fun (bv:bitvec) => (concat_l bv i)) (n_bvs n).

Axiom inf_first_div :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2) -> forall (j:Z), (1%Z <= j)%Z ->
  ~ (((value bv1) j) = ((value bv2) j)) -> ((first_div bv1 bv2) <= j)%Z.

Axiom first_div_diff :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2) ->
  ~ (((value bv1) (first_div bv1 bv2)) = ((value bv2) (first_div bv1 bv2))).

Axiom exists_first_div :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2) ->
  exists i:Z,
  ((0%Z <= i)%Z /\ (i < (length bv1))%Z) /\ (i = (first_div bv1 bv2)).

Axiom set_diff_length :
  forall (bv1:bitvec) (bv2:bitvec), ~ ((length bv1) = (length bv2)) ->
  ~ (bv1 = bv2).

Axiom set_diff_val :
  forall (bv1:bitvec) (bv2:bitvec) (i:Z), ((length bv1) = (length bv2)) ->
  ((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
  ~ (((value bv1) i) = ((value bv2) i)) -> ~ (bv1 = bv2).

Parameter fc6: bitvec -> Z -> Z.

Parameter fc7: bitvec -> Z -> Z.

Axiom fc_def6 :
  forall (bv:bitvec) (l:Z),
  ((l < (length bv))%Z ->
   (((fc6 bv) l) =
    (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)) /\
  (~ (l < (length bv))%Z -> (((fc6 bv) l) = 0%Z)).

Axiom fc_def7 :
  forall (bv:bitvec) (l:Z),
  ((l < (length bv))%Z ->
   (((fc7 bv) l) =
    (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)) /\
  (~ (l < (length bv))%Z -> (((fc7 bv) l) = 0%Z)).

Axiom kth_decomp :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  ((bv_to_int bv) =
   (((ind_isum (fc6 bv) 0%Z k) +
     (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)%Z
    + (ind_isum (fc7 bv) (k + 1%Z)%Z (length bv)))%Z).

Axiom kth_decomp1 :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  ((bv_to_int bv) =
   (((ind_isum
      (fun (l:Z) =>
       (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
      0%Z k)
     + (((value bv) k) * (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)%Z
    +
    (ind_isum
     (fun (l:Z) =>
      (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
     (k + 1%Z)%Z (length bv)))%Z).

Axiom int_to_bv_prod :
  forall (i:Z) (j:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  ((ind_product
    (fun (k:Z) =>
     (indic ((value (int_to_bv i n)) k) ((value (int_to_bv j n)) k)))
    0%Z n)
   = (indic i j)).

Axiom int_to_bv_prod_gen :
  forall (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> forall (j:Z),
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  ((ind_product
    (fun (k:Z) =>
     (indic ((value (int_to_bv i n)) k) ((value (int_to_bv j n)) k)))
    0%Z n)
   = (indic i j)).

Axiom kth_decomp_bound_zero :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  (((value bv) k) = 0%Z) ->
  ((ind_isum
    (fun (l:Z) =>
     (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
    0%Z k)
   <= (bv_to_int bv))%Z.

Axiom kth_decomp_bound_zero1 :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  (((value bv) k) = 0%Z) ->
  ((bv_to_int bv) <
   ((ind_isum
     (fun (l:Z) =>
      (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
     0%Z k)
    + (power 2%Z (((length bv) - k)%Z - 1%Z)%Z))%Z)%Z.

Axiom kth_decomp_bound_one :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  (((value bv) k) = 1%Z) ->
  (((ind_isum
     (fun (l:Z) =>
      (((value bv) l) * (power 2%Z (((length bv) - 1%Z)%Z - l)%Z))%Z)
     0%Z k)
    + (power 2%Z (((length bv) - k)%Z - 1%Z)%Z))%Z
   <= (bv_to_int bv))%Z.

Axiom kth_decomp_bound_one1 :
  forall (bv:bitvec) (k:Z), ((0%Z <= k)%Z /\ (k < (length bv))%Z) ->
  (((value bv) k) = 1%Z) ->
  ((bv_to_int bv) <
   ((ind_isum
     (fun (l:Z) =>
      (((value bv) l) * (power 2%Z (((length bv) - l)%Z - 1%Z)%Z))%Z)
     0%Z k)
    + (power 2%Z ((length bv) - k)%Z))%Z)%Z.

Parameter add_ket: (matrix t) -> (matrix t) -> matrix t.

Axiom add_ket_def :
  forall (m:matrix t) (n:matrix t), (is_a_ket m) -> (is_a_ket n) ->
  ((ket_length m) = (ket_length n)) -> ((add_ket m n) = (add_mat m n)).

Axiom add_ket_spec :
  forall (m:matrix t) (n:matrix t), (is_a_ket m) -> (is_a_ket n) ->
  ((ket_length m) = (ket_length n)) -> is_a_ket (add_ket m n).

Axiom add_ket_spec1 :
  forall (m:matrix t) (n:matrix t), (is_a_ket m) -> (is_a_ket n) ->
  ((ket_length m) = (ket_length n)) ->
  ((ket_length (add_ket m n)) = (ket_length m)).

Axiom add_ket_spec2 :
  forall (m:matrix t) (n:matrix t), (is_a_ket m) -> (is_a_ket n) ->
  ((ket_length m) = (ket_length n)) -> forall (i:Z),
  (valid_index (add_ket m n) i 0%Z) ->
  ((get (add_ket m n) i 0%Z) = (infix_pldt (get m i 0%Z) (get n i 0%Z))).

Parameter add_ket_l: (matrix t) -> (matrix t) -> Z -> matrix t.

Axiom add_ket_l_def :
  forall (m:matrix t) (n:matrix t) (l:Z), (is_a_ket_l m l) ->
  (is_a_ket_l n l) -> ((add_ket_l m n l) = (add_ket m n)).

Axiom add_ket_l_spec :
  forall (m:matrix t) (n:matrix t) (l:Z), (is_a_ket_l m l) ->
  (is_a_ket_l n l) -> is_a_ket_l (add_ket_l m n l) l.

Axiom add_ket_l_spec1 :
  forall (m:matrix t) (n:matrix t) (l:Z), (is_a_ket_l m l) ->
  (is_a_ket_l n l) -> ((ket_length (add_ket_l m n l)) = l).

Axiom add_ket_l_spec2 :
  forall (m:matrix t) (n:matrix t) (l:Z), (is_a_ket_l m l) ->
  (is_a_ket_l n l) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length (add_ket_l m n l))))%Z) ->
  ((get (add_ket_l m n l) i 0%Z) = (infix_pldt (get m i 0%Z) (get n i 0%Z))).

Parameter add_ket_l_eq:
  (matrix t) -> (matrix t) -> (matrix t) -> (matrix t) -> Z -> unit.

Axiom add_ket_l_eq_def :
  forall (m:matrix t) (m':matrix t) (n:matrix t) (n':matrix t) (l:Z),
  (is_a_ket_l m l) -> (is_a_ket_l n l) -> (m = m') -> (n = n') ->
  ((add_ket_l_eq m m' n n' l) = tt).

Axiom add_ket_l_eq_spec :
  forall (m:matrix t) (m':matrix t) (n:matrix t) (n':matrix t) (l:Z),
  (is_a_ket_l m l) -> (is_a_ket_l n l) -> (m = m') -> (n = n') ->
  ((((fun (y0:matrix t) (y1:matrix t) (y2:Z) => (add_ket_l y0 y1 y2)) m) n) =
   (((fun (y0:matrix t) (y1:matrix t) (y2:Z) => (add_ket_l y0 y1 y2)) m') n')).

Axiom add_ket_l_value :
  forall (m:matrix t) (n:matrix t) (l:Z) (i:Z), (is_a_ket_l m l) ->
  (is_a_ket_l n l) -> ((0%Z <= i)%Z /\ (i < (power 2%Z l))%Z) ->
  ((get (add_ket_l m n l) i 0%Z) = (infix_pldt (get m i 0%Z) (get n i 0%Z))).

Axiom set_equal_ket :
  forall (m:matrix t) (n:matrix t), (is_a_ket m) -> (is_a_ket n) ->
  ((ket_length m) = (ket_length n)) ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) ->
   ((get m i 0%Z) = (get n i 0%Z))) ->
  (m = n).

Axiom set_equal_ket_l :
  forall (m:matrix t) (n:matrix t),
  (exists l:Z, (is_a_ket_l m l) /\ (is_a_ket_l n l)) ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) ->
   ((get m i 0%Z) = (get n i 0%Z))) ->
  (m = n).

Axiom get_ket_length :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (is_a_ket m) ->
  ((rows m) = (power 2%Z n)) -> ((ket_length m) = n).

Axiom set_ket_length :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (is_a_ket m) ->
  ((ket_length m) = n) -> ((rows m) = (power 2%Z n)).

Axiom scalar_ket :
  forall (x:matrix t) (a:t), (is_a_ket x) -> is_a_ket (infix_asdtdt a x).

Axiom scalar_ket_length :
  forall (m:matrix t) (a:t), (is_a_ket m) ->
  ((ket_length (infix_asdtdt a m)) = (ket_length m)).

Axiom scalar_ket_valid_index :
  forall (m:matrix t) (a:t) (i:Z), (valid_index m i 0%Z) -> (is_a_ket m) ->
  valid_index (infix_asdtdt a m) i 0%Z.

Axiom scalar_ket_l :
  forall (x:matrix t) (l:Z) (a:t), (is_a_ket_l x l) ->
  is_a_ket_l (infix_asdtdt a x) l.

Axiom scalar_ket_value :
  forall (x:matrix t) (i:Z) (a:t), (is_a_ket x) -> (valid_index x i 0%Z) ->
  ((get (infix_asdtdt a x) i 0%Z) = (infix_asdt a (get x i 0%Z))).

Axiom scalar_ket_value_rev :
  forall (x:matrix t) (i:Z) (a:t), (is_a_ket x) -> (valid_index x i 0%Z) ->
  ((infix_asdt a (get x i 0%Z)) = (get (infix_asdtdt a x) i 0%Z)).

Axiom add_ket_is_a_ket :
  forall (x:matrix t) (y:matrix t), (is_a_ket x) -> (is_a_ket y) ->
  ((ket_length x) = (ket_length y)) -> is_a_ket (add_mat x y).

Axiom set_ket_length_gen :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (is_a_ket m) ->
  ((power 2%Z (ket_length m)) = n) -> ((rows m) = n).

Axiom set_is_a_ket :
  forall (m:matrix t), ((columns m) = 1%Z) ->
  (exists s:Z, (0%Z <= s)%Z /\ ((rows m) = (power 2%Z s))) -> is_a_ket m.

Axiom set_is_a_ket_l :
  forall (m:matrix t) (l:Z), (0%Z <= l)%Z -> ((columns m) = 1%Z) ->
  ((rows m) = (power 2%Z l)) -> is_a_ket_l m l.

Axiom set_is_a_ket_p :
  forall (m:matrix t) (l:Z), (0%Z <= l)%Z -> ((columns m) = 1%Z) ->
  ((rows m) = (power 2%Z l)) -> is_a_ket m.

Axiom get_is_a_ket :
  forall (m:matrix t), (is_a_ket m) -> ((columns m) = 1%Z).

Axiom get_is_a_ket1 :
  forall (m:matrix t), (is_a_ket m) ->
  ((rows m) = (power 2%Z (ket_length m))).

Axiom get_ket_columns :
  forall (m:matrix t), (is_a_ket m) -> ((columns m) = 1%Z).

Axiom get_ket_rows :
  forall (m:matrix t), (is_a_ket m) ->
  ((rows m) = (power 2%Z (ket_length m))).

Axiom get_ket_rows_gen :
  forall (m:matrix t) (i:Z), (is_a_ket m) ->
  (i = (power 2%Z (ket_length m))) -> ((rows m) = i).

Axiom get_ket_rows_length :
  forall (m:matrix t) (l:Z), (is_a_ket m) -> ((ket_length m) = l) ->
  ((rows m) = (power 2%Z l)).

Axiom ket_kronecker :
  forall (m:matrix t) (n:matrix t), (is_a_ket m) -> (is_a_ket n) ->
  is_a_ket (kronecker m n).

Axiom ket_kronecker1 :
  forall (m:matrix t) (n:matrix t), (is_a_ket m) -> (is_a_ket n) ->
  ((ket_length (kronecker m n)) = ((ket_length m) + (ket_length n))%Z).

Axiom ket_kronecker_l :
  forall (m:matrix t) (n:matrix t) (l:Z) (l':Z), (is_a_ket_l m l) ->
  (is_a_ket_l n l') -> is_a_ket_l (kronecker m n) (l + l')%Z.

Axiom set_ket_kron_l :
  forall (m:matrix t) (n:matrix t) (l:Z) (l':Z) (l'':Z), (is_a_ket_l m l) ->
  (is_a_ket_l n l') -> (l'' = (l + l')%Z) -> is_a_ket_l (kronecker m n) l''.

Axiom angle : Type.
Parameter angle_WhyType : WhyType angle.
Existing Instance angle_WhyType.

Parameter ang_inv: angle -> angle.

Parameter ang_add: angle -> angle -> angle.

Parameter ang_exp: angle -> t.

Axiom ang_exp_spec : forall (us:angle), ~ ((ang_exp us) = tzero).

Parameter arg: t -> angle.

Axiom arg_spec : forall (x:t), ((ang_exp (arg x)) = x).

Parameter ang_zero: angle.

Axiom Assoc2 :
  forall (x:angle) (y:angle) (z:angle),
  ((ang_add (ang_add x y) z) = (ang_add x (ang_add y z))).

Axiom Unit_def_l1 : forall (x:angle), ((ang_add ang_zero x) = x).

Axiom Unit_def_r1 : forall (x:angle), ((ang_add x ang_zero) = x).

Axiom Inv_def_l1 : forall (x:angle), ((ang_add (ang_inv x) x) = ang_zero).

Axiom Inv_def_r1 : forall (x:angle), ((ang_add x (ang_inv x)) = ang_zero).

Axiom Comm2 : forall (x:angle) (y:angle), ((ang_add x y) = (ang_add y x)).

Parameter int_to_ang: Z -> Z -> angle.

Parameter exp: t -> t.

Axiom e_diff_tzero : forall (x:t), ~ ((exp x) = tzero).

Axiom Exp_one : real_ (exp tone).

Axiom Exp_zero : ((exp tzero) = tone).

Axiom Exp_sum :
  forall (x:t) (y:t), ((exp (infix_pldt x y)) = (infix_asdt (exp x) (exp y))).

Axiom exp_one : real_ (exp tone).

Axiom exp_sum :
  forall (x:t) (y:t), ((exp (infix_pldt x y)) = (infix_asdt (exp x) (exp y))).

Axiom exp_eq : forall (t1:t) (t2:t), (t1 = t2) -> ((exp t1) = (exp t2)).

Axiom exp_sum_rev :
  forall (x:t) (y:t), ((infix_asdt (exp x) (exp y)) = (exp (infix_pldt x y))).

Axiom exp_inv :
  forall (i:t), ~ ((exp i) = tzero) ->
  ((exp (prefix_mndt i)) = (infix_sldt tone (exp i))).

Axiom exp_inv_rev :
  forall (i:t), ~ ((exp i) = tzero) ->
  ((infix_sldt tone (exp i)) = (exp (prefix_mndt i))).

Axiom exp_mult_pre :
  forall (x:t) (y:Z), (0%Z <= y)%Z ->
  ((exp (infix_asdt x (i_to_t y))) = (cpower (exp x) y)).

Axiom exp_mult :
  forall (x:t) (y:Z), ((exp (infix_asdt x (i_to_t y))) = (cpower (exp x) y)).

Axiom cpower_to_exp :
  forall (x:t) (y:Z), ((cpower (exp x) y) = (exp (infix_asdt x (i_to_t y)))).

Axiom Exp_quarter_pi :
  ((exp (infix_sldt (infix_asdt im pi) (i_to_t 4%Z))) =
   (infix_pldt
    (infix_sldt (square_rt (infix_pldt tone tone)) (infix_pldt tone tone))
    (infix_asdt im
     (infix_sldt (square_rt (infix_pldt tone tone)) (infix_pldt tone tone))))).

Axiom exp_h_pi :
  ((exp (infix_sldt (infix_asdt im pi) (infix_pldt tone tone))) = im).

Axiom exp_pi : ((exp (infix_asdt im pi)) = (prefix_mndt tone)).

Axiom exp_two_pi :
  ((exp (infix_asdt (infix_asdt im pi) (infix_pldt tone tone))) = tone).

Axiom exp_two_pi_mul :
  forall (k:Z),
  ((exp
    (infix_asdt (i_to_t k)
     (infix_asdt (infix_asdt im pi) (infix_pldt tone tone))))
   = tone).

Axiom exp_two_pi_mul_den :
  forall (k:Z) (l:Z), ~ (k = 0%Z) ->
  ((exp
    (infix_sldt
     (infix_asdt (i_to_t (k * l)%Z)
      (infix_asdt (infix_asdt im pi) (infix_pldt tone tone)))
     (i_to_t k)))
   = tone).

Axiom exp_two_pi_mul_den_add :
  forall (k:Z) (l:Z) (m:Z),
  ((exp
    (infix_asdt (i_to_t ((k * m)%Z + l)%Z)
     (infix_asdt (infix_asdt im pi) (infix_pldt tone tone))))
   =
   (exp
    (infix_asdt (i_to_t l)
     (infix_asdt (infix_asdt im pi) (infix_pldt tone tone))))).

Parameter ang_mult_int: angle -> Z -> angle.

(* Why3 assumption *)
Definition conjugate (i:t) : t :=
  infix_mndt (t_real_part i) (infix_asdt im (t_im_part i)).

Axiom real_part_conjugate :
  forall (i:t), ((t_real_part (conjugate i)) = (t_real_part i)).

Axiom im_part_conjugate :
  forall (i:t), ((t_im_part (conjugate i)) = (prefix_mndt (t_im_part i))).

Axiom invol_conjugate : forall (i:t), ((conjugate (conjugate i)) = i).

Axiom add_conjugate :
  forall (i:t) (j:t),
  ((conjugate (infix_pldt i j)) = (infix_pldt (conjugate i) (conjugate j))).

Axiom add_own_conjugate :
  forall (i:t),
  ((infix_pldt i (conjugate i)) =
   (infix_asdt (infix_pldt tone tone) (t_real_part i))).

Axiom conjugate_to_modulus :
  forall (i:t), ((modulus i) = (square_rt (infix_asdt i (conjugate i)))).

Axiom sum_conjugate :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> t),
  ((conjugate (sum s f)) = (sum s (fun (x:a) => (conjugate (f x))))).

Axiom conjugate_module_one :
  forall (i:t), ((modulus i) = tone) -> ((conjugate i) = (inv i)).

Axiom conjugate_module_one_rev :
  forall (i:t), ~ (i = tzero) -> ((conjugate i) = (inv i)) ->
  ((modulus i) = tone).

Axiom conjugate_real : forall (i:t), (real_ i) -> ((conjugate i) = i).

Axiom conjugate_real_gen : forall (i:t), (real_ i) -> ((conjugate i) = i).

Axiom conjugate_one : ((conjugate tone) = tone).

Axiom conjugate_tzero : ((conjugate tzero) = tzero).

Axiom conjugate_indic :
  forall {a:Type} {a_WT:WhyType a},
  forall (i:a) (j:a), ((conjugate (indic i j)) = (indic i j)).

Axiom conjugate_indic_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (i:a) (j:a), ((indic i j) = (conjugate (indic i j))).

Axiom conjugate_indic_gen_int :
  forall (i:Z) (j:Z), ((conjugate (indic i j)) = (indic i j)).

Axiom conjugate_pure_im :
  forall (i:t), (pure_im_ i) -> ((conjugate i) = (prefix_mndt i)).

Axiom conjugate_im : ((conjugate im) = (prefix_mndt im)).

Axiom conjugate_value :
  forall (c:t) (a:t) (b:t), (real_ a) -> (real_ b) ->
  (c = (infix_pldt a (infix_asdt im b))) ->
  ((conjugate c) = (infix_mndt a (infix_asdt im b))).

Axiom conjugate_minus_value :
  forall (c:t) (a:t) (b:t), (real_ a) -> (real_ b) ->
  (c = (infix_mndt a (infix_asdt im b))) ->
  ((conjugate c) = (infix_pldt a (infix_asdt im b))).

Axiom prod_conjugate :
  forall (a:t) (b:t),
  ((infix_asdt a (conjugate b)) =
   (infix_pldt
    (infix_pldt (infix_asdt (t_real_part a) (t_real_part b))
     (infix_asdt (t_im_part a) (t_im_part b)))
    (infix_asdt im
     (infix_mndt (infix_asdt (t_real_part b) (t_im_part a))
      (infix_asdt (t_im_part b) (t_real_part a)))))).

Axiom mult_conjugate :
  forall (a:t) (b:t),
  ((conjugate (infix_asdt a b)) = (infix_asdt (conjugate a) (conjugate b))).

Axiom conjugate_prod :
  forall (a:t) (b:t),
  ((infix_asdt (conjugate a) b) =
   (infix_pldt
    (infix_pldt (infix_asdt (t_real_part a) (t_real_part b))
     (infix_asdt (t_im_part a) (t_im_part b)))
    (infix_asdt im
     (infix_mndt (infix_asdt (t_real_part a) (t_im_part b))
      (infix_asdt (t_real_part b) (t_im_part a)))))).

Axiom conj_conj_prod :
  forall (a:t) (b:t),
  ((conjugate (infix_asdt (conjugate a) b)) = (infix_asdt a (conjugate b))).

Axiom conj_prod_conj :
  forall (a:t) (b:t),
  ((conjugate (infix_asdt a (conjugate b))) = (infix_asdt (conjugate a) b)).

Axiom itself_prod_conjugate_modulus_one :
  forall (a:t), ((modulus a) = tone) -> ((infix_asdt a (conjugate a)) = tone).

Axiom conjugate_prod_itself_modulus_one :
  forall (a:t), ((modulus a) = tone) -> ((infix_asdt a (conjugate a)) = tone).

Axiom modulus_pos :
  forall (a:t), (real_ a) -> (infix_lseqdt tzero a) -> ((modulus a) = a).

Axiom modulus_neg :
  forall (a:t), (real_ a) -> (infix_lseqdt a tzero) ->
  ((modulus a) = (prefix_mndt a)).

Parameter real_to_ang: t -> angle.

Axiom real_to_ang_eq :
  forall (phi:t) (phi':t), (real_ phi) -> (phi = phi') ->
  ((real_to_ang phi) = (real_to_ang phi')).

Axiom Real_To_Ang_value :
  forall (phi:t), (real_ phi) ->
  ((ang_exp (real_to_ang phi)) =
   (exp
    (infix_asdt (infix_asdt (infix_asdt im pi) (infix_pldt tone tone)) phi))).

Axiom Real_to_ang_to_int_to_ang :
  forall (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_ang k n) =
   (real_to_ang (infix_sldt (i_to_t k) (i_to_t (power 2%Z n))))).

Axiom Real_To_Ang_inv :
  forall (phi:t), ~ (phi = tzero) -> (real_ phi) ->
  ((ang_inv (real_to_ang phi)) = (real_to_ang (prefix_mndt phi))).

Axiom Real_To_Ang_add :
  forall (phi:t) (phi':t), (real_ phi) -> (real_ phi') ->
  ((ang_add (real_to_ang phi) (real_to_ang phi')) =
   (real_to_ang (infix_pldt phi phi'))).

Axiom Real_To_Ang_inv_add :
  forall (phi:t), (real_ phi) ->
  ((ang_add (real_to_ang phi) (real_to_ang (prefix_mndt phi))) = ang_zero).

Axiom Real_To_Ang_up :
  forall (phi:t), (real_ phi) ->
  ((real_to_ang phi) = (real_to_ang (infix_pldt tone phi))).

Axiom Real_To_Ang_cyclic :
  forall (phi:t), forall (k:Z), (real_ phi) ->
  ((real_to_ang phi) =
   (real_to_ang (infix_pldt tone (infix_asdt (i_to_t k) phi)))).

Axiom Real_zero_n : ((real_to_ang tzero) = ang_zero).

Axiom Real_ang_mult :
  forall (phi:t), forall (i:Z),
  ((ang_mult_int (real_to_ang phi) i) =
   (real_to_ang (infix_asdt phi (i_to_t i)))).

Axiom real_to_ang_down_cucles :
  forall (phi:t) (x:t), (real_ phi) -> (x = tone) ->
  ((real_to_ang (infix_mndt phi x)) = (real_to_ang phi)).

Axiom Equal_angle :
  forall (o:angle) (o':angle), ((ang_exp o) = (ang_exp o')) -> (o = o').

Axiom Equal_angle1 :
  forall (o:angle) (o':angle), (o = o') -> ((ang_exp o) = (ang_exp o')).

Axiom Int_To_Ang_inv :
  forall (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((ang_inv (int_to_ang k n)) = (int_to_ang (-k)%Z n)).

Axiom Int_To_Ang_inv_add :
  forall (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((ang_add (int_to_ang k n) (int_to_ang (-k)%Z n)) = ang_zero).

Axiom Int_To_Ang_add :
  forall (k:Z) (k':Z) (n:Z), (0%Z <= n)%Z ->
  ((ang_add (int_to_ang k n) (int_to_ang k' n)) = (int_to_ang (k + k')%Z n)).

Axiom Int_To_Ang_up :
  forall (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_ang k n) = (int_to_ang (2%Z * k)%Z (n + 1%Z)%Z)).

Axiom Int_To_Ang_cyclic :
  forall (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_ang k n) = (int_to_ang (k + (power 2%Z n))%Z n)).

Axiom Zero_n : forall (n:Z), (0%Z <= n)%Z -> ((int_to_ang 0%Z n) = ang_zero).

Axiom ang_minus_one_from_real :
  ((int_to_ang 1%Z 1%Z) = (real_to_ang (prefix_mndt tone))).

Parameter div_two_: angle -> angle.

Axiom Div_two_int_to_ang :
  forall (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= k)%Z /\ (k < (power 2%Z n))%Z) ->
  ((div_two_ (int_to_ang k n)) = (int_to_ang k (n + 1%Z)%Z)).

Axiom Div_two : forall (d:angle), ((ang_add (div_two_ d) (div_two_ d)) = d).

Axiom Add1 :
  forall (d:angle) (d':angle),
  ((ang_exp (ang_add d d')) = (infix_asdt (ang_exp d) (ang_exp d'))).

Axiom ang_exp_mult :
  forall (x:angle) (x':angle),
  ((infix_asdt (ang_exp x) (ang_exp x')) = (ang_exp (ang_add x x'))).

Parameter k_int_to_ang: Z -> angle.

Axiom K_int_to_ang :
  forall (k:Z), (0%Z <= k)%Z -> ((k_int_to_ang k) = (int_to_ang 1%Z k)).

Axiom K_int_to_angplus_one :
  forall (k:Z), (0%Z < k)%Z ->
  ((ang_add (k_int_to_ang k) (k_int_to_ang k)) = (k_int_to_ang (k - 1%Z)%Z)).

Parameter phase_inv_: Z -> angle -> angle.

Axiom Even_phase_inv :
  forall (d:angle), forall (i:Z),
  ((int.EuclideanDivision.mod1 i 2%Z) = 0%Z) -> ((phase_inv_ i d) = d).

Axiom Odd_phase_inv :
  forall (d:angle), forall (i:Z),
  ((int.EuclideanDivision.mod1 i 2%Z) = 1%Z) ->
  ((phase_inv_ i d) = (ang_inv d)).

Axiom Gen_phase_inv :
  forall (k:Z) (n:Z) (i:Z), (0%Z <= n)%Z -> (0%Z <= i)%Z ->
  ((phase_inv_ i (int_to_ang k n)) =
   (int_to_ang ((power (-1%Z)%Z i) * k)%Z n)).

Axiom Gen_phase_inv_neg :
  forall (k:Z) (n:Z) (i:Z), (0%Z <= n)%Z -> (i < 0%Z)%Z ->
  ((phase_inv_ i (int_to_ang k n)) =
   (int_to_ang ((power (-1%Z)%Z (-i)%Z) * k)%Z n)).

Axiom Ang_exp_inv :
  forall (o:angle), ((ang_exp (ang_inv o)) = (infix_sldt tone (ang_exp o))).

Axiom ang_inv_to_conjugate :
  forall (o:angle), ((ang_exp (ang_inv o)) = (conjugate (ang_exp o))).

Axiom conjugate_to_ang_inv :
  forall (o:angle), ((conjugate (ang_exp o)) = (ang_exp (ang_inv o))).

Axiom ang_exp_zero_ : ((ang_exp ang_zero) = tone).

Axiom ang_mult_int_in :
  forall (i:Z) (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((ang_mult_int (int_to_ang k n) i) = (int_to_ang (i * k)%Z n)).

Axiom ang_mult_int_out :
  forall (i:Z) (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_ang (i * k)%Z n) = (ang_mult_int (int_to_ang k n) i)).

Axiom int_to_ang_cycles :
  forall (k:Z) (n:Z) (i:Z), (0%Z <= n)%Z -> (0%Z <= i)%Z ->
  ((int_to_ang (k + (i * (power 2%Z n))%Z)%Z n) = (int_to_ang k n)).

Axiom int_to_ang_bin_rev :
  forall (n:Z) (i:Z) (j:Z), (0%Z <= n)%Z -> (0%Z <= i)%Z ->
  (j = (n - 1%Z)%Z) ->
  ((int_to_ang (-(i * (power 2%Z j))%Z)%Z n) =
   (int_to_ang (i * (power 2%Z (n - 1%Z)%Z))%Z n)).

Axiom int_to_ang_bin_rev_ :
  forall (n:Z) (i:Z) (j:Z), (0%Z <= n)%Z -> (0%Z <= i)%Z ->
  (j = (n - 1%Z)%Z) ->
  ((int_to_ang (-(i * (power_ 2%Z j))%Z)%Z n) =
   (int_to_ang (i * (power_ 2%Z (n - 1%Z)%Z))%Z n)).

Axiom int_to_ang_add_rev :
  forall (i:Z) (j:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_ang (i + j)%Z n) = (ang_add (int_to_ang i n) (int_to_ang j n))).

Axiom int_to_ang_ind_isum_plus_one :
  forall (f:Z -> Z) (i:Z) (j:Z) (n:Z), (i < j)%Z -> (0%Z <= n)%Z ->
  ((int_to_ang (ind_isum f i j) n) =
   (ang_add (int_to_ang (f i) n) (int_to_ang (ind_isum f (i + 1%Z)%Z j) n))).

Axiom int_to_ang_ind_isum_plus_one_rev :
  forall (f:Z -> Z) (i:Z) (j:Z) (n:Z), (i < j)%Z -> (0%Z <= n)%Z ->
  ((int_to_ang (ind_isum f i j) n) =
   (ang_add (int_to_ang (ind_isum f (i + 1%Z)%Z j) n) (int_to_ang (f i) n))).

Axiom int_to_ang_ind_isum_right_extension :
  forall (f:Z -> Z) (i:Z) (j:Z) (n:Z), (i < j)%Z -> (0%Z <= n)%Z ->
  ((int_to_ang (ind_isum f i j) n) =
   (ang_add (int_to_ang (ind_isum f i (j - 1%Z)%Z) n)
    (int_to_ang (f (j - 1%Z)%Z) n))).

Axiom int_to_ang_ind_isum_right_extension_rev :
  forall (f:Z -> Z) (i:Z) (j:Z) (n:Z), (i < j)%Z -> (0%Z <= n)%Z ->
  ((int_to_ang (ind_isum f i j) n) =
   (ang_add (int_to_ang (f (j - 1%Z)%Z) n)
    (int_to_ang (ind_isum f i (j - 1%Z)%Z) n))).

Axiom real_to_ang_add_rev :
  forall (i:t) (j:t), (real_ i) -> (real_ j) ->
  ((real_to_ang (infix_pldt i j)) =
   (ang_add (real_to_ang i) (real_to_ang j))).

Axiom int_to_ang_cycles_neg :
  forall (k:Z) (n:Z) (i:Z), (0%Z <= n)%Z -> (i <= 0%Z)%Z ->
  ((int_to_ang (k + (i * (power 2%Z n))%Z)%Z n) = (int_to_ang k n)).

Axiom int_to_ang_cycles_gen :
  forall (k:Z) (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((int_to_ang (k + (i * (power 2%Z n))%Z)%Z n) = (int_to_ang k n)).

Axiom int_to_ang_cycles_zero :
  forall (n':Z) (n:Z), ((0%Z <= n)%Z /\ (n <= n')%Z) ->
  ((int_to_ang (power 2%Z n') n) = ang_zero).

Axiom int_to_ang_cycles_zero_mult :
  forall (k:Z) (n':Z) (n:Z), ((0%Z <= n)%Z /\ (n <= n')%Z) ->
  ((int_to_ang (k * (power 2%Z n'))%Z n) = ang_zero).

Axiom int_to_ang_cycles_zero_mult_ :
  forall (k:Z) (n':Z) (n:Z), ((0%Z <= n)%Z /\ (n <= n')%Z) ->
  ((int_to_ang (k * (power_ 2%Z n'))%Z n) = ang_zero).

Axiom int_to_ang_eq :
  forall (k1:Z) (k2:Z) (n1:Z) (n2:Z), (k1 = k2) -> (n1 = n2) ->
  ((int_to_ang k1 n1) = (int_to_ang k2 n2)).

Axiom int_to_ang_mod :
  forall (k:Z) (n:Z), (0%Z <= n)%Z ->
  ((int_to_ang k n) =
   (int_to_ang (int.EuclideanDivision.mod1 k (power 2%Z n)) n)).

Axiom int_to_ang_red :
  forall (k:Z) (n:Z), (1%Z <= n)%Z -> ~ (0%Z = k) ->
  ((int.EuclideanDivision.mod1 k 2%Z) = 0%Z) ->
  ((int_to_ang k n) =
   (int_to_ang (int.EuclideanDivision.div k 2%Z) (n - 1%Z)%Z)).

Axiom int_to_ang_up :
  forall (k:Z) (n:Z) (n':Z), (0%Z <= n)%Z -> (0%Z <= n')%Z ->
  ((int_to_ang (k * (power 2%Z n'))%Z (n + n')%Z) = (int_to_ang k n)).

Axiom int_to_ang_simpl :
  forall (k:Z) (n1:Z) (n2:Z), (0%Z <= n1)%Z -> (0%Z <= n2)%Z ->
  ((int_to_ang (k * (power 2%Z n1))%Z (n2 + n1)%Z) = (int_to_ang k n2)).

Axiom ang_add_eq :
  forall (d1:angle) (d2:angle) (e1:angle) (e2:angle), (d1 = e1) ->
  (d2 = e2) -> ((ang_add d1 d2) = (ang_add e1 e2)).

Axiom ang_add_comm :
  forall (d1:angle) (d2:angle), ((ang_add d1 d2) = (ang_add d2 d1)).

Axiom ang_add_eq_comm :
  forall (d1:angle) (d2:angle) (d3:angle) (d4:angle), (d1 = d3) ->
  (d2 = d4) -> ((ang_add d1 d2) = (ang_add d4 d3)).

Axiom ang_div :
  forall (k:Z) (n:Z) (i:Z), (0%Z <= n)%Z -> (0%Z <= i)%Z ->
  ((int_to_ang k n) = (ang_mult_int (int_to_ang k (n + i)%Z) (power 2%Z i))).

Axiom ang_zero_add :
  forall (d':angle) (d:angle), (d' = ang_zero) -> ((ang_add d' d) = d).

Axiom int_to_ang_rev :
  forall (k:Z) (l:Z) (n:Z) (m:Z), (0%Z < n)%Z -> (0%Z <= k)%Z ->
  (n = (m + 1%Z)%Z) ->
  ((int_to_ang (((-k)%Z * l)%Z * (power 2%Z m))%Z n) =
   (int_to_ang ((k * l)%Z * (power 2%Z m))%Z n)).

Axiom int_to_ang_rev_ :
  forall (k:Z) (l:Z) (n:Z) (m:Z), (0%Z < n)%Z -> (0%Z <= k)%Z ->
  (0%Z <= l)%Z -> (n = (m + 1%Z)%Z) ->
  ((int_to_ang (((-k)%Z * l)%Z * (power_ 2%Z m))%Z n) =
   (int_to_ang ((k * l)%Z * (power_ 2%Z m))%Z n)).

Axiom ang_add_zero_d :
  forall (d':angle) (d:angle), (d' = ang_zero) -> ((ang_add d d') = d).

Parameter ang_sum: (Z -> angle) -> Z -> Z -> angle.

Axiom ang_sum_def :
  forall (f:Z -> angle), forall (i:Z) (j:Z),
  ((j <= i)%Z -> ((ang_sum f i j) = ang_zero)) /\
  (~ (j <= i)%Z ->
   ((ang_sum f i j) =
    (int_iterate (fun (y0:angle) (y1:angle) => (ang_add y0 y1)) f i j))).

Axiom ang_sumto_int_iterate :
  forall (f:Z -> angle) (i:Z) (j:Z), (i < j)%Z ->
  ((ang_sum f i j) =
   (int_iterate (fun (y0:angle) (y1:angle) => (ang_add y0 y1)) f i j)).

Axiom ang_sum_plus_one :
  forall (f:Z -> angle) (i:Z) (j:Z), ((i + 1%Z)%Z < j)%Z ->
  ((ang_sum f i j) = (ang_add (f i) (ang_sum f (i + 1%Z)%Z j))).

Axiom ang_sum_cardone :
  forall (f:Z -> angle) (i:Z) (j:Z), (j = (i + 1%Z)%Z) ->
  ((ang_sum f i j) = (f i)).

Axiom ang_sum_cardone_p :
  forall (f:Z -> angle) (i:Z) (j:Z) (r:angle), (j = (i + 1%Z)%Z) ->
  ((f i) = r) -> (r = (ang_sum f i j)).

Axiom ang_sum_neutral :
  forall (f:Z -> angle) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = ang_zero)) ->
  ((ang_sum f i j) = ang_zero).

Axiom ang_sum_def_plus_one_com :
  forall (f:Z -> angle) (i:Z) (j:Z), ((i + 1%Z)%Z < j)%Z ->
  ((ang_add (f i) (ang_sum f (i + 1%Z)%Z j)) = (ang_sum f i j)).

Axiom ang_sum_right_extension :
  forall (f:Z -> angle) (i:Z) (j:Z), ((i + 1%Z)%Z < j)%Z ->
  ((ang_sum f i j) = (ang_add (ang_sum f i (j - 1%Z)%Z) (f (j - 1%Z)%Z))).

Axiom ang_sum_transitivity :
  forall (f:Z -> angle) (i:Z) (k:Z) (j:Z), ((i < k)%Z /\ (k < j)%Z) ->
  ((ang_sum f i j) = (ang_add (ang_sum f i k) (ang_sum f k j))).

Axiom ang_sum_eq :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z), (i <= j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ang_sum f i j) = (ang_sum g i j)).

Axiom ang_sum_int_to_ang :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  (exists n:Z,
   forall (k:Z),
   exists j1:Z, exists j':Z,
   ((f k) = (int_to_ang j1 n)) /\ (((g k) = (int_to_ang j' n)) /\ (j1 = j'))) ->
  ((ang_sum f i j) = (ang_sum g i j)).

Axiom vang_sum_eq :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ang_exp (ang_sum f i j)) = (ang_exp (ang_sum g i j))).

Axiom vang_sum_scal_eq :
  forall (f:Z -> angle) (g:Z -> angle) (m:matrix t) (n:matrix t) (i:Z) (j:Z),
  (i < j)%Z -> (m = n) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((infix_asdtdt (ang_exp (ang_sum f i j)) m) =
   (infix_asdtdt (ang_exp (ang_sum g i j)) n)).

Axiom ang_sum_plus_one_p :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (l:Z) (m:Z) (r:angle),
  ((i + 1%Z)%Z < j)%Z -> (l = (i + 1%Z)%Z) -> (m = j) -> ((g i) = r) ->
  (forall (k:Z), (((i + 1%Z)%Z <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ang_add r (ang_sum f l m)) = (ang_sum g i j)).

Axiom vang_sum_plus_one_p :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (l:Z) (m:Z) (r:angle),
  ((i + 1%Z)%Z < j)%Z -> (l = (i + 1%Z)%Z) -> (m = j) -> ((g i) = r) ->
  (forall (k:Z), (((i + 1%Z)%Z <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((infix_asdt (ang_exp r) (ang_exp (ang_sum f l m))) =
   (ang_exp (ang_sum g i j))).

Axiom vang_sum_plus_one_rev :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (l:Z) (m:Z) (r:angle),
  ((i + 1%Z)%Z < j)%Z -> (l = (i + 1%Z)%Z) -> (m = j) -> ((g i) = r) ->
  (forall (k:Z), (((i + 1%Z)%Z <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ang_exp (ang_sum g i j)) =
   (infix_asdt (ang_exp r) (ang_exp (ang_sum f l m)))).

Axiom ang_sum_right_extension_p :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (l:Z) (m:Z) (r:angle),
  ((i + 1%Z)%Z < j)%Z -> (m = (j - 1%Z)%Z) -> (l = i) ->
  ((g (j - 1%Z)%Z) = r) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < (j - 1%Z)%Z)%Z) -> ((f k) = (g k))) ->
  ((ang_add (ang_sum f l m) r) = (ang_sum g i j)).

Axiom vang_sum_right_extension_p :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (l:Z) (m:Z) (r:angle),
  ((i + 1%Z)%Z < j)%Z -> (m = (j - 1%Z)%Z) -> (l = i) ->
  ((g (j - 1%Z)%Z) = r) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < (j - 1%Z)%Z)%Z) -> ((f k) = (g k))) ->
  ((infix_asdt (ang_exp (ang_sum f l m)) (ang_exp r)) =
   (ang_exp (ang_sum g i j))).

Axiom vang_sum_right_extension_rev :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (l:Z) (m:Z) (r:angle),
  ((i + 1%Z)%Z < j)%Z -> (m = (j - 1%Z)%Z) -> (l = i) ->
  ((g (j - 1%Z)%Z) = r) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < (j - 1%Z)%Z)%Z) -> ((f k) = (g k))) ->
  ((ang_exp (ang_sum g i j)) =
   (infix_asdt (ang_exp (ang_sum f l m)) (ang_exp r))).

Axiom ang_sum_cardzero :
  forall (f:Z -> angle) (i:Z) (j:Z), (j <= i)%Z ->
  ((ang_sum f i j) = ang_zero).

Axiom ang_sum_eq_gen :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (i':Z) (j':Z),
  (i < j)%Z -> (i = i') -> (j = j') ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ang_sum f i j) = (ang_sum g i' j')).

Axiom ang_sum_sum_eq_vl :
  forall (f:Z -> Z -> angle) (g:Z -> Z -> angle) (i:Z) (j:Z) (i':Z) (j':Z)
    (l:Z) (l':Z),
  (i < j)%Z -> (j <= l)%Z -> (i = i') -> (j = j') -> (l = l') ->
  (forall (x:Z) (x':Z), ((i <= x)%Z /\ (x < j)%Z) ->
   ((x <= x')%Z /\ (x' < l)%Z) -> (((f x) x') = ((g x) x'))) ->
  ((ang_sum (fun (x:Z) => (ang_sum (f x) x l)) i j) =
   (ang_sum (fun (x:Z) => (ang_sum (g x) x l')) i' j')).

Axiom ang_sum_minus :
  forall (f:Z -> Z) (i:Z) (j:Z) (n:Z), (0%Z <= n)%Z -> (i < j)%Z ->
  ((ang_sum (fun (k:Z) => (int_to_ang (-(f k))%Z n)) i j) =
   (int_to_ang (-(ind_isum f i j))%Z n)).

Axiom multiple_control_as_ang_sum :
  forall (n:Z) (o:angle), (0%Z <= n)%Z -> forall (x:bitvec),
  ((length x) = n) ->
  ((forall (j:Z), ((0%Z <= j)%Z /\ (j < n)%Z) -> (((value x) j) = 1%Z)) ->
   (o = (ang_mult_int o (ind_iproduct (value x) 0%Z n)))) /\
  (~ (forall (j:Z), ((0%Z <= j)%Z /\ (j < n)%Z) -> (((value x) j) = 1%Z)) ->
   (ang_zero = (ang_mult_int o (ind_iproduct (value x) 0%Z n)))).

Axiom multiple_control_as_ang_sum_rev :
  forall (n:Z) (o:angle), (0%Z <= n)%Z -> forall (x:bitvec),
  ((length x) = n) ->
  ((forall (j:Z), ((0%Z <= j)%Z /\ (j < n)%Z) -> (((value x) j) = 1%Z)) ->
   ((ang_mult_int o (ind_iproduct (value x) 0%Z n)) = o)) /\
  (~ (forall (j:Z), ((0%Z <= j)%Z /\ (j < n)%Z) -> (((value x) j) = 1%Z)) ->
   ((ang_mult_int o (ind_iproduct (value x) 0%Z n)) = ang_zero)).

Axiom multiple_control_neg_as_ang_sum :
  forall (n:Z), (0%Z <= n)%Z -> forall (x:bitvec), ((length x) = n) ->
  ((forall (j:Z), ((0%Z <= j)%Z /\ (j < n)%Z) -> (((value x) j) = 0%Z)) ->
   ((ang_mult_int (int_to_ang 1%Z 1%Z)
     (ind_iproduct (fun (j:Z) => (1%Z - ((value x) j))%Z) 0%Z n))
    = (int_to_ang 1%Z 1%Z))) /\
  (~ (forall (j:Z), ((0%Z <= j)%Z /\ (j < n)%Z) -> (((value x) j) = 0%Z)) ->
   ((ang_mult_int (int_to_ang 1%Z 1%Z)
     (ind_iproduct (fun (j:Z) => (1%Z - ((value x) j))%Z) 0%Z n))
    = ang_zero)).

Axiom ang_sum_map :
  forall (i:Z) (j:Z) (k:Z) (l:Z) (f:Z -> Z) (t1:Z -> angle), (i < j)%Z ->
  (p_bijective f (to_fset i j) (to_fset k l)) ->
  ((ang_sum t1 k l) = (ang_sum (fun (b:Z) => (t1 (f b))) i j)).

Axiom ang_sum_break :
  forall (f:Z -> angle) (i:Z) (j:Z) (y:Z), ((i <= y)%Z /\ (y <= j)%Z) ->
  ((ang_sum f i j) = (ang_add (ang_sum f i y) (ang_sum f y j))).

Axiom ang_sum_break_zero_l :
  forall (f:Z -> angle) (i:Z) (j:Z) (y:Z), ((i <= y)%Z /\ (y <= j)%Z) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < y)%Z) -> ((f k) = ang_zero)) ->
  ((ang_sum f y j) = (ang_sum f i j)).

Axiom ang_sum_break_zero_lg :
  forall (f:Z -> angle) (g:Z -> angle) (i:Z) (j:Z) (y:Z),
  ((i <= y)%Z /\ (y <= j)%Z) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < y)%Z) -> ((f k) = ang_zero)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((ang_sum f y j) = (ang_sum g i j)).

Axiom ang_sum_break_zero_lg_params :
  forall (f:bitvec -> bitvec -> Z -> Z -> angle)
    (g:bitvec -> bitvec -> Z -> Z -> angle) (i:Z) (j:Z) (s:Z) (r:Z),
  (0%Z <= s)%Z -> (0%Z <= r)%Z ->
  (forall (x:bitvec) (z:bitvec), forall (a:Z) (k:Z), ((length x) = s) ->
   ((length z) = r) -> ((i <= a)%Z /\ (a < j)%Z) ->
   ((i <= k)%Z /\ (k < a)%Z) -> (((((g x) z) a) k) = ang_zero)) ->
  (forall (x:bitvec) (z:bitvec), forall (a:Z) (k:Z), ((length x) = s) ->
   ((length z) = r) -> ((i <= a)%Z /\ (a < j)%Z) ->
   ((a <= k)%Z /\ (k < j)%Z) -> (((((f x) z) a) k) = ((((g x) z) a) k))) ->
  forall (x:bitvec) (z:bitvec), forall (a:Z), ((length x) = s) ->
  ((length z) = r) -> ((i <= a)%Z /\ (a < j)%Z) ->
  ((ang_sum (fun (k:Z) => ((((f x) z) a) k)) a j) =
   (ang_sum (fun (k:Z) => ((((g x) z) a) k)) i j)).

Axiom ang_sum_break_zero_l_params :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> a -> Z -> angle) (g:a -> a -> Z -> angle) (i:Z) (j:Z) (l:Z),
  ((i <= l)%Z /\ (l <= j)%Z) -> forall (x:a) (y:a),
  (forall (k:Z), ((i <= k)%Z /\ (k < l)%Z) -> ((((f x) y) k) = ang_zero)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) ->
   ((((f x) y) k) = (((g x) y) k))) ->
  ((ang_sum ((g x) y) i j) = (ang_sum ((f x) y) l j)).

Axiom ang_sum_break_param :
  forall (f:Z -> Z -> angle) (i:Z) (j:Z), (i < j)%Z -> forall (y:Z),
  ((i <= y)%Z /\ (y < j)%Z) ->
  ((ang_sum (f y) i j) = (ang_add (ang_sum (f y) i y) (ang_sum (f y) y j))).

Axiom ang_sum_neutral_param_r :
  forall (f:Z -> Z -> angle) (i:Z) (j:Z), (i < j)%Z -> forall (y:Z),
  ((i <= y)%Z /\ (y < j)%Z) ->
  (forall (k:Z), ((y <= k)%Z /\ (k < j)%Z) -> (((f y) k) = ang_zero)) ->
  ((ang_sum (f y) y j) = ang_zero).

Axiom ang_sum_neutral_param_l :
  forall (f:Z -> Z -> angle) (i:Z) (j:Z), (i < j)%Z -> forall (y:Z),
  ((i <= y)%Z /\ (y < j)%Z) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < y)%Z) -> (((f y) k) = ang_zero)) ->
  ((ang_sum (f y) i y) = ang_zero).

Axiom ang_sum_transl :
  forall (f:Z -> angle) (i:Z) (j:Z) (k:Z), (i < j)%Z ->
  ((ang_sum f i j) =
   (ang_sum (fun (b:Z) => (f (b + k)%Z)) (i - k)%Z (j - k)%Z)).

Axiom ang_sum_transl_one :
  forall (f:Z -> angle) (i:Z) (j:Z), (i < j)%Z ->
  ((ang_sum f i j) =
   (ang_sum (fun (b:Z) => (f (b - 1%Z)%Z)) (i + 1%Z)%Z (j + 1%Z)%Z)).

Axiom ang_exp_eq :
  forall (o:angle) (o':angle), (o = o') -> ((ang_exp o) = (ang_exp o')).

Axiom ang_sum_to_ind_isum :
  forall (f:Z -> Z) (n:Z) (i:Z) (j:Z), (0%Z <= n)%Z -> (i < j)%Z ->
  ((ang_sum (fun (k:Z) => (int_to_ang (f k) n)) i j) =
   (int_to_ang (ind_isum f i j) n)).

Axiom ind_isum_to_d_sum :
  forall (f:Z -> Z) (n:Z) (i:Z) (j:Z), (0%Z <= n)%Z -> (i < j)%Z ->
  ((int_to_ang (ind_isum f i j) n) =
   (ang_sum (fun (k:Z) => (int_to_ang (f k) n)) i j)).

Axiom ang_sum_int_decomp :
  forall (bvx:Z -> Z) (k:Z) (n:Z), (0%Z < n)%Z -> (binary bvx) ->
  ((ang_sum
    (fun (x:Z) =>
     (int_to_ang (((bvx x) * (power 2%Z ((n - x)%Z - 1%Z)%Z))%Z * k)%Z n))
    0%Z n)
   = (int_to_ang ((bin_to_int bvx n) * k)%Z n)).

Axiom ang_sum_int_decomp_gen :
  forall (bvx:Z -> Z) (n:Z), (0%Z < n)%Z -> (binary bvx) -> forall (k:Z),
  ((ang_sum
    (fun (x:Z) =>
     (int_to_ang (((bvx x) * (power 2%Z ((n - x)%Z - 1%Z)%Z))%Z * k)%Z n))
    0%Z n)
   = (int_to_ang ((bin_to_int bvx n) * k)%Z n)).

Axiom ang_sum_bv_to_int :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec), forall (k:Z),
  ((length x) = n) ->
  ((ang_sum
    (fun (i:Z) =>
     (int_to_ang ((((value x) i) * (power 2%Z ((n - i)%Z - 1%Z)%Z))%Z * k)%Z
      n))
    0%Z n)
   = (int_to_ang ((bv_to_int x) * k)%Z n)).

Axiom ang_sum_bv_to_int_ :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec), forall (k:Z),
  ((length x) = n) ->
  ((ang_sum
    (fun (i:Z) =>
     (int_to_ang ((((value x) i) * (power_ 2%Z ((n - i)%Z - 1%Z)%Z))%Z * k)%Z
      n))
    0%Z n)
   = (int_to_ang ((bv_to_int x) * k)%Z n)).

(* Why3 assumption *)
Definition bv_inversion (bv:bitvec) : bitvec :=
  make_bv (fun (k:Z) => ((value bv) (((length bv) - k)%Z - 1%Z)%Z))
  (length bv).

Axiom bv_inversion_spec :
  forall (bv:bitvec), ((length (bv_inversion bv)) = (length bv)).

Axiom bv_inversion_spec1 :
  forall (bv:bitvec), forall (k:Z), (in_range (bv_inversion bv) k) ->
  (((value (bv_inversion bv)) k) =
   ((value bv) (((length bv) - k)%Z - 1%Z)%Z)).

Axiom bv_inversion_value :
  forall (bv:bitvec) (i:Z),
  (((value (bv_inversion bv)) i) =
   ((value bv) (((length bv) - i)%Z - 1%Z)%Z)).

Axiom bv_inversion_invol :
  forall (bv:bitvec), ((bv_inversion (bv_inversion bv)) = bv).

Parameter int_bit_inversion: Z -> Z -> Z.

Axiom int_bit_inversion_def :
  forall (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_bit_inversion i n) = (bv_to_int (bv_inversion (int_to_bv i n)))).

Axiom int_bit_inversion_spec :
  forall (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  (0%Z <= (int_bit_inversion i n))%Z.

Axiom int_bit_inversion_spec1 :
  forall (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_bit_inversion i n) < (power 2%Z n))%Z.

Axiom int_bit_inversion_invol :
  forall (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_bit_inversion (int_bit_inversion i n) n) = i).

Axiom int_bit_inversion_onebit :
  forall (i:Z), ((0%Z <= i)%Z /\ (i < 2%Z)%Z) ->
  ((int_bit_inversion i 1%Z) = i).

Axiom int_bit_inversion_zero :
  forall (i:Z) (n:Z), (0%Z < n)%Z -> (0%Z = i) ->
  ((int_bit_inversion i n) = 0%Z).

Axiom bv_to_int_sum_inversion :
  forall (bv:bitvec), (0%Z < (length bv))%Z ->
  ((int_bit_inversion (bv_to_int bv) (length bv)) =
   (ind_isum
    (fun (k:Z) =>
     (((value bv) (((length bv) - k)%Z - 1%Z)%Z) *
      (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
    0%Z (length bv))).

Axiom bv_to_int_sum_inversion_inc :
  forall (bv:bitvec), (0%Z < (length bv))%Z ->
  ((int_bit_inversion (bv_to_int bv) (length bv)) =
   (ind_isum (fun (k:Z) => (((value bv) k) * (power 2%Z k))%Z) 0%Z
    (length bv))).

Axiom inversion_to_int_comm :
  forall (bv:bitvec), (0%Z < (length bv))%Z ->
  ((int_to_bv (int_bit_inversion (bv_to_int bv) (length bv)) (length bv)) =
   (bv_inversion bv)).

Axiom bv_inversion_sum :
  forall (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_bit_inversion i n) =
   (ind_isum
    (fun (k:Z) =>
     (((value (int_to_bv i n)) ((n - k)%Z - 1%Z)%Z) *
      (power 2%Z ((n - 1%Z)%Z - k)%Z))%Z)
    0%Z n)).

Axiom bv_to_int_inversion_sum :
  forall (bv:bitvec),
  ((bv_to_int (bv_inversion bv)) =
   (ind_isum
    (fun (k:Z) =>
     (((value bv) (((length bv) - k)%Z - 1%Z)%Z) *
      (power 2%Z (((length bv) - 1%Z)%Z - k)%Z))%Z)
    0%Z (length bv))).

Axiom bv_to_int_bit_inversion :
  forall (bv:bitvec), (0%Z < (length bv))%Z ->
  ((bv_to_int (bv_inversion bv)) =
   (int_bit_inversion (bv_to_int bv) (length bv))).

Axiom bv_to_int_inversion_sum_inc :
  forall (bv:bitvec), (0%Z < (length bv))%Z ->
  ((bv_to_int (bv_inversion bv)) =
   (ind_isum (fun (k:Z) => (((value bv) k) * (power 2%Z k))%Z) 0%Z
    (length bv))).

Axiom bv_m_to_int_bit_inversion :
  forall (f:Z -> Z) (n:Z), (0%Z < n)%Z ->
  ((bv_to_int (bv_inversion (make_bv_m f n))) =
   (int_bit_inversion (bv_to_int (make_bv_m f n)) n)).

Axiom int_bit_inversion_tail_bits :
  forall (i:Z) (n:Z), (1%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_bit_inversion (tail_bits i n) (n - 1%Z)%Z) =
   (ind_isum
    (fun (k:Z) =>
     (((value (int_to_bv i n)) (n - k)%Z) *
      (power 2%Z ((n - k)%Z - 1%Z)%Z))%Z)
    1%Z n)).

Axiom tail_bits_int_bit_inversion :
  forall (bv:Z -> Z) (n:Z), (1%Z < n)%Z ->
  ((tail_bits (int_bit_inversion (bv_to_int (make_bv_m bv n)) n) n) =
   (ind_isum
    (fun (k:Z) =>
     ((int.EuclideanDivision.mod1 (bv ((n - 1%Z)%Z - k)%Z) 2%Z) *
      (power 2%Z ((n - k)%Z - 1%Z)%Z))%Z)
    1%Z n)).

Axiom int_bit_inversion_ht :
  forall (i:Z) (n:Z), (1%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((int_bit_inversion i n) =
   ((2%Z * (int_bit_inversion (tail_bits i n) (n - 1%Z)%Z))%Z +
    (head_bit i n))%Z).

Axiom bv_inversion_ht :
  forall (f:Z -> Z) (n:Z), (1%Z < n)%Z ->
  ((bv_to_int (bv_inversion (make_bv_m f n))) =
   ((head (make_bv_m f n)) +
    (2%Z * (bv_to_int (bv_inversion (tail (make_bv_m f n)))))%Z)%Z).

Axiom bv_inversion_ht_bv :
  forall (bv:bitvec), (1%Z < (length bv))%Z ->
  ((bv_to_int (bv_inversion bv)) =
   ((head bv) + (2%Z * (bv_to_int (bv_inversion (tail bv))))%Z)%Z).

Axiom bv_to_int_ht :
  forall (f:Z -> Z) (n:Z), (1%Z < n)%Z ->
  ((bv_to_int (make_bv_m f n)) =
   (((power 2%Z (n - 1%Z)%Z) * (head (make_bv_m f n)))%Z +
    (bv_to_int (tail (make_bv_m f n))))%Z).

Axiom bv_inversion_mult_ht :
  forall (fx:Z -> Z) (fy:Z -> Z) (n:Z), (1%Z < n)%Z ->
  (((bv_to_int (make_bv_m fx n)) *
    (bv_to_int (bv_inversion (make_bv_m fy n))))%Z
   =
   ((((head (make_bv_m fy n)) * (bv_to_int (make_bv_m fx n)))%Z +
     ((bv_to_int (tail (make_bv_m fx n))) *
      (2%Z * (bv_to_int (bv_inversion (tail (make_bv_m fy n)))))%Z)%Z)%Z
    +
    ((power 2%Z n) *
     ((head (make_bv_m fx n)) *
      (bv_to_int (bv_inversion (tail (make_bv_m fy n)))))%Z)%Z)%Z).

Axiom bv_inversion_mult_ht_bv :
  forall (bvx:bitvec) (bvy:bitvec), (1%Z < (length bvx))%Z ->
  ((length bvx) = (length bvy)) ->
  (((bv_to_int bvx) * (bv_to_int (bv_inversion bvy)))%Z =
   ((((head bvy) * (bv_to_int bvx))%Z +
     ((bv_to_int (tail bvx)) *
      (2%Z * (bv_to_int (bv_inversion (tail bvy))))%Z)%Z)%Z
    +
    ((power 2%Z (length bvx)) *
     ((head bvx) * (bv_to_int (bv_inversion (tail bvy))))%Z)%Z)%Z).

Axiom real_to_ang_distr_minus :
  forall (x:t) (z:t) (t1:t), forall (y:Z), (real_ x) -> (real_ z) ->
  (real_ t1) ->
  ((ang_add (real_to_ang (infix_asdt x (i_to_t y)))
    (real_to_ang (infix_asdt (infix_asdt (i_to_t y) (prefix_mndt z)) t1)))
   = (ang_mult_int (real_to_ang (infix_mndt x (infix_asdt z t1))) y)).

Axiom ang_sum_int_decomp_gen_rev :
  forall (bvx:Z -> Z) (n:Z), (0%Z < n)%Z -> (binary bvx) -> forall (k:Z),
  ((int_to_ang ((bin_to_int bvx n) * k)%Z n) =
   (ang_sum
    (fun (x:Z) =>
     (int_to_ang (((bvx x) * (power 2%Z ((n - x)%Z - 1%Z)%Z))%Z * k)%Z n))
    0%Z n)).

Axiom Ang_mult_int_exp :
  forall (o:angle), forall (i:Z),
  ((ang_exp (ang_mult_int o i)) = (cpower (ang_exp o) i)).

Axiom ang_mult_int_exp_rev :
  forall (o:angle) (i:Z),
  ((cpower (ang_exp o) i) = (ang_exp (ang_mult_int o i))).

Axiom ang_mult_int_add :
  forall (o:angle) (i:Z) (i':Z),
  ((ang_mult_int o (i + i')%Z) =
   (ang_add (ang_mult_int o i) (ang_mult_int o i'))).

Axiom ang_mult_int_plus_one :
  forall (o:angle) (i:Z),
  ((ang_add o (ang_mult_int o i)) = (ang_mult_int o (i + 1%Z)%Z)).

Axiom sum_ang_mult_int_e :
  forall (o:angle) (f:Z -> Z) (l:Z) (h:Z), (l < h)%Z ->
  ((ang_sum (fun (i:Z) => (ang_mult_int o (f i))) l h) =
   (ang_mult_int o (ind_isum f l h))).

Axiom real_to_ang_sum :
  forall (phi:Z -> t) (l:Z) (h:Z), (l < h)%Z ->
  (forall (i:Z), ((l <= i)%Z /\ (i < h)%Z) -> real_ (phi i)) ->
  ((ang_sum (fun (i:Z) => (real_to_ang (phi i))) l h) =
   (real_to_ang (ind_sum phi l h))).

Axiom real_to_ang_sum_int :
  forall (f:Z -> Z) (l:Z) (h:Z) (x:t), (l < h)%Z -> (real_ x) ->
  ((ang_sum (fun (i:Z) => (real_to_ang (infix_asdt x (i_to_t (f i))))) l h) =
   (real_to_ang (infix_asdt x (i_to_t (ind_isum f l h))))).

Axiom real_to_ang_sum_int_gen :
  forall (f:Z -> Z) (l:Z) (h:Z), (l < h)%Z -> forall (x:t), (real_ x) ->
  ((ang_sum (fun (i:Z) => (real_to_ang (infix_asdt x (i_to_t (f i))))) l h) =
   (real_to_ang (infix_asdt x (i_to_t (ind_isum f l h))))).

Axiom real_to_ang_bv_inversion :
  forall (ft:Z) (x:t) (y:bitvec), (0%Z < ft)%Z -> (real_ x) ->
  ((length y) = ft) ->
  ((ang_sum
    (fun (i:Z) =>
     (real_to_ang
      (infix_asdt (infix_asdt x (i_to_t (power_ 2%Z i)))
       (i_to_t ((value y) i)))))
    0%Z ft)
   = (real_to_ang (infix_asdt x (i_to_t (bv_to_int (bv_inversion y)))))).

Axiom ang_mult_int_double :
  forall (o:angle) (i:Z),
  ((ang_mult_int o (2%Z * i)%Z) =
   (ang_add (ang_mult_int o i) (ang_mult_int o i))).

Axiom ang_mult_int_inv :
  forall (o:angle), ((ang_mult_int o (-1%Z)%Z) = (ang_inv o)).

Axiom ang_mult_int_one :
  forall (o:angle) (n:Z), (n = 1%Z) -> ((ang_mult_int o n) = o).

Axiom ang_mult_int_inv_rev :
  forall (o:angle), ((ang_inv o) = (ang_mult_int o (-1%Z)%Z)).

Axiom ang_mult_int_comp :
  forall (o:angle) (i:Z) (j:Z),
  ((ang_mult_int (ang_mult_int o i) j) = (ang_mult_int o (i * j)%Z)).

Axiom ang_mult_int_comp_rev :
  forall (o:angle) (i:Z) (j:Z),
  ((ang_mult_int o (i * j)%Z) = (ang_mult_int (ang_mult_int o i) j)).

Axiom add_ang_mult_int :
  forall (o:angle) (o':angle) (i:Z),
  ((ang_add (ang_mult_int o i) (ang_mult_int o' i)) =
   (ang_mult_int (ang_add o o') i)).

Axiom sum_ang_mult_int :
  forall (f:Z -> angle) (i:Z) (l:Z) (h:Z), (l < h)%Z ->
  ((ang_sum (fun (x:Z) => (ang_mult_int (f x) i)) l h) =
   (ang_mult_int (ang_sum f l h) i)).

Axiom ang_sum_bv_to_int_inversion_pre :
  forall (n:Z) (x:bitvec), (0%Z < n)%Z -> ((length x) = n) ->
  forall (theta:t), (real_ theta) ->
  ((real_to_ang (infix_asdt theta (i_to_t (bv_to_int (bv_inversion x))))) =
   (ang_sum
    (fun (i:Z) =>
     (real_to_ang
      (infix_asdt (infix_asdt theta (i_to_t (power_ 2%Z i)))
       (i_to_t ((value x) i)))))
    0%Z n)).

Axiom ang_sum_bv_to_int_inversion :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec), forall (theta:t),
  ((length x) = n) -> (real_ theta) ->
  ((real_to_ang (infix_asdt theta (i_to_t (bv_to_int (bv_inversion x))))) =
   (ang_sum
    (fun (i:Z) =>
     (real_to_ang
      (infix_asdt (infix_asdt theta (i_to_t (power_ 2%Z i)))
       (i_to_t ((value x) i)))))
    0%Z n)).

Axiom ang_sum_bv_to_int_opp_pre :
  forall (n:Z) (x:bitvec), (0%Z < n)%Z -> ((length x) = n) ->
  forall (theta:t), (real_ theta) ->
  ((real_to_ang (infix_asdt theta (i_to_t (-(bv_to_int x))%Z))) =
   (ang_sum
    (fun (i:Z) =>
     (real_to_ang
      (infix_asdt
       (infix_asdt theta (i_to_t (power_ 2%Z ((n - i)%Z - 1%Z)%Z)))
       (i_to_t (-((value x) i))%Z))))
    0%Z n)).

Axiom ang_sum_bv_to_int_opp :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec), forall (theta:t),
  ((length x) = n) -> (real_ theta) ->
  ((real_to_ang (infix_asdt theta (i_to_t (-(bv_to_int x))%Z))) =
   (ang_sum
    (fun (i:Z) =>
     (real_to_ang
      (infix_asdt
       (infix_asdt theta (i_to_t (power_ 2%Z ((n - i)%Z - 1%Z)%Z)))
       (i_to_t (-((value x) i))%Z))))
    0%Z n)).

Axiom ang_sum_bv_to_int_mult_pre :
  forall (n:Z) (x:bitvec), (0%Z < n)%Z -> ((length x) = n) ->
  forall (theta:t), (real_ theta) ->
  ((real_to_ang (infix_asdt theta (i_to_t (bv_to_int x)))) =
   (ang_sum
    (fun (i:Z) =>
     (real_to_ang
      (infix_asdt
       (infix_asdt theta (i_to_t (power_ 2%Z ((n - i)%Z - 1%Z)%Z)))
       (i_to_t ((value x) i)))))
    0%Z n)).

Axiom ang_sum_bv_to_int_mult :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec), forall (theta:t),
  ((length x) = n) -> (real_ theta) ->
  ((real_to_ang (infix_asdt theta (i_to_t (bv_to_int x)))) =
   (ang_sum
    (fun (i:Z) =>
     (real_to_ang
      (infix_asdt
       (infix_asdt theta (i_to_t (power_ 2%Z ((n - i)%Z - 1%Z)%Z)))
       (i_to_t ((value x) i)))))
    0%Z n)).

Axiom rewrite_ang_sum_sum_to_bv_and_inversion :
  forall (n:Z) (x:bitvec) (y:bitvec), (0%Z < n)%Z -> ((length x) = n) ->
  ((length y) = n) ->
  ((ang_sum
    (fun (j:Z) =>
     (ang_sum
      (fun (i:Z) =>
       (int_to_ang
        (((-((value x) i))%Z * ((value y) j))%Z *
         (power_ 2%Z (((n - i)%Z - 1%Z)%Z + j)%Z))%Z
        n))
      j n))
    0%Z n)
   =
   (real_to_ang
    (infix_sldt
     (infix_asdt (i_to_t (-(bv_to_int x))%Z)
      (i_to_t (bv_to_int (bv_inversion y))))
     (i_to_t (power_ 2%Z n))))).

Parameter odd: Z -> bool.

Axiom odd_def :
  forall (n:Z),
  (((int.EuclideanDivision.mod1 n 2%Z) = 1%Z) -> ((odd n) = true)) /\
  (~ ((int.EuclideanDivision.mod1 n 2%Z) = 1%Z) -> ((odd n) = false)).

Axiom odd_spec :
  forall (n:Z), ((odd n) = true) ->
  (n = ((2%Z * (int.EuclideanDivision.div n 2%Z))%Z + 1%Z)%Z).

Axiom odd_spec1 :
  forall (n:Z), ((odd n) = false) ->
  (n = (2%Z * (int.EuclideanDivision.div n 2%Z))%Z).

Parameter even: Z -> bool.

Axiom even_def :
  forall (n:Z),
  (((int.EuclideanDivision.mod1 n 2%Z) = 0%Z) -> ((even n) = true)) /\
  (~ ((int.EuclideanDivision.mod1 n 2%Z) = 0%Z) -> ((even n) = false)).

Axiom even_spec : forall (n:Z), ((even n) = true) -> ~ ((odd n) = true).

Axiom even_spec1 : forall (n:Z), ~ ((odd n) = true) -> ((even n) = true).

Axiom even_to_mod :
  forall (n:Z), ((even n) = true) ->
  ((int.EuclideanDivision.mod1 n 2%Z) = 0%Z).

Axiom odd_to_mod :
  forall (n:Z), ((odd n) = true) ->
  ((int.EuclideanDivision.mod1 n 2%Z) = 1%Z).

Axiom even_or_odd : forall (n:Z), ((even n) = true) \/ ((odd n) = true).

Axiom cpower_minus_tone :
  forall (n:Z), (0%Z <= n)%Z -> ((even n) = true) ->
  ((cpower (prefix_mndt tone) n) = tone).

Axiom cpower_minus_tone1 :
  forall (n:Z), (0%Z <= n)%Z -> ((odd n) = true) ->
  ((cpower (prefix_mndt tone) n) = (prefix_mndt tone)).

Axiom cpower_minus_tone_even :
  forall (n:Z), (0%Z <= n)%Z -> ((even n) = true) ->
  ((cpower (prefix_mndt tone) n) = tone).

Axiom cpower_minus_tone_odd :
  forall (n:Z), (0%Z <= n)%Z -> ((odd n) = true) ->
  ((cpower (prefix_mndt tone) n) = (prefix_mndt tone)).

Axiom not_null_powers_squarert_two :
  forall (i:Z), (0%Z <= i)%Z ->
  ~ ((cpower (square_rt (infix_pldt tone tone)) i) = tzero).

Axiom real_pos_coeff :
  real_ (infix_sldt tone (square_rt (infix_pldt tone tone))).

Axiom coeffs :
  ((infix_sldt (prefix_mndt tone) (square_rt (infix_pldt tone tone))) =
   (prefix_mndt (infix_sldt tone (square_rt (infix_pldt tone tone))))).

Parameter mop: Z -> t.

Axiom mop_def :
  forall (i:Z), (0%Z <= i)%Z -> ((mop i) = (cpower (prefix_mndt tone) i)).

Axiom minus_one_power_values :
  forall (i:Z), (0%Z <= i)%Z -> ((even i) = true) -> ((mop i) = tone).

Axiom minus_one_power_values1 :
  forall (i:Z), (0%Z <= i)%Z -> ((odd i) = true) ->
  ((mop i) = (prefix_mndt tone)).

Axiom factors_mop :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  ((mop (i + j)%Z) = (infix_asdt (mop i) (mop j))).

Axiom factors_mop_rev :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  ((infix_asdt (mop i) (mop j)) = (mop (i + j)%Z)).

Parameter pow_inv_sqrt_2: Z -> t.

Axiom pow_inv_sqrt_2_def :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_sqrt_2 i) =
   (cpower (infix_sldt tone (square_rt (infix_pldt tone tone))) i)).

Axiom pow_inv_sqrt_2_spec :
  forall (i:Z), (0%Z <= i)%Z -> real_ (pow_inv_sqrt_2 i).

Axiom pow_inv_sqrt_2_spec1 :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_sqrt_2 i) = (infix_sldt tone (square_rt (i_to_t (power 2%Z i))))).

Axiom pow_inv_sqrt_2_add :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  ((pow_inv_sqrt_2 (i + j)%Z) =
   (infix_asdt (pow_inv_sqrt_2 i) (pow_inv_sqrt_2 j))).

Parameter pow_inv_2: Z -> t.

Axiom pow_inv_2_def :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_2 i) = (infix_sldt tone (i_to_t (power 2%Z i)))).

Axiom pow_inv_2_spec : forall (i:Z), (0%Z <= i)%Z -> real_ (pow_inv_2 i).

Axiom pow_inv_2_spec1 :
  forall (i:Z), (0%Z <= i)%Z -> infix_gtdt (pow_inv_2 i) tzero.

Axiom pow_inv_2_spec2 :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_2 i) = (pow_inv_sqrt_2 (2%Z * i)%Z)).

Axiom pow_inv_2_spec3 :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_2 i) = (infix_asdt (pow_inv_sqrt_2 i) (pow_inv_sqrt_2 i))).

Axiom pow_inv_2_scal :
  forall (i:Z) (x:matrix t), (0%Z <= i)%Z ->
  ((infix_asdtdt (pow_inv_2 i) x) =
   (infix_asdtdt (pow_inv_sqrt_2 i) (infix_asdtdt (pow_inv_sqrt_2 i) x))).

Axiom pow_inv_2_from_int :
  forall (n:Z), (0%Z <= n)%Z ->
  ((pow_inv_2 n) = (infix_sldt tone (i_to_t (power 2%Z n)))).

Axiom pow_inv_2_add :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  ((pow_inv_2 (i + j)%Z) = (infix_asdt (pow_inv_2 i) (pow_inv_2 j))).

Axiom pow_inv_2_with_ :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_2 i) = (infix_sldt tone (i_to_t (power_ 2%Z i)))).

Axiom pow_inv_2_to_one :
  forall (i:Z), (0%Z <= i)%Z ->
  ((infix_asdt (i_to_t (power_ 2%Z i)) (pow_inv_2 i)) = tone).

Axiom pow_inv_2_one :
  forall (i:Z), (i = 1%Z) ->
  ((i_to_t (power_ 2%Z i)) = (infix_sldt tone (infix_pldt tone tone))).

Axiom pow_inv_2_to_one_gen :
  forall (i:Z) (x:t), (0%Z <= i)%Z -> (x = (i_to_t (power_ 2%Z i))) ->
  ((infix_asdt (pow_inv_2 i) x) = tone).

Axiom pow_inv_to_pow_2 :
  forall (k:Z) (l:Z), (0%Z <= l)%Z -> (l <= k)%Z ->
  ((infix_asdt (pow_inv_2 k) (i_to_t (power_ 2%Z l))) =
   (pow_inv_2 (k - l)%Z)).

Parameter neg_pow_inv_sqrt_2: Z -> t.

Axiom neg_pow_inv_sqrt_2_def :
  forall (i:Z), (0%Z <= i)%Z ->
  ((neg_pow_inv_sqrt_2 i) =
   (cpower (infix_sldt (prefix_mndt tone) (square_rt (infix_pldt tone tone)))
    i)).

Axiom inv_pow_inv_sqrt_2 :
  ((infix_asdt (pow_inv_sqrt_2 1%Z) (square_rt (infix_pldt tone tone))) =
   tone).

Axiom pow_inv_sqrt_2_values :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_sqrt_2 i) =
   (infix_sldt tone (cpower (square_rt (infix_pldt tone tone)) i))).

Axiom neg_pow_inv_sqrt_2_values :
  forall (i:Z), (0%Z <= i)%Z ->
  ((neg_pow_inv_sqrt_2 i) =
   (infix_asdt (mop i)
    (infix_sldt tone (cpower (square_rt (infix_pldt tone tone)) i)))).

Axiom ppos_neg_coeff_values :
  forall (i:Z), (0%Z <= i)%Z -> ((even i) = true) ->
  ((pow_inv_sqrt_2 i) = (neg_pow_inv_sqrt_2 i)).

Axiom ppos_neg_coeff_values1 :
  forall (i:Z), (0%Z <= i)%Z -> ((odd i) = true) ->
  ((pow_inv_sqrt_2 i) = (prefix_mndt (neg_pow_inv_sqrt_2 i))).

Axiom ppos_neg_coeff_values2 :
  forall (i:Z), (0%Z <= i)%Z ->
  ((neg_pow_inv_sqrt_2 i) = (infix_asdt (mop i) (pow_inv_sqrt_2 i))).

Parameter pow_inv_sqrt_2_neg: Z -> t.

Axiom pow_inv_sqrt_2_neg_def :
  forall (i:Z), (0%Z <= i)%Z ->
  ((pow_inv_sqrt_2_neg i) = (prefix_mndt (pow_inv_sqrt_2 i))).

Parameter min_set: (set Z) -> Z.

Axiom min_set_def :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> ((cardinal s) = 1%Z) ->
  ((min_set s) = (choose s)).

Axiom min_set_def1 :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> ~ ((cardinal s) = 1%Z) ->
  ((min_set s) =
   (ZArith.BinInt.Z.min (choose s) (min_set (remove (choose s) s)))).

Axiom min_set_spec :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> mem (min_set s) s.

Axiom min_set_spec1 :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> forall (e:Z), (mem e s) ->
  ((min_set s) <= e)%Z.

Parameter max_set: (set Z) -> Z.

Axiom max_set_def :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> ((cardinal s) = 1%Z) ->
  ((max_set s) = (choose s)).

Axiom max_set_def1 :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> ~ ((cardinal s) = 1%Z) ->
  ((max_set s) =
   (ZArith.BinInt.Z.max (choose s) (max_set (remove (choose s) s)))).

Axiom max_set_spec :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> mem (max_set s) s.

Axiom max_set_spec1 :
  forall (s:set Z), (0%Z < (cardinal s))%Z -> forall (e:Z), (mem e s) ->
  (e <= (max_set s))%Z.

(* Why3 assumption *)
Definition max3 (a:Z) (b:Z) (c:Z) : Z :=
  (ZArith.BinInt.Z.max (ZArith.BinInt.Z.max a b) c).

Axiom max3_spec :
  forall (a:Z) (b:Z) (c:Z),
  ((max3 a b c) = (ZArith.BinInt.Z.max a (ZArith.BinInt.Z.max b c))).

Parameter min_filter: (set Z) -> (Z -> bool) -> Z.

Axiom min_filter_def :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> ((p (min_set s)) = true) ->
  ((min_filter s p) = (min_set s)).

Axiom min_filter_def1 :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> ~ ((p (min_set s)) = true) ->
  ((min_filter s p) = (min_filter (remove (min_set s) s) p)).

Axiom min_filter_spec :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> ((p (min_filter s p)) = true).

Axiom min_filter_spec1 :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> mem (min_filter s p) s.

Axiom min_filter_spec2 :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> forall (e:Z), (mem e s) ->
  ((p e) = true) -> ((min_filter s p) <= e)%Z.

Parameter max_filter: (set Z) -> (Z -> bool) -> Z.

Axiom max_filter_def :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> ((p (max_set s)) = true) ->
  ((max_filter s p) = (max_set s)).

Axiom max_filter_def1 :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> ~ ((p (max_set s)) = true) ->
  ((max_filter s p) = (max_filter (remove (max_set s) s) p)).

Axiom max_filter_spec :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> ((p (max_filter s p)) = true).

Axiom max_filter_spec1 :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> mem (max_filter s p) s.

Axiom max_filter_spec2 :
  forall (s:set Z) (p:Z -> bool),
  (exists e:Z, (mem e s) /\ ((p e) = true)) -> forall (e:Z), (mem e s) ->
  ((p e) = true) -> (e <= (max_filter s p))%Z.

Axiom appr :
  forall (theta:t) (n:Z), (0%Z < n)%Z -> (real_ theta) ->
  ((infix_lseqdt tzero theta) /\ (infix_lsdt theta tone)) ->
  exists k:Z,
  (mem k (to_fset 0%Z (n + 1%Z)%Z)) /\
  (infix_lseqdt
   (modulus (infix_mndt theta (infix_sldt (i_to_t k) (i_to_t n))))
   (infix_sldt tone (i_to_t (n * 2%Z)%Z))).

Parameter max_dyadic: Z -> t -> Z.

Parameter result12: Z -> t -> Z -> bool.

Axiom result_def12 :
  forall (n:Z) (p:t) (x:Z),
  (((result12 n p) x) = true) <->
  (infix_lseqdt (infix_asdt (i_to_t x) (pow_inv_2 n)) p).

Axiom max_dyadic_def :
  forall (n:Z) (p:t), ((infix_lseqdt tzero p) /\ (infix_lsdt p tone)) ->
  ((max_dyadic n p) =
   (max_filter (to_fset 0%Z (power_ 2%Z n)) (result12 n p))).

Axiom max_dyadic_spec :
  forall (n:Z) (p:t), ((infix_lseqdt tzero p) /\ (infix_lsdt p tone)) ->
  (0%Z <= (max_dyadic n p))%Z.

Axiom max_dyadic_spec1 :
  forall (n:Z) (p:t), ((infix_lseqdt tzero p) /\ (infix_lsdt p tone)) ->
  ((max_dyadic n p) < (power_ 2%Z n))%Z.

Axiom max_dyadic_spec2 :
  forall (n:Z) (p:t), ((infix_lseqdt tzero p) /\ (infix_lsdt p tone)) ->
  infix_lseqdt (infix_asdt (i_to_t (max_dyadic n p)) (pow_inv_2 n)) p.

Axiom max_dyadic_spec3 :
  forall (n:Z) (p:t), ((infix_lseqdt tzero p) /\ (infix_lsdt p tone)) ->
  infix_gteqdt (infix_asdt (i_to_t ((max_dyadic n p) + 1%Z)%Z) (pow_inv_2 n))
  p.

Axiom max_dyadic_spec4 :
  forall (n:Z) (p:t), ((infix_lseqdt tzero p) /\ (infix_lsdt p tone)) ->
  forall (i:Z), ((0%Z <= i)%Z /\ (i < (power_ 2%Z n))%Z) ->
  (infix_lseqdt (infix_asdt (i_to_t i) (pow_inv_2 n)) p) ->
  (i <= (max_dyadic n p))%Z.

Axiom rewrite_ang_sum_sum_to_bv_and_inversion_gen :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = n) ->
  ((ang_sum
    (fun (j:Z) =>
     (ang_sum
      (fun (i:Z) =>
       (int_to_ang
        (((-((value x) i))%Z * ((value y) j))%Z *
         (power_ 2%Z (((n - i)%Z - 1%Z)%Z + j)%Z))%Z
        n))
      j n))
    0%Z n)
   =
   (real_to_ang
    (infix_asdt
     (infix_asdt (i_to_t (-(bv_to_int x))%Z)
      (i_to_t (bv_to_int (bv_inversion y))))
     (pow_inv_2 n)))).

(* Why3 assumption *)
Definition ang_substr (o:angle) (o':angle) : angle := ang_add o (ang_inv o').

Axiom ang_substr_inv :
  forall (o:angle) (o':angle),
  ((ang_substr o (ang_mult_int o' (-1%Z)%Z)) = (ang_add o o')).

Axiom ang_mult_int_distr :
  forall (o:angle) (o':angle) (n:Z),
  ((ang_mult_int (ang_add o o') n) =
   (ang_add (ang_mult_int o n) (ang_mult_int o' n))).

Axiom ang_mult_int_distr_rev :
  forall (o:angle) (o':angle) (n1:Z) (n2:Z),
  ((ang_add (ang_mult_int o n1) (ang_mult_int o' n2)) =
   (ang_mult_int o (n1 + n2)%Z)).

Axiom ang_add_assoc :
  forall (o:angle) (o':angle) (o'':angle),
  ((ang_add o (ang_add o' o'')) = (ang_add (ang_add o o') o'')).

Axiom ang_add_assoc_rev :
  forall (o:angle) (o':angle) (o'':angle),
  ((ang_add (ang_add o o') o'') = (ang_add o (ang_add o' o''))).

Axiom ang_add_own_inv :
  forall (o:angle), ((ang_add (ang_mult_int o (-1%Z)%Z) o) = ang_zero).

Parameter result13: bitvec -> bitvec -> Z -> Z.

Axiom result_def13 :
  forall (bv1:bitvec) (bv2:bitvec) (i:Z),
  ((((length bv1) <= i)%Z /\ (i < ((length bv1) + (length bv2))%Z)%Z) ->
   (((result13 bv1 bv2) i) = ((value bv2) (i - (length bv1))%Z))) /\
  (~ (((length bv1) <= i)%Z /\ (i < ((length bv1) + (length bv2))%Z)%Z) ->
   (((result13 bv1 bv2) i) = ((value bv1) i))).

(* Why3 assumption *)
Definition concat (bv1:bitvec) (bv2:bitvec) : bitvec :=
  make_bv (result13 bv1 bv2) ((length bv1) + (length bv2))%Z.

Axiom concat_spec :
  forall (bv1:bitvec) (bv2:bitvec),
  ((length (concat bv1 bv2)) = ((length bv1) + (length bv2))%Z).

Axiom concat_spec1 :
  forall (bv1:bitvec) (bv2:bitvec), forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
  (((value (concat bv1 bv2)) i) = ((value bv1) i)).

Axiom concat_spec2 :
  forall (bv1:bitvec) (bv2:bitvec), forall (i:Z),
  ((length (concat bv1 bv2)) <= i)%Z ->
  (((value (concat bv1 bv2)) i) = ((value bv1) i)).

Axiom concat_spec3 :
  forall (bv1:bitvec) (bv2:bitvec), forall (i:Z),
  (((length bv1) <= i)%Z /\ (i < (length (concat bv1 bv2)))%Z) ->
  (((value (concat bv1 bv2)) i) = ((value bv2) (i - (length bv1))%Z)).

Axiom concat_length :
  forall (bv1:bitvec) (bv2:bitvec),
  ((length (concat bv1 bv2)) = ((length bv1) + (length bv2))%Z).

Parameter hpart: bitvec -> Z -> bitvec.

Axiom hpart_def :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z ->
  ((hpart bv m) = (make_bv (value bv) m)).

Axiom hpart_spec :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> ((length (hpart bv m)) = m).

Axiom hpart_spec1 :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> ((length bv) = m) ->
  ((hpart bv m) = bv).

Axiom hpart_spec2 :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < m)%Z) -> (((value (hpart bv m)) k) = ((value bv) k)).

Axiom hpart_spec3 :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> forall (k:Z), ~ (0%Z <= k)%Z ->
  (((value (hpart bv m)) k) = 0%Z).

Axiom hpart_spec4 :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> forall (k:Z), ~ (k < m)%Z ->
  (((value (hpart bv m)) k) = 0%Z).

Axiom hpart_value :
  forall (bv:bitvec) (m:Z) (i:Z), (0%Z <= m)%Z ->
  (((0%Z <= i)%Z /\ (i < m)%Z) ->
   (((value (hpart bv m)) i) = ((value bv) i))) /\
  (~ ((0%Z <= i)%Z /\ (i < m)%Z) -> (((value (hpart bv m)) i) = 0%Z)).

Axiom hpart_value_b :
  forall (bv:bitvec) (m:Z) (i:Z), ((0%Z <= i)%Z /\ (i < m)%Z) ->
  (((value (hpart bv m)) i) = ((value bv) i)).

Parameter tpart: bitvec -> Z -> bitvec.

Axiom tpart_def :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> (m <= (length bv))%Z ->
  ((tpart bv m) =
   (make_bv (fun (k:Z) => ((value bv) (k + m)%Z)) ((length bv) - m)%Z)).

Axiom tpart_def1 :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> ~ (m <= (length bv))%Z ->
  ((tpart bv m) = (make_bv (fun (k:Z) => ((value bv) (k + m)%Z)) 0%Z)).

Axiom tpart_spec :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> (m <= (length bv))%Z ->
  ((length (tpart bv m)) = ((length bv) - m)%Z).

Axiom tpart_spec1 :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> ((length bv) < m)%Z ->
  ((length (tpart bv m)) = 0%Z).

Axiom tpart_spec2 :
  forall (bv:bitvec) (m:Z), (0%Z <= m)%Z -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < (length (tpart bv m)))%Z) ->
  (((value (tpart bv m)) k) = ((value bv) (k + m)%Z)).

Parameter htpart: bitvec -> Z -> Z -> bitvec.

Axiom htpart_def :
  forall (bv:bitvec) (k:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((htpart bv k n) = (make_bv (fun (i:Z) => ((value bv) (k + i)%Z)) n)).

Axiom htpart_spec :
  forall (bv:bitvec) (k:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((length (htpart bv k n)) = n).

Axiom htpart_spec1 :
  forall (bv:bitvec) (k:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) ->
  (((value (htpart bv k n)) i) = ((value bv) (k + i)%Z)).

Axiom tpart_value :
  forall (bv:bitvec) (m:Z) (i:Z), (0%Z <= m)%Z ->
  (((0%Z <= i)%Z /\ (i < ((length bv) - m)%Z)%Z) ->
   (((value (tpart bv m)) i) = ((value bv) (i + m)%Z))) /\
  (~ ((0%Z <= i)%Z /\ (i < ((length bv) - m)%Z)%Z) ->
   (((value (tpart bv m)) i) = 0%Z)).

Axiom tpart_value_b :
  forall (bv:bitvec) (m:Z) (i:Z), (0%Z <= m)%Z ->
  ((0%Z <= i)%Z /\ (i < ((length bv) - m)%Z)%Z) ->
  (((value (tpart bv m)) i) = ((value bv) (i + m)%Z)).

Axiom tpart_length :
  forall (bv:bitvec) (m:Z), ((0%Z <= m)%Z /\ (m <= (length bv))%Z) ->
  ((length (tpart bv m)) = ((length bv) - m)%Z).

Axiom htpart_value :
  forall (bv:bitvec) (k:Z) (n:Z) (i:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  (((0%Z <= i)%Z /\ (i < n)%Z) ->
   (((value (htpart bv k n)) i) = ((value bv) (k + i)%Z))) /\
  (~ ((0%Z <= i)%Z /\ (i < n)%Z) -> (((value (htpart bv k n)) i) = 0%Z)).

Axiom htpart_value_b :
  forall (bv:bitvec) (k:Z) (n:Z) (i:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < n)%Z) ->
  (((value (htpart bv k n)) i) = ((value bv) (k + i)%Z)).

Axiom htpart_length :
  forall (bv:bitvec) (k:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((length (htpart bv k n)) = n).

Axiom tpart_length_gen :
  forall (bv:bitvec) (m:Z) (l:Z), ((0%Z <= m)%Z /\ (m <= (length bv))%Z) ->
  (l = ((length bv) - m)%Z) -> ((length (tpart bv m)) = l).

Axiom concat_value_left :
  forall (bv1:bitvec) (bv2:bitvec) (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
  (((value (concat bv1 bv2)) i) = ((value bv1) i)).

Axiom concat_value :
  forall (bv1:bitvec) (bv2:bitvec) (i:Z),
  ((((length bv1) <= i)%Z /\ (i < ((length bv1) + (length bv2))%Z)%Z) ->
   (((value (concat bv1 bv2)) i) = ((value bv2) (i - (length bv1))%Z))) /\
  (~ (((length bv1) <= i)%Z /\ (i < ((length bv1) + (length bv2))%Z)%Z) ->
   (((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
    (((value (concat bv1 bv2)) i) = ((value bv1) i))) /\
   (~ ((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
    (((value (concat bv1 bv2)) i) = 0%Z))).

Axiom concat_value_right :
  forall (bv1:bitvec) (bv2:bitvec) (i:Z),
  (((length bv1) <= i)%Z /\ (i < ((length bv1) + (length bv2))%Z)%Z) ->
  (((value (concat bv1 bv2)) i) = ((value bv2) (i - (length bv1))%Z)).

Axiom concat_value_out :
  forall (bv1:bitvec) (bv2:bitvec) (i:Z),
  (((length bv1) + (length bv2))%Z < i)%Z ->
  (((value (concat bv1 bv2)) i) = ((value bv1) i)).

Axiom concat_value_tpart :
  forall (bv1:bitvec) (bv2:bitvec) (i:Z),
  (((length bv1) <= i)%Z /\ (i < (length bv2))%Z) ->
  (((value (concat bv1 (tpart bv2 (length bv1)))) i) = ((value bv2) i)).

Axiom concat_value_ht :
  forall (bv1:bitvec) (bv2:bitvec) (bv3:bitvec) (bv4:bitvec) (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv3))%Z) -> ~ (0%Z <= i)%Z ->
  ~ ((length bv1) <= i)%Z -> (bv2 = (tpart bv3 (length bv1))) ->
  (((value (concat bv1 bv2)) i) = ((value bv4) i)).

Axiom concat_value_ht1 :
  forall (bv1:bitvec) (bv2:bitvec) (bv3:bitvec) (bv4:bitvec) (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv3))%Z) -> ~ (0%Z <= i)%Z ->
  (((value bv3) i) = ((value bv4) i)) -> (bv2 = (tpart bv3 (length bv1))) ->
  (((value (concat bv1 bv2)) i) = ((value bv4) i)).

Axiom concat_value_ht2 :
  forall (bv1:bitvec) (bv2:bitvec) (bv3:bitvec) (bv4:bitvec) (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv3))%Z) -> ~ (i < (length bv1))%Z ->
  ~ ((length bv1) <= i)%Z -> (bv2 = (tpart bv3 (length bv1))) ->
  (((value (concat bv1 bv2)) i) = ((value bv4) i)).

Axiom concat_value_ht3 :
  forall (bv1:bitvec) (bv2:bitvec) (bv3:bitvec) (bv4:bitvec) (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv3))%Z) -> ~ (i < (length bv1))%Z ->
  (((value bv3) i) = ((value bv4) i)) -> (bv2 = (tpart bv3 (length bv1))) ->
  (((value (concat bv1 bv2)) i) = ((value bv4) i)).

Axiom concat_value_ht4 :
  forall (bv1:bitvec) (bv2:bitvec) (bv3:bitvec) (bv4:bitvec) (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv3))%Z) ->
  (((value bv1) i) = ((value bv4) i)) -> ~ ((length bv1) <= i)%Z ->
  (bv2 = (tpart bv3 (length bv1))) ->
  (((value (concat bv1 bv2)) i) = ((value bv4) i)).

Axiom concat_value_ht5 :
  forall (bv1:bitvec) (bv2:bitvec) (bv3:bitvec) (bv4:bitvec) (i:Z),
  ((0%Z <= i)%Z /\ (i < (length bv3))%Z) ->
  (((value bv1) i) = ((value bv4) i)) ->
  (((value bv3) i) = ((value bv4) i)) -> (bv2 = (tpart bv3 (length bv1))) ->
  (((value (concat bv1 bv2)) i) = ((value bv4) i)).

Axiom concat_ht1 :
  forall (bv1:bitvec) (bv2:bitvec) (bv3:bitvec) (bv4:bitvec),
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
   (((value bv1) i) = ((value bv4) i))) ->
  (forall (i:Z), ((length bv1) <= i)%Z ->
   (((value bv3) i) = ((value bv4) i))) ->
  ((length bv4) = ((length bv1) + (length bv2))%Z) ->
  (((length bv1) + (length bv2))%Z <= (length bv3))%Z ->
  (bv2 = (tpart bv3 (length bv1))) -> ((concat bv1 bv2) = bv4).

Axiom set_concat :
  forall (bv1:bitvec) (bv2:bitvec) (bv4:bitvec),
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
   (((value bv1) i) = ((value bv4) i))) ->
  (forall (i:Z), ((length bv1) <= i)%Z ->
   (((value bv2) (i - (length bv1))%Z) = ((value bv4) i))) ->
  ((length bv4) = ((length bv1) + (length bv2))%Z) ->
  ((concat bv1 bv2) = bv4).

Axiom concat_m :
  forall (bv1:bitvec) (bv2:bitvec) (i1:Z) (i2:Z), (0%Z < i1)%Z ->
  (0%Z < i2)%Z -> ((length bv1) = i1) -> ((length bv2) = i2) ->
  ((concat (make_bv_m (value bv1) i1) (make_bv_m (value bv2) i2)) =
   (make_bv_m (value (concat bv1 bv2)) (i1 + i2)%Z)).

Axiom concat_comm :
  forall (bv1:bitvec) (bv2:bitvec),
  ((hpart (concat bv1 bv2) (length bv1)) = bv1).

Axiom concat_comm1 :
  forall (bv1:bitvec) (bv2:bitvec),
  ((tpart (concat bv1 bv2) (length bv1)) = bv2).

Axiom concat_and_rec :
  forall (bv:bitvec) (i:Z), ((0%Z <= i)%Z /\ (i <= (length bv))%Z) ->
  ((concat (hpart bv i) (tpart bv i)) = bv).

Parameter concat_int_bv: bitvec -> Z -> Z -> bitvec.

Axiom concat_int_bv_def :
  forall (bv:bitvec) (i:Z) (n:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((concat_int_bv bv i n) = (concat bv (int_to_bv i n))).

Axiom concat_int_to_bv_value :
  forall (bv:bitvec) (i:Z) (n:Z) (j:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= j)%Z /\ (j < (length (concat_int_bv bv i n)))%Z) ->
  (j < (length bv))%Z ->
  (((value (concat_int_bv bv i n)) j) = ((value bv) j)).

Axiom bv_to_int_concat :
  forall (bvx:bitvec) (bvy:bitvec),
  ((bv_to_int (concat bvx bvy)) =
   (((power 2%Z (length bvy)) * (bv_to_int bvx))%Z + (bv_to_int bvy))%Z).

Axiom concat_fin :
  forall (f1:Z -> Z) (f2:Z -> Z) (l1:Z) (l2:Z), (0%Z <= l1)%Z ->
  (0%Z <= l2)%Z -> (binary f1) -> (binary f2) ->
  ((make_bv
    ((((fun (y0:Z -> Z) (y1:Z -> Z) (y2:Z) (y3:Z) =>
        (concat_fun y0 y1 y2 y3))
       f1)
      f2)
     l1)
    (l1 + l2)%Z)
   = (concat (make_bv f1 l1) (make_bv f2 l2))).

Axiom bin_to_int_concat :
  forall (f1:Z -> Z) (f2:Z -> Z) (l1:Z) (l2:Z), (0%Z <= l1)%Z ->
  (0%Z <= l2)%Z -> (binary f1) -> (binary f2) ->
  ((bin_to_int
    ((((fun (y0:Z -> Z) (y1:Z -> Z) (y2:Z) (y3:Z) =>
        (concat_fun y0 y1 y2 y3))
       f1)
      f2)
     l1)
    (l1 + l2)%Z)
   = (((power 2%Z l2) * (bin_to_int f1 l1))%Z + (bin_to_int f2 l2))%Z).

Axiom bijective_concat :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  p_bijective (fun (o:(bitvec* bitvec)%type) => (concat (fir o) (sec o)))
  (cartesian_product (n_bvs i) (n_bvs j)) (n_bvs (i + j)%Z).

Axiom bijective_concat1 :
  forall (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  p_bijective (fun (x:bitvec) => (hpart x i, tpart x i)) (n_bvs (i + j)%Z)
  (cartesian_product (n_bvs i) (n_bvs j)).

Axiom bv_to_int_hpart :
  forall (bv:bitvec) (l:Z), ((0%Z <= l)%Z /\ (l <= (length bv))%Z) ->
  ((bv_to_int (hpart bv l)) =
   (int.EuclideanDivision.div (bv_to_int bv) (power 2%Z ((length bv) - l)%Z))).

Axiom bv_to_int_tpart :
  forall (bv:bitvec) (l:Z), ((0%Z <= l)%Z /\ (l <= (length bv))%Z) ->
  ((bv_to_int (tpart bv l)) =
   (int.EuclideanDivision.mod1 (bv_to_int bv)
    (power 2%Z ((length bv) - l)%Z))).

Axiom gate : Type.
Parameter gate_WhyType : WhyType gate.
Existing Instance gate_WhyType.

Parameter size: gate -> Z.

Axiom size_spec : forall (c:gate), (0%Z <= (size c))%Z.

Parameter range: gate -> Z.

Axiom range_spec : forall (c:gate), (0%Z <= (range c))%Z.

Parameter basis_ket: gate -> bitvec -> bitvec -> bitvec.

Axiom basis_ket_spec :
  forall (c:gate) (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
  ((length y) = (range c)) -> ((length (basis_ket c x y)) = (size c)).

(* Why3 assumption *)
Definition basis_ket_i (c:gate) (x:bitvec) (y:bitvec) (i:Z) : Z :=
  (value (basis_ket c x y)) i.

Axiom basis_ket_i_spec :
  forall (c:gate) (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
  ((length y) = (range c)) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
  ((basis_ket_i c x y i) = ((value (basis_ket c x y)) i)).

Axiom basis_ket_from_i :
  forall (c:gate) (x:bitvec) (y:bitvec) (z:bitvec),
  ((length x) = (size c)) -> ((length y) = (range c)) ->
  ((length z) = (size c)) ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   (((value z) i) = (basis_ket_i c x y i))) ->
  ((basis_ket c x y) = z).

Parameter ang_ind_i: gate -> bitvec -> bitvec -> Z -> angle.

Parameter ang_ind_bound: gate -> Z.

(* Why3 assumption *)
Definition ang_ind (c:gate) (x:bitvec) (y:bitvec) : angle :=
  ang_sum
  ((((fun (y0:gate) (y1:bitvec) (y2:bitvec) (y3:Z) =>
      (ang_ind_i y0 y1 y2 y3))
     c)
    x)
   y)
  0%Z (ang_ind_bound c).

(* Why3 assumption *)
Definition ang_ind_exp (c:gate) (x:bitvec) (y:bitvec) : t :=
  ang_exp (ang_ind c x y).

Parameter phase: angle -> gate.

Axiom phase_spec : forall (o:angle), ((range (phase o)) = 0%Z).

Axiom phase_spec1 : forall (o:angle), ((size (phase o)) = 1%Z).

Axiom phase_spec2 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), ((length x) = 1%Z) ->
  ((length y) = 0%Z) -> ((basis_ket (phase o) x y) = x).

Axiom phase_spec3 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = 1%Z) -> ((length y) = 0%Z) -> (i = 0%Z) ->
  ((basis_ket_i (phase o) x y i) = ((value x) i)).

Axiom phase_spec4 : forall (o:angle), ((ang_ind_bound (phase o)) = 1%Z).

Axiom phase_spec5 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = 1%Z) -> ((length y) = 0%Z) -> (i = 0%Z) ->
  ((ang_ind_i (phase o) x y i) = o).

Axiom phase_spec6 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), ((length x) = 1%Z) ->
  ((length y) = 0%Z) -> ((ang_ind (phase o) x y) = o).

Parameter rz: angle -> gate.

Axiom rz_spec : forall (o:angle), ((range (rz o)) = 0%Z).

Axiom rz_spec1 : forall (o:angle), ((size (rz o)) = 1%Z).

Axiom rz_spec2 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), ((length x) = 1%Z) ->
  ((length y) = 0%Z) -> ((basis_ket (rz o) x y) = x).

Axiom rz_spec3 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = 1%Z) -> ((length y) = 0%Z) -> (i = 0%Z) ->
  ((basis_ket_i (rz o) x y i) = ((value x) i)).

Axiom rz_spec4 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), ((length x) = 1%Z) ->
  ((length y) = 0%Z) ->
  ((ang_ind (rz o) x y) = (phase_inv_ (1%Z - ((value x) 0%Z))%Z o)).

Axiom rz_spec5 : forall (o:angle), ((ang_ind_bound (rz o)) = 1%Z).

Axiom rz_spec6 :
  forall (o:angle), forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = 1%Z) -> ((length y) = 0%Z) -> (i = 0%Z) ->
  ((ang_ind_i (rz o) x y i) = (phase_inv_ (1%Z - ((value x) i))%Z o)).

Parameter hadamard: gate.

Axiom hadamard_def : ((range hadamard) = 1%Z).

Axiom hadamard_def1 : ((size hadamard) = 1%Z).

Axiom hadamard_def2 :
  forall (x:bitvec) (y:bitvec), ((length x) = 1%Z) -> ((length y) = 1%Z) ->
  ((basis_ket hadamard x y) = y).

Axiom hadamard_def3 :
  forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = 1%Z) ->
  ((length y) = 1%Z) -> (i = 0%Z) ->
  ((basis_ket_i hadamard x y i) = ((value y) i)).

Axiom hadamard_def4 :
  forall (x:bitvec) (y:bitvec), ((length x) = 1%Z) -> ((length y) = 1%Z) ->
  ((ang_ind hadamard x y) =
   (int_to_ang (((value x) 0%Z) * ((value y) 0%Z))%Z 1%Z)).

Axiom hadamard_def5 : ((ang_ind_bound hadamard) = 1%Z).

Axiom hadamard_def6 :
  forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = 1%Z) ->
  ((length y) = 1%Z) -> (i = 0%Z) ->
  ((ang_ind_i hadamard x y i) =
   (int_to_ang (((value x) i) * ((value y) i))%Z 1%Z)).

Parameter cnot: gate.

Axiom cnot_def : ((range cnot) = 0%Z).

Axiom cnot_def1 : ((size cnot) = 2%Z).

Axiom cnot_def2 :
  forall (x:bitvec) (y:bitvec), ((length x) = 2%Z) -> ((length y) = 0%Z) ->
  ((((value x) 0%Z) = 0%Z) -> ((basis_ket cnot x y) = x)) /\
  (~ (((value x) 0%Z) = 0%Z) ->
   ((((value x) 1%Z) = 0%Z) -> ((basis_ket cnot x y) = (int_to_bv 3%Z 2%Z))) /\
   (~ (((value x) 1%Z) = 0%Z) ->
    ((basis_ket cnot x y) = (int_to_bv 2%Z 2%Z)))).

Axiom cnot_def3 :
  forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = 2%Z) ->
  ((length y) = 1%Z) -> (i = 0%Z) ->
  ((basis_ket_i cnot x y i) = ((value x) i)).

Axiom cnot_def4 :
  forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = 2%Z) ->
  ((length y) = 1%Z) -> (i = 1%Z) ->
  ((basis_ket_i cnot x y i) = (xor_i ((value x) 0%Z) ((value x) i))).

Axiom cnot_def5 :
  forall (x:bitvec) (y:bitvec), ((length x) = 2%Z) -> ((length y) = 0%Z) ->
  ((ang_ind cnot x y) = ang_zero).

Axiom cnot_def6 : ((ang_ind_bound cnot) = 1%Z).

Axiom cnot_def7 :
  forall (x:bitvec) (y:bitvec), ((length x) = 2%Z) -> ((length y) = 0%Z) ->
  ((ang_ind_i cnot x y 0%Z) = ang_zero).

Parameter parallel: gate -> gate -> gate.

Axiom parallel_spec :
  forall (d:gate) (e:gate), ((size (parallel d e)) = ((size d) + (size e))%Z).

Axiom parallel_spec1 :
  forall (d:gate) (e:gate),
  ((range (parallel d e)) = ((range d) + (range e))%Z).

Axiom parallel_spec2 :
  forall (d:gate) (e:gate), forall (x:bitvec) (y:bitvec),
  ((length x) = (size (parallel d e))) ->
  ((length y) = (range (parallel d e))) ->
  ((basis_ket (parallel d e) x y) =
   (concat (basis_ket d (hpart x (size d)) (hpart y (range d)))
    (basis_ket e (tpart x (size d)) (tpart y (range d))))).

Axiom parallel_spec3 :
  forall (d:gate) (e:gate), forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = (size (parallel d e))) ->
  ((length y) = (range (parallel d e))) ->
  ((0%Z <= i)%Z /\ (i < ((size d) + (size e))%Z)%Z) ->
  ((i < (size d))%Z ->
   ((basis_ket_i (parallel d e) x y i) =
    (basis_ket_i d (hpart x (size d)) (hpart y (range d)) i))) /\
  (~ (i < (size d))%Z ->
   ((basis_ket_i (parallel d e) x y i) =
    (basis_ket_i e (tpart x (size d)) (tpart y (range d)) (i - (size d))%Z))).

Axiom parallel_spec4 :
  forall (d:gate) (e:gate),
  ((ang_ind_bound (parallel d e)) =
   ((ang_ind_bound d) + (ang_ind_bound e))%Z).

Axiom parallel_spec5 :
  forall (d:gate) (e:gate), forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = (size (parallel d e))) ->
  ((length y) = (range (parallel d e))) ->
  ((0%Z <= i)%Z /\ (i < ((range d) + (range e))%Z)%Z) ->
  ((i < (ang_ind_bound d))%Z ->
   ((ang_ind_i (parallel d e) x y i) =
    (ang_ind_i d (hpart x (size d)) (hpart y (range d)) i))) /\
  (~ (i < (ang_ind_bound d))%Z ->
   ((ang_ind_i (parallel d e) x y i) =
    (ang_ind_i e (tpart x (size d)) (tpart y (range d)) (i - (range d))%Z))).

Axiom parallel_spec6 :
  forall (d:gate) (e:gate), forall (x:bitvec) (y:bitvec),
  ((length x) = (size (parallel d e))) ->
  ((length y) = (range (parallel d e))) ->
  ((ang_ind (parallel d e) x y) =
   (ang_add (ang_ind d (hpart x (size d)) (hpart y (range d)))
    (ang_ind e (tpart x (size d)) (tpart y (range d))))).

Parameter sequence: gate -> gate -> gate.

Axiom sequence_spec :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  ((range (sequence d e)) = ((range d) + (range e))%Z).

Axiom sequence_spec1 :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  ((size (sequence d e)) = (size d)).

Axiom sequence_spec2 :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  forall (x:bitvec) (y:bitvec), ((length x) = (size (sequence d e))) ->
  ((length y) = (range (sequence d e))) ->
  ((basis_ket (sequence d e) x y) =
   (basis_ket e (basis_ket d x (hpart y (range d))) (tpart y (range d)))).

Axiom sequence_spec3 :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = (size (sequence d e))) ->
  ((length y) = (range (sequence d e))) ->
  ((0%Z <= i)%Z /\ (i < (size d))%Z) ->
  ((basis_ket_i (sequence d e) x y i) =
   (basis_ket_i e (basis_ket d x (hpart y (range d))) (tpart y (range d)) i)).

Axiom sequence_spec4 :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  ((ang_ind_bound (sequence d e)) =
   ((ang_ind_bound d) + (ang_ind_bound e))%Z).

Axiom sequence_spec5 :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  forall (x:bitvec) (y:bitvec), forall (i:Z),
  ((length x) = (size (sequence d e))) ->
  ((length y) = (range (sequence d e))) ->
  ((0%Z <= i)%Z /\ (i < (ang_ind_bound (sequence d e)))%Z) ->
  ((i < (ang_ind_bound d))%Z ->
   ((ang_ind_i (sequence d e) x y i) = (ang_ind_i d x (hpart y (range d)) i))) /\
  (~ (i < (ang_ind_bound d))%Z ->
   ((ang_ind_i (sequence d e) x y i) =
    (ang_ind_i e (basis_ket d x (hpart y (range d))) (tpart y (range d))
     (i - (range d))%Z))).

Axiom sequence_spec6 :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  forall (x:bitvec) (y:bitvec), ((length x) = (size (sequence d e))) ->
  ((length y) = (range (sequence d e))) ->
  ((ang_ind (sequence d e) x y) =
   (ang_add (ang_ind d x (hpart y (range d)))
    (ang_ind e (basis_ket d x (hpart y (range d))) (tpart y (range d))))).

Parameter ket: Z -> Z -> matrix t.

Axiom ket_def :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((ket n i) = (set1 (make (power 2%Z n) 1%Z tzero) i 0%Z tone)).

Axiom ket_def1 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z -> ~ (0%Z <= i)%Z ->
  ((ket n i) = (make (power 2%Z n) 1%Z tzero)).

Axiom ket_def2 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z -> ~ (i < (power 2%Z n))%Z ->
  ((ket n i) = (make (power 2%Z n) 1%Z tzero)).

Axiom ket_spec : forall (n:Z) (i:Z), (0%Z <= n)%Z -> is_a_ket (ket n i).

Axiom ket_spec1 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z -> ((ket_length (ket n i)) = n).

Axiom ket_spec2 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z -> ((columns (ket n i)) = 1%Z).

Axiom ket_spec3 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z -> ((rows (ket n i)) = (power 2%Z n)).

Axiom ket_spec4 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> forall (j:Z),
  (valid_index (ket n i) j 0%Z) -> ((get (ket n i) j 0%Z) = (indic j i)).

Axiom ket_spec5 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z -> forall (j:Z),
  (valid_index (ket n i) j 0%Z) -> ~ (i = j) ->
  ((get (ket n i) j 0%Z) = tzero).

Axiom ket_spec6 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((get (ket n i) i 0%Z) = tone).

Parameter make_ket: Z -> (Z -> t) -> matrix t.

Axiom make_ket_def :
  forall (n:Z) (f:Z -> t), (0%Z <= n)%Z ->
  ((make_ket n f) = (make_f (power 2%Z n) 1%Z (fun (x:Z) (us:Z) => (f x)))).

Axiom make_ket_spec :
  forall (n:Z) (f:Z -> t), (0%Z <= n)%Z -> is_a_ket_l (make_ket n f) n.

Axiom make_ket_spec1 :
  forall (n:Z) (f:Z -> t), (0%Z <= n)%Z -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((get (make_ket n f) i 0%Z) = (f i)).

Axiom make_ket_spec2 :
  forall (n:Z) (f:Z -> t), (0%Z <= n)%Z -> forall (i:Z) (j:Z),
  (valid_index (make_ket n f) i j) -> ((get (make_ket n f) i j) = (f i)).

Axiom ket_l :
  forall (n:Z) (m:Z) (i:Z), (0%Z <= n)%Z -> (n = m) -> is_a_ket_l (ket n i) m.

Axiom ket_eq :
  forall (n1:Z) (n2:Z) (i1:Z) (i2:Z), (0%Z <= n1)%Z -> (n1 = n2) ->
  (i1 = i2) -> ((ket n1 i1) = (ket n2 i2)).

Axiom ket_rows :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((rows (ket n i)) = (power 2%Z n)).

Axiom ket_columns :
  forall (n:Z) (i:Z), (0%Z <= n)%Z -> ((columns (ket n i)) = 1%Z).

Axiom ket_value :
  forall (n:Z) (i:Z) (j:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  ((i = j) -> ((get (ket n i) j 0%Z) = tone)) /\
  (~ (i = j) -> ((get (ket n i) j 0%Z) = tzero)).

Axiom norm_ket_basis :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((ket_norm_l (ket n i) n) = tone).

Axiom get_ket_ :
  forall (m:matrix t) (i:Z) (n:Z), (m = (ket n i)) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> is_a_ket m.

Axiom get_ket_1 :
  forall (m:matrix t) (i:Z) (n:Z), (m = (ket n i)) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((ket_length m) = n).

Axiom get_ket_2 :
  forall (m:matrix t) (i:Z) (n:Z), (m = (ket n i)) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((columns m) = 1%Z).

Axiom get_ket_3 :
  forall (m:matrix t) (i:Z) (n:Z), (m = (ket n i)) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((rows m) = (power 2%Z n)).

Axiom get_ket_4 :
  forall (m:matrix t) (i:Z) (n:Z), (m = (ket n i)) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> forall (j:Z),
  (valid_index m j 0%Z) -> ((get m j 0%Z) = (indic j i)).

Axiom get_ket_5 :
  forall (m:matrix t) (i:Z) (n:Z), (m = (ket n i)) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> forall (j:Z),
  (valid_index m j 0%Z) -> ~ (i = j) -> ((get m j 0%Z) = tzero).

Axiom get_ket_6 :
  forall (m:matrix t) (i:Z) (n:Z), (m = (ket n i)) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((get m i 0%Z) = tone).

Axiom get_ket_value :
  forall (i:Z) (n:Z) (j:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  ((get (ket n i) j 0%Z) = (indic j i)).

Axiom get_ket_values :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> forall (j:Z),
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  ((get (ket n i) j 0%Z) = (indic j i)).

Axiom get_ket_value_z :
  forall (i:Z) (n:Z) (j:Z) (z:Z), (z = 0%Z) -> (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  ((get (ket n i) j z) = (indic j i)).

Axiom get__ket_value :
  forall (i:Z) (j:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) ->
  ((get (ket n i) j 0%Z) = (indic j i)).

Axiom set_ket :
  forall (m:matrix t) (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((columns m) = 1%Z) ->
  ((rows m) = (power 2%Z n)) ->
  (forall (j:Z), (valid_index m j 0%Z) -> ((get m j 0%Z) = (indic j i))) ->
  (m = (ket n i)).

Axiom kronecker_kets :
  forall (i1:Z) (i2:Z) (n1:Z) (n2:Z), (0%Z <= n1)%Z -> (0%Z <= n2)%Z ->
  ((0%Z <= i1)%Z /\ (i1 < (power 2%Z n1))%Z) ->
  ((0%Z <= i2)%Z /\ (i2 < (power 2%Z n2))%Z) ->
  ((kronecker (ket n1 i1) (ket n2 i2)) =
   (ket (n1 + n2)%Z ((i1 * (power 2%Z n2))%Z + i2)%Z)).

Axiom kronecker_kets_bin_to_int :
  forall (f1:Z -> Z) (f2:Z -> Z) (n1:Z) (n2:Z), (binary f1) -> (binary f2) ->
  (0%Z <= n1)%Z -> (0%Z <= n2)%Z ->
  ((kronecker (ket n1 (bin_to_int f1 n1)) (ket n2 (bin_to_int f2 n2))) =
   (ket (n1 + n2)%Z
    (((bin_to_int f1 n1) * (power 2%Z n2))%Z + (bin_to_int f2 n2))%Z)).

Parameter ind_basis_mat: Z -> Z -> Z -> Z -> matrix t.

Axiom ind_basis_mat_def :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) ->
  ((ind_basis_mat i j r c) =
   (make_f r c (fun (k:Z) (l:Z) => (indic_2 k i l j)))).

Axiom ind_basis_mat_spec :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> ((rows (ind_basis_mat i j r c)) = r).

Axiom ind_basis_mat_spec1 :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> ((columns (ind_basis_mat i j r c)) = c).

Axiom ind_basis_mat_spec2 :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> forall (k:Z) (l:Z),
  (valid_index (ind_basis_mat i j r c) k l) ->
  ((get (ind_basis_mat i j r c) k l) = (indic_2 k i l j)).

Axiom ind_basis_mat_spec3 :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> forall (o:(Z* Z)%type),
  (mem o (mat_indices (ind_basis_mat i j r c))) ->
  ((get (ind_basis_mat i j r c) (fir o) (sec o)) = tone) -> ((fir o) = i).

Axiom ind_basis_mat_spec4 :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> forall (o:(Z* Z)%type),
  (mem o (mat_indices (ind_basis_mat i j r c))) ->
  ((get (ind_basis_mat i j r c) (fir o) (sec o)) = tone) -> ((sec o) = j).

Axiom ind_basis_mat_spec5 :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> forall (o:(Z* Z)%type),
  (mem o (mat_indices (ind_basis_mat i j r c))) ->
  (((fir o) = i) /\ ((sec o) = j)) ->
  ((get (ind_basis_mat i j r c) (fir o) (sec o)) = tone).

Axiom ind_basis_mat_values :
  forall (i:Z) (j:Z) (r:Z) (c:Z), ((0%Z <= i)%Z /\ (i < r)%Z) ->
  ((0%Z <= j)%Z /\ (j < c)%Z) -> forall (i1:Z) (j1:Z),
  ((0%Z <= i1)%Z /\ (i1 < r)%Z) -> ((0%Z <= j1)%Z /\ (j1 < c)%Z) ->
  ((get (ind_basis_mat i j r c) i1 j1) = (indic_2 i i1 j j1)).

Axiom unic_ind_basis_mat :
  forall (i1:Z) (j1:Z) (i2:Z) (j2:Z) (r:Z) (c:Z),
  ((0%Z <= i1)%Z /\ (i1 < r)%Z) -> ((0%Z <= j1)%Z /\ (j1 < c)%Z) ->
  ((0%Z <= i2)%Z /\ (i2 < r)%Z) -> ((0%Z <= j2)%Z /\ (j2 < c)%Z) ->
  ((ind_basis_mat i1 j1 r c) = (ind_basis_mat i2 j2 r c)) ->
  ((i1, j1) = (i2, j2)).

Parameter basis_mat: Z -> Z -> set (matrix t).

Parameter result14: Z -> Z -> (Z* Z)%type -> matrix t.

Axiom result_def14 :
  forall (r:Z) (c:Z) (o:(Z* Z)%type),
  match o with
  | (i, j) =>
      ((((0%Z <= i)%Z /\ (i < r)%Z) /\ ((0%Z <= j)%Z /\ (j < c)%Z)) ->
       (((result14 r c) o) = (ind_basis_mat i j r c))) /\
      (~ (((0%Z <= i)%Z /\ (i < r)%Z) /\ ((0%Z <= j)%Z /\ (j < c)%Z)) ->
       (((result14 r c) o) = (make r c tzero)))
  end.

Axiom basis_mat_def :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((basis_mat r c) =
   (map (result14 r c) (cartesian_product (to_fset 0%Z r) (to_fset 0%Z c)))).

Axiom basis_mat_spec :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z -> forall (m:matrix t),
  (mem m (basis_mat r c)) ->
  exists i:Z, exists j:Z,
  ((0%Z <= i)%Z /\ (i < r)%Z) /\
  (((0%Z <= j)%Z /\ (j < c)%Z) /\ (m = (ind_basis_mat i j r c))).

Axiom basis_mat_spec1 :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z -> forall (m:matrix t),
  (exists i:Z, exists j:Z,
   ((0%Z <= i)%Z /\ (i < r)%Z) /\
   (((0%Z <= j)%Z /\ (j < c)%Z) /\ (m = (ind_basis_mat i j r c)))) ->
  mem m (basis_mat r c).

Axiom basis_mat_spec2 :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((basis_mat r c) =
   (map (fun (o:(Z* Z)%type) => (ind_basis_mat (fir o) (sec o) r c))
    (cartesian_product (to_fset 0%Z r) (to_fset 0%Z c)))).

Axiom basis_mat_spec3 :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z ->
  constant_size (basis_mat r c) (fun (y0:matrix t) => y0).

Axiom basis_mat_spec4 :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((s_columns (basis_mat r c) (fun (y0:matrix t) => y0)) = c).

Axiom basis_mat_spec5 :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z ->
  ((s_rows (basis_mat r c) (fun (y0:matrix t) => y0)) = r).

Parameter fc8: (matrix t) -> (Z* Z)%type -> bool.

Axiom fc_def8 :
  forall (m:matrix t) (x:(Z* Z)%type),
  (((fc8 m) x) = true) <-> ((get m (fir x) (sec x)) = tone).

Axiom basis_mat_spec6 :
  forall (r:Z) (c:Z), (0%Z < r)%Z -> (0%Z < c)%Z -> forall (m:matrix t),
  (mem m (basis_mat r c)) ->
  ((cardinal (filter (fc8 m) (mat_indices m))) = 1%Z).

Parameter basis_mat_indexes: (matrix t) -> (Z* Z)%type.

Parameter result15: (matrix t) -> (Z* Z)%type -> bool.

Axiom result_def15 :
  forall (m:matrix t) (x:(Z* Z)%type),
  (((result15 m) x) = true) <->
  ((mem x (mat_indices m)) /\
   (equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m)))).

Axiom basis_mat_indexes_def :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  ((basis_mat_indexes m) = (element (filter (result15 m) (mat_indices m)))).

Axiom basis_mat_indexes_spec :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  (m =
   (ind_basis_mat (fir (basis_mat_indexes m)) (sec (basis_mat_indexes m))
    (rows m) (columns m))).

Axiom basis_mat_indexes_spec1 :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  (m =
   (make_f (rows m) (columns m)
    (fun (i:Z) (j:Z) =>
     (indic_2 (fir (basis_mat_indexes m)) i (sec (basis_mat_indexes m)) j)))).

Axiom basis_mat_indexes_spec2 :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  ((get m (fir (basis_mat_indexes m)) (sec (basis_mat_indexes m))) = tone).

Axiom basis_mat_indexes_spec3 :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  forall (i:Z) (j:Z), (valid_index m i j) ->
  (i = (fir (basis_mat_indexes m))) -> ~ (j = (sec (basis_mat_indexes m))) ->
  ((get m i j) = tzero).

Axiom basis_mat_indexes_spec4 :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  valid_index m (fir (basis_mat_indexes m)) (sec (basis_mat_indexes m)).

Axiom get_basis_mat_indexes :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  (m =
   (ind_basis_mat (fir (basis_mat_indexes m)) (sec (basis_mat_indexes m))
    (rows m) (columns m))).

Axiom get_basis_mat_indexes1 :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  (m =
   (make_f (rows m) (columns m)
    (fun (i:Z) (j:Z) =>
     (indic_2 (fir (basis_mat_indexes m)) i (sec (basis_mat_indexes m)) j)))).

Axiom get_basis_mat_indexes2 :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  ((get m (fir (basis_mat_indexes m)) (sec (basis_mat_indexes m))) = tone).

Axiom get_basis_mat_indexes3 :
  forall (m:matrix t), (mem m (basis_mat (rows m) (columns m))) ->
  forall (i:Z) (j:Z), (valid_index m i j) ->
  ~ ((basis_mat_indexes m) = (i, j)) -> ((get m i j) = tzero).

Axiom set_basis_mat_indexes :
  forall (m:matrix t) (i:Z) (j:Z), (valid_index m i j) ->
  (mem m (basis_mat (rows m) (columns m))) -> ((get m i j) = tone) ->
  ((basis_mat_indexes m) = (i, j)).

Axiom set_basis_mat_indexes1 :
  forall (m:matrix t) (i:Z) (j:Z), (valid_index m i j) ->
  (mem m (basis_mat (rows m) (columns m))) -> ((get m i j) = tone) ->
  (m = (ind_basis_mat i j (rows m) (columns m))).

Axiom set_basis_mat_indexes2 :
  forall (m:matrix t) (i:Z) (j:Z), (valid_index m i j) ->
  (mem m (basis_mat (rows m) (columns m))) -> ((get m i j) = tone) ->
  (m =
   (make_f (rows m) (columns m) (fun (i1:Z) (j1:Z) => (indic_2 i i1 j j1)))).

Axiom set_basis_mat_indexes3 :
  forall (m:matrix t) (i:Z) (j:Z), (valid_index m i j) ->
  (mem m (basis_mat (rows m) (columns m))) -> ((get m i j) = tone) ->
  forall (i1:Z) (j1:Z), (valid_index m i1 j1) -> (i1 = i) -> ~ (j1 = j) ->
  ((get m i1 j1) = tzero).

Parameter basis_projection: (matrix t) -> Z -> Z -> matrix t.

Axiom basis_projection_def :
  forall (m:matrix t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((basis_projection m i j) =
   (infix_asdtdt (get m i j) (ind_basis_mat i j (rows m) (columns m)))).

Axiom basis_projection_spec :
  forall (m:matrix t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((rows (basis_projection m i j)) = (rows m)).

Axiom basis_projection_spec1 :
  forall (m:matrix t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((columns (basis_projection m i j)) = (columns m)).

Axiom basis_projection_spec2 :
  forall (m:matrix t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((basis_projection m i j) =
   (make_f (rows m) (columns m)
    (fun (k:Z) (l:Z) => (infix_asdt (get m i j) (indic_2 k i l j))))).

Axiom basis_projection_spec3 :
  forall (m:matrix t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) ->
  ((get (basis_projection m i j) i j) = (get m i j)).

Axiom basis_projection_spec4 :
  forall (m:matrix t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) -> forall (i':Z) (j':Z),
  (valid_index (basis_projection m i j) i' j') -> ~ (i' = i) ->
  ((get (basis_projection m i j) i' j') = tzero).

Axiom basis_projection_spec5 :
  forall (m:matrix t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < (rows m))%Z) ->
  ((0%Z <= j)%Z /\ (j < (columns m))%Z) -> forall (i':Z) (j':Z),
  (valid_index (basis_projection m i j) i' j') -> ~ (j' = j) ->
  ((get (basis_projection m i j) i' j') = tzero).

Axiom basis_projection_null :
  forall (m:matrix t) (i:Z) (j:Z) (k:Z) (l:Z), (valid_index m i j) ->
  (valid_index m k l) -> ~ (i = k) ->
  ((get (basis_projection m i j) k l) = tzero).

Axiom basis_projection_null1 :
  forall (m:matrix t) (i:Z) (j:Z) (k:Z) (l:Z), (valid_index m i j) ->
  (valid_index m k l) -> ~ (j = l) ->
  ((get (basis_projection m i j) k l) = tzero).

Parameter result16: (matrix t) -> (Z* Z)%type -> matrix t.

Axiom result_def16 :
  forall (m:matrix t) (o:(Z* Z)%type),
  ((valid_index m (fir o) (sec o)) ->
   (((result16 m) o) = (basis_projection m (fir o) (sec o)))) /\
  (~ (valid_index m (fir o) (sec o)) -> (((result16 m) o) = m)).

(* Why3 assumption *)
Definition basis_projections (m:matrix t) : set (matrix t) :=
  map (result16 m) (to_indexes m).

Axiom basis_projections_spec :
  forall (m:matrix t),
  ((basis_projections m) =
   (map
    ((fun (y0:Z -> Z -> matrix t) (y1:(Z* Z)%type) => (couple y0 y1))
     ((fun (y0:matrix t) (y1:Z) (y2:Z) => (basis_projection y0 y1 y2)) m))
    (to_indexes m))).

Axiom basis_projections_spec1 :
  forall (m:matrix t), forall (e:matrix t), (mem e (basis_projections m)) ->
  ((rows e) = (rows m)).

Axiom basis_projections_spec2 :
  forall (m:matrix t), forall (e:matrix t), (mem e (basis_projections m)) ->
  ((columns e) = (columns m)).

Axiom basis_projections_spec3 :
  forall (m:matrix t),
  constant_size (basis_projections m) (fun (y0:matrix t) => y0).

Parameter fc9: (matrix t) -> (Z* Z)%type -> matrix t.

Axiom fc_def9 :
  forall (m:matrix t) (o:(Z* Z)%type),
  ((valid_index m (fir o) (sec o)) ->
   (((fc9 m) o) = (basis_projection m (fir o) (sec o)))) /\
  (~ (valid_index m (fir o) (sec o)) -> (((fc9 m) o) = m)).

Axiom rewrite_basis_projections :
  forall (m:matrix t), ((basis_projections m) = (map (fc9 m) (to_indexes m))).

Parameter result17: (matrix t) -> (Z* Z)%type -> matrix t.

Axiom result_def17 :
  forall (m:matrix t) (o:(Z* Z)%type),
  ((mem o (to_indexes m)) ->
   (((result17 m) o) = (basis_projection m (fir o) (sec o)))) /\
  (~ (mem o (to_indexes m)) -> (((result17 m) o) = m)).

(* Why3 assumption *)
Definition indexes_decomp (m:matrix t) : matrix t :=
  mat_sum (to_indexes m) (result17 m).

Axiom indexes_decomp_spec :
  forall (m:matrix t), ((rows (indexes_decomp m)) = (rows m)).

Axiom indexes_decomp_spec1 :
  forall (m:matrix t), ((columns (indexes_decomp m)) = (columns m)).

Axiom rewrite_indexes_decomp :
  forall (m:matrix t),
  ((indexes_decomp m) =
   (mat_sum (to_indexes m)
    (fun (o:(Z* Z)%type) => (basis_projection m (fir o) (sec o))))).

Axiom indexes_decomp_pre :
  forall (m:matrix t) (i:Z) (j:Z), (valid_index m i j) ->
  ((get m i j) =
   (sum (to_indexes m)
    (fun (o:(Z* Z)%type) => (get (basis_projection m (fir o) (sec o)) i j)))).

Axiom indexes_decomp_pre_gen :
  forall (m:matrix t), forall (i:Z) (j:Z), (valid_index m i j) ->
  ((get m i j) =
   (sum (to_indexes m)
    (fun (o:(Z* Z)%type) => (get (basis_projection m (fir o) (sec o)) i j)))).

Axiom mat_to_indexes_decomp : forall (m:matrix t), (m = (indexes_decomp m)).

(* Why3 assumption *)
Definition basis_decomp (m:matrix t) : matrix t :=
  mat_sum (basis_projections m) (fun (y0:matrix t) => y0).

Axiom basis_decomp_spec :
  forall (m:matrix t), ((rows (basis_decomp m)) = (rows m)).

Axiom basis_decomp_spec1 :
  forall (m:matrix t), ((columns (basis_decomp m)) = (columns m)).

Axiom indexes_basis_decomp_equal_pre :
  forall (m:matrix t) (i:Z) (j:Z), (valid_index m i j) ->
  ((get (indexes_decomp m) i j) = (get (basis_decomp m) i j)).

Axiom indexes_basis_decomp_equal :
  forall (m:matrix t), ((indexes_decomp m) = (basis_decomp m)).

Axiom mat_to_basis_decomp : forall (m:matrix t), (m = (indexes_decomp m)).

Parameter fc10:
  forall {a:Type} {a_WT:WhyType a}, (matrix t) -> (set a) ->
  (a -> matrix t) -> a -> matrix t.

Axiom fc_def10 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s:set a) (f:a -> matrix t) (a1:a),
  ((mem a1 s) -> (((fc10 m s f) a1) = (mat_mult m (f a1)))) /\
  (~ (mem a1 s) -> (((fc10 m s f) a1) = m)).

Axiom product_mat_sum_r_pre :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s':set a) (s:set a) (f:a -> matrix t),
  (constant_size s f) -> ((columns m) = (s_rows s f)) -> (subset s' s) ->
  (0%Z < (cardinal s'))%Z ->
  ((mat_mult m (mat_sum s' f)) = (mat_sum s' (fc10 m s f))).

Axiom product_mat_sum_r_pre1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s':set a) (s:set a) (f:a -> matrix t),
  (constant_size s f) -> ((columns m) = (s_rows s f)) -> (subset s' s) ->
  (0%Z < (cardinal s'))%Z ->
  ((mat_mult m (mat_sum s' f)) =
   (mat_sum s' (fun (a1:a) => (mat_mult m (f a1))))).

Axiom product_mat_sum_r_pre2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s':set a) (s:set a) (f:a -> matrix t),
  (constant_size s f) -> ((columns m) = (s_rows s f)) -> (subset s' s) ->
  (0%Z < (cardinal s'))%Z -> ((rows (mat_sum s' f)) = (s_rows s f)).

Axiom product_mat_sum_r_pre3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s':set a) (s:set a) (f:a -> matrix t),
  (constant_size s f) -> ((columns m) = (s_rows s f)) -> (subset s' s) ->
  (0%Z < (cardinal s'))%Z -> ((columns (mat_sum s' f)) = (s_columns s f)).

Axiom product_mat_sum_r_pre4 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s':set a) (s:set a) (f:a -> matrix t),
  (constant_size s f) -> ((columns m) = (s_rows s f)) -> (subset s' s) ->
  (0%Z < (cardinal s'))%Z -> ((rows (mat_mult m (mat_sum s' f))) = (rows m)).

Axiom product_mat_sum_r_pre5 :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s':set a) (s:set a) (f:a -> matrix t),
  (constant_size s f) -> ((columns m) = (s_rows s f)) -> (subset s' s) ->
  (0%Z < (cardinal s'))%Z ->
  ((columns (mat_mult m (mat_sum s' f))) = (s_columns s f)).

Axiom product_mat_sum_r :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s:set a) (f:a -> matrix t), (constant_size s f) ->
  ((columns m) = (s_rows s f)) -> (0%Z < (cardinal s))%Z ->
  ((mat_mult m (mat_sum s f)) =
   (mat_sum s (fun (a1:a) => (mat_mult m (f a1))))).

Axiom product_mat_sum_r_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (m:matrix t) (s:set a) (f:a -> matrix t), (constant_size s f) ->
  ((columns m) = (s_rows s f)) -> (0%Z < (cardinal s))%Z ->
  ((mat_sum s (fun (a1:a) => (mat_mult m (f a1)))) =
   (mat_mult m (mat_sum s f))).

Axiom p_injective_proj :
  forall (m:matrix t),
  p_injective
  ((fun (y0:Z -> Z -> matrix t) (y1:(Z* Z)%type) => (couple y0 y1))
   ((fun (y0:matrix t) (y1:Z) (y2:Z) => (basis_projection y0 y1 y2)) m))
  (nonn_mat_subset
   ((fun (y0:Z -> Z -> matrix t) (y1:(Z* Z)%type) => (couple y0 y1))
    ((fun (y0:matrix t) (y1:Z) (y2:Z) => (basis_projection y0 y1 y2)) m))
   (to_indexes m)).

Axiom mat_decomp_equal_indexes :
  forall (m:matrix t), (m = (indexes_decomp m)).

Parameter ket_basis: Z -> set (matrix t).

Axiom ket_basis_def :
  forall (n:Z), (0%Z <= n)%Z ->
  ((ket_basis n) = (basis_mat (power 2%Z n) 1%Z)).

Axiom ket_basis_spec :
  forall (n:Z), (0%Z <= n)%Z ->
  ((ket_basis n) =
   (map
    (fun (o:(Z* Z)%type) =>
     (ind_basis_mat (fir o) (sec o) (power 2%Z n) 1%Z))
    (cartesian_product (to_fset 0%Z (power 2%Z n)) (to_fset 0%Z 1%Z)))).

Axiom ket_basis_spec1 :
  forall (n:Z), (0%Z <= n)%Z ->
  ((ket_basis n) = (basis_mat (power 2%Z n) 1%Z)).

Axiom ket_basis_spec2 :
  forall (n:Z), (0%Z <= n)%Z -> forall (mat:matrix t),
  (mem mat (ket_basis n)) -> ((rows mat) = (power 2%Z n)).

Axiom ket_basis_spec3 :
  forall (n:Z), (0%Z <= n)%Z -> forall (mat:matrix t),
  (mem mat (ket_basis n)) -> ((columns mat) = 1%Z).

Axiom ket_basis_spec4 :
  forall (n:Z), (0%Z <= n)%Z -> forall (mat:matrix t),
  (mem mat (ket_basis n)) -> ((rows mat) = (power 2%Z n)).

Axiom ket_basis_spec5 :
  forall (n:Z), (0%Z <= n)%Z -> forall (mat:matrix t),
  (mem mat (ket_basis n)) -> ((columns mat) = 1%Z).

Axiom ket_basis_spec6 :
  forall (n:Z), (0%Z <= n)%Z -> forall (mat:matrix t),
  (mem mat (ket_basis n)) ->
  exists i:Z, (valid_index mat i 0%Z) /\ ((basis_mat_indexes mat) = (i, 0%Z)).

Axiom unary_ket_basis :
  forall (n:Z), (0%Z <= n)%Z ->
  ((ket_basis n) =
   (map (fun (i:Z) => (ind_basis_mat i 0%Z (power 2%Z n) 1%Z))
    (to_fset 0%Z (power 2%Z n)))).

Axiom to_ket_basis :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  mem (ind_basis_mat i 0%Z (power 2%Z n) 1%Z) (ket_basis n).

Parameter ket_basis_index: (matrix t) -> Z -> Z.

Axiom ket_basis_index_def :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (mem m (ket_basis n)) ->
  ((ket_basis_index m n) = (fir (basis_mat_indexes m))).

Axiom ket_basis_index_spec :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (mem m (ket_basis n)) ->
  mem (ind_basis_mat (ket_basis_index m n) 0%Z (power 2%Z n) 1%Z)
  (ket_basis n).

Axiom ket_basis_index_spec1 :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (mem m (ket_basis n)) ->
  (m =
   (make_f (rows m) 1%Z
    (fun (i:Z) (us:Z) => (indic (ket_basis_index m n) i)))).

Axiom ket_basis_index_spec2 :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (mem m (ket_basis n)) ->
  forall (i:Z), (valid_index m i 0%Z) -> ~ (i = (ket_basis_index m n)) ->
  ((get m i 0%Z) = tzero).

Axiom ket_basis_index_spec3 :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (mem m (ket_basis n)) ->
  valid_index m (ket_basis_index m n) 0%Z.

Axiom set_ket_basis :
  forall (m:matrix t) (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> (mem m (ket_basis n)) ->
  ((get m i 0%Z) = tone) -> ((ket_basis_index m n) = i).

Axiom set_ket_basis1 :
  forall (m:matrix t) (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> (mem m (ket_basis n)) ->
  ((get m i 0%Z) = tone) -> forall (i1:Z), (valid_index m i1 0%Z) ->
  ~ (i1 = i) -> ((get m i1 0%Z) = tzero).

Axiom set_ket_basis2 :
  forall (m:matrix t) (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> (mem m (ket_basis n)) ->
  ((get m i 0%Z) = tone) -> mem m (ket_basis n).

Axiom set_ket_basis3 :
  forall (m:matrix t) (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> (mem m (ket_basis n)) ->
  ((get m i 0%Z) = tone) ->
  (m = (make_f (rows m) (columns m) (fun (i1:Z) (us:Z) => (indic i i1)))).

Axiom from_ket_basis :
  forall (n:Z) (m:matrix t), (0%Z <= n)%Z -> (mem m (ket_basis n)) ->
  exists i:Z,
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) /\
  (m = (ind_basis_mat i 0%Z (power 2%Z n) 1%Z)).

Axiom int_to_ket_basis :
  forall (n:Z) (i:Z), (0%Z < n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> mem (ket n i) (ket_basis n).

(* Why3 assumption *)
Definition is_a_ket_basis_elt (m:matrix t) : Prop :=
  (is_a_ket m) /\ (mem m (ket_basis (ket_length m))).

Axiom ket_basis_elt_are_kets :
  forall (m:matrix t), (is_a_ket_basis_elt m) -> is_a_ket m.

Axiom get_is_a_ket_basis_elt :
  forall (m:matrix t), (is_a_ket_basis_elt m) -> is_a_ket m.

Axiom get_is_a_ket_basis_elt1 :
  forall (m:matrix t), (is_a_ket_basis_elt m) ->
  mem m (ket_basis (ket_length m)).

Axiom get_is_a_ket_basis_elt2 :
  forall (m:matrix t), (is_a_ket_basis_elt m) ->
  exists i:Z,
  ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) /\
  (m = (ket (ket_length m) i)).

Axiom get_is_a_ket_basis_elt3 :
  forall (m:matrix t), (is_a_ket_basis_elt m) ->
  exists i:Z,
  ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) /\
  (((get m i 0%Z) = tone) /\
   forall (j:Z),
   (((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) /\
    ~ ((get m j 0%Z) = tzero)) ->
   (i = j)).

Axiom get_is_a_ket_basis_elt4 :
  forall (m:matrix t), (is_a_ket_basis_elt m) -> forall (i:Z),
  (((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) /\
   ((get m i 0%Z) = tone)) ->
  forall (j:Z),
  (((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) /\
   ~ ((get m j 0%Z) = tzero)) ->
  (i = j).

Axiom get_is_a_ket_basis_elt_indic :
  forall (m:matrix t), (is_a_ket_basis_elt m) ->
  exists i:Z,
  ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) /\
  forall (j:Z), ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) ->
  ((get m j 0%Z) = (indic i j)).

Axiom set_is_a_ket_basis_elt :
  forall (m:matrix t), (is_a_ket m) ->
  (exists i:Z,
   ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) /\
   (m = (ket (ket_length m) i))) ->
  is_a_ket_basis_elt m.

Axiom set_is_a_ket_basis_elt_exists :
  forall (m:matrix t), (is_a_ket m) ->
  (exists j:Z,
   ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) /\
   (m =
    (make_f (power 2%Z (ket_length m)) 1%Z (fun (i:Z) (us:Z) => (indic i j))))) ->
  is_a_ket_basis_elt m.

Axiom ket_func_sets_ket_basis_elts :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> is_a_ket_basis_elt (ket n i).

Axiom ket_func_sets_ket_basis_elts1 :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((ket_length (ket n i)) = n).

Axiom kronecker_is_a_ket_basis_elt :
  forall (x:matrix t) (y:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_basis_elt y) -> is_a_ket_basis_elt (kronecker x y).

Axiom ket_is_a_ket_basis_elt :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> is_a_ket_basis_elt (ket n i).

Axiom ket_basis_non_null_val :
  forall (m:matrix t) (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> (is_a_ket_basis_elt m) ->
  ((ket_length m) = n) -> ~ ((get m i 0%Z) = tzero) -> (m = (ket n i)).

Parameter ket_to_int: (matrix t) -> Z.

Axiom ket_to_int_spec :
  forall (m:matrix t), (is_a_ket_basis_elt m) -> (0%Z <= (ket_to_int m))%Z.

Axiom ket_to_int_spec1 :
  forall (m:matrix t), (is_a_ket_basis_elt m) ->
  ((ket_to_int m) < (power 2%Z (ket_length m)))%Z.

Axiom ket_to_int_spec2 :
  forall (m:matrix t), (is_a_ket_basis_elt m) ->
  ((get m (ket_to_int m) 0%Z) = tone).

Axiom ket_to_int_spec3 :
  forall (m:matrix t), (is_a_ket_basis_elt m) ->
  (m = (ket (ket_length m) (ket_to_int m))).

Axiom ket_to_int_spec4 :
  forall (m:matrix t), (is_a_ket_basis_elt m) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length m)))%Z) ->
  (m = (ket (ket_length m) i)) -> (i = (ket_to_int m)).

Axiom ket_to_int_ket :
  forall (n:Z) (i:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> ((ket_to_int (ket n i)) = i).

Parameter bin_to_ket: Z -> (Z -> Z) -> matrix t.

Axiom bin_to_ket_def :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  ((bin_to_ket n bvx) = (ket n (bin_to_int bvx n))).

Axiom bin_to_ket_spec :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  is_a_ket_basis_elt (bin_to_ket n bvx).

Axiom bin_to_ket_spec1 :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  ((ket_length (bin_to_ket n bvx)) = n).

Axiom bin_to_ket_spec2 :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  ((ket_to_int (bin_to_ket n bvx)) = (bin_to_int bvx n)).

Axiom bin_to_ket_spec3 :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  ((rows (bin_to_ket n bvx)) = (power 2%Z n)).

Axiom bin_to_ket_spec4 :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  ((columns (bin_to_ket n bvx)) = 1%Z).

Axiom bin_to_ket_spec5 :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  is_a_ket (bin_to_ket n bvx).

Axiom bin_to_ket_spec6 :
  forall (n:Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (binary bvx) ->
  is_a_ket_l (bin_to_ket n bvx) n.

Axiom bin_to_ket_l :
  forall (n:Z) (n':Z) (bvx:Z -> Z), (0%Z <= n)%Z -> (n = n') ->
  (binary bvx) -> is_a_ket_l (bin_to_ket n bvx) n'.

Axiom bin_to_ket_eq :
  forall (n1:Z) (n2:Z) (bvx1:Z -> Z) (bvx2:Z -> Z), (0%Z <= n1)%Z ->
  (binary bvx1) -> (binary bvx2) -> (n2 = n1) ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < n1)%Z) -> ((bvx1 i) = (bvx2 i))) ->
  ((bin_to_ket n1 bvx1) = (bin_to_ket n2 bvx2)).

Axiom kronecker_kets_bin_to_ket :
  forall (f1:Z -> Z) (f2:Z -> Z) (n1:Z) (n2:Z), (binary f1) -> (binary f2) ->
  (0%Z <= n1)%Z -> (0%Z <= n2)%Z ->
  ((kronecker (bin_to_ket n1 f1) (bin_to_ket n2 f2)) =
   (bin_to_ket (n1 + n2)%Z
    ((((fun (y0:Z -> Z) (y1:Z -> Z) (y2:Z) (y3:Z) =>
        (concat_fun y0 y1 y2 y3))
       f1)
      f2)
     n1))).

Axiom kronecker_ket_to_int :
  forall (x:matrix t) (y:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_basis_elt y) -> is_a_ket_basis_elt (kronecker x y).

Axiom kronecker_ket_to_int1 :
  forall (x:matrix t) (y:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_basis_elt y) ->
  ((ket_length (kronecker x y)) = ((ket_length x) + (ket_length y))%Z).

Axiom kronecker_ket_to_int2 :
  forall (x:matrix t) (y:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_basis_elt y) ->
  ((kronecker x y) =
   (ket ((ket_length x) + (ket_length y))%Z
    (((ket_to_int x) * (power 2%Z (ket_length y)))%Z + (ket_to_int y))%Z)).

Axiom kronecker_ket_to_int3 :
  forall (x:matrix t) (y:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_basis_elt y) ->
  ((ket_to_int (kronecker x y)) =
   (((ket_to_int x) * (power 2%Z (ket_length y)))%Z + (ket_to_int y))%Z).

Axiom ket_ket_to_int :
  forall (x:matrix t), (is_a_ket_basis_elt x) ->
  ((ket (ket_length x) (ket_to_int x)) = x).

Axiom ket_ket_to_int_values :
  forall (x:matrix t), (is_a_ket_basis_elt x) -> forall (i:Z) (j:Z),
  (valid_index x i j) -> ((get x i j) = (indic i (ket_to_int x))).

Parameter ket_basis_projection: (matrix t) -> Z -> matrix t.

Axiom ket_basis_projection_def :
  forall (m:matrix t) (j:Z), (is_a_ket m) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) ->
  ((ket_basis_projection m j) =
   (infix_asdtdt (get m j 0%Z) (ket (ket_length m) j))).

Axiom ket_basis_projection_spec :
  forall (m:matrix t) (j:Z), (is_a_ket m) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) ->
  ((ket_basis_projection m j) = (basis_projection m j 0%Z)).

Axiom ket_basis_projection_columns :
  forall (m:matrix t) (j:Z), (is_a_ket m) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) ->
  ((columns (ket_basis_projection m j)) = 1%Z).

Axiom ket_basis_projection_rows :
  forall (m:matrix t) (j:Z), (is_a_ket m) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) ->
  ((rows (ket_basis_projection m j)) = (rows m)).

Parameter ket_basis_projections: (matrix t) -> set (matrix t).

Parameter result18: (matrix t) -> Z -> matrix t.

Axiom result_def18 :
  forall (m:matrix t) (j:Z),
  ((mem j (to_fset 0%Z (power 2%Z (ket_length m)))) ->
   (((result18 m) j) = (ket_basis_projection m j))) /\
  (~ (mem j (to_fset 0%Z (power 2%Z (ket_length m)))) ->
   (((result18 m) j) = m)).

Axiom ket_basis_projections_def :
  forall (m:matrix t), (is_a_ket m) ->
  ((ket_basis_projections m) =
   (map (result18 m) (to_fset 0%Z (power 2%Z (ket_length m))))).

Axiom ket_basis_projections_spec :
  forall (m:matrix t), (is_a_ket m) ->
  ((ket_basis_projections m) = (basis_projections m)).

Parameter ket_basis_projections_antec: (matrix t) -> unit.

Axiom ket_basis_projections_antec_def :
  forall (m:matrix t), (is_a_ket m) -> ((ket_basis_projections_antec m) = tt).

Axiom ket_basis_projections_antec_spec :
  forall (m:matrix t), (is_a_ket m) -> forall (e:matrix t),
  (mem e (ket_basis_projections m)) ->
  exists j:Z,
  ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) /\
  (e = (ket_basis_projection m j)).

Axiom ket_basis_projections_antec_spec1 :
  forall (m:matrix t), (is_a_ket m) -> forall (e:matrix t),
  (exists j:Z,
   ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length m)))%Z) /\
   (e = (ket_basis_projection m j))) ->
  mem e (ket_basis_projections m).

Axiom ket_basis_projections_antec_spec2 :
  forall (m:matrix t), (is_a_ket m) -> forall (e:matrix t),
  (mem e (ket_basis_projections m)) ->
  exists j:Z, exists i:Z,
  (valid_index m j i) /\ (e = (basis_projection m j i)).

Axiom ket_basis_projections_antec_spec3 :
  forall (m:matrix t), (is_a_ket m) -> forall (e:matrix t),
  (exists j:Z, exists i:Z,
   (valid_index m j i) /\ (e = (basis_projection m j i))) ->
  mem e (ket_basis_projections m).

Parameter ket_sum:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (a -> matrix t) -> matrix t.

Axiom ket_sum_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket (f e)) ->
  (exists l:Z, forall (e:a), (mem e s) -> ((ket_length (f e)) = l)) ->
  ((ket_sum s f) = (mat_sum s f)).

Axiom ket_sum_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket (f e)) ->
  (exists l:Z, forall (e:a), (mem e s) -> ((ket_length (f e)) = l)) ->
  forall (i:Z), (valid_index (ket_sum s f) i 0%Z) ->
  ((get (ket_sum s f) i 0%Z) = (sum s (fun (e:a) => (get (f e) i 0%Z)))).

Axiom ket_sum_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket (f e)) ->
  (exists l:Z, forall (e:a), (mem e s) -> ((ket_length (f e)) = l)) ->
  is_a_ket (ket_sum s f).

Axiom ket_sum_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket (f e)) ->
  (exists l:Z, forall (e:a), (mem e s) -> ((ket_length (f e)) = l)) ->
  forall (e:a), (mem e s) ->
  ((ket_length (ket_sum s f)) = (ket_length (f e))).

Parameter ket_sum_l:
  forall {a:Type} {a_WT:WhyType a}, (set a) -> (a -> matrix t) -> Z ->
  matrix t.

Axiom ket_sum_l_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  ((ket_sum_l s f l) = (mat_sum s f)).

Axiom ket_sum_l_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  is_a_ket (ket_sum_l s f l).

Axiom ket_sum_l_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) -> forall (i:Z),
  (valid_index (ket_sum_l s f l) i 0%Z) ->
  ((get (ket_sum_l s f l) i 0%Z) = (sum s (fun (e:a) => (get (f e) i 0%Z)))).

Axiom ket_sum_l_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  is_a_ket_l (ket_sum_l s f l) l.

Axiom ket_sum_l_spec3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  ((ket_length (ket_sum_l s f l)) = l).

Axiom ket_sum_l_rows :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  ((rows (ket_sum_l s f l)) = (power 2%Z l)).

Axiom ket_sum_l_value :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z) (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < (power 2%Z l))%Z) -> (j = 0%Z) ->
  (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  ((get (ket_sum_l s f l) i j) = (sum s (fun (e:a) => (get (f e) i 0%Z)))).

Axiom get_ket_sum_l_value :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z) (i:Z),
  ((0%Z <= i)%Z /\ (i < (power 2%Z l))%Z) -> (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  ((get (ket_sum_l s f l) i 0%Z) = (sum s (fun (e:a) => (get (f e) i 0%Z)))).

Axiom ket_sum_l_columns :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  ((columns (ket_sum_l s f l)) = 1%Z).

Axiom ket_sum_null_but_maybe_one_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (e:a), (1%Z < (cardinal s))%Z ->
  (forall (e1:a), (mem e1 s) -> is_a_ket (f e1)) -> (constant_size s f) ->
  (mem e s) ->
  (forall (e':a), (mem e' s) -> ~ (e = e') -> null_mat (f e')) ->
  ((ket_sum s f) = (f e)).

Axiom ket_sum_null :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (1%Z < (cardinal s))%Z ->
  (0%Z <= l)%Z -> (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  (forall (e:a), (mem e s) -> null_mat (f e)) -> forall (j:Z),
  ((0%Z <= j)%Z /\ (j < (power 2%Z l))%Z) ->
  ((get (ket_sum_l s f l) j 0%Z) = tzero).

Axiom ket_sum_l_null_but_maybe_one_elt :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:a -> matrix t) (s:set a) (e:a) (l:Z), (1%Z < (cardinal s))%Z ->
  (forall (e1:a), (mem e1 s) -> is_a_ket_l (f e1) l) -> (mem e s) ->
  (forall (e':a), (mem e' s) -> ~ (e = e') -> null_mat (f e')) ->
  ((ket_sum_l s f l) = (f e)).

Axiom ket_sum_ket_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  is_a_ket_l (ket_sum_l s f l) l.

Axiom ket_sum_comp_l :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> matrix t) (g:b -> matrix t) (l:Z),
  (0%Z < (cardinal s))%Z ->
  (forall (e:b), (mem e s) -> is_a_ket_l (f e) l) ->
  (forall (e:b), (mem e s) -> is_a_ket_l (g e) l) ->
  ((ket_sum_l s (fun (k:b) => (add_ket_l (f k) (g k) l)) l) =
   (add_ket_l (ket_sum_l s f l) (ket_sum_l s g l) l)).

Axiom ket_sum_comp_l_rev :
  forall {b:Type} {b_WT:WhyType b},
  forall (s:set b) (f:b -> matrix t) (g:b -> matrix t) (l:Z),
  (0%Z < (cardinal s))%Z ->
  (forall (e:b), (mem e s) -> is_a_ket_l (f e) l) ->
  (forall (e:b), (mem e s) -> is_a_ket_l (g e) l) ->
  ((add_ket_l (ket_sum_l s f l) (ket_sum_l s g l) l) =
   (ket_sum_l s (fun (k:b) => (add_ket_l (f k) (g k) l)) l)).

Axiom ket_sum_scalar_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (a1:t) (l:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  (0%Z < (cardinal s))%Z ->
  ((ket_sum_l s (fun (k:a) => (infix_asdtdt a1 (f k))) l) =
   (infix_asdtdt a1 (ket_sum_l s f l))).

Axiom ket_l_ket_sum_scalar :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (a1:t) (l:Z) (n:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  (0%Z < (cardinal s))%Z -> (l = n) ->
  is_a_ket_l (infix_asdtdt a1 (ket_sum_l s f l)) n.

Axiom scal_ket_sum_scalar_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (b:t) (l:Z) (l':Z),
  (forall (e:a), (mem e s) ->
   exists a1:t,
   exists k:matrix t, ((f e) = (infix_asdtdt a1 k)) /\ (is_a_ket_l k l)) ->
  (0%Z < (cardinal s))%Z -> (l = l') ->
  is_a_ket_l (infix_asdtdt b (ket_sum_l s f l)) l'.

Axiom ket_sum_scalar_rev_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (a1:t) (l:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  (0%Z < (cardinal s))%Z ->
  ((infix_asdtdt a1 (ket_sum_l s f l)) =
   (ket_sum_l s (fun (k:a) => (infix_asdtdt a1 (f k))) l)).

Axiom ket_sum_eq :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (f:a -> matrix t) (g:a -> matrix t) (l:Z),
  (0%Z < (cardinal s))%Z -> (s = s') ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  (forall (a1:a), (mem a1 s) -> ((f a1) = (g a1))) ->
  ((ket_sum_l s f l) = (ket_sum_l s' g l)).

Axiom ket_sum_eq_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s':set a) (f:a -> matrix t) (g:a -> matrix t) (l1:Z)
    (l2:Z),
  (0%Z < (cardinal s))%Z -> (s = s') -> (l1 = l2) ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) ->
  (forall (a1:a), (mem a1 s) -> ((f a1) = (g a1))) ->
  ((ket_sum_l s f l1) = (ket_sum_l s' g l2)).

Axiom ket_sum_bvs_eq :
  forall (n1:Z) (n2:Z) (f:bitvec -> matrix t) (g:bitvec -> matrix t) 
    (l1:Z) (l2:Z),
  (l1 = l2) -> (n1 = n2) -> (0%Z <= n1)%Z ->
  (forall (e:bitvec), (mem e (n_bvs n1)) -> is_a_ket_l (f e) l1) ->
  (forall (e:bitvec), (mem e (n_bvs n1)) -> ((f e) = (g e))) ->
  ((ket_sum_l (n_bvs n1) f l1) = (ket_sum_l (n_bvs n2) g l2)).

Axiom ket_sum_scal_bvs_eq :
  forall (n1:Z) (n2:Z) (f:bitvec -> matrix t) (g:bitvec -> matrix t) 
    (l1:Z) (l2:Z) (s1:t) (s2:t),
  (l1 = l2) -> (n1 = n2) -> (s1 = s2) -> (0%Z <= n1)%Z ->
  (forall (e:bitvec), (mem e (n_bvs n1)) -> is_a_ket_l (f e) l1) ->
  (forall (e:bitvec), (mem e (n_bvs n1)) -> ((f e) = (g e))) ->
  ((infix_asdtdt s1 (ket_sum_l (n_bvs n1) f l1)) =
   (infix_asdtdt s2 (ket_sum_l (n_bvs n2) g l2))).

Axiom ket_sum_sum_bvs_eq :
  forall (n1:Z) (n2:Z) (n1':Z) (n2':Z) (f:bitvec -> bitvec -> matrix t)
    (g:bitvec -> bitvec -> matrix t) (l1:Z) (l2:Z) (l1':Z) (l2':Z),
  ((l1 = l2) /\ ((l2 = l1') /\ (l1' = l2'))) -> (n1 = n1') ->
  (0%Z <= n1)%Z -> (n2 = n2') -> (0%Z <= n2)%Z ->
  (forall (e:bitvec) (e':bitvec), (mem e (n_bvs n1)) ->
   (mem e' (n_bvs n2)) -> is_a_ket_l ((f e) e') l1) ->
  (forall (e:bitvec) (e':bitvec), (mem e (n_bvs n1)) ->
   (mem e' (n_bvs n2)) -> (((f e) e') = ((g e) e'))) ->
  ((ket_sum_l (n_bvs n1) (fun (k:bitvec) => (ket_sum_l (n_bvs n2) (f k) l1))
    l2)
   =
   (ket_sum_l (n_bvs n1')
    (fun (k:bitvec) => (ket_sum_l (n_bvs n2') (g k) l1')) l2')).

Axiom ket_sum_sum_scal_bvs_eq :
  forall (n1:Z) (n2:Z) (n1':Z) (n2':Z) (f:bitvec -> bitvec -> matrix t)
    (g:bitvec -> bitvec -> matrix t) (l1:Z) (l2:Z) (l1':Z) (l2':Z) (s1:t)
    (s2:t),
  ((l1 = l2) /\ ((l2 = l1') /\ (l1' = l2'))) -> (n1 = n1') ->
  (0%Z <= n1)%Z -> (n2 = n2') -> (s1 = s2) -> (0%Z <= n2)%Z ->
  (forall (e:bitvec) (e':bitvec), (mem e (n_bvs n1)) ->
   (mem e' (n_bvs n2)) -> is_a_ket_l ((f e) e') l1) ->
  (forall (e:bitvec) (e':bitvec), (mem e (n_bvs n1)) ->
   (mem e' (n_bvs n2)) -> (((f e) e') = ((g e) e'))) ->
  ((infix_asdtdt s1
    (ket_sum_l (n_bvs n1) (fun (k:bitvec) => (ket_sum_l (n_bvs n2) (f k) l1))
     l2))
   =
   (infix_asdtdt s1
    (ket_sum_l (n_bvs n1')
     (fun (k:bitvec) => (ket_sum_l (n_bvs n2') (g k) l1')) l2'))).

Axiom ket_sum_sum_scal_mult_bvs_eq :
  forall (n1:Z) (n2:Z) (n1':Z) (n2':Z) (f:bitvec -> bitvec -> matrix t)
    (g:bitvec -> bitvec -> matrix t) (l1:Z) (l2:Z) (l1':Z) (l2':Z) (s1:t)
    (s2:t) (s3:t),
  ((l1 = l2) /\ ((l2 = l1') /\ (l1' = l2'))) -> (n1 = n1') ->
  (0%Z <= n1)%Z -> (s3 = (infix_asdt s1 s2)) -> (n2 = n2') ->
  (0%Z <= n2)%Z ->
  (forall (e:bitvec) (e':bitvec), (mem e (n_bvs n1)) ->
   (mem e' (n_bvs n2)) -> is_a_ket_l ((f e) e') l1) ->
  (forall (e:bitvec) (e':bitvec), (mem e (n_bvs n1)) ->
   (mem e' (n_bvs n2)) -> (((f e) e') = ((g e) e'))) ->
  ((infix_asdtdt s1
    (ket_sum_l (n_bvs n1')
     (fun (k:bitvec) => (infix_asdtdt s2 (ket_sum_l (n_bvs n2') (f k) l1')))
     l2'))
   =
   (infix_asdtdt s3
    (ket_sum_l (n_bvs n1) (fun (k:bitvec) => (ket_sum_l (n_bvs n2) (g k) l1))
     l2))).

Axiom ket_sum_l_cardone :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z), ((cardinal s) = 1%Z) ->
  (is_a_ket_l (f (choose s)) l) -> ((ket_sum_l s f l) = (f (choose s))).

Axiom ket_sum_l_plus_one :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (e:a) (f:a -> matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  ~ (mem e s) -> (forall (e1:a), (mem e1 s) -> is_a_ket_l (f e1) l) ->
  (is_a_ket_l (f e) l) ->
  ((ket_sum_l (add e s) f l) = (add_ket_l (ket_sum_l s f l) (f e) l)).

Axiom ket_sum_l_valid_index :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (l:Z) (i:Z), (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  (forall (e:a), (mem e s) -> valid_index (f e) i 0%Z) ->
  valid_index (ket_sum_l s f l) i 0%Z.

Axiom ket_sum_const :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (x:matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (is_a_ket_l x l) ->
  ((ket_sum_l s (fun (us:a) => x) l) =
   (infix_asdtdt (i_to_t (cardinal s)) x)).

Axiom ket_sum_const_w :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (x:matrix t) (l:Z), (0%Z < (cardinal s))%Z ->
  (is_a_ket_l x l) ->
  ((infix_asdtdt (infix_sldt tone (i_to_t (cardinal s)))
    (ket_sum_l s (fun (us:a) => x) l))
   = x).

Axiom map_ket_sum_l :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (f:b -> matrix t) (s:set a) (t1:a -> b) (n:Z),
  (0%Z < (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> is_a_ket_l (f (t1 e)) n) ->
  (p_injective t1 s) ->
  ((ket_sum_l (map t1 s) f n) = (ket_sum_l s (fun (a1:a) => (f (t1 a1))) n)).

Axiom ket_norm_l_unif_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (c:Z) (n:Z), (0%Z <= n)%Z ->
  ((cardinal s) = c) -> (forall (e:a), (mem e s) -> is_a_ket_l (f e) n) ->
  (forall (e:a), (mem e s) -> ((ket_norm_l (f e) n) = tone)) ->
  ((ket_norm_l
    (infix_asdtdt (infix_sldt tone (square_rt (i_to_t c))) (ket_sum_l s f n))
    n)
   = tone).

Axiom ket_sum_partition :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (s1:set a) (s2:set a) (f:a -> matrix t) (n:Z),
  (0%Z <= n)%Z -> (forall (e:a), (mem e s) -> is_a_ket_l (f e) n) ->
  (s = (union s1 s2)) -> ((inter s1 s2) = (empty : set a)) ->
  ((ket_sum_l s f n) = (add_mat (ket_sum_l s1 f n) (ket_sum_l s2 f n))).

Axiom ket_decomp :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (is_a_ket m) ->
  ((ket_length m) = n) ->
  (m =
   (mat_sum (to_fset 0%Z (power 2%Z n))
    (fun (j:Z) => (infix_asdtdt (get m j 0%Z) (ket n j))))).

Axiom ket_decomp_bv :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (is_a_ket m) ->
  ((ket_length m) = n) ->
  (m =
   (ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) =>
     (infix_asdtdt (get m (bv_to_int bvx) 0%Z) (ket n (bv_to_int bvx))))
    n)).

Axiom ket_recomp :
  forall (f:Z -> t) (n:Z), (0%Z <= n)%Z ->
  ((mat_sum (to_fset 0%Z (power 2%Z n))
    (fun (j:Z) => (infix_asdtdt (f j) (ket n j))))
   = (make_f (power 2%Z n) 1%Z (fun (x:Z) (us:Z) => (f x)))).

Axiom ket_decomp_quant :
  forall (m:matrix t), (is_a_ket m) ->
  (m =
   (mat_sum (to_fset 0%Z (power 2%Z (ket_length m)))
    (fun (j:Z) => (infix_asdtdt (get m j 0%Z) (ket (ket_length m) j))))).

Axiom mat_mult_ket_basis :
  forall (m:matrix t) (x:matrix t), (is_a_ket_basis_elt x) ->
  (((columns m) = (rows m)) /\ ((rows m) = (rows x))) ->
  ((mat_mult m x) =
   (mat_sum (to_fset 0%Z (rows x))
    (fun (k:Z) =>
     (infix_asdtdt (get m k (ket_to_int x)) (ket (ket_length x) k))))).

Axiom ket_mult_diag :
  forall (m:matrix t) (x:matrix t), (1%Z <= (ket_length x))%Z ->
  (is_a_ket_basis_elt x) -> ((rows m) = (power 2%Z (ket_length x))) ->
  ((columns m) = (power 2%Z (ket_length x))) ->
  (forall (i:Z) (j:Z),
   ((0%Z <= i)%Z /\ (i < (power 2%Z (ket_length x)))%Z) ->
   ((0%Z <= j)%Z /\ (j < (power 2%Z (ket_length x)))%Z) -> ~ (i = j) ->
   ((get m i j) = tzero)) ->
  ((mat_mult m x) =
   (infix_asdtdt (get m (ket_to_int x) (ket_to_int x))
    (ket (ket_length x) (ket_to_int x)))).

Axiom mat_mult_ket_basis_bv :
  forall (m:matrix t) (x:matrix t) (n:Z), ((ket_length x) = n) ->
  (is_a_ket_basis_elt x) ->
  (((columns m) = (rows m)) /\ ((rows m) = (rows x))) ->
  ((mat_mult m x) =
   (ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) =>
     (infix_asdtdt (get m (bv_to_int bvx) (ket_to_int x))
      (ket n (bv_to_int bvx))))
    n)).

Axiom mat_mult_ket_basis_bv_gen :
  forall (m:matrix t) (x:matrix t), (is_a_ket_basis_elt x) ->
  (((columns m) = (rows m)) /\ ((rows m) = (rows x))) ->
  ((mat_mult m x) =
   (ket_sum_l (n_bvs (ket_length x))
    (fun (bvx:bitvec) =>
     (infix_asdtdt (get m (bv_to_int bvx) (ket_to_int x))
      (ket (ket_length x) (bv_to_int bvx))))
    (ket_length x))).

Axiom mat_mult_ket_bv :
  forall (m:matrix t) (x:matrix t) (n:Z), (is_a_ket_l x n) ->
  (((columns m) = (rows m)) /\
   (((rows m) = (rows x)) /\ ((rows x) = (power 2%Z n)))) ->
  ((mat_mult m x) =
   (ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) =>
     (infix_asdtdt (get x (bv_to_int bvx) 0%Z)
      (mat_mult m (ket n (bv_to_int bvx)))))
    n)).

Axiom mat_mult_ket_bv_gen :
  forall (m:matrix t) (x:matrix t), (is_a_ket x) ->
  (((columns m) = (rows m)) /\ ((rows m) = (rows x))) ->
  ((mat_mult m x) =
   (ket_sum_l (n_bvs (ket_length x))
    (fun (bvx:bitvec) =>
     (infix_asdtdt (get x (bv_to_int bvx) 0%Z)
      (mat_mult m (ket (ket_length x) (bv_to_int bvx)))))
    (ket_length x))).

Axiom fun_inversion_pre :
  forall (f:Z -> Z) (s:set Z) (s':set Z) (a:Z -> t) (n:Z), (0%Z <= n)%Z ->
  (0%Z < (cardinal s))%Z -> (p_bijective f s s') ->
  (subset s (to_fset 0%Z n)) -> (subset s' (to_fset 0%Z n)) ->
  ((mat_sum s
    (fun (j:Z) =>
     (infix_asdtdt (a j) (set1 (make n 1%Z tzero) (f j) 0%Z tone))))
   =
   (mat_sum s'
    (fun (j:Z) =>
     (infix_asdtdt (a (inv_func f s s' j))
      (set1 (make n 1%Z tzero) j 0%Z tone))))).

Axiom ket_fun_inversion :
  forall (f:Z -> Z) (a:Z -> t) (m:matrix t) (pow_2_n:Z),
  (pow_2_n = (power 2%Z (ket_length m))) -> (is_a_ket m) ->
  (0%Z < pow_2_n)%Z ->
  (p_bijective f (to_fset 0%Z pow_2_n) (to_fset 0%Z pow_2_n)) ->
  (m =
   (mat_sum (to_fset 0%Z pow_2_n)
    (fun (j:Z) => (infix_asdtdt (a j) (ket (ket_length m) (f j)))))) ->
  (m =
   (mat_sum (to_fset 0%Z pow_2_n)
    (fun (j:Z) =>
     (infix_asdtdt (a (inv_ f (to_fset 0%Z pow_2_n) (to_fset 0%Z pow_2_n) j))
      (ket (ket_length m) j))))).

Parameter ket_to_bv: (matrix t) -> bitvec.

Axiom ket_to_bv_def :
  forall (x:matrix t), (is_a_ket_basis_elt x) ->
  ((ket_to_bv x) = (int_to_bv (ket_to_int x) (ket_length x))).

Axiom ket_to_bv_spec :
  forall (x:matrix t), (is_a_ket_basis_elt x) ->
  ((bv_to_int (ket_to_bv x)) = (ket_to_int x)).

Axiom ket_to_bv_spec1 :
  forall (x:matrix t), (is_a_ket_basis_elt x) ->
  ((length (ket_to_bv x)) = (ket_length x)).

Axiom ket_to_bv_spec2 :
  forall (x:matrix t), (is_a_ket_basis_elt x) ->
  mem (ket_to_bv x) (n_bvs (ket_length x)).

(* Why3 assumption *)
Definition bv_to_ket (bv:bitvec) : matrix t :=
  ket (length bv) (bv_to_int bv).

Axiom bv_to_ket_spec : forall (bv:bitvec), is_a_ket_basis_elt (bv_to_ket bv).

Axiom bv_to_ket_spec1 :
  forall (bv:bitvec), ((ket_to_int (bv_to_ket bv)) = (bv_to_int bv)).

Axiom bv_to_ket_spec2 :
  forall (bv:bitvec), ((ket_length (bv_to_ket bv)) = (length bv)).

Axiom bv_to_ket_spec3 :
  forall (bv:bitvec), ((rows (bv_to_ket bv)) = (power 2%Z (length bv))).

Axiom bv_to_ket_spec4 : forall (bv:bitvec), ((columns (bv_to_ket bv)) = 1%Z).

Axiom bv_to_ket_spec5 :
  forall (bv:bitvec), ((bv_to_ket bv) = (bin_to_ket (length bv) (value bv))).

Axiom ket_to_bv_ket_length :
  forall (i:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((length (ket_to_bv (ket n i))) = n).

Axiom is_a_ket_l_bv_to_ket :
  forall (bv:bitvec) (l:Z), ((length bv) = l) -> is_a_ket_l (bv_to_ket bv) l.

Axiom bin_to_ket_to_bv_to_ket :
  forall (f:Z -> Z) (n:Z), (0%Z <= n)%Z -> (binary f) ->
  ((bin_to_ket n f) = (bv_to_ket (make_bv f n))).

Axiom bin_to_ket_to_bv_to_ket_abs :
  forall (f:Z -> Z) (n:Z) (a:bitvec), (0%Z <= n)%Z -> (a = (make_bv f n)) ->
  (binary f) -> ((bin_to_ket n f) = (bv_to_ket a)).

Axiom ket_to_int_to_bv_to_ket :
  forall (n:Z) (e:bitvec), (0%Z <= n)%Z -> (mem e (n_bvs n)) ->
  ((ket n (bv_to_int e)) = (bv_to_ket e)).

Axiom bv_to_ket_length :
  forall (bv:bitvec), ((ket_length (bv_to_ket bv)) = (length bv)).

Axiom is_a_ket_l_bvs :
  forall (e:bitvec) (n:Z), (0%Z <= n)%Z -> (mem e (n_bvs n)) ->
  is_a_ket_l (bv_to_ket e) n.

Axiom is_a_ket_l_scal_bvs :
  forall (e:bitvec) (n:Z) (a:t), (0%Z <= n)%Z -> (mem e (n_bvs n)) ->
  is_a_ket_l (infix_asdtdt a (bv_to_ket e)) n.

Axiom ket_to_bv_concat :
  forall (x:bitvec) (y:bitvec),
  ((bv_to_ket (concat x y)) = (kronecker (bv_to_ket x) (bv_to_ket y))).

Axiom bv_to_ket_concat_rev :
  forall (x:bitvec) (y:bitvec),
  ((kronecker (bv_to_ket x) (bv_to_ket y)) = (bv_to_ket (concat x y))).

Axiom bv_to_ket_to_bv :
  forall (bv:bitvec), ((ket_to_bv (bv_to_ket bv)) = bv).

Axiom ket_to_bv_to_ket :
  forall (x:matrix t), (is_a_ket_basis_elt x) ->
  ((bv_to_ket (ket_to_bv x)) = x).

Axiom bv_to_ket_eq :
  forall (bv1:bitvec) (bv2:bitvec), ((length bv1) = (length bv2)) ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < (length bv1))%Z) ->
   (((value bv1) i) = ((value bv2) i))) ->
  ((bv_to_ket bv1) = (bv_to_ket bv2)).

Axiom ket_to_bv_kronecker :
  forall (x:matrix t) (y:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_basis_elt y) ->
  ((ket_to_bv (kronecker x y)) = (concat (ket_to_bv x) (ket_to_bv y))).

Axiom ket_decomp_bv_ket :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z -> (is_a_ket m) ->
  ((ket_length m) = n) ->
  (m =
   (ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) =>
     (infix_asdtdt (get m (bv_to_int bvx) 0%Z) (ket n (bv_to_int bvx))))
    n)).

Axiom ket_zero : forall (n:Z), (0%Z <= n)%Z -> is_a_ket_l (ket n 0%Z) n.

Axiom ket_zero1 :
  forall (n:Z), (0%Z <= n)%Z -> is_a_ket_basis_elt (ket n 0%Z).

Axiom ket_zero2 :
  forall (n:Z), (0%Z <= n)%Z ->
  ((ket_to_bv (ket n 0%Z)) = (make_bv (fun (us:Z) => 0%Z) n)).

Axiom ket_zero3 :
  forall (n:Z), (0%Z <= n)%Z -> forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) ->
  (((value (ket_to_bv (ket n 0%Z))) i) = 0%Z).

Axiom uniform_ket_norm_l :
  forall (x:matrix t) (f:bitvec -> t) (n:Z), (is_a_ket_l x n) ->
  (forall (e:bitvec), (mem e (n_bvs n)) -> ((modulus (f e)) = tone)) ->
  (x =
   (infix_asdtdt (pow_inv_sqrt_2 n)
    (ket_sum_l (n_bvs n)
     (fun (x1:bitvec) => (infix_asdtdt (f x1) (bv_to_ket x1))) n))) ->
  ((ket_norm_l x n) = tone).

Axiom ket_sum_of_scalars :
  forall (f:bitvec -> t) (n:Z), (0%Z <= n)%Z ->
  is_a_ket_l
  (ket_sum_l (n_bvs n) (fun (x:bitvec) => (infix_asdtdt (f x) (bv_to_ket x)))
   n)
  n.

Axiom ket_sum_of_scalars1 :
  forall (f:bitvec -> t) (n:Z), (0%Z <= n)%Z -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (power_ 2%Z n))%Z) ->
  ((get
    (ket_sum_l (n_bvs n)
     (fun (x:bitvec) => (infix_asdtdt (f x) (bv_to_ket x))) n)
    i 0%Z)
   = (f (int_to_bv i n))).

Axiom mat_sum_sum_cartesian_product_pre :
  forall {a:Type} {a_WT:WhyType a} {b:Type} {b_WT:WhyType b},
  forall (s1:set a) (s2:set b) (f:a -> b -> matrix t) (r:Z) (c:Z),
  (0%Z < r)%Z -> (0%Z < c)%Z ->
  (forall (a1:a) (b1:b), (mem a1 s1) -> (mem b1 s2) ->
   ((rows ((f a1) b1)) = r)) ->
  (forall (a1:a) (b1:b), (mem a1 s1) -> (mem b1 s2) ->
   ((columns ((f a1) b1)) = c)) ->
  (0%Z < (cardinal s1))%Z -> (0%Z < (cardinal s2))%Z ->
  ((mat_sum s1 (fun (a1:a) => (mat_sum s2 (f a1)))) =
   (mat_sum (cartesian_product s1 s2)
    (fun (o:(a* b)%type) => ((f (fir o)) (sec o))))).

Axiom mat_sum_comp1 :
  forall (f:bitvec -> bitvec -> matrix t) (l:Z) (x:Z) (y:Z), (0%Z <= x)%Z ->
  (0%Z <= y)%Z -> (0%Z <= l)%Z ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> is_a_ket ((f bvy) bvx)) ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> ((ket_length ((f bvy) bvx)) = l)) ->
  ((mat_sum (n_bvs y)
    (fun (bvy:bitvec) =>
     (mat_sum (n_bvs x) (fun (bvx:bitvec) => ((f bvy) bvx)))))
   =
   (mat_sum (n_bvs (x + y)%Z)
    (fun (bv:bitvec) => ((f (hpart bv y)) (tpart bv y))))).

Axiom mat_sum_comp_rev :
  forall (f:bitvec -> bitvec -> matrix t) (l:Z) (x:Z) (y:Z), (0%Z <= x)%Z ->
  (0%Z <= y)%Z -> (0%Z <= l)%Z ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> is_a_ket ((f bvy) bvx)) ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> ((ket_length ((f bvy) bvx)) = l)) ->
  ((mat_sum (n_bvs (x + y)%Z)
    (fun (bv:bitvec) => ((f (hpart bv y)) (tpart bv y))))
   =
   (mat_sum (n_bvs y)
    (fun (bvy:bitvec) =>
     (mat_sum (n_bvs x) (fun (bvx:bitvec) => ((f bvy) bvx)))))).

Axiom ket_sum_bin_comp_l :
  forall (f:bitvec -> bitvec -> matrix t) (scal:bitvec -> t) (l:Z) (x:Z)
    (y:Z),
  (0%Z <= x)%Z -> (0%Z <= y)%Z ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> is_a_ket_l ((f bvy) bvx) l) ->
  ((ket_sum_l (n_bvs y)
    (fun (bvy:bitvec) =>
     (infix_asdtdt (scal bvy)
      (ket_sum_l (n_bvs x) (fun (bvx:bitvec) => ((f bvy) bvx)) l)))
    l)
   =
   (ket_sum_l (n_bvs (x + y)%Z)
    (fun (bv:bitvec) =>
     (infix_asdtdt (scal (hpart bv y)) ((f (hpart bv y)) (tpart bv y))))
    l)).

Axiom ket_sum_bin_comp :
  forall (f:bitvec -> bitvec -> matrix t) (l:Z) (x:Z) (y:Z), (0%Z <= x)%Z ->
  (0%Z <= y)%Z ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> is_a_ket_l ((f bvy) bvx) l) ->
  ((ket_sum_l (n_bvs y)
    (fun (bvy:bitvec) =>
     (ket_sum_l (n_bvs x) (fun (bvx:bitvec) => ((f bvy) bvx)) l))
    l)
   =
   (ket_sum_l (n_bvs (x + y)%Z)
    (fun (bv:bitvec) => ((f (hpart bv y)) (tpart bv y))) l)).

Axiom ket_sum_bin_comp_rev :
  forall (f:bitvec -> bitvec -> matrix t) (l:Z) (x:Z) (y:Z), (0%Z <= x)%Z ->
  (0%Z <= y)%Z ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> is_a_ket_l ((f bvy) bvx) l) ->
  ((ket_sum_l (n_bvs (x + y)%Z)
    (fun (bv:bitvec) => ((f (hpart bv y)) (tpart bv y))) l)
   =
   (ket_sum_l (n_bvs y)
    (fun (bvy:bitvec) =>
     (ket_sum_l (n_bvs x) (fun (bvx:bitvec) => ((f bvy) bvx)) l))
    l)).

Axiom ket_sum_bin_comp_rev_ :
  forall (f:bitvec -> bitvec -> matrix t) (l:Z) (x:Z) (y:Z), (0%Z <= x)%Z ->
  (0%Z <= y)%Z ->
  (forall (bvx:bitvec) (bvy:bitvec), (mem bvx (n_bvs x)) ->
   (mem bvy (n_bvs y)) -> is_a_ket_l ((f bvx) bvy) l) ->
  ((ket_sum_l (n_bvs (x + y)%Z)
    (fun (bv:bitvec) => ((f (hpart bv x)) (tpart bv x))) l)
   =
   (ket_sum_l (n_bvs x)
    (fun (bvx:bitvec) =>
     (ket_sum_l (n_bvs y) (fun (bvy:bitvec) => ((f bvx) bvy)) l))
    l)).

Axiom ket_sum_bv_to_ints :
  forall (n:Z) (f:bitvec -> matrix t) (g:Z -> matrix t), (0%Z <= n)%Z ->
  (forall (x:bitvec), ((length x) = n) -> ((f x) = (g (bv_to_int x)))) ->
  ((ket_sum_l (n_bvs n) f n) = (ket_sum_l (to_fset 0%Z (power 2%Z n)) g n)).

Axiom ket_sum_sum_rev :
  forall (f:bitvec -> bitvec -> matrix t) (sx:set bitvec) (sy:set bitvec)
    (l:Z),
  (0%Z <= l)%Z -> (forall (x:bitvec), (mem x sx) -> ((length x) = l)) ->
  (forall (y:bitvec), (mem y sy) -> ((length y) = l)) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = l) -> ((length y) = l) ->
   is_a_ket_l ((f x) y) l) ->
  ((ket_sum_l sx (fun (x:bitvec) => (ket_sum_l sy (f x) l)) l) =
   (ket_sum_l sy
    (fun (y:bitvec) => (ket_sum_l sx (fun (x:bitvec) => ((f x) y)) l)) l)).

Axiom get_ket_sum :
  forall (f:bitvec -> t) (n:Z) (i:Z),
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) -> (0%Z <= n)%Z ->
  ((get
    (ket_sum_l (n_bvs n)
     (fun (y:bitvec) => (infix_asdtdt (f y) (bv_to_ket y))) n)
    i 0%Z)
   = (f (int_to_bv i n))).

Axiom get_ket_scalar :
  forall (x:matrix t) (a:t) (i:Z),
  ((0%Z <= i)%Z /\ (i < (ket_length x))%Z) ->
  ((get (infix_asdtdt a x) i 0%Z) = (infix_asdt a (get x i 0%Z))).

Axiom get_ket_scalar_zero :
  forall (x:matrix t) (a:t),
  ((get (infix_asdtdt a x) 0%Z 0%Z) = (infix_asdt a (get x 0%Z 0%Z))).

Axiom ket_sum_sum_complex :
  forall (f:bitvec -> bitvec -> t) (sx:set bitvec) (sy:set bitvec) (l:Z),
  (0%Z <= l)%Z -> (forall (x:bitvec), (mem x sx) -> ((length x) = l)) ->
  (forall (y:bitvec), (mem y sy) -> ((length y) = l)) ->
  ((ket_sum_l sx
    (fun (x:bitvec) =>
     (ket_sum_l sy (fun (y:bitvec) => (infix_asdtdt ((f x) y) (bv_to_ket y)))
      l))
    l)
   =
   (ket_sum_l sy
    (fun (y:bitvec) =>
     (infix_asdtdt (sum sx (fun (x:bitvec) => ((f x) y))) (bv_to_ket y)))
    l)).

Parameter mat_sem: gate -> matrix t.

Axiom mat_sem_spec :
  forall (c:gate), ((columns (mat_sem c)) = (power 2%Z (size c))).

Axiom mat_sem_spec1 :
  forall (c:gate), ((rows (mat_sem c)) = (power 2%Z (size c))).

Parameter path_sum_scheme_unit:
  (bitvec -> bitvec -> angle) -> (bitvec -> bitvec -> bitvec) -> Z -> 
  Z -> bitvec -> matrix t.

Axiom path_sum_scheme_unit_def :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:bitvec),
  (0%Z <= range1)%Z -> ((length x) = size1) ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  ((path_sum_scheme_unit a k size1 range1 x) =
   (infix_asdtdt (pow_inv_sqrt_2 range1)
    (ket_sum_l (n_bvs range1)
     (fun (y:bitvec) =>
      (infix_asdtdt (ang_exp ((a x) y)) (bv_to_ket ((k x) y))))
     size1))).

Axiom path_sum_scheme_unit_spec :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:bitvec),
  (0%Z <= range1)%Z -> ((length x) = size1) ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  is_a_ket_l (path_sum_scheme_unit a k size1 range1 x) size1.

Parameter path_sum_scheme:
  (bitvec -> bitvec -> angle) -> (bitvec -> bitvec -> bitvec) -> Z -> 
  Z -> (matrix t) -> matrix t.

Axiom path_sum_scheme_def :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:matrix t),
  (is_a_ket_l x size1) -> (0%Z <= range1)%Z ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  ((path_sum_scheme a k size1 range1 x) =
   (ket_sum_l (n_bvs size1)
    (fun (z:bitvec) =>
     (infix_asdtdt (get x (bv_to_int z) 0%Z)
      (path_sum_scheme_unit a k size1 range1 (hpart z size1))))
    size1)).

Axiom path_sum_scheme_spec :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:matrix t),
  (is_a_ket_l x size1) -> (0%Z <= range1)%Z ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  is_a_ket_l (path_sum_scheme a k size1 range1 x) size1.

Axiom path_sum_scheme_spec1 :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:matrix t),
  (is_a_ket_l x size1) -> (0%Z <= range1)%Z ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  ((path_sum_scheme a k size1 range1 x) =
   (ket_sum_l (n_bvs size1)
    (fun (z:bitvec) =>
     (infix_asdtdt (get x (bv_to_int z) 0%Z)
      (path_sum_scheme_unit a k size1 range1 z)))
    size1)).

Axiom path_sum_scheme_basis :
  forall (a:bitvec -> bitvec -> angle),
  forall (k:bitvec -> bitvec -> bitvec), forall (size1:Z) (range1:Z),
  forall (x:matrix t), (is_a_ket_l x size1) -> (0%Z <= range1)%Z ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  (is_a_ket_basis_elt x) ->
  ((path_sum_scheme a k size1 range1 x) =
   (path_sum_scheme_unit a k size1 range1 (ket_to_bv x))).

Axiom set_path_sum_basis :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:matrix t),
  (is_a_ket_l x size1) -> (is_a_ket_basis_elt x) -> (0%Z <= range1)%Z ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  ((path_sum_scheme a k size1 range1 x) =
   (path_sum_scheme_unit a k size1 range1 (ket_to_bv x))).

Axiom mat_sem_sequence :
  forall (d:gate) (e:gate), ((size d) = (size e)) ->
  ((mat_sem (sequence d e)) = (mat_mult (mat_sem e) (mat_sem d))).

Axiom mat_sem_par :
  forall (d:gate) (e:gate),
  ((mat_sem (parallel d e)) = (kronecker (mat_sem d) (mat_sem e))).

Axiom path_sum_decomp :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:matrix t),
  (is_a_ket_l x size1) -> (0%Z <= range1)%Z ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  ((path_sum_scheme a k size1 range1 x) =
   (ket_sum_l (n_bvs size1)
    (fun (z:bitvec) =>
     (infix_asdtdt (get x (bv_to_int z) 0%Z)
      (path_sum_scheme a k size1 range1 (bv_to_ket z))))
    size1)).

Axiom get_path_sum_basis :
  forall (a:bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (size1:Z) (range1:Z) (x:bitvec),
  ((length x) = size1) -> (0%Z <= range1)%Z ->
  (forall (x1:bitvec) (y:bitvec), ((length x1) = size1) ->
   ((length y) = range1) -> ((length ((k x1) y)) = size1)) ->
  ((path_sum_scheme_unit a k size1 range1 x) =
   (path_sum_scheme a k size1 range1 (bv_to_ket x))).

(* Why3 assumption *)
Definition correct_path_sum_unit (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (range1:Z) (x:bitvec) : Prop :=
  (forall (x1:bitvec) (y:bitvec), ((length x1) = (size c)) ->
   ((length y) = range1) -> ((length ((k x1) y)) = (size c))) /\
  ((0%Z <= range1)%Z /\
   (((length x) = (size c)) /\
    ((mat_mult (mat_sem c) (bv_to_ket x)) =
     (path_sum_scheme_unit a k (size c) range1 x)))).

Parameter correct_path_sum:
  gate -> (bitvec -> bitvec -> angle) -> (bitvec -> bitvec -> bitvec) -> 
  Z -> Prop.

Axiom correct_path_sum_def :
  forall (c:gate), forall (a:bitvec -> bitvec -> angle),
  forall (k:bitvec -> bitvec -> bitvec), forall (range1:Z),
  (correct_path_sum c a k range1) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size c)) -> ((length y) = range1) ->
  ((length ((k x) y)) = (size c)).

Axiom correct_path_sum_def1 :
  forall (c:gate), forall (a:bitvec -> bitvec -> angle),
  forall (k:bitvec -> bitvec -> bitvec), forall (range1:Z),
  (correct_path_sum c a k range1) -> (0%Z <= range1)%Z.

Axiom correct_path_sum_def2 :
  forall (c:gate), forall (a:bitvec -> bitvec -> angle),
  forall (k:bitvec -> bitvec -> bitvec), forall (range1:Z),
  (correct_path_sum c a k range1) -> forall (x:matrix t),
  (is_a_ket_l x (size c)) ->
  ((mat_mult (mat_sem c) x) = (path_sum_scheme a k (size c) range1 x)).

Axiom correct_path_sum_def3 :
  forall (c:gate), forall (a:bitvec -> bitvec -> angle),
  forall (k:bitvec -> bitvec -> bitvec), forall (range1:Z),
  ((forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
    ((length y) = range1) -> ((length ((k x) y)) = (size c))) /\
   ((0%Z <= range1)%Z /\
    forall (x:matrix t), (is_a_ket_l x (size c)) ->
    ((mat_mult (mat_sem c) x) = (path_sum_scheme a k (size c) range1 x)))) ->
  correct_path_sum c a k range1.

Axiom correct_path_sum_basis :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (range1:Z) (x:bitvec),
  ((length x) = (size c)) -> (correct_path_sum c a k range1) ->
  correct_path_sum_unit c a k range1 x.

Axiom correct_main_path_sum :
  forall (c:gate),
  correct_path_sum c
  ((fun (y0:gate) (y1:bitvec) (y2:bitvec) => (ang_ind y0 y1 y2)) c)
  ((fun (y0:gate) (y1:bitvec) (y2:bitvec) => (basis_ket y0 y1 y2)) c)
  (range c).

Axiom set_correct_main_path_sum :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (b:bitvec -> bitvec -> bitvec) (r:Z),
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = r) -> (((a x) y) = (ang_ind c x y))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = r) -> (((b x) y) = (basis_ket c x y))) ->
  (r = (range c)) -> correct_path_sum c a b r.

Parameter pat_sem: gate -> (matrix t) -> matrix t.

Axiom pat_sem_def :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) ->
  ((pat_sem c x) =
   (path_sum_scheme
    ((fun (y0:gate) (y1:bitvec) (y2:bitvec) => (ang_ind y0 y1 y2)) c)
    ((fun (y0:gate) (y1:bitvec) (y2:bitvec) => (basis_ket y0 y1 y2)) c)
    (size c) (range c) x)).

Axiom pat_sem_spec :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) ->
  is_a_ket_l (pat_sem c x) (size c).

Axiom pat_sem_decomp :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) ->
  ((pat_sem c x) =
   (ket_sum_l (n_bvs (size c))
    (fun (z:bitvec) =>
     (infix_asdtdt (get x (bv_to_int z) 0%Z) (pat_sem c (bv_to_ket z))))
    (size c))).

Axiom pat_sem_unit :
  forall (c:gate) (x:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_l x (size c)) ->
  ((pat_sem c x) =
   (infix_asdtdt (pow_inv_sqrt_2 (range c))
    (ket_sum_l (n_bvs (range c))
     (fun (y:bitvec) =>
      (infix_asdtdt (ang_exp (ang_ind c (ket_to_bv x) y))
       (bv_to_ket (basis_ket c (ket_to_bv x) y))))
     (size c)))).

Parameter sem: gate -> (matrix t) -> (matrix t) -> Prop.

Axiom def_sem :
  forall (c:gate), forall (x:matrix t) (y:matrix t), (sem c x y) ->
  is_a_ket_l x (size c).

Axiom def_sem1 :
  forall (c:gate), forall (x:matrix t) (y:matrix t), (sem c x y) ->
  ((pat_sem c x) = y).

Axiom def_sem2 :
  forall (c:gate), forall (x:matrix t) (y:matrix t),
  ((is_a_ket_l x (size c)) /\ ((pat_sem c x) = y)) -> sem c x y.

Axiom sem_ket_l :
  forall (c:gate) (x:matrix t) (y:matrix t), (sem c x y) ->
  is_a_ket_l y (size c).

Axiom pat_to_mat_sem :
  forall (c:gate) (x:matrix t) (y:matrix t), (is_a_ket_l x (size c)) ->
  ((pat_sem c x) = y) -> ((mat_mult (mat_sem c) x) = y).

Axiom mat_to_pat_sem :
  forall (c:gate) (x:matrix t) (y:matrix t), (is_a_ket_l x (size c)) ->
  ((mat_mult (mat_sem c) x) = y) -> ((pat_sem c x) = y).

Axiom sem_to_mat :
  forall (c:gate) (x:matrix t) (y:matrix t), (sem c x y) ->
  ((mat_mult (mat_sem c) x) = y).

Axiom sem_to_pat :
  forall (c:gate) (x:matrix t) (y:matrix t), (sem c x y) ->
  ((pat_sem c x) = y).

Axiom mat_to_sem :
  forall (c:gate) (x:matrix t) (y:matrix t), (is_a_ket_l x (size c)) ->
  ((mat_mult (mat_sem c) x) = y) -> sem c x y.

Axiom pat_to_sem :
  forall (c:gate) (x:matrix t) (y:matrix t), (is_a_ket_l x (size c)) ->
  ((pat_sem c x) = y) -> sem c x y.

Axiom add_sem :
  forall (c:gate) (x:matrix t) (x':matrix t) (y:matrix t) (y':matrix t),
  (sem c x y) -> (sem c x' y') -> sem c (add_mat x x') (add_mat y y').

Axiom pat_sem_add :
  forall (c:gate) (x:matrix t) (x':matrix t) (y:matrix t) (y':matrix t),
  ((pat_sem c x) = y) -> ((pat_sem c x') = y') ->
  ((pat_sem c (add_mat x x')) = (add_mat y y')).

Axiom scal_sem :
  forall (c:gate) (x:matrix t) (y:matrix t) (sc:t), (sem c x y) ->
  sem c (infix_asdtdt sc x) (infix_asdtdt sc y).

Axiom pat_sem_scal_ :
  forall (c:gate) (x:matrix t) (y:matrix t) (sc:t),
  (is_a_ket_l x (size c)) -> ((pat_sem c x) = y) ->
  ((pat_sem c (infix_asdtdt sc x)) = (infix_asdtdt sc y)).

Axiom pat_sem_scal :
  forall (c:gate) (x:matrix t) (sc:t), (is_a_ket_l x (size c)) ->
  ((pat_sem c (infix_asdtdt sc x)) = (infix_asdtdt sc (pat_sem c x))).

Axiom comp_sem :
  forall (c:gate) (c':gate) (x:matrix t) (y:matrix t) (z:matrix t),
  ((size c) = (size c')) -> (sem c x y) -> (sem c' y z) ->
  sem (sequence c c') x z.

Axiom pat_sem_comp :
  forall (c:gate) (c':gate) (x:matrix t) (y:matrix t) (z:matrix t),
  ((size c) = (size c')) -> ((pat_sem c x) = y) -> ((pat_sem c' y) = z) ->
  ((pat_sem (sequence c c') x) = z).

Axiom par_sem :
  forall (c:gate) (c':gate) (x:matrix t) (y:matrix t) (z:matrix t)
    (t1:matrix t),
  (sem c x y) -> (sem c' z t1) ->
  sem (parallel c c') (kronecker x z) (kronecker y t1).

Axiom sum_sem :
  forall {a:Type} {a_WT:WhyType a},
  forall (c:gate) (s:set a) (f:a -> matrix t) (g:a -> matrix t),
  (1%Z <= (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> sem c (f e) (g e)) ->
  sem c (ket_sum_l s f (size c)) (ket_sum_l s g (size c)).

Axiom sum_sem_gen :
  forall {a:Type} {a_WT:WhyType a},
  forall (c:gate) (s:set a) (f:a -> matrix t) (g:a -> matrix t) (l1:Z) (l2:Z),
  (1%Z <= (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> sem c (f e) (g e)) -> (l1 = (size c)) ->
  (l2 = (size c)) -> sem c (ket_sum_l s f l1) (ket_sum_l s g l2).

Axiom sum_scal_sem :
  forall {a:Type} {a_WT:WhyType a},
  forall (c:gate) (s:set a) (f:a -> matrix t) (h:a -> matrix t) (g:a -> t),
  (1%Z <= (cardinal s))%Z ->
  (forall (e:a), (mem e s) -> sem c (f e) (h e)) ->
  sem c (ket_sum_l s (fun (e:a) => (infix_asdtdt (g e) (f e))) (size c))
  (ket_sum_l s (fun (e:a) => (infix_asdtdt (g e) (h e))) (size c)).

Axiom scal_pat_sem :
  forall (c:gate) (x:matrix t) (sc:t),
  ((pat_sem c (infix_asdtdt sc x)) = (infix_asdtdt sc (pat_sem c x))).

Axiom comp_sem_scal :
  forall (c:gate) (c':gate) (x:matrix t) (y:matrix t) (z:matrix t) (a:t),
  ((size c) = (size c')) -> (sem c x y) -> (sem c' y z) ->
  sem (sequence c c') (infix_asdtdt a x) (infix_asdtdt a z).

Axiom comp_sem_add :
  forall (c:gate) (c':gate) (x:matrix t) (x':matrix t) (y:matrix t)
    (y':matrix t) (z:matrix t) (z':matrix t),
  ((size c) = (size c')) -> (sem c x y) -> (sem c x' y') -> (sem c' y z) ->
  (sem c' y' z') -> sem (sequence c c') (add_mat x x') (add_mat z z').

Axiom comp_sem_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (c:gate) (c':gate) (f:a -> matrix t) (g:a -> matrix t)
    (h:a -> matrix t) (s:set a),
  (0%Z < (cardinal s))%Z -> ((size c) = (size c')) ->
  (forall (e:a), (mem e s) -> sem c (f e) (g e)) ->
  (forall (e:a), (mem e s) -> sem c' (g e) (h e)) ->
  sem (sequence c c') (ket_sum_l s f (size c)) (ket_sum_l s h (size c)).

Axiom comp_sem_basis :
  forall {a:Type} {a_WT:WhyType a},
  forall (c:gate) (c':gate) (g:a -> matrix t) (h:a -> matrix t) (s:set a)
    (x:matrix t),
  (0%Z < (cardinal s))%Z -> ((size c) = (size c')) ->
  (sem c x (ket_sum_l s g (size c))) ->
  (forall (e:a), (mem e s) -> sem c' (g e) (h e)) ->
  sem (sequence c c') x (ket_sum_l s h (size c)).

Axiom sem_decomp :
  forall (c:gate) (f:bitvec -> matrix t) (x:matrix t),
  (forall (x1:bitvec), ((length x1) = (size c)) ->
   sem c (bv_to_ket x1) (f x1)) ->
  sem c x
  (ket_sum_l (n_bvs (size c))
   (fun (j:bitvec) => (infix_asdtdt (get_ket_bv x j) (f j))) (size c)).

Axiom pat_sem_sum :
  forall {a:Type} {a_WT:WhyType a},
  forall (c:gate) (s:set a) (f:a -> matrix t) (g:a -> matrix t) (n:Z),
  (1%Z <= (cardinal s))%Z -> (n = (size c)) ->
  (forall (x:a), (mem x s) -> is_a_ket_l (f x) (size c)) ->
  (forall (x:a), (mem x s) -> ((pat_sem c (f x)) = (g x))) ->
  ((pat_sem c (ket_sum_l s f n)) = (ket_sum_l s g n)).

Axiom pat_sem_sum_ :
  forall {a:Type} {a_WT:WhyType a},
  forall (c:gate) (s:set a) (f:a -> matrix t) (n:Z),
  (1%Z <= (cardinal s))%Z -> (n = (size c)) ->
  (forall (x:a), (mem x s) -> is_a_ket_l (f x) (size c)) ->
  ((pat_sem c (ket_sum_l s f n)) =
   (ket_sum_l s (fun (x:a) => (pat_sem c (f x))) n)).

Axiom set_correct_path_sum :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (0%Z <= r)%Z ->
  (forall (x:bitvec), ((length x) = (size c)) ->
   correct_path_sum_unit c a k r x) ->
  correct_path_sum c a k r.

Axiom get_correct_path_sum :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> (0%Z <= r)%Z.

Axiom get_correct_path_sum1 :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> forall (x:bitvec), ((length x) = (size c)) ->
  correct_path_sum_unit c a k r x.

Axiom get_correct_path_sum2 :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size c)) -> ((length y) = r) ->
  ((length ((k x) y)) = (size c)).

Axiom get_correct_path_sum3 :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> forall (x:bitvec), ((length x) = (size c)) ->
  ((mat_mult (mat_sem c) (bv_to_ket x)) =
   (path_sum_scheme_unit a k (size c) r x)).

Axiom get_correct_path_sum4 :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> forall (x:bitvec), ((length x) = (size c)) ->
  ((mat_mult (mat_sem c) (bv_to_ket x)) =
   (infix_asdtdt (pow_inv_sqrt_2 r)
    (ket_sum_l (n_bvs r)
     (fun (y:bitvec) =>
      (infix_asdtdt (ang_exp ((a x) y)) (bv_to_ket ((k x) y))))
     (size c)))).

Axiom set_sem_by_main_basis :
  forall (c:gate) (f:bitvec -> matrix t) (r:Z) (s:Z) (x:matrix t),
  (is_a_ket_l x s) -> (is_a_ket_basis_elt x) ->
  (forall (y:bitvec), ((length y) = r) ->
   ((f y) =
    (infix_asdtdt (ang_exp (ang_ind c (ket_to_bv x) y))
     (bv_to_ket (basis_ket c (ket_to_bv x) y))))) ->
  (r = (range c)) -> (s = (size c)) ->
  sem c x (infix_asdtdt (pow_inv_sqrt_2 r) (ket_sum_l (n_bvs r) f s)).

Axiom set_correct_path_sum_sim :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (a':bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (k':bitvec -> bitvec -> bitvec) (range1:Z) (range':Z),
  (0%Z <= range1)%Z -> (range1 = range') ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = range1) -> (((a x) y) = ((a' x) y))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = range1) -> ((length ((k' x) y)) = (size c))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = (size c)) ->
   ((length y) = range1) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   (((value ((k x) y)) i) = ((value ((k' x) y)) i))) ->
  (correct_path_sum c a k range1) -> correct_path_sum c a' k' range'.

Axiom path_sum_equiv :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (a':bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (k':bitvec -> bitvec -> bitvec) (range1:Z) (range':Z),
  (0%Z <= range1)%Z -> (range1 = range') ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = range1) -> (((a x) y) = ((a' x) y))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = range1) -> (((k x) y) = ((k' x) y))) ->
  (correct_path_sum c a k range1) -> correct_path_sum c a' k' range'.

Axiom path_sum_equiv1 :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (a':bitvec -> bitvec -> angle) (k:bitvec -> bitvec -> bitvec)
    (k':bitvec -> bitvec -> bitvec) (range1:Z) (range':Z),
  (0%Z <= range1)%Z -> (range1 = range') ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = range1) -> (((a x) y) = ((a' x) y))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = range1) -> (((k x) y) = ((k' x) y))) ->
  (correct_path_sum c a' k' range') -> correct_path_sum c a k range1.

Axiom correct_seq :
  forall (c:gate) (c':gate),
  forall (a:bitvec -> bitvec -> angle) (a':bitvec -> bitvec -> angle),
  forall (k:bitvec -> bitvec -> bitvec) (k':bitvec -> bitvec -> bitvec),
  forall (range1:Z) (range':Z), (correct_path_sum c a k range1) ->
  (correct_path_sum c' a' k' range') ->
  correct_path_sum (sequence c c')
  (fun (x:bitvec) (y:bitvec) =>
   (ang_add ((a x) (hpart y range1))
    ((a' ((k x) (hpart y range1))) (tpart y range1))))
  (fun (x:bitvec) (y:bitvec) =>
   ((k' ((k x) (hpart y range1))) (tpart y range1)))
  (range1 + range')%Z.

Axiom set_correct_seq :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> angle)
    (a:bitvec -> bitvec -> angle) (a':bitvec -> bitvec -> angle)
    (bse:bitvec -> bitvec -> bitvec) (b:bitvec -> bitvec -> bitvec)
    (b':bitvec -> bitvec -> bitvec) (s:Z) (rse:Z) (r:Z) (r':Z),
  (0%Z <= r)%Z -> (0%Z <= r')%Z ->
  (((size c) = (size c')) /\ ((size c') = s)) ->
  (correct_path_sum c a b r) -> (correct_path_sum c' a' b' r') ->
  (forall (x:bitvec) (y:bitvec), ((length x) = s) -> ((length y) = rse) ->
   (((ase x) y) =
    (ang_add ((a x) (hpart y r)) ((a' ((b x) (hpart y r))) (tpart y r))))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = s) -> ((length y) = rse) ->
   (((bse x) y) = ((b' ((b x) (hpart y r))) (tpart y r)))) ->
  (rse = (r + r')%Z) -> correct_path_sum (sequence c c') ase bse rse.

Axiom correct_par :
  forall (c:gate) (c':gate),
  forall (a:bitvec -> bitvec -> angle) (a':bitvec -> bitvec -> angle),
  forall (k:bitvec -> bitvec -> bitvec) (k':bitvec -> bitvec -> bitvec),
  forall (range1:Z) (range':Z), (correct_path_sum c a k range1) ->
  (correct_path_sum c' a' k' range') ->
  correct_path_sum (parallel c c')
  (fun (x:bitvec) (y:bitvec) =>
   (ang_add ((a (hpart x (size c))) (hpart y range1))
    ((a' (tpart x (size c))) (tpart y range1))))
  (fun (x:bitvec) (y:bitvec) =>
   (concat ((k (hpart x (size c))) (hpart y range1))
    ((k' (tpart x (size c))) (tpart y range1))))
  (range1 + range')%Z.

Axiom set_correct_par :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> angle)
    (a:bitvec -> bitvec -> angle) (a':bitvec -> bitvec -> angle)
    (bse:bitvec -> bitvec -> bitvec) (b:bitvec -> bitvec -> bitvec)
    (b':bitvec -> bitvec -> bitvec) (s:Z) (rse:Z) (r:Z) (r':Z),
  (0%Z <= r)%Z -> (0%Z <= r')%Z -> (correct_path_sum c a b r) ->
  (correct_path_sum c' a' b' r') ->
  (forall (x:bitvec) (y:bitvec), ((length x) = s) -> ((length y) = rse) ->
   (((ase x) y) =
    (ang_add ((a (hpart x (size c))) (hpart y r))
     ((a' (tpart x (size c))) (tpart y r))))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = s) -> ((length y) = rse) ->
   (((bse x) y) =
    (concat ((b (hpart x (size c))) (hpart y r))
     ((b' (tpart x (size c))) (tpart y r))))) ->
  (rse = (r + r')%Z) -> (s = ((size c) + (size c'))%Z) ->
  correct_path_sum (parallel c c') ase bse rse.

Axiom correct_to_pat_sem :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> forall (x:matrix t),
  (is_a_ket_l x (size c)) ->
  ((path_sum_scheme a k (size c) r x) = (pat_sem c x)).

Axiom correct_to_mat_sem :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> forall (x:matrix t),
  (is_a_ket_l x (size c)) ->
  ((path_sum_scheme a k (size c) r x) = (mat_mult (mat_sem c) x)).

Axiom correct_to_sem :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (correct_path_sum c a k r) -> forall (x:matrix t) (y:matrix t),
  (is_a_ket_l x (size c)) -> ((path_sum_scheme a k (size c) r x) = y) ->
  sem c x y.

Axiom mat_sem_to_correct :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (0%Z <= r)%Z ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = r) -> ((length ((k x) y)) = (size c))) ->
  (forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
   ((path_sum_scheme a k (size c) r x) = (mat_mult (mat_sem c) x))) ->
  correct_path_sum c a k r.

Axiom pat_sem_to_correct :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (0%Z <= r)%Z ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = r) -> ((length ((k x) y)) = (size c))) ->
  (forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
   ((path_sum_scheme a k (size c) r x) = (pat_sem c x))) ->
  correct_path_sum c a k r.

Axiom sem_to_correct :
  forall (c:gate) (a:bitvec -> bitvec -> angle)
    (k:bitvec -> bitvec -> bitvec) (r:Z),
  (0%Z <= r)%Z ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = r) -> ((length ((k x) y)) = (size c))) ->
  (forall (x:matrix t) (y:matrix t), (is_a_ket_l x (size c)) ->
   (is_a_ket_basis_elt x) -> ((path_sum_scheme a k (size c) r x) = y) ->
   sem c x y) ->
  correct_path_sum c a k r.

Parameter correct_path_sum_i:
  gate -> (bitvec -> bitvec -> Z -> angle) -> Z -> Z ->
  (bitvec -> bitvec -> Z -> Z) -> Z -> Prop.

Axiom correct_path_sum_i_spec :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
  ((length y) = range1) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
  (0%Z <= (((k x) y) i))%Z.

Axiom correct_path_sum_i_spec1 :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
  ((length y) = range1) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
  ((((k x) y) i) < 2%Z)%Z.

Axiom correct_path_sum_i_spec2 :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  correct_path_sum c
  (fun (x:bitvec) (y:bitvec) => (ang_sum (fun (i:Z) => (((a x) y) i)) l h))
  (fun (x:bitvec) (y:bitvec) =>
   (make_bv (fun (i:Z) => (((k x) y) i)) (size c)))
  range1.

Axiom correct_path_sum_i_spec3 :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  ((forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
    ((length y) = range1) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
    (0%Z <= (((k x) y) i))%Z /\ ((((k x) y) i) < 2%Z)%Z) /\
   (correct_path_sum c
    (fun (x:bitvec) (y:bitvec) => (ang_sum (fun (i:Z) => (((a x) y) i)) l h))
    (fun (x:bitvec) (y:bitvec) =>
     (make_bv (fun (i:Z) => (((k x) y) i)) (size c)))
    range1)) ->
  correct_path_sum_i c a l h k range1.

Axiom set_correct_path_sum_i :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = range1) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   (0%Z <= (((k x) y) i))%Z /\ ((((k x) y) i) < 2%Z)%Z) ->
  (correct_path_sum c
   (fun (x:bitvec) (y:bitvec) => (ang_sum (fun (i:Z) => (((a x) y) i)) l h))
   (fun (x:bitvec) (y:bitvec) =>
    (make_bv (fun (i:Z) => (((k x) y) i)) (size c)))
   range1) ->
  correct_path_sum_i c a l h k range1.

Axiom correct_path_sum_i_main :
  forall (c:gate) (h':Z) (r':Z), (h' = (ang_ind_bound c)) ->
  (r' = (range c)) ->
  correct_path_sum_i c
  ((fun (y0:gate) (y1:bitvec) (y2:bitvec) (y3:Z) => (ang_ind_i y0 y1 y2 y3))
   c)
  0%Z h'
  ((fun (y0:gate) (y1:bitvec) (y2:bitvec) (y3:Z) =>
    (basis_ket_i y0 y1 y2 y3))
   c)
  r'.

Axiom correct_path_sum_i_to_sem_basis :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z) (x:matrix t)
    (f:bitvec -> matrix t),
  (correct_path_sum_i c a l h k range1) -> (is_a_ket_l x (size c)) ->
  (is_a_ket_basis_elt x) ->
  (forall (y:bitvec), ((length y) = range1) ->
   ((f y) =
    (infix_asdtdt (ang_exp (ang_sum ((a (ket_to_bv x)) y) l h))
     (bv_to_ket (make_bv ((k (ket_to_bv x)) y) (size c)))))) ->
  sem c x
  (infix_asdtdt (pow_inv_sqrt_2 range1)
   (ket_sum_l (n_bvs range1) f (size c))).

Axiom correct_path_sum_i_to_sem_basis_gen :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z)
    (f:bitvec -> bitvec -> matrix t),
  (correct_path_sum_i c a l h k range1) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = range1) ->
   (((f x) y) =
    (infix_asdtdt (ang_exp (ang_sum ((a x) y) l h))
     (bv_to_ket (make_bv ((k x) y) (size c)))))) ->
  forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
  sem c x
  (infix_asdtdt (pow_inv_sqrt_2 range1)
   (ket_sum_l (n_bvs range1) (f (ket_to_bv x)) (size c))).

Axiom get_correct_path_sum_i :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) -> (0%Z <= range1)%Z.

Axiom get_correct_path_sum_i1 :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
  ((length y) = range1) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
  (0%Z <= (((k x) y) i))%Z.

Axiom get_correct_path_sum_i2 :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
  ((length y) = range1) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
  ((((k x) y) i) < 2%Z)%Z.

Axiom get_correct_path_sum_i3 :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  correct_path_sum c
  (fun (x:bitvec) (y:bitvec) => (ang_sum (fun (i:Z) => (((a x) y) i)) l h))
  (fun (x:bitvec) (y:bitvec) =>
   (make_bv (fun (i:Z) => (((k x) y) i)) (size c)))
  range1.

Axiom get_correct_path_sum_i4 :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  correct_path_sum c
  (fun (x:bitvec) (y:bitvec) => (ang_sum (fun (i:Z) => (((a x) y) i)) l h))
  (fun (x:bitvec) (y:bitvec) =>
   (makes_bv (fun (i:Z) => (((k x) y) i)) (size c)))
  range1.

Parameter sequence_spec_i:
  gate -> gate -> (bitvec -> bitvec -> Z -> angle) ->
  (bitvec -> bitvec -> Z -> angle) -> (bitvec -> bitvec -> Z -> angle) ->
  Z -> Z -> Z -> (bitvec -> bitvec -> Z -> Z) ->
  (bitvec -> bitvec -> Z -> Z) -> (bitvec -> bitvec -> Z -> Z) -> Z -> 
  Z -> Z -> gate.

Axiom sequence_spec_i_def :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> Z -> angle)
    (l:Z) (z:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l z b r) ->
  (correct_path_sum_i c' a' z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    (((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) =
    (((a' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> ((l <= z)%Z /\ (z <= h)%Z) ->
  ((sequence_spec_i c c' ase a a' l z h bse b b' rse r r') = (sequence c c')).

Axiom sequence_spec_i_spec :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> Z -> angle)
    (l:Z) (z:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l z b r) ->
  (correct_path_sum_i c' a' z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    (((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) =
    (((a' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> ((l <= z)%Z /\ (z <= h)%Z) ->
  correct_path_sum_i (sequence_spec_i c c' ase a a' l z h bse b b' rse r r')
  ase l h bse rse.

Axiom sequence_spec_i_spec1 :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> Z -> angle)
    (l:Z) (z:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l z b r) ->
  (correct_path_sum_i c' a' z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    (((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) =
    (((a' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> ((l <= z)%Z /\ (z <= h)%Z) ->
  ((size (sequence_spec_i c c' ase a a' l z h bse b b' rse r r')) = (size c)).

Axiom sequence_spec_i_spec2 :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> Z -> angle)
    (l:Z) (z:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l z b r) ->
  (correct_path_sum_i c' a' z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    (((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) =
    (((a' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> ((l <= z)%Z /\ (z <= h)%Z) ->
  ((sequence_spec_i c c' ase a a' l z h bse b b' rse r r') = (sequence c c')).

Parameter sequence_spec_i_r:
  gate -> gate -> (bitvec -> bitvec -> Z -> angle) ->
  (bitvec -> bitvec -> Z -> angle) -> (bitvec -> bitvec -> angle) -> 
  Z -> Z -> (bitvec -> bitvec -> Z -> Z) -> (bitvec -> bitvec -> Z -> Z) ->
  (bitvec -> bitvec -> bitvec) -> Z -> Z -> Z -> gate.

Axiom sequence_spec_i_r_def :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a':bitvec -> bitvec -> Z -> angle) (a:bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b':bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum c a b r) ->
  (correct_path_sum_i c' a' (l + 1%Z)%Z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) = (((b' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) -> ((((ase x) y) l) = ((a x) (hpart y r)))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> (((l + 1%Z)%Z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  ((sequence_spec_i_r c c' ase a' a l h bse b' b rse r r') =
   (sequence_spec_i c c' ase (fun (x:bitvec) (y:bitvec) (i:Z) => ((a x) y))
    a' l (l + 1%Z)%Z h bse
    (fun (x:bitvec) (y:bitvec) (i:Z) => ((value ((b x) y)) i)) b' rse r r')).

Axiom sequence_spec_i_r_spec :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a':bitvec -> bitvec -> Z -> angle) (a:bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b':bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum c a b r) ->
  (correct_path_sum_i c' a' (l + 1%Z)%Z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) = (((b' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) -> ((((ase x) y) l) = ((a x) (hpart y r)))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> (((l + 1%Z)%Z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  correct_path_sum_i (sequence_spec_i_r c c' ase a' a l h bse b' b rse r r')
  ase l h bse rse.

Axiom sequence_spec_i_r_spec1 :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a':bitvec -> bitvec -> Z -> angle) (a:bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b':bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum c a b r) ->
  (correct_path_sum_i c' a' (l + 1%Z)%Z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) = (((b' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) -> ((((ase x) y) l) = ((a x) (hpart y r)))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> (((l + 1%Z)%Z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  ((size (sequence_spec_i_r c c' ase a' a l h bse b' b rse r r')) = (size c)).

Axiom sequence_spec_i_r_spec2 :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a':bitvec -> bitvec -> Z -> angle) (a:bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b':bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum c a b r) ->
  (correct_path_sum_i c' a' (l + 1%Z)%Z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) = (((b' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) -> ((((ase x) y) l) = ((a x) (hpart y r)))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> (((l + 1%Z)%Z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a' ((b x) (hpart y r))) (tpart y r)) i))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  ((sequence_spec_i_r c c' ase a' a l h bse b' b rse r r') = (sequence c c')).

Parameter sequence_spec_i_l:
  gate -> gate -> (bitvec -> bitvec -> Z -> angle) ->
  (bitvec -> bitvec -> Z -> angle) -> (bitvec -> bitvec -> angle) -> 
  Z -> Z -> (bitvec -> bitvec -> Z -> Z) -> (bitvec -> bitvec -> Z -> Z) ->
  (bitvec -> bitvec -> bitvec) -> Z -> Z -> Z -> gate.

Axiom sequence_spec_i_l_def :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l (h - 1%Z)%Z b r) ->
  (correct_path_sum c' a' b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    ((value ((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r))) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < (h - 1%Z)%Z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) ->
   ((((ase x) y) (h - 1%Z)%Z) =
    ((a' (make_bv (fun (i:Z) => (((b x) (hpart y r)) i)) (size c)))
     (tpart y r)))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  ((sequence_spec_i_l c c' ase a a' l h bse b b' rse r r') =
   (sequence_spec_i c c' ase a
    (fun (x:bitvec) (y:bitvec) (i:Z) => ((a' x) y)) l (h - 1%Z)%Z h bse b
    (fun (x:bitvec) (y:bitvec) (i:Z) => ((value ((b' x) y)) i)) rse r r')).

Axiom sequence_spec_i_l_spec :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l (h - 1%Z)%Z b r) ->
  (correct_path_sum c' a' b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    ((value ((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r))) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < (h - 1%Z)%Z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) ->
   ((((ase x) y) (h - 1%Z)%Z) =
    ((a' (make_bv (fun (i:Z) => (((b x) (hpart y r)) i)) (size c)))
     (tpart y r)))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  correct_path_sum_i (sequence_spec_i_l c c' ase a a' l h bse b b' rse r r')
  ase l h bse rse.

Axiom sequence_spec_i_l_spec1 :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l (h - 1%Z)%Z b r) ->
  (correct_path_sum c' a' b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    ((value ((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r))) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < (h - 1%Z)%Z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) ->
   ((((ase x) y) (h - 1%Z)%Z) =
    ((a' (make_bv (fun (i:Z) => (((b x) (hpart y r)) i)) (size c)))
     (tpart y r)))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  ((size (sequence_spec_i_l c c' ase a a' l h bse b b' rse r r')) = (size c)).

Axiom sequence_spec_i_l_spec2 :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> angle) 
    (l:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> bitvec) (rse:Z)
    (r:Z) (r':Z),
  ((size c) = (size c')) -> (correct_path_sum_i c a l (h - 1%Z)%Z b r) ->
  (correct_path_sum c' a' b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) =
    ((value ((b' (make_bv ((b x) (hpart y r)) (size c))) (tpart y r))) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < (h - 1%Z)%Z)%Z) ->
   ((((ase x) y) i) = (((a x) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = rse) ->
   ((((ase x) y) (h - 1%Z)%Z) =
    ((a' (make_bv (fun (i:Z) => (((b x) (hpart y r)) i)) (size c)))
     (tpart y r)))) ->
  (rse = (r + r')%Z) -> (l < h)%Z ->
  ((sequence_spec_i_l c c' ase a a' l h bse b b' rse r r') = (sequence c c')).

Parameter parallel_spec_i:
  gate -> gate -> (bitvec -> bitvec -> Z -> angle) ->
  (bitvec -> bitvec -> Z -> angle) -> (bitvec -> bitvec -> Z -> angle) ->
  Z -> Z -> Z -> (bitvec -> bitvec -> Z -> Z) ->
  (bitvec -> bitvec -> Z -> Z) -> (bitvec -> bitvec -> Z -> Z) -> Z -> 
  Z -> Z -> gate.

Axiom parallel_spec_i_def :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> Z -> angle)
    (l:Z) (z:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z) (r':Z),
  (correct_path_sum_i c a l z b r) -> (correct_path_sum_i c' a' z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((l <= i)%Z /\ (i < z)%Z) ->
   ((((ase x) y) i) = (((a (hpart x (size c))) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a' (tpart x (size c))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) = (((b (hpart x (size c))) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   (((size c) <= i)%Z /\ (i < ((size c) + (size c'))%Z)%Z) ->
   ((((bse x) y) i) =
    (((b' (tpart x (size c))) (tpart y r)) (i - (size c))%Z))) ->
  (rse = (r + r')%Z) -> ((l <= z)%Z /\ (z <= h)%Z) ->
  ((parallel_spec_i c c' ase a a' l z h bse b b' rse r r') = (parallel c c')).

Axiom parallel_spec_i_spec :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> Z -> angle)
    (l:Z) (z:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z) (r':Z),
  (correct_path_sum_i c a l z b r) -> (correct_path_sum_i c' a' z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((l <= i)%Z /\ (i < z)%Z) ->
   ((((ase x) y) i) = (((a (hpart x (size c))) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a' (tpart x (size c))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) = (((b (hpart x (size c))) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   (((size c) <= i)%Z /\ (i < ((size c) + (size c'))%Z)%Z) ->
   ((((bse x) y) i) =
    (((b' (tpart x (size c))) (tpart y r)) (i - (size c))%Z))) ->
  (rse = (r + r')%Z) -> ((l <= z)%Z /\ (z <= h)%Z) ->
  correct_path_sum_i (parallel c c') ase l h bse rse.

Axiom parallel_spec_i_spec1 :
  forall (c:gate) (c':gate) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (a':bitvec -> bitvec -> Z -> angle)
    (l:Z) (z:Z) (h:Z) (bse:bitvec -> bitvec -> Z -> Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z) (r':Z),
  (correct_path_sum_i c a l z b r) -> (correct_path_sum_i c' a' z h b' r') ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((l <= i)%Z /\ (i < z)%Z) ->
   ((((ase x) y) i) = (((a (hpart x (size c))) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((z <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a' (tpart x (size c))) (tpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((bse x) y) i) = (((b (hpart x (size c))) (hpart y r)) i))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z),
   ((length x) = ((size c) + (size c'))%Z) -> ((length y) = rse) ->
   (((size c) <= i)%Z /\ (i < ((size c) + (size c'))%Z)%Z) ->
   ((((bse x) y) i) =
    (((b' (tpart x (size c))) (tpart y r)) (i - (size c))%Z))) ->
  (rse = (r + r')%Z) -> ((l <= z)%Z /\ (z <= h)%Z) ->
  ((size (parallel_spec_i c c' ase a a' l z h bse b b' rse r r')) =
   ((size c) + (size c'))%Z).

Axiom replace_ang_ind_i :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle)
    (a':bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z) (l':Z) (h':Z)
    (b:bitvec -> bitvec -> Z -> Z) (r:Z),
  (correct_path_sum_i c a l h b r) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = r) ->
   ((ang_sum ((a x) y) l h) = (ang_sum ((a' x) y) l' h'))) ->
  correct_path_sum_i c a' l' h' b r.

Axiom replace_ang_ind_i_eq :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle)
    (a':bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (b:bitvec -> bitvec -> Z -> Z) (r:Z),
  (correct_path_sum_i c a l h b r) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = (size c)) ->
   ((length y) = r) -> ((l <= i)%Z /\ (i < h)%Z) ->
   ((((a x) y) i) = (((a' x) y) i))) ->
  correct_path_sum_i c a' l h b r.

Axiom replace_ket_i :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (r:Z),
  (correct_path_sum_i c a l h b r) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = r) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((b x) y) i) = (((b' x) y) i))) ->
  correct_path_sum_i c a l h b' r.

Axiom set_sum_i_sim :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle)
    (a':bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z) (l':Z) (h':Z)
    (b:bitvec -> bitvec -> Z -> Z) (b':bitvec -> bitvec -> Z -> Z) (r:Z)
    (r':Z),
  (correct_path_sum_i c a l h b r) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   ((length y) = r) ->
   ((ang_sum ((a x) y) l h) = (ang_sum ((a' x) y) l' h'))) ->
  (forall (x:bitvec) (y:bitvec) (i:Z), ((length x) = (size c)) ->
   ((length y) = r) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((b x) y) i) = (((b' x) y) i))) ->
  (r = r') -> correct_path_sum_i c a' l' h' b' r'.

Axiom set_correct_path_sum_i_cardone :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z) (l':Z)
    (h':Z) (b:bitvec -> bitvec -> Z -> Z) (r:Z),
  (correct_path_sum_i c a l h b r) -> ((l' + 1%Z)%Z = h') ->
  correct_path_sum_i c
  (fun (x:bitvec) (y:bitvec) (us:Z) =>
   (ang_sum (fun (j:Z) => (((a x) y) j)) l h))
  l' h' b r.

Axiom set_sem_by_sim_i :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (bound:Z)
    (k:bitvec -> bitvec -> Z -> Z) (x:matrix t) (f:bitvec -> matrix t),
  (is_a_ket_basis_elt x) -> (is_a_ket_l x (size c)) ->
  (bound = (ang_ind_bound c)) ->
  (forall (x1:bitvec) (y:bitvec), forall (i:Z), ((length x1) = (size c)) ->
   ((length y) = (range c)) -> ((0%Z <= i)%Z /\ (i < bound)%Z) ->
   ((ang_ind_i c x1 y i) = (((a x1) y) i))) ->
  (forall (x1:bitvec) (y:bitvec) (i:Z), ((length x1) = (size c)) ->
   ((length y) = (range c)) -> ((0%Z <= i)%Z /\ (i < (size c))%Z) ->
   ((((k x1) y) i) = (basis_ket_i c x1 y i))) ->
  (forall (y:bitvec), ((length y) = (range c)) ->
   ((f y) =
    (infix_asdtdt (ang_exp (ang_sum ((a (ket_to_bv x)) y) 0%Z bound))
     (bv_to_ket (make_bv ((k (ket_to_bv x)) y) (size c)))))) ->
  sem c x
  (infix_asdtdt (pow_inv_sqrt_2 (range c))
   (ket_sum_l (n_bvs (range c)) f (size c))).

Axiom set_correct_path_sum_by_i :
  forall (c:gate) (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (k:bitvec -> bitvec -> Z -> Z) (range1:Z),
  (correct_path_sum_i c a l h k range1) ->
  correct_path_sum c
  (fun (x:bitvec) (y:bitvec) => (ang_sum (fun (i:Z) => (((a x) y) i)) l h))
  (fun (x:bitvec) (y:bitvec) =>
   (make_bv (fun (i:Z) => (((k x) y) i)) (size c)))
  range1.

Parameter place: gate -> Z -> Z -> gate.

Axiom place_spec :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  ((range (place c k n)) = (range c)).

Axiom place_spec1 :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  ((size (place c k n)) = n).

Axiom place_spec2 :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
  ((length y) = (range c)) -> ((0%Z <= i)%Z /\ (i < n)%Z) ->
  (((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   ((basis_ket_i (place c k n) x y i) =
    (basis_ket_i c (htpart x k (size c)) y (i - k)%Z))) /\
  (~ ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   ((basis_ket_i (place c k n) x y i) = ((value x) i))).

Parameter fc11: gate -> Z -> bitvec -> bitvec -> Z -> Z.

Axiom fc_def11 :
  forall (c:gate) (k:Z) (x:bitvec) (y:bitvec) (i:Z),
  (((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   (((fc11 c k x y) i) = (basis_ket_i c (htpart x k (size c)) y (i - k)%Z))) /\
  (~ ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   (((fc11 c k x y) i) = ((value x) i))).

Axiom place_spec3 :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = (range c)) ->
  ((basis_ket (place c k n) x y) = (make_bv (fc11 c k x y) n)).

Axiom place_spec4 :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = (ang_ind_bound c)) ->
  ((ang_ind (place c k n) x y) = (ang_ind c (htpart x k (size c)) y)).

Parameter place_i:
  gate -> Z -> Z -> (bitvec -> bitvec -> Z -> angle) -> Z -> Z ->
  (bitvec -> bitvec -> Z -> Z) -> Z -> gate.

Axiom place_i_spec :
  forall (c:gate) (k:Z) (n:Z) (a:bitvec -> bitvec -> Z -> angle) (l:Z) 
    (h:Z) (b:bitvec -> bitvec -> Z -> Z) (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (l < h)%Z ->
  (correct_path_sum_i c a l h b r) -> ((size (place_i c k n a l h b r)) = n).

Parameter fc12:
  gate -> Z -> (bitvec -> bitvec -> Z -> Z) -> bitvec -> bitvec -> Z -> Z.

Axiom fc_def12 :
  forall (c:gate) (k:Z) (b:bitvec -> bitvec -> Z -> Z) (x:bitvec) (y:bitvec)
    (i:Z),
  (((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   (((((fc12 c k b) x) y) i) = (((b (htpart x k (size c))) y) (i - k)%Z))) /\
  (~ ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   (((((fc12 c k b) x) y) i) = ((value x) i))).

Axiom place_i_spec1 :
  forall (c:gate) (k:Z) (n:Z) (a:bitvec -> bitvec -> Z -> angle) (l:Z) 
    (h:Z) (b:bitvec -> bitvec -> Z -> Z) (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (l < h)%Z ->
  (correct_path_sum_i c a l h b r) ->
  correct_path_sum_i (place_i c k n a l h b r)
  (fun (x:bitvec) (y:bitvec) (i:Z) => (((a (htpart x k (size c))) y) i)) l h
  (fc12 c k b) r.

Axiom place_i_spec2 :
  forall (c:gate) (k:Z) (n:Z) (a:bitvec -> bitvec -> Z -> angle) (l:Z) 
    (h:Z) (b:bitvec -> bitvec -> Z -> Z) (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (l < h)%Z ->
  (correct_path_sum_i c a l h b r) ->
  ((place_i c k n a l h b r) = (place c k n)).

Parameter place_spec_i:
  gate -> Z -> Z -> (bitvec -> bitvec -> Z -> angle) ->
  (bitvec -> bitvec -> Z -> angle) -> Z -> Z ->
  (bitvec -> bitvec -> Z -> Z) -> (bitvec -> bitvec -> Z -> Z) -> Z -> 
  Z -> gate.

Axiom place_spec_i_def :
  forall (c:gate) (k:Z) (n:Z) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (bse:bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (l < h)%Z -> (rse = r) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   ((((bse x) y) i) = (((b (htpart x k (size c))) y) (i - k)%Z))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < k)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> (((k + (size c))%Z <= i)%Z /\ (i < n)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a (htpart x k (size c))) y) i))) ->
  (correct_path_sum_i c a l h b r) ->
  ((place_spec_i c k n ase a l h bse b rse r) = (place_i c k n a l h b r)).

Axiom place_spec_i_spec :
  forall (c:gate) (k:Z) (n:Z) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (bse:bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (l < h)%Z -> (rse = r) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   ((((bse x) y) i) = (((b (htpart x k (size c))) y) (i - k)%Z))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < k)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> (((k + (size c))%Z <= i)%Z /\ (i < n)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a (htpart x k (size c))) y) i))) ->
  (correct_path_sum_i c a l h b r) ->
  ((size (place_spec_i c k n ase a l h bse b rse r)) = n).

Axiom place_spec_i_spec1 :
  forall (c:gate) (k:Z) (n:Z) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (bse:bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (l < h)%Z -> (rse = r) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   ((((bse x) y) i) = (((b (htpart x k (size c))) y) (i - k)%Z))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < k)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> (((k + (size c))%Z <= i)%Z /\ (i < n)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a (htpart x k (size c))) y) i))) ->
  (correct_path_sum_i c a l h b r) ->
  ((place_spec_i c k n ase a l h bse b rse r) = (place c k n)).

Axiom place_spec_i_spec2 :
  forall (c:gate) (k:Z) (n:Z) (ase:bitvec -> bitvec -> Z -> angle)
    (a:bitvec -> bitvec -> Z -> angle) (l:Z) (h:Z)
    (bse:bitvec -> bitvec -> Z -> Z) (b:bitvec -> bitvec -> Z -> Z) (rse:Z)
    (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (l < h)%Z -> (rse = r) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   ((((bse x) y) i) = (((b (htpart x k (size c))) y) (i - k)%Z))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((0%Z <= i)%Z /\ (i < k)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> (((k + (size c))%Z <= i)%Z /\ (i < n)%Z) ->
   ((((bse x) y) i) = ((value x) i))) ->
  (forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
   ((length y) = rse) -> ((l <= i)%Z /\ (i < h)%Z) ->
   ((((ase x) y) i) = (((a (htpart x k (size c))) y) i))) ->
  (correct_path_sum_i c a l h b r) ->
  correct_path_sum_i (place_spec_i c k n ase a l h bse b rse r) ase l h bse
  rse.

Parameter fc13:
  gate -> Z -> (bitvec -> bitvec -> bitvec) -> bitvec -> bitvec -> Z -> Z.

Axiom fc_def13 :
  forall (c:gate) (k:Z) (b:bitvec -> bitvec -> bitvec) (x:bitvec) (y:bitvec)
    (i:Z),
  (((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   (((fc13 c k b x y) i) = ((value ((b (htpart x k (size c))) y)) (i - k)%Z))) /\
  (~ ((k <= i)%Z /\ (i < (k + (size c))%Z)%Z) ->
   (((fc13 c k b x y) i) = ((value x) i))).

Axiom place_comp_scheme :
  forall (c:gate) (k:Z) (n:Z) (a:bitvec -> bitvec -> angle)
    (b:bitvec -> bitvec -> bitvec) (r:Z),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (correct_path_sum c a b r) ->
  correct_path_sum (place c k n)
  (fun (x:bitvec) (y:bitvec) => ((a (htpart x k (size c))) y))
  (fun (x:bitvec) (y:bitvec) => (make_bv (fc13 c k b x y) n)) r.

Axiom place_kron :
  forall (c:gate) (k:Z) (n:Z) (x:matrix t) (y:matrix t) (y':matrix t)
    (z:matrix t),
  (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z -> (is_a_ket_l x k) ->
  (is_a_ket_l y (size c)) -> (is_a_ket_l z ((n - (size c))%Z - k)%Z) ->
  (sem c y y') ->
  sem (place c k n) (kronecker x (kronecker y z))
  (kronecker x (kronecker y' z)).

Axiom place_kron_left :
  forall (c:gate) (n:Z) (y:matrix t) (y':matrix t) (z:matrix t),
  ((size c) <= n)%Z -> (is_a_ket_l y (size c)) ->
  (is_a_ket_l z (n - (size c))%Z) -> (sem c y y') ->
  sem (place c 0%Z n) (kronecker y z) (kronecker y' z).

Axiom place_kron_left_basis_gen :
  forall (c:gate) (n:Z), ((size c) <= n)%Z ->
  forall (y:matrix t) (y':matrix t) (z:matrix t), (is_a_ket_l y (size c)) ->
  (is_a_ket_basis_elt y) -> (is_a_ket_l z (n - (size c))%Z) ->
  (sem c y y') -> sem (place c 0%Z n) (kronecker y z) (kronecker y' z).

Axiom place_kron_right :
  forall (c:gate) (k:Z) (n:Z) (x:matrix t) (y:matrix t) (y':matrix t),
  (n = ((size c) + k)%Z) -> (is_a_ket_l x k) -> (is_a_ket_l y (size c)) ->
  (sem c y y') -> sem (place c k n) (kronecker x y) (kronecker x y').

Axiom place_kron_left_gen :
  forall (c:gate) (n:Z), ((size c) <= n)%Z ->
  forall (y:matrix t) (y':matrix t) (z:matrix t),
  (is_a_ket_l z (n - (size c))%Z) -> (sem c y y') ->
  sem (place c 0%Z n) (kronecker y z) (kronecker y' z).

Axiom place_kron_right_gen :
  forall (c:gate) (k:Z) (n:Z), (n = ((size c) + k)%Z) ->
  forall (y:matrix t) (y':matrix t) (x:matrix t), (is_a_ket_l x k) ->
  (sem c y y') -> sem (place c k n) (kronecker x y) (kronecker x y').

Parameter cont: gate -> Z -> Z -> Z -> gate.

Axiom cont_spec :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (bv:bitvec), ((length bv) = n) -> (((value bv) co) = 0%Z) ->
  sem (cont c co ft n) (bv_to_ket bv) (bv_to_ket bv).

Axiom cont_spec1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (bv:bitvec), ((length bv) = n) -> (((value bv) co) = 1%Z) ->
  sem (cont c co ft n) (bv_to_ket bv) (pat_sem (place c ft n) (bv_to_ket bv)).

Axiom cont_spec2 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  ((size (cont c co ft n)) = n).

Axiom cont_spec3 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (bv:bitvec), ((length bv) = n) ->
  (((value bv) co) = 0%Z) ->
  sem (cont c co ft n) (bv_to_ket bv) (bv_to_ket bv).

Axiom cont_spec4 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (bv:bitvec), ((length bv) = n) ->
  (((value bv) co) = 1%Z) ->
  sem (cont c co ft n) (bv_to_ket bv) (pat_sem (place c ft n) (bv_to_ket bv)).

Axiom cont_spec5 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> ((size (cont c co ft n)) = n).

Axiom mat_cont :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (x:matrix t), (is_a_ket_l x n) -> (is_a_ket_basis_elt x) ->
  (((value (ket_to_bv x)) co) = 0%Z) -> sem (cont c co ft n) x x.

Axiom mat_cont1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (x:matrix t), (is_a_ket_l x n) -> (is_a_ket_basis_elt x) ->
  (((value (ket_to_bv x)) co) = 1%Z) ->
  sem (cont c co ft n) x (pat_sem (place c ft n) x).

Axiom mat_cont2 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (x:matrix t), (is_a_ket_l x n) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 0%Z) ->
  sem (cont c co ft n) x x.

Axiom mat_cont3 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (x:matrix t), (is_a_ket_l x n) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 1%Z) ->
  sem (cont c co ft n) x (pat_sem (place c ft n) x).

Axiom pat_cont :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (bv:bitvec), ((length bv) = n) -> (((value bv) co) = 0%Z) ->
  ((pat_sem (cont c co ft n) (bv_to_ket bv)) = (bv_to_ket bv)).

Axiom pat_cont1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (bv:bitvec), ((length bv) = n) -> (((value bv) co) = 1%Z) ->
  ((pat_sem (cont c co ft n) (bv_to_ket bv)) =
   (pat_sem (place c ft n) (bv_to_ket bv))).

Axiom pat_cont2 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (bv:bitvec), ((length bv) = n) ->
  (((value bv) co) = 0%Z) ->
  ((pat_sem (cont c co ft n) (bv_to_ket bv)) = (bv_to_ket bv)).

Axiom pat_cont3 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (bv:bitvec), ((length bv) = n) ->
  (((value bv) co) = 1%Z) ->
  ((pat_sem (cont c co ft n) (bv_to_ket bv)) =
   (pat_sem (place c ft n) (bv_to_ket bv))).

Axiom pat_cont_ketz :
  forall (c:gate) (co:Z) (ft:Z) (n:Z) (x:matrix t),
  ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (is_a_ket_l x n) -> (is_a_ket_basis_elt x) ->
  (((value (ket_to_bv x)) co) = 0%Z) -> ((pat_sem (cont c co ft n) x) = x).

Axiom pat_cont_ketz1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z) (x:matrix t),
  ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (is_a_ket_l x n) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 0%Z) ->
  ((pat_sem (cont c co ft n) x) = x).

Axiom pat_cont_keto :
  forall (c:gate) (co:Z) (ft:Z) (n:Z) (x:matrix t),
  ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (is_a_ket_l x n) -> (is_a_ket_basis_elt x) ->
  (((value (ket_to_bv x)) co) = 1%Z) ->
  ((pat_sem (cont c co ft n) x) = (pat_sem (place c ft n) x)).

Axiom pat_cont_keto1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z) (x:matrix t),
  ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (is_a_ket_l x n) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 1%Z) ->
  ((pat_sem (cont c co ft n) x) = (pat_sem (place c ft n) x)).

Axiom pat_cont_ketz_gen :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (x:matrix t), (is_a_ket_l x n) -> (is_a_ket_basis_elt x) ->
  (((value (ket_to_bv x)) co) = 0%Z) -> ((pat_sem (cont c co ft n) x) = x).

Axiom pat_cont_ketz_gen1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (x:matrix t), (is_a_ket_l x n) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 0%Z) ->
  ((pat_sem (cont c co ft n) x) = x).

Axiom pat_cont_keto_gen :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (x:matrix t), (is_a_ket_l x n) -> (is_a_ket_basis_elt x) ->
  (((value (ket_to_bv x)) co) = 1%Z) ->
  ((pat_sem (cont c co ft n) x) = (pat_sem (place c ft n) x)).

Axiom pat_cont_keto_gen1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (x:matrix t), (is_a_ket_l x n) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 1%Z) ->
  ((pat_sem (cont c co ft n) x) = (pat_sem (place c ft n) x)).

Axiom cont_ketz_gen :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  forall (x:matrix t), (is_a_ket_l x n) -> (is_a_ket_basis_elt x) ->
  (((value (ket_to_bv x)) co) = 0%Z) -> sem (cont c co ft n) x x.

Axiom cont_ketz_gen1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> forall (x:matrix t), (is_a_ket_l x n) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 0%Z) ->
  sem (cont c co ft n) x x.

Axiom cont_keto_gen :
  forall (c:gate) (co:Z) (ft:Z) (n:Z) (f:bitvec -> matrix t),
  ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  (forall (x:bitvec), ((length x) = n) ->
   sem (place c ft n) (bv_to_ket x) (f x)) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((value x) co) = 1%Z) -> sem (cont c co ft n) (bv_to_ket x) (f x).

Axiom cont_keto_gen1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z) (f:bitvec -> matrix t),
  ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  (forall (x:bitvec), ((length x) = n) ->
   sem (place c ft n) (bv_to_ket x) (f x)) ->
  ((ft + (size c))%Z <= co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((value x) co) = 1%Z) -> sem (cont c co ft n) (bv_to_ket x) (f x).

Parameter diag_mat: Z -> (Z -> t) -> matrix t.

Axiom diag_mat_def :
  forall (n:Z) (f:Z -> t), (0%Z < n)%Z ->
  ((diag_mat n f) =
   (make_f n n (fun (i:Z) (j:Z) => (infix_asdt (f i) (indic i j))))).

Axiom diag_mat_spec :
  forall (n:Z) (f:Z -> t), (0%Z < n)%Z -> forall (i:Z) (j:Z),
  (((0%Z <= i)%Z /\ (i < n)%Z) /\ ((0%Z <= j)%Z /\ (j < n)%Z)) ->
  ~ (i = j) -> ((get (diag_mat n f) i j) = tzero).

Axiom diag_mat_spec1 :
  forall (n:Z) (f:Z -> t), (0%Z < n)%Z -> forall (i:Z) (j:Z),
  (((0%Z <= i)%Z /\ (i < n)%Z) /\ ((0%Z <= j)%Z /\ (j < n)%Z)) -> (i = j) ->
  ((get (diag_mat n f) i j) = (f i)).

Axiom diag_mat_values :
  forall (n:Z) (f:Z -> t) (i:Z) (j:Z), ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((0%Z <= j)%Z /\ (j < n)%Z) ->
  ((get (diag_mat n f) i j) = (infix_asdt (f i) (indic i j))).

Axiom diag_mat_eq :
  forall (f:Z -> t) (g:Z -> t) (n:Z), (0%Z < n)%Z ->
  (forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) -> ((f i) = (g i))) ->
  ((diag_mat n f) = (diag_mat n g)).

Axiom mat_mult_diag :
  forall (m:matrix t) (f:Z -> t),
  ((mat_mult m (diag_mat (columns m) f)) =
   (make_f (rows m) (columns m)
    (fun (i:Z) (j:Z) => (infix_asdt (get m i j) (f j))))).

Axiom diag_mult_mat :
  forall (m:matrix t) (f:Z -> t),
  ((mat_mult (diag_mat (rows m) f) m) =
   (make_f (rows m) (columns m)
    (fun (i:Z) (j:Z) => (infix_asdt (get m i j) (f i))))).

Axiom diag_mult_diag :
  forall (f:Z -> t) (g:Z -> t) (n:Z), (0%Z < n)%Z ->
  ((mat_mult (diag_mat n f) (diag_mat n g)) =
   (diag_mat n (fun (i:Z) => (infix_asdt (f i) (g i))))).

Axiom ind_product_re :
  forall (f:Z -> Z -> t) (i:Z) (j:Z) (n:Z), (i < j)%Z -> forall (k:Z),
  ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((ind_product (fun (i1:Z) => ((f i1) k)) i (j + 1%Z)%Z) =
   (infix_asdt (ind_product (fun (i1:Z) => ((f i1) k)) i j) ((f j) k))).

Axiom int_mat_diag_prod :
  forall (f:Z -> Z -> t) (i:Z) (j:Z) (n:Z), (0%Z < n)%Z -> (i <= j)%Z ->
  ((int_mat_prod (fun (k:Z) => (diag_mat n (f k))) i j) =
   (diag_mat n
    (fun (k:Z) => (ind_product (fun (l:Z) => ((f l) k)) i (j + 1%Z)%Z)))).

Parameter diag_two_mat: Z -> (Z -> Z -> Z -> t) -> matrix t.

Parameter result19: Z -> (Z -> Z -> Z -> t) -> Z -> Z -> t.

Axiom result_def19 :
  forall (n:Z) (f:Z -> Z -> Z -> t) (i:Z) (j:Z),
  ((((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) /\
    ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z)) ->
   ((((result19 n f) i) j) =
    (infix_asdt (indic (tail_bits i n) (tail_bits j n))
     (((f (head_bit i n)) (head_bit j n)) (tail_bits i n))))) /\
  (~ (((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) /\
      ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z)) ->
   ((((result19 n f) i) j) = tzero)).

Axiom diag_two_mat_def :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((diag_two_mat n f) = (make_f (power 2%Z n) (power 2%Z n) (result19 n f))).

Axiom diag_two_mat_spec :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((rows (diag_two_mat n f)) = (power 2%Z n)).

Axiom diag_two_mat_spec1 :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((columns (diag_two_mat n f)) = (power 2%Z n)).

Axiom diag_two_mat_spec2 :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((diag_two_mat n f) =
   (make_f (power 2%Z n) (power 2%Z n)
    (fun (i:Z) (j:Z) =>
     (infix_asdt (indic (tail_bits i n) (tail_bits j n))
      (((f (head_bit i n)) (head_bit j n)) (tail_bits i n)))))).

Parameter two_bloc_diag_mat: Z -> (Z -> Z -> Z -> t) -> matrix t.

Parameter result20: Z -> (Z -> Z -> Z -> t) -> Z -> Z -> t.

Axiom result_def20 :
  forall (n:Z) (f:Z -> Z -> Z -> t) (i:Z) (j:Z),
  ((((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) /\
    ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z)) ->
   ((((result20 n f) i) j) =
    (infix_asdt (indic (head_bit i n) (head_bit j n))
     (((f (head_bit i n)) (tail_bits i n)) (tail_bits j n))))) /\
  (~ (((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) /\
      ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z)) ->
   ((((result20 n f) i) j) = tzero)).

Axiom two_bloc_diag_mat_def :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((two_bloc_diag_mat n f) =
   (make_f (power 2%Z n) (power 2%Z n) (result20 n f))).

Axiom two_bloc_diag_mat_spec :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((rows (two_bloc_diag_mat n f)) = (power 2%Z n)).

Axiom two_bloc_diag_mat_spec1 :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((columns (two_bloc_diag_mat n f)) = (power 2%Z n)).

Axiom two_bloc_diag_mat_spec2 :
  forall (n:Z) (f:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((two_bloc_diag_mat n f) =
   (make_f (power 2%Z n) (power 2%Z n)
    (fun (i:Z) (j:Z) =>
     (infix_asdt (indic (head_bit i n) (head_bit j n))
      (((f (head_bit i n)) (tail_bits i n)) (tail_bits j n)))))).

Axiom two_bloc_diag_two_val :
  forall (n:Z) (f:Z -> Z -> Z -> t) (g:Z -> Z -> Z -> t) (i:Z) (j:Z),
  ((0%Z <= i)%Z /\ (i < (power 2%Z n))%Z) ->
  ((0%Z <= j)%Z /\ (j < (power 2%Z n))%Z) -> (2%Z <= n)%Z ->
  ((get (mat_mult (two_bloc_diag_mat n f) (diag_two_mat n g)) i j) =
   (infix_asdt (((f (head_bit i n)) (tail_bits i n)) (tail_bits j n))
    (((g (head_bit i n)) (head_bit j n)) (tail_bits j n)))).

Axiom two_bloc_diag_two :
  forall (n:Z) (f:Z -> Z -> Z -> t) (g:Z -> Z -> Z -> t), (2%Z <= n)%Z ->
  ((mat_mult (two_bloc_diag_mat n f) (diag_two_mat n g)) =
   (make_f (power 2%Z n) (power 2%Z n)
    (fun (i:Z) (j:Z) =>
     (infix_asdt (((f (head_bit i n)) (tail_bits i n)) (tail_bits j n))
      (((g (head_bit i n)) (head_bit j n)) (tail_bits j n)))))).

Axiom two_bloc_mult_diag :
  forall (n:Z) (f:Z -> Z -> Z -> t) (g:Z -> t), (2%Z <= n)%Z ->
  ((mat_mult (two_bloc_diag_mat n f) (diag_mat (power 2%Z n) g)) =
   (two_bloc_diag_mat n
    (fun (hi:Z) (ti:Z) (tj:Z) =>
     (infix_asdt (((f hi) ti) tj) (g (ht_to_int hi tj n)))))).

Axiom kronecker_scalar_distr :
  forall (m:matrix t) (n:matrix t) (a:t),
  ((kronecker (infix_asdtdt a m) n) = (infix_asdtdt a (kronecker m n))).

Axiom kronecker_scalar_distr_r :
  forall (m:matrix t) (n:matrix t) (a:t),
  ((kronecker m (infix_asdtdt a n)) = (infix_asdtdt a (kronecker m n))).

Axiom kronecker_scalars :
  forall (m:matrix t) (n:matrix t) (a:t) (b:t),
  ((kronecker (infix_asdtdt a m) (infix_asdtdt b n)) =
   (infix_asdtdt (infix_asdt a b) (kronecker m n))).

Parameter mat_k_id: (matrix t) -> Z -> matrix t.

Axiom mat_k_id_def :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((mat_k_id m n) = (kronecker m (identity n))).

Axiom mat_k_id_spec :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((mat_k_id m n) =
   (make_f ((rows m) * (power 2%Z n))%Z ((columns m) * (power 2%Z n))%Z
    (fun (i:Z) (j:Z) =>
     (infix_asdt
      (indic (int.EuclideanDivision.mod1 i (power 2%Z n))
       (int.EuclideanDivision.mod1 j (power 2%Z n)))
      (get m (int.EuclideanDivision.div i (power 2%Z n))
       (int.EuclideanDivision.div j (power 2%Z n))))))).

Axiom mat_k_id_values :
  forall (m:matrix t) (n:Z) (i:Z) (j:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < ((rows m) * (power 2%Z n))%Z)%Z) ->
  ((0%Z <= j)%Z /\ (j < ((columns m) * (power 2%Z n))%Z)%Z) ->
  ((get (mat_k_id m n) i j) =
   (infix_asdt
    (indic (int.EuclideanDivision.mod1 i (power 2%Z n))
     (int.EuclideanDivision.mod1 j (power 2%Z n)))
    (get m (int.EuclideanDivision.div i (power 2%Z n))
     (int.EuclideanDivision.div j (power 2%Z n))))).

Axiom mat_k_id_rows :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((rows (mat_k_id m n)) = ((rows m) * (power 2%Z n))%Z).

Axiom mat_k_id_columns :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns (mat_k_id m n)) = ((columns m) * (power 2%Z n))%Z).

Parameter id_k_mat: (matrix t) -> Z -> matrix t.

Axiom id_k_mat_def :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((id_k_mat m n) = (kronecker (identity n) m)).

Axiom id_k_mat_spec :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((id_k_mat m n) =
   (make_f ((rows m) * (power 2%Z n))%Z ((columns m) * (power 2%Z n))%Z
    (fun (i:Z) (j:Z) =>
     (infix_asdt
      (indic (int.EuclideanDivision.div i (rows m))
       (int.EuclideanDivision.div j (columns m)))
      (get m (int.EuclideanDivision.mod1 i (rows m))
       (int.EuclideanDivision.mod1 j (columns m))))))).

Axiom id_k_mat_values :
  forall (m:matrix t) (n:Z) (i:Z) (j:Z), (0%Z <= n)%Z ->
  ((0%Z <= i)%Z /\ (i < ((rows m) * (power 2%Z n))%Z)%Z) ->
  ((0%Z <= j)%Z /\ (j < ((columns m) * (power 2%Z n))%Z)%Z) ->
  ((get (id_k_mat m n) i j) =
   (infix_asdt
    (indic (int.EuclideanDivision.div i (rows m))
     (int.EuclideanDivision.div j (columns m)))
    (get m (int.EuclideanDivision.mod1 i (rows m))
     (int.EuclideanDivision.mod1 j (columns m))))).

Axiom id_k_mat_rows :
  forall (m:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((rows (id_k_mat m n)) = ((rows m) * (power 2%Z n))%Z).

Axiom id_k_mat_columns :
  forall (m:matrix t) (n:Z), (0%Z < n)%Z ->
  ((columns (id_k_mat m n)) = ((columns m) * (power 2%Z n))%Z).

Parameter mat_prod_k_id: (matrix t) -> (matrix t) -> Z -> matrix t.

Axiom mat_prod_k_id_def :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((mat_prod_k_id m o n) = (kronecker (mat_mult m o) (identity n))).

Axiom mat_prod_k_id_spec :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((mat_prod_k_id m o n) =
   (make_f ((rows m) * (power 2%Z n))%Z ((columns o) * (power 2%Z n))%Z
    (fun (i:Z) (j:Z) =>
     (infix_asdt
      (indic (int.EuclideanDivision.mod1 i (power 2%Z n))
       (int.EuclideanDivision.mod1 j (power 2%Z n)))
      (ind_sum
       (fun (k:Z) =>
        (infix_asdt (get m (int.EuclideanDivision.div i (power 2%Z n)) k)
         (get o k (int.EuclideanDivision.div j (power 2%Z n)))))
       0%Z (columns m)))))).

Parameter id_k_mat_prod: (matrix t) -> (matrix t) -> Z -> matrix t.

Axiom id_k_mat_prod_def :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((id_k_mat_prod m o n) = (kronecker (identity n) (mat_mult m o))).

Axiom id_k_mat_prod_spec :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((id_k_mat_prod m o n) =
   (make_f ((rows m) * (power 2%Z n))%Z ((columns o) * (power 2%Z n))%Z
    (fun (i:Z) (j:Z) =>
     (infix_asdt
      (indic (int.EuclideanDivision.div i (rows m))
       (int.EuclideanDivision.div j (columns o)))
      (ind_sum
       (fun (k:Z) =>
        (infix_asdt (get m (int.EuclideanDivision.mod1 i (rows m)) k)
         (get o k (int.EuclideanDivision.mod1 j (columns o)))))
       0%Z (columns m)))))).

Axiom filter_sum_mod_indic :
  forall (v:Z) (n:Z) (p:Z) (g:Z -> t), (0%Z < n)%Z -> (0%Z < v)%Z ->
  ((0%Z <= p)%Z /\ (p < v)%Z) ->
  ((sum (to_fset 0%Z (v * n)%Z)
    (fun (k:Z) =>
     (infix_asdt (indic (int.EuclideanDivision.mod1 k v) p)
      (g (int.EuclideanDivision.div k v)))))
   = (sum (to_fset 0%Z n) g)).

Axiom filter_sum_indic_div :
  forall (v:Z) (n:Z) (p:Z) (g:Z -> t), (0%Z < n)%Z -> (0%Z < v)%Z ->
  ((0%Z <= p)%Z /\ (p < n)%Z) ->
  ((sum (to_fset 0%Z (v * n)%Z)
    (fun (k:Z) =>
     (infix_asdt (g (int.EuclideanDivision.mod1 k v))
      (indic (int.EuclideanDivision.div k v) p))))
   = (sum (to_fset 0%Z v) g)).

Axiom filtered_ind_sum_mod_indic :
  forall (v:Z) (n:Z) (p:Z) (g:Z -> t), (0%Z < n)%Z -> (0%Z < v)%Z ->
  ((0%Z <= p)%Z /\ (p < v)%Z) ->
  ((ind_sum
    (fun (k:Z) =>
     (infix_asdt (indic (int.EuclideanDivision.mod1 k v) p)
      (g (int.EuclideanDivision.div k v))))
    0%Z (v * n)%Z)
   = (ind_sum g 0%Z n)).

Axiom filtered_ind_sum_indic_div :
  forall (v:Z) (n:Z) (p:Z) (g:Z -> t), (0%Z < n)%Z -> (0%Z < v)%Z ->
  ((0%Z <= p)%Z /\ (p < n)%Z) ->
  ((ind_sum
    (fun (k:Z) =>
     (infix_asdt (g (int.EuclideanDivision.mod1 k v))
      (indic (int.EuclideanDivision.div k v) p)))
    0%Z (v * n)%Z)
   = (ind_sum g 0%Z v)).

Axiom prod_mat_k_id_pre :
  forall (m:matrix t) (o:matrix t) (i:Z) (j:Z) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((0%Z <= i)%Z /\ (i < ((rows m) * (power 2%Z n))%Z)%Z) ->
  ((0%Z <= j)%Z /\ (j < ((columns o) * (power 2%Z n))%Z)%Z) ->
  ((get (mat_mult (mat_k_id m n) (mat_k_id o n)) i j) =
   (infix_asdt
    (indic (int.EuclideanDivision.mod1 i (power 2%Z n))
     (int.EuclideanDivision.mod1 j (power 2%Z n)))
    (ind_sum
     (fun (k:Z) =>
      (infix_asdt (get m (int.EuclideanDivision.div i (power 2%Z n)) k)
       (get o k (int.EuclideanDivision.div j (power 2%Z n)))))
     0%Z (columns m)))).

Parameter prod_mat_k_id: (matrix t) -> (matrix t) -> Z -> matrix t.

Axiom prod_mat_k_id_def :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((prod_mat_k_id m o n) = (mat_mult (mat_k_id m n) (mat_k_id o n))).

Axiom prod_mat_k_id_spec :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((prod_mat_k_id m o n) =
   (make_f ((rows m) * (power 2%Z n))%Z ((columns o) * (power 2%Z n))%Z
    (fun (i:Z) (j:Z) =>
     (infix_asdt
      (indic (int.EuclideanDivision.mod1 i (power 2%Z n))
       (int.EuclideanDivision.mod1 j (power 2%Z n)))
      (ind_sum
       (fun (k:Z) =>
        (infix_asdt (get m (int.EuclideanDivision.div i (power 2%Z n)) k)
         (get o k (int.EuclideanDivision.div j (power 2%Z n)))))
       0%Z (columns m)))))).

Axiom prod_mat_k_id_dec :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) -> ((prod_mat_k_id m o n) = (mat_prod_k_id m o n)).

Axiom k_id_prod_mat_pre :
  forall (m:matrix t) (o:matrix t) (i:Z) (j:Z) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((0%Z <= i)%Z /\ (i < ((rows m) * (power 2%Z n))%Z)%Z) ->
  ((0%Z <= j)%Z /\ (j < ((columns o) * (power 2%Z n))%Z)%Z) ->
  ((get (mat_mult (id_k_mat m n) (id_k_mat o n)) i j) =
   (infix_asdt
    (indic (int.EuclideanDivision.div i (rows m))
     (int.EuclideanDivision.div j (columns o)))
    (ind_sum
     (fun (k:Z) =>
      (infix_asdt (get m (int.EuclideanDivision.mod1 i (rows m)) k)
       (get o k (int.EuclideanDivision.mod1 j (columns o)))))
     0%Z (columns m)))).

Parameter k_id_prod_mat: (matrix t) -> (matrix t) -> Z -> matrix t.

Axiom k_id_prod_mat_def :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((k_id_prod_mat m o n) = (mat_mult (id_k_mat m n) (id_k_mat o n))).

Axiom k_id_prod_mat_spec :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) ->
  ((k_id_prod_mat m o n) =
   (make_f ((rows m) * (power 2%Z n))%Z ((columns o) * (power 2%Z n))%Z
    (fun (i:Z) (j:Z) =>
     (infix_asdt
      (indic (int.EuclideanDivision.div i (rows m))
       (int.EuclideanDivision.div j (columns o)))
      (ind_sum
       (fun (k:Z) =>
        (infix_asdt (get m (int.EuclideanDivision.mod1 i (rows m)) k)
         (get o k (int.EuclideanDivision.mod1 j (columns o)))))
       0%Z (columns m)))))).

Axiom k_id_prod_mat_dec :
  forall (m:matrix t) (o:matrix t) (n:Z), (0%Z <= n)%Z ->
  ((columns m) = (rows o)) -> ((k_id_prod_mat m o n) = (id_k_mat_prod m o n)).

Axiom split_ne_pre :
  forall (m1:matrix t) (m2:matrix t) (nc1:Z) (nc2:Z) (nr1:Z) (nr2:Z) 
    (i:Z) (j:Z),
  (0%Z <= nr1)%Z -> (0%Z <= nr2)%Z -> (0%Z <= nc1)%Z -> (0%Z <= nc2)%Z ->
  ((columns m1) = (power 2%Z nc1)) -> ((columns m2) = (power 2%Z nc2)) ->
  ((rows m1) = (power 2%Z nr1)) -> ((rows m2) = (power 2%Z nr2)) ->
  ((0%Z <= i)%Z /\ (i < ((power 2%Z nr1) * (power 2%Z nr2))%Z)%Z) ->
  ((0%Z <= j)%Z /\ (j < ((power 2%Z nc1) * (power 2%Z nc2))%Z)%Z) ->
  ((get (mat_mult (id_k_mat m1 nr2) (mat_k_id m2 nc1)) i j) =
   (get (kronecker m2 m1) i j)).

Axiom split_nw_pre :
  forall (m1:matrix t) (m2:matrix t) (nc1:Z) (nc2:Z) (nr1:Z) (nr2:Z) 
    (i:Z) (j:Z),
  (0%Z <= nr1)%Z -> (0%Z <= nr2)%Z -> (0%Z <= nc1)%Z -> (0%Z <= nc2)%Z ->
  ((columns m1) = (power 2%Z nc1)) -> ((columns m2) = (power 2%Z nc2)) ->
  ((rows m1) = (power 2%Z nr1)) -> ((rows m2) = (power 2%Z nr2)) ->
  ((0%Z <= i)%Z /\ (i < ((power 2%Z nr1) * (power 2%Z nr2))%Z)%Z) ->
  ((0%Z <= j)%Z /\ (j < ((power 2%Z nc1) * (power 2%Z nc2))%Z)%Z) ->
  ((get (mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1)) i j) =
   (get (kronecker m1 m2) i j)).

Axiom split_ne :
  forall (m1:matrix t) (m2:matrix t) (nc1:Z) (nc2:Z) (nr1:Z) (nr2:Z),
  (0%Z <= nr1)%Z -> (0%Z <= nr2)%Z -> (0%Z <= nc1)%Z -> (0%Z <= nc2)%Z ->
  ((columns m1) = (power 2%Z nc1)) -> ((columns m2) = (power 2%Z nc2)) ->
  ((rows m1) = (power 2%Z nr1)) -> ((rows m2) = (power 2%Z nr2)) ->
  ((mat_mult (id_k_mat m1 nr2) (mat_k_id m2 nc1)) = (kronecker m2 m1)).

Axiom split_nw :
  forall (m1:matrix t) (m2:matrix t) (nc1:Z) (nc2:Z) (nr1:Z) (nr2:Z),
  (0%Z <= nr1)%Z -> (0%Z <= nr2)%Z -> (0%Z <= nc1)%Z -> (0%Z <= nc2)%Z ->
  ((columns m1) = (power 2%Z nc1)) -> ((columns m2) = (power 2%Z nc2)) ->
  ((rows m1) = (power 2%Z nr1)) -> ((rows m2) = (power 2%Z nr2)) ->
  ((mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1)) = (kronecker m1 m2)).

Axiom shift_k_id :
  forall (m1:matrix t) (m2:matrix t) (nc1:Z) (nc2:Z) (nr1:Z) (nr2:Z),
  (0%Z <= nr1)%Z -> (0%Z <= nr2)%Z -> (0%Z <= nc1)%Z -> (0%Z <= nc2)%Z ->
  ((columns m1) = (power 2%Z nc1)) -> ((columns m2) = (power 2%Z nc2)) ->
  ((rows m1) = (power 2%Z nr1)) -> ((rows m2) = (power 2%Z nr2)) ->
  ((mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1)) =
   (mat_mult (id_k_mat m2 nr1) (mat_k_id m1 nc2))).

Axiom kronecker_mult_commut :
  forall (a:matrix t) (b:matrix t) (c:matrix t) (d:matrix t) (ra:Z) (ca:Z)
    (cc:Z) (rb:Z) (cb:Z) (cd:Z),
  (0%Z <= ra)%Z -> (0%Z <= ca)%Z -> (0%Z <= cc)%Z -> (0%Z <= rb)%Z ->
  (0%Z <= cb)%Z -> (0%Z <= cd)%Z -> ((rows a) = (power 2%Z ra)) ->
  ((columns a) = (power 2%Z ca)) -> ((rows c) = (power 2%Z ca)) ->
  ((columns c) = (power 2%Z cc)) -> ((rows b) = (power 2%Z rb)) ->
  ((columns b) = (power 2%Z cb)) -> ((rows d) = (power 2%Z cb)) ->
  ((columns d) = (power 2%Z cd)) ->
  ((mat_mult (kronecker a b) (kronecker c d)) =
   (kronecker (mat_mult a c) (mat_mult b d))).

(* Why3 assumption *)
Definition isa_square (m:matrix t) : Prop := ((rows m) = (columns m)).

(* Why3 assumption *)
Definition pow2dim (m:matrix t) : Prop :=
  exists i:Z, exists j:Z,
  ((rows m) = (power 2%Z i)) /\ ((columns m) = (power 2%Z j)).

(* Why3 assumption *)
Definition pow2dim_square (m:matrix t) : Prop :=
  exists i:Z, ((rows m) = (power 2%Z i)) /\ ((columns m) = (power 2%Z i)).

Axiom pow_2dim_kets : forall (m:matrix t), (is_a_ket m) -> pow2dim m.

Parameter lnr: (matrix t) -> Z.

Axiom lnr_spec :
  forall (m:matrix t), (pow2dim m) -> ((rows m) = (power 2%Z (lnr m))).

Axiom lnr_spec1 : forall (m:matrix t), (pow2dim m) -> (0%Z <= (lnr m))%Z.

Parameter lnc: (matrix t) -> Z.

Axiom lnc_spec :
  forall (m:matrix t), (pow2dim m) -> ((columns m) = (power 2%Z (lnc m))).

Axiom lnc_spec1 : forall (m:matrix t), (pow2dim m) -> (0%Z <= (lnc m))%Z.

Axiom get_pow2dim :
  forall (m:matrix t), (pow2dim m) ->
  exists i:Z, exists j:Z,
  ((rows m) = (power 2%Z i)) /\ ((columns m) = (power 2%Z j)).

Axiom set_pow2dim :
  forall (m:matrix t),
  (exists i:Z, exists j:Z,
   ((rows m) = (power 2%Z i)) /\ ((columns m) = (power 2%Z j))) ->
  pow2dim m.

Axiom get_pow2dim_elt :
  forall (m:matrix t) (i:Z) (j:Z), (pow2dim m) -> ((lnr m) = i) ->
  ((lnc m) = j) -> ((rows m) = (power 2%Z i)).

Axiom get_pow2dim_elt1 :
  forall (m:matrix t) (i:Z) (j:Z), (pow2dim m) -> ((lnr m) = i) ->
  ((lnc m) = j) -> ((columns m) = (power 2%Z j)).

Axiom set_pow2dim_elt :
  forall (m:matrix t) (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  ((rows m) = (power 2%Z i)) -> ((columns m) = (power 2%Z j)) -> pow2dim m.

Axiom set_pow2dim_elt1 :
  forall (m:matrix t) (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  ((rows m) = (power 2%Z i)) -> ((columns m) = (power 2%Z j)) ->
  ((lnr m) = i).

Axiom set_pow2dim_elt2 :
  forall (m:matrix t) (i:Z) (j:Z), (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  ((rows m) = (power 2%Z i)) -> ((columns m) = (power 2%Z j)) ->
  ((lnc m) = j).

Parameter mat_size: (matrix t) -> Z.

Axiom mat_size_def :
  forall (m:matrix t), (isa_square m) -> ((mat_size m) = (rows m)).

Axiom mat_size_spec :
  forall (m:matrix t), (isa_square m) -> ((mat_size m) = (rows m)).

Axiom mat_size_spec1 :
  forall (m:matrix t), (isa_square m) -> ((mat_size m) = (columns m)).

Axiom get_square :
  forall (m:matrix t), (isa_square m) -> ((rows m) = (columns m)).

Axiom set_square :
  forall (m:matrix t), ((rows m) = (columns m)) -> isa_square m.

Axiom set_square_elt :
  forall (m:matrix t) (i:Z), ((rows m) = i) -> ((columns m) = i) ->
  isa_square m.

Axiom set_square_elt1 :
  forall (m:matrix t) (i:Z), ((rows m) = i) -> ((columns m) = i) ->
  ((mat_size m) = i).

Axiom get_square_elt :
  forall (m:matrix t) (i:Z), (isa_square m) -> ((mat_size m) = i) ->
  ((rows m) = i).

Axiom get_square_elt1 :
  forall (m:matrix t) (i:Z), (isa_square m) -> ((mat_size m) = i) ->
  ((columns m) = i).

Axiom pow2dim_square_dec :
  forall (m:matrix t), (isa_square m) -> (pow2dim m) -> pow2dim_square m.

Axiom dec_pow2dim_square :
  forall (m:matrix t), (pow2dim_square m) -> isa_square m.

Axiom dec_pow2dim_square1 :
  forall (m:matrix t), (pow2dim_square m) -> pow2dim m.

Parameter ln_size: (matrix t) -> Z.

Axiom ln_size_def :
  forall (m:matrix t), (pow2dim_square m) -> ((ln_size m) = (lnr m)).

Axiom ln_size_spec :
  forall (m:matrix t), (pow2dim_square m) -> ((ln_size m) = (lnc m)).

Axiom ln_size_spec1 :
  forall (m:matrix t), (pow2dim_square m) ->
  ((rows m) = (power 2%Z (ln_size m))).

Axiom ln_size_spec2 :
  forall (m:matrix t), (pow2dim_square m) ->
  ((columns m) = (power 2%Z (ln_size m))).

Axiom set_ln_size_lnc :
  forall (m:matrix t) (i:Z), (pow2dim_square m) -> ((lnc m) = i) ->
  ((ln_size m) = i).

Axiom set_ln_size_lnr :
  forall (m:matrix t) (i:Z), (pow2dim_square m) -> ((lnr m) = i) ->
  ((ln_size m) = i).

Axiom set_ln_size_columns :
  forall (m:matrix t) (i:Z), (0%Z <= i)%Z -> (pow2dim_square m) ->
  ((columns m) = (power 2%Z i)) -> ((ln_size m) = i).

Axiom set_ln_size_rows :
  forall (m:matrix t) (i:Z), (0%Z <= i)%Z -> (pow2dim_square m) ->
  ((rows m) = (power 2%Z i)) -> ((ln_size m) = i).

Axiom set_pow2dim_square :
  forall (m:matrix t),
  (exists i:Z, ((rows m) = (columns m)) /\ ((columns m) = (power 2%Z i))) ->
  pow2dim_square m.

Axiom set_pow2dim_square_elt :
  forall (m:matrix t) (i:Z), (0%Z <= i)%Z ->
  (((rows m) = (columns m)) /\ ((columns m) = (power 2%Z i))) ->
  pow2dim_square m.

Axiom set_pow2dim_square_elt1 :
  forall (m:matrix t) (i:Z), (0%Z <= i)%Z ->
  (((rows m) = (columns m)) /\ ((columns m) = (power 2%Z i))) ->
  ((ln_size m) = i).

Axiom get_pow2dim_square_elt :
  forall (m:matrix t) (i:Z), (pow2dim_square m) -> ((ln_size m) = i) ->
  ((rows m) = (power 2%Z i)).

Axiom get_pow2dim_square_elt1 :
  forall (m:matrix t) (i:Z), (pow2dim_square m) -> ((ln_size m) = i) ->
  ((columns m) = (power 2%Z i)).

Axiom kronecker_mult_commut_p :
  forall (a:matrix t) (b:matrix t) (c:matrix t) (d:matrix t),
  ((columns a) = (rows c)) -> ((columns b) = (rows d)) -> (pow2dim a) ->
  (pow2dim b) -> (pow2dim c) -> (pow2dim d) ->
  ((mat_mult (kronecker a b) (kronecker c d)) =
   (kronecker (mat_mult a c) (mat_mult b d))).

Axiom kronecker_mult_commut_p_quant :
  forall (a:matrix t) (b:matrix t), (pow2dim a) -> (pow2dim b) ->
  forall (c:matrix t) (d:matrix t), ((columns a) = (rows c)) ->
  ((columns b) = (rows d)) -> (pow2dim c) -> (pow2dim d) ->
  ((mat_mult (kronecker a b) (kronecker c d)) =
   (kronecker (mat_mult a c) (mat_mult b d))).

Axiom kronecker_add_distr_l :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((rows (kronecker (add_mat m n) o)) = ((rows m) * (rows o))%Z).

Axiom kronecker_add_distr_l1 :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((columns (kronecker (add_mat m n) o)) = ((columns m) * (columns o))%Z).

Axiom kronecker_add_distr_l2 :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((kronecker (add_mat m n) o) = (add_mat (kronecker m o) (kronecker n o))).

Axiom kronecker_add_distr_r :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((kronecker o (add_mat m n)) = (add_mat (kronecker o m) (kronecker o n))).

Axiom kronecker_add_distr_r1 :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((rows (kronecker o (add_mat m n))) = ((rows m) * (rows o))%Z).

Axiom kronecker_add_distr_r2 :
  forall (m:matrix t) (n:matrix t) (o:matrix t), ((rows m) = (rows n)) ->
  ((columns m) = (columns n)) ->
  ((columns (kronecker o (add_mat m n))) = ((columns m) * (columns o))%Z).

Axiom kronecker_sum_distr_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((columns (mat_sum s (fun (k:a) => (kronecker (f k) m)))) =
   (columns ((fun (k:a) => (kronecker (f k) m)) (choose s)))).

Axiom kronecker_sum_distr_l1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((columns ((fun (k:a) => (kronecker (f k) m)) (choose s))) =
   ((columns m) * (columns (f (choose s))))%Z).

Axiom kronecker_sum_distr_l2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((rows (mat_sum s (fun (k:a) => (kronecker (f k) m)))) =
   (rows ((fun (k:a) => (kronecker (f k) m)) (choose s)))).

Axiom kronecker_sum_distr_l3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((rows ((fun (k:a) => (kronecker (f k) m)) (choose s))) =
   ((rows m) * (rows (f (choose s))))%Z).

Axiom kronecker_sum_distr_l4 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((kronecker (mat_sum s f) m) =
   (mat_sum s (fun (k:a) => (kronecker (f k) m)))).

Axiom kronecker_sum_distr_r :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((columns (mat_sum s (fun (k:a) => (kronecker m (f k))))) =
   (columns ((fun (k:a) => (kronecker m (f k))) (choose s)))).

Axiom kronecker_sum_distr_r1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((columns ((fun (k:a) => (kronecker m (f k))) (choose s))) =
   ((columns m) * (columns (f (choose s))))%Z).

Axiom kronecker_sum_distr_r2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((rows (mat_sum s (fun (k:a) => (kronecker m (f k))))) =
   (rows ((fun (k:a) => (kronecker m (f k))) (choose s)))).

Axiom kronecker_sum_distr_r3 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((rows ((fun (k:a) => (kronecker m (f k))) (choose s))) =
   ((rows m) * (rows (f (choose s))))%Z).

Axiom kronecker_sum_distr_r4 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((kronecker m (mat_sum s f)) =
   (mat_sum s (fun (k:a) => (kronecker m (f k))))).

Axiom mat_sum_scalar1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (a1:t), (constant_size s f) ->
  (0%Z < (cardinal s))%Z ->
  ((mat_sum s (fun (k:a) => (infix_asdtdt a1 (f k)))) =
   (infix_asdtdt a1 (mat_sum s f))).

Axiom kronecker_sum_distr_sc :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (a1:t),
  (constant_size s f) -> (0%Z < (cardinal s))%Z ->
  ((mat_sum s (fun (k:a) => (kronecker (infix_asdtdt a1 (f k)) m))) =
   (infix_asdtdt a1 (mat_sum s (fun (k:a) => (kronecker (f k) m))))).

Axiom kronecker_ket_sum_distr_l :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  is_a_ket_l (ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + l2)%Z)
  (l1 + l2)%Z.

Axiom kronecker_ket_sum_distr_l1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  ((kronecker (ket_sum_l s f l1) m) =
   (ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + l2)%Z)).

Axiom kronecker_ket_sum_distr_l_nol :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket m) ->
  (0%Z < (cardinal s))%Z ->
  is_a_ket_l
  (ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + (ket_length m))%Z)
  (l1 + (ket_length m))%Z.

Axiom kronecker_ket_sum_distr_l_nol1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket m) ->
  (0%Z < (cardinal s))%Z ->
  ((kronecker (ket_sum_l s f l1) m) =
   (ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + (ket_length m))%Z)).

Axiom kronecker_ket_sum_distr_l_rew :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket m) ->
  (0%Z < (cardinal s))%Z ->
  ((kronecker (ket_sum_l s f l1) m) =
   (ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + (ket_length m))%Z)).

Axiom kronecker_ket_sum_distr_r :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  is_a_ket_l (ket_sum_l s (fun (k:a) => (kronecker m (f k))) (l1 + l2)%Z)
  (l1 + l2)%Z.

Axiom kronecker_ket_sum_distr_r1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  ((kronecker m (ket_sum_l s f l1)) =
   (ket_sum_l s (fun (k:a) => (kronecker m (f k))) (l1 + l2)%Z)).

Axiom kronecker_ket_sum_distr_l_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  is_a_ket_l (ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + l2)%Z)
  (l1 + l2)%Z.

Axiom kronecker_ket_sum_distr_l_rev1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  ((ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + l2)%Z) =
   (kronecker (ket_sum_l s f l1) m)).

Axiom kronecker_ket_sum_distr_r_rev :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  is_a_ket_l (ket_sum_l s (fun (k:a) => (kronecker m (f k))) (l1 + l2)%Z)
  (l1 + l2)%Z.

Axiom kronecker_ket_sum_distr_r_rev1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  ((ket_sum_l s (fun (k:a) => (kronecker m (f k))) (l1 + l2)%Z) =
   (kronecker m (ket_sum_l s f l1))).

Axiom kronecker_ket_sum_distr_r_rew :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (l1:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket m) ->
  (0%Z < (cardinal s))%Z ->
  ((kronecker m (ket_sum_l s f l1)) =
   (ket_sum_l s (fun (k:a) => (kronecker m (f k))) (l1 + (ket_length m))%Z)).

Axiom ket_sum_scalar :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (a1:t) (l:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l) ->
  (0%Z < (cardinal s))%Z ->
  ((ket_sum_l s (fun (k:a) => (infix_asdtdt a1 (f k))) l) =
   (infix_asdtdt a1 (ket_sum_l s f l))).

Axiom kronecker_ket_sum_distr_sc :
  forall {a:Type} {a_WT:WhyType a},
  forall (s:set a) (f:a -> matrix t) (m:matrix t) (a1:t) (l1:Z) (l2:Z),
  (forall (e:a), (mem e s) -> is_a_ket_l (f e) l1) -> (is_a_ket_l m l2) ->
  (0%Z < (cardinal s))%Z ->
  ((ket_sum_l s (fun (k:a) => (kronecker (infix_asdtdt a1 (f k)) m))
    (l1 + l2)%Z)
   =
   (infix_asdtdt a1
    (ket_sum_l s (fun (k:a) => (kronecker (f k) m)) (l1 + l2)%Z))).

Axiom kronecker_decomp_r :
  forall (m:matrix t) (n:matrix t) (lm:Z) (ln:Z), (is_a_ket_l m lm) ->
  (is_a_ket_l n ln) ->
  ((kronecker m n) =
   (ket_sum_l (n_bvs ln)
    (fun (x:bitvec) =>
     (infix_asdtdt (get n (bv_to_int x) 0%Z) (kronecker m (bv_to_ket x))))
    (lm + ln)%Z)).

Axiom kronecker_decomp_l :
  forall (m:matrix t) (n:matrix t) (lm:Z) (ln:Z), (is_a_ket_l m lm) ->
  (is_a_ket_l n ln) ->
  ((kronecker m n) =
   (ket_sum_l (n_bvs lm)
    (fun (x:bitvec) =>
     (infix_asdtdt (get m (bv_to_int x) 0%Z) (kronecker (bv_to_ket x) n)))
    (lm + ln)%Z)).

Axiom kronecker_ket_sum_distr_double :
  forall (i:Z) (j:Z) (f:bitvec -> matrix t) (g:bitvec -> matrix t) (l1:Z)
    (l2:Z),
  (0%Z <= i)%Z -> (0%Z <= j)%Z ->
  (forall (bv:bitvec), (mem bv (n_bvs i)) -> is_a_ket_l (f bv) l1) ->
  (forall (bv:bitvec), (mem bv (n_bvs j)) -> is_a_ket_l (g bv) l2) ->
  ((kronecker (ket_sum_l (n_bvs i) f l1) (ket_sum_l (n_bvs j) g l2)) =
   (ket_sum_l (n_bvs (i + j)%Z)
    (fun (k:bitvec) => (kronecker (f (hpart k i)) (g (tpart k i))))
    (l1 + l2)%Z)).

Axiom kronecker_sem_decomp_r :
  forall (c:gate) (m1:matrix t) (m2:matrix t) (f:bitvec -> matrix t) (s2:Z),
  (is_a_ket_l m1 ((size c) - s2)%Z) ->
  (forall (x:bitvec), ((length x) = s2) ->
   sem c (kronecker m1 (bv_to_ket x)) (f x)) ->
  (is_a_ket_l m2 s2) ->
  sem c (kronecker m1 m2)
  (ket_sum_l (n_bvs s2)
   (fun (x:bitvec) => (infix_asdtdt (get m2 (bv_to_int x) 0%Z) (f x)))
   (size c)).

Axiom kronecker_sem_decomp_r1 :
  forall (c:gate) (m1:matrix t) (m2:matrix t) (f:bitvec -> matrix t) (s2:Z),
  (is_a_ket_l m1 ((size c) - s2)%Z) ->
  (forall (x:bitvec), ((length x) = s2) ->
   sem c (kronecker m1 (bv_to_ket x)) (f x)) ->
  (is_a_ket_l m2 s2) ->
  sem c (kronecker m1 m2)
  (ket_sum_l (n_bvs s2)
   (fun (x:bitvec) =>
    (infix_asdtdt (get m2 (bv_to_int x) 0%Z)
     (pat_sem c (kronecker m1 (bv_to_ket x)))))
   (size c)).

Axiom kronecker_sem_decomp_l :
  forall (c:gate) (m1:matrix t) (m2:matrix t) (f:bitvec -> matrix t) (s1:Z),
  (is_a_ket_l m2 ((size c) - s1)%Z) ->
  (forall (x:bitvec), ((length x) = s1) ->
   sem c (kronecker (bv_to_ket x) m2) (f x)) ->
  (is_a_ket_l m1 s1) ->
  sem c (kronecker m1 m2)
  (ket_sum_l (n_bvs s1)
   (fun (x:bitvec) => (infix_asdtdt (get m1 (bv_to_int x) 0%Z) (f x)))
   (size c)).

Axiom kronecker_sem_decomp_l1 :
  forall (c:gate) (m1:matrix t) (m2:matrix t) (f:bitvec -> matrix t) (s1:Z),
  (is_a_ket_l m2 ((size c) - s1)%Z) ->
  (forall (x:bitvec), ((length x) = s1) ->
   sem c (kronecker (bv_to_ket x) m2) (f x)) ->
  (is_a_ket_l m1 s1) ->
  sem c (kronecker m1 m2)
  (ket_sum_l (n_bvs s1)
   (fun (x:bitvec) =>
    (infix_asdtdt (get m1 (bv_to_int x) 0%Z)
     (pat_sem c (kronecker (bv_to_ket x) m2))))
   (size c)).

Axiom sem_kronecker_decomp_l :
  forall (c:gate) (m1:matrix t) (m2:matrix t) (y:matrix t)
    (f:bitvec -> matrix t) (s2:Z),
  (forall (x:bitvec), ((length x) = (size c)) -> sem c (bv_to_ket x) (f x)) ->
  (sem c m1 y) -> (is_a_ket_l m2 s2) ->
  ((kronecker y m2) =
   (ket_sum_l (n_bvs (size c))
    (fun (x:bitvec) =>
     (infix_asdtdt (get m1 (bv_to_int x) 0%Z) (kronecker (f x) m2)))
    ((size c) + s2)%Z)).

Axiom sem_kronecker_decomp_r :
  forall (c:gate) (m1:matrix t) (m2:matrix t) (y:matrix t)
    (f:bitvec -> matrix t) (s1:Z),
  (forall (x:bitvec), ((length x) = (size c)) -> sem c (bv_to_ket x) (f x)) ->
  (sem c m2 y) -> (is_a_ket_l m1 s1) ->
  ((kronecker m1 y) =
   (ket_sum_l (n_bvs (size c))
    (fun (x:bitvec) =>
     (infix_asdtdt (get m2 (bv_to_int x) 0%Z) (kronecker m1 (f x))))
    ((size c) + s1)%Z)).

Axiom cont_kron_left_contz :
  forall (c:gate) (co:Z) (n:Z) (x:matrix t) (y:matrix t),
  (((size c) <= co)%Z /\ (co < n)%Z) -> (is_a_ket_l x (size c)) ->
  (is_a_ket_l y (n - (size c))%Z) -> (is_a_ket_basis_elt y) ->
  (((value (ket_to_bv y)) (co - (size c))%Z) = 0%Z) ->
  sem (cont c co 0%Z n) (kronecker x y) (kronecker x y).

Axiom cont_kron_left_conto :
  forall (c:gate) (co:Z) (n:Z) (f:bitvec -> matrix t) (x:matrix t)
    (y:matrix t),
  (((size c) <= co)%Z /\ (co < n)%Z) -> (is_a_ket_l x (size c)) ->
  (is_a_ket_l y (n - (size c))%Z) -> (is_a_ket_basis_elt y) ->
  (((value (ket_to_bv y)) (co - (size c))%Z) = 1%Z) ->
  (forall (z:bitvec), ((length z) = (size c)) -> sem c (bv_to_ket z) (f z)) ->
  sem (cont c co 0%Z n) (kronecker x y) (kronecker (pat_sem c x) y).

Axiom cont_kron_right_contz :
  forall (c:gate) (co:Z) (n:Z) (x:matrix t) (y:matrix t),
  ((0%Z <= co)%Z /\ (co < (n - (size c))%Z)%Z) ->
  (is_a_ket_l x (n - (size c))%Z) -> (is_a_ket_l y (size c)) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 0%Z) ->
  sem (cont c co (n - (size c))%Z n) (kronecker x y) (kronecker x y).

Axiom cont_kron_right_conto :
  forall (c:gate) (co:Z) (n:Z) (f:bitvec -> matrix t) (x:matrix t)
    (y:matrix t),
  ((0%Z <= co)%Z /\ (co < (n - (size c))%Z)%Z) ->
  (is_a_ket_l x (n - (size c))%Z) -> (is_a_ket_l y (size c)) ->
  (is_a_ket_basis_elt x) -> (((value (ket_to_bv x)) co) = 1%Z) ->
  (forall (z:bitvec), ((length z) = (size c)) -> sem c (bv_to_ket z) (f z)) ->
  sem (cont c co (n - (size c))%Z n) (kronecker x y)
  (kronecker x (pat_sem c y)).

Axiom cont_kron_gen_right :
  forall (circ:gate) (c:Z) (ft:Z) (n:Z) (y:matrix t) (z:matrix t),
  ((0%Z <= c)%Z /\ (c < ft)%Z) -> (n = (ft + (size circ))%Z) ->
  (sem circ y z) -> forall (x:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_l x ft) -> (((value (ket_to_bv x)) c) = 0%Z) ->
  sem (cont circ c ft n) (kronecker x y) (kronecker x y).

Axiom cont_kron_gen_right1 :
  forall (circ:gate) (c:Z) (ft:Z) (n:Z) (y:matrix t) (z:matrix t),
  ((0%Z <= c)%Z /\ (c < ft)%Z) -> (n = (ft + (size circ))%Z) ->
  (sem circ y z) -> forall (x:matrix t), (is_a_ket_basis_elt x) ->
  (is_a_ket_l x ft) -> (((value (ket_to_bv x)) c) = 1%Z) ->
  sem (cont circ c ft n) (kronecker x y) (kronecker x z).

Parameter place_hadamard: Z -> Z -> gate.

Axiom place_hadamard_def :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((place_hadamard k n) = (place hadamard k n)).

Axiom place_hadamard_spec :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((range (place_hadamard k n)) = 1%Z).

Axiom place_hadamard_spec1 :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  ((size (place_hadamard k n)) = n).

Axiom place_hadamard_spec2 :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = n) ->
  ((length y) = 1%Z) -> ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((i = k) -> ((basis_ket_i (place_hadamard k n) x y i) = ((value y) 0%Z))) /\
  (~ (i = k) -> ((basis_ket_i (place_hadamard k n) x y i) = ((value x) i))).

Parameter fc14: Z -> bitvec -> bitvec -> Z -> Z.

Axiom fc_def14 :
  forall (k:Z) (x:bitvec) (y:bitvec) (i:Z),
  ((i = k) -> (((fc14 k x y) i) = ((value y) 0%Z))) /\
  (~ (i = k) -> (((fc14 k x y) i) = ((value x) i))).

Axiom place_hadamard_spec3 :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((basis_ket (place_hadamard k n) x y) = (make_bv (fc14 k x y) n)).

Axiom place_hadamard_spec4 :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((ang_ind (place_hadamard k n) x y) =
   (int_to_ang (((value x) k) * ((value y) 0%Z))%Z 1%Z)).

Axiom place_hadamard_spec5 :
  forall (k:Z) (n:Z), ((0%Z <= k)%Z /\ (k < n)%Z) ->
  forall (x:bitvec) (y:bitvec), forall (m:Z), (1%Z <= m)%Z ->
  ((length x) = n) -> ((length y) = 1%Z) ->
  ((ang_ind (place_hadamard k n) x y) =
   (int_to_ang
    ((((value x) k) * ((value y) 0%Z))%Z * (power_ 2%Z (m - 1%Z)%Z))%Z m)).

(* Why3 assumption *)
Definition bv_get {a:Type} {a_WT:WhyType a} (m:matrix a) (x:bitvec)
    (y:bitvec) : a :=
  get m (bv_to_int x) (bv_to_int y).

Parameter bv_make:
  forall {a:Type} {a_WT:WhyType a}, (bitvec -> bitvec -> a) -> Z -> Z ->
  matrix a.

Axiom bv_make_def :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:bitvec -> bitvec -> a) (size1:Z) (range1:Z), (0%Z <= size1)%Z ->
  (0%Z <= range1)%Z ->
  ((bv_make f size1 range1) =
   (make_f (power 2%Z size1) (power 2%Z range1)
    (fun (i:Z) (j:Z) => ((f (int_to_bv i size1)) (int_to_bv j range1))))).

Axiom bv_make_spec :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:bitvec -> bitvec -> a) (size1:Z) (range1:Z), (0%Z <= size1)%Z ->
  (0%Z <= range1)%Z -> forall (x:bitvec) (y:bitvec), ((length x) = size1) ->
  ((length y) = range1) ->
  ((bv_get (bv_make f size1 range1) x y) = ((f x) y)).

Axiom bv_make_spec1 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:bitvec -> bitvec -> a) (size1:Z) (range1:Z), (0%Z <= size1)%Z ->
  (0%Z <= range1)%Z -> ((rows (bv_make f size1 range1)) = (power 2%Z size1)).

Axiom bv_make_spec2 :
  forall {a:Type} {a_WT:WhyType a},
  forall (f:bitvec -> bitvec -> a) (size1:Z) (range1:Z), (0%Z <= size1)%Z ->
  (0%Z <= range1)%Z ->
  ((columns (bv_make f size1 range1)) = (power 2%Z range1)).

Axiom bk_func : Type.
Parameter bk_func_WhyType : WhyType bk_func.
Existing Instance bk_func_WhyType.

Parameter mat_k: bk_func -> matrix bitvec.

Parameter size_k: bk_func -> Z.

Parameter range_k: bk_func -> Z.

Axiom bk_func'invariant : forall (self:bk_func), (0%Z <= (size_k self))%Z.

Axiom bk_func'invariant1 : forall (self:bk_func), (0%Z <= (range_k self))%Z.

Axiom bk_func'invariant2 :
  forall (self:bk_func), ((rows (mat_k self)) = (power 2%Z (size_k self))).

Axiom bk_func'invariant3 :
  forall (self:bk_func),
  ((columns (mat_k self)) = (power 2%Z (range_k self))).

Axiom bk_func'invariant4 :
  forall (self:bk_func), forall (x:bitvec) (y:bitvec),
  ((length x) = (size_k self)) -> ((length y) = (range_k self)) ->
  ((length (bv_get (mat_k self) x y)) = (size_k self)).

(* Why3 assumption *)
Definition get_k (k:bk_func) (x:bitvec) (y:bitvec) : bitvec :=
  bv_get (mat_k k) x y.

Axiom get_k_spec :
  forall (k:bk_func) (x:bitvec) (y:bitvec), ((length x) = (size_k k)) ->
  ((length y) = (range_k k)) -> ((length (get_k k x y)) = (size_k k)).

(* Why3 assumption *)
Definition get_k_int (k:bk_func) (x:bitvec) (y:bitvec) : Z :=
  bv_to_int (get_k k x y).

Axiom get_k_int_spec :
  forall (k:bk_func) (x:bitvec) (y:bitvec),
  ((get_k_int k x y) = (bv_to_int (bv_get (mat_k k) x y))).

Axiom get_k_int_spec1 :
  forall (k:bk_func) (x:bitvec) (y:bitvec), ((length x) = (size_k k)) ->
  ((length y) = (range_k k)) -> (0%Z <= (get_k_int k x y))%Z.

Axiom get_k_int_spec2 :
  forall (k:bk_func) (x:bitvec) (y:bitvec), ((length x) = (size_k k)) ->
  ((length y) = (range_k k)) ->
  ((get_k_int k x y) < (power 2%Z (size_k k)))%Z.

(* Why3 assumption *)
Definition get_k_ket (k:bk_func) (x:bitvec) (y:bitvec) : matrix t :=
  bv_to_ket (get_k k x y).

Axiom get_k_ket_spec :
  forall (k:bk_func) (x:bitvec) (y:bitvec),
  ((get_k_ket k x y) = (bv_to_ket (bv_get (mat_k k) x y))).

Axiom get_k_ket_spec1 :
  forall (k:bk_func) (x:bitvec) (y:bitvec), ((length x) = (size_k k)) ->
  ((length y) = (range_k k)) -> is_a_ket_l (get_k_ket k x y) (size_k k).

Axiom get_k_ket_spec2 :
  forall (k:bk_func) (x:bitvec) (y:bitvec),
  is_a_ket_basis_elt (get_k_ket k x y).

Axiom get_k_ket_spec3 :
  forall (k:bk_func) (x:bitvec) (y:bitvec), ((length x) = (size_k k)) ->
  ((length y) = (range_k k)) ->
  ((get_k_ket k x y) = (ket (size_k k) (get_k_int k x y))).

Axiom get_k_ket_is_a_ket_l :
  forall (k:bk_func) (x:bitvec) (y:bitvec) (l:Z), ((length x) = l) ->
  ((length y) = (range_k k)) -> (l = (size_k k)) ->
  is_a_ket_l (get_k_ket k x y) l.

Axiom get_k_length :
  forall (k:bk_func) (x:bitvec) (y:bitvec), ((length x) = (size_k k)) ->
  ((length y) = (range_k k)) -> ((length (get_k k x y)) = (size_k k)).

(* Why3 assumption *)
Definition get_ki (k:bk_func) (x:bitvec) (y:bitvec) (i:Z) : Z :=
  (value (get_k k x y)) i.

Axiom get_ki_spec :
  forall (k:bk_func) (x:bitvec) (y:bitvec) (i:Z),
  ((get_ki k x y i) = ((value (bv_get (mat_k k) x y)) i)).

Axiom length_bk :
  forall (k:bk_func) (x:bitvec) (y:bitvec), ((length x) = (size_k k)) ->
  ((length y) = (range_k k)) -> ((length (get_k k x y)) = (size_k k)).

Parameter make_k: (bitvec -> bitvec -> bitvec) -> Z -> Z -> bk_func.

Axiom make_k_spec :
  forall (f:bitvec -> bitvec -> bitvec) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z ->
  (forall (x:bitvec) (y:bitvec), ((length x) = size1) ->
   ((length y) = range1) -> ((length ((f x) y)) = size1)) ->
  forall (x:bitvec) (y:bitvec), ((length x) = size1) ->
  ((length y) = range1) -> ((get_k (make_k f size1 range1) x y) = ((f x) y)).

Axiom make_k_spec1 :
  forall (f:bitvec -> bitvec -> bitvec) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z ->
  (forall (x:bitvec) (y:bitvec), ((length x) = size1) ->
   ((length y) = range1) -> ((length ((f x) y)) = size1)) ->
  ((mat_k (make_k f size1 range1)) = (bv_make f size1 range1)).

Axiom make_k_spec2 :
  forall (f:bitvec -> bitvec -> bitvec) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z ->
  (forall (x:bitvec) (y:bitvec), ((length x) = size1) ->
   ((length y) = range1) -> ((length ((f x) y)) = size1)) ->
  ((size_k (make_k f size1 range1)) = size1).

Axiom make_k_spec3 :
  forall (f:bitvec -> bitvec -> bitvec) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z ->
  (forall (x:bitvec) (y:bitvec), ((length x) = size1) ->
   ((length y) = range1) -> ((length ((f x) y)) = size1)) ->
  ((range_k (make_k f size1 range1)) = range1).

Axiom angle_func : Type.
Parameter angle_func_WhyType : WhyType angle_func.
Existing Instance angle_func_WhyType.

Parameter mat_a: angle_func -> matrix angle.

Parameter size_a: angle_func -> Z.

Parameter range_a: angle_func -> Z.

Axiom angle_func'invariant :
  forall (self:angle_func), (0%Z <= (size_a self))%Z.

Axiom angle_func'invariant1 :
  forall (self:angle_func), (0%Z <= (range_a self))%Z.

Axiom angle_func'invariant2 :
  forall (self:angle_func), ((rows (mat_a self)) = (power 2%Z (size_a self))).

Axiom angle_func'invariant3 :
  forall (self:angle_func),
  ((columns (mat_a self)) = (power 2%Z (range_a self))).

(* Why3 assumption *)
Definition get_a (k:angle_func) (x:bitvec) (y:bitvec) : angle :=
  bv_get (mat_a k) x y.

(* Why3 assumption *)
Definition get_ac (k:angle_func) (x:bitvec) (y:bitvec) : t :=
  ang_exp (bv_get (mat_a k) x y).

(* Why3 assumption *)
Definition gen_ket (a:angle_func) : Prop := ((range_a a) = 0%Z).

Parameter make_a: (bitvec -> bitvec -> angle) -> Z -> Z -> angle_func.

Axiom make_a_spec :
  forall (f:bitvec -> bitvec -> angle) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = size1) -> ((length y) = range1) ->
  ((get_a (make_a f size1 range1) x y) = ((f x) y)).

Axiom make_a_spec1 :
  forall (f:bitvec -> bitvec -> angle) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = size1) -> ((length y) = range1) ->
  ((get_ac (make_a f size1 range1) x y) = (ang_exp ((f x) y))).

Axiom make_a_spec2 :
  forall (f:bitvec -> bitvec -> angle) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z ->
  ((mat_a (make_a f size1 range1)) = (bv_make f size1 range1)).

Axiom make_a_spec3 :
  forall (f:bitvec -> bitvec -> angle) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z ->
  ((size_a (make_a f size1 range1)) = size1).

Axiom make_a_spec4 :
  forall (f:bitvec -> bitvec -> angle) (size1:Z) (range1:Z),
  (0%Z <= size1)%Z -> (0%Z <= range1)%Z ->
  ((range_a (make_a f size1 range1)) = range1).

Parameter k_seq: bk_func -> bk_func -> bk_func.

Axiom k_seq_def :
  forall (k1:bk_func) (k2:bk_func), ((size_k k1) = (size_k k2)) ->
  ((k_seq k1 k2) =
   (make_k
    (fun (x:bitvec) (y:bitvec) =>
     (get_k k2 (get_k k1 x (hpart y (range_k k1))) (tpart y (range_k k1))))
    (size_k k1) ((range_k k1) + (range_k k2))%Z)).

Axiom k_seq_spec :
  forall (k1:bk_func) (k2:bk_func), ((size_k k1) = (size_k k2)) ->
  forall (x:bitvec) (y:bitvec), ((length x) = (size_k k1)) ->
  ((length y) = ((range_k k1) + (range_k k2))%Z) ->
  ((get_k (k_seq k1 k2) x y) =
   (get_k k2 (get_k k1 x (hpart y (range_k k1))) (tpart y (range_k k1)))).

Axiom k_seq_spec1 :
  forall (k1:bk_func) (k2:bk_func), ((size_k k1) = (size_k k2)) ->
  ((size_k (k_seq k1 k2)) = (size_k k1)).

Axiom k_seq_spec2 :
  forall (k1:bk_func) (k2:bk_func), ((size_k k1) = (size_k k2)) ->
  ((range_k (k_seq k1 k2)) = ((range_k k1) + (range_k k2))%Z).

Axiom k_seq_spec3 :
  forall (k1:bk_func) (k2:bk_func), ((size_k k1) = (size_k k2)) ->
  forall (x:bitvec) (y:bitvec), forall (i:Z), ((length x) = (size_k k1)) ->
  ((length y) = ((range_k k1) + (range_k k2))%Z) ->
  ((0%Z <= i)%Z /\ (i < ((range_k k1) + (range_k k2))%Z)%Z) ->
  ((get_ki (k_seq k1 k2) x y i) =
   (get_ki k2 (get_k k1 x (hpart y (range_k k1))) (tpart y (range_k k1)) i)).

(* Why3 assumption *)
Definition k_par (k1:bk_func) (k2:bk_func) : bk_func :=
  make_k
  (fun (x:bitvec) (y:bitvec) =>
   (concat (get_k k1 (hpart x (size_k k1)) (hpart y (range_k k1)))
    (get_k k2 (tpart x (size_k k1)) (tpart y (range_k k1)))))
  ((size_k k1) + (size_k k2))%Z ((range_k k1) + (range_k k2))%Z.

Axiom k_par_spec :
  forall (k1:bk_func) (k2:bk_func),
  ((size_k (k_par k1 k2)) = ((size_k k1) + (size_k k2))%Z).

Axiom k_par_spec1 :
  forall (k1:bk_func) (k2:bk_func),
  ((range_k (k_par k1 k2)) = ((range_k k1) + (range_k k2))%Z).

Axiom k_par_spec2 :
  forall (k1:bk_func) (k2:bk_func), forall (x:bitvec) (y:bitvec),
  ((length x) = ((size_k k1) + (size_k k2))%Z) ->
  ((length y) = ((range_k k1) + (range_k k2))%Z) ->
  ((get_k (k_par k1 k2) x y) =
   (concat (get_k k1 (hpart x (size_k k1)) (hpart y (range_k k1)))
    (get_k k2 (tpart x (size_k k1)) (tpart y (range_k k1))))).

Axiom k_par_spec3 :
  forall (k1:bk_func) (k2:bk_func), forall (x:bitvec) (y:bitvec),
  forall (i:Z), ((length x) = ((size_k k1) + (size_k k2))%Z) ->
  ((length y) = ((range_k k1) + (range_k k2))%Z) ->
  ((0%Z <= i)%Z /\ (i < (size_k k1))%Z) ->
  ((get_ki (k_par k1 k2) x y i) =
   (get_ki k1 (hpart x (size_k k1)) (hpart y (range_k k1)) i)).

Axiom k_par_spec4 :
  forall (k1:bk_func) (k2:bk_func), forall (x:bitvec) (y:bitvec),
  forall (i:Z), ((length x) = ((size_k k1) + (size_k k2))%Z) ->
  ((length y) = ((range_k k1) + (range_k k2))%Z) ->
  (((size_k k1) <= i)%Z /\ (i < ((size_k k1) + (size_k k2))%Z)%Z) ->
  ((get_ki (k_par k1 k2) x y i) =
   (get_ki k2 (tpart x (size_k k1)) (tpart y (range_k k1))
    (i - (size_k k1))%Z)).

Parameter a_seq: angle_func -> angle_func -> bk_func -> angle_func.

Axiom a_seq_def :
  forall (a1:angle_func) (a2:angle_func) (k1:bk_func),
  (((size_a a1) = (size_a a2)) /\ ((size_a a2) = (size_k k1))) ->
  ((range_a a1) = (range_k k1)) ->
  ((a_seq a1 a2 k1) =
   (make_a
    (fun (x:bitvec) (y:bitvec) =>
     (ang_add (get_a a1 x (hpart y (range_a a1)))
      (get_a a2 (get_k k1 x (hpart y (range_a a1))) (tpart y (range_a a1)))))
    (size_a a1) ((range_a a1) + (range_a a2))%Z)).

Axiom a_seq_spec :
  forall (a1:angle_func) (a2:angle_func) (k1:bk_func),
  (((size_a a1) = (size_a a2)) /\ ((size_a a2) = (size_k k1))) ->
  ((range_a a1) = (range_k k1)) -> ((size_a (a_seq a1 a2 k1)) = (size_a a1)).

Axiom a_seq_spec1 :
  forall (a1:angle_func) (a2:angle_func) (k1:bk_func),
  (((size_a a1) = (size_a a2)) /\ ((size_a a2) = (size_k k1))) ->
  ((range_a a1) = (range_k k1)) ->
  ((range_a (a_seq a1 a2 k1)) = ((range_a a1) + (range_a a2))%Z).

Axiom a_seq_spec2 :
  forall (a1:angle_func) (a2:angle_func) (k1:bk_func),
  (((size_a a1) = (size_a a2)) /\ ((size_a a2) = (size_k k1))) ->
  ((range_a a1) = (range_k k1)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size_a a1)) ->
  ((length y) = ((range_a a1) + (range_a a2))%Z) ->
  ((get_a (a_seq a1 a2 k1) x y) =
   (ang_add (get_a a1 x (hpart y (range_a a1)))
    (get_a a2 (get_k k1 x (hpart y (range_a a1))) (tpart y (range_a a1))))).

Axiom a_seq_spec3 :
  forall (a1:angle_func) (a2:angle_func) (k1:bk_func),
  (((size_a a1) = (size_a a2)) /\ ((size_a a2) = (size_k k1))) ->
  ((range_a a1) = (range_k k1)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size_a a1)) ->
  ((length y) = ((range_a a1) + (range_a a2))%Z) ->
  ((get_ac (a_seq a1 a2 k1) x y) =
   (infix_asdt (get_ac a1 x (hpart y (range_a a1)))
    (get_ac a2 (get_k k1 x (hpart y (range_a a1))) (tpart y (range_a a1))))).

(* Why3 assumption *)
Definition a_par (a1:angle_func) (a2:angle_func) : angle_func :=
  make_a
  (fun (x:bitvec) (y:bitvec) =>
   (ang_add (get_a a1 (hpart x (size_a a1)) (hpart y (range_a a1)))
    (get_a a2 (tpart x (size_a a1)) (tpart y (range_a a1)))))
  ((size_a a1) + (size_a a2))%Z ((range_a a1) + (range_a a2))%Z.

Axiom a_par_spec :
  forall (a1:angle_func) (a2:angle_func),
  ((size_a (a_par a1 a2)) = ((size_a a1) + (size_a a2))%Z).

Axiom a_par_spec1 :
  forall (a1:angle_func) (a2:angle_func),
  ((range_a (a_par a1 a2)) = ((range_a a1) + (range_a a2))%Z).

Axiom a_par_spec2 :
  forall (a1:angle_func) (a2:angle_func), forall (x:bitvec) (y:bitvec),
  ((length x) = ((size_a a1) + (size_a a2))%Z) ->
  ((length y) = ((range_a a1) + (range_a a2))%Z) ->
  ((get_a (a_par a1 a2) x y) =
   (ang_add (get_a a1 (hpart x (size_a a1)) (hpart y (range_a a1)))
    (get_a a2 (tpart x (size_a a1)) (tpart y (range_a a1))))).

Axiom a_par_spec3 :
  forall (a1:angle_func) (a2:angle_func), forall (x:bitvec) (y:bitvec),
  ((length x) = ((size_a a1) + (size_a a2))%Z) ->
  ((length y) = ((range_a a1) + (range_a a2))%Z) ->
  ((get_ac (a_par a1 a2) x y) =
   (infix_asdt (get_ac a1 (hpart x (size_a a1)) (hpart y (range_a a1)))
    (get_ac a2 (tpart x (size_a a1)) (tpart y (range_a a1))))).

(* Why3 assumption *)
Definition flat (c:gate) : Prop :=
  exists a:bitvec -> angle, exists b:bitvec -> bitvec,
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
  (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z.

Axiom set_flat :
  forall (c:gate) (a:bitvec -> angle) (b:bitvec -> bitvec),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z) ->
  flat c.

Axiom get_flat :
  forall (c:gate), (flat c) ->
  exists a:bitvec -> angle, exists b:bitvec -> bitvec,
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
  (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z.

Axiom flat_phase : forall (o:angle), flat (phase o).

Axiom flat_rz : forall (o:angle), flat (rz o).

Axiom flat_cnot : flat cnot.

Axiom seq_pres_flat_pre :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle)
    (b:bitvec -> bitvec) (b':bitvec -> bitvec),
  ((size c) = (size c')) ->
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => (b' x)) 0%Z) ->
  correct_path_sum (sequence c c')
  (fun (x:bitvec) (us:bitvec) => (ang_add (a x) (a' (b x))))
  (fun (x:bitvec) (us:bitvec) => (b' (b x))) 0%Z.

Axiom seq_pres_flat_pre1 :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle)
    (b:bitvec -> bitvec) (b':bitvec -> bitvec),
  ((size c) = (size c')) ->
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => (b' x)) 0%Z) ->
  flat (sequence c c').

Axiom par_pres_flat_pre :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle)
    (b:bitvec -> bitvec) (b':bitvec -> bitvec),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => (b' x)) 0%Z) ->
  correct_path_sum (parallel c c')
  (fun (x:bitvec) (us:bitvec) =>
   (ang_add (a (hpart x (size c))) (a' (tpart x (size c)))))
  (fun (x:bitvec) (us:bitvec) =>
   (concat (b (hpart x (size c))) (b' (tpart x (size c)))))
  0%Z.

Axiom par_pres_flat_pre1 :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle)
    (b:bitvec -> bitvec) (b':bitvec -> bitvec),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => (b' x)) 0%Z) ->
  flat (parallel c c').

Parameter flat_ang: gate -> bitvec -> angle.

Parameter flat_ket: gate -> bitvec -> bitvec.

Axiom flat_ket_spec :
  forall (c:gate), (flat c) -> forall (x:bitvec), ((length x) = (size c)) ->
  ((length ((flat_ket c) x)) = (size c)).

Axiom flat_correct :
  forall (c:gate), (flat c) ->
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => ((flat_ang c) x))
  (fun (x:bitvec) (us:bitvec) => ((flat_ket c) x)) 0%Z.

Axiom unic_flat_correct_pre :
  forall (c:gate) (a:bitvec -> angle) (b:bitvec -> bitvec) (x:bitvec),
  (correct_path_sum c (fun (x1:bitvec) (us:bitvec) => (a x1))
   (fun (x1:bitvec) (us:bitvec) => (b x1)) 0%Z) ->
  ((length x) = (size c)) -> (((flat_ang c) x) = (a x)).

Axiom unic_flat_correct_pre1 :
  forall (c:gate) (a:bitvec -> angle) (b:bitvec -> bitvec) (x:bitvec),
  (correct_path_sum c (fun (x1:bitvec) (us:bitvec) => (a x1))
   (fun (x1:bitvec) (us:bitvec) => (b x1)) 0%Z) ->
  ((length x) = (size c)) -> (((flat_ket c) x) = (b x)).

Axiom unic_flat_correct :
  forall (c:gate) (a:bitvec -> angle) (b:bitvec -> bitvec),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z) ->
  forall (x:bitvec), ((length x) = (size c)) -> (((flat_ang c) x) = (a x)).

Axiom unic_flat_correct1 :
  forall (c:gate) (a:bitvec -> angle) (b:bitvec -> bitvec),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z) ->
  forall (x:bitvec), ((length x) = (size c)) -> (((flat_ket c) x) = (b x)).

Axiom seq_pres_flat :
  forall (c:gate) (c':gate), ((size c) = (size c')) -> (flat c) ->
  (flat c') -> flat (sequence c c').

Axiom diag_pres_flat :
  forall (c:gate) (c':gate), (flat c) -> (flat c') -> flat (parallel c c').

Axiom flat_ang_phase :
  forall (o:angle), ((flat_ang (phase o)) = (fun (us:bitvec) => o)).

Axiom flat_ang_rz :
  forall (o:angle),
  ((flat_ang (rz o)) =
   (fun (x:bitvec) => (phase_inv_ (1%Z - ((value x) 0%Z))%Z o))).

Axiom flat_ang_cnot : ((flat_ang cnot) = (fun (us:bitvec) => ang_zero)).

Axiom flat_ang_sequence :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((flat_ang (sequence c c')) =
   (fun (x:bitvec) =>
    (ang_add ((flat_ang c) x) ((flat_ang c') ((flat_ket c') x))))).

Axiom flat_ang_parallel :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((flat_ang (parallel c c')) =
   (fun (x:bitvec) =>
    (ang_add ((flat_ang c) (hpart x (size c)))
     ((flat_ang c') (tpart x (size c)))))).

Axiom flat_ket_phase :
  forall (o:angle), ((flat_ket (phase o)) = (fun (i:bitvec) => i)).

Axiom flat_ket_rz :
  forall (o:angle), ((flat_ket (rz o)) = (fun (i:bitvec) => i)).

Axiom flat_ket_cnot :
  let fc15 := flat_ket cnot in
  forall (x:bitvec),
  (((0%Z <= (bv_to_int x))%Z /\ ((bv_to_int x) < 2%Z)%Z) -> ((fc15 x) = x)) /\
  (~ ((0%Z <= (bv_to_int x))%Z /\ ((bv_to_int x) < 2%Z)%Z) ->
   (((bv_to_int x) = 2%Z) -> ((fc15 x) = (int_to_bv 3%Z 2%Z))) /\
   (~ ((bv_to_int x) = 2%Z) -> ((fc15 x) = (int_to_bv 2%Z 2%Z)))).

Axiom flat_ket_sequence :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((flat_ket (sequence c c')) =
   (fun (x:bitvec) => ((flat_ket c') ((flat_ket c) x)))).

Axiom flat_ket_parallel :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((flat_ket (parallel c c')) =
   (fun (x:bitvec) =>
    (concat ((flat_ket c) (hpart x (size c)))
     ((flat_ket c') (tpart x (size c)))))).

Parameter f_sequence: gate -> gate -> gate.

Axiom f_sequence_def :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((size c) = (size c')) -> ((f_sequence c c') = (sequence c c')).

Axiom f_sequence_spec :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((size c) = (size c')) -> ((size (f_sequence c c')) = (size c)).

Axiom f_sequence_spec1 :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((size c) = (size c')) -> flat (f_sequence c c').

Axiom f_sequence_spec2 :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((size c) = (size c')) ->
  ((flat_ang (f_sequence c c')) =
   (fun (x:bitvec) =>
    (ang_add ((flat_ang c) x) ((flat_ang c') ((flat_ket c') x))))).

Axiom f_sequence_spec3 :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((size c) = (size c')) ->
  ((flat_ket (f_sequence c c')) =
   (fun (x:bitvec) => ((flat_ket c') ((flat_ket c) x)))).

Parameter f_parallel: gate -> gate -> gate.

Axiom f_parallel_def :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((f_parallel c c') = (parallel c c')).

Axiom f_parallel_spec :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((size (f_parallel c c')) = ((size c) + (size c'))%Z).

Axiom f_parallel_spec1 :
  forall (c:gate) (c':gate), (flat c) -> (flat c') -> flat (f_parallel c c').

Axiom f_parallel_spec2 :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((flat_ang (f_parallel c c')) =
   (fun (x:bitvec) =>
    (ang_add ((flat_ang c) (hpart x (size c)))
     ((flat_ang c') (tpart x (size c)))))).

Axiom f_parallel_spec3 :
  forall (c:gate) (c':gate), (flat c) -> (flat c') ->
  ((flat_ket (f_parallel c c')) =
   (fun (x:bitvec) =>
    (concat ((flat_ket c) (hpart x (size c)))
     ((flat_ket c') (tpart x (size c)))))).

(* Why3 assumption *)
Definition diag (c:gate) : Prop :=
  exists a:bitvec -> angle,
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
  (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom set_diag :
  forall (c:gate) (a:bitvec -> angle),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  diag c.

Axiom get_diag :
  forall (c:gate), (diag c) ->
  exists a:bitvec -> angle,
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
  (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom get_diag_sem :
  forall (c:gate), (diag c) ->
  exists a:bitvec -> angle,
  forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
  sem c x (infix_asdtdt (ang_exp (a (ket_to_bv x))) x).

Axiom set_diag_sem :
  forall (c:gate),
  (exists a:bitvec -> angle,
   forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
   sem c x (infix_asdtdt (ang_exp (a (ket_to_bv x))) x)) ->
  diag c.

Axiom set_diag_sem_elt :
  forall (c:gate) (a:bitvec -> angle),
  (forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
   sem c x (infix_asdtdt (ang_exp (a (ket_to_bv x))) x)) ->
  diag c.

Parameter diag_ang: gate -> bitvec -> angle.

Axiom diag_correct :
  forall (c:gate), (diag c) ->
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => ((diag_ang c) x))
  (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom diag_sem :
  forall (c:gate), (diag c) -> forall (x:bitvec), ((length x) = (size c)) ->
  sem c (bv_to_ket x) (infix_asdtdt (ang_exp ((diag_ang c) x)) (bv_to_ket x)).

Axiom set_correct_diag_sim :
  forall (c:gate) (a:bitvec -> angle), (diag c) ->
  (forall (x:bitvec), ((length x) = (size c)) -> (((diag_ang c) x) = (a x))) ->
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
  (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom set_correct_diag_sim_i :
  forall (c:gate) (a:bitvec -> Z -> angle) (l:Z) (h:Z), (diag c) ->
  (l <= h)%Z ->
  (forall (x:bitvec), ((length x) = (size c)) ->
   (((diag_ang c) x) = (ang_sum (a x) l h))) ->
  correct_path_sum_i c (fun (x:bitvec) (us:bitvec) (i:Z) => ((a x) i)) l h
  (fun (x:bitvec) (us:bitvec) (i:Z) => ((value x) i)) 0%Z.

Axiom set_correct_diag_sim_ :
  forall (c:gate) (a:bitvec -> bitvec -> angle), (diag c) ->
  (forall (x:bitvec) (y:bitvec) (y':bitvec), (((a x) y) = ((a x) y'))) ->
  (forall (x:bitvec) (y:bitvec), ((length x) = (size c)) ->
   (((diag_ang c) x) = ((a x) y))) ->
  correct_path_sum c a (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom correct_to_diag :
  forall (c:gate) (a:bitvec -> angle),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  diag c.

Axiom correct_to_diag1 :
  forall (c:gate) (a:bitvec -> angle),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  forall (x:bitvec), ((length x) = (size c)) ->
  sem c (bv_to_ket x) (infix_asdtdt (ang_exp (a x)) (bv_to_ket x)).

Axiom diag_sem_inst :
  forall (c:gate) (x:bitvec) (a:angle), (diag c) ->
  ((length x) = (size c)) ->
  (sem c (bv_to_ket x) (infix_asdtdt (ang_exp a) (bv_to_ket x))) ->
  (a = ((diag_ang c) x)).

Axiom set_diag_eq :
  forall (c:gate) (a:bitvec -> angle),
  (forall (x:bitvec), ((length x) = (size c)) ->
   sem c (bv_to_ket x) (infix_asdtdt (ang_exp (a x)) (bv_to_ket x))) ->
  diag c.

Axiom set_diag_eq1 :
  forall (c:gate) (a:bitvec -> angle),
  (forall (x:bitvec), ((length x) = (size c)) ->
   sem c (bv_to_ket x) (infix_asdtdt (ang_exp (a x)) (bv_to_ket x))) ->
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
  (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom set_diag_eq2 :
  forall (c:gate) (a:bitvec -> angle),
  (forall (x:bitvec), ((length x) = (size c)) ->
   sem c (bv_to_ket x) (infix_asdtdt (ang_exp (a x)) (bv_to_ket x))) ->
  forall (x:bitvec), ((length x) = (size c)) -> ((a x) = ((diag_ang c) x)).

Axiom diag_sem_inst_rev :
  forall (c:gate) (x:bitvec) (a:angle), (diag c) ->
  ((length x) = (size c)) -> (a = ((diag_ang c) x)) ->
  sem c (bv_to_ket x) (infix_asdtdt (ang_exp a) (bv_to_ket x)).

Axiom diag_is_flat : forall (c:gate), (diag c) -> flat c.

Axiom diag_phase : forall (o:angle), diag (phase o).

Axiom diag_rz : forall (o:angle), diag (rz o).

Axiom seq_pres_diag_pre :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle),
  ((size c) = (size c')) ->
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  correct_path_sum (sequence c c')
  (fun (x:bitvec) (us:bitvec) => (ang_add (a x) (a' x)))
  (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom seq_pres_diag_pre1 :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle),
  ((size c) = (size c')) ->
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  diag (sequence c c').

Axiom seq_pres_diag_pre2 :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle),
  ((size c) = (size c')) ->
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  forall (x:bitvec), ((length x) = (size (sequence c c'))) ->
  (((diag_ang (sequence c c')) x) = (ang_add (a x) (a' x))).

Axiom par_pres_diag_pre :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  correct_path_sum (parallel c c')
  (fun (x:bitvec) (us:bitvec) =>
   (ang_add (a (hpart x (size c))) (a' (tpart x (size c)))))
  (fun (x:bitvec) (us:bitvec) => x) 0%Z.

Axiom par_pres_diag_pre1 :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  diag (parallel c c').

Axiom par_pres_diag_pre2 :
  forall (c:gate) (c':gate) (a:bitvec -> angle) (a':bitvec -> angle),
  (correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  (correct_path_sum c' (fun (x:bitvec) (us:bitvec) => (a' x))
   (fun (x:bitvec) (us:bitvec) => x) 0%Z) ->
  forall (x:bitvec), ((length x) = (size (parallel c c'))) ->
  (((diag_ang (parallel c c')) x) =
   (ang_add (a (hpart x (size c))) (a' (tpart x (size c))))).

Parameter diag_sum_scheme_unit: gate -> (matrix t) -> matrix t.

Axiom diag_sum_scheme_unit_def :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) ->
  (is_a_ket_basis_elt x) -> (diag c) ->
  ((diag_sum_scheme_unit c x) =
   (infix_asdtdt (ang_exp ((diag_ang c) (ket_to_bv x))) x)).

Axiom diag_sum_scheme_unit_spec :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) ->
  (is_a_ket_basis_elt x) -> (diag c) ->
  is_a_ket_l (diag_sum_scheme_unit c x) (size c).

Axiom diag_sum_scheme_unit_spec1 :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) ->
  (is_a_ket_basis_elt x) -> (diag c) ->
  ((diag_sum_scheme_unit c x) =
   (path_sum_scheme_unit (fun (x1:bitvec) (us:bitvec) => ((diag_ang c) x1))
    (fun (x1:bitvec) (us:bitvec) => x1) (size c) 0%Z (ket_to_bv x))).

Axiom diag_sum_scheme_unit_spec2 :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) ->
  (is_a_ket_basis_elt x) -> (diag c) ->
  is_a_ket_l (diag_sum_scheme_unit c x) (size c).

Parameter diag_sum_scheme: gate -> (matrix t) -> matrix t.

Axiom diag_sum_scheme_def :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) -> (diag c) ->
  ((diag_sum_scheme c x) =
   (ket_sum_l (n_bvs (size c))
    (fun (z:bitvec) =>
     (infix_asdtdt (get x (bv_to_int z) 0%Z)
      (diag_sum_scheme_unit c (bv_to_ket (hpart z (size c))))))
    (size c))).

Axiom diag_sum_scheme_spec :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) -> (diag c) ->
  is_a_ket_l (diag_sum_scheme c x) (size c).

Axiom diag_sum_scheme_spec1 :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) -> (diag c) ->
  ((diag_sum_scheme c x) =
   (ket_sum_l (n_bvs (size c))
    (fun (z:bitvec) =>
     (infix_asdtdt (get x (bv_to_int z) 0%Z)
      (diag_sum_scheme_unit c (bv_to_ket z))))
    (size c))).

Axiom diag_sum_scheme_spec2 :
  forall (c:gate) (x:matrix t), (is_a_ket_l x (size c)) -> (diag c) ->
  ((diag_sum_scheme c x) =
   (path_sum_scheme (fun (x1:bitvec) (us:bitvec) => ((diag_ang c) x1))
    (fun (x1:bitvec) (us:bitvec) => x1) (size c) 0%Z x)).

Axiom seq_pres_diag :
  forall (c:gate) (c':gate), ((size c) = (size c')) -> (diag c) ->
  (diag c') -> diag (sequence c c').

Axiom par_pres_diag :
  forall (c:gate) (c':gate), (diag c) -> (diag c') -> diag (parallel c c').

Axiom pat_sem_diag_basis :
  forall (c:gate) (x:bitvec), (diag c) -> ((length x) = (size c)) ->
  ((pat_sem c (bv_to_ket x)) =
   (infix_asdtdt (ang_exp ((diag_ang c) x)) (bv_to_ket x))).

Axiom sem_diag_basis :
  forall (c:gate) (x:bitvec), (diag c) -> ((length x) = (size c)) ->
  sem c (bv_to_ket x) (infix_asdtdt (ang_exp ((diag_ang c) x)) (bv_to_ket x)).

Axiom sem_diag_basis_gen :
  forall (c:gate), (diag c) -> forall (x:bitvec), ((length x) = (size c)) ->
  sem c (bv_to_ket x) (infix_asdtdt (ang_exp ((diag_ang c) x)) (bv_to_ket x)).

Axiom set_diag_ang :
  forall (c:gate) (f:bitvec -> angle),
  (forall (x:bitvec), ((length x) = (size c)) ->
   ((pat_sem c (bv_to_ket x)) = (infix_asdtdt (ang_exp (f x)) (bv_to_ket x)))) ->
  diag c.

Axiom set_diag_ang1 :
  forall (c:gate) (f:bitvec -> angle),
  (forall (x:bitvec), ((length x) = (size c)) ->
   ((pat_sem c (bv_to_ket x)) = (infix_asdtdt (ang_exp (f x)) (bv_to_ket x)))) ->
  forall (x:bitvec), ((length x) = (size c)) -> (((diag_ang c) x) = (f x)).

Axiom set_diag_ang_sem :
  forall (c:gate) (f:bitvec -> angle),
  (forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
   sem c x (infix_asdtdt (ang_exp (f (ket_to_bv x))) x)) ->
  diag c.

Axiom set_diag_ang_sem1 :
  forall (c:gate) (f:bitvec -> angle),
  (forall (x:matrix t), (is_a_ket_l x (size c)) -> (is_a_ket_basis_elt x) ->
   sem c x (infix_asdtdt (ang_exp (f (ket_to_bv x))) x)) ->
  forall (x:bitvec), ((length x) = (size c)) -> (((diag_ang c) x) = (f x)).

Axiom diag_ang_phase :
  forall (o:angle), ((diag_ang (phase o)) = (fun (us:bitvec) => o)).

Axiom diag_ang_rz :
  forall (o:angle),
  ((diag_ang (rz o)) =
   (fun (x:bitvec) => (phase_inv_ (1%Z - ((value x) 0%Z))%Z o))).

Axiom diag_ang_cnot : ((diag_ang cnot) = (fun (us:bitvec) => ang_zero)).

Axiom diag_ang_sequence :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((diag_ang (sequence c c')) =
   (fun (x:bitvec) => (ang_add ((diag_ang c) x) ((diag_ang c') x)))).

Axiom diag_ang_parallel :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((diag_ang (parallel c c')) =
   (fun (x:bitvec) =>
    (ang_add ((diag_ang c) (hpart x (size c)))
     ((diag_ang c') (tpart x (size c)))))).

Parameter d_sequence: gate -> gate -> gate.

Axiom d_sequence_def :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((size c) = (size c')) -> ((d_sequence c c') = (sequence c c')).

Axiom d_sequence_spec :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((size c) = (size c')) -> ((size (d_sequence c c')) = (size c)).

Axiom d_sequence_spec1 :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((size c) = (size c')) -> diag (d_sequence c c').

Axiom d_sequence_spec2 :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((size c) = (size c')) ->
  ((diag_ang (d_sequence c c')) =
   (fun (x:bitvec) => (ang_add ((diag_ang c) x) ((diag_ang c') x)))).

Axiom d_sequence_eq :
  forall (d:gate) (d':gate) (e:gate) (e':gate), (diag d) -> (diag e) ->
  ((size d) = (size e)) -> (d = d') -> (e = e') ->
  ((d_sequence d e) = (d_sequence d' e')).

Parameter d_parallel: gate -> gate -> gate.

Axiom d_parallel_def :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((d_parallel c c') = (parallel c c')).

Axiom d_parallel_spec :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((size (d_parallel c c')) = ((size c) + (size c'))%Z).

Axiom d_parallel_spec1 :
  forall (c:gate) (c':gate), (diag c) -> (diag c') -> diag (d_parallel c c').

Axiom d_parallel_spec2 :
  forall (c:gate) (c':gate), (diag c) -> (diag c') ->
  ((diag_ang (d_parallel c c')) =
   (fun (x:bitvec) =>
    (ang_add ((diag_ang c) (hpart x (size c)))
     ((diag_ang c') (tpart x (size c)))))).

Axiom d_parallel_eq :
  forall (d:gate) (d':gate) (e:gate) (e':gate), (diag d) -> (diag e) ->
  (d = d') -> (e = e') -> ((d_parallel d e) = (d_parallel d' e')).

Parameter d_seq_iter: (Z -> gate) -> Z -> Z -> Z -> gate.

Axiom d_seq_iter_def :
  forall (f:Z -> gate) (d:Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((size (f k)) = d)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> diag (f k)) ->
  (j = (i + 1%Z)%Z) -> ((d_seq_iter f d i j) = (f i)).

Axiom d_seq_iter_def1 :
  forall (f:Z -> gate) (d:Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((size (f k)) = d)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> diag (f k)) ->
  ~ (j = (i + 1%Z)%Z) ->
  ((d_seq_iter f d i j) =
   (d_sequence (d_seq_iter f d i (j - 1%Z)%Z) (f (j - 1%Z)%Z))).

Axiom d_seq_iter_spec :
  forall (f:Z -> gate) (d:Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((size (f k)) = d)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> diag (f k)) ->
  diag (d_seq_iter f d i j).

Axiom d_seq_iter_spec1 :
  forall (f:Z -> gate) (d:Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((size (f k)) = d)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> diag (f k)) ->
  ((size (d_seq_iter f d i j)) = d).

Axiom d_seq_iter_spec2 :
  forall (f:Z -> gate) (d:Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((size (f k)) = d)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> diag (f k)) ->
  forall (x:bitvec), ((length x) = d) ->
  (((diag_ang (d_seq_iter f d i j)) x) =
   (ang_sum (fun (k:Z) => ((diag_ang (f k)) x)) i j)).

Axiom d_seq_iter_one :
  forall (f:Z -> gate) (d:Z) (i:Z) (j:Z), ((i + 1%Z)%Z = j) ->
  ((size (f i)) = d) -> (diag (f i)) -> ((d_seq_iter f d i j) = (f i)).

Axiom d_seq_iter_plus_one :
  forall (f:Z -> gate) (d:Z) (i:Z) (j:Z), ((i + 1%Z)%Z < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((size (f k)) = d)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> diag (f k)) ->
  ((d_seq_iter f d i j) =
   (d_sequence (d_seq_iter f d i (j - 1%Z)%Z) (f (j - 1%Z)%Z))).

Axiom d_seq_iter_eq :
  forall (f:Z -> gate) (g:Z -> gate) (d:Z) (i:Z) (j:Z), (i < j)%Z ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((size (f k)) = d)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> diag (f k)) ->
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f k) = (g k))) ->
  ((d_seq_iter g d i j) = (d_seq_iter f d i j)).

Parameter rzp: Z -> gate.

Axiom rzp_def :
  forall (n:Z), (0%Z <= n)%Z ->
  ((rzp n) =
   (d_sequence (phase (int_to_ang 1%Z (n + 1%Z)%Z))
    (rz (int_to_ang 1%Z (n + 1%Z)%Z)))).

Axiom rzp_spec : forall (n:Z), (0%Z <= n)%Z -> ((size (rzp n)) = 1%Z).

Axiom rzp_spec1 : forall (n:Z), (0%Z <= n)%Z -> diag (rzp n).

Axiom rzp_spec2 :
  forall (n:Z), (0%Z <= n)%Z -> forall (x:bitvec), ((length x) = 1%Z) ->
  (((diag_ang (rzp n)) x) = (int_to_ang ((value x) 0%Z) n)).

Parameter rzp_neg: Z -> gate.

Axiom rzp_neg_def :
  forall (n:Z), (0%Z <= n)%Z ->
  ((rzp_neg n) =
   (d_sequence (phase (int_to_ang (-1%Z)%Z (n + 1%Z)%Z))
    (rz (int_to_ang (-1%Z)%Z (n + 1%Z)%Z)))).

Axiom rzp_neg_spec :
  forall (n:Z), (0%Z <= n)%Z -> ((size (rzp_neg n)) = 1%Z).

Axiom rzp_neg_spec1 : forall (n:Z), (0%Z <= n)%Z -> diag (rzp_neg n).

Axiom rzp_neg_spec2 :
  forall (n:Z), (0%Z <= n)%Z -> forall (x:bitvec), ((length x) = 1%Z) ->
  (((diag_ang (rzp_neg n)) x) = (int_to_ang (-((value x) 0%Z))%Z n)).

Parameter dplace: gate -> Z -> Z -> gate.

Axiom dplace_def :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  (diag c) -> ((dplace c k n) = (place c k n)).

Axiom dplace_spec :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  (diag c) -> diag (dplace c k n).

Axiom dplace_spec1 :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  (diag c) -> ((size (dplace c k n)) = n).

Axiom dplace_spec2 :
  forall (c:gate) (k:Z) (n:Z), (0%Z <= k)%Z -> (((size c) + k)%Z <= n)%Z ->
  (diag c) -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (dplace c k n)) x) = ((diag_ang c) (htpart x k (size c)))).

Parameter dcont: gate -> Z -> Z -> Z -> gate.

Axiom dcont_def :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> ((dcont c co ft n) = (cont c co ft n)).

Axiom dcont_def1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) ->
  ((dcont c co ft n) = (cont c co ft n)).

Axiom dcont_spec :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> diag (dcont c co ft n).

Axiom dcont_spec1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> ((size (dcont c co ft n)) = n).

Axiom dcont_spec2 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (dcont c co ft n)) x) =
   (ang_mult_int ((diag_ang c) (htpart x ft (size c))) ((value x) co))).

Axiom dcont_spec3 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) -> diag (dcont c co ft n).

Axiom dcont_spec4 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) -> ((size (dcont c co ft n)) = n).

Axiom dcont_spec5 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) -> forall (x:bitvec),
  ((length x) = n) ->
  (((diag_ang (dcont c co ft n)) x) =
   (ang_mult_int ((diag_ang c) (htpart x ft (size c))) ((value x) co))).

Parameter d_cont: gate -> Z -> Z -> Z -> gate.

Axiom d_cont_def :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> ((d_cont c co ft n) = (dcont c co ft n)).

Axiom d_cont_def1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) ->
  ((d_cont c co ft n) = (dcont c co ft n)).

Axiom d_cont_spec :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> diag (d_cont c co ft n).

Axiom d_cont_spec1 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> ((size (d_cont c co ft n)) = n).

Axiom d_cont_spec2 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) -> ~ (ft <= co)%Z ->
  (diag c) -> forall (x:bitvec), ((length x) = n) ->
  ((((value x) co) = 1%Z) ->
   (((diag_ang (d_cont c co ft n)) x) =
    ((diag_ang c) (htpart x ft (size c))))) /\
  (~ (((value x) co) = 1%Z) ->
   (((diag_ang (d_cont c co ft n)) x) = ang_zero)).

Axiom d_cont_spec3 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) -> diag (d_cont c co ft n).

Axiom d_cont_spec4 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) -> ((size (d_cont c co ft n)) = n).

Axiom d_cont_spec5 :
  forall (c:gate) (co:Z) (ft:Z) (n:Z), ((0%Z <= co)%Z /\ (co < n)%Z) ->
  ((0%Z <= ft)%Z /\ (ft <= (n - (size c))%Z)%Z) ->
  ((ft + (size c))%Z <= co)%Z -> (diag c) -> forall (x:bitvec),
  ((length x) = n) ->
  ((((value x) co) = 1%Z) ->
   (((diag_ang (d_cont c co ft n)) x) =
    ((diag_ang c) (htpart x ft (size c))))) /\
  (~ (((value x) co) = 1%Z) ->
   (((diag_ang (d_cont c co ft n)) x) = ang_zero)).

Parameter c_rzp_pos: Z -> Z -> Z -> Z -> gate.

Axiom c_rzp_pos_def :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> ((c_rzp_pos k co ft n) = (dcont (rzp k) co ft n)).

Axiom c_rzp_pos_def1 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> ((c_rzp_pos k co ft n) = (dcont (rzp k) co ft n)).

Axiom c_rzp_pos_spec :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> ((size (c_rzp_pos k co ft n)) = n).

Axiom c_rzp_pos_spec1 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> diag (c_rzp_pos k co ft n).

Axiom c_rzp_pos_spec2 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (c_rzp_pos k co ft n)) x) =
   (int_to_ang (((value x) co) * ((value x) ft))%Z k)).

Axiom c_rzp_pos_spec3 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_pos k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_pos_spec4 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_pos k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power_ 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_pos_spec5 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> ((size (c_rzp_pos k co ft n)) = n).

Axiom c_rzp_pos_spec6 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> diag (c_rzp_pos k co ft n).

Axiom c_rzp_pos_spec7 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (c_rzp_pos k co ft n)) x) =
   (int_to_ang (((value x) co) * ((value x) ft))%Z k)).

Axiom c_rzp_pos_spec8 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_pos k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_pos_spec9 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_pos k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power_ 2%Z (m - k)%Z))%Z m)).

Parameter c_rzp_neg: Z -> Z -> Z -> Z -> gate.

Axiom c_rzp_neg_def :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> ((c_rzp_neg k co ft n) = (dcont (rzp_neg k) co ft n)).

Axiom c_rzp_neg_def1 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> ((c_rzp_neg k co ft n) = (dcont (rzp_neg k) co ft n)).

Axiom c_rzp_neg_spec :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> ((size (c_rzp_neg k co ft n)) = n).

Axiom c_rzp_neg_spec1 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> diag (c_rzp_neg k co ft n).

Axiom c_rzp_neg_spec2 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (c_rzp_neg k co ft n)) x) =
   (int_to_ang ((-((value x) co))%Z * ((value x) ft))%Z k)).

Axiom c_rzp_neg_spec3 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_neg k co ft n)) x) =
   (int_to_ang
    (((-((value x) co))%Z * ((value x) ft))%Z * (power 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_neg_spec4 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_neg k co ft n)) x) =
   (int_to_ang
    (((-((value x) co))%Z * ((value x) ft))%Z * (power_ 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_neg_spec5 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> ((size (c_rzp_neg k co ft n)) = n).

Axiom c_rzp_neg_spec6 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> diag (c_rzp_neg k co ft n).

Axiom c_rzp_neg_spec7 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (c_rzp_neg k co ft n)) x) =
   (int_to_ang ((-((value x) co))%Z * ((value x) ft))%Z k)).

Axiom c_rzp_neg_spec8 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_neg k co ft n)) x) =
   (int_to_ang
    (((-((value x) co))%Z * ((value x) ft))%Z * (power 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_neg_spec9 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= k)%Z -> (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp_neg k co ft n)) x) =
   (int_to_ang
    (((-((value x) co))%Z * ((value x) ft))%Z * (power_ 2%Z (m - k)%Z))%Z m)).

Parameter c_rzp: Z -> Z -> Z -> Z -> gate.

Axiom c_rzp_def :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> (0%Z <= k)%Z ->
  ((c_rzp k co ft n) = (c_rzp_pos k co ft n)).

Axiom c_rzp_def1 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> ~ (0%Z <= k)%Z ->
  ((c_rzp k co ft n) = (c_rzp_neg (-k)%Z co ft n)).

Axiom c_rzp_def2 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> (0%Z <= k)%Z -> ((c_rzp k co ft n) = (c_rzp_pos k co ft n)).

Axiom c_rzp_def3 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> ~ (0%Z <= k)%Z ->
  ((c_rzp k co ft n) = (c_rzp_neg (-k)%Z co ft n)).

Axiom c_rzp_spec :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> ((size (c_rzp k co ft n)) = n).

Axiom c_rzp_spec1 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> diag (c_rzp k co ft n).

Axiom c_rzp_spec2 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (c_rzp k co ft n)) x) =
   (int_to_ang (((value x) co) * ((value x) ft))%Z k)).

Axiom c_rzp_spec3 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_spec4 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft <= co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power_ 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_spec5 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> ((size (c_rzp k co ft n)) = n).

Axiom c_rzp_spec6 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> diag (c_rzp k co ft n).

Axiom c_rzp_spec7 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((diag_ang (c_rzp k co ft n)) x) =
   (int_to_ang (((value x) co) * ((value x) ft))%Z k)).

Axiom c_rzp_spec8 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power 2%Z (m - k)%Z))%Z m)).

Axiom c_rzp_spec9 :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  (ft < co)%Z -> forall (x:bitvec), forall (m:Z), (k <= m)%Z ->
  ((length x) = n) ->
  (((diag_ang (c_rzp k co ft n)) x) =
   (int_to_ang
    ((((value x) co) * ((value x) ft))%Z * (power_ 2%Z (m - k)%Z))%Z m)).

Axiom xx_spec : flat (sequence hadamard (sequence (rzp 1%Z) hadamard)).

Axiom xx_spec1 :
  ((size (sequence hadamard (sequence (rzp 1%Z) hadamard))) = 1%Z).

Axiom xx_spec2 :
  forall (x:bitvec), ((length x) = 1%Z) ->
  (((flat_ang (sequence hadamard (sequence (rzp 1%Z) hadamard))) x) =
   ang_zero).

Axiom xx_spec3 :
  forall (x:bitvec), ((length x) = 1%Z) ->
  (((value ((flat_ket (sequence hadamard (sequence (rzp 1%Z) hadamard))) x))
    0%Z)
   = (1%Z - ((value x) 0%Z))%Z).

Parameter x_kron: Z -> gate.

Axiom x_kron_def :
  forall (n:Z), (0%Z < n)%Z -> (n = 1%Z) ->
  ((x_kron n) = (sequence hadamard (sequence (rzp 1%Z) hadamard))).

Axiom x_kron_def1 :
  forall (n:Z), (0%Z < n)%Z -> ~ (n = 1%Z) ->
  ((x_kron n) =
   (f_parallel (x_kron (n - 1%Z)%Z)
    (sequence hadamard (sequence (rzp 1%Z) hadamard)))).

Axiom x_kron_spec : forall (n:Z), (0%Z < n)%Z -> flat (x_kron n).

Axiom x_kron_spec1 : forall (n:Z), (0%Z < n)%Z -> ((size (x_kron n)) = n).

Axiom x_kron_spec2 :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec), ((length x) = n) ->
  (((flat_ang (x_kron n)) x) = ang_zero).

Axiom x_kron_spec3 :
  forall (n:Z), (0%Z < n)%Z -> forall (x:bitvec), forall (i:Z),
  ((length x) = n) -> ((0%Z <= i)%Z /\ (i < n)%Z) ->
  (((value ((flat_ket (x_kron n)) x)) i) = (1%Z - ((value x) i))%Z).

(* Why3 assumption *)
Definition correct_flat (c:gate) (a:bitvec -> angle) (b:bitvec -> bitvec) :
    Prop :=
  correct_path_sum c (fun (x:bitvec) (us:bitvec) => (a x))
  (fun (x:bitvec) (us:bitvec) => (b x)) 0%Z.

Axiom correct_flat_spec : forall (c:gate), flat c.

Axiom set_correct_flat :
  forall (c:gate), (flat c) -> correct_flat c (flat_ang c) (flat_ket c).

Axiom set_correct_diag :
  forall (c:gate), (diag c) ->
  correct_flat c (diag_ang c) (fun (y:bitvec) => y).

Axiom get_diag_from_correct_flat :
  forall (c:gate), (correct_flat c (diag_ang c) (fun (y:bitvec) => y)) ->
  diag c.

Axiom get_diag_from_correct_flat1 :
  forall (c:gate) (a:bitvec -> angle),
  (correct_flat c (diag_ang c) (fun (y:bitvec) => y)) -> forall (x:bitvec),
  ((length x) = (size c)) -> (((diag_ang c) x) = (a x)).

Parameter flat_sequ:
  gate -> gate -> (bitvec -> angle) -> (bitvec -> angle) ->
  (bitvec -> angle) -> (bitvec -> bitvec) -> (bitvec -> bitvec) ->
  (bitvec -> bitvec) -> Z -> gate.

Axiom flat_sequ_def :
  forall (c:gate) (c':gate) (ase:bitvec -> angle) (a:bitvec -> angle)
    (a':bitvec -> angle) (bse:bitvec -> bitvec) (b:bitvec -> bitvec)
    (b':bitvec -> bitvec) (s:Z),
  (flat c) -> (flat c') -> (((size c) = (size c')) /\ ((size c') = s)) ->
  (correct_flat c a b) -> (correct_flat c' a' b') ->
  (forall (x:bitvec), ((length x) = s) ->
   ((ase x) = (ang_add (a x) (a' (b x))))) ->
  (forall (x:bitvec), ((length x) = s) -> ((bse x) = (b' (b x)))) ->
  ((flat_sequ c c' ase a a' bse b b' s) = (sequence c c')).

Axiom flat_sequ_spec :
  forall (c:gate) (c':gate) (ase:bitvec -> angle) (a:bitvec -> angle)
    (a':bitvec -> angle) (bse:bitvec -> bitvec) (b:bitvec -> bitvec)
    (b':bitvec -> bitvec) (s:Z),
  (flat c) -> (flat c') -> (((size c) = (size c')) /\ ((size c') = s)) ->
  (correct_flat c a b) -> (correct_flat c' a' b') ->
  (forall (x:bitvec), ((length x) = s) ->
   ((ase x) = (ang_add (a x) (a' (b x))))) ->
  (forall (x:bitvec), ((length x) = s) -> ((bse x) = (b' (b x)))) ->
  correct_flat (flat_sequ c c' ase a a' bse b b' s) ase bse.

Axiom flat_sequ_spec1 :
  forall (c:gate) (c':gate) (ase:bitvec -> angle) (a:bitvec -> angle)
    (a':bitvec -> angle) (bse:bitvec -> bitvec) (b:bitvec -> bitvec)
    (b':bitvec -> bitvec) (s:Z),
  (flat c) -> (flat c') -> (((size c) = (size c')) /\ ((size c') = s)) ->
  (correct_flat c a b) -> (correct_flat c' a' b') ->
  (forall (x:bitvec), ((length x) = s) ->
   ((ase x) = (ang_add (a x) (a' (b x))))) ->
  (forall (x:bitvec), ((length x) = s) -> ((bse x) = (b' (b x)))) ->
  ((size (flat_sequ c c' ase a a' bse b b' s)) = s).

Axiom flat_sequ_spec2 :
  forall (c:gate) (c':gate) (ase:bitvec -> angle) (a:bitvec -> angle)
    (a':bitvec -> angle) (bse:bitvec -> bitvec) (b:bitvec -> bitvec)
    (b':bitvec -> bitvec) (s:Z),
  (flat c) -> (flat c') -> (((size c) = (size c')) /\ ((size c') = s)) ->
  (correct_flat c a b) -> (correct_flat c' a' b') ->
  (forall (x:bitvec), ((length x) = s) ->
   ((ase x) = (ang_add (a x) (a' (b x))))) ->
  (forall (x:bitvec), ((length x) = s) -> ((bse x) = (b' (b x)))) ->
  correct_path_sum (flat_sequ c c' ase a a' bse b b' s)
  (fun (x:bitvec) (us:bitvec) => (ase x))
  (fun (x:bitvec) (us:bitvec) => (bse x)) 0%Z.

Parameter c_rzp_zh_: Z -> Z -> Z -> Z -> gate.

Axiom c_rzp_zh__def :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> ((c_rzp_zh_ k co t1 n) = (c_rzp k co t1 n)).

Parameter had_zh_: Z -> Z -> gate.

Axiom had_zh__def :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ((had_zh_ t1 n) = (place hadamard t1 n)).

Parameter cont_zh: gate -> Prop.

Axiom zh_had :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  cont_zh (had_zh_ t1 n).

Axiom zh_cont_rzp :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> cont_zh (c_rzp_zh_ k co ft n).

Axiom seq_pres_zh :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> cont_zh (sequence d e).

Axiom par_pres_zh :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> cont_zh (parallel d e).

Parameter zh_range: gate -> Z.

Axiom zh_range_spec :
  forall (g:gate), (cont_zh g) -> (0%Z <= (zh_range g))%Z.

Axiom had_zh_range :
  forall (t1:Z) (n:Z), ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ((zh_range (had_zh_ t1 n)) = 1%Z).

Axiom cont_zh_range :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> ((zh_range (c_rzp_zh_ k co ft n)) = 0%Z).

Axiom seq_zh_range :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) ->
  ((zh_range (sequence d e)) = ((zh_range d) + (zh_range e))%Z).

Axiom par_zh_range :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((zh_range (parallel d e)) = ((zh_range d) + (zh_range e))%Z).

Parameter zh_ket: gate -> bitvec -> bitvec -> bitvec.

Parameter fc15: Z -> bitvec -> bitvec -> Z -> Z.

Axiom fc_def15 :
  forall (t1:Z) (x:bitvec) (y:bitvec) (i:Z),
  ((i = t1) -> (((fc15 t1 x y) i) = ((value y) 0%Z))) /\
  (~ (i = t1) -> (((fc15 t1 x y) i) = ((value x) i))).

Axiom had_zh_ket :
  forall (t1:Z) (n:Z), ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ket (had_zh_ t1 n) x y) = (make_bv (fc15 t1 x y) n)).

Axiom cont_zh_ket :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> ((zh_ket (c_rzp_zh_ k co ft n) x y) = x).

Axiom seq_zh_ket :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size d)) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) ->
  ((zh_ket (sequence d e) x y) =
   (zh_ket e (zh_ket d x (hpart y (zh_range d))) (tpart y (zh_range d)))).

Axiom par_zh_ket :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = ((size d) + (size e))%Z) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) ->
  ((zh_ket (parallel d e) x y) =
   (concat (zh_ket d (hpart x (size d)) (hpart y (zh_range d)))
    (zh_ket e (tpart x (size d)) (tpart y (zh_range d))))).

Parameter zh_ket_i: gate -> bitvec -> bitvec -> Z -> Z.

Axiom zh_ket_i_spec :
  forall (c:gate) (x:bitvec) (y:bitvec) (i:Z), (cont_zh c) ->
  ((length x) = (size c)) -> ((length y) = (zh_range c)) ->
  ((0%Z <= i)%Z /\ (i < (size c))%Z) -> (0%Z <= (zh_ket_i c x y i))%Z.

Axiom zh_ket_i_spec1 :
  forall (c:gate) (x:bitvec) (y:bitvec) (i:Z), (cont_zh c) ->
  ((length x) = (size c)) -> ((length y) = (zh_range c)) ->
  ((0%Z <= i)%Z /\ (i < (size c))%Z) -> ((zh_ket_i c x y i) < 2%Z)%Z.

Axiom had_zh_ket_i :
  forall (t1:Z) (n:Z), ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ket_i (had_zh_ t1 n) x y t1) = ((value y) 0%Z)).

Axiom had_zh_ket_i' :
  forall (t1:Z) (n:Z), ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) -> ~ (i = t1) ->
  ((zh_ket_i (had_zh_ t1 n) x y i) = ((value x) i)).

Axiom cont_zh_ket_i :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((zh_ket_i (c_rzp_zh_ k co ft n) x y i) = ((value x) i)).

Axiom seq_zh_ket_i :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size d)) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (size d))%Z) ->
  ((zh_ket_i (sequence d e) x y i) =
   (zh_ket_i e (zh_ket d x (hpart y (zh_range d))) (tpart y (zh_range d)) i)).

Axiom par_zh_ket_i :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = ((size d) + (size e))%Z) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (size d))%Z) ->
  ((zh_ket_i (parallel d e) x y i) =
   (zh_ket_i d (hpart x (size d)) (hpart y (zh_range d)) i)).

Axiom par_zh_ket_i' :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = ((size d) + (size e))%Z) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) -> forall (i:Z),
  (((size d) <= i)%Z /\ (i < ((size d) + (size e))%Z)%Z) ->
  ((zh_ket_i (parallel d e) x y i) =
   (zh_ket_i e (tpart x (size d)) (tpart y (zh_range d)) (i - (size d))%Z)).

Parameter zh_ang_coeff: gate -> bitvec -> bitvec -> Z.

Axiom had_zh_ang_coeff :
  forall (t1:Z) (n:Z), ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ang_coeff (had_zh_ t1 n) x y) =
   ((((value x) t1) * ((value y) 0%Z))%Z * (power_ 2%Z (n - 1%Z)%Z))%Z).

Axiom cont_zh_ang_coeff :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> (0%Z <= k)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (c_rzp_zh_ k co ft n) x y) =
   ((((value x) ft) * ((value x) co))%Z * (power_ 2%Z (n - k)%Z))%Z).

Axiom cont_zh_ang_coeff_n :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> (k <= 0%Z)%Z ->
  ((zh_ang_coeff (c_rzp_zh_ k co ft n) x y) =
   (-((((value x) ft) * ((value x) co))%Z * (power_ 2%Z (n + k)%Z))%Z)%Z).

Axiom seq_zh_ang_coeff :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size d)) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) ->
  ((zh_ang_coeff (sequence d e) x y) =
   ((zh_ang_coeff d x (hpart y (zh_range d))) +
    (zh_ang_coeff e (zh_ket d x (hpart y (zh_range d)))
     (tpart y (zh_range d))))%Z).

Axiom par_zh_ang_coeff :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = ((size d) + (size e))%Z) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) ->
  ((zh_ang_coeff (parallel d e) x y) =
   ((zh_ang_coeff d (hpart x (size d)) (hpart y (zh_range d))) +
    (zh_ang_coeff e (tpart x (size d)) (tpart y (zh_range d))))%Z).

Parameter zh_ang: gate -> bitvec -> bitvec -> angle.

Axiom had_zh_ang :
  forall (t1:Z) (n:Z), ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ang (had_zh_ t1 n) x y) =
   (int_to_ang (((value x) t1) * ((value y) 0%Z))%Z 1%Z)).

Axiom cont_zh_ang :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> (0%Z <= k)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang (c_rzp_zh_ k co ft n) x y) =
   (int_to_ang (((value x) ft) * ((value x) co))%Z k)).

Axiom cont_zh_ang_n :
  forall (k:Z) (co:Z) (ft:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= ft)%Z /\ (ft < n)%Z) ->
  ~ (ft = co) -> (k <= 0%Z)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang (c_rzp_zh_ k co ft n) x y) =
   (int_to_ang (-(((value x) ft) * ((value x) co))%Z)%Z (-k)%Z)).

Axiom seq_zh_ang :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size d)) ->
  ((length y) = ((zh_range d) + (zh_range e))%Z) ->
  ((zh_ang (sequence d e) x y) =
   (ang_add (zh_ang d x (hpart y (zh_range d)))
    (zh_ang e (zh_ket d x (hpart y (zh_range d))) (tpart y (zh_range d))))).

Axiom par_zh_ang :
  forall (d:gate) (e:gate), (cont_zh d) -> (cont_zh e) ->
  ((size d) = (size e)) -> forall (x:bitvec) (y:bitvec),
  ((length x) = 1%Z) -> ((length y) = 1%Z) ->
  ((zh_ang (parallel d e) x y) =
   (ang_add (zh_ang d (hpart x (size d)) (hpart y (zh_range d)))
    (zh_ang e (tpart x (size d)) (tpart y (zh_range d))))).

Axiom zh_ang_from_coeff :
  forall (g:gate), (cont_zh g) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size g)) -> ((length y) = (zh_range g)) ->
  ((zh_ang g x y) = (int_to_ang (zh_ang_coeff g x y) (size g))).

Axiom zh_ket_from_i :
  forall (g:gate), (cont_zh g) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size g)) -> ((length y) = (zh_range g)) ->
  ((zh_ket g x y) =
   (make_bv
    ((((fun (y0:gate) (y1:bitvec) (y2:bitvec) (y3:Z) =>
        (zh_ket_i y0 y1 y2 y3))
       g)
      x)
     y)
    (size g))).

Axiom get_zh_ang :
  forall (g:gate) (x:bitvec) (y:bitvec) (k:Z) (n:Z), (cont_zh g) ->
  (n = (size g)) -> ((length x) = (size g)) -> ((length y) = (zh_range g)) ->
  ((zh_ang_coeff g x y) = k) -> ((zh_ang g x y) = (int_to_ang k n)).

Axiom get_zh_ket_i :
  forall (g:gate) (x:bitvec) (y:bitvec) (i:Z), (cont_zh g) ->
  ((length x) = (size g)) -> ((length y) = (zh_range g)) ->
  ((0%Z <= i)%Z /\ (i < (size g))%Z) ->
  ((zh_ket_i g x y i) = ((value (zh_ket g x y)) i)).

Parameter c_rzp_zh: Z -> Z -> Z -> Z -> gate.

Axiom c_rzp_zh_def :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> ((c_rzp_zh k co t1 n) = (c_rzp k co t1 n)).

Axiom c_rzp_zh_spec :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> ((c_rzp_zh k co t1 n) = (c_rzp_zh_ k co t1 n)).

Axiom c_rzp_zh_spec1 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> cont_zh (c_rzp_zh k co t1 n).

Axiom c_rzp_zh_spec2 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> ((size (c_rzp_zh k co t1 n)) = n).

Axiom c_rzp_zh_spec3 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> ((zh_range (c_rzp_zh k co t1 n)) = 0%Z).

Axiom c_rzp_zh_spec4 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> ((zh_ket (c_rzp_zh k co t1 n) x y) = x).

Axiom c_rzp_zh_spec5 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((zh_ket_i (c_rzp_zh k co t1 n) x y i) = ((value x) i)).

Axiom c_rzp_zh_spec6 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> (0%Z <= k)%Z ->
  ((zh_ang (c_rzp_zh k co t1 n) x y) =
   (int_to_ang (((value x) t1) * ((value x) co))%Z k)).

Axiom c_rzp_zh_spec7 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> (k <= 0%Z)%Z ->
  ((zh_ang (c_rzp_zh k co t1 n) x y) =
   (int_to_ang (-(((value x) t1) * ((value x) co))%Z)%Z (-k)%Z)).

Axiom c_rzp_zh_spec8 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> (0%Z <= k)%Z ->
  ((zh_ang_coeff (c_rzp_zh k co t1 n) x y) =
   ((((value x) t1) * ((value x) co))%Z * (power_ 2%Z (n - k)%Z))%Z).

Axiom c_rzp_zh_spec9 :
  forall (k:Z) (co:Z) (t1:Z) (n:Z), (0%Z <= n)%Z ->
  ((0%Z <= co)%Z /\ (co < n)%Z) -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ~ (t1 = co) -> forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = 0%Z) -> (k <= 0%Z)%Z ->
  ((zh_ang_coeff (c_rzp_zh k co t1 n) x y) =
   (-((((value x) t1) * ((value x) co))%Z * (power_ 2%Z (n + k)%Z))%Z)%Z).

Parameter had_zh: Z -> Z -> gate.

Axiom had_zh_def :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ((had_zh t1 n) = (place hadamard t1 n)).

Axiom had_zh_spec :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ((had_zh t1 n) = (had_zh_ t1 n)).

Axiom had_zh_spec1 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  cont_zh (had_zh t1 n).

Axiom had_zh_spec2 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ((size (had_zh t1 n)) = n).

Axiom had_zh_spec3 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  ((zh_range (had_zh t1 n)) = 1%Z).

Axiom had_zh_spec4 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ket_i (had_zh t1 n) x y t1) = ((value y) 0%Z)).

Axiom had_zh_spec5 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) -> ~ (i = t1) ->
  ((zh_ket_i (had_zh t1 n) x y i) = ((value x) i)).

Parameter fc16: Z -> bitvec -> bitvec -> Z -> Z.

Axiom fc_def16 :
  forall (t1:Z) (x:bitvec) (y:bitvec) (i:Z),
  ((i = t1) -> (((fc16 t1 x y) i) = ((value y) 0%Z))) /\
  (~ (i = t1) -> (((fc16 t1 x y) i) = ((value x) i))).

Axiom had_zh_spec6 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ket (had_zh t1 n) x y) = (make_bv (fc16 t1 x y) n)).

Axiom had_zh_spec7 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ang_coeff (had_zh t1 n) x y) =
   ((((value x) t1) * ((value y) 0%Z))%Z * (power_ 2%Z (n - 1%Z)%Z))%Z).

Axiom had_zh_spec8 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ang (had_zh t1 n) x y) =
   (int_to_ang (((value x) t1) * ((value y) 0%Z))%Z 1%Z)).

Axiom had_zh_spec9 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (k:Z) (j:Z), (0%Z < k)%Z -> (j = (k - 1%Z)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ang (had_zh t1 n) x y) =
   (int_to_ang ((((value x) t1) * ((value y) 0%Z))%Z * (power_ 2%Z j))%Z k)).

Axiom had_zh_spec10 :
  forall (t1:Z) (n:Z), (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) ->
  forall (k:Z) (j:Z), (0%Z < k)%Z -> (j = (k - 1%Z)%Z) ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 1%Z) ->
  ((zh_ang (had_zh t1 n) x y) =
   (int_to_ang (-((((value x) t1) * ((value y) 0%Z))%Z * (power_ 2%Z j))%Z)%Z
    k)).

Parameter sequence_zh: gate -> gate -> gate.

Axiom sequence_zh_def :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> ((sequence_zh d e) = (sequence d e)).

Axiom sequence_zh_spec :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> cont_zh (sequence_zh d e).

Axiom sequence_zh_spec1 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> ((size (sequence_zh d e)) = (size d)).

Axiom sequence_zh_spec2 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) ->
  ((zh_range (sequence_zh d e)) = ((zh_range d) + (zh_range e))%Z).

Axiom sequence_zh_spec3 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (sequence_zh d e))) ->
  ((length y) = (zh_range (sequence_zh d e))) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (size d))%Z) ->
  ((zh_ket_i (sequence_zh d e) x y i) =
   (zh_ket_i e (zh_ket d x (hpart y (zh_range d))) (tpart y (zh_range d)) i)).

Axiom sequence_zh_spec4 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (sequence_zh d e))) ->
  ((length y) = (zh_range (sequence_zh d e))) ->
  ((zh_ket (sequence_zh d e) x y) =
   (zh_ket e (zh_ket d x (hpart y (zh_range d))) (tpart y (zh_range d)))).

Axiom sequence_zh_spec5 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (sequence_zh d e))) ->
  ((length y) = (zh_range (sequence_zh d e))) ->
  ((zh_ang_coeff (sequence_zh d e) x y) =
   ((zh_ang_coeff d x (hpart y (zh_range d))) +
    (zh_ang_coeff e (zh_ket d x (hpart y (zh_range d)))
     (tpart y (zh_range d))))%Z).

Axiom sequence_zh_spec6 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (sequence_zh d e))) ->
  ((length y) = (zh_range (sequence_zh d e))) ->
  ((zh_ang (sequence_zh d e) x y) =
   (ang_add (zh_ang d x (hpart y (zh_range d)))
    (zh_ang e (zh_ket d x (hpart y (zh_range d))) (tpart y (zh_range d))))).

Parameter parallel_zh: gate -> gate -> gate.

Axiom parallel_zh_def :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> ((parallel_zh d e) = (parallel d e)).

Axiom parallel_zh_spec :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> cont_zh (parallel_zh d e).

Axiom parallel_zh_spec1 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> ((size (parallel_zh d e)) = ((size d) + (size e))%Z).

Axiom parallel_zh_spec2 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) ->
  ((zh_range (parallel_zh d e)) = ((zh_range d) + (zh_range e))%Z).

Axiom parallel_zh_spec3 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (parallel_zh d e))) ->
  ((length y) = (zh_range (parallel_zh d e))) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < (size d))%Z) ->
  ((zh_ket_i (parallel_zh d e) x y i) =
   (zh_ket_i d (hpart x (size d)) (hpart y (zh_range d)) i)).

Axiom parallel_zh_spec4 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (parallel_zh d e))) ->
  ((length y) = (zh_range (parallel_zh d e))) -> forall (i:Z),
  (((size d) <= i)%Z /\ (i < ((size d) + (size e))%Z)%Z) ->
  ((zh_ket_i (parallel_zh d e) x y i) =
   (zh_ket_i e (tpart x (size d)) (tpart y (zh_range d)) (i - (size d))%Z)).

Axiom parallel_zh_spec5 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (parallel_zh d e))) ->
  ((length y) = (zh_range (parallel_zh d e))) ->
  ((zh_ket (parallel_zh d e) x y) =
   (concat (zh_ket d (hpart x (size d)) (hpart y (zh_range d)))
    (zh_ket e (tpart x (size d)) (tpart y (zh_range d))))).

Axiom parallel_zh_spec6 :
  forall (d:gate) (e:gate), ((size d) = (size e)) -> (cont_zh d) ->
  (cont_zh e) -> forall (x:bitvec) (y:bitvec),
  ((length x) = (size (parallel_zh d e))) ->
  ((length y) = (zh_range (parallel_zh d e))) ->
  ((zh_ang_coeff (parallel_zh d e) x y) =
   ((zh_ang_coeff d (hpart x (size d)) (hpart y (zh_range d))) +
    (zh_ang_coeff e (tpart x (size d)) (tpart y (zh_range d))))%Z).

Parameter cascade_cont_rz: Z -> Z -> Z -> Z -> Z -> gate.

Axiom cascade_cont_rz_def :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z -> (l = 0%Z) ->
  ((cascade_cont_rz first_k first_c t1 l n) =
   (c_rzp_zh first_k first_c t1 n)).

Axiom cascade_cont_rz_def1 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z -> ~ (l = 0%Z) ->
  ((cascade_cont_rz first_k first_c t1 l n) =
   (sequence_zh (cascade_cont_rz first_k first_c t1 (l - 1%Z)%Z n)
    (c_rzp_zh (first_k + l)%Z (first_c + l)%Z t1 n))).

Axiom cascade_cont_rz_def2 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> (l = 0%Z) ->
  ((cascade_cont_rz first_k first_c t1 l n) =
   (c_rzp_zh first_k first_c t1 n)).

Axiom cascade_cont_rz_def3 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> ~ (l = 0%Z) ->
  ((cascade_cont_rz first_k first_c t1 l n) =
   (sequence_zh (cascade_cont_rz first_k first_c t1 (l - 1%Z)%Z n)
    (c_rzp_zh (first_k + l)%Z (first_c + l)%Z t1 n))).

Axiom cascade_cont_rz_spec :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  ((size (cascade_cont_rz first_k first_c t1 l n)) = n).

Axiom cascade_cont_rz_spec1 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  cont_zh (cascade_cont_rz first_k first_c t1 l n).

Axiom cascade_cont_rz_spec2 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  ((zh_range (cascade_cont_rz first_k first_c t1 l n)) = 0%Z).

Axiom cascade_cont_rz_spec3 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz first_k first_c t1 l n) x y) =
   (ind_isum
    (fun (k:Z) =>
     ((((value x) t1) * ((value x) (first_c + k)%Z))%Z *
      (power_ 2%Z (n - (k + first_k)%Z)%Z))%Z)
    0%Z (l + 1%Z)%Z)).

Axiom cascade_cont_rz_spec4 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz first_k first_c t1 l n) x y) =
   (ind_isum
    (fun (k:Z) =>
     ((((value x) t1) *
       ((value x) (first_c + (((k - n)%Z + l)%Z + 1%Z)%Z)%Z))%Z
      * (power_ 2%Z (((((n + n)%Z - k)%Z - l)%Z - 1%Z)%Z - first_k)%Z))%Z)
    (n - (l + 1%Z)%Z)%Z n)).

Axiom cascade_cont_rz_spec5 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ket (cascade_cont_rz first_k first_c t1 l n) x y) = x).

Axiom cascade_cont_rz_spec6 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((zh_ket_i (cascade_cont_rz first_k first_c t1 l n) x y i) = ((value x) i)).

Axiom cascade_cont_rz_spec7 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z ->
  ((size (cascade_cont_rz first_k first_c t1 l n)) = n).

Axiom cascade_cont_rz_spec8 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z ->
  cont_zh (cascade_cont_rz first_k first_c t1 l n).

Axiom cascade_cont_rz_spec9 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z ->
  ((zh_range (cascade_cont_rz first_k first_c t1 l n)) = 0%Z).

Axiom cascade_cont_rz_spec10 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz first_k first_c t1 l n) x y) =
   (ind_isum
    (fun (k:Z) =>
     ((((value x) t1) * ((value x) (first_c + k)%Z))%Z *
      (power_ 2%Z (n - (k + first_k)%Z)%Z))%Z)
    0%Z (l + 1%Z)%Z)).

Axiom cascade_cont_rz_spec11 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz first_k first_c t1 l n) x y) =
   (ind_isum
    (fun (k:Z) =>
     ((((value x) t1) *
       ((value x) (first_c + (((k - n)%Z + l)%Z + 1%Z)%Z)%Z))%Z
      * (power_ 2%Z (((((n + n)%Z - k)%Z - l)%Z - 1%Z)%Z - first_k)%Z))%Z)
    (n - (l + 1%Z)%Z)%Z n)).

Axiom cascade_cont_rz_spec12 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ket (cascade_cont_rz first_k first_c t1 l n) x y) = x).

Axiom cascade_cont_rz_spec13 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((zh_ket_i (cascade_cont_rz first_k first_c t1 l n) x y i) = ((value x) i)).

Parameter cascade_cont_rz_neg: Z -> Z -> Z -> Z -> Z -> gate.

Axiom cascade_cont_rz_neg_def :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z -> (l = 0%Z) ->
  ((cascade_cont_rz_neg first_k first_c t1 l n) =
   (c_rzp_zh (-first_k)%Z first_c t1 n)).

Axiom cascade_cont_rz_neg_def1 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z -> ~ (l = 0%Z) ->
  ((cascade_cont_rz_neg first_k first_c t1 l n) =
   (sequence_zh (cascade_cont_rz_neg first_k first_c t1 (l - 1%Z)%Z n)
    (c_rzp_zh (-(first_k + l)%Z)%Z (first_c + l)%Z t1 n))).

Axiom cascade_cont_rz_neg_def2 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> (l = 0%Z) ->
  ((cascade_cont_rz_neg first_k first_c t1 l n) =
   (c_rzp_zh (-first_k)%Z first_c t1 n)).

Axiom cascade_cont_rz_neg_def3 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> ~ (l = 0%Z) ->
  ((cascade_cont_rz_neg first_k first_c t1 l n) =
   (sequence_zh (cascade_cont_rz_neg first_k first_c t1 (l - 1%Z)%Z n)
    (c_rzp_zh (-(first_k + l)%Z)%Z (first_c + l)%Z t1 n))).

Axiom cascade_cont_rz_neg_spec :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  ((size (cascade_cont_rz_neg first_k first_c t1 l n)) = n).

Axiom cascade_cont_rz_neg_spec1 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  cont_zh (cascade_cont_rz_neg first_k first_c t1 l n).

Axiom cascade_cont_rz_neg_spec2 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  ((zh_range (cascade_cont_rz_neg first_k first_c t1 l n)) = 0%Z).

Axiom cascade_cont_rz_neg_spec3 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz_neg first_k first_c t1 l n) x y) =
   (-(ind_isum
      (fun (k:Z) =>
       ((((value x) t1) * ((value x) (first_c + k)%Z))%Z *
        (power_ 2%Z (n - (k + first_k)%Z)%Z))%Z)
      0%Z (l + 1%Z)%Z))%Z).

Axiom cascade_cont_rz_neg_spec4 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz_neg first_k first_c t1 l n) x y) =
   (-(ind_isum
      (fun (k:Z) =>
       ((((value x) t1) *
         ((value x) (first_c + (((k - n)%Z + l)%Z + 1%Z)%Z)%Z))%Z
        * (power_ 2%Z (((((n + n)%Z - k)%Z - l)%Z - 1%Z)%Z - first_k)%Z))%Z)
      (n - (l + 1%Z)%Z)%Z n))%Z).

Axiom cascade_cont_rz_neg_spec5 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang (cascade_cont_rz_neg first_k first_c t1 l n) x y) =
   (int_to_ang
    (-(ind_isum
       (fun (k:Z) =>
        ((((value x) t1) *
          ((value x) (first_c + (((k - n)%Z + l)%Z + 1%Z)%Z)%Z))%Z
         * (power_ 2%Z (((((n + n)%Z - k)%Z - l)%Z - 1%Z)%Z - first_k)%Z))%Z)
       (n - (l + 1%Z)%Z)%Z n))%Z
    n)).

Axiom cascade_cont_rz_neg_spec6 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ket (cascade_cont_rz_neg first_k first_c t1 l n) x y) = x).

Axiom cascade_cont_rz_neg_spec7 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> ~ (t1 <= (first_c + l)%Z)%Z ->
  forall (x:bitvec) (y:bitvec), ((length x) = n) -> ((length y) = 0%Z) ->
  forall (i:Z), ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((zh_ket_i (cascade_cont_rz_neg first_k first_c t1 l n) x y i) =
   ((value x) i)).

Axiom cascade_cont_rz_neg_spec8 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z ->
  ((size (cascade_cont_rz_neg first_k first_c t1 l n)) = n).

Axiom cascade_cont_rz_neg_spec9 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z ->
  cont_zh (cascade_cont_rz_neg first_k first_c t1 l n).

Axiom cascade_cont_rz_neg_spec10 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z ->
  ((zh_range (cascade_cont_rz_neg first_k first_c t1 l n)) = 0%Z).

Axiom cascade_cont_rz_neg_spec11 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz_neg first_k first_c t1 l n) x y) =
   (-(ind_isum
      (fun (k:Z) =>
       ((((value x) t1) * ((value x) (first_c + k)%Z))%Z *
        (power_ 2%Z (n - (k + first_k)%Z)%Z))%Z)
      0%Z (l + 1%Z)%Z))%Z).

Axiom cascade_cont_rz_neg_spec12 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang_coeff (cascade_cont_rz_neg first_k first_c t1 l n) x y) =
   (-(ind_isum
      (fun (k:Z) =>
       ((((value x) t1) *
         ((value x) (first_c + (((k - n)%Z + l)%Z + 1%Z)%Z)%Z))%Z
        * (power_ 2%Z (((((n + n)%Z - k)%Z - l)%Z - 1%Z)%Z - first_k)%Z))%Z)
      (n - (l + 1%Z)%Z)%Z n))%Z).

Axiom cascade_cont_rz_neg_spec13 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ang (cascade_cont_rz_neg first_k first_c t1 l n) x y) =
   (int_to_ang
    (-(ind_isum
       (fun (k:Z) =>
        ((((value x) t1) *
          ((value x) (first_c + (((k - n)%Z + l)%Z + 1%Z)%Z)%Z))%Z
         * (power_ 2%Z (((((n + n)%Z - k)%Z - l)%Z - 1%Z)%Z - first_k)%Z))%Z)
       (n - (l + 1%Z)%Z)%Z n))%Z
    n)).

Axiom cascade_cont_rz_neg_spec14 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) ->
  ((zh_ket (cascade_cont_rz_neg first_k first_c t1 l n) x y) = x).

Axiom cascade_cont_rz_neg_spec15 :
  forall (first_k:Z) (first_c:Z) (t1:Z) (l:Z) (n:Z),
  ((0%Z <= l)%Z /\ (l < n)%Z) -> ((0%Z <= first_c)%Z /\ (first_c < n)%Z) ->
  ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> ((first_c + l)%Z < n)%Z ->
  (0%Z <= first_k)%Z -> (t1 < first_c)%Z -> forall (x:bitvec) (y:bitvec),
  ((length x) = n) -> ((length y) = 0%Z) -> forall (i:Z),
  ((0%Z <= i)%Z /\ (i < n)%Z) ->
  ((zh_ket_i (cascade_cont_rz_neg first_k first_c t1 l n) x y i) =
   ((value x) i)).

Axiom set_had_zh_ang :
  forall (a:Z) (b:Z) (c:Z) (t1:Z) (n:Z) (x:bitvec) (y:bitvec),
  (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> (a = ((value x) t1)) ->
  (b = ((value y) 0%Z)) -> (c = (n - 1%Z)%Z) -> ((length x) = n) ->
  ((length y) = 1%Z) ->
  ((zh_ang (had_zh t1 n) x y) =
   (int_to_ang (-((a * b)%Z * (power_ 2%Z c))%Z)%Z n)).

Axiom set_had_zh_ang1 :
  forall (a:Z) (b:Z) (c:Z) (t1:Z) (n:Z) (x:bitvec) (y:bitvec),
  (0%Z <= n)%Z -> ((0%Z <= t1)%Z /\ (t1 < n)%Z) -> (a = ((value x) t1)) ->
  (b = ((value y) 0%Z)) -> (c = (n - 1%Z)%Z) -> ((length x) = n) ->
  ((length y) = 1%Z) ->
  ((zh_ang (had_zh t1 n) x y) =
   (int_to_ang ((a * b)%Z * (power_ 2%Z c))%Z n)).

Parameter g: gate.

Parameter t1: Z.

Parameter n: Z.

Axiom H : (0%Z <= n)%Z.

Axiom H1 : (0%Z <= t1)%Z.

Axiom H2 : (t1 < n)%Z.

Axiom H3 : cont_zh g.

Axiom H4 : ((size g) = n).

Axiom H5 : cont_zh (sequence_zh (had_zh t1 n) g).

Axiom H6 :
  ((zh_range (sequence_zh (had_zh t1 n) g)) = ((zh_range g) + 1%Z)%Z).

Parameter fc17: bitvec -> bitvec -> Z -> Z.

Axiom fc_def17 :
  forall (x:bitvec) (y:bitvec) (i:Z),
  ((i = t1) -> (((fc17 x y) i) = ((value y) 0%Z))) /\
  (~ (i = t1) -> (((fc17 x y) i) = ((value x) i))).

Axiom H7 :
  forall (x:bitvec) (y:bitvec), ((length x) = n) ->
  ((length y) = ((zh_range g) + 1%Z)%Z) ->
  ((zh_ang (sequence_zh (had_zh t1 n) g) x y) =
   (ang_add (int_to_ang (((value x) t1) * ((value y) 0%Z))%Z 1%Z)
    (zh_ang g (make_bv (fc17 x y) n) (tpart y 1%Z)))).

Parameter x: bitvec.

Parameter y: bitvec.

Axiom H8 : ((length x) = n).

Axiom H9 : ((length y) = ((zh_range g) + 1%Z)%Z).

Parameter i: Z.

Axiom H10 : (0%Z <= i)%Z.

Axiom H11 : (i < n)%Z.

(* Why3 goal *)
Theorem VC_had_seq_spec_zh :
  ((i = t1) ->
   ((zh_ket_i g (zh_ket (had_zh t1 n) x (hpart y (zh_range (had_zh t1 n))))
     (tpart y (zh_range (had_zh t1 n))) i)
    = ((value y) 0%Z))) /\
  (~ (i = t1) ->
   ((zh_ket_i g (zh_ket (had_zh t1 n) x (hpart y (zh_range (had_zh t1 n))))
     (tpart y (zh_range (had_zh t1 n))) i)
    = (zh_ket_i g x y i))).
Proof.


Qed.

