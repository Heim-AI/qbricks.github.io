O
%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 real arithmetic
div_by_zero: (REAL) -> REAL;
%%% this is a prelude for CVC3 integer arithmetic
OOBOBuni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witOness_sort
  ASSEORT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

real: ty;

t : TYPBE;
O
t1: ty;

tzero: t;

tone: t;

pOOrefix_mndt: (t) -> t;

infix_pldt: (t, t) -> t;

infix_asdt: (t, t) -> t;

% Unit_def_r
  AOBOSSERT (FORALL (x10 : t): (infix_pldt(x10, tzero) = x10));

% NonTrivialRing
  ASSEORT (NOT (tzero = tone));OOOO

infix_mndt: (t, t) -> t;
OBOOBOO
O$O


OOBOOOOBOBOO% infix -._def
  ASSERT
  (FORALL (xBO10 : t, y10 : t): (infix_mndt(x10, y10) = infix_pldt(x10, 
  prefix_mndt(Oy10))));

% opposite
  ASSERT (FORALL (a : t): (infix_mndt(a, a) = tzero));

im: t;

r_to_t: (REAL) -> t;

% r_to_t_zero
  ASSERT (r_to_t(0) = tzero);
O
%OBB r_to_t_inv
  ASSERT (FORALL (i : REAL): (r_to_t((- i)) = prefix_mndt(r_to_t(i))));

real_part: (t) -> REAL;

im_pOB
art: (t) -> REAL;

% Real_part_add
  ASSERT
  (FORALL (i : t, j : t): (real_part(infix_pldt(i, j)) = (real_part(i) + 
  real_part(j))));

% Complex_decomp
  ASSERT
  (FORALL (i : t): (i = infix_pldt(r_to_t(real_part(i)), infix_asdt(im, 
  r_to_t(im_part(i))))));

real_: (t) -> BOOLEAN;

% real__def
  ASSERT (FORALL (x10 : t): ((real_(x10)) <=> (im_part(x10) = 0)));

% real_r_to_t
  ASSERT (FORALL (x10 : REAL): (real_(r_to_t(x10))));

infix_lseqdt: (t, t) -> BOOLEAN;

infix_lsdt: (t, t) -> BOOLEAN;

infix_gteqdt: (t, t) -> BOOLEAN;

infix_gtdt: (t, t) -> BOOLEAN;

t_real_part: (t) -> t;

% t_real_part_def
  ASSERT (FORALL (x10 : t): (t_real_part(x10) = r_to_t(real_part(x10))));

t_im_part: (t) -> t;

% t_im_part_def
  ASSERT (FORALL (x10 : t): (t_im_part(x10) = r_to_t(im_part(x10))));

set: (ty) -> ty;

abs: (INT) -> INT;

% abs_def
  ASSERT
  (FORALL (x10 : INT):
  (IF (0 <= x10) THEN (abs(x10) = x10) ELSE (abs(x10) = (- x10)) ENDIF));

div: (INT, INT) -> INT;

infix_mngt: (ty, ty) -> ty;

infix_at: (ty, ty, uni, uni) -> uni;

% infix @_sort
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (x10 : uni, x11 : uni): (sort(b, infix_at(b, a, x10, x11)))));

map: (ty, ty, uni, uni) -> uni;

% map_sort
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (x10 : uni, x11 : uni): (sort(set(b), map(b, a, x10, x11)))));

op_neutral_left: (ty, uni, uni) -> BOOLEAN;

% op_neutral_left_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni, neutral1 : uni):
  ((op_neutral_left(im1, op1, neutral1))
  <=> (FORALL (e5 : uni):
      ((sort(im1, e5)) => (infix_at(im1, im1, infix_at(infix_mngt(im1, im1),
      im1, op1, neutral1), e5) = e5))))));

op_neutral_right: (ty, uni, uni) -> BOOLEAN;

% op_neutral_right_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni, neutral1 : uni):
  ((op_neutral_right(im1, op1, neutral1))
  <=> (FORALL (e5 : uni):
      ((sort(im1, e5)) => (infix_at(im1, im1, infix_at(infix_mngt(im1, im1),
      im1, op1, e5), neutral1) = e5))))));

op_assoc: (ty, uni) -> BOOLEAN;

% op_assoc_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni):
  (((op_assoc(im1, op1))
   => (FORALL (a : uni, b : uni, c : uni): (infix_at(im1, im1, infix_at(
      infix_mngt(im1, im1), im1, op1, infix_at(im1, im1, infix_at(
      infix_mngt(im1, im1), im1, op1, a), b)), c) = infix_at(im1, im1, 
      infix_at(infix_mngt(im1, im1), im1, op1, a), infix_at(im1, im1, 
      infix_at(infix_mngt(im1, im1), im1, op1, b), c)))))
  AND ((FORALL (a : uni, b : uni, c : uni):
       ((sort(im1, a))
       => ((sort(im1, b))
          => ((sort(im1, c)) => (infix_at(im1, im1, infix_at(infix_mngt(im1,
             im1), im1, op1, infix_at(im1, im1, infix_at(infix_mngt(im1,
             im1), im1, op1, a), b)), c) = infix_at(im1, im1, infix_at(
             infix_mngt(im1, im1), im1, op1, a), infix_at(im1, im1, infix_at(
             infix_mngt(im1, im1), im1, op1, b), c)))))))
      => (op_assoc(im1, op1))))));

neutral: (ty, uni, uni) -> BOOLEAN;

% neutral_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni, neut : uni):
  ((neutral(im1, op1, neut))
  <=> ((op_neutral_left(im1, op1, neut))
      AND ((op_neutral_right(im1, op1, neut)) AND (op_assoc(im1, op1)))))));

int_iterate: (ty, uni, uni, INT, INT) -> uni;

% int_iterate_sort
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (x10 : uni, x11 : uni, x12 : INT, x13 : INT): (sort(im1, 
  int_iterate(im1, x10, x11, x12, x13)))));

set1: (ty, ty, uni, uni, uni) -> uni;

% set_sort
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (x10 : uni, x11 : uni, x12 : uni): (sort(infix_mngt(a, b), set1(b,
  a, x10, x11, x12)))));

matrix: (ty) -> ty;

kronecker_neutral1: uni;

% kronecker_neutral_sort
  ASSERT (sort(matrix(t1), kronecker_neutral1));

cpower: (t, INT) -> t;

exp: (t) -> t;

sin: (t) -> t;

cos: (t) -> t;

% cos_zero
  ASSERT (cos(tzero) = tone);

% sin_zero
  ASSERT (sin(tzero) = tzero);

% euler_real
  ASSERT
  (FORALL (x10 : t):
  ((real_(x10)) => (cos(x10) = t_real_part(exp(infix_asdt(im, x10))))));

% euler_im
  ASSERT
  (FORALL (x10 : t):
  ((real_(x10)) => (sin(x10) = t_im_part(exp(infix_asdt(im, x10))))));

angle_c : TYPE;

angle_c1: ty;

ang_exp_c: (angle_c) -> t;

int_to_ang_c: (INT, INT) -> angle_c;

ang_add_c: (angle_c, angle_c) -> angle_c;

ang_inv_c: (angle_c) -> angle_c;

div_two: (angle_c) -> angle_c;

% ang_exp_c_zero
  ASSERT (ang_exp_c(int_to_ang_c(0, 0)) = tone);

ang_mult_int_c: (angle_c, INT) -> angle_c;

phase_inv_pre: (INT, angle_c) -> angle_c;

phase_ang_inv_c: (INT, angle_c) -> angle_c;

% phase_ang_inv_c_def
  ASSERT
  (FORALL (i : INT, d5 : angle_c):
  (IF (0 <= i) THEN (phase_ang_inv_c(i, d5) = phase_inv_pre(i, d5)) ELSE (
  phase_ang_inv_c(i, d5) = phase_inv_pre((- i), d5)) ENDIF));

k_int_to_ang_c: (INT) -> angle_c;

% k_int_to_ang_c_def
  ASSERT (FORALL (i : INT): (k_int_to_ang_c(i) = int_to_ang_c(1, abs(i))));

real_to_ang_c: (t) -> angle_c;

ang_sum_c: ((ARRAY INT OF angle_c), INT, INT) -> angle_c;

ang_add_c_closure: (ARRAY angle_c OF (ARRAY angle_c OF angle_c));

t2tb49: ((ARRAY angle_c OF angle_c)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x10 : (ARRAY angle_c OF angle_c)): (sort(infix_mngt(angle_c1,
  angle_c1), t2tb49(x10))));

tb2t49: (uni) -> (ARRAY angle_c OF angle_c);

% BridgeL
  ASSERT
  (FORALL (i : (ARRAY angle_c OF angle_c)):PATTERN (t2tb49(i)):  (tb2t49(
  t2tb49(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb49(tb2t49(j))): 
  ((sort(infix_mngt(angle_c1, angle_c1), j)) => (t2tb49(tb2t49(j)) = j)));

t2tb50: (angle_c) -> uni;

% t2tb_sort
  ASSERT (FORALL (x10 : angle_c): (sort(angle_c1, t2tb50(x10))));

tb2t50: (uni) -> angle_c;

% BridgeL
  ASSERT
  (FORALL (i : angle_c):PATTERN (t2tb50(i)):  (tb2t50(t2tb50(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb50(tb2t50(j))): 
  ((sort(angle_c1, j)) => (t2tb50(tb2t50(j)) = j)));

t2tb51: ((ARRAY angle_c OF (ARRAY angle_c OF angle_c))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x10 : (ARRAY angle_c OF (ARRAY angle_c OF angle_c))): (sort(
  infix_mngt(angle_c1, infix_mngt(angle_c1, angle_c1)), t2tb51(x10))));

tb2t51: (uni) -> (ARRAY angle_c OF (ARRAY angle_c OF angle_c));

% BridgeL
  ASSERT
  (FORALL (i : (ARRAY angle_c OF (ARRAY angle_c OF angle_c))):PATTERN (
  t2tb51(i)):  (tb2t51(t2tb51(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb51(tb2t51(j))): 
  ((sort(infix_mngt(angle_c1, infix_mngt(angle_c1, angle_c1)), j)) => (
  t2tb51(tb2t51(j)) = j)));

% ang_add_c_closure_def
  ASSERT
  (FORALL (y10 : angle_c, y11 : angle_c): (tb2t50(infix_at(angle_c1,
  angle_c1, infix_at(infix_mngt(angle_c1, angle_c1), angle_c1, 
  t2tb51(ang_add_c_closure), t2tb50(y10)), t2tb50(y11))) = ang_add_c(y10,
  y11)));

t2tb52: ((ARRAY INT OF angle_c)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x10 : (ARRAY INT OF angle_c)): (sort(infix_mngt(int, angle_c1), 
  t2tb52(x10))));

tb2t52: (uni) -> (ARRAY INT OF angle_c);

% BridgeL
  ASSERT
  (FORALL (i : (ARRAY INT OF angle_c)):PATTERN (t2tb52(i)):  (tb2t52(
  t2tb52(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb52(tb2t52(j))): 
  ((sort(infix_mngt(int, angle_c1), j)) => (t2tb52(tb2t52(j)) = j)));

% ang_sum_c_def
  ASSERT
  (FORALL (f : (ARRAY INT OF angle_c), i : INT, j : INT):
  (IF (j <= i) THEN (ang_sum_c(f, i, j) = int_to_ang_c(0, 0)) ELSE (
  ang_sum_c(f, i, j) = tb2t50(int_iterate(angle_c1, 
  t2tb51(ang_add_c_closure), t2tb52(f), i, j))) ENDIF));

% Real_To_Ang_up
  ASSERT
  (FORALL (phi : t):
  ((real_(phi)) => (real_to_ang_c(phi) = real_to_ang_c(infix_pldt(tone,
  phi)))));

% Real_zero_n
  ASSERT (real_to_ang_c(tzero) = int_to_ang_c(0, 0));

% Int_To_Ang_inv
  ASSERT
  (FORALL (k4 : INT, n12 : INT):
  ((0 <= n12) => (ang_inv_c(int_to_ang_c(k4, n12)) = int_to_ang_c((- k4),
  n12))));

% ang_minus_one_from_real
  ASSERT (int_to_ang_c(1, 1) = real_to_ang_c(prefix_mndt(tone)));

% omega_d11
  ASSERT (ang_exp_c(int_to_ang_c(1, 1)) = prefix_mndt(tone));

QUERY
% h4
  FALSE;
