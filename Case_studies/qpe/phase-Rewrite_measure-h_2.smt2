(set-logic AUFNIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2: real arithmetic
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun real () ty)

(declare-sort t 0)

(declare-fun t1 () ty)

(declare-fun tzero () t)

(declare-fun tone () t)

(declare-fun prefix_mndt (t) t)

(declare-fun infix_pldt (t t) t)

(declare-fun infix_asdt (t t) t)

;; Mul_distr_l
  (assert
  (forall ((x t) (y t) (z t))
  (= (infix_asdt x (infix_pldt y z)) (infix_pldt (infix_asdt x y)
                                     (infix_asdt x z)))))

;; Comm
  (assert (forall ((x t) (y t)) (= (infix_asdt x y) (infix_asdt y x))))

;; minus_tone
  (assert
  (forall ((a t)) (= (prefix_mndt a) (infix_asdt (prefix_mndt tone) a))))

(declare-fun r_to_t (Real) t)

;; r_to_t_zero
  (assert (= (r_to_t 0.0) tzero))

;; r_to_t_one
  (assert (= (r_to_t 1.0) tone))

(declare-fun real_part (t) Real)

(declare-fun im_part (t) Real)

;; Real_part_opposite
  (assert (forall ((i t)) (= (real_part (prefix_mndt i)) (- (real_part i)))))

(declare-fun real_ (t) Bool)

;; real__def
  (assert (forall ((x t)) (= (real_ x) (= (im_part x) 0.0))))

(declare-fun infix_lseqdt (t t) Bool)

;; Inf_eq_def
  (assert
  (forall ((x t) (y t))
  (= (infix_lseqdt x y)
  (or (and (real_ x) (and (real_ y) (<= (real_part x) (real_part y))))
  (= x y)))))

;; r_to_t_inf
  (assert
  (forall ((i Real) (j Real))
  (= (infix_lseqdt (r_to_t i) (r_to_t j)) (<= i j))))

;; compat_mult_sup_eq_right
  (assert
  (forall ((a t) (b t) (c t))
  (=> (infix_lseqdt b c) (infix_lseqdt (infix_asdt a b) (infix_asdt a c)))))

(declare-fun set (ty) ty)

(declare-fun infix_mngt (ty ty) ty)

(assert
;; h
  (not false))
(check-sat)
