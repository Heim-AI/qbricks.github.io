<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="shor_circuit.mlw"/>
<theory name="Shor" proved="true">
 <goal name="VC create_superposition" expl="VC for create_superposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC create_superposition.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.09" steps="354"/></proof>
  </goal>
  <goal name="VC create_superposition.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.46" steps="354"/></proof>
  </goal>
  <goal name="VC create_superposition.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="358"/></proof>
  </goal>
  <goal name="VC create_superposition.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="366"/></proof>
  </goal>
  <goal name="VC create_superposition.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="374"/></proof>
  </goal>
  <goal name="VC create_superposition.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="382"/></proof>
  </goal>
  <goal name="VC create_superposition.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="392"/></proof>
  </goal>
  <goal name="VC create_superposition.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.62"/></proof>
  </goal>
  <goal name="VC create_superposition.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28" steps="395"/></proof>
  </goal>
  <goal name="VC create_superposition.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.78"/></proof>
  </goal>
  <goal name="VC create_superposition.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32" steps="394"/></proof>
  </goal>
  <goal name="VC create_superposition.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="394"/></proof>
  </goal>
  <goal name="VC create_superposition.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.16" steps="394"/></proof>
  </goal>
  <goal name="VC create_superposition.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="402"/></proof>
  </goal>
  <goal name="VC create_superposition.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.05" steps="402"/></proof>
  </goal>
  <goal name="VC create_superposition.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="403"/></proof>
  </goal>
  <goal name="VC create_superposition.16" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27" steps="404"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_expo" expl="VC for modular_expo" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC modular_expo.0" expl="VC for modular_expo" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC modular_expo.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.03" steps="368"/></proof>
   </goal>
   <goal name="VC modular_expo.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.97" steps="370"/></proof>
   </goal>
   <goal name="VC modular_expo.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.2.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="370"/></proof>
    </goal>
    <goal name="VC modular_expo.0.2.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.97" steps="370"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.3" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.3.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="2.03"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.07" steps="378"/></proof>
   </goal>
   <goal name="VC modular_expo.0.5" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.5.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="378"/></proof>
    </goal>
    <goal name="VC modular_expo.0.5.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.83" steps="378"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.6" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="2.56"/></proof>
   </goal>
   <goal name="VC modular_expo.0.7" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.7.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.10" steps="378"/></proof>
    </goal>
    <goal name="VC modular_expo.0.7.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.77" steps="378"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.8" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.8.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.03" steps="379"/></proof>
    </goal>
    <goal name="VC modular_expo.0.8.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.15" steps="379"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.9" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.9.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.09" steps="381"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.10" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.21" steps="388"/></proof>
   </goal>
   <goal name="VC modular_expo.0.11" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="((cont_size * multiplier_gate_bound n) * 1)" arg2="((cont_size * multiplier_gate_bound n) )">
    <goal name="VC modular_expo.0.11.0" expl="precondition" proved="true">
    <proof prover="5"><result status="valid" time="0.95"/></proof>
    </goal>
    <goal name="VC modular_expo.0.11.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.04" steps="389"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.12" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.00" steps="390"/></proof>
   </goal>
   <goal name="VC modular_expo.0.13" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.13.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.96" steps="390"/></proof>
    </goal>
    <goal name="VC modular_expo.0.13.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.14" steps="390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.14" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.14.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="2.95"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.15" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.15.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.18" steps="390"/></proof>
    </goal>
    <goal name="VC modular_expo.0.15.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.03" steps="390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.16" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.16.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.34" steps="391"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.17" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.47" steps="390"/></proof>
   </goal>
   <goal name="VC modular_expo.0.18" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.18.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.02" steps="390"/></proof>
    </goal>
    <goal name="VC modular_expo.0.18.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.06" steps="390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.19" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.19.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="2.97"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.20" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.20.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.98" steps="390"/></proof>
    </goal>
    <goal name="VC modular_expo.0.20.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.18" steps="390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.21" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.21.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.94" steps="391"/></proof>
    </goal>
    <goal name="VC modular_expo.0.21.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="391"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.22" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.22.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.75" steps="393"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.23" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.23.0" expl="variant decrease" proved="true">
    <proof prover="0"><result status="valid" time="0.79" steps="368"/></proof>
    </goal>
    <goal name="VC modular_expo.0.23.1" expl="variant decrease" proved="true">
    <proof prover="0"><result status="valid" time="1.08" steps="368"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.24" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.24.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.89" steps="368"/></proof>
    </goal>
    <goal name="VC modular_expo.0.24.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.12" steps="368"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.25" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.89" steps="374"/></proof>
   </goal>
   <goal name="VC modular_expo.0.26" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.12" steps="376"/></proof>
   </goal>
   <goal name="VC modular_expo.0.27" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.37" steps="376"/></proof>
   </goal>
   <goal name="VC modular_expo.0.28" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.28.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.30" steps="376"/></proof>
    </goal>
    <goal name="VC modular_expo.0.28.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.20" steps="376"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.29" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.29.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="1.92"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.30" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.30.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.78" steps="382"/></proof>
    </goal>
    <goal name="VC modular_expo.0.30.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.89" steps="382"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.31" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.31.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.20" steps="384"/></proof>
    </goal>
    <goal name="VC modular_expo.0.31.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.33" steps="384"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.32" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.32.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.16" steps="386"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.33" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.25" steps="394"/></proof>
   </goal>
   <goal name="VC modular_expo.0.34" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.34.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.26" steps="394"/></proof>
    </goal>
    <goal name="VC modular_expo.0.34.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.71" steps="394"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.35" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="3.34"/></proof>
   </goal>
   <goal name="VC modular_expo.0.36" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.36.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.41" steps="394"/></proof>
    </goal>
    <goal name="VC modular_expo.0.36.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.12" steps="394"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.37" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.37.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.04" steps="396"/></proof>
    </goal>
    <goal name="VC modular_expo.0.37.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.18" steps="396"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.38" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.38.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.41" steps="398"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.39" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.56" steps="394"/></proof>
   </goal>
   <goal name="VC modular_expo.0.40" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.57" steps="405"/></proof>
   </goal>
   <goal name="VC modular_expo.0.41" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="leq_trans_add">
    <goal name="VC modular_expo.0.41.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.54" steps="406"/></proof>
    </goal>
    <goal name="VC modular_expo.0.41.1" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="leq_trans" arg2="(size
  (cont
   (modular_multiplier (power_ a (power_ 2 (((2 * n) - k) - 1))) bound n) k
   (2 * n) (3 * n))),(cont_size * size (modular_multiplier (power_ a (power_ 2 (((2 * n) - k) - 1))) bound n) ),(cont_size * multiplier_gate_bound n )
">
     <goal name="VC modular_expo.0.41.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="VC modular_expo.0.41.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.60" steps="406"/></proof>
      </goal>
      <goal name="VC modular_expo.0.41.1.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="leq_trans_mult_right">
       <goal name="VC modular_expo.0.41.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.09" steps="406"/></proof>
       </goal>
       <goal name="VC modular_expo.0.41.1.0.1.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="3.80"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.42" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.64" steps="407"/></proof>
   </goal>
   <goal name="VC modular_expo.0.43" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.43.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.44" steps="407"/></proof>
    </goal>
    <goal name="VC modular_expo.0.43.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.48" steps="407"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.44" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.44.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="3.11"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.45" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.45.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.21" steps="407"/></proof>
    </goal>
    <goal name="VC modular_expo.0.45.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.84" steps="407"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.46" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.46.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.12" steps="407"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.47" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.81" steps="407"/></proof>
   </goal>
   <goal name="VC modular_expo.0.48" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.48.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.15" steps="407"/></proof>
    </goal>
    <goal name="VC modular_expo.0.48.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.13" steps="407"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.49" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.49.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="2.84"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.50" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.50.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.15" steps="407"/></proof>
    </goal>
    <goal name="VC modular_expo.0.50.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.11" steps="407"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.51" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.51.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.67" steps="409"/></proof>
    </goal>
    <goal name="VC modular_expo.0.51.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="1.03" steps="409"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.52" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.52.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.86" steps="411"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.53" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.16" steps="407"/></proof>
   </goal>
   <goal name="VC modular_expo.0.54" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.54.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="396"/></proof>
    </goal>
    <goal name="VC modular_expo.0.54.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.36" steps="414"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.55" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.55.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.05" steps="396"/></proof>
    </goal>
    <goal name="VC modular_expo.0.55.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.72"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.56" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.56.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.75" steps="397"/></proof>
    </goal>
    <goal name="VC modular_expo.0.56.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.81" steps="417"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.57" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC modular_expo.0.57.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H10">
     <goal name="VC modular_expo.0.57.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_isum_one">
      <goal name="VC modular_expo.0.57.0.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="( (getbv x @ 0) = 0)">
       <goal name="VC modular_expo.0.57.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H17">
        <goal name="VC modular_expo.0.57.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC modular_expo.0.57.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <proof prover="3"><result status="valid" time="3.11"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC modular_expo.0.57.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="1.80"/></proof>
        </goal>
        <goal name="VC modular_expo.0.57.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.09" steps="402"/></proof>
        </goal>
        <goal name="VC modular_expo.0.57.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.74" steps="402"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC modular_expo.0.57.0.0.0.1" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H16">
        <goal name="VC modular_expo.0.57.0.0.0.1.0" expl="false case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC modular_expo.0.57.0.0.0.1.0.0" expl="false case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((getbv x @ 0) * power_ 2 ((2 * n) - 1))" arg2="(( power_ 2 ((2 * n) - 1))*1)">
          <goal name="VC modular_expo.0.57.0.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="VC modular_expo.0.57.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.82" steps="402"/></proof>
           </goal>
           <goal name="VC modular_expo.0.57.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="sem_to_path_sem">
            <goal name="VC modular_expo.0.57.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="1.95"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC modular_expo.0.57.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="1"><result status="valid" time="2.64"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC modular_expo.0.57.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="1.86"/></proof>
        </goal>
        <goal name="VC modular_expo.0.57.0.0.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.97" steps="402"/></proof>
        </goal>
        <goal name="VC modular_expo.0.57.0.0.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="2.58"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC modular_expo.0.57.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.99" steps="400"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC modular_expo.0.57.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H11">
     <goal name="VC modular_expo.0.57.1.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="path_sem_comp" arg2="o,(cont
    (modular_multiplier (power_ a (power_ 2 (((2 * n) - k) - 1))) bound n) k
    (2 * n) (3 * n)),(kronecker (bv_to_ket x) (ket n 1)),(kronecker (bv_to_ket x)
    (ket n
     (mod
      (power_ a
       (ind_isum
        (fun (l:int) -&gt; (getbv x @ l) * power_ 2 (((2 * n) - l) - 1)) 0
        k))
      bound))),(kronecker (bv_to_ket x)
    (ket n
     (mod
      (power_ a
       (ind_isum
        (fun (l:int) -&gt; (getbv x @ l) * power_ 2 (((2 * n) - l) - 1)) 0
        (k + 1)))
      bound)))">
      <goal name="VC modular_expo.0.57.1.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC modular_expo.0.57.1.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(width o)" arg2="(2*n+n)">
        <goal name="VC modular_expo.0.57.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="VC modular_expo.0.57.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.91" steps="420"/></proof>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.70" steps="420"/></proof>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.38"/></proof>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.32"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC modular_expo.0.57.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.29" steps="420"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC modular_expo.0.57.1.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="((k - 1) + 1)" arg2="k" arg3="in" arg4="H67">
        <goal name="VC modular_expo.0.57.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H67">
         <goal name="VC modular_expo.0.57.1.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.15" steps="420"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC modular_expo.0.57.1.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="0.97" steps="420"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC modular_expo.0.57.1.0.0.2" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="((getbv x @ k) = 1)">
        <goal name="VC modular_expo.0.57.1.0.0.2.0" expl="true case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="H23">
         <goal name="VC modular_expo.0.57.1.0.0.2.0.0" expl="true case (apply premises)" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="VC modular_expo.0.57.1.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.99" steps="422"/></proof>
          </goal>
          <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1" expl="apply premises" proved="true">
          <transf name="instantiate" proved="true" arg1="H19" arg2="(mod
    (power_ a
     (ind_isum (fun (l:int) -&gt; (getbv x @ l) * power_ 2 (((2 * n) - l) - 1))
      0 k))
    bound)">
           <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(mod
     (power_ a
      (ind_isum (fun (l:int) -&gt; (getbv x @ l) * power_ 2 (((2 * n) - l) - 1))
       0 (k + 1)))
     bound)" arg2="(mod
    (power_ a (power_ 2 (((2 * n) - k) - 1))
     * mod
       (power_ a
        (ind_isum
         (fun (l:int) -&gt; (getbv x @ l) * power_ 2 (((2 * n) - l) - 1)) 0 k))
       bound)
    bound)">
            <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="sem_to_path_sem">
             <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="Hinst">
              <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="2.59"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="mult_mod_right">
             <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="mod_eq">
              <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ind_isum_right_extension">
               <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="Power_sum_">
                 <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="mult_eq_inv">
                  <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                  </transf>
                  </goal>
                  <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="0.93" steps="422"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="ind_isum_pos">
                  <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="0.64" steps="422"/></proof>
                  </goal>
                  <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                    <proof prover="1"><result status="valid" time="4.38"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="1"><result status="valid" time="1.68"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="0.66" steps="422"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC modular_expo.0.57.1.0.0.2.0.0.1.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.04" steps="422"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="2.31"/></proof>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.92" steps="422"/></proof>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.2.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.63" steps="422"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC modular_expo.0.57.1.0.0.2.1" expl="false case (apply premises)" proved="true">
        <transf name="rewrite" proved="true" arg1="H24">
         <goal name="VC modular_expo.0.57.1.0.0.2.1.0" expl="false case (apply premises)" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="VC modular_expo.0.57.1.0.0.2.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.72" steps="422"/></proof>
          </goal>
          <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_eq">
           <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.70" steps="422"/></proof>
           </goal>
           <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.66" steps="422"/></proof>
           </goal>
           <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1.2" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="ind_isum_right_extension">
            <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1.2.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="add_zero">
             <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1.2.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1.2.0.1" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="4.30"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC modular_expo.0.57.1.0.0.2.1.0.1.2.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="0.65" steps="422"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.2.1.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.96"/></proof>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.2.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.96" steps="422"/></proof>
         </goal>
         <goal name="VC modular_expo.0.57.1.0.0.2.1.3" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="4.34"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC modular_expo.0.57.1.0.0.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.93" steps="420"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC modular_expo.0.58" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.57" steps="364"/></proof>
   </goal>
   <goal name="VC modular_expo.0.59" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.06" steps="370"/></proof>
   </goal>
   <goal name="VC modular_expo.0.60" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.87" steps="370"/></proof>
   </goal>
   <goal name="VC modular_expo.0.61" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.94" steps="370"/></proof>
   </goal>
   <goal name="VC modular_expo.0.62" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H4">
    <goal name="VC modular_expo.0.62.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (getbv x @ l) * power_ 2 (((2 * n) - l) - 1))
      0 (((2 * n) - 1) + 1))" arg2="(bv_to_int x)">
     <goal name="VC modular_expo.0.62.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC modular_expo.0.62.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
      <goal name="VC modular_expo.0.62.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
       <goal name="VC modular_expo.0.62.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC modular_expo.0.62.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="2.21"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC modular_expo.0.62.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.25" steps="373"/></proof>
       </goal>
       <goal name="VC modular_expo.0.62.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.23" steps="373"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC modular_expo.0.62.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.41" steps="373"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC shor_circ_pre" expl="VC for shor_circ_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC shor_circ_pre.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.13" steps="366"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="366"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="376"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="362"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00" steps="366"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95" steps="374"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="382"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.46" steps="390"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="392"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.67" steps="400"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="408"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="408"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="420"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.13.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.46" steps="420"/></proof>
   </goal>
   <goal name="VC shor_circ_pre.13.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.66" steps="420"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.72" steps="420"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.75" steps="420"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.66" steps="420"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.57" steps="426"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98" steps="426"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.25"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.20" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(width (create_superposition (2 * n) (3 * n) (ket n 1)))" arg2="(2*n+n)">
   <goal name="VC shor_circ_pre.20.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="kronecker_ket_l">
    <goal name="VC shor_circ_pre.20.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.32" steps="434"/></proof>
    </goal>
    <goal name="VC shor_circ_pre.20.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.23" steps="434"/></proof>
    </goal>
    <goal name="VC shor_circ_pre.20.0.2" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.12"/></proof>
    </goal>
    <goal name="VC shor_circ_pre.20.0.3" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="ket_l">
     <goal name="VC shor_circ_pre.20.0.3.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.29" steps="434"/></proof>
     </goal>
     <goal name="VC shor_circ_pre.20.0.3.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.26" steps="434"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC shor_circ_pre.20.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="0.78" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="436"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.22" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
   <goal name="VC shor_circ_pre.22.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_scal_">
    <goal name="VC shor_circ_pre.22.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.92"/></proof>
    </goal>
    <goal name="VC shor_circ_pre.22.0.1" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
     <goal name="VC shor_circ_pre.22.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum_">
      <goal name="VC shor_circ_pre.22.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC shor_circ_pre.22.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.74" steps="436"/></proof>
       </goal>
       <goal name="VC shor_circ_pre.22.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.59" steps="436"/></proof>
       </goal>
       <goal name="VC shor_circ_pre.22.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.62" steps="436"/></proof>
       </goal>
       <goal name="VC shor_circ_pre.22.0.1.0.0.3" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC shor_circ_pre.22.0.1.0.0.3.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="3.57"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC shor_circ_pre.22.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.31" steps="436"/></proof>
      </goal>
      <goal name="VC shor_circ_pre.22.0.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.36" steps="436"/></proof>
      </goal>
      <goal name="VC shor_circ_pre.22.0.1.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC shor_circ_pre.22.0.1.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC shor_circ_pre.22.0.1.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width (modular_expo a bound n))" arg2="(2*n+n)">
         <goal name="VC shor_circ_pre.22.0.1.0.3.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC shor_circ_pre.22.0.1.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.36" steps="438"/></proof>
          </goal>
          <goal name="VC shor_circ_pre.22.0.1.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.79" steps="438"/></proof>
          </goal>
          <goal name="VC shor_circ_pre.22.0.1.0.3.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="2.28"/></proof>
          </goal>
          <goal name="VC shor_circ_pre.22.0.1.0.3.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="2.81"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC shor_circ_pre.22.0.1.0.3.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.05" steps="438"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC shor_circ_pre.22.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="3.05"/></proof>
     </goal>
     <goal name="VC shor_circ_pre.22.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.79" steps="436"/></proof>
     </goal>
     <goal name="VC shor_circ_pre.22.0.1.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.79" steps="436"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="438"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="436"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.83" steps="438"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.26" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.44" steps="438"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.27" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.27.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.73" steps="438"/></proof>
   </goal>
   <goal name="VC shor_circ_pre.27.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.39" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.28" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.28.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.64" steps="438"/></proof>
   </goal>
   <goal name="VC shor_circ_pre.28.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.11" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.29" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.29.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.49" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.30" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.30.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.57" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.15" steps="440"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.32.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.27" steps="440"/></proof>
   </goal>
   <goal name="VC shor_circ_pre.32.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.61" steps="440"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.33" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.33.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="2.91"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.51" steps="441"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="442"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.81" steps="442"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.92" steps="442"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.38" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.38.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.87" steps="442"/></proof>
   </goal>
   <goal name="VC shor_circ_pre.38.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.82" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.39" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.39.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.72" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.40" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.40.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.53" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="442"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.42" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.42.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.73" steps="442"/></proof>
   </goal>
   <goal name="VC shor_circ_pre.42.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.68" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.43" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shor_circ_pre.43.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="2.68"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.44" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.50" steps="442"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.45" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.72" steps="452"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.46" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC shor_circ_pre.46.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H10">
    <goal name="VC shor_circ_pre.46.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H39">
     <goal name="VC shor_circ_pre.46.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="max_right">
      <goal name="VC shor_circ_pre.46.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.73" steps="453"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ_pre.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="455"/></proof>
  </goal>
  <goal name="VC shor_circ_pre.48" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(sequence (create_superposition (2 * n) (3 * n) (ket n 1))
   (modular_expo a bound n))">
   <goal name="VC shor_circ_pre.48.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H47">
   </transf>
   </goal>
   <goal name="VC shor_circ_pre.48.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.46" steps="456"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC shor_ket" expl="VC for shor_ket" proved="true">
 <proof prover="1"><result status="valid" time="2.63"/></proof>
 </goal>
 <goal name="VC shor_circ" expl="VC for shor_circ" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC shor_circ.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.39" steps="362"/></proof>
  </goal>
  <goal name="VC shor_circ.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.52" steps="368"/></proof>
  </goal>
  <goal name="VC shor_circ.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.13" steps="376"/></proof>
  </goal>
  <goal name="VC shor_circ.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="376"/></proof>
  </goal>
  <goal name="VC shor_circ.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.51" steps="402"/></proof>
  </goal>
  <goal name="VC shor_circ.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="368"/></proof>
  </goal>
  <goal name="VC shor_circ.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="368"/></proof>
  </goal>
  <goal name="VC shor_circ.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="372"/></proof>
  </goal>
  <goal name="VC shor_circ.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="368"/></proof>
  </goal>
  <goal name="VC shor_circ.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.19" steps="372"/></proof>
  </goal>
  <goal name="VC shor_circ.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.50" steps="380"/></proof>
  </goal>
  <goal name="VC shor_circ.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="388"/></proof>
  </goal>
  <goal name="VC shor_circ.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="396"/></proof>
  </goal>
  <goal name="VC shor_circ.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="396"/></proof>
  </goal>
  <goal name="VC shor_circ.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="392"/></proof>
  </goal>
  <goal name="VC shor_circ.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="394"/></proof>
  </goal>
  <goal name="VC shor_circ.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.57" steps="402"/></proof>
  </goal>
  <goal name="VC shor_circ.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="406"/></proof>
  </goal>
  <goal name="VC shor_circ.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.68" steps="414"/></proof>
  </goal>
  <goal name="VC shor_circ.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.71" steps="426"/></proof>
  </goal>
  <goal name="VC shor_circ.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.59" steps="426"/></proof>
  </goal>
  <goal name="VC shor_circ.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.73" steps="426"/></proof>
  </goal>
  <goal name="VC shor_circ.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.61" steps="434"/></proof>
  </goal>
  <goal name="VC shor_circ.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.26" steps="434"/></proof>
  </goal>
  <goal name="VC shor_circ.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.45" steps="434"/></proof>
  </goal>
  <goal name="VC shor_circ.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="434"/></proof>
  </goal>
  <goal name="VC shor_circ.26" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.45" steps="434"/></proof>
  </goal>
  <goal name="VC shor_circ.27" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(width (shor_circ_pre a bound n))" arg2="(2*n+n)">
   <goal name="VC shor_circ.27.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="kronecker_ket_l">
    <goal name="VC shor_circ.27.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.75" steps="442"/></proof>
    </goal>
    <goal name="VC shor_circ.27.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.21" steps="442"/></proof>
    </goal>
    <goal name="VC shor_circ.27.0.2" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="3.60"/></proof>
    </goal>
    <goal name="VC shor_circ.27.0.3" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.68"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC shor_circ.27.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.57" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ.28" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC shor_circ.28.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="scalar_eq_gen">
    <goal name="VC shor_circ.28.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="VC shor_circ.28.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.30" steps="444"/></proof>
     </goal>
     <goal name="VC shor_circ.28.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.20" steps="444"/></proof>
     </goal>
     <goal name="VC shor_circ.28.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.94" steps="444"/></proof>
     </goal>
     <goal name="VC shor_circ.28.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC shor_circ.28.0.0.3.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="3.85"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC shor_circ.28.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.50" steps="444"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ.29" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal">
   <goal name="VC shor_circ.29.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="scalar_eq_gen">
    <goal name="VC shor_circ.29.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum_">
     <goal name="VC shor_circ.29.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
      <goal name="VC shor_circ.29.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC shor_circ.29.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.38" steps="446"/></proof>
       </goal>
       <goal name="VC shor_circ.29.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.84" steps="446"/></proof>
       </goal>
       <goal name="VC shor_circ.29.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.49" steps="446"/></proof>
       </goal>
       <goal name="VC shor_circ.29.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC shor_circ.29.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC shor_circ.29.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H74">
          <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_rev_qft_unit">
           <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
            <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq">
             <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
              <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
               <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="3.29"/></proof>
               </goal>
               <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.46" steps="448"/></proof>
               </goal>
               <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="3.73"/></proof>
               </goal>
               <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                 <transf name="eliminate_if" proved="true" >
                  <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0" proved="true">
                  <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket a1))" arg2="(bv_to_int a1)">
                   <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0" proved="true">
                   <proof prover="3"><result status="valid" time="3.11"/></proof>
                   </goal>
                   <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="3"><result status="valid" time="2.89"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="3"><result status="valid" time="3.73"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="3.22"/></proof>
              </goal>
              <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.37" steps="448"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.21" steps="448"/></proof>
           </goal>
           <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="3.30"/></proof>
           </goal>
           <goal name="VC shor_circ.29.0.0.0.0.3.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="3.40"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC shor_circ.29.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="2.93"/></proof>
          </goal>
          <goal name="VC shor_circ.29.0.0.0.0.3.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="3.40"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC shor_circ.29.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.52" steps="446"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC shor_circ.29.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.42" steps="446"/></proof>
     </goal>
     <goal name="VC shor_circ.29.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.99" steps="446"/></proof>
     </goal>
     <goal name="VC shor_circ.29.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC shor_circ.29.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC shor_circ.29.0.0.3.0.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(width (place (qft_rev (2 * n)) 0 (3 * n)))" arg2="(2*n+n)">
        <goal name="VC shor_circ.29.0.0.3.0.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="VC shor_circ.29.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.01" steps="448"/></proof>
         </goal>
         <goal name="VC shor_circ.29.0.0.3.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.28" steps="448"/></proof>
         </goal>
         <goal name="VC shor_circ.29.0.0.3.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="2.38"/></proof>
         </goal>
         <goal name="VC shor_circ.29.0.0.3.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="3.65"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC shor_circ.29.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.03" steps="448"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC shor_circ.29.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.19" steps="446"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC shor_circ.29.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="3.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.16" steps="448"/></proof>
  </goal>
  <goal name="VC shor_circ.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.16" steps="444"/></proof>
  </goal>
  <goal name="VC shor_circ.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21" steps="445"/></proof>
  </goal>
  <goal name="VC shor_circ.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="446"/></proof>
  </goal>
  <goal name="VC shor_circ.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.60" steps="446"/></proof>
  </goal>
  <goal name="VC shor_circ.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.35" steps="446"/></proof>
  </goal>
  <goal name="VC shor_circ.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.78" steps="448"/></proof>
  </goal>
  <goal name="VC shor_circ.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="449"/></proof>
  </goal>
  <goal name="VC shor_circ.38" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.90" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.39" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.42" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.40" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.24" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.16" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.42" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.43" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.33" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.44" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.43" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.45" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.20" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.46" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.47" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.75" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.48" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.03" steps="450"/></proof>
  </goal>
  <goal name="VC shor_circ.49" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.47" steps="452"/></proof>
  </goal>
  <goal name="VC shor_circ.50" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.34" steps="464"/></proof>
  </goal>
  <goal name="VC shor_circ.51" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.23"/></proof>
  </goal>
  <goal name="VC shor_circ.52" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.50" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.53" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.75" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.54" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.47" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.55" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.88" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.56" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.54" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.57" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.74" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.58" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.69" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.59" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.60" steps="466"/></proof>
  </goal>
  <goal name="VC shor_circ.60" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.65" steps="468"/></proof>
  </goal>
  <goal name="VC shor_circ.61" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.56" steps="468"/></proof>
  </goal>
  <goal name="VC shor_circ.62" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC shor_circ.62.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H10">
    <goal name="VC shor_circ.62.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ancillas (place (qft_rev (2 * n)) 0 (3 * n)))" arg2="0">
     <goal name="VC shor_circ.62.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="max_left">
      <goal name="VC shor_circ.62.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.58" steps="469"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC shor_circ.62.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.24" steps="469"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC shor_circ.63" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15" steps="471"/></proof>
  </goal>
  <goal name="VC shor_circ.64" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC shor_circ.64.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC shor_circ.64.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H57">
     <goal name="VC shor_circ.64.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_assoc">
      <goal name="VC shor_circ.64.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="scalar_eq_gen">
       <goal name="VC shor_circ.64.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq">
        <goal name="VC shor_circ.64.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.49" steps="438"/></proof>
        </goal>
        <goal name="VC shor_circ.64.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.92" steps="438"/></proof>
        </goal>
        <goal name="VC shor_circ.64.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC shor_circ.64.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq">
           <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="3.94" steps="440"/></proof>
           </goal>
           <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="3.51" steps="440"/></proof>
           </goal>
           <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="shor_ket_def">
                <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="4.26"/></proof>
                </goal>
                <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="2.31" steps="446"/></proof>
                </goal>
                <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="2.51" steps="446"/></proof>
                </goal>
                <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="2.53" steps="446"/></proof>
                </goal>
                <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.0.4" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="2.39" steps="446"/></proof>
                </goal>
                <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.0.5" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="2.24" steps="446"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC shor_circ.64.0.0.0.0.0.2.0.0.2.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="4.49"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC shor_circ.64.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC shor_circ.64.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="pow_inv_2_spec">
         <goal name="VC shor_circ.64.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.76" steps="438"/></proof>
         </goal>
         <goal name="VC shor_circ.64.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.60" steps="438"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC k_bound" expl="VC for k_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC k_bound.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="370"/></proof>
  </goal>
  <goal name="VC k_bound.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.31"/></proof>
  </goal>
  <goal name="VC k_bound.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.93" steps="376"/></proof>
  </goal>
  <goal name="VC k_bound.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.91"/></proof>
  </goal>
  <goal name="VC k_bound.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.30" steps="376"/></proof>
  </goal>
  <goal name="VC k_bound.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40" steps="378"/></proof>
  </goal>
  <goal name="VC k_bound.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="388"/></proof>
  </goal>
  <goal name="VC k_bound.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.50"/></proof>
  </goal>
  <goal name="VC k_bound.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.08"/></proof>
  </goal>
  <goal name="VC k_bound.9" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="i_to_c_mult">
   <goal name="VC k_bound.9.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_add">
    <goal name="VC k_bound.9.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="1.78"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC k_bound.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="2.19"/></proof>
  </goal>
  <goal name="VC k_bound.11" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(pow_inv_2 (2 * n))" arg2="(c_one /. (i_to_c (power_ 2 (2*n))))">
   <goal name="VC k_bound.11.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="inv_order_complex">
    <goal name="VC k_bound.11.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="398"/></proof>
    </goal>
    <goal name="VC k_bound.11.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.20"/></proof>
    </goal>
    <goal name="VC k_bound.11.0.2" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="2.17"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC k_bound.11.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="2.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC k_bound.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="394"/></proof>
  </goal>
  <goal name="VC k_bound.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="394"/></proof>
  </goal>
  <goal name="VC k_bound.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC k_bound.14.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.80"/></proof>
   </goal>
   <goal name="VC k_bound.14.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.00" steps="394"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC k_bound.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.79"/></proof>
  </goal>
  <goal name="VC k_bound.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.70"/></proof>
  </goal>
  <goal name="VC k_bound.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="398"/></proof>
  </goal>
  <goal name="VC k_bound.18" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.66" steps="396"/></proof>
  </goal>
  <goal name="VC k_bound.19" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(i_to_c (power_ 2 (2 * n)))" arg2="(c_one *. i_to_c (power_ 2 (2 * n)))">
   <goal name="VC k_bound.19.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((i_to_c k *. i_to_c (multi_order a bound)) +. i_to_c i)" arg2="(((i_to_c k *. i_to_c (multi_order a bound)) +. i_to_c i) *. pow_inv_2 (2 * n) *. i_to_c (power_ 2 (2*n)))
">
    <goal name="VC k_bound.19.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="compat_order_mult">
     <goal name="VC k_bound.19.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.70" steps="396"/></proof>
     </goal>
     <goal name="VC k_bound.19.0.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.61"/></proof>
     </goal>
     <goal name="VC k_bound.19.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.82"/></proof>
     </goal>
     <goal name="VC k_bound.19.0.0.3" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.93"/></proof>
     </goal>
     <goal name="VC k_bound.19.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.56"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC k_bound.19.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="mult_assoc1">
     <goal name="VC k_bound.19.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="1.99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC k_bound.19.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="1.81"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC k_bound.20" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="c_one" arg2="( i_to_c (power_ 2 (2 * n)) *.  pow_inv_2 (2 * n))">
   <goal name="VC k_bound.20.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="compat_order_mult">
    <goal name="VC k_bound.20.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
     <goal name="VC k_bound.20.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.56"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC k_bound.20.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.88"/></proof>
    </goal>
    <goal name="VC k_bound.20.0.2" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.93"/></proof>
    </goal>
    <goal name="VC k_bound.20.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.01" steps="398"/></proof>
    </goal>
    <goal name="VC k_bound.20.0.4" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.78"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC k_bound.20.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="1.81"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC k_bound.21" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
   <goal name="VC k_bound.21.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.48"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC best_appr_" expl="VC for best_appr_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC best_appr_.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="366"/></proof>
  </goal>
  <goal name="VC best_appr_.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.52"/></proof>
  </goal>
  <goal name="VC best_appr_.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.91"/></proof>
  </goal>
  <goal name="VC best_appr_.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="377"/></proof>
  </goal>
  <goal name="VC best_appr_.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="VC best_appr_.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.18"/></proof>
  </goal>
  <goal name="VC best_appr_.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="381"/></proof>
  </goal>
  <goal name="VC best_appr_.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.64"/></proof>
  </goal>
  <goal name="VC best_appr_.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="VC best_appr_.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="381"/></proof>
  </goal>
  <goal name="VC best_appr_.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.58"/></proof>
  </goal>
  <goal name="VC best_appr_.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC best_appr_.11.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.80"/></proof>
   </goal>
   <goal name="VC best_appr_.11.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.73"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC best_appr_.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="391"/></proof>
  </goal>
  <goal name="VC best_appr_.13" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="real_substr">
   <goal name="VC best_appr_.13.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="1.77"/></proof>
   </goal>
   <goal name="VC best_appr_.13.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="2.23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC best_appr_.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.16"/></proof>
  </goal>
  <goal name="VC best_appr_.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.12" steps="403"/></proof>
  </goal>
  <goal name="VC best_appr_.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.28"/></proof>
  </goal>
  <goal name="VC best_appr_.17" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="modulus_diff_rev">
   <goal name="VC best_appr_.17.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="((i_to_c k /. i_to_c (multi_order a bound))
   -. (pow_inv_2 (2 * n)
       *. i_to_c
          (best_appr (i_to_c k /. i_to_c (multi_order a bound)) (2 * n))))" arg2="((i_to_c k /. i_to_c (multi_order a bound))
   -. (i_to_c (best_appr (i_to_c k /. i_to_c (multi_order a bound)) (2 * n))
       *. pow_inv_2 (2 * n)))">
    <goal name="VC best_appr_.17.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="2.33"/></proof>
    </goal>
    <goal name="VC best_appr_.17.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.80" steps="405"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC best_appr_.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="401"/></proof>
  </goal>
  <goal name="VC best_appr_.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.70"/></proof>
  </goal>
  <goal name="VC best_appr_.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.38"/></proof>
  </goal>
  <goal name="VC best_appr_.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.92" steps="401"/></proof>
  </goal>
  <goal name="VC best_appr_.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.66"/></proof>
  </goal>
  <goal name="VC best_appr_.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.10"/></proof>
  </goal>
  <goal name="VC best_appr_.24" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC best_appr_.24.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.60" steps="401"/></proof>
   </goal>
   <goal name="VC best_appr_.24.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.60" steps="401"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC best_appr_.25" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.90" steps="401"/></proof>
  </goal>
  <goal name="VC best_appr_.26" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="transitive_infeq" arg2="( modulus
  (i_to_c k -. (pow_inv_2 (2 * n) *. i_to_c (result * multi_order a bound)))),(i_to_c (multi_order a bound)*.pow_inv_2 ((2 * n) + 1)),(c_one /. (ttwo *. i_to_c b))">
   <goal name="VC best_appr_.26.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC best_appr_.26.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(modulus
  (i_to_c k -. (pow_inv_2 (2 * n) *. i_to_c (result * multi_order a bound))))" arg2="(i_to_c (multi_order a bound) *.  (modulus
  ((i_to_c k /. i_to_c (multi_order a bound))
   -. (pow_inv_2 (2 * n) *. i_to_c result))))">
     <goal name="VC best_appr_.26.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="compat_order_mult_both">
      <goal name="VC best_appr_.26.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC best_appr_.26.0.0.0.0.0" proved="true">
       <proof prover="1"><result status="valid" time="1.98"/></proof>
       </goal>
       <goal name="VC best_appr_.26.0.0.0.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.93" steps="406"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC best_appr_.26.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC best_appr_.26.0.0.0.1.0" proved="true">
       <proof prover="1"><result status="valid" time="1.54"/></proof>
       </goal>
       <goal name="VC best_appr_.26.0.0.0.1.1" proved="true">
       <proof prover="1"><result status="valid" time="1.77"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC best_appr_.26.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="mult_comm">
      <goal name="VC best_appr_.26.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_real_modulus_rev">
       <goal name="VC best_appr_.26.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="mult_distr_minus">
        <goal name="VC best_appr_.26.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="modulus_itself">
         <goal name="VC best_appr_.26.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="substr_eq_t">
          <goal name="VC best_appr_.26.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.82"/></proof>
          </goal>
          <goal name="VC best_appr_.26.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
           <goal name="VC best_appr_.26.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.60" steps="406"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC best_appr_.26.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.60" steps="406"/></proof>
       </goal>
       <goal name="VC best_appr_.26.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="1.56"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC best_appr_.26.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(   (i_to_c (multi_order a bound) *. pow_inv_2 ((2 * n) + 1))
 *. (c_one/. i_to_c (multi_order a bound) ) &lt;=. (c_one /. (ttwo *. i_to_c b)) *. (c_one/. i_to_c (multi_order a bound) )  )">
     <goal name="VC best_appr_.26.0.1.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="inv_mult">
      <goal name="VC best_appr_.26.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="((i_to_c (multi_order a bound) *. pow_inv_2 ((2 * n) + 1))
   *. (c_one /. i_to_c (multi_order a bound)))" arg2="(pow_inv_2 ((2 * n) + 1))">
       <goal name="VC best_appr_.26.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="replace" proved="true" arg1="(pow_inv_2 ((2 * n) + 1))" arg2="(c_one /. i_to_c (power_ 2 ((2 * n) + 1)))">
        <goal name="VC best_appr_.26.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="inv_order_complex">
         <goal name="VC best_appr_.26.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="strict_mult_pos">
          <goal name="VC best_appr_.26.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.57"/></proof>
          </goal>
          <goal name="VC best_appr_.26.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.63"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC best_appr_.26.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.77"/></proof>
         </goal>
         <goal name="VC best_appr_.26.0.1.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="power__sum">
          <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
           <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(i_to_c (power_ 2 (2 * n)) *. i_to_c (power_ 2 1))" arg2="(ttwo *.i_to_c (power_ 2 (2 * n)) )">
            <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mult_assoc1">
             <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="compat_order_mult_left">
              <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="i_to_c_mult">
               <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="compat_i_to_c_infeq">
                <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.59" steps="406"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="1.80"/></proof>
              </goal>
              <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="2.07"/></proof>
              </goal>
              <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="1.71"/></proof>
              </goal>
              <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="1.60"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC best_appr_.26.0.1.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="0.65" steps="406"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC best_appr_.26.0.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.71" steps="406"/></proof>
          </goal>
          <goal name="VC best_appr_.26.0.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.68" steps="406"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC best_appr_.26.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.60"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC best_appr_.26.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="2.03"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC best_appr_.26.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.70"/></proof>
      </goal>
      <goal name="VC best_appr_.26.0.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="1.77"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC best_appr_.26.0.1.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="2.87"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC best_appr_orders" expl="VC for best_appr_orders" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC best_appr_orders.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="366"/></proof>
  </goal>
  <goal name="VC best_appr_orders.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="368"/></proof>
  </goal>
  <goal name="VC best_appr_orders.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="368"/></proof>
  </goal>
  <goal name="VC best_appr_orders.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="368"/></proof>
  </goal>
  <goal name="VC best_appr_orders.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="368"/></proof>
  </goal>
  <goal name="VC best_appr_orders.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="368"/></proof>
  </goal>
  <goal name="VC best_appr_orders.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="368"/></proof>
  </goal>
  <goal name="VC best_appr_orders.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="376"/></proof>
  </goal>
  <goal name="VC best_appr_orders.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.30"/></proof>
  </goal>
  <goal name="VC best_appr_orders.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.98"/></proof>
  </goal>
  <goal name="VC best_appr_orders.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.77"/></proof>
  </goal>
  <goal name="VC best_appr_orders.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="389"/></proof>
  </goal>
  <goal name="VC best_appr_orders.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.46"/></proof>
  </goal>
  <goal name="VC best_appr_orders.13" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="div_pos">
   <goal name="VC best_appr_orders.13.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
    <goal name="VC best_appr_orders.13.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.42"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC best_appr_orders.13.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="1.72"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC best_appr_orders.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="2.00"/></proof>
  </goal>
  <goal name="VC best_appr_orders.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.46"/></proof>
  </goal>
  <goal name="VC best_appr_orders.16" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(modulus
  ((i_to_c (k * power_ 2 (2 * n)) /. i_to_c (multi_order a bound))
   -&#39;&#39; i_to_c (best_appr_ k a bound n)))" arg2="(i_to_c (power_ 2 (2*n))*. modulus
  ((i_to_c k /. i_to_c (multi_order a bound))
   -. (pow_inv_2 (2 * n) *. i_to_c (best_appr_ k a bound n))))">
   <goal name="VC best_appr_orders.16.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(c_one /. ttwo)" arg2="(i_to_c (power_ 2 (2*n)) *. pow_inv_2 (2*n+1))">
    <goal name="VC best_appr_orders.16.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="compat_order_mult_left">
     <goal name="VC best_appr_orders.16.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.63" steps="397"/></proof>
     </goal>
     <goal name="VC best_appr_orders.16.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.74"/></proof>
     </goal>
     <goal name="VC best_appr_orders.16.0.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.79"/></proof>
     </goal>
     <goal name="VC best_appr_orders.16.0.0.3" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="2.05"/></proof>
     </goal>
     <goal name="VC best_appr_orders.16.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.38"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC best_appr_orders.16.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="pow_inv_2_add">
     <goal name="VC best_appr_orders.16.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="1.79"/></proof>
     </goal>
     <goal name="VC best_appr_orders.16.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.58" steps="397"/></proof>
     </goal>
     <goal name="VC best_appr_orders.16.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.58" steps="397"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC best_appr_orders.16.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="mult_real_modulus_rev">
    <goal name="VC best_appr_orders.16.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="modulus_itself">
     <goal name="VC best_appr_orders.16.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
      <goal name="VC best_appr_orders.16.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_distr_minus">
       <goal name="VC best_appr_orders.16.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(i_to_c (power_ 2 (2 * n))
         *. (pow_inv_2 (2 * n) *. i_to_c (best_appr_ k a bound n)))" arg2="(( i_to_c (best_appr_ k a bound n)))">
        <goal name="VC best_appr_orders.16.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.72"/></proof>
        </goal>
        <goal name="VC best_appr_orders.16.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="mult_assoc_rev">
         <goal name="VC best_appr_orders.16.1.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="1.85"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC best_appr_orders.16.1.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="1.82"/></proof>
    </goal>
    <goal name="VC best_appr_orders.16.1.2" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="1.41"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC best_appr_orders.17" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="391"/></proof>
  </goal>
  <goal name="VC best_appr_orders.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC best_appr_orders.18.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="1.95"/></proof>
   </goal>
   <goal name="VC best_appr_orders.18.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(best_appr_ k a bound n = power_ 2 (2 * n))">
    <goal name="VC best_appr_orders.18.1.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(i_to_c (multi_order a bound - k) &lt;=. c_one /. (ttwo *. i_to_c (div (power_ 2 (2*n) ) (multi_order a bound))))">
     <goal name="VC best_appr_orders.18.1.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="( i_to_c (multi_order a bound - k))" arg2="(modulus
     (i_to_c k      -. (pow_inv_2 (2 * n)
          *. i_to_c (best_appr_ k a bound n * multi_order a bound))))">
      <goal name="VC best_appr_orders.18.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC best_appr_orders.18.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="best_appr__spec">
        <goal name="VC best_appr_orders.18.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.13"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.14"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.23"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.24"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.08"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.09"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="2.26"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.0.0.0.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.61"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC best_appr_orders.18.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b. modulus (a-. b)=  modulus (b-.a) )">
       <goal name="VC best_appr_orders.18.1.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC best_appr_orders.18.1.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="1.34"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC best_appr_orders.18.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="h">
        <goal name="VC best_appr_orders.18.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="((pow_inv_2 (2 * n)
      *. i_to_c (best_appr_ k a bound n * multi_order a bound)))" arg2="(i_to_c (multi_order a bound))">
         <goal name="VC best_appr_orders.18.1.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="2.04"/></proof>
         </goal>
         <goal name="VC best_appr_orders.18.1.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
          <goal name="VC best_appr_orders.18.1.0.0.1.1.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="mult_assoc_rev">
           <goal name="VC best_appr_orders.18.1.0.0.1.1.0.1.0.0" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="1.62"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC best_appr_orders.18.1.0.1" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(i_to_c (multi_order a bound - k) &lt;. c_one)">
      <goal name="VC best_appr_orders.18.1.0.1.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="transitive_infeq_inf" arg2="(i_to_c (multi_order a bound - k)),(c_one
       /. (ttwo *. i_to_c (div (power_ 2 (2 * n)) (multi_order a bound)))),c_one">
       <goal name="VC best_appr_orders.18.1.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="VC best_appr_orders.18.1.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.60" steps="395"/></proof>
        </goal>
        <goal name="VC best_appr_orders.18.1.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(forall a. c_one &lt;. a -&gt; c_one/.a &lt;. c_one)">
         <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="c_one" arg2="(a *. (c_one /.a))">
           <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
           <transf name="replace" proved="true" arg1="((a *. (c_one /. a)) /. a)" arg2="(c_one *. (c_one/. a))">
            <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="5"><result status="valid" time="0.45"/></proof>
            </goal>
            <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(a *. (c_one /. a))" arg2="c_one">
             <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
             <proof prover="3"><result status="valid" time="1.77"/></proof>
             </goal>
             <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="3"><result status="valid" time="1.75"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="((c_one /.a))" arg2="(c_one *. (c_one /.a))">
            <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="1.78"/></proof>
            </goal>
            <goal name="VC best_appr_orders.18.1.0.1.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="1.73"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC best_appr_orders.18.1.0.1.0.0.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="h">
          <goal name="VC best_appr_orders.18.1.0.1.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(c_one &lt;=. i_to_c (div (power_ 2 (2 * n)) (multi_order a bound)))">
           <goal name="VC best_appr_orders.18.1.0.1.0.0.1.1.0.0" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="1.71"/></proof>
           </goal>
           <goal name="VC best_appr_orders.18.1.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
           <transf name="instantiate" proved="true" arg1="transitive_inf_infeq" arg2="c_one,ttwo,(ttwo *. i_to_c (div (power_ 2 (2 * n)) (multi_order a bound)))">
            <goal name="VC best_appr_orders.18.1.0.1.0.0.1.1.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="VC best_appr_orders.18.1.0.1.0.0.1.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.78"/></proof>
             </goal>
             <goal name="VC best_appr_orders.18.1.0.1.0.0.1.1.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.74"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC best_appr_orders.18.1.0.1.1" expl="true case (postcondition)" proved="true">
      <proof prover="1"><result status="valid" time="1.24"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC best_appr_orders.18.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="1.20"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC greatest_factor" expl="VC for greatest_factor" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC greatest_factor.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.78" steps="366"/></proof>
  </goal>
  <goal name="VC greatest_factor.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC greatest_factor.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.42"/></proof>
   </goal>
   <goal name="VC greatest_factor.1.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.61" steps="366"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="371"/></proof>
  </goal>
  <goal name="VC greatest_factor.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC greatest_factor.3.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.62" steps="372"/></proof>
   </goal>
   <goal name="VC greatest_factor.3.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC greatest_factor.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.60" steps="375"/></proof>
   </goal>
   <goal name="VC greatest_factor.4.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.58" steps="375"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="375"/></proof>
  </goal>
  <goal name="VC greatest_factor.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.35" steps="381"/></proof>
  </goal>
  <goal name="VC greatest_factor.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
   <goal name="VC greatest_factor.7.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.78"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="375"/></proof>
  </goal>
  <goal name="VC greatest_factor.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.38"/></proof>
  </goal>
  <goal name="VC greatest_factor.10" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC greatest_factor.10.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC greatest_factor.10.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.72"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC min_mod_sum" expl="VC for min_mod_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC min_mod_sum.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.58" steps="364"/></proof>
  </goal>
  <goal name="VC min_mod_sum.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_mod_sum.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="1.54"/></proof>
   </goal>
   <goal name="VC min_mod_sum.1.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.56" steps="364"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_mod_sum.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61" steps="374"/></proof>
  </goal>
  <goal name="VC min_mod_sum.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.44"/></proof>
  </goal>
  <goal name="VC min_mod_sum.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="376"/></proof>
  </goal>
  <goal name="VC min_mod_sum.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.67" steps="376"/></proof>
  </goal>
  <goal name="VC min_mod_sum.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="376"/></proof>
  </goal>
  <goal name="VC min_mod_sum.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="376"/></proof>
  </goal>
  <goal name="VC min_mod_sum.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="376"/></proof>
  </goal>
  <goal name="VC min_mod_sum.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="376"/></proof>
  </goal>
  <goal name="VC min_mod_sum.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.20" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="384"/></proof>
  </goal>
  <goal name="VC min_mod_sum.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60" steps="390"/></proof>
  </goal>
  <goal name="VC min_mod_sum.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.32"/></proof>
  </goal>
  <goal name="VC min_mod_sum.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.50"/></proof>
  </goal>
  <goal name="VC min_mod_sum.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.96"/></proof>
  </goal>
  <goal name="VC min_mod_sum.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.94"/></proof>
  </goal>
  <goal name="VC min_mod_sum.27" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.59" steps="390"/></proof>
  </goal>
  <goal name="VC min_mod_sum.28" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.40"/></proof>
  </goal>
  <goal name="VC min_mod_sum.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.69" steps="372"/></proof>
  </goal>
  <goal name="VC min_mod_sum.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.43"/></proof>
  </goal>
  <goal name="VC min_mod_sum.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64" steps="375"/></proof>
  </goal>
  <goal name="VC min_mod_sum.32" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC min_mod_sum.32.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC min_mod_sum.32.0.0" expl="VC for min_mod_sum" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC min_mod_sum.32.0.0.0" expl="precondition" proved="true">
     <proof prover="1"><result status="valid" time="1.65"/></proof>
     </goal>
     <goal name="VC min_mod_sum.32.0.0.1" expl="precondition" proved="true">
     <proof prover="1"><result status="valid" time="1.50"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_mod_sum.33" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_mod_sum.33.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC min_mod_sum.33.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC min_mod_sum.33.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="min_set_complex_pos">
      <goal name="VC min_mod_sum.33.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.13" steps="385"/></proof>
      </goal>
      <goal name="VC min_mod_sum.33.0.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC min_mod_sum.33.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC min_mod_sum.33.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC min_mod_sum.33.0.0.0.1.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC min_mod_sum.33.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.96"/></proof>
          </goal>
          <goal name="VC min_mod_sum.33.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="3.40" steps="388"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC min_mod_sum.33.0.0.0.2" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC min_mod_sum.33.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC min_mod_sum.33.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC min_mod_sum.33.0.0.0.2.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC min_mod_sum.33.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.82"/></proof>
          </goal>
          <goal name="VC min_mod_sum.33.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="4.81" steps="388"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC min_mod_sum.33.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_mod_sum.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.95" steps="369"/></proof>
  </goal>
  <goal name="VC min_mod_sum.35" expl="postcondition" proved="true">
  <transf name="eliminate_let" proved="true" >
   <goal name="VC min_mod_sum.35.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC min_mod_sum.35.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="H6" arg2="i">
     <goal name="VC min_mod_sum.35.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="VC min_mod_sum.35.0.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC min_mod_sum.35.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC min_mod_sum.35.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="Hinst2">
         <goal name="VC min_mod_sum.35.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="2.45"/></proof>
         </goal>
         <goal name="VC min_mod_sum.35.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.19"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC min_mod_sum.35.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.91"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_mod_sum.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.14" steps="362"/></proof>
  </goal>
  <goal name="VC min_mod_sum.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="4.54" steps="364"/></proof>
  </goal>
  <goal name="VC min_mod_sum.38" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94" steps="371"/></proof>
  </goal>
  <goal name="VC min_mod_sum.39" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="3.32" steps="376"/></proof>
  </goal>
  <goal name="VC min_mod_sum.40" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.46" steps="381"/></proof>
  </goal>
  <goal name="VC min_mod_sum.41" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.77" steps="381"/></proof>
  </goal>
  <goal name="VC min_mod_sum.42" expl="postcondition" proved="true">
  <transf name="eliminate_let" proved="true" >
   <goal name="VC min_mod_sum.42.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="transitive_infeq" arg2="result,(o k),(cpower
       (modulus
        (ind_sum
         (fun (y:int) -&gt;
           int_qft_coeff
           ((y * multi_order a bound) + mod i (multi_order a bound))
           (- best_appr_ k a bound n) (2 * n))
         0 (greatest_factor a bound n i)))
       2 /. cpower (i_to_c (greatest_factor a bound n i)) 2)">
    <goal name="VC min_mod_sum.42.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC min_mod_sum.42.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H6">
      <goal name="VC min_mod_sum.42.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="1.68"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC min_mod_sum.42.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H15">
      <goal name="VC min_mod_sum.42.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.79"/></proof>
      </goal>
      <goal name="VC min_mod_sum.42.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.77"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_mod_sum.43" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(cpower
      (modulus
       (ind_sum
        (fun (y:int) -&gt;
          int_qft_coeff ((y * multi_order a bound) + mod i (multi_order a bound))
          (-  (best_appr_ k a bound n) ) (2 * n))
        0 (greatest_factor a bound n i)))
      2)" arg2="((cpower (i_to_c (greatest_factor a bound n i)) 2) *. (cpower
        (modulus
         (ind_sum
          (fun (y:int) -&gt;
            int_qft_coeff ((y * multi_order a bound) + mod i (multi_order a bound))
            (-  (best_appr_ k a bound n) ) (2 * n))
          0 (greatest_factor a bound n i)))
        2 /. cpower (i_to_c (greatest_factor a bound n i)) 2))">
   <goal name="VC min_mod_sum.43.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="compat_order_mult_left">
    <goal name="VC min_mod_sum.43.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H4">
     <goal name="VC min_mod_sum.43.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.97"/></proof>
     </goal>
     <goal name="VC min_mod_sum.43.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.95"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC min_mod_sum.43.0.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.97"/></proof>
    </goal>
    <goal name="VC min_mod_sum.43.0.2" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.61"/></proof>
    </goal>
    <goal name="VC min_mod_sum.43.0.3" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="1.74"/></proof>
    </goal>
    <goal name="VC min_mod_sum.43.0.4" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.33"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC min_mod_sum.43.1" expl="equality hypothesis" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b. a&lt;&gt; c_zero -&gt; b = a*. (b /.a))">
    <goal name="VC min_mod_sum.43.1.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="1.61"/></proof>
    </goal>
    <goal name="VC min_mod_sum.43.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="h">
     <goal name="VC min_mod_sum.43.1.1.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC separated_best_appr" expl="VC for separated_best_appr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC separated_best_appr.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC separated_best_appr.0.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(forall  a b c . (a-. b) -. (c+.b) = (a-.c) -. (b+.b))">
    <goal name="VC separated_best_appr.0.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC separated_best_appr.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="((a -. b) -. (c +. b))" arg2="((a -. b -. c -. b))">
      <goal name="VC separated_best_appr.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="((a -. b) -. c-.b )" arg2="(a -. c -. b -. b)">
       <goal name="VC separated_best_appr.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="3.91" steps="370"/></proof>
       </goal>
       <goal name="VC separated_best_appr.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="minus_elim">
        <goal name="VC separated_best_appr.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="minus_elim">
         <goal name="VC separated_best_appr.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="minus_elim">
          <goal name="VC separated_best_appr.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
          <proof prover="3"><result status="valid" time="1.73"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC separated_best_appr.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="4.05" steps="370"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC separated_best_appr.0.0.1" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="h">
     <goal name="VC separated_best_appr.0.0.1.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="minus_eq_t">
      <goal name="VC separated_best_appr.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="div_distr_minus_rev">
       <goal name="VC separated_best_appr.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="i_to_c_sub">
        <goal name="VC separated_best_appr.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(forall a b c. c&lt;&gt; c_zero -&gt; a*. (b/.c) = (a*.b)/.c)">
         <goal name="VC separated_best_appr.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC separated_best_appr.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="3.57" steps="372"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC separated_best_appr.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="h">
          <goal name="VC separated_best_appr.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="div_eq">
           <goal name="VC separated_best_appr.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="3.60" steps="370"/></proof>
           </goal>
           <goal name="VC separated_best_appr.0.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.86" steps="368"/></proof>
           </goal>
           <goal name="VC separated_best_appr.0.0.1.0.0.0.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.71"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC separated_best_appr.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="1.71"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC separated_best_appr.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.73"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC separated_best_appr.0.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.38" steps="370"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC separated_best_appr.1" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(c_one &lt;=. i_to_c (k&#39; - k))">
   <goal name="VC separated_best_appr.1.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="3.85" steps="372"/></proof>
   </goal>
   <goal name="VC separated_best_appr.1.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(c_one &lt;. i_to_c (k&#39; - k)*. (i_to_c (power_ 2 (2 * n)) /. i_to_c (multi_order a bound)))">
    <goal name="VC separated_best_appr.1.1.0" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="(c_one)" arg2="(c_one*.c_one)">
     <goal name="VC separated_best_appr.1.1.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="( c_one &lt;. (i_to_c (power_ 2 (2 * n)) /. i_to_c (multi_order a bound)))">
      <goal name="VC separated_best_appr.1.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b. c_zero &lt;. a &lt;. b -&gt; c_one &lt;. b/.a)">
       <goal name="VC separated_best_appr.1.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC separated_best_appr.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="(c_one )" arg2="(a *. (c_one /.a))">
         <goal name="VC separated_best_appr.1.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="(b/.a)" arg2="(b*. (c_one /.a))">
          <goal name="VC separated_best_appr.1.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="4.09" steps="378"/></proof>
          </goal>
          <goal name="VC separated_best_appr.1.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="3"><result status="valid" time="1.76"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC separated_best_appr.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="1.91"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC separated_best_appr.1.1.0.0.0.1" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="h1">
        <goal name="VC separated_best_appr.1.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC separated_best_appr.1.1.0.0.0.1.0.0" proved="true">
         <proof prover="1"><result status="valid" time="1.43"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.0.0.0.1.0.1" proved="true">
         <transf name="apply" proved="true" arg1="i_to_c_inf">
          <goal name="VC separated_best_appr.1.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="instantiate" proved="true" arg1="inf_trans" arg2="((multi_order a bound)),bound,(power_ 2 (2 * n))">
           <goal name="VC separated_best_appr.1.1.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="VC separated_best_appr.1.1.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="3.91" steps="374"/></proof>
            </goal>
            <goal name="VC separated_best_appr.1.1.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.70"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC separated_best_appr.1.1.0.0.1" expl="asserted formula" proved="true">
      <transf name="case" proved="true" arg1="( (k&#39; - k) =1)">
       <goal name="VC separated_best_appr.1.1.0.0.1.0" expl="asserted formula (true case)" proved="true">
       <transf name="replace" proved="true" arg1="(i_to_c (k&#39; - k))" arg2="c_one">
        <goal name="VC separated_best_appr.1.1.0.0.1.0.0" expl="asserted formula (true case)" proved="true">
        <transf name="apply" proved="true" arg1="compat_inf_mult_left">
         <goal name="VC separated_best_appr.1.1.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.11" steps="376"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.0.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="5.62" steps="378"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.0.0.1.0.0.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="5.44" steps="378"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.0.0.1.0.0.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="4.06" steps="378"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.0.0.1.0.0.4" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="4.79" steps="378"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC separated_best_appr.1.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="0.88" steps="376"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC separated_best_appr.1.1.0.0.1.1" expl="asserted formula (false case)" proved="true">
       <transf name="apply" proved="true" arg1="compat_inf_mult_both">
        <goal name="VC separated_best_appr.1.1.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.90" steps="376"/></proof>
        </goal>
        <goal name="VC separated_best_appr.1.1.0.0.1.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="3.84" steps="378"/></proof>
        </goal>
        <goal name="VC separated_best_appr.1.1.0.0.1.1.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="3.89" steps="378"/></proof>
        </goal>
        <goal name="VC separated_best_appr.1.1.0.0.1.1.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="4.00" steps="378"/></proof>
        </goal>
        <goal name="VC separated_best_appr.1.1.0.0.1.1.4" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.71"/></proof>
        </goal>
        <goal name="VC separated_best_appr.1.1.0.0.1.1.5" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="4.19" steps="378"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC separated_best_appr.1.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="4.54" steps="374"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC separated_best_appr.1.1.1" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="(forall a b. real_ a  -&gt;c_zero &lt;. b-.a  -&gt; a&lt;.b)">
     <goal name="VC separated_best_appr.1.1.1.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC separated_best_appr.1.1.1.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="a" arg2="(c_zero +.a)">
       <goal name="VC separated_best_appr.1.1.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="replace" proved="true" arg1="b" arg2="((b-.a) +.a)">
        <goal name="VC separated_best_appr.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="compat_inf_add">
         <goal name="VC separated_best_appr.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.57" steps="378"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="4.13" steps="380"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="9.17" steps="380"/></proof>
         </goal>
         <goal name="VC separated_best_appr.1.1.1.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.15" steps="378"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC separated_best_appr.1.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="4.19" steps="380"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC separated_best_appr.1.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="4.29" steps="380"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC separated_best_appr.1.1.1.1" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="VC separated_best_appr.1.1.1.1.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.73"/></proof>
      </goal>
      <goal name="VC separated_best_appr.1.1.1.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.00" steps="376"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC separated_best_appr.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.17" steps="372"/></proof>
  </goal>
  <goal name="VC separated_best_appr.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29" steps="372"/></proof>
  </goal>
  <goal name="VC separated_best_appr.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.34" steps="372"/></proof>
  </goal>
  <goal name="VC separated_best_appr.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.04" steps="372"/></proof>
  </goal>
  <goal name="VC separated_best_appr.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.18" steps="372"/></proof>
  </goal>
  <goal name="VC separated_best_appr.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97" steps="372"/></proof>
  </goal>
  <goal name="VC separated_best_appr.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.85" steps="380"/></proof>
  </goal>
  <goal name="VC separated_best_appr.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.82" steps="380"/></proof>
  </goal>
  <goal name="VC separated_best_appr.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="380"/></proof>
  </goal>
  <goal name="VC separated_best_appr.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="380"/></proof>
  </goal>
  <goal name="VC separated_best_appr.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.01" steps="380"/></proof>
  </goal>
  <goal name="VC separated_best_appr.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91" steps="380"/></proof>
  </goal>
  <goal name="VC separated_best_appr.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02" steps="388"/></proof>
  </goal>
  <goal name="VC separated_best_appr.15" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96" steps="390"/></proof>
  </goal>
  <goal name="VC separated_best_appr.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.46"/></proof>
  </goal>
  <goal name="VC separated_best_appr.17" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.83"/></proof>
  </goal>
  <goal name="VC separated_best_appr.18" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.16" steps="402"/></proof>
  </goal>
  <goal name="VC separated_best_appr.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.11" steps="402"/></proof>
  </goal>
  <goal name="VC separated_best_appr.20" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.79"/></proof>
  </goal>
  <goal name="VC separated_best_appr.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.79"/></proof>
  </goal>
  <goal name="VC separated_best_appr.22" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.35" steps="406"/></proof>
  </goal>
  <goal name="VC separated_best_appr.23" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.59" steps="406"/></proof>
  </goal>
  <goal name="VC separated_best_appr.24" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.33" steps="406"/></proof>
  </goal>
  <goal name="VC separated_best_appr.25" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.58" steps="406"/></proof>
  </goal>
  <goal name="VC separated_best_appr.26" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.61" steps="406"/></proof>
  </goal>
  <goal name="VC separated_best_appr.27" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="406"/></proof>
  </goal>
  <goal name="VC separated_best_appr.28" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC separated_best_appr.28.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.55" steps="411"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC separated_best_appr.29" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.38" steps="411"/></proof>
  </goal>
  <goal name="VC separated_best_appr.30" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.57" steps="413"/></proof>
  </goal>
  <goal name="VC separated_best_appr.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.35" steps="413"/></proof>
  </goal>
  <goal name="VC separated_best_appr.32" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.56" steps="413"/></proof>
  </goal>
  <goal name="VC separated_best_appr.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.47" steps="413"/></proof>
  </goal>
  <goal name="VC separated_best_appr.34" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.59" steps="413"/></proof>
  </goal>
  <goal name="VC separated_best_appr.35" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.53" steps="413"/></proof>
  </goal>
  <goal name="VC separated_best_appr.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.56" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.37" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.55" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.38" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.50"/></proof>
  </goal>
  <goal name="VC separated_best_appr.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.78"/></proof>
  </goal>
  <goal name="VC separated_best_appr.40" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.46" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.41" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.42" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.73" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.43" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.69" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.44" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.89" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.45" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.60" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.46" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.49" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.47" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.13" steps="418"/></proof>
  </goal>
  <goal name="VC separated_best_appr.48" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.46"/></proof>
  </goal>
  <goal name="VC separated_best_appr.49" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.81"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
