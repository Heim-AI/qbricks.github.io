%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 real arithmetic
div_by_zero: (REAL) -> REAL;
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witness_sort
  ASSERT (FORALL (a6 : ty): (sort(a6, witness(a6))));

int: ty;

infix_eqeq: (ty, uni, uni) -> BOOLEAN;

t : TYPE;

t1: ty;

infix_asdt: (t, t) -> t;

set: (ty) -> ty;

div: (INT, INT) -> INT;

mod: (INT, INT) -> INT;

infix_mngt: (ty, ty) -> ty;

infix_at: (ty, ty, uni, uni) -> uni;

% infix @_sort
  ASSERT
  (FORALL (a6 : ty, b : ty):
  (FORALL (x : uni, x1 : uni): (sort(b, infix_at(b, a6, x, x1)))));

int_iterate: (ty, uni, uni, INT, INT) -> uni;

% int_iterate_sort
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (x : uni, x1 : uni, x2 : INT, x3 : INT): (sort(im1, 
  int_iterate(im1, x, x1, x2, x3)))));

ind_isum: ((ARRAY INT OF INT), INT, INT) -> INT;

infix_pl_closure: (ARRAY INT OF (ARRAY INT OF INT));

t2tb5: ((ARRAY INT OF INT)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF INT)): (sort(infix_mngt(int, int), t2tb5(x))));

tb2t5: (uni) -> (ARRAY INT OF INT);

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY INT OF INT)):PATTERN (t2tb5(i1)):  (tb2t5(
  t2tb5(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb5(tb2t5(j))):  (t2tb5(tb2t5(j)) = j));

t2tb3: (INT) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : INT): (sort(int, t2tb3(x))));

tb2t3: (uni) -> INT;

% BridgeL
  ASSERT (FORALL (i1 : INT):PATTERN (t2tb3(i1)):  (tb2t3(t2tb3(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb3(tb2t3(j))):  (t2tb3(tb2t3(j)) = j));

t2tb13: ((ARRAY INT OF (ARRAY INT OF INT))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF (ARRAY INT OF INT))): (sort(infix_mngt(int, 
  infix_mngt(int, int)), t2tb13(x))));

tb2t13: (uni) -> (ARRAY INT OF (ARRAY INT OF INT));

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY INT OF (ARRAY INT OF INT))):PATTERN (t2tb13(i1)):  (
  tb2t13(t2tb13(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb13(tb2t13(j))):  (t2tb13(tb2t13(j)) = j));

% infix +_closure_def
  ASSERT
  (FORALL (y : INT, y1 : INT): (tb2t3(infix_at(int, int, infix_at(
  infix_mngt(int, int), int, t2tb13(infix_pl_closure), t2tb3(y)), 
  t2tb3(y1))) = (y + y1)));

% ind_isum_def
  ASSERT
  (FORALL (f : (ARRAY INT OF INT), i1 : INT, j : INT): (ind_isum(f, i1, j) = 
  tb2t3(int_iterate(int, t2tb13(infix_pl_closure), t2tb5(f), i1, j))));

power: (INT, INT) -> INT;

power_: (INT, INT) -> INT;

% power__def
  ASSERT
  (FORALL (e : INT, i1 : INT):
  (IF (0 <= i1) THEN (power_(e, i1) = power(e, i1)) ELSE (power_(e,
  i1) = 0) ENDIF));

polysquare: (INT, INT, INT, INT) -> INT;

angle : TYPE;

angle1: ty;

ang_add: (angle, angle) -> angle;

ang_zero: angle;

matrix: (ty) -> ty;

elts: (ty, uni) -> uni;

% elts_sort
  ASSERT
  (FORALL (a6 : ty):
  (FORALL (x : uni): (sort(infix_mngt(int, infix_mngt(int, a6)), elts(a6,
  x)))));

rows: (ty, uni) -> INT;

columns: (ty, uni) -> INT;

get: (ty, uni, INT, INT) -> uni;

% get_sort
  ASSERT
  (FORALL (a6 : ty):
  (FORALL (x : uni, x1 : INT, x2 : INT): (sort(a6, get(a6, x, x1, x2)))));

% get_def
  ASSERT
  (FORALL (a6 : ty):
  (FORALL (a7 : uni, r : INT, c : INT): (get(a6, a7, r, c) = infix_at(a6,
  int, infix_at(infix_mngt(int, a6), int, elts(a6, a7), t2tb3(r)), 
  t2tb3(c)))));

make_f: (ty, INT, INT, uni) -> uni;

% make_f_sort
  ASSERT
  (FORALL (a6 : ty):
  (FORALL (x : INT, x1 : INT, x2 : uni): (sort(matrix(a6), make_f(a6, x, x1,
  x2)))));

matrix_t: TYPE;

kronecker: (matrix_t, matrix_t) -> matrix_t;

result9: (matrix_t, matrix_t) -> (ARRAY INT OF (ARRAY INT OF t));

t2tb8: ((ARRAY INT OF t)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF t)): (sort(infix_mngt(int, t1), t2tb8(x))));

tb2t8: (uni) -> (ARRAY INT OF t);

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY INT OF t)):PATTERN (t2tb8(i1)):  (tb2t8(
  t2tb8(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb8(tb2t8(j))): 
  ((sort(infix_mngt(int, t1), j)) => (t2tb8(tb2t8(j)) = j)));

t2tb11: ((ARRAY INT OF (ARRAY INT OF t))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF (ARRAY INT OF t))): (sort(infix_mngt(int, 
  infix_mngt(int, t1)), t2tb11(x))));

tb2t11: (uni) -> (ARRAY INT OF (ARRAY INT OF t));

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY INT OF (ARRAY INT OF t))):PATTERN (t2tb11(i1)):  (
  tb2t11(t2tb11(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb11(tb2t11(j))): 
  ((sort(infix_mngt(int, infix_mngt(int, t1)), j)) => (t2tb11(
  tb2t11(j)) = j)));

t2tb: (t) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : t): (sort(t1, t2tb(x))));

tb2t: (uni) -> t;

% BridgeL
  ASSERT (FORALL (i1 : t):PATTERN (t2tb(i1)):  (tb2t(t2tb(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb(tb2t(j))): 
  ((sort(t1, j)) => (t2tb(tb2t(j)) = j)));

t2tb18: (matrix_t) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : matrix_t): (sort(matrix(t1), t2tb18(x))));

tb2t18: (uni) -> matrix_t;

% BridgeL
  ASSERT
  (FORALL (i1 : matrix_t):PATTERN (t2tb18(i1)):  (tb2t18(t2tb18(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb18(tb2t18(j))): 
  ((sort(matrix(t1), j)) => (t2tb18(tb2t18(j)) = j)));

% result_def
  ASSERT
  (FORALL (m : matrix_t, n6 : matrix_t, i1 : INT, j : INT): (tb2t(
  infix_at(t1, int, infix_at(infix_mngt(int, t1), int, t2tb11(result9(m,
  n6)), t2tb3(i1)), t2tb3(j))) = infix_asdt(tb2t(get(t1, t2tb18(m), div(i1, 
  rows(t1, t2tb18(n6))), div(j, columns(t1, t2tb18(n6))))), tb2t(get(t1, 
  t2tb18(n6), mod(i1, rows(t1, t2tb18(n6))), mod(j, columns(t1, 
  t2tb18(n6))))))));

% kronecker_def
  ASSERT
  (FORALL (m : matrix_t, n6 : matrix_t): (kronecker(m, n6) = tb2t18(
  make_f(t1, (rows(t1, t2tb18(m)) * rows(t1, t2tb18(n6))), (columns(t1, 
  t2tb18(m)) * columns(t1, t2tb18(n6))), t2tb11(result9(m, n6))))));

max: (INT, INT) -> INT;

% max_def
  ASSERT
  (FORALL (x : INT, y : INT):
  (IF (x <= y) THEN (max(x, y) = y) ELSE (max(x, y) = x) ENDIF));

ang_sum: ((ARRAY INT OF angle), INT, INT) -> angle;

ang_add_closure: (ARRAY angle OF (ARRAY angle OF angle));

t2tb23: ((ARRAY angle OF angle)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY angle OF angle)): (sort(infix_mngt(angle1, angle1), 
  t2tb23(x))));

tb2t23: (uni) -> (ARRAY angle OF angle);

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY angle OF angle)):PATTERN (t2tb23(i1)):  (tb2t23(
  t2tb23(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb23(tb2t23(j))): 
  ((sort(infix_mngt(angle1, angle1), j)) => (t2tb23(tb2t23(j)) = j)));

t2tb24: (angle) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : angle): (sort(angle1, t2tb24(x))));

tb2t24: (uni) -> angle;

% BridgeL
  ASSERT
  (FORALL (i1 : angle):PATTERN (t2tb24(i1)):  (tb2t24(t2tb24(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb24(tb2t24(j))): 
  ((sort(angle1, j)) => (t2tb24(tb2t24(j)) = j)));

t2tb25: ((ARRAY angle OF (ARRAY angle OF angle))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY angle OF (ARRAY angle OF angle))): (sort(
  infix_mngt(angle1, infix_mngt(angle1, angle1)), t2tb25(x))));

tb2t25: (uni) -> (ARRAY angle OF (ARRAY angle OF angle));

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY angle OF (ARRAY angle OF angle))):PATTERN (
  t2tb25(i1)):  (tb2t25(t2tb25(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb25(tb2t25(j))): 
  ((sort(infix_mngt(angle1, infix_mngt(angle1, angle1)), j)) => (t2tb25(
  tb2t25(j)) = j)));

% ang_add_closure_def
  ASSERT
  (FORALL (y : angle, y1 : angle): (tb2t24(infix_at(angle1, angle1, infix_at(
  infix_mngt(angle1, angle1), angle1, t2tb25(ang_add_closure), t2tb24(y)), 
  t2tb24(y1))) = ang_add(y, y1)));

t2tb26: ((ARRAY INT OF angle)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF angle)): (sort(infix_mngt(int, angle1), 
  t2tb26(x))));

tb2t26: (uni) -> (ARRAY INT OF angle);

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY INT OF angle)):PATTERN (t2tb26(i1)):  (tb2t26(
  t2tb26(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb26(tb2t26(j))): 
  ((sort(infix_mngt(int, angle1), j)) => (t2tb26(tb2t26(j)) = j)));

% ang_sum_def
  ASSERT
  (FORALL (f : (ARRAY INT OF angle), i1 : INT, j : INT):
  (IF (j <= i1) THEN (ang_sum(f, i1, j) = ang_zero) ELSE (ang_sum(f, i1,
  j) = tb2t24(int_iterate(angle1, t2tb25(ang_add_closure), t2tb26(f), i1,
  j))) ENDIF));

bitvec : TYPE;

bitvec1: ty;

value: (bitvec) -> (ARRAY INT OF INT);

length: (bitvec) -> INT;

in_range: (bitvec, INT) -> BOOLEAN;

% in_range_def
  ASSERT
  (FORALL (bv : bitvec, r : INT):
  ((in_range(bv, r)) <=> ((0 <= r) AND (r < length(bv)))));

bv_to_int: (bitvec) -> INT;

result23: (bitvec) -> (ARRAY INT OF INT);

% result_def
  ASSERT
  (FORALL (bv : bitvec, k4 : INT): (tb2t3(infix_at(int, int, t2tb5(
  result23(bv)), 
  t2tb3(k4))) = (IF (in_range(bv, k4)) THEN (tb2t3(infix_at(int, int, t2tb5(
                value(bv)), t2tb3(k4))) * power(2, ((length(bv) - 1) - k4)))
                ELSE 1 ENDIF)));

% bv_to_int_def
  ASSERT
  (FORALL (bv : bitvec): (bv_to_int(bv) = ind_isum(result23(bv), 0, 
  length(bv))));

int_to_bv: (INT, INT) -> bitvec;

hpart: (bitvec, INT) -> bitvec;

tpart: (bitvec, INT) -> bitvec;

htpart: (bitvec, INT, INT) -> bitvec;

is_a_ket_l: (matrix_t, INT) -> BOOLEAN;

% is_a_ket_l_def
  ASSERT
  (FORALL (m : matrix_t, l : INT):
  ((is_a_ket_l(m, l))
  <=> ((0 <= l)
      AND ((columns(t1, t2tb18(m)) = 1) AND (rows(t1, t2tb18(m)) = power(2,
          l))))));

ket: (INT, INT) -> matrix_t;

bv_to_ket: (bitvec) -> matrix_t;

% bv_to_ket_def
  ASSERT
  (FORALL (bv : bitvec): (bv_to_ket(bv) = ket(length(bv), bv_to_int(bv))));

circuit : TYPE;

circuit1: ty;

width: (circuit) -> INT;

size: (circuit) -> INT;

ancillas: (circuit) -> INT;

range: (circuit) -> INT;

basis_ket: (circuit, bitvec, bitvec) -> bitvec;

basis_ket_i: (circuit, bitvec, bitvec, INT) -> INT;

% basis_ket_i_def
  ASSERT
  (FORALL (c : circuit, x : bitvec, y : bitvec, i1 : INT): (basis_ket_i(c, x,
  y, i1) = tb2t3(infix_at(int, int, t2tb5(value(basis_ket(c, x, y))), 
  t2tb3(i1)))));

ang_ind_i: (circuit, bitvec, bitvec, INT) -> angle;

ang_ind_bound: (circuit) -> INT;

ang_ind: (circuit, bitvec, bitvec) -> angle;

ang_ind_i_closure: (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))));

t2tb50: ((ARRAY bitvec OF (ARRAY INT OF angle))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY bitvec OF (ARRAY INT OF angle))): (sort(
  infix_mngt(bitvec1, infix_mngt(int, angle1)), t2tb50(x))));

tb2t50: (uni) -> (ARRAY bitvec OF (ARRAY INT OF angle));

% BridgeL
  ASSERT
  (FORALL (i1 : (ARRAY bitvec OF (ARRAY INT OF angle))):PATTERN (t2tb50(i1)):
   (tb2t50(t2tb50(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb50(tb2t50(j))): 
  ((sort(infix_mngt(bitvec1, infix_mngt(int, angle1)), j)) => (t2tb50(
  tb2t50(j)) = j)));

t2tb30: (bitvec) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : bitvec): (sort(bitvec1, t2tb30(x))));

tb2t30: (uni) -> bitvec;

% BridgeL
  ASSERT
  (FORALL (i1 : bitvec):PATTERN (t2tb30(i1)):  (tb2t30(t2tb30(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb30(tb2t30(j))): 
  ((sort(bitvec1, j)) => (t2tb30(tb2t30(j)) = j)));

t2tb51: ((ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)))):
  (sort(infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))), 
  t2tb51(x))));

tb2t51: (uni) -> (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)));

% BridgeL
  ASSERT
  (FORALL
  (i1 : (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle)))):PATTERN (
  t2tb51(i1)):  (tb2t51(t2tb51(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb51(tb2t51(j))): 
  ((sort(infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))),
  j)) => (t2tb51(tb2t51(j)) = j)));

t2tb52: (circuit) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : circuit): (sort(circuit1, t2tb52(x))));

tb2t52: (uni) -> circuit;

% BridgeL
  ASSERT
  (FORALL (i1 : circuit):PATTERN (t2tb52(i1)):  (tb2t52(t2tb52(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb52(tb2t52(j))): 
  ((sort(circuit1, j)) => (t2tb52(tb2t52(j)) = j)));

t2tb53: ((ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL
  (x : (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))))):
  (sort(infix_mngt(circuit1, infix_mngt(bitvec1, infix_mngt(bitvec1, 
  infix_mngt(int, angle1)))), t2tb53(x))));

tb2t53: (uni) -> (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))));

% BridgeL
  ASSERT
  (FORALL
  (i1 : (ARRAY circuit OF (ARRAY bitvec OF (ARRAY bitvec OF (ARRAY INT OF angle))))):PATTERN (
  t2tb53(i1)):  (tb2t53(t2tb53(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb53(tb2t53(j))): 
  ((sort(infix_mngt(circuit1, infix_mngt(bitvec1, infix_mngt(bitvec1, 
  infix_mngt(int, angle1)))), j)) => (t2tb53(tb2t53(j)) = j)));

% ang_ind_i_closure_def
  ASSERT
  (FORALL (y : circuit, y1 : bitvec, y2 : bitvec, y3 : INT): (tb2t24(
  infix_at(angle1, int, infix_at(infix_mngt(int, angle1), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(int, angle1)), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))),
  circuit1, t2tb53(ang_ind_i_closure), t2tb52(y)), t2tb30(y1)), t2tb30(y2)), 
  t2tb3(y3))) = ang_ind_i(y, y1, y2, y3)));

% ang_ind_def
  ASSERT
  (FORALL (c : circuit, x : bitvec, y : bitvec): (ang_ind(c, x, y) = ang_sum(
  tb2t26(infix_at(infix_mngt(int, angle1), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(int, angle1)), bitvec1, infix_at(
  infix_mngt(bitvec1, infix_mngt(bitvec1, infix_mngt(int, angle1))),
  circuit1, t2tb53(ang_ind_i_closure), t2tb52(c)), t2tb30(x)), t2tb30(y))),
  0, ang_ind_bound(c))));

sequence: (circuit, circuit) -> circuit;

pat_sem: (circuit, matrix_t) -> matrix_t;

sem: (circuit, matrix_t, matrix_t) -> BOOLEAN;

% sem_def
  ASSERT
  (FORALL (c : circuit, x : matrix_t, y : matrix_t):
  ((sem(c, x, y))
  <=> ((is_a_ket_l(x, width(c))) AND (infix_eqeq(matrix(t1), t2tb18(
      pat_sem(c, x)), t2tb18(y))))));

place: (circuit, INT, INT) -> circuit;

cont_size: INT;

cont: (circuit, INT, INT, INT) -> circuit;

adder_gate_bound: (INT) -> INT;

modular_multiplier_g: (INT, INT, INT, INT) -> circuit;

modular_multiplier: (INT, INT, INT) -> circuit;

multiplier_gate_bound: (INT) -> INT;

a5: INT;

bound5: INT;

n5: INT;

k3: INT;

% H
  ASSERT (0 <= k3);

% H
  ASSERT (k3 < (2 * n5));

result79: circuit;

o3: circuit;

fc721: (INT) -> (ARRAY INT OF INT);

% fc_def
  ASSERT
  (FORALL (i1 : INT, l : INT): (tb2t3(infix_at(int, int, t2tb5(fc721(i1)), 
  t2tb3(l))) = (tb2t3(infix_at(int, int, t2tb5(value(int_to_bv(i1,
  (2 * n5)))), t2tb3(l))) * power_(2, (((2 * n5) - l) - 1)))));

% H
  ASSERT
  (IF (k3 = 0)
  THEN (LET o4 = (3 * n5) IN
       (LET o5 = (2 * n5) IN
       (LET o6 = ((2 * n5) - 1) IN
       (LET o7 = modular_multiplier(a5, bound5, n5) IN
       (((FORALL (i1 : INT):
         (((0 <= i1) AND (i1 < power_(2, n5))) => (o7 = modular_multiplier_g(
         mod(a5, bound5), bound5, n5, i1))))
        AND ((size(o7) <= polysquare((n5 + 1), (12 * cont_size),
            (((2 * cont_size) * adder_gate_bound(n5)) + 12), 0))
            AND ((ancillas(o7) = (n5 + 1))
                AND ((width(o7) = n5)
                    AND (FORALL (i1 : INT):
                        (((0 <= i1) AND (i1 < power_(2, n5))) => (pat_sem(o7, 
                        ket(n5, i1)) = ket(n5, mod((a5 * i1), bound5)))))))))
       AND ((result79 = cont(o7, o6, o5, o4))
           AND ((size(result79) <= (size(o7) * cont_size))
               AND ((ancillas(result79) = 0)
                   AND ((range(result79) = range(o7))
                       AND ((width(result79) = o4)
                           AND ((ancillas(result79) = ancillas(o7))
                               AND ((FORALL (bv : bitvec, y : bitvec):
                                    ((length(bv) = o4)
                                    => ((length(y) = range(o7))
                                       => ((tb2t3(infix_at(int, int, t2tb5(
                                          value(bv)), t2tb3(o6))) = 0) => (
                                          basis_ket(result79, bv, y) = bv)))))
                                   AND ((FORALL (bv : bitvec, y : bitvec):
                                        ((length(bv) = o4)
                                        => ((length(y) = range(o7))
                                           => ((tb2t3(infix_at(int, int, 
                                              t2tb5(value(bv)), 
                                              t2tb3(o6))) = 0) => (
                                              ang_ind(result79, bv,
                                              y) = ang_zero)))))
                                       AND ((FORALL (bv : bitvec,
                                            y : bitvec):
                                            (FORALL (i1 : INT):
                                            ((length(bv) = o4)
                                            => ((length(y) = range(o7))
                                               => (((0 <= i1) AND (i1 < o4))
                                                  => ((tb2t3(infix_at(int,
                                                     int, t2tb5(value(bv)), 
                                                     t2tb3(o6))) = 1) => (
                                                     basis_ket_i(result79,
                                                     bv, y,
                                                     i1) = (IF ((o5 <= i1)
                                                               AND (i1 < (o5 + 
                                                               width(o7))))
                                                           THEN 
                                                           basis_ket_i(o7, 
                                                           htpart(bv, o5, 
                                                           width(o7)), y,
                                                           (i1 - o5)) ELSE 
                                                           tb2t3(
                                                           infix_at(int, int, 
                                                           t2tb5(value(bv)), 
                                                           t2tb3(i1))) ENDIF))))))))
                                           AND ((FORALL (bv : bitvec,
                                                y : bitvec):
                                                ((length(bv) = o4)
                                                => ((length(y) = range(o7))
                                                   => ((tb2t3(infix_at(int,
                                                      int, t2tb5(value(bv)), 
                                                      t2tb3(o6))) = 1) => (
                                                      ang_ind(result79, bv,
                                                      y) = ang_ind(o7, 
                                                      htpart(bv, o5, 
                                                      width(o7)), y))))))
                                               AND ((FORALL (bv : bitvec):
                                                    ((length(bv) = o4)
                                                    => ((length(bv) = o4)
                                                       => ((tb2t3(
                                                          infix_at(int, int, 
                                                          t2tb5(value(bv)), 
                                                          t2tb3(o6))) = 0)
                                                          => (sem(result79, 
                                                          bv_to_ket(bv), 
                                                          bv_to_ket(bv)))))))
                                                   AND ((FORALL
                                                        (bv : bitvec):
                                                        ((length(bv) = o4)
                                                        => ((tb2t3(
                                                           infix_at(int, int, 
                                                           t2tb5(value(bv)), 
                                                           t2tb3(o6))) = 1)
                                                           => (sem(result79, 
                                                           bv_to_ket(bv), 
                                                           pat_sem(place(o7,
                                                           o5, o4), 
                                                           bv_to_ket(bv)))))))
                                                       AND (
                                                       width(result79) = o4))))))))))))))))))
  ELSE (LET o4 = (3 * n5) IN
       (LET o5 = (2 * n5) IN
       (LET o6 = (((2 * n5) - k3) - 1) IN
       (LET o7 = power_(2, k3) IN
       (LET o8 = modular_multiplier(o7, bound5, n5) IN
       (((FORALL (i1 : INT):
         (((0 <= i1) AND (i1 < power_(2, n5))) => (o8 = modular_multiplier_g(
         mod(o7, bound5), bound5, n5, i1))))
        AND ((size(o8) <= polysquare((n5 + 1), (12 * cont_size),
            (((2 * cont_size) * adder_gate_bound(n5)) + 12), 0))
            AND ((ancillas(o8) = (n5 + 1))
                AND ((width(o8) = n5)
                    AND (FORALL (i1 : INT):
                        (((0 <= i1) AND (i1 < power_(2, n5))) => (pat_sem(o8, 
                        ket(n5, i1)) = ket(n5, mod((o7 * i1), bound5)))))))))
       AND (LET o9 = cont(o8, o6, o5, o4) IN
           (((size(o9) <= (size(o8) * cont_size))
            AND ((ancillas(o9) = 0)
                AND ((range(o9) = range(o8))
                    AND ((width(o9) = o4)
                        AND ((ancillas(o9) = ancillas(o8))
                            AND ((FORALL (bv : bitvec, y : bitvec):
                                 ((length(bv) = o4)
                                 => ((length(y) = range(o8))
                                    => ((tb2t3(infix_at(int, int, t2tb5(
                                       value(bv)), t2tb3(o6))) = 0) => (
                                       basis_ket(o9, bv, y) = bv)))))
                                AND ((FORALL (bv : bitvec, y : bitvec):
                                     ((length(bv) = o4)
                                     => ((length(y) = range(o8))
                                        => ((tb2t3(infix_at(int, int, t2tb5(
                                           value(bv)), t2tb3(o6))) = 0) => (
                                           ang_ind(o9, bv, y) = ang_zero)))))
                                    AND ((FORALL (bv : bitvec, y : bitvec):
                                         (FORALL (i1 : INT):
                                         ((length(bv) = o4)
                                         => ((length(y) = range(o8))
                                            => (((0 <= i1) AND (i1 < o4))
                                               => ((tb2t3(infix_at(int, int, 
                                                  t2tb5(value(bv)), 
                                                  t2tb3(o6))) = 1) => (
                                                  basis_ket_i(o9, bv, y,
                                                  i1) = (IF ((o5 <= i1)
                                                            AND (i1 < (o5 + 
                                                            width(o8))))
                                                        THEN basis_ket_i(o8, 
                                                        htpart(bv, o5, 
                                                        width(o8)), y,
                                                        (i1 - o5)) ELSE 
                                                        tb2t3(infix_at(int,
                                                        int, t2tb5(
                                                        value(bv)), 
                                                        t2tb3(i1))) ENDIF))))))))
                                        AND ((FORALL (bv : bitvec,
                                             y : bitvec):
                                             ((length(bv) = o4)
                                             => ((length(y) = range(o8))
                                                => ((tb2t3(infix_at(int, int, 
                                                   t2tb5(value(bv)), 
                                                   t2tb3(o6))) = 1) => (
                                                   ang_ind(o9, bv, y) = 
                                                   ang_ind(o8, htpart(bv, o5, 
                                                   width(o8)), y))))))
                                            AND ((FORALL (bv : bitvec):
                                                 ((length(bv) = o4)
                                                 => ((length(bv) = o4)
                                                    => ((tb2t3(infix_at(int,
                                                       int, t2tb5(value(bv)), 
                                                       t2tb3(o6))) = 0)
                                                       => (sem(o9, 
                                                       bv_to_ket(bv), 
                                                       bv_to_ket(bv)))))))
                                                AND ((FORALL (bv : bitvec):
                                                     ((length(bv) = o4)
                                                     => ((tb2t3(infix_at(int,
                                                        int, t2tb5(
                                                        value(bv)), 
                                                        t2tb3(o6))) = 1)
                                                        => (sem(o9, 
                                                        bv_to_ket(bv), 
                                                        pat_sem(place(o8, o5,
                                                        o4), 
                                                        bv_to_ket(bv)))))))
                                                    AND (width(o9) = o4))))))))))))
           AND (LET o10 = (k3 - 1) IN
               (((width(o3) = (3 * n5))
                AND ((ancillas(o3) = (n5 + 1))
                    AND ((size(o3) <= (
                        multiplier_gate_bound(n5) * (o10 + 1)))
                        AND (FORALL (i1 : INT):
                            (((0 <= i1) AND (i1 < power_(2, (2 * n5)))) => (
                            pat_sem(o3, kronecker(ket((2 * n5), i1), ket(n5,
                            1))) = kronecker(ket((2 * n5), i1), ket(n5, mod(
                            power_(a5, ind_isum(fc721(i1), 0, (o10 + 1))),
                            bound5)))))))))
               AND ((result79 = sequence(o3, o9))
                   AND ((ancillas(result79) = max(ancillas(o3), 
                       ancillas(o9)))
                       AND ((size(result79) = (size(o3) + size(o9)))
                           AND ((range(result79) = (range(o3) + range(o9)))
                               AND ((width(result79) = width(o3))
                                   AND ((FORALL (x : bitvec, y : bitvec):
                                        ((length(x) = width(result79))
                                        => ((length(y) = range(result79))
                                           => (basis_ket(result79, x, y) = 
                                           basis_ket(o9, basis_ket(o3, x, 
                                           hpart(y, range(o3))), tpart(y, 
                                           range(o3)))))))
                                       AND ((FORALL (x : bitvec, y : bitvec):
                                            (FORALL (i1 : INT):
                                            ((length(x) = width(result79))
                                            => ((length(y) = range(result79))
                                               => (((0 <= i1) AND (i1 < 
                                                   width(o3)))
                                                  => (basis_ket_i(result79,
                                                  x, y, i1) = basis_ket_i(o9, 
                                                  basis_ket(o3, x, hpart(y, 
                                                  range(o3))), tpart(y, 
                                                  range(o3)), i1)))))))
                                           AND ((ang_ind_bound(result79) = (
                                               ang_ind_bound(o3) + 
                                               ang_ind_bound(o9)))
                                               AND ((FORALL (x : bitvec,
                                                    y : bitvec):
                                                    (FORALL (i1 : INT):
                                                    ((length(x) = 
                                                    width(result79))
                                                    => ((length(y) = 
                                                       range(result79))
                                                       => (((0 <= i1)
                                                           AND (i1 < 
                                                           ang_ind_bound(result79)))
                                                          => (
                                                          ang_ind_i(result79,
                                                          x, y,
                                                          i1) = (IF (i1 < 
                                                                ang_ind_bound(o3))
                                                                THEN 
                                                                ang_ind_i(o3,
                                                                x, hpart(y, 
                                                                range(o3)),
                                                                i1) ELSE 
                                                                ang_ind_i(o9, 
                                                                basis_ket(o3,
                                                                x, hpart(y, 
                                                                range(o3))), 
                                                                tpart(y, 
                                                                range(o3)),
                                                                (i1 - 
                                                                range(o3))) ENDIF)))))))
                                                   AND (FORALL (x : bitvec,
                                                       y : bitvec):
                                                       ((length(x) = 
                                                       width(result79))
                                                       => ((length(y) = 
                                                          range(result79))
                                                          => (
                                                          ang_ind(result79,
                                                          x, y) = ang_add(
                                                          ang_ind(o3, x, 
                                                          hpart(y, 
                                                          range(o3))), 
                                                          ang_ind(o9, 
                                                          basis_ket(o3, x, 
                                                          hpart(y, 
                                                          range(o3))), 
                                                          tpart(y, 
                                                          range(o3))))))))))))))))))))))))))) ENDIF);

QUERY
% h
  FALSE;
