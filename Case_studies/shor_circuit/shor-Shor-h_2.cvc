%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 real arithmetic
div_by_zero: (REAL) -> REAL;
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witness_sort
  ASSERT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

real: ty;

bool: ty;

match_bool: (ty, BITVECTOR(1), uni, uni) -> uni;

% match_bool_sort
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (x : BITVECTOR(1), x1 : uni, x2 : uni): (sort(a1, match_bool(a1, x,
  x1, x2)))));

% match_bool_True
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (z : uni, z1 : uni):
  ((sort(a1, z)) => (match_bool(a1, 0bin1, z, z1) = z))));

% match_bool_False
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (z : uni, z1 : uni):
  ((sort(a1, z1)) => (match_bool(a1, 0bin0, z, z1) = z1))));

index_bool: (BITVECTOR(1)) -> INT;

% index_bool_True
  ASSERT (index_bool(0bin1) = 0);

% index_bool_False
  ASSERT (index_bool(0bin0) = 1);

% bool_inversion
  ASSERT (FORALL (u : BITVECTOR(1)): ((u = 0bin1) OR (u = 0bin0)));

infix_eqeq: (ty, uni, uni) -> BOOLEAN;

t : TYPE;

t1: ty;

tzero: t;

prefix_mndt: (t) -> t;

infix_pldt: (t, t) -> t;

infix_mndt: (t, t) -> t;

% infix -._def
  ASSERT
  (FORALL (x : t, y : t): (infix_mndt(x, y) = infix_pldt(x, prefix_mndt(y))));

% opposite
  ASSERT (FORALL (a1 : t): (infix_mndt(a1, a1) = tzero));

real_part: (t) -> REAL;

im_part: (t) -> REAL;

real_: (t) -> BOOLEAN;

t2tb1: (REAL) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : REAL): (sort(real, t2tb1(x))));

tb2t1: (uni) -> REAL;

% BridgeL
  ASSERT (FORALL (i1 : REAL):PATTERN (t2tb1(i1)):  (tb2t1(t2tb1(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb1(tb2t1(j))):  (t2tb1(tb2t1(j)) = j));

% real__def
  ASSERT
  (FORALL (x : t):
  ((real_(x)) <=> (infix_eqeq(real, t2tb1(im_part(x)), t2tb1(0)))));

infix_lseqdt: (t, t) -> BOOLEAN;

t2tb: (t) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : t): (sort(t1, t2tb(x))));

tb2t: (uni) -> t;

% BridgeL
  ASSERT (FORALL (i1 : t):PATTERN (t2tb(i1)):  (tb2t(t2tb(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb(tb2t(j))): 
  ((sort(t1, j)) => (t2tb(tb2t(j)) = j)));

% infix <=._def
  ASSERT
  (FORALL (x : t, y : t):
  ((infix_lseqdt(x, y))
  <=> (((real_(x)) AND ((real_(y)) AND (real_part(x) <= real_part(y))))
      OR (infix_eqeq(t1, t2tb(x), t2tb(y))))));

infix_lsdt: (t, t) -> BOOLEAN;

% infix <._def
  ASSERT
  (FORALL (x : t, y : t):
  ((infix_lsdt(x, y))
  <=> ((infix_lseqdt(x, y)) AND (NOT (infix_eqeq(t1, t2tb(x), t2tb(y)))))));

infix_gtdt: (t, t) -> BOOLEAN;

% infix >._def
  ASSERT
  (FORALL (x : t, y : t):
  ((infix_gtdt(x, y))
  <=> ((infix_lseqdt(y, x)) AND (NOT (infix_eqeq(t1, t2tb(x), t2tb(y)))))));

set: (ty) -> ty;

mem: (ty, uni, uni) -> BOOLEAN;

infix_eqeq1: (ty, uni, uni) -> BOOLEAN;

div: (INT, INT) -> INT;

infix_mngt: (ty, ty) -> ty;

infix_at: (ty, ty, uni, uni) -> uni;

% infix @_sort
  ASSERT
  (FORALL (a1 : ty, b : ty):
  (FORALL (x : uni, x1 : uni): (sort(b, infix_at(b, a1, x, x1)))));

filter: (ty, uni, uni) -> uni;

% filter_sort
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (x : uni, x1 : uni): (sort(set(a1), filter(a1, x, x1)))));

map: (ty, ty, uni, uni) -> uni;

% map_sort
  ASSERT
  (FORALL (a1 : ty, b : ty):
  (FORALL (x : uni, x1 : uni): (sort(set(b), map(b, a1, x, x1)))));

op_neutral_left: (ty, uni, uni) -> BOOLEAN;

% op_neutral_left_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni, neutral1 : uni):
  ((op_neutral_left(im1, op1, neutral1))
  <=> (FORALL (e : uni):
      ((sort(im1, e)) => (infix_at(im1, im1, infix_at(infix_mngt(im1, im1),
      im1, op1, neutral1), e) = e))))));

op_neutral_right: (ty, uni, uni) -> BOOLEAN;

% op_neutral_right_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni, neutral1 : uni):
  ((op_neutral_right(im1, op1, neutral1))
  <=> (FORALL (e : uni):
      ((sort(im1, e)) => (infix_at(im1, im1, infix_at(infix_mngt(im1, im1),
      im1, op1, e), neutral1) = e))))));

op_assoc: (ty, uni) -> BOOLEAN;

% op_assoc_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni):
  (((op_assoc(im1, op1))
   => (FORALL (a1 : uni, b : uni, c : uni): (infix_at(im1, im1, infix_at(
      infix_mngt(im1, im1), im1, op1, infix_at(im1, im1, infix_at(
      infix_mngt(im1, im1), im1, op1, a1), b)), c) = infix_at(im1, im1, 
      infix_at(infix_mngt(im1, im1), im1, op1, a1), infix_at(im1, im1, 
      infix_at(infix_mngt(im1, im1), im1, op1, b), c)))))
  AND ((FORALL (a1 : uni, b : uni, c : uni):
       ((sort(im1, a1))
       => ((sort(im1, b))
          => ((sort(im1, c)) => (infix_at(im1, im1, infix_at(infix_mngt(im1,
             im1), im1, op1, infix_at(im1, im1, infix_at(infix_mngt(im1,
             im1), im1, op1, a1), b)), c) = infix_at(im1, im1, infix_at(
             infix_mngt(im1, im1), im1, op1, a1), infix_at(im1, im1, 
             infix_at(infix_mngt(im1, im1), im1, op1, b), c)))))))
      => (op_assoc(im1, op1))))));

neutral: (ty, uni, uni) -> BOOLEAN;

% neutral_def
  ASSERT
  (FORALL (im1 : ty):
  (FORALL (op1 : uni, neut : uni):
  ((neutral(im1, op1, neut))
  <=> ((op_neutral_left(im1, op1, neut))
      AND ((op_neutral_right(im1, op1, neut)) AND (op_assoc(im1, op1)))))));

n_part1: (ty, ty, uni, uni, uni) -> uni;

% n_part_sort
  ASSERT
  (FORALL (a1 : ty, im1 : ty):
  (FORALL (x : uni, x1 : uni, x2 : uni): (sort(set(a1), n_part1(im1, a1, x,
  x1, x2)))));

result5: (ty, ty, uni, uni) -> uni;

% result_sort
  ASSERT
  (FORALL (a1 : ty, im1 : ty):
  (FORALL (x : uni, x1 : uni): (sort(infix_mngt(a1, bool), result5(im1, a1,
  x, x1)))));

t2tb2: (BITVECTOR(1)) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : BITVECTOR(1)): (sort(bool, t2tb2(x))));

tb2t2: (uni) -> BITVECTOR(1);

% BridgeL
  ASSERT
  (FORALL (i1 : BITVECTOR(1)):PATTERN (t2tb2(i1)):  (tb2t2(t2tb2(i1)) = i1));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb2(tb2t2(j))): 
  ((sort(bool, j)) => (t2tb2(tb2t2(j)) = j)));

% result_def
  ASSERT
  (FORALL (a1 : ty, im1 : ty):
  (FORALL (op1 : uni, t2 : uni, e : uni):
  ((tb2t2(infix_at(bool, a1, result5(im1, a1, op1, t2), e)) = 0bin1)
  <=> (neutral(im1, op1, infix_at(im1, a1, t2, e))))));

% n_part_def
  ASSERT
  (FORALL (a1 : ty, im1 : ty):
  (FORALL (op1 : uni, s : uni, t2 : uni): (n_part1(im1, a1, op1, s, t2) = 
  filter(a1, result5(im1, a1, op1, t2), s))));

power: (INT, INT) -> INT;

cpower: (t, INT) -> t;

power_: (INT, INT) -> INT;

% power__def
  ASSERT
  (FORALL (e : INT, i1 : INT):
  (IF (0 <= i1) THEN (power_(e, i1) = power(e, i1)) ELSE (power_(e,
  i1) = 0) ENDIF));

angle1: ty;

ang_inv1: (uni) -> uni;

% ang_inv_sort
  ASSERT (FORALL (x : uni): (sort(angle1, ang_inv1(x))));

ang_add1: (uni, uni) -> uni;

% ang_add_sort
  ASSERT (FORALL (x : uni, x1 : uni): (sort(angle1, ang_add1(x, x1))));

ang_exp1: (uni) -> t;

ang_zero1: uni;

% ang_zero_sort
  ASSERT (sort(angle1, ang_zero1));

set1: (ty, ty, uni, uni, uni) -> uni;

% set_sort
  ASSERT
  (FORALL (a1 : ty, b : ty):
  (FORALL (x : uni, x1 : uni, x2 : uni): (sort(infix_mngt(a1, b), set1(b, a1,
  x, x1, x2)))));

matrix: (ty) -> ty;

elts: (ty, uni) -> uni;

% elts_sort
  ASSERT
  (FORALL (a1 : ty):
  (FORALL (x : uni): (sort(infix_mngt(int, infix_mngt(int, a1)), elts(a1,
  x)))));

circuit : TYPE;

circuit1: ty;

ancillas: (circuit) -> INT;

cont: (circuit, INT, INT, INT) -> circuit;

modular_multiplier: (INT, INT, INT) -> circuit;

diag_mat3: (uni, INT) -> uni;

% diag_mat_sort
  ASSERT (FORALL (x : uni, x1 : INT): (sort(matrix(t1), diag_mat3(x, x1))));

bound: INT;

n: INT;

k: INT;

result76: circuit;

o: circuit;

% H
  ASSERT ((k = 0) => (ancillas(result76) = 0));

% H
  ASSERT
  ((NOT (k = 0)) => (ancillas(modular_multiplier(power_(2, k), bound,
  n)) = (n + 1)));

% H
  ASSERT
  ((NOT (k = 0)) => (ancillas(cont(modular_multiplier(power_(2, k), bound,
  n), (((2 * n) - k) - 1), (2 * n), (3 * n))) = 0));

% H
  ASSERT
  ((NOT (k = 0)) => (ancillas(cont(modular_multiplier(power_(2, k), bound,
  n), (((2 * n) - k) - 1), (2 * n), (3 * n))) = ancillas(modular_multiplier(
  power_(2, k), bound, n))));

% H
  ASSERT (ancillas(result76) = (n + 1));

i: INT;

% H
  ASSERT (0 <= i);

% H
  ASSERT (i < power_(2, (2 * n)));

QUERY
% h
  FALSE;
