<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="exponentiation.mlw"/>
<theory name="Int_Exponentiation" proved="true">
 <goal name="VC power" expl="VC for power" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
 </goal>
 <goal name="Power_zero" proved="true">
 <proof prover="1"><result status="valid" time="0.06" steps="20"/></proof>
 </goal>
 <goal name="Power_one" proved="true">
 <proof prover="1"><result status="valid" time="0.08" steps="45"/></proof>
 </goal>
 <goal name="VC power_plus_one" expl="VC for power_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_plus_one.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_sum" expl="VC for power_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_sum.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_sum.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_sum.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_sum.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_sum.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC power_sum.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.60" steps="107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_mult" expl="VC for power_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_mult.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_mult.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_mult.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_mult.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC power_mult.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC power_mult.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC power_mult.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC power_mult.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_sum.0" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_mult.0" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_to_ind_iproduct" expl="VC for power_to_ind_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_to_ind_iproduct.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC power_to_ind_iproduct.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_to_ind_iproduct.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_to_ind_iproduct.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i=0)">
   <goal name="VC power_to_ind_iproduct.3.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
   </goal>
   <goal name="VC power_to_ind_iproduct.3.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC power_to_ind_iproduct.3.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC power_to_ind_iproduct.3.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="replace" proved="true" arg1="(power e i)" arg2="(e * power e (i - 1))">
      <goal name="VC power_to_ind_iproduct.3.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H1">
       <goal name="VC power_to_ind_iproduct.3.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC power_to_ind_iproduct.3.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
        <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0" expl="false case (postcondition)" proved="true">
        <transf name="destruct" proved="true" arg1="H">
         <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="H">
          <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
           <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0.1" expl="false case (postcondition)" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0.1.0" expl="false case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="H">
           <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0.1.0.0" expl="false case (postcondition)" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.0.1.0.0.0" expl="false case (postcondition)" proved="true">
            <proof prover="0"><result status="valid" time="1.73"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC power_to_ind_iproduct.3.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="0.06" steps="26"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC power_to_ind_iproduct.3.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="0.05" steps="26"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_transl" expl="VC for power_transl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_transl.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC power_transl.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_transl.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_transl.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i = 0)">
   <goal name="VC power_transl.3.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
   </goal>
   <goal name="VC power_transl.3.1" expl="false case (postcondition)" proved="true">
   <transf name="induction_arg_pr" proved="true" arg1="H">
    <goal name="VC power_transl.3.1.0" expl="false case (postcondition)" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC power_transl.3.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="VC power_transl.3.1.0.0.0" expl="false case (postcondition)" proved="true">
      <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
      </goal>
      <goal name="VC power_transl.3.1.0.0.1" expl="false case (postcondition)" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="VC power_transl.3.1.0.0.1.0" expl="false case (postcondition)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC power_transl.3.1.0.0.1.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H1">
         <goal name="VC power_transl.3.1.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="(ind_iproduct ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ e) k
     ((k + i) - 1))" arg2="(power e (i-1))">
          <goal name="VC power_transl.3.1.0.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC power_transl.3.1.0.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
           <proof prover="1"><result status="valid" time="0.06" steps="28"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC power_transl.3.1.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="3.22"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC power_transl.3.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.04" steps="28"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_to_power" expl="VC for ind_iproduct_to_power" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_to_power.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="VC ind_iproduct_to_power.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC ind_iproduct_to_power.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.56"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_to_power_gen" expl="VC for ind_iproduct_to_power_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_to_power_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ind_iproduct_to_power">
   <goal name="VC ind_iproduct_to_power_gen.0.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_sum_rev" expl="VC for power_sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_sum_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_eq" expl="VC for power_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_eq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_eq_gen" expl="VC for power_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_eq_gen.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_2_sum" expl="VC for power_2_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_2_sum.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_2_sum.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_2_sum.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_2_sum.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="VC power_2_sum.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC power_2_sum.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.57" steps="101"/></proof>
   </goal>
   <goal name="VC power_2_sum.4.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC power_2_sum.4.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((i - 1) + 1)" arg2="i" arg3="in" arg4="H">
     <goal name="VC power_2_sum.4.1.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="VC power_2_sum.4.1.0.0.0" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="VC power_2_sum.4.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="4"><result status="valid" time="0.94"/></proof>
       </goal>
      </transf>
      <transf name="destruct" proved="true" arg1="H1">
       <goal name="VC power_2_sum.4.1.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
       </goal>
       <goal name="VC power_2_sum.4.1.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="4"><result status="valid" time="0.68"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC power_2_sum.4.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_decomp" expl="VC for power_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_decomp.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC power_decomp.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.69" steps="156"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_decomp_minus_one" expl="VC for power_decomp_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_decomp_minus_one.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_decomp_minus_one.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_minus_one.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_minus_one.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i= 1)">
   <goal name="VC power_decomp_minus_one.3.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="24"/></proof>
   </goal>
   <goal name="VC power_decomp_minus_one.3.1" expl="false case (postcondition)" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC power_decomp_minus_one.3.1.0" expl="false case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC power_decomp_minus_one.3.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="replace" proved="true" arg1="(power 2 (i - 1))" arg2="(power 2 (i - 2) + power 2 (i - 2) )">
      <goal name="VC power_decomp_minus_one.3.1.0.0.0" expl="false case (postcondition)" proved="true">
      <proof prover="0"><result status="valid" time="1.46"/></proof>
      </goal>
      <goal name="VC power_decomp_minus_one.3.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="0.14" steps="28"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_decomp_" expl="VC for power_decomp_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_decomp_.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC power_decomp_.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC power_decomp_.2" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_decomp_one" expl="VC for power_decomp_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_decomp_one.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_one.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC power_decomp_one.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_one.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.87"/></proof>
  </goal>
  <goal name="VC power_decomp_one.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC power_decomp_one.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.23" steps="99"/></proof>
   </goal>
   <goal name="VC power_decomp_one.4.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.11"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_decomp_one_" expl="VC for power_decomp_one_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_decomp_one_.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_one_.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC power_decomp_one_.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC power_decomp_one_.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="5.93" steps="308"/></proof>
  </goal>
  <goal name="VC power_decomp_one_.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="266"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC growing_mult" expl="VC for growing_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC growing_mult.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_growing_mult" expl="VC for strict_growing_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_growing_mult.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC init_exp" expl="VC for init_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC init_exp.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
  <goal name="VC init_exp.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC init_exp.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_int_exp" expl="VC for positive_int_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_int_exp.0" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(k * power k (n - 1))" arg2="(power k n)">
   <goal name="VC positive_int_exp.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
   </goal>
   <goal name="VC positive_int_exp.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC positive_int_exp.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC positive_int_exp.1.0" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
   </goal>
   <goal name="VC positive_int_exp.1.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC positive_int_exp.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC positive_int_exp.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC positive_int_exp.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="VC positive_int_exp.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H1">
   <goal name="VC positive_int_exp.5.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="28"/></proof>
   </goal>
   <goal name="VC positive_int_exp.5.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC positive_int_exp.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC positive_int_exp.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_positive_int_exp" expl="VC for strict_positive_int_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_positive_int_exp.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="26"/></proof>
  </goal>
  <goal name="VC strict_positive_int_exp.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="VC strict_positive_int_exp.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12" steps="27"/></proof>
  </goal>
  <goal name="VC strict_positive_int_exp.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="24"/></proof>
  </goal>
  <goal name="VC strict_positive_int_exp.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.93" steps="121"/></proof>
  </goal>
  <goal name="VC strict_positive_int_exp.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.26" steps="152"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_minus_one" expl="VC for power_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_minus_one.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC power_minus_one.0.0" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
   </goal>
   <goal name="VC power_minus_one.0.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC power_minus_one.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC power_minus_one.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="28"/></proof>
  </goal>
  <goal name="VC power_minus_one.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC growing_exp" expl="VC for growing_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC growing_exp.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC growing_exp.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="27"/></proof>
  </goal>
  <goal name="VC growing_exp.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="27"/></proof>
  </goal>
  <goal name="VC growing_exp.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="30"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_growing_exp" expl="VC for strict_growing_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_growing_exp.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.25" steps="114"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_exp" expl="VC for unicity_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_exp.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_exp.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="28"/></proof>
   </goal>
   <goal name="VC unicity_exp.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bounded_sum_exp" expl="VC for bounded_sum_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bounded_sum_exp.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="VC bounded_sum_exp.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="32"/></proof>
  </goal>
  <goal name="VC bounded_sum_exp.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="34"/></proof>
  </goal>
  <goal name="VC bounded_sum_exp.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="VC bounded_sum_exp.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="VC bounded_sum_exp.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Power_" proved="true">
 <goal name="VC power_" expl="VC for power_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_to_" expl="VC for power_to_" proved="true">
 <proof prover="1"><result status="valid" time="0.07" steps="22"/></proof>
 </goal>
 <goal name="VC power_no_" expl="VC for power_no_" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="22"/></proof>
 </goal>
 <goal name="VC power__plus_one" expl="VC for power__plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power__plus_one.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="62"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power__eq" expl="VC for power__eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power__eq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power__sum" expl="VC for power__sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power__sum.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC power__sum.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="power__def" arg2="i,(x+y)">
    <goal name="VC power__sum.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="power__def" arg2="i,x">
     <goal name="VC power__sum.0.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="power__def" arg2="i,y">
      <goal name="VC power__sum.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="0.04" steps="30"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power__sum_rev" expl="VC for power__sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power__sum_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power__mult" expl="VC for power__mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power__mult.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_zero_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_zero_.0" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_one_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_one_.0" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_sum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_sum_.0" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_mult_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_mult_.0" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_pos_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_pos_.0" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Power_pos_gen_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Power_pos_gen_.0" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="power_two_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="power_two_.0" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="power_plus_one_two" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="power_plus_one_two.0" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC growing_right_power_" expl="VC for growing_right_power_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC growing_right_power_.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC growing_right_power_.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC growing_right_power_.2" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="VC growing_right_power_.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="30"/></proof>
  </goal>
  <goal name="VC growing_right_power_.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="31"/></proof>
  </goal>
  <goal name="VC growing_right_power_.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC growing_right_power_.5.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="28"/></proof>
   </goal>
   <goal name="VC growing_right_power_.5.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="91"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_of_one_" expl="VC for power_of_one_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_of_one_.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC power_of_one_.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="VC power_of_one_.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="VC power_of_one_.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="27"/></proof>
  </goal>
  <goal name="VC power_of_one_.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_power_" expl="VC for bound_power_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_power_.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC bound_power_.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="32"/></proof>
  </goal>
  <goal name="VC bound_power_.2" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(div i (power_ a (n - k)) &gt;= power_ a k)">
   <goal name="VC bound_power_.2.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="( div i (power_ a (n - k)) * (power_ a (n - k)) &gt;= power a n)">
    <goal name="VC bound_power_.2.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(power_ a n &lt;= (div i (power_ a (n - k)) * power_ a (n - k)) )">
     <goal name="VC bound_power_.2.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="5.92" steps="144"/></proof>
     </goal>
     <goal name="VC bound_power_.2.0.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.48" steps="38"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bound_power_.2.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="1.03" steps="194"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bound_power_.2.1" expl="false case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="34"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_inf" expl="VC for power_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_inf.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.51" steps="82"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_leq" expl="VC for power_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_leq.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(n=0)">
   <goal name="VC power_leq.0.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(a=0)">
    <goal name="VC power_leq.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.08" steps="24"/></proof>
    </goal>
    <goal name="VC power_leq.0.0.1" expl="false case (true case. postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC power_leq.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.12" steps="74"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC power_rises" expl="VC for power_rises" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_rises.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="22"/></proof>
  </goal>
  <goal name="VC power_rises.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC power_rises.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_expo_rises" expl="VC for int_expo_rises" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_expo_rises.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC int_expo_rises.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC int_expo_rises.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="24"/></proof>
  </goal>
  <goal name="VC int_expo_rises.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_expo_rises.3.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="28"/></proof>
   </goal>
   <goal name="VC int_expo_rises.3.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="28"/></proof>
   </goal>
   <goal name="VC int_expo_rises.3.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.12"/></proof>
   </goal>
   <goal name="VC int_expo_rises.3.3" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_expo_rises.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="104"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_power_2" expl="VC for bound_power_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_power_2.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.83" steps="1374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC polysquare" expl="VC for polysquare" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC polysquare.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.54" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC polysquare_leq_trans" expl="VC for polysquare_leq_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC polysquare_leq_trans.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC polysquare_leq_trans_sc" expl="VC for polysquare_leq_trans_sc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC polysquare_leq_trans_sc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="38"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="40"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="42"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="42"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="43"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.15" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="polysquare_def">
   <goal name="VC polysquare_leq_trans_sc.15.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mult_add_left">
    <goal name="VC polysquare_leq_trans_sc.15.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="polysquare_def">
     <goal name="VC polysquare_leq_trans_sc.15.0.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="leq_trans_add">
      <goal name="VC polysquare_leq_trans_sc.15.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_add_left">
       <goal name="VC polysquare_leq_trans_sc.15.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="leq_trans_add">
        <goal name="VC polysquare_leq_trans_sc.15.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.20"/></proof>
        </goal>
        <goal name="VC polysquare_leq_trans_sc.15.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.09"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC polysquare_leq_trans_sc.15.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC polysquare_leq_trans_sc.15.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
     </goal>
     <goal name="VC polysquare_leq_trans_sc.15.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
     </goal>
     <goal name="VC polysquare_leq_trans_sc.15.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
     </goal>
     <goal name="VC polysquare_leq_trans_sc.15.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC polysquare_leq_trans_sc.15.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
   </goal>
   <goal name="VC polysquare_leq_trans_sc.15.2" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
   </goal>
   <goal name="VC polysquare_leq_trans_sc.15.3" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="44"/></proof>
   </goal>
   <goal name="VC polysquare_leq_trans_sc.15.4" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC polysquare_leq_trans_sc.16" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC polysquare_update" expl="VC for polysquare_update" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC polysquare_update.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="30"/></proof>
  </goal>
  <goal name="VC polysquare_update.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="31"/></proof>
  </goal>
  <goal name="VC polysquare_update.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="31"/></proof>
  </goal>
  <goal name="VC polysquare_update.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="VC polysquare_update.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="VC polysquare_update.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="VC polysquare_update.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="VC polysquare_update.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="VC polysquare_update.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="34"/></proof>
  </goal>
  <goal name="VC polysquare_update.9" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="polysquare_def">
   <goal name="VC polysquare_update.9.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="polysquare_def">
    <goal name="VC polysquare_update.9.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="leq_trans_add">
     <goal name="VC polysquare_update.9.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="leq_trans_add">
      <goal name="VC polysquare_update.9.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="leq_trans_mult_right">
       <goal name="VC polysquare_update.9.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.04" steps="34"/></proof>
       </goal>
       <goal name="VC polysquare_update.9.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.04" steps="36"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC polysquare_update.9.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.04" steps="36"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC polysquare_update.9.0.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="34"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC polysquare_update.9.0.1" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="0.14" steps="34"/></proof>
    </goal>
    <goal name="VC polysquare_update.9.0.2" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="0.04" steps="34"/></proof>
    </goal>
    <goal name="VC polysquare_update.9.0.3" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="0.03" steps="34"/></proof>
    </goal>
    <goal name="VC polysquare_update.9.0.4" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="0.04" steps="34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC polysquare_update.9.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="34"/></proof>
   </goal>
   <goal name="VC polysquare_update.9.2" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="34"/></proof>
   </goal>
   <goal name="VC polysquare_update.9.3" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="34"/></proof>
   </goal>
   <goal name="VC polysquare_update.9.4" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="34"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC polysquare_update.10" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC power__minus_one" expl="VC for power__minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power__minus_one.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="22"/></proof>
  </goal>
  <goal name="VC power__minus_one.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC power__minus_one.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="27"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Complex_Exponentiation">
 <goal name="cpower_ttwo_two" proved="true">
 <transf name="replace" proved="true" arg1="(cpower ttwo 2)" arg2="(ttwo *. ttwo)">
  <goal name="cpower_ttwo_two.0" proved="true">
  <transf name="replace" proved="true" arg1="( ttwo)" arg2="(i_to_c 2)">
   <goal name="cpower_ttwo_two.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.13" steps="89"/></proof>
   </goal>
   <goal name="cpower_ttwo_two.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.10" steps="87"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cpower_ttwo_two.1" expl="equality hypothesis" proved="true">
  <transf name="replace" proved="true" arg1="2" arg2="(1+1)">
   <goal name="cpower_ttwo_two.1.0" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="Cpower_sum">
    <goal name="cpower_ttwo_two.1.0.0" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.12" steps="89"/></proof>
    </goal>
    <goal name="cpower_ttwo_two.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.09"/></proof>
    <transf name="rewrite" arg1="Cpower_one">
     <goal name="cpower_ttwo_two.1.0.0.0" expl="equality hypothesis">
     <proof prover="1"><result status="valid" time="0.08" steps="87"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="cpower_ttwo_two.1.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="87"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC squarert_two" expl="VC for squarert_two" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC squarert_two.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="real_squarert_two" proved="true">
 <proof prover="1"><result status="valid" time="0.11" steps="91"/></proof>
 </goal>
 <goal name="squarertTwo" proved="true">
 <transf name="replace" proved="true" arg1="2" arg2="(1+1)">
  <goal name="squarertTwo.0" proved="true">
  <transf name="rewrite" proved="true" arg1="Cpower_sum">
   <goal name="squarertTwo.0.0" proved="true">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <transf name="rewrite" proved="true" arg1="Cpower_one">
    <goal name="squarertTwo.0.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.13" steps="93"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="squarertTwo.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.10"/></proof>
   <transf name="rewrite" arg1="Cpower_one">
    <goal name="squarertTwo.0.0.0">
    <proof prover="1"><result status="valid" time="0.13" steps="93"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="squarertTwo.1" expl="equality hypothesis" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC complete_rt_two" expl="VC for complete_rt_two" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC complete_rt_two.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC complete_rt_two.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="div_mult">
    <goal name="VC complete_rt_two.0.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.24" steps="97"/></proof>
    </goal>
    <goal name="VC complete_rt_two.0.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(squarert_two *. squarert_two)" arg2="(cpower squarert_two 2)">
     <goal name="VC complete_rt_two.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="2" arg2="(1+1)">
      <goal name="VC complete_rt_two.0.0.1.0.0" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="0.18" steps="95"/></proof>
      </goal>
      <goal name="VC complete_rt_two.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="0.23"/></proof>
      <transf name="rewrite" arg1="Cpower_sum">
       <goal name="VC complete_rt_two.0.0.0.1.0.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="Cpower_one">
        <goal name="VC complete_rt_two.0.0.0.1.0.0.0" expl="equality hypothesis">
        <proof prover="1"><result status="valid" time="0.10" steps="95"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC complete_rt_two.0.0.0.1.0.1" expl="rewrite premises">
       <proof prover="1"><result status="valid" time="0.06" steps="97"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC complete_rt_two.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.11" steps="97"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_sum" expl="VC for cpower_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_sum.0" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC cpower_sum.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC cpower_sum.0.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.22" steps="98"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_one" expl="VC for cpower_one" proved="true">
 <proof prover="1"><result status="valid" time="0.12" steps="99"/></proof>
 </goal>
 <goal name="VC cpower_two" expl="VC for cpower_two" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_two.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC cpower_two.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="2" arg2="(1+1)">
    <goal name="VC cpower_two.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="cpower_sum">
     <goal name="VC cpower_two.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.14" steps="99"/></proof>
     </goal>
     <goal name="VC cpower_two.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="0.17" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cpower_two.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.07" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_sum_rev" expl="VC for cpower_sum_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="98"/></proof>
 </goal>
 <goal name="VC cpower_plus_one" expl="VC for cpower_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_plus_one.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="99"/></proof>
  </goal>
  <goal name="VC cpower_plus_one.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20" steps="100"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_zero" expl="VC for cpower_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_zero.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_eq" expl="VC for cpower_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_eq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_inv" expl="VC for cpower_inv">
 <transf name="split_vc" >
  <goal name="VC cpower_inv.0" expl="postcondition">
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  <transf name="case" arg1="(e = tzero)">
   <goal name="VC cpower_inv.0.0" expl="true case (postcondition)">
   <transf name="case" arg1="(i = 0)">
    <goal name="VC cpower_inv.0.0.0" expl="true case (postcondition)">
    <proof prover="1"><result status="valid" time="0.08" steps="97"/></proof>
    </goal>
    <goal name="VC cpower_inv.0.0.1" expl="false case (true case. postcondition)">
    <proof prover="1"><result status="valid" time="0.16" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_inv.0.1" expl="false case (postcondition)">
   <transf name="rewrite" arg1="cpower_sum_rev">
    <goal name="VC cpower_inv.0.1.0" expl="false case (postcondition)">
    <proof prover="1"><result status="valid" time="0.14" steps="99"/></proof>
    </goal>
    <goal name="VC cpower_inv.0.1.1" expl="rewrite premises">
    <proof prover="1"><result status="valid" time="0.07" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_cpower_leq" expl="VC for compat_cpower_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_cpower_leq.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="103"/></proof>
  </goal>
  <goal name="VC compat_cpower_leq.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  <transf name="destruct" arg1="H">
   <goal name="VC compat_cpower_leq.4.0" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC compat_cpower_leq.4.0.0" expl="postcondition">
    <transf name="replace" arg1="i" arg2="(i-1+1)">
     <goal name="VC compat_cpower_leq.4.0.0.0" expl="postcondition">
     <proof prover="0"><result status="valid" time="0.24"/></proof>
     </goal>
     <goal name="VC compat_cpower_leq.4.0.0.1" expl="equality hypothesis">
     <proof prover="1"><result status="valid" time="0.18" steps="103"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC compat_cpower_leq.4.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC compat_cpower_leq.4.1.0" expl="postcondition">
    <transf name="replace" arg1="i" arg2="(i-1+1)">
     <goal name="VC compat_cpower_leq.4.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="cpower_plus_one">
      <goal name="VC compat_cpower_leq.4.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cpower_plus_one">
       <goal name="VC compat_cpower_leq.4.1.0.0.0.0" expl="postcondition">
       <proof prover="1"><result status="valid" time="0.20" steps="108"/></proof>
       </goal>
       <goal name="VC compat_cpower_leq.4.1.0.0.0.1" expl="rewrite premises">
       <proof prover="1"><result status="valid" time="0.09" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC compat_cpower_leq.4.1.0.0.1" expl="rewrite premises">
      <proof prover="1"><result status="valid" time="0.06" steps="109"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC compat_cpower_leq.4.1.0.1" expl="equality hypothesis">
     <proof prover="1"><result status="valid" time="0.07" steps="107"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC compat_cpower_leq.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="104"/></proof>
  </goal>
  <goal name="VC compat_cpower_leq.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="104"/></proof>
  </goal>
  <goal name="VC compat_cpower_leq.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC compat_cpower_leq.4.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC compat_cpower_leq.4.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="i" arg2="(i-1+1)">
     <goal name="VC compat_cpower_leq.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.23"/></proof>
     </goal>
     <goal name="VC compat_cpower_leq.4.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.07" steps="103"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC compat_cpower_leq.4.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC compat_cpower_leq.4.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="i" arg2="(i-1+1)">
     <goal name="VC compat_cpower_leq.4.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="cpower_plus_one">
      <goal name="VC compat_cpower_leq.4.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="cpower_plus_one">
       <goal name="VC compat_cpower_leq.4.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="1"><result status="valid" time="0.19" steps="108"/></proof>
       </goal>
       <goal name="VC compat_cpower_leq.4.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="0.08" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC compat_cpower_leq.4.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="0.08" steps="109"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC compat_cpower_leq.4.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.07" steps="107"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_inv_rew" expl="VC for cpower_inv_rew" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_inv_rew.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_cpower" expl="VC for inv_cpower">
 <transf name="split_vc" >
  <goal name="VC inv_cpower.0" expl="postcondition">
  <transf name="case" arg1="(e =tzero)">
   <goal name="VC inv_cpower.0.0" expl="true case (postcondition)">
   <transf name="case" arg1="(i = 0)">
    <goal name="VC inv_cpower.0.0.0" expl="true case (postcondition)">
    <proof prover="4"><result status="valid" time="0.23"/></proof>
    </goal>
    <goal name="VC inv_cpower.0.0.1" expl="false case (true case. postcondition)">
    <transf name="assert" arg1="(cpower e i = tzero)">
     <goal name="VC inv_cpower.0.0.1.0" expl="asserted formula">
     <transf name="case" arg1="(i &gt; 0)">
      <goal name="VC inv_cpower.0.0.1.0.0" expl="asserted formula (true case)">
      <proof prover="1"><result status="valid" time="0.13" steps="103"/></proof>
      </goal>
      <goal name="VC inv_cpower.0.0.1.0.1" expl="asserted formula (false case)">
      <proof prover="1"><result status="valid" time="0.12" steps="103"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC inv_cpower.0.0.1.1" expl="false case (true case. postcondition)">
     <proof prover="1"><result status="valid" time="0.18" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC inv_cpower.0.1" expl="false case (postcondition)">
   <proof prover="4"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_div" expl="VC for cpower_div">
 <transf name="split_vc" >
  <goal name="VC cpower_div.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="101"/></proof>
  </goal>
  <goal name="VC cpower_div.1" expl="variant decrease">
  <transf name="destruct" arg1="H">
   <goal name="VC cpower_div.4.0" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.18"/></proof>
   </goal>
   <goal name="VC cpower_div.4.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cpower_div.4.1.0" expl="postcondition">
    <transf name="split_vc" >
     <goal name="VC cpower_div.4.1.0.0" expl="postcondition">
     <transf name="replace" arg1="n" arg2="(n-1+1)">
      <goal name="VC cpower_div.4.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cpower_plus_one">
       <goal name="VC cpower_div.4.1.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="cpower_plus_one">
        <goal name="VC cpower_div.4.1.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="cpower_plus_one">
         <goal name="VC cpower_div.4.1.0.0.0.0.0.0" expl="postcondition">
         <proof prover="0"><result status="valid" time="2.66"/></proof>
         </goal>
         <goal name="VC cpower_div.4.1.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="1"><result status="valid" time="0.17" steps="103"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cpower_div.4.1.0.0.0.0.1" expl="rewrite premises">
        <proof prover="1"><result status="valid" time="0.16" steps="105"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cpower_div.4.1.0.0.0.1" expl="rewrite premises">
       <proof prover="1"><result status="valid" time="0.16" steps="105"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cpower_div.4.1.0.0.1" expl="equality hypothesis">
      <proof prover="1"><result status="valid" time="0.11" steps="103"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_div.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="102"/></proof>
  </goal>
  <goal name="VC cpower_div.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="102"/></proof>
  </goal>
  <goal name="VC cpower_div.4" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC cpower_div.4.0" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC cpower_div.1.1" expl="variant decrease">
   <proof prover="1"><result status="valid" time="0.06" steps="102"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_div_rev" expl="VC for cpower_div_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_div_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_pi_bound_square_inv" expl="VC for cpower_pi_bound_square_inv">
 <transf name="replace" arg1="(i_to_c 4 /. cpower pi 2)" arg2="(cpower (i_to_c 2 /. pi ) 2)">
  <goal name="VC cpower_pi_bound_square_inv.0" expl="VC for cpower_pi_bound_square_inv">
  <transf name="replace" arg1="(i_to_c 4)" arg2="(cpower (i_to_c 2) 2)">
   <goal name="VC cpower_pi_bound_square_inv.0.0" expl="VC for cpower_pi_bound_square_inv">
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC cpower_pi_bound_square_inv.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_pi_bound_square_inv.1" expl="equality hypothesis">
  <transf name="split_vc" >
   <goal name="VC cpower_pi_bound_square_inv.1.0" expl="equality hypothesis">
   <transf name="assert" arg1="( (i_to_c 2 /. pi)  &lt;=. tone)">
    <goal name="VC cpower_pi_bound_square_inv.0.0.0" expl="asserted formula">
    <proof prover="0"><result status="valid" time="0.22"/></proof>
    </goal>
    <goal name="VC cpower_pi_bound_square_inv.0.0.1" expl="postcondition">
    <transf name="replace" arg1="2" arg2="(1+1)">
     <goal name="VC cpower_pi_bound_square_inv.0.0.1.0" expl="postcondition">
     <transf name="rewrite" arg1="cpower_sum">
      <goal name="VC cpower_pi_bound_square_inv.0.0.1.0.0" expl="postcondition">
      <proof prover="0"><result status="valid" time="0.22"/></proof>
      </goal>
      <goal name="VC cpower_pi_bound_square_inv.0.0.1.0.1" expl="rewrite premises">
      <proof prover="1"><result status="valid" time="0.06" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cpower_pi_bound_square_inv.0.0.1.1" expl="equality hypothesis">
     <proof prover="1"><result status="valid" time="0.08" steps="97"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_mult_split" expl="VC for cpower_mult_split">
 <transf name="split_vc" >
  <goal name="VC cpower_mult_split.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="101"/></proof>
  </goal>
  <goal name="VC cpower_mult_split.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="102"/></proof>
  </goal>
  <goal name="VC cpower_mult_split.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="102"/></proof>
  </goal>
  <goal name="VC cpower_mult_split.3" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC cpower_mult_split.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.20"/></proof>
   </goal>
   <goal name="VC cpower_mult_split.3.1" expl="postcondition">
   <transf name="replace" arg1="m" arg2="(m-1+1)">
    <goal name="VC cpower_mult_split.3.1.0" expl="postcondition">
    <proof prover="1"><result status="timeout" time="5.00"/></proof>
    </goal>
    <goal name="VC cpower_mult_split.3.1.1" expl="equality hypothesis">
    <transf name="rewrite" arg1="cpower_plus_one">
     <goal name="VC cpower_mult_split.3.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="cpower_plus_one">
      <goal name="VC cpower_mult_split.3.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cpower_plus_one">
       <goal name="VC cpower_mult_split.3.1.0.0.0.0" expl="postcondition">
       <proof prover="1"><result status="valid" time="0.07" steps="103"/></proof>
       </goal>
       <goal name="VC cpower_mult_split.3.1.0.0.0.1" expl="rewrite premises">
       <proof prover="1"><result status="valid" time="0.06" steps="105"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cpower_mult_split.3.1.0.0.1" expl="rewrite premises">
      <proof prover="1"><result status="valid" time="0.08" steps="105"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cpower_mult_split.3.1.0.1" expl="rewrite premises">
     <proof prover="1"><result status="valid" time="0.07" steps="105"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC not_cpower_zero" expl="VC for not_cpower_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC not_cpower_zero.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_inv_out" expl="VC for cpower_inv_out">
 <transf name="split_vc" >
  <goal name="VC cpower_inv_out.0" expl="postcondition">
  <transf name="replace" arg1="(cpower ((tone /. square_rt y) *. x) 2)" arg2="(cpower (tone/.square_rt y) 2 *. cpower x 2)">
   <goal name="VC cpower_inv_out.0.0" expl="postcondition">
   <transf name="replace" arg1="(cpower (tone /. square_rt y) 2)" arg2="(tone /. (cpower (square_rt y) 2))">
    <goal name="VC cpower_inv_out.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(cpower (square_rt y) 2)" arg2="y">
     <goal name="VC cpower_inv_out.0.0.0.0" expl="postcondition">
     <transf name="assert" arg1="(forall a b c. a*.b*.c = a*.c*.b)">
      <goal name="VC cpower_inv_out.0.0.0.0.0" expl="asserted formula">
      <proof prover="1"><result status="valid" time="0.08" steps="99"/></proof>
      </goal>
      <goal name="VC cpower_inv_out.0.0.0.0.1" expl="postcondition">
      <transf name="rewrite" arg1="h">
       <goal name="VC cpower_inv_out.0.0.0.0.1.0" expl="postcondition">
       <transf name="apply" arg1="one_mult_t">
        <goal name="VC cpower_inv_out.0.0.0.0.1.0.0" expl="apply premises">
        <proof prover="4"><result status="valid" time="0.22"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cpower_inv_out.0.0.0.1" expl="equality hypothesis">
     <transf name="replace" arg1="2" arg2="(1+1)">
      <goal name="VC cpower_inv_out.0.0.0.1.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="cpower_sum">
       <goal name="VC cpower_inv_out.0.0.0.1.0.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="cpower_one">
        <goal name="VC cpower_inv_out.0.0.0.1.0.0.0" expl="equality hypothesis">
        <proof prover="1"><result status="valid" time="0.13" steps="101"/></proof>
        </goal>
        <goal name="VC cpower_inv_out.0.0.0.1.0.0.1" expl="rewrite premises">
        <proof prover="1"><result status="valid" time="0.16" steps="99"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cpower_inv_out.0.0.0.1.0.1" expl="rewrite premises">
       <proof prover="1"><result status="valid" time="0.06" steps="101"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cpower_inv_out.0.0.0.1.1" expl="equality hypothesis">
      <proof prover="1"><result status="valid" time="0.17" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cpower_inv_out.0.0.1" expl="equality hypothesis">
    <transf name="replace" arg1="(tone /. cpower (square_rt y) 2)" arg2="(cpower tone 2 /. cpower (square_rt y) 2)">
     <goal name="VC cpower_inv_out.0.0.1.0" expl="equality hypothesis">
     <proof prover="4"><result status="valid" time="1.88"/></proof>
     </goal>
     <goal name="VC cpower_inv_out.0.0.1.1" expl="equality hypothesis">
     <transf name="replace" arg1="(cpower tone 2)" arg2="tone">
      <goal name="VC cpower_inv_out.0.0.1.1.0" expl="equality hypothesis">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC cpower_inv_out.0.0.1.1.1" expl="equality hypothesis">
      <transf name="replace" arg1="2" arg2="(1+1)">
       <goal name="VC cpower_inv_out.0.0.1.1.1.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="cpower_sum">
        <goal name="VC cpower_inv_out.0.0.1.1.1.0.0" expl="equality hypothesis">
        <proof prover="0"><result status="valid" time="0.19"/></proof>
        </goal>
        <goal name="VC cpower_inv_out.0.0.1.1.1.0.1" expl="rewrite premises">
        <proof prover="1"><result status="valid" time="0.10" steps="99"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cpower_inv_out.0.0.1.1.1.1" expl="equality hypothesis">
       <proof prover="1"><result status="valid" time="0.09" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_inv_out.0.1" expl="equality hypothesis">
   <proof prover="1"><result status="valid" time="0.26" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC squarert_inv" expl="VC for squarert_inv">
 <transf name="split_vc" >
  <goal name="VC squarert_inv.0" expl="postcondition">
  <transf name="apply" arg1="injective_square">
   <goal name="VC squarert_inv.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="1.77"/></proof>
   </goal>
   <goal name="VC squarert_inv.0.1" expl="apply premises">
   <transf name="replace" arg1="((tone /. square_rt x) *. (tone /. square_rt x))" arg2="(tone /.  x)">
    <goal name="VC squarert_inv.0.4.0" expl="apply premises">
    <proof prover="4"><result status="valid" time="0.40"/></proof>
    </goal>
    <goal name="VC squarert_inv.0.4.1" expl="equality hypothesis">
    <proof prover="4"><result status="valid" time="2.51"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC squarert_inv.0.2" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="1.62"/></proof>
   </goal>
   <goal name="VC squarert_inv.0.3" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.26"/></proof>
   </goal>
   <goal name="VC squarert_inv.0.4" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.34"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC squarert_inv_rev" expl="VC for squarert_inv_rev" proved="true">
 <proof prover="4"><result status="valid" time="0.38"/></proof>
 </goal>
 <goal name="VC cpower_squarert_two" expl="VC for cpower_squarert_two">
 <transf name="split_vc" >
  <goal name="VC cpower_squarert_two.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC cpower_squarert_two.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC cpower_squarert_two.2" expl="precondition">
  <transf name="destruct" arg1="H">
   <goal name="VC cpower_squarert_two.3.0" expl="postcondition">
   <proof prover="4"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="VC cpower_squarert_two.3.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cpower_squarert_two.3.1.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC cpower_squarert_two.3.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="H1">
      <goal name="VC cpower_squarert_two.3.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cpower_plus_one">
       <goal name="VC cpower_squarert_two.3.1.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="power__sum">
        <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="H">
         <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0" expl="postcondition">
         <transf name="eliminate_definition" >
          <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="squarert_two_def">
           <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="rewrite" arg1="square_rt_mult">
            <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="replace" arg1="ttwo" arg2="(i_to_c (power_ 2 1))">
             <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
             <proof prover="4"><result status="valid" time="0.31"/></proof>
             </goal>
             <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
             <proof prover="4"><result status="valid" time="0.41"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
            <proof prover="4"><result status="valid" time="0.31"/></proof>
            </goal>
            <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
            <proof prover="4"><result status="valid" time="0.36"/></proof>
            </goal>
            <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0.3" expl="rewrite premises">
            <proof prover="4"><result status="valid" time="0.30"/></proof>
            </goal>
            <goal name="VC cpower_squarert_two.3.1.0.0.0.0.0.0.0.0.4" expl="rewrite premises">
            <proof prover="4"><result status="valid" time="0.44"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cpower_squarert_two.3.1.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4"><result status="valid" time="1.62"/></proof>
        </goal>
        <goal name="VC cpower_squarert_two.3.1.0.0.0.0.2" expl="rewrite premises">
        <proof prover="4"><result status="valid" time="0.14"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cpower_squarert_two.3.1.0.0.0.1" expl="rewrite premises">
       <proof prover="4"><result status="valid" time="1.87"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_squarert_two.3" expl="postcondition">
  <proof prover="0"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_square_rt_raise" expl="VC for cpower_square_rt_raise">
 <transf name="split_vc" >
  <goal name="VC cpower_square_rt_raise.0" expl="postcondition">
  <transf name="rewrite" arg1="cpower_div">
   <goal name="VC cpower_square_rt_raise.0.0" expl="postcondition">
   <transf name="replace" arg1="(cpower (square_rt y) 2)" arg2="y">
    <goal name="VC cpower_square_rt_raise.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="2" arg2="(1+1)">
     <goal name="VC cpower_square_rt_raise.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="cpower_sum">
      <goal name="VC cpower_square_rt_raise.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="4"><result status="valid" time="0.29"/></proof>
      </goal>
      <goal name="VC cpower_square_rt_raise.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="0.09" steps="119"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cpower_square_rt_raise.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.11" steps="117"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cpower_square_rt_raise.0.0.1" expl="equality hypothesis">
    <proof prover="0"><result status="timeout" time="5.00"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_square_rt_raise.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.17"/></proof>
   </goal>
   <goal name="VC cpower_square_rt_raise.0.2" expl="rewrite premises">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_subst" expl="VC for cpower_subst">
 <transf name="split_vc" >
  <goal name="VC cpower_subst.0" expl="postcondition">
  <transf name="replace" arg1="(tone /. cpower x n)" arg2="(cpower x (-n))">
   <goal name="VC cpower_subst.0.0" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.28" steps="119"/></proof>
   </goal>
   <goal name="VC cpower_subst.0.1" expl="equality hypothesis">
   <transf name="rewrite" arg1="inv_cpower">
    <goal name="VC cpower_subst.0.1.0" expl="equality hypothesis">
    <proof prover="1"><result status="valid" time="0.14" steps="117"/></proof>
    </goal>
    <goal name="VC cpower_subst.0.1.1" expl="rewrite premises">
    <transf name="assert" arg1="(x&lt;&gt;tzero)">
     <goal name="VC cpower_subst.0.1.1.0" expl="asserted formula">
     <proof prover="1"><result status="valid" time="0.08" steps="117"/></proof>
     </goal>
     <goal name="VC cpower_subst.0.1.1.1" expl="rewrite premises">
     <proof prover="1"><result status="valid" time="0.25" steps="119"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_c_one_pos" expl="VC for cpower_c_one_pos">
 <transf name="split_vc" >
  <goal name="VC cpower_c_one_pos.0" expl="precondition">
  <transf name="replace" arg1="(sum (to_fset 0 n) (fun (i:int) -&gt; a *. cpower q i) )" arg2="(ind_sum  (fun (i:int) -&gt; a *. cpower q i) 0 n)">
   <goal name="VC geometric_series_tone.3.0" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="VC geometric_series_tone.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ind_sum_cardone">
     <goal name="VC geometric_series_tone.3.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC geometric_series_tone.3.0.0.0.0" expl="postcondition">
      <proof prover="1"><result status="valid" time="0.22" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC geometric_series_tone.3.0.0.1" expl="rewrite premises">
     <proof prover="1"><result status="valid" time="0.10" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC geometric_series_tone.3.0.1" expl="postcondition">
    <transf name="eliminate_let" >
     <goal name="VC geometric_series_tone.3.0.1.0" expl="postcondition">
     <transf name="rewrite" arg1="ind_sum_right_extension">
      <goal name="VC geometric_series_tone.3.0.1.0.0" expl="postcondition">
      <transf name="compute_specified" >
       <goal name="VC geometric_series_tone.3.0.1.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="ind_sum_to_sum">
        <goal name="VC geometric_series_tone.3.0.1.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="H">
         <goal name="VC geometric_series_tone.3.0.1.0.0.0.0.0" expl="postcondition">
         <transf name="replace" arg1="(cpower q (n - 1))" arg2="tone">
          <goal name="VC geometric_series_tone.3.0.1.0.0.0.0.0.0" expl="postcondition">
          <transf name="replace" arg1="((a *. i_to_c n))" arg2="(a*. (i_to_c (n-1) +. i_to_c 1))">
           <goal name="VC geometric_series_tone.3.0.1.0.0.0.0.0.0.0" expl="postcondition">
           <proof prover="1"><result status="valid" time="0.47" steps="133"/></proof>
           </goal>
           <goal name="VC geometric_series_tone.3.0.1.0.0.0.0.0.0.1" expl="equality hypothesis">
           <proof prover="1"><result status="valid" time="0.36" steps="133"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC geometric_series_tone.3.0.1.0.0.0.0.0.1" expl="equality hypothesis">
          <proof prover="1"><result status="valid" time="0.40" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC geometric_series_tone.3.0.1.0.1" expl="rewrite premises">
      <proof prover="1"><result status="valid" time="0.23" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC geometric_series_tone.3.1" expl="equality hypothesis">
   <proof prover="4"><result status="valid" time="2.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_c_one_pos.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="121"/></proof>
  </goal>
  <goal name="VC cpower_c_one_pos.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12" steps="121"/></proof>
  </goal>
  <goal name="VC cpower_c_one_pos.3" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_cpower" expl="VC for mult_cpower" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_cpower.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="121"/></proof>
  </goal>
  <goal name="VC mult_cpower.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="123"/></proof>
  </goal>
  <goal name="VC mult_cpower.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mult_cpower.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.11" steps="125"/></proof>
   </goal>
   <goal name="VC mult_cpower.5.1" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.21" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_cpower.3" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="125"/></proof>
  </goal>
  <goal name="VC mult_cpower.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="125"/></proof>
  </goal>
  <goal name="VC mult_cpower.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.23" steps="123"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_cpower_rev" expl="VC for mult_cpower_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_cpower_rev.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21" steps="117"/></proof>
  </goal>
  <goal name="VC mult_cpower_rev.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="119"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_iterate" expl="VC for cpower_iterate">
 <transf name="split_vc" >
  <goal name="VC cpower_iterate.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="119"/></proof>
  </goal>
  <goal name="VC cpower_iterate.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cpower_iterate.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="123"/></proof>
   </goal>
   <goal name="VC cpower_iterate.2.0" expl="variant decrease">
   <proof prover="1"><result status="valid" time="0.20" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_iterate.2" expl="variant decrease">
  <transf name="destruct" arg1="H">
   <goal name="VC cpower_iterate.4.0" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC cpower_iterate.4.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cpower_iterate.4.1.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC cpower_iterate.4.1.0.0" expl="postcondition">
     <transf name="replace" arg1="((i - 1) + 1)" arg2="i" arg3="in" arg4="H1">
      <goal name="VC cpower_iterate.4.1.0.0.0" expl="postcondition">
      <proof prover="4"><result status="valid" time="0.57"/></proof>
      </goal>
      <goal name="VC cpower_iterate.4.1.0.0.1" expl="equality hypothesis">
      <proof prover="1"><result status="valid" time="0.07" steps="121"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_iterate.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19" steps="123"/></proof>
  </goal>
  <goal name="VC cpower_iterate.4" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_modulus" expl="VC for cpower_modulus">
 <transf name="split_vc" >
  <goal name="VC cpower_modulus.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="121"/></proof>
  </goal>
  <goal name="VC cpower_modulus.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC cpower_modulus.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="VC cpower_modulus.3" expl="postcondition">
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC cpower_modulus.4" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC cpower_modulus.5" expl="postcondition">
  <transf name="destruct" arg1="H5">
   <goal name="VC cpower_modulus.9.0" expl="destruct premise">
   <transf name="eliminate_let" >
    <goal name="VC cpower_modulus.9.0.0" expl="destruct premise">
    <transf name="split_all_full" >
     <goal name="VC cpower_modulus.9.0.0.0" expl="destruct premise">
     <transf name="replace" arg1="((n - 1) + 1)" arg2="n" arg3="in" arg4="H13">
      <goal name="VC cpower_modulus.9.0.0.0.0" expl="destruct premise">
      <proof prover="1"><result status="valid" time="0.18" steps="123"/></proof>
      </goal>
      <goal name="VC cpower_modulus.9.0.0.0.1" expl="equality hypothesis">
      <proof prover="1"><result status="valid" time="0.08" steps="123"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_modulus.9.1" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.25" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_modulus.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cpower_modulus.6.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H3">
    <goal name="VC cpower_modulus.6.0.0" expl="destruct premise" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cpower_modulus.6.0.0.0" expl="destruct premise" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC cpower_modulus.6.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="replace" proved="true" arg1="((n - 1) + 1)" arg2="n" arg3="in" arg4="H11">
       <goal name="VC cpower_modulus.6.0.0.0.0.0" expl="destruct premise" proved="true">
       <proof prover="1"><result status="valid" time="0.17" steps="123"/></proof>
       </goal>
       <goal name="VC cpower_modulus.6.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="0.07" steps="123"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cpower_modulus.6.0.1" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="2.93"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_modulus.7" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC cpower_modulus.7.0" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_modulus.8" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC cpower_modulus.8.0" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC cpower_modulus.1.0" expl="variant decrease">
   <proof prover="1"><result status="valid" time="0.04" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_modulus.9" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC cpower_modulus.3.0" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.25"/></proof>
   </goal>
   <goal name="VC cpower_modulus.3.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC cpower_modulus.3.1.0" expl="postcondition">
    <proof prover="4"><result status="valid" time="0.41"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_mult_pre" expl="VC for cpower_mult_pre">
 <transf name="split_vc" >
  <goal name="VC cpower_mult_pre.0" expl="assertion">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC cpower_mult_pre.1" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="VC cpower_mult_pre.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="123"/></proof>
  </goal>
  <goal name="VC cpower_mult_pre.3" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="123"/></proof>
  </goal>
  <goal name="VC cpower_mult_pre.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="VC cpower_mult_pre.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="127"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_mult" expl="VC for cpower_mult">
 <transf name="split_vc" >
  <goal name="VC cpower_mult.0" expl="precondition">
  <transf name="eliminate_if" >
   <goal name="VC cpower_mult.0.0" expl="precondition">
   <transf name="destruct" arg1="H">
    <goal name="VC cpower_mult.2.0.0" expl="postcondition">
    <transf name="case" arg1="(0&lt;= m)">
     <goal name="VC cpower_mult.2.0.0.0" expl="true case (postcondition)">
     <proof prover="1"><result status="valid" time="0.18" steps="119"/></proof>
     </goal>
     <goal name="VC cpower_mult.2.0.0.1" expl="false case (postcondition)">
     <transf name="case" arg1="(x = tzero)">
      <goal name="VC cpower_mult.2.0.0.1.0" expl="false case (true case. postcondition)">
      <proof prover="4"><result status="valid" time="2.16"/></proof>
      </goal>
      <goal name="VC cpower_mult.2.0.0.1.1" expl="false case (postcondition)">
      <proof prover="0"><result status="valid" time="0.37"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_mult.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="117"/></proof>
  </goal>
  <goal name="VC cpower_mult.2" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_mult_rev" expl="VC for cpower_mult_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.14" steps="117"/></proof>
 </goal>
 <goal name="VC non_zero_cpower_pos" expl="VC for non_zero_cpower_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_zero_cpower_pos.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="121"/></proof>
  </goal>
  <goal name="VC non_zero_cpower_pos.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="123"/></proof>
  </goal>
  <goal name="VC non_zero_cpower_pos.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="123"/></proof>
  </goal>
  <goal name="VC non_zero_cpower_pos.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="123"/></proof>
  </goal>
  <goal name="VC non_zero_cpower_pos.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_cpower_pos.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="123"/></proof>
   </goal>
   <goal name="VC non_zero_cpower_pos.1.1" expl="variant decrease">
   <proof prover="1"><result status="valid" time="0.06" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_cpower_" expl="VC for inv_cpower_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_cpower_.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="119"/></proof>
  </goal>
  <goal name="VC inv_cpower_.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="121"/></proof>
  </goal>
  <goal name="VC inv_cpower_.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="121"/></proof>
  </goal>
  <goal name="VC inv_cpower_.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="121"/></proof>
  </goal>
  <goal name="VC inv_cpower_.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="121"/></proof>
  </goal>
  <goal name="VC inv_cpower_.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="119"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC zero_cpower_pos" expl="VC for zero_cpower_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC zero_cpower_pos.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="119"/></proof>
  </goal>
  <goal name="VC zero_cpower_pos.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="121"/></proof>
  </goal>
  <goal name="VC zero_cpower_pos.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC zero_cpower_pos.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.16" steps="121"/></proof>
   </goal>
   <goal name="VC zero_cpower_pos.1.0" expl="variant decrease">
   <proof prover="1"><result status="valid" time="0.16" steps="121"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC zero_cpower_pos.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC zero_cpower" expl="VC for zero_cpower" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC zero_cpower.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="119"/></proof>
  </goal>
  <goal name="VC zero_cpower.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="121"/></proof>
  </goal>
  <goal name="VC zero_cpower.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19" steps="123"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_zero_cpower" expl="VC for non_zero_cpower">
 <transf name="split_vc" >
  <goal name="VC non_zero_cpower.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="119"/></proof>
  </goal>
  <goal name="VC non_zero_cpower.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="119"/></proof>
  </goal>
  <goal name="VC non_zero_cpower.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="119"/></proof>
  </goal>
  <goal name="VC non_zero_cpower.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="121"/></proof>
  </goal>
  <goal name="VC non_zero_cpower.4" expl="postcondition">
  <transf name="case" arg1="(n= 0)">
   <goal name="VC non_zero_cpower.4.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.17" steps="119"/></proof>
   </goal>
   <goal name="VC non_zero_cpower.4.1" expl="false case (postcondition)">
   <transf name="case" arg1="(n &gt;= 0)">
    <goal name="VC non_zero_cpower.4.1.0" expl="false case (true case. postcondition)">
    <transf name="replace" arg1="(cpower i n)" arg2="(tone /. (cpower i (abs n)))">
     <goal name="VC non_zero_cpower.4.1.1.0" expl="false case (postcondition)">
     <proof prover="0"><result status="valid" time="0.37"/></proof>
     </goal>
     <goal name="VC non_zero_cpower.4.1.1.1" expl="equality hypothesis">
     <proof prover="0"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_zero_cpower.4.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.18" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_cpower_pos" expl="VC for real_cpower_pos">
 <transf name="split_vc" >
  <goal name="VC real_cpower_pos.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="123"/></proof>
  </goal>
  <goal name="VC real_cpower_pos.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="123"/></proof>
  </goal>
  <goal name="VC real_cpower_pos.2" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="125"/></proof>
  </goal>
  <goal name="VC real_cpower_pos.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="125"/></proof>
  </goal>
  <goal name="VC real_cpower_pos.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="125"/></proof>
  </goal>
  <goal name="VC real_cpower_pos.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="127"/></proof>
  </goal>
  <goal name="VC real_cpower_pos.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="127"/></proof>
  </goal>
  <goal name="VC real_cpower_pos.7" expl="postcondition">
  <transf name="case" arg1="(i &gt;= 0)">
   <goal name="VC real_cpower_pos.7.0" expl="true case (postcondition)">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC real_cpower_pos.7.1" expl="false case (postcondition)" proved="true">
   <proof prover="4"><result status="valid" time="0.14"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_cpower" expl="VC for real_cpower">
 <transf name="split_vc" >
  <goal name="VC real_cpower.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="123"/></proof>
  </goal>
  <goal name="VC real_cpower.1" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(i &gt;= 0)">
   <goal name="VC real_cpower.1.0" expl="true case (precondition)" proved="true">
   <proof prover="4"><result status="valid" time="0.15"/></proof>
   </goal>
   <goal name="VC real_cpower.1.1" expl="false case (precondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.19" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_cpower.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="125"/></proof>
  </goal>
  <goal name="VC real_cpower.3" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(abs i = 0)">
   <goal name="VC real_cpower.3.0" expl="true case (precondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="127"/></proof>
   </goal>
   <goal name="VC real_cpower.3.1" expl="false case (precondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_cpower.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="127"/></proof>
  </goal>
  <goal name="VC real_cpower.5" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(im_part (cpower elt (abs i)))" arg2="0.0" arg3="in" arg4="H">
   <goal name="VC real_cpower.5.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.12" steps="131"/></proof>
   </goal>
   <goal name="VC real_cpower.5.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="0.44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_cpower.6" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_cpower_is_pos" expl="VC for real_cpower_is_pos">
 <transf name="split_vc" >
  <goal name="VC real_cpower_is_pos.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="123"/></proof>
  </goal>
  <goal name="VC real_cpower_is_pos.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="124"/></proof>
  </goal>
  <goal name="VC real_cpower_is_pos.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="124"/></proof>
  </goal>
  <goal name="VC real_cpower_is_pos.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="124"/></proof>
  </goal>
  <goal name="VC real_cpower_is_pos.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="124"/></proof>
  </goal>
  <goal name="VC real_cpower_is_pos.5" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC real_cpower_is_pos.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="VC real_cpower_is_pos.5.1" expl="postcondition">
   <transf name="replace" arg1="i" arg2="(i-1+1)">
    <goal name="VC real_cpower_is_pos.5.1.0" expl="postcondition">
    <proof prover="1"><result status="timeout" time="5.00"/></proof>
    </goal>
    <goal name="VC real_cpower_is_pos.5.1.1" expl="equality hypothesis">
    <transf name="rewrite" arg1="cpower_plus_one">
     <goal name="VC real_cpower_is_pos.5.1.0.0" expl="postcondition">
     <proof prover="1"><result status="valid" time="0.28" steps="127"/></proof>
     </goal>
     <goal name="VC real_cpower_is_pos.5.1.0.1" expl="rewrite premises">
     <proof prover="1"><result status="valid" time="0.13" steps="127"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_cpower_is_strict_pos" expl="VC for real_cpower_is_strict_pos">
 <transf name="split_vc" >
  <goal name="VC real_cpower_is_strict_pos.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="123"/></proof>
  </goal>
  <goal name="VC real_cpower_is_strict_pos.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC real_cpower_is_strict_pos.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="124"/></proof>
  </goal>
  <goal name="VC real_cpower_is_strict_pos.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="124"/></proof>
  </goal>
  <goal name="VC real_cpower_is_strict_pos.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="124"/></proof>
  </goal>
  <goal name="VC real_cpower_is_strict_pos.5" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_modulus_square" expl="VC for real_modulus_square">
 <transf name="split_vc" >
  <goal name="VC real_modulus_square.0" expl="postcondition">
  <transf name="case" arg1="(x&lt;=.tzero)">
   <goal name="VC real_modulus_square.0.0" expl="true case (postcondition)">
   <transf name="replace" arg1="2" arg2="(1+1)">
    <goal name="VC real_modulus_square.0.0.0" expl="true case (postcondition)">
    <transf name="rewrite" arg1="cpower_sum">
     <goal name="VC real_modulus_square.0.0.0.0" expl="true case (postcondition)">
     <transf name="rewrite" arg1="cpower_sum">
      <goal name="VC real_modulus_square.0.0.0.0.0" expl="true case (postcondition)">
      <transf name="rewrite" arg1="cpower_one">
       <goal name="VC real_modulus_square.0.0.0.0.0.0" expl="true case (postcondition)">
       <transf name="rewrite" arg1="cpower_one">
        <goal name="VC real_modulus_square.0.0.0.0.0.0.0" expl="true case (postcondition)">
        <transf name="replace" arg1="(modulus x)" arg2="(modulus (-.x))">
         <goal name="VC real_modulus_square.0.0.0.0.0.0.0.0" expl="true case (postcondition)">
         <proof prover="4"><result status="valid" time="1.68"/></proof>
         </goal>
         <goal name="VC real_modulus_square.0.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="4"><result status="valid" time="1.87"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC real_modulus_square.0.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="1"><result status="valid" time="0.07" steps="119"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC real_modulus_square.0.0.0.0.0.1" expl="rewrite premises">
       <proof prover="1"><result status="valid" time="0.13" steps="119"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC real_modulus_square.0.0.0.0.1" expl="rewrite premises">
      <proof prover="1"><result status="valid" time="0.08" steps="121"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC real_modulus_square.0.0.0.1" expl="rewrite premises">
     <proof prover="1"><result status="valid" time="0.07" steps="121"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_modulus_square.0.0.1" expl="equality hypothesis">
    <proof prover="1"><result status="valid" time="0.20" steps="119"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_modulus_square.0.1" expl="false case (postcondition)">
   <proof prover="4"><result status="valid" time="2.11"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_modulus_pos" expl="VC for real_modulus_pos" proved="true">
 <proof prover="1"><result status="valid" time="0.17" steps="121"/></proof>
 </goal>
 <goal name="VC inv_rewrite" expl="VC for inv_rewrite">
 <transf name="split_vc" >
  <goal name="VC inv_rewrite.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="2.75"/></proof>
  </goal>
  <goal name="VC inv_rewrite.1" expl="postcondition">
  <transf name="replace" arg1="((conjugate x /. conjugate x) /. x)" arg2="((conjugate x /. (conjugate x *. x)))" arg3="in" arg4="H">
   <goal name="VC inv_rewrite.1.0" expl="postcondition">
   <proof prover="0"><result status="timeout" time="10.00"/></proof>
   </goal>
   <goal name="VC inv_rewrite.1.1" expl="equality hypothesis">
   <transf name="rewrite" arg1="H">
    <goal name="VC inv_rewrite.1.0.0" expl="postcondition">
    <transf name="apply" arg1="div_eq">
     <goal name="VC inv_rewrite.1.0.0.0" expl="apply premises">
     <proof prover="1"><result status="valid" time="0.10" steps="129"/></proof>
     </goal>
     <goal name="VC inv_rewrite.1.0.0.1" expl="apply premises">
     <transf name="rewrite" arg1="conjugate_to_modulus">
      <goal name="VC inv_rewrite.1.0.0.1.0" expl="apply premises">
      <transf name="replace" arg1="(conjugate x *. x)" arg2="(x*.conjugate x)">
       <goal name="VC inv_rewrite.1.0.0.1.0.0" expl="apply premises">
       <transf name="rewrite" arg1="cpower_two">
        <goal name="VC inv_rewrite.1.0.0.1.0.0.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="VC inv_rewrite.1.0.0.1.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="square_rt_spec1">
          <goal name="VC inv_rewrite.1.0.0.1.0.0.0.0.0" expl="apply premises">
          <proof prover="1"><result status="valid" time="0.08" steps="129"/></proof>
          </goal>
          <goal name="VC inv_rewrite.1.0.0.1.0.0.0.0.1" expl="rewrite premises">
          <proof prover="1"><result status="valid" time="0.22" steps="131"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC inv_rewrite.1.0.0.1.0.0.1" expl="rewrite premises">
        <proof prover="1"><result status="valid" time="0.08" steps="129"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC inv_rewrite.1.0.0.1.0.1" expl="equality hypothesis">
       <proof prover="1"><result status="valid" time="0.07" steps="129"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC inv_rewrite.1.0.0.2" expl="apply premises">
     <proof prover="0"><result status="valid" time="0.31"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_rewrite.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_modulus" expl="VC for inv_modulus">
 <transf name="split_vc" >
  <goal name="VC inv_modulus.0" expl="assertion">
  <transf name="split_all_full" >
   <goal name="VC inv_modulus.0.0" expl="assertion">
   <transf name="rewrite" arg1="inv_rewrite1">
    <goal name="VC inv_modulus.0.0.0" expl="assertion">
    <transf name="replace" arg1="(modulus (conjugate x /. cpower (modulus x) 2))" arg2="(modulus (conjugate x) *. (tone/. cpower (modulus x) 2))">
     <goal name="VC inv_modulus.1.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(modulus (conjugate x))" arg2="(modulus x)">
      <goal name="VC inv_modulus.1.0.0.0.0" expl="postcondition">
      <transf name="replace" arg1="2" arg2="(1+1)">
       <goal name="VC inv_modulus.1.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="cpower_plus_one">
        <goal name="VC inv_modulus.1.0.0.0.0.0.0" expl="postcondition">
        <proof prover="0"><result status="valid" time="0.56"/></proof>
        </goal>
        <goal name="VC inv_modulus.1.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="1"><result status="valid" time="0.08" steps="129"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC inv_modulus.1.0.0.0.0.1" expl="equality hypothesis">
       <proof prover="1"><result status="valid" time="0.23" steps="129"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC inv_modulus.1.0.0.0.1" expl="equality hypothesis">
      <proof prover="1"><result status="valid" time="0.37" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC inv_modulus.1.0.0.1" expl="equality hypothesis">
     <proof prover="3"><result status="valid" time="3.50"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC inv_modulus.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="0.07" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_modulus.1" expl="postcondition">
  <transf name="replace" arg1="(conjugate x /. (x *. conjugate x))" arg2="(conjugate x /. conjugate x *. (tone/.x))">
   <goal name="VC inv_modulus.0.0" expl="assertion">
   <proof prover="4"><result status="valid" time="3.72"/></proof>
   </goal>
   <goal name="VC inv_modulus.0.1" expl="equality hypothesis">
   <proof prover="0"><result status="valid" time="0.45"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_modulus" expl="VC for div_modulus">
 <transf name="split_vc" >
  <goal name="VC div_modulus.0" expl="assertion">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC div_modulus.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_frac_modulus" expl="VC for square_frac_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC square_frac_modulus.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="div_modulus">
   <goal name="VC square_frac_modulus.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.09" steps="129"/></proof>
   </goal>
   <goal name="VC square_frac_modulus.0.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC extract_2_sq_modulus" expl="VC for extract_2_sq_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC extract_2_sq_modulus.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.60"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_2_modulus_simpl" expl="VC for cpower_2_modulus_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_2_modulus_simpl.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_div_leq_one" expl="VC for cpower_div_leq_one">
 <transf name="split_vc" >
  <goal name="VC cpower_div_leq_one.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="135"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.22" steps="137"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="137"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.3" expl="precondition">
  <transf name="destruct" arg1="H">
   <goal name="VC cpower_div_leq_one.12.0" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
   <goal name="VC cpower_div_leq_one.12.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cpower_div_leq_one.12.1.0" expl="postcondition">
    <transf name="replace" arg1="i" arg2="(i-1+1)">
     <goal name="VC cpower_div_leq_one.12.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="cpower_plus_one">
      <goal name="VC cpower_div_leq_one.12.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cpower_plus_one">
       <goal name="VC cpower_div_leq_one.12.1.0.0.0.0" expl="postcondition">
       <transf name="split_vc" >
        <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.0" expl="postcondition">
        <proof prover="1"><result status="valid" time="0.56" steps="151"/></proof>
        </goal>
        <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1" expl="postcondition">
        <transf name="replace" arg1="(cpower a i /. cpower b i)" arg2="(((cpower a (i-1) /. cpower b (i-1))) *. (a/.b))">
         <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0" expl="postcondition">
         <transf name="replace" arg1="tone" arg2="(tone *.tone)">
          <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0" expl="postcondition">
          <transf name="rewrite" arg1="mult_div_comm">
           <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0.0" expl="postcondition">
           <transf name="apply" arg1="compat_order_mult_both">
            <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0.0.0" expl="apply premises">
            <transf name="split_vc" >
             <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
             <proof prover="1"><result status="valid" time="0.56" steps="151"/></proof>
             </goal>
             <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises">
             <proof prover="4"><result status="valid" time="5.08"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0.0.1" expl="apply premises">
            <proof prover="1"><result status="valid" time="0.10" steps="149"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0.1" expl="rewrite premises">
           <proof prover="0"><result status="valid" time="0.44"/></proof>
           </goal>
           <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.0.2" expl="rewrite premises">
           <proof prover="1"><result status="valid" time="0.67" steps="151"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.0.1" expl="equality hypothesis">
          <proof prover="1"><result status="valid" time="0.71" steps="151"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cpower_div_leq_one.12.1.0.0.0.0.1.1" expl="equality hypothesis">
         <proof prover="1"><result status="valid" time="0.18" steps="149"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cpower_div_leq_one.12.1.0.0.0.1" expl="rewrite premises">
       <proof prover="1"><result status="valid" time="0.58" steps="153"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cpower_div_leq_one.12.1.0.0.1" expl="rewrite premises">
      <transf name="split_vc" >
       <goal name="VC cpower_div_leq_one.12.1.0.0.1.0" expl="rewrite premises">
       <proof prover="4"><result status="valid" time="0.34"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cpower_div_leq_one.12.1.0.1" expl="equality hypothesis">
     <proof prover="1"><result status="valid" time="0.08" steps="149"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_div_leq_one.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="141"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20" steps="143"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29" steps="145"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="147"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.8" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="147"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="147"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="147"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="147"/></proof>
  </goal>
  <goal name="VC cpower_div_leq_one.12" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_cpower" expl="VC for cpower_cpower" proved="true">
 <proof prover="1"><result status="valid" time="0.19" steps="127"/></proof>
 </goal>
 <goal name="VC pre_cond_int_" expl="VC for pre_cond_int_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pre_cond_int_.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="131"/></proof>
  </goal>
  <goal name="VC pre_cond_int_.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="133"/></proof>
  </goal>
  <goal name="VC pre_cond_int_.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="135"/></proof>
  </goal>
  <goal name="VC pre_cond_int_.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="135"/></proof>
  </goal>
  <goal name="VC pre_cond_int_.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21" steps="135"/></proof>
  </goal>
  <goal name="VC pre_cond_int_.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="143"/></proof>
  </goal>
  <goal name="VC pre_cond_int_.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="143"/></proof>
  </goal>
  <goal name="VC pre_cond_int_.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.85" steps="153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC growing_mult" expl="VC for growing_mult">
 <transf name="split_vc" >
  <goal name="VC growing_mult.0" expl="postcondition">
  <transf name="assert" arg1="((n*. tone) &lt;=. (n *. m))">
   <goal name="VC growing_mult.0.0" expl="asserted formula">
   <proof prover="1"><result status="valid" time="0.29" steps="131"/></proof>
   </goal>
   <goal name="VC growing_mult.0.1" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_growing_mult_pos" expl="VC for strict_growing_mult_pos">
 <transf name="split_vc" >
  <goal name="VC strict_growing_mult_pos.0" expl="postcondition">
  <transf name="assert" arg1="(n &lt;=. (n *. m))">
   <goal name="VC strict_growing_mult_pos.0.0" expl="asserted formula">
   <transf name="case" arg1="(n = (n *. m))">
    <goal name="VC strict_growing_mult_pos.0.0.0" expl="asserted formula (true case)" proved="true">
    <proof prover="4"><result status="valid" time="0.28"/></proof>
    </goal>
    <goal name="VC strict_growing_mult_pos.0.0.1" expl="asserted formula (false case)">
    <proof prover="1"><result status="timeout" time="5.00"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC strict_growing_mult_pos.0.1" expl="postcondition">
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC init_exp" expl="VC for init_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC init_exp.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="127"/></proof>
  </goal>
  <goal name="VC init_exp.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="129"/></proof>
  </goal>
  <goal name="VC init_exp.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.26" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_exp_pos" expl="VC for int_exp_pos">
 <transf name="split_vc" >
  <goal name="VC int_exp_pos.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="133"/></proof>
  </goal>
  <goal name="VC int_exp_pos.1" expl="assertion">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC int_exp_pos.2" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="135"/></proof>
  </goal>
  <goal name="VC int_exp_pos.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC int_exp_pos.4" expl="precondition">
  <transf name="destruct" arg1="H2">
   <goal name="VC int_exp_pos.7.0" expl="postcondition">
   <proof prover="4"><result status="valid" time="0.45"/></proof>
   </goal>
   <goal name="VC int_exp_pos.7.1" expl="postcondition">
   <transf name="assert" arg1="(tone &gt;. tzero)">
    <goal name="VC int_exp_pos.7.1.0" expl="asserted formula">
    <proof prover="1"><result status="valid" time="0.58" steps="145"/></proof>
    </goal>
    <goal name="VC int_exp_pos.7.1.1" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.49" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_exp_pos.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC int_exp_pos.6" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC int_exp_pos.7" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC int_exp_pos.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_int_exp_pos" expl="VC for strict_int_exp_pos">
 <transf name="split_vc" >
  <goal name="VC strict_int_exp_pos.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="131"/></proof>
  </goal>
  <goal name="VC strict_int_exp_pos.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
  <goal name="VC strict_int_exp_pos.2" expl="postcondition">
  <transf name="replace" arg1="(cpower k n)" arg2="(cpower k (n-1) *. k)">
   <goal name="VC strict_int_exp_pos.2.0" expl="postcondition">
   <proof prover="0"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC strict_int_exp_pos.2.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="0.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC strict_int_exp_pos.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.17"/></proof>
  </goal>
  <goal name="VC strict_int_exp_pos.4" expl="postcondition">
  <transf name="assert" arg1="(tone &lt;. k)">
   <goal name="VC strict_int_exp_pos.4.0" expl="asserted formula">
   <proof prover="1"><result status="valid" time="0.08" steps="139"/></proof>
   </goal>
   <goal name="VC strict_int_exp_pos.4.1" expl="postcondition">
   <proof prover="4"><result status="valid" time="3.06"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_int_exp_neg" expl="VC for strict_int_exp_neg">
 <transf name="split_vc" >
  <goal name="VC strict_int_exp_neg.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC strict_int_exp_neg.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="VC strict_int_exp_neg.2" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC strict_int_exp_neg.3" expl="postcondition">
  <transf name="replace" arg1="(cpower k n)" arg2="(tone /. cpower k (-n))">
   <goal name="VC strict_int_exp_neg.2.0" expl="postcondition">
   <transf name="assert" arg1="(tone /. cpower k (- n) *. cpower k (-n) &lt;. tone *. cpower k (-n))">
    <goal name="VC strict_int_exp_neg.2.0.0" expl="asserted formula">
    <transf name="assert" arg1="(tone &lt;. cpower k (-n))">
     <goal name="VC strict_int_exp_neg.2.0.0.0" expl="asserted formula">
     <proof prover="1"><result status="valid" time="0.39" steps="135"/></proof>
     </goal>
     <goal name="VC strict_int_exp_neg.2.0.0.1" expl="asserted formula">
     <proof prover="4"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC strict_int_exp_neg.2.0.1" expl="postcondition">
    <proof prover="4"><result status="valid" time="4.15"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC strict_int_exp_neg.2.1" expl="equality hypothesis">
   <proof prover="1"><result status="valid" time="0.29" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC strict_int_exp_neg.4" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_exp_neg" expl="VC for int_exp_neg">
 <transf name="split_vc" >
  <goal name="VC int_exp_neg.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="129"/></proof>
  </goal>
  <goal name="VC int_exp_neg.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27" steps="131"/></proof>
  </goal>
  <goal name="VC int_exp_neg.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC int_exp_neg.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.25" steps="139"/></proof>
  </goal>
  <goal name="VC int_exp_neg.4" expl="postcondition">
  <transf name="replace" arg1="(cpower k n )" arg2="(tone /. cpower k (abs n))">
   <goal name="VC int_exp_neg.4.0" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC int_exp_neg.4.1" expl="equality hypothesis">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_exp_neg.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC int_exp_neg.6" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_exp" expl="VC for positive_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_exp.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20" steps="131"/></proof>
  </goal>
  <goal name="VC positive_exp.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="131"/></proof>
  </goal>
  <goal name="VC positive_exp.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="133"/></proof>
  </goal>
  <goal name="VC positive_exp.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="133"/></proof>
  </goal>
  <goal name="VC positive_exp.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC growing_exp_pos" expl="VC for growing_exp_pos">
 <transf name="split_vc" >
  <goal name="VC growing_exp_pos.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="131"/></proof>
  </goal>
  <goal name="VC growing_exp_pos.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC growing_exp_pos.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="136"/></proof>
  </goal>
  <goal name="VC growing_exp_pos.3" expl="postcondition">
  <transf name="rewrite" arg1="H1">
   <goal name="VC growing_exp_pos.3.0" expl="postcondition">
   <transf name="assert" arg1="(tone &lt;=. cpower k (n - m))">
    <goal name="VC growing_exp_pos.3.0.0" expl="asserted formula">
    <proof prover="1"><result status="valid" time="0.33" steps="138"/></proof>
    </goal>
    <goal name="VC growing_exp_pos.3.0.1" expl="postcondition">
    <transf name="assert" arg1="( cpower k m *. tone &lt;=. cpower k m *. cpower k (n - m))">
     <goal name="VC growing_exp_pos.3.0.1.0" expl="asserted formula">
     <transf name="rewrite" arg1="mult_comm">
      <goal name="VC growing_exp_pos.3.0.1.0.0" expl="asserted formula">
      <transf name="replace" arg1="(cpower k m *. cpower k (n - m))" arg2="(cpower k (n - m) *. cpower k m)">
       <goal name="VC growing_exp_pos.3.0.1.0.0.0" expl="asserted formula">
       <transf name="apply" arg1="compat_order_mult">
        <goal name="VC growing_exp_pos.3.0.1.0.0.0.0" expl="apply premises">
        <proof prover="1"><result status="valid" time="0.05" steps="138"/></proof>
        </goal>
        <goal name="VC growing_exp_pos.3.0.1.0.0.0.1" expl="apply premises">
        <proof prover="1"><result status="valid" time="0.37" steps="140"/></proof>
        </goal>
        <goal name="VC growing_exp_pos.3.0.1.0.0.0.2" expl="apply premises">
        <proof prover="1"><result status="valid" time="0.40" steps="140"/></proof>
        </goal>
        <goal name="VC growing_exp_pos.3.0.1.0.0.0.3" expl="apply premises">
        <proof prover="1"><result status="valid" time="0.39" steps="140"/></proof>
        </goal>
        <goal name="VC growing_exp_pos.3.0.1.0.0.0.4" expl="apply premises">
        <proof prover="1"><result status="valid" time="0.39" steps="140"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC growing_exp_pos.3.0.1.0.0.1" expl="equality hypothesis">
       <proof prover="1"><result status="valid" time="0.07" steps="138"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC growing_exp_pos.3.0.1.1" expl="postcondition">
     <proof prover="1"><result status="valid" time="0.07" steps="140"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC growing_exp" expl="VC for growing_exp">
 <transf name="split_vc" >
  <goal name="VC growing_exp.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="133"/></proof>
  </goal>
  <goal name="VC growing_exp.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC growing_exp.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="135"/></proof>
  </goal>
  <goal name="VC growing_exp.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="136"/></proof>
  </goal>
  <goal name="VC growing_exp.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="139"/></proof>
  </goal>
  <goal name="VC growing_exp.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="141"/></proof>
  </goal>
  <goal name="VC growing_exp.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC growing_exp.6.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.16" steps="141"/></proof>
   </goal>
   <goal name="VC growing_exp.6.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(m&lt;= n&lt;= 0)">
    <goal name="VC growing_exp.6.1.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.20" steps="141"/></proof>
    </goal>
    <goal name="VC growing_exp.6.1.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.20" steps="143"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC growing_exp.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="135"/></proof>
  </goal>
  <goal name="VC growing_exp.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="135"/></proof>
  </goal>
  <goal name="VC growing_exp.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="141"/></proof>
  </goal>
  <goal name="VC growing_exp.10" expl="precondition">
  <transf name="case" arg1="(tone &lt;. k)">
   <goal name="VC growing_exp.11.0" expl="true case (postcondition)">
   <transf name="destruct" arg1="H">
    <goal name="VC growing_exp.11.0.0" expl="true case (postcondition)">
    <transf name="eliminate_if" >
     <goal name="VC growing_exp.11.0.0.0" expl="true case (postcondition)">
     <proof prover="1"><result status="valid" time="0.06" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC growing_exp.11.0.1" expl="true case (postcondition)">
    <proof prover="0"><result status="valid" time="0.41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC growing_exp.11.1" expl="false case (postcondition)">
   <proof prover="0"><result status="valid" time="0.58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC growing_exp.11" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC growing_exp.11.0" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC growing_exp.6.0" expl="precondition">
   <proof prover="1"><result status="valid" time="0.08" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC growing_exp_arg" expl="VC for growing_exp_arg" proved="true">
 <proof prover="1"><result status="valid" time="0.28" steps="133"/></proof>
 </goal>
 <goal name="VC strict_growing_exp" expl="VC for strict_growing_exp">
 <transf name="split_vc" >
  <goal name="VC strict_growing_exp.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="129"/></proof>
  </goal>
  <goal name="VC strict_growing_exp.1" expl="precondition">
  <transf name="replace" arg1="n" arg2="(m + (n - m))">
   <goal name="VC strict_growing_exp.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.13" steps="129"/></proof>
   </goal>
   <goal name="VC strict_growing_exp.1.1" expl="equality hypothesis">
   <transf name="rewrite" arg1="H">
    <goal name="VC strict_growing_exp.3.0.0" expl="postcondition">
    <transf name="assert" arg1="((cpower k m *. cpower k (n-m)) &gt;. (cpower k m *. tone))">
     <goal name="VC strict_growing_exp.3.0.0.0" expl="asserted formula">
     <transf name="rewrite" arg1="mult_comm">
      <goal name="VC strict_growing_exp.3.0.0.0.0" expl="asserted formula">
      <transf name="replace" arg1="(cpower k m *. tone)" arg2="(tone *. cpower k m )">
       <goal name="VC strict_growing_exp.3.0.0.0.0.0" expl="asserted formula">
       <transf name="assert" arg1="((tone *. cpower k m ) &lt;. (cpower k (n - m) *. cpower k m) )">
        <goal name="VC strict_growing_exp.3.0.0.0.0.0.0" expl="asserted formula">
        <transf name="apply" arg1="strict_compat_order_mult">
         <goal name="VC strict_growing_exp.3.0.0.0.0.0.0.0" expl="apply premises">
         <proof prover="1"><result status="valid" time="0.35" steps="139"/></proof>
         </goal>
         <goal name="VC strict_growing_exp.3.0.0.0.0.0.0.1" expl="apply premises">
         <proof prover="1"><result status="valid" time="0.24" steps="139"/></proof>
         </goal>
         <goal name="VC strict_growing_exp.3.0.0.0.0.0.0.2" expl="apply premises">
         <proof prover="1"><result status="valid" time="0.23" steps="139"/></proof>
         </goal>
         <goal name="VC strict_growing_exp.3.0.0.0.0.0.0.3" expl="apply premises">
         <proof prover="1"><result status="valid" time="0.23" steps="139"/></proof>
         </goal>
         <goal name="VC strict_growing_exp.3.0.0.0.0.0.0.4" expl="apply premises">
         <proof prover="1"><result status="valid" time="0.24" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC strict_growing_exp.3.0.0.0.0.0.1" expl="asserted formula">
        <proof prover="1"><result status="valid" time="0.27" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC strict_growing_exp.3.0.0.0.0.1" expl="equality hypothesis">
       <proof prover="1"><result status="valid" time="0.19" steps="137"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC strict_growing_exp.3.0.0.1" expl="postcondition">
     <proof prover="0"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC strict_growing_exp.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="139"/></proof>
  </goal>
  <goal name="VC strict_growing_exp.3" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_comm_pos" expl="VC for cpower_comm_pos">
 <transf name="eliminate_let" >
  <goal name="VC cpower_comm_pos.0" expl="VC for cpower_comm_pos">
  <transf name="split_vc" >
   <goal name="VC cpower_comm_pos.0.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="135"/></proof>
   </goal>
   <goal name="VC cpower_comm_pos.0.1" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="137"/></proof>
   </goal>
   <goal name="VC cpower_comm_pos.0.2" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="139"/></proof>
   </goal>
   <goal name="VC cpower_comm_pos.0.3" expl="variant decrease">
   <transf name="case" arg1="(n= 0)">
    <goal name="VC cpower_comm_pos.0.3.0" expl="true case (variant decrease)">
    <transf name="apply" arg1="goal_comm">
     <goal name="VC cpower_comm_pos.0.7.1.0" expl="apply premises">
     <transf name="destruct" arg1="H">
      <goal name="VC cpower_comm_pos.0.7.1.0.0" expl="apply premises">
      <proof prover="1"><result status="valid" time="0.22" steps="133"/></proof>
      </goal>
      <goal name="VC cpower_comm_pos.0.7.1.0.1" expl="apply premises">
      <proof prover="1"><result status="valid" time="0.11" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cpower_comm_pos.0.3.1" expl="false case (variant decrease)" proved="true">
    <proof prover="1"><result status="valid" time="0.09" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_comm_pos.0.4" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.17" steps="139"/></proof>
   </goal>
   <goal name="VC cpower_comm_pos.0.5" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.17" steps="139"/></proof>
   </goal>
   <goal name="VC cpower_comm_pos.0.6" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="139"/></proof>
   </goal>
   <goal name="VC cpower_comm_pos.0.7" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_comm" expl="VC for cpower_comm">
 <transf name="split_vc" >
  <goal name="VC cpower_comm.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="131"/></proof>
  </goal>
  <goal name="VC cpower_comm.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC cpower_comm.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="131"/></proof>
  </goal>
  <goal name="VC cpower_comm.3" expl="precondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC cpower_comm.4" expl="precondition">
  <transf name="case" arg1="(0&lt;= n)">
   <goal name="VC cpower_comm.4.0" expl="true case (precondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="133"/></proof>
   </goal>
   <goal name="VC cpower_comm.4.1" expl="false case (precondition)">
   <proof prover="0"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_comm.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="133"/></proof>
  </goal>
  <goal name="VC cpower_comm.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC cpower_comm.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="135"/></proof>
  </goal>
  <goal name="VC cpower_comm.8" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_exp" expl="VC for unicity_exp">
 <transf name="split_vc" >
  <goal name="VC unicity_exp.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="129"/></proof>
  </goal>
  <goal name="VC unicity_exp.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="129"/></proof>
  </goal>
  <goal name="VC unicity_exp.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="131"/></proof>
  </goal>
  <goal name="VC unicity_exp.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_exp.3.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC unicity_exp.3.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.20" steps="131"/></proof>
    </goal>
    <goal name="VC unicity_exp.5.0.2" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.18" steps="133"/></proof>
    </goal>
    <goal name="VC unicity_exp.5.0.1" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.22" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_exp.5.1" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.19" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_exp.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="131"/></proof>
  </goal>
  <goal name="VC unicity_exp.5" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_i_to_c" expl="VC for cpower_i_to_c">
 <transf name="split_vc" >
  <goal name="VC cpower_i_to_c.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13" steps="133"/></proof>
  </goal>
  <goal name="VC cpower_i_to_c.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC cpower_i_to_c.2" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="135"/></proof>
  </goal>
  <goal name="VC cpower_i_to_c.3" expl="precondition">
  <transf name="destruct" arg1="H">
   <goal name="VC cpower_i_to_c.4.0" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.27"/></proof>
   </goal>
   <goal name="VC cpower_i_to_c.4.1" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.35" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_i_to_c.4" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC cpower_i_to_c.4.0" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC cpower_i_to_c.2.0" expl="variant decrease">
   <proof prover="1"><result status="valid" time="0.23" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_i_to_c_rev" expl="VC for cpower_i_to_c_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.17" steps="129"/></proof>
 </goal>
 <goal name="VC geometric_series" expl="VC for geometric_series">
 <transf name="split_vc" >
  <goal name="VC geometric_series.0" expl="variant decrease">
  <transf name="assert" arg1="(forall a b c. b &lt;&gt; tzero -&gt; c*.a = (c*. (b*.a)) /.b)">
   <goal name="VC geometric_series.5.0" expl="asserted formula">
   <transf name="split_vc" >
    <goal name="VC geometric_series.5.0.0" expl="asserted formula">
    <transf name="replace" arg1="(b*.a)" arg2="(a*.b)">
     <goal name="VC geometric_series.5.0.0.0" expl="asserted formula">
     <proof prover="0"><result status="valid" time="0.30"/></proof>
     </goal>
     <goal name="VC geometric_series.5.0.0.1" expl="equality hypothesis">
     <proof prover="1"><result status="valid" time="0.09" steps="142"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC geometric_series.5.1" expl="assertion">
   <proof prover="1"><result status="valid" time="0.48" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC geometric_series.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19" steps="131"/></proof>
  </goal>
  <goal name="VC geometric_series.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20" steps="132"/></proof>
  </goal>
  <goal name="VC geometric_series.3" expl="precondition">
  <transf name="assert" arg1="(forall a b c. (a-.b) *. c = a*.c -. b*.c)">
   <goal name="VC geometric_series.3.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.38" steps="138"/></proof>
   </goal>
   <goal name="VC geometric_series.3.1" expl="precondition">
   <transf name="rewrite" arg1="h">
    <goal name="VC geometric_series.6.1.0" expl="assertion">
    <transf name="apply" arg1="substr_eq_t">
     <goal name="VC geometric_series.6.1.0.0" expl="apply premises">
     <proof prover="1"><result status="valid" time="0.34" steps="144"/></proof>
     </goal>
     <goal name="VC geometric_series.6.1.0.1" expl="apply premises">
     <proof prover="4"><result status="valid" time="0.34"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC geometric_series.4" expl="assertion">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC geometric_series.5" expl="assertion">
  <transf name="destruct" arg1="H">
   <goal name="VC geometric_series.7.0" expl="postcondition">
   <transf name="rewrite" arg1="sum_one">
    <goal name="VC geometric_series.7.0.0" expl="postcondition">
    <transf name="compute_specified" >
     <goal name="VC geometric_series.7.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(choose (to_fset 0 n))" arg2="0">
      <goal name="VC geometric_series.7.0.0.0.0" expl="postcondition">
      <proof prover="0"><result status="valid" time="0.27"/></proof>
      </goal>
      <goal name="VC geometric_series.7.0.0.0.1" expl="equality hypothesis">
      <proof prover="4"><result status="valid" time="1.74"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC geometric_series.7.0.1" expl="rewrite premises">
    <proof prover="1"><result status="valid" time="0.28" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC geometric_series.7.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC geometric_series.7.1.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC geometric_series.7.1.0.0" expl="postcondition">
     <transf name="replace" arg1="(add (n - 1) (to_fset 0 (n - 1)))" arg2="(to_fset 0 n)" arg3="in" arg4="H3">
      <goal name="VC geometric_series.7.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H3">
       <goal name="VC geometric_series.7.1.0.0.0.0" expl="postcondition">
       <transf name="compute_specified" >
        <goal name="VC geometric_series.7.1.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="H1">
         <goal name="VC geometric_series.7.1.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H">
          <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="H7">
           <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="assert" arg1="(forall a b c d. d&lt;&gt; tzero -&gt; ((a*. b)/.d +. (a*.c)/.d = (a *. (b+.c))/.d))">
            <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.0" expl="asserted formula">
            <transf name="split_vc" >
             <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula">
             <proof prover="0"><result status="valid" time="0.39"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1" expl="postcondition">
            <transf name="rewrite" arg1="h">
             <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0" expl="postcondition">
             <transf name="apply" arg1="div_eq">
              <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
              <transf name="apply" arg1="mult_eq_t">
               <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
               <proof prover="1"><result status="valid" time="0.21" steps="139"/></proof>
               </goal>
               <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises">
               <transf name="assert" arg1="(forall a b c. (a-.b) +. (c-.a)= c-.b)">
                <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0" expl="asserted formula">
                <transf name="split_vc" >
                 <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0" expl="asserted formula">
                 <transf name="replace" arg1="(a-.b)" arg2="(a+. (-.b))">
                  <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0" expl="asserted formula">
                  <transf name="replace" arg1="(c-.a)" arg2="(c+. (-.a))">
                   <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula">
                   <transf name="replace" arg1="(c-.b)" arg2="(c+. (-.b))">
                    <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0.0.0" expl="asserted formula">
                    <transf name="assert" arg1="(forall a b c d. (a+.b) +. (c+.d)= a+.d +. b+.c)">
                     <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0.0.0.0" expl="asserted formula">
                     <proof prover="1"><result status="valid" time="0.22" steps="139"/></proof>
                     </goal>
                     <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0.0.0.1" expl="asserted formula">
                     <proof prover="3"><result status="valid" time="3.60"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0.0.1" expl="equality hypothesis">
                    <proof prover="1"><result status="valid" time="0.45" steps="143"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0.1" expl="equality hypothesis">
                   <proof prover="1"><result status="valid" time="0.45" steps="143"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.0.0.1" expl="equality hypothesis">
                  <proof prover="1"><result status="valid" time="0.46" steps="143"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.0.1.1" expl="apply premises">
                <proof prover="1"><result status="valid" time="0.57" steps="143"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises">
              <proof prover="1"><result status="valid" time="0.09" steps="139"/></proof>
              </goal>
              <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises">
              <proof prover="1"><result status="valid" time="0.56" steps="143"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC geometric_series.7.1.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
             <proof prover="1"><result status="valid" time="0.56" steps="143"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC geometric_series.7.1.0.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="set_equal">
       <goal name="VC geometric_series.7.1.0.0.1.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC geometric_series.7.1.0.0.1.0.0" expl="apply premises">
        <transf name="case" arg1="(e=n-1)">
         <goal name="VC geometric_series.7.1.0.0.1.0.0.0" expl="apply premises (true case)">
         <proof prover="1"><result status="valid" time="0.44" steps="147"/></proof>
         </goal>
         <goal name="VC geometric_series.7.1.0.0.1.0.0.1" expl="apply premises (false case)">
         <transf name="assert" arg1="(mem e (to_fset 0 (n - 1)))">
          <goal name="VC geometric_series.7.1.0.0.1.0.0.1.0" expl="asserted formula">
          <proof prover="1"><result status="valid" time="0.46" steps="147"/></proof>
          </goal>
          <goal name="VC geometric_series.7.1.0.0.1.0.0.1.1" expl="apply premises (false case)">
          <proof prover="0"><result status="valid" time="0.41"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC geometric_series.7.1.0.0.1.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC geometric_series.7.1.0.0.1.1.0" expl="apply premises">
        <proof prover="2"><result status="valid" time="0.40"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC geometric_series.6" expl="assertion">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC geometric_series.7" expl="postcondition">
  <transf name="replace" arg1="(add (n - 1) (to_fset 0 (n - 1)))" arg2="(to_fset 0 n)" arg3="in" arg4="H">
   <goal name="VC geometric_series.7.0" expl="postcondition">
   <transf name="apply" arg1="set_equal">
    <goal name="VC geometric_series.4.1.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC geometric_series.4.1.0.0" expl="apply premises">
     <proof prover="4"><result status="valid" time="4.71"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC geometric_series.4.1.1" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC geometric_series.4.1.1.0" expl="apply premises">
     <proof prover="4"><result status="valid" time="4.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC geometric_series.7.1" expl="equality hypothesis">
   <transf name="rewrite" arg1="H">
    <goal name="VC geometric_series.4.0.0" expl="assertion">
    <proof prover="4"><result status="valid" time="4.65"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_geometric_series_r" expl="VC for ind_geometric_series_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_geometric_series_r.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
   <goal name="VC ind_geometric_series_r.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="geometric_series">
    <goal name="VC ind_geometric_series_r.0.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.09" steps="129"/></proof>
    </goal>
    <goal name="VC ind_geometric_series_r.0.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.11" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_geometric_series" expl="VC for ind_geometric_series">
 <transf name="split_vc" >
  <goal name="VC ind_geometric_series.0" expl="precondition">
  <transf name="rewrite" arg1="one_mult_t" arg2="in" arg3="H">
   <goal name="VC ind_geometric_series.2.0" expl="postcondition">
   <transf name="replace" arg1="(tone *. (tone -. cpower q n))" arg2="(tone -. cpower q n)" arg3="in" arg4="H">
    <goal name="VC ind_geometric_series.2.0.0" expl="postcondition">
    <proof prover="1"><result status="valid" time="0.21" steps="131"/></proof>
    </goal>
    <goal name="VC ind_geometric_series.2.0.1" expl="equality hypothesis">
    <proof prover="1"><result status="valid" time="0.33" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_geometric_series.2.1" expl="rewrite premises">
   <transf name="replace" arg1="(tone *. (tone -. cpower q n))" arg2="(tone -. cpower q n)" arg3="in" arg4="H">
    <goal name="VC ind_geometric_series.2.1.0" expl="rewrite premises">
    <proof prover="1"><result status="valid" time="0.10" steps="131"/></proof>
    </goal>
    <goal name="VC ind_geometric_series.2.1.1" expl="equality hypothesis">
    <proof prover="1"><result status="valid" time="0.26" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_geometric_series.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21" steps="129"/></proof>
  </goal>
  <goal name="VC ind_geometric_series.2" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC geometric_series_init_one" expl="VC for geometric_series_init_one" proved="true">
 <proof prover="0"><result status="valid" time="0.90"/></proof>
 </goal>
 <goal name="VC geometric_series_c_one" expl="VC for geometric_series_c_one">
 <transf name="split_vc" >
  <goal name="VC geometric_series_c_one.0" expl="variant decrease">
  </goal>
  <goal name="VC geometric_series_c_one.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="131"/></proof>
  </goal>
  <goal name="VC geometric_series_c_one.2" expl="precondition">
  <transf name="replace" arg1="(fun (i:int) -&gt; tone *. cpower q i)" arg2="(fun (i:int) -&gt; cpower q i)" arg3="in" arg4="H">
   <goal name="VC geometric_series_tone_init_one.2.0" expl="postcondition">
   <proof prover="1"><result status="valid" time="0.23" steps="133"/></proof>
   </goal>
   <goal name="VC geometric_series_tone_init_one.2.1" expl="equality hypothesis">
   <proof prover="0"><result status="valid" time="0.45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC geometric_series_c_one.3" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC geometric_series_c_one_init_one" expl="VC for geometric_series_c_one_init_one">
 <transf name="split_vc" >
  <goal name="VC geometric_series_c_one_init_one.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="129"/></proof>
  </goal>
  <goal name="VC geometric_series_c_one_init_one.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC geometric_series_c_one_init_one.2" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC cpower_tone_pos.1" expl="variant decrease">
  <proof prover="1"><result status="valid" time="0.07" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_cpower_2" expl="VC for positive_cpower_2">
 <transf name="split_vc" >
  <goal name="VC positive_cpower_2.0" expl="postcondition">
  <transf name="rewrite" arg1="cpower_two">
   <goal name="VC positive_cpower_2.0.0" expl="postcondition">
   <transf name="case" arg1="(tzero &lt;. x)">
    <goal name="VC positive_cpower_2.0.0.0" expl="true case (postcondition)">
    <proof prover="1"><result status="valid" time="0.20" steps="133"/></proof>
    </goal>
    <goal name="VC positive_cpower_2.0.0.1" expl="false case (postcondition)">
    <transf name="replace" arg1="(x*.x)" arg2="((-.x) *. (-.x))">
     <goal name="VC positive_cpower_2.0.0.1.0" expl="false case (postcondition)">
     <proof prover="0"><result status="valid" time="0.28"/></proof>
     </goal>
     <goal name="VC positive_cpower_2.0.0.1.1" expl="equality hypothesis">
     <proof prover="1"><result status="valid" time="0.31" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC positive_cpower_2.0.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.33" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_cpower_2_mod" expl="VC for positive_cpower_2_mod" proved="true">
 <proof prover="1"><result status="valid" time="0.20" steps="127"/></proof>
 </goal>
 <goal name="VC cpower_2_mod_non_null" expl="VC for cpower_2_mod_non_null" proved="true">
 <proof prover="1"><result status="valid" time="0.20" steps="129"/></proof>
 </goal>
 <goal name="VC cpower_2_mod_mult_non_null" expl="VC for cpower_2_mod_mult_non_null" proved="true">
 <proof prover="1"><result status="valid" time="0.22" steps="131"/></proof>
 </goal>
 <goal name="VC growing_cpower_2" expl="VC for growing_cpower_2" proved="true">
 <proof prover="1"><result status="valid" time="0.21" steps="131"/></proof>
 </goal>
 <goal name="VC cpower_incr_power_2" expl="VC for cpower_incr_power_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_incr_power_2.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_modulus_incr_power_2" expl="VC for cpower_modulus_incr_power_2" proved="true">
 <proof prover="0"><result status="valid" time="0.26"/></proof>
 </goal>
 <goal name="VC cpower_modulus_supeq" expl="VC for cpower_modulus_supeq" proved="true">
 <proof prover="1"><result status="valid" time="0.18" steps="131"/></proof>
 </goal>
 <goal name="VC cpower_modulus_div_simpl" expl="VC for cpower_modulus_div_simpl">
 <transf name="split_vc" >
  <goal name="VC cpower_modulus_div_simpl.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC cpower_modulus_div_simpl.1" expl="assertion">
  <transf name="split_vc" >
   <goal name="VC cpower_modulus_div_simpl.1.0" expl="assertion">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC cpower_modulus_div_simpl.1.1" expl="assertion">
   <transf name="apply" arg1="cpower_eq">
    <goal name="VC cpower_modulus_div_simpl.1.1.0" expl="apply premises">
    <transf name="rewrite" arg1="mult_modulus">
     <goal name="VC cpower_modulus_div_simpl.1.1.0.0" expl="apply premises">
     <transf name="rewrite" arg1="mult_modulus">
      <goal name="VC cpower_modulus_div_simpl.1.1.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="div_modulus">
       <goal name="VC cpower_modulus_div_simpl.1.1.0.0.0.0" expl="apply premises">
       <proof prover="0"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC cpower_modulus_div_simpl.1.1.0.0.0.1" expl="rewrite premises">
       <transf name="rewrite" arg1="mult_modulus">
        <goal name="VC cpower_modulus_div_simpl.1.1.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="mult_modulus">
         <goal name="VC cpower_modulus_div_simpl.1.1.0.0.0.0.0.0" expl="apply premises">
         <proof prover="1"><result status="valid" time="0.10" steps="135"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cpower_modulus_div_simpl.1.1.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.11" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_modulus_div_simpl.1.2" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.29"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cpower_modulus_div_simpl.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC cpower_modulus_div_simpl.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_two_modulus_div_simpl" expl="VC for cpower_two_modulus_div_simpl">
 <transf name="eliminate_if" >
  <goal name="VC cpower_two_modulus_div_simpl.0" expl="VC for cpower_two_modulus_div_simpl">
  <transf name="split_vc" >
   <goal name="VC cpower_two_modulus_div_simpl.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="2.31"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.1" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.2" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="3.18"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="3.83"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="3.83"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.6" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="4.75"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.7" expl="postcondition">
   <transf name="replace" arg1="(cpower x 2)" arg2="(cpower absx 2)">
    <goal name="VC cpower_two_modulus_div_simpl.0.7.0" expl="postcondition">
    <proof prover="1"><result status="timeout" time="5.00"/></proof>
    </goal>
    <goal name="VC cpower_two_modulus_div_simpl.0.7.1" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="(cpower y 2)" arg2="(cpower absy 2)">
     <goal name="VC cpower_two_modulus_div_simpl.0.7.1.0" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.29"/></proof>
     </goal>
     <goal name="VC cpower_two_modulus_div_simpl.0.7.1.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.09" steps="139"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.8" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.17"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.9" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="136"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.10" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.07"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.11" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="VC cpower_two_modulus_div_simpl.0.12" expl="postcondition">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Complex_exp">
 <goal name="e_diff_c_zero">
 <transf name="split_vc" >
  <goal name="e_diff_c_zero.0">
  <transf name="assert" arg1="(modulus tzero &lt;&gt; tone)">
   <goal name="e_diff_tzero.0.0" expl="asserted formula">
   <proof prover="4"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="e_diff_tzero.0.1">
   <proof prover="4"><result status="valid" time="0.46"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="exp_one">
 <proof prover="1" obsolete="true"><result status="valid" time="0.14" steps="129"/></proof>
 </goal>
 <goal name="VC exp_sum" expl="VC for exp_sum">
 <transf name="split_vc" >
  <goal name="VC exp_sum.0" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.42" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_eq" expl="VC for exp_eq">
 <proof prover="1" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
 </goal>
 <goal name="VC exp_sum_rev" expl="VC for exp_sum_rev">
 <transf name="split_vc" >
  <goal name="VC exp_sum_rev.0" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.68" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_inv" expl="VC for exp_inv">
 <transf name="split_vc" >
  <goal name="VC exp_inv.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_inv_rev" expl="VC for exp_inv_rev">
 <proof prover="1" obsolete="true"><result status="valid" time="0.47" steps="137"/></proof>
 </goal>
 <goal name="VC exp_mult_pre" expl="VC for exp_mult_pre">
 <transf name="eliminate_let" >
  <goal name="VC exp_mult_pre.0" expl="VC for exp_mult_pre">
  <transf name="split_vc" >
   <goal name="VC exp_mult_pre.0.0" expl="assertion">
   <proof prover="1" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
   </goal>
   <goal name="VC exp_mult_pre.0.1" expl="variant decrease">
   <transf name="case" arg1="(y= 0)">
    <goal name="VC exp_mult_pre.0.1.0" expl="true case (variant decrease)">
    <proof prover="1" obsolete="true"><result status="valid" time="0.09" steps="141"/></proof>
    </goal>
    <goal name="VC exp_mult_pre.0.1.1" expl="false case (variant decrease)">
    <proof prover="1" obsolete="true"><result status="valid" time="0.10" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC exp_mult_pre.0.2" expl="precondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.23" steps="141"/></proof>
   </goal>
   <goal name="VC exp_mult_pre.0.3" expl="precondition">
   <transf name="replace" arg1="( i_to_c y)" arg2="( i_to_c (y-&#39;1) +. i_to_c 1)">
    <goal name="VC exp_mult_pre.0.3.0" expl="precondition">
    <proof prover="1" obsolete="true"><result status="valid" time="0.49" steps="137"/></proof>
    </goal>
    <goal name="VC exp_mult_pre.0.3.1" expl="equality hypothesis">
    <proof prover="3" obsolete="true"><result status="valid" time="1.51"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC exp_mult_pre.0.4" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.42"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_mult" expl="VC for exp_mult">
 <transf name="eliminate_let" >
  <goal name="VC exp_mult.0" expl="VC for exp_mult">
  <transf name="split_vc" >
   <goal name="VC exp_mult.0.0" expl="precondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.19" steps="137"/></proof>
   </goal>
   <goal name="VC exp_mult.0.1" expl="precondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.11" steps="137"/></proof>
   </goal>
   <goal name="VC exp_mult.0.2" expl="postcondition">
   <transf name="case" arg1="(y= 0)">
    <goal name="VC exp_mult.0.2.0" expl="true case (postcondition)">
    <transf name="destruct" arg1="H">
     <goal name="VC exp_mult.0.2.0.0" expl="true case (postcondition)">
     <proof prover="4" obsolete="true"><result status="timeout" time="8.00"/></proof>
     </goal>
     <goal name="VC exp_mult.0.2.0.1" expl="true case (postcondition)">
     <transf name="eliminate_if" >
      <goal name="VC exp_mult.0.2.0.1.0" expl="true case (postcondition)">
      <transf name="destruct" arg1="H">
       <goal name="VC exp_mult.0.2.0.1.0.0" expl="true case (postcondition)">
       <transf name="case" arg1="(y &gt;= 0)">
        <goal name="VC exp_mult.0.2.0.1.0.0.0" expl="true case (postcondition)">
        <proof prover="1" obsolete="true"><result status="valid" time="0.11" steps="137"/></proof>
        </goal>
        <goal name="VC exp_mult.0.2.0.1.0.0.1" expl="false case (true case. postcondition)">
        <transf name="replace" arg1="(x *. i_to_c y)" arg2="(-. (x *. i_to_c (- y)))">
         <goal name="VC exp_mult.0.2.0.1.0.0.1.0" expl="false case (true case. postcondition)">
         <transf name="rewrite" arg1="exp_inv">
          <goal name="VC exp_mult.0.2.0.1.0.0.1.0.0" expl="false case (true case. postcondition)">
          <proof prover="1" obsolete="true"><result status="valid" time="0.40" steps="141"/></proof>
          </goal>
          <goal name="VC exp_mult.0.2.0.1.0.0.1.0.1" expl="rewrite premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.44" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC exp_mult.0.2.0.1.0.0.1.1" expl="equality hypothesis">
         <transf name="rewrite" arg1="i_to_c_opp">
          <goal name="VC exp_mult.0.2.0.1.0.0.1.1.0" expl="equality hypothesis">
          <proof prover="0" obsolete="true"><result status="valid" time="0.29"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC exp_mult.0.2.1" expl="false case (postcondition)">
    <proof prover="1" obsolete="true"><result status="valid" time="0.52" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_to_exp" expl="VC for cpower_to_exp">
 <proof prover="1" obsolete="true"><result status="valid" time="0.41" steps="133"/></proof>
 </goal>
 <goal name="VC exp_h_pi" expl="VC for exp_h_pi">
 <transf name="split_vc" >
  <goal name="VC exp_h_pi.0" expl="assertion">
  <transf name="replace" arg1="(i_to_c 4)" arg2="(ttwo *. ttwo)">
   <goal name="VC exp_h_pi.0.0" expl="assertion">
   <transf name="rewrite" arg1="mult_comm">
    <goal name="VC exp_h_pi.0.0.0" expl="assertion">
    <transf name="rewrite" arg1="mult_comm">
     <goal name="VC exp_h_pi.0.0.0.0" expl="assertion">
     <transf name="rewrite" arg1="mult_comm">
      <goal name="VC exp_h_pi.0.0.0.0.0" expl="assertion">
      <transf name="rewrite" arg1="div_mult">
       <goal name="VC exp_h_pi.0.0.0.0.0.0" expl="assertion">
       <proof prover="4" obsolete="true"><result status="valid" time="3.70"/></proof>
       </goal>
       <goal name="VC exp_h_pi.0.0.0.0.0.1" expl="rewrite premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.68" steps="133"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC exp_h_pi.0.1" expl="equality hypothesis">
   <proof prover="1" obsolete="true"><result status="valid" time="0.41" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC exp_h_pi.1" expl="precondition">
  <transf name="rewrite" arg1="H3">
   <goal name="VC exp_h_pi.2.0" expl="postcondition">
   <transf name="replace" arg1="(ttwo *. ((im *. pi) /. i_to_c 4))" arg2="(((im *. pi) /. i_to_c 4)*. (i_to_c 2))">
    <goal name="VC exp_h_pi.2.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H">
     <goal name="VC exp_h_pi.2.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Exp_quarter_pi">
      <goal name="VC exp_h_pi.2.0.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(cpower ((squarert_two /. ttwo) +. (im *. (squarert_two /. ttwo))) 2)" arg2="(((squarert_two /. ttwo) +. (im *. (squarert_two /. ttwo))) *. ((squarert_two /. ttwo) +. (im *. (squarert_two /. ttwo))))">
       <goal name="VC exp_h_pi.2.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="t_decomp_mult">
        <goal name="VC exp_h_pi.2.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(t_real_part ((squarert_two /. ttwo) +. (im *. (squarert_two /. ttwo))))" arg2="(squarert_two /. ttwo)">
         <goal name="VC exp_h_pi.2.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="replace" arg1="(t_im_part ((squarert_two /. ttwo) +. (im *. (squarert_two /. ttwo))))" arg2="(squarert_two /. ttwo)">
          <goal name="VC exp_h_pi.2.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="zero_add_t">
           <goal name="VC exp_h_pi.2.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="replace" arg1="((squarert_two /. ttwo) *. (squarert_two /. ttwo))" arg2="(tone /. ttwo)">
            <goal name="VC exp_h_pi.2.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <proof prover="1"><result status="valid" time="1.31" steps="141"/></proof>
            </goal>
            <goal name="VC exp_h_pi.2.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
            <proof prover="1"><result status="valid" time="1.69" steps="141"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC exp_h_pi.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
           <proof prover="1"><result status="valid" time="1.32" steps="141"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC exp_h_pi.2.0.0.0.0.0.0.0.1" expl="equality hypothesis">
          <proof prover="1"><result status="valid" time="1.27" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC exp_h_pi.2.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="1"><result status="valid" time="1.18" steps="141"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC exp_h_pi.2.0.0.0.0.1" expl="equality hypothesis">
       <proof prover="1"><result status="valid" time="1.79" steps="141"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC exp_h_pi.2.0.1" expl="equality hypothesis">
    <proof prover="1"><result status="valid" time="0.12" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC exp_h_pi.2" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.59" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_pi" expl="VC for exp_pi">
 <transf name="split_vc" >
  <goal name="VC exp_pi.0" expl="postcondition">
  <transf name="replace" arg1="(im *. pi)" arg2="(((im *. pi) /. ttwo) +. ((im *. pi) /. ttwo) )">
   <goal name="VC exp_pi.0.0" expl="postcondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.75" steps="137"/></proof>
   </goal>
   <goal name="VC exp_pi.0.1" expl="equality hypothesis">
   <transf name="replace" arg1="(((im *. pi) /. ttwo) +. ((im *. pi) /. ttwo))" arg2="(ttwo *. (im *. pi /. ttwo))">
    <goal name="VC exp_pi.0.1.0" expl="equality hypothesis">
    <transf name="eliminate_definition" >
     <goal name="VC exp_pi.0.1.0.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="ttwo_def">
      <goal name="VC exp_pi.0.1.0.0.0" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="1.58" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC exp_pi.0.1.1" expl="equality hypothesis">
    <proof prover="1" obsolete="true"><result status="valid" time="0.84" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_two_pi" expl="VC for exp_two_pi">
 <transf name="split_vc" >
  <goal name="VC exp_two_pi.0" expl="postcondition">
  <transf name="replace" arg1="two_pi_i" arg2="(im *. pi +. im *. pi)">
   <goal name="VC exp_two_pi.0.0" expl="postcondition">
   <transf name="rewrite" arg1="exp_sum">
    <goal name="VC exp_two_pi.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="exp_pi">
     <goal name="VC exp_two_pi.0.0.0.0" expl="postcondition">
     <transf name="assert" arg1="(-. -. tone = tone)">
      <goal name="VC exp_two_pi.0.0.0.0.0" expl="asserted formula">
      <proof prover="1"><result status="valid" time="0.67" steps="139"/></proof>
      </goal>
      <goal name="VC exp_two_pi.0.0.0.0.1" expl="postcondition">
      <proof prover="1"><result status="valid" time="0.64" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC exp_two_pi.0.1" expl="equality hypothesis">
   <transf name="eliminate_definition" >
    <goal name="VC exp_two_pi.0.1.0" expl="equality hypothesis">
    <proof prover="1" obsolete="true"><result status="valid" time="1.14" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_two_pi_mul" expl="VC for exp_two_pi_mul">
 <transf name="split_vc" >
  <goal name="VC exp_two_pi_mul.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_two_pi_mul_den" expl="VC for exp_two_pi_mul_den">
 <transf name="eliminate_let" >
  <goal name="VC exp_two_pi_mul_den.0" expl="VC for exp_two_pi_mul_den">
  <transf name="split_vc" >
   <goal name="VC exp_two_pi_mul_den.0.0" expl="precondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.15" steps="139"/></proof>
   </goal>
   <goal name="VC exp_two_pi_mul_den.0.1" expl="postcondition">
   <transf name="case" arg1="(l = 0)">
    <goal name="VC exp_two_pi_mul_den.0.1.0" expl="true case (postcondition)">
    <transf name="replace" arg1="((i_to_c (k * l) *. two_pi_i) /. i_to_c k)" arg2="(two_pi_i *. i_to_c l)">
     <goal name="VC exp_two_pi_mul_den.0.1.0.0" expl="true case (postcondition)">
     <transf name="rewrite" arg1="i_to_c_mult_rev">
      <goal name="VC exp_two_pi_mul_den.0.1.1.1.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="mult_assoc">
       <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0" expl="equality hypothesis">
       <transf name="replace" arg1="(i_to_c k *. (i_to_c l *. two_pi_i))" arg2="(i_to_c l *. (i_to_c k *. two_pi_i))">
        <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0" expl="equality hypothesis">
        <transf name="replace" arg1="((i_to_c l *. (i_to_c k *. two_pi_i)) /. i_to_c k)" arg2="((i_to_c l *. ((i_to_c k *. two_pi_i) /. i_to_c k)))">
         <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0.0" expl="equality hypothesis">
         <transf name="replace" arg1="((i_to_c k *. two_pi_i) /. i_to_c k)" arg2="two_pi_i">
          <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0.0.0" expl="equality hypothesis">
          <proof prover="1"><result status="valid" time="0.15" steps="145"/></proof>
          </goal>
          <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0.0.1" expl="equality hypothesis">
          <transf name="rewrite" arg1="mult_comm">
           <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0.0.1.0" expl="equality hypothesis">
           <transf name="rewrite" arg1="mult_num">
            <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0.0.1.0.0" expl="equality hypothesis">
            <proof prover="4"><result status="valid" time="0.40"/></proof>
            </goal>
            <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0.0.1.0.1" expl="rewrite premises">
            <proof prover="1"><result status="valid" time="0.17" steps="145"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.0.1" expl="equality hypothesis">
         <proof prover="1"><result status="valid" time="0.99" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC exp_two_pi_mul_den.0.1.1.1.0.0.1" expl="equality hypothesis">
        <proof prover="1"><result status="valid" time="0.15" steps="145"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC exp_two_pi_mul_den.0.1.0.1" expl="equality hypothesis">
     <proof prover="0" obsolete="true"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC exp_two_pi_mul_den.0.1.1" expl="false case (postcondition)">
    <transf name="rewrite" arg1="h">
     <goal name="VC exp_two_pi_mul_den.0.1.0.0" expl="true case (postcondition)">
     <proof prover="4"><result status="valid" time="0.46"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_two_pi_mul_den_add" expl="VC for exp_two_pi_mul_den_add">
 <transf name="split_vc" >
  <goal name="VC exp_two_pi_mul_den_add.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.45"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
<file proved="true">
<path name=".."/>
<path name="exponentiation."/>
</file>
</why3session>
