(set-logic AUFNIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-fun infix_lseqas (Real Real) Bool)

(declare-fun from_int (Int) Real)

(declare-sort t 0)

(declare-fun t1 () ty)

(declare-fun tzero () t)

(declare-fun tone () t)

(declare-fun prefix_mndt (t) t)

(declare-fun infix_mndt (t t) t)

(declare-fun infix_sldt (t t) t)

(declare-fun infix_pldt (t t) t)

(declare-fun infix_asdt (t t) t)

(declare-fun infix_lseqdt (t t) Bool)

(declare-fun infix_lsdt (t t) Bool)

;; NonTrivialRing
  (assert (not (= tzero tone)))

(declare-fun inv (t) t)
OBOBBOBOO
;; Inverse
  (assert
OBOBOBOOOOOOOOAOO  (forall ((x t)) (=> (not (= x tzero)) (= (infix_asdt x (inv x)) tone))))
OOOO
;; div_def
  (assert
  (forall ((x t) (y t))
  (=> (not (= y tzero)) (= (infix_sldt x y) (infix_asdt x (inv y))))))

(declare-fun r_to_t (Real) t)

AAAAAAAAAAOO

(declare-fun real_part (t) Real)

(declare-fun im_part (t) Real)

(declare-fun real_ (t) Bool)

;; real__def
  (assert (forall ((x t)) (= (real_ x) (= (im_part x) 0.0))))

;; Inf_eq_def


  (assertOOOBBOBBOBO
OAOAOOOB
BOOBBOO
OOOOO  (OOOOforall ((x t) (y t))
  (= (infOOBOBBOOAOOBOBBix_lseqdt x y)
  (orOAOAOA
  (anOOOBBOd (real_ x) (and (real_ y) (infix_lseqas (real_part x) (real_part y))))
  (= x y)))))

;; zeroLessOne
  (assert (infix_lseqdt tzero tone))

;; compat_order_mult
  (assert
  (forall ((x t) (y t) (z t))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lseqdt tzero z) (infix_lseqdt (infix_asdt x z)
  (infix_asdt y z)))))))))

(declare-fun i_to_t (Int) t)

;; i_to_t_def
  (assert (forall ((i Int)) (= (i_to_t i) (r_to_t (from_int i)))))

;; i_to_t_zero
  (assert (= (i_to_t 0) tzero))

(declare-fun infix_mngt (ty ty) ty)

(declare-fun cpower (t Int) t)

(declare-fun squarert_two () t)

;; cpower_inv
  (assert
  (forall ((e t) (i Int))
  (= (infix_asdt (cpower e i) (cpower e (- i))) tone)))

;; cpower_plus_one
  (assert
  (forall ((e t) (i Int)) (= (cpower e (+ i 1)) (infix_asdt (cpower e i) e))))

;; non_zero_cpower_pos
  (assert
  (forall ((i t) (n Int))
  (=> (not (= i tzero)) (=> (<= 0 n) (not (= (cpower i n) tzero))))))

;; zero_cpower
  (assert (forall ((n Int)) (=> (not (= n 0)) (= (cpower tzero n) tzero))))

;; unicity_exp
  (assert
  (forall ((k t) (m Int) (n Int))
  (=> (infix_lsdt tone k) (= (= (cpower k m) (cpower k n)) (= m n)))))

(declare-fun exp (t) t)

(declare-fun x () t)

(declare-fun y () Int)

;; H
  (assert
  (or (= y 0)
  (and
  (= (infix_asdt x (i_to_t y)) (infix_pldt (infix_asdt x (i_to_t (- y 1))) x))
  (and (real_ (i_to_t (- y 1)))
  (and
  (= (exp (infix_pldt (infix_asdt x (i_to_t (- y 1))) x)) (infix_asdt
                                                          (exp
                                                          (infix_asdt 
                                                          x (i_to_t (- y 1))))
                                                          (exp x)))
  (and (= (exp (infix_asdt x (i_to_t (- y 1)))) (cpower (exp x) (- y 1)))
  (= (cpower (exp x) (+ (- y 1) 1)) (infix_asdt (cpower (exp x) (- y 1))
                                    (exp x)))))))))

(assert
;; h
  (not (= squarert_two (infix_pldt tone tone))))
(check-sat)
