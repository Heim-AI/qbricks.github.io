%%% this is a prelude for CVC3 
OOOB%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;
OB
ty : TYPE;
OBOBOOB
sort: (ty, uni) -> BOOLEAN;
OO
witness: (ty) -> uni;

% N
witness_sort
  ASSERT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

infix_mngt: (ty, ty) -> ty;

infix_at: (ty, ty, uni, uni) -> uni;

% infix @_sort
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (x : uni, x1 : uni): (sort(b, infix_at(b, a, x, x1)))));

set: (ty) -> ty;

mem: (ty, uni, uni) -> BOOLEAN;

infix_eqeq: (ty, uni, uni) -> BOOLEAN;

% infix ==_spec
  ASSERT
  (FORALL (a : ty):
  (FORALL (s1 : uni, s2 : uni):
  (((infix_eqeq(a, s1, s2))
   => (FORALL (x : uni): ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
  AND ((FORALL (x : uni):
       ((sort(a, x)) => ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
      => (infix_eqeq(a, s1, s2))))));

op_neutral_left: (ty, uni, uni) -> BOOLEAN;

% op_neutral_left_def
  ASSERT
  (FORALL (im : ty):
  (FORALL (op1 : uni, neutral1 : uni):
  ((op_neutral_left(im, op1, neutral1))
  <=> (FORALL (e1 : uni):
      ((sort(im, e1)) => (infix_at(im, im, infix_at(infix_mngt(im, im), im,
      op1, neutral1), e1) = e1))))));

op_neutral_right: (ty, uni, uni) -> BOOLEAN;

% op_neutral_right_def
  ASSERT
  (FORALL (im : ty):
  (FORALL (op1 : uni, neutral1 : uni):
  ((op_neutral_right(im, op1, neutral1))
  <=> (FORALL (e1 : uni):
      ((sort(im, e1)) => (infix_at(im, im, infix_at(infix_mngt(im, im), im,
      op1, e1), neutral1) = e1))))));

op_assoc: (ty, uni) -> BOOLEAN;

% op_assoc_def
  ASSERT
  (FORALL (im : ty):
  (FORALL (op1 : uni):
  (((op_assoc(im, op1))
   => (FORALL (a : uni, b : uni, c : uni): (infix_at(im, im, infix_at(
      infix_mngt(im, im), im, op1, infix_at(im, im, infix_at(infix_mngt(im,
      im), im, op1, a), b)), c) = infix_at(im, im, infix_at(infix_mngt(im,
      im), im, op1, a), infix_at(im, im, infix_at(infix_mngt(im, im), im,
      op1, b), c)))))
  AND ((FORALL (a : uni, b : uni, c : uni):
       ((sort(im, a))
       => ((sort(im, b))
          => ((sort(im, c)) => (infix_at(im, im, infix_at(infix_mngt(im, im),
             im, op1, infix_at(im, im, infix_at(infix_mngt(im, im), im, op1,
             a), b)), c) = infix_at(im, im, infix_at(infix_mngt(im, im), im,
             op1, a), infix_at(im, im, infix_at(infix_mngt(im, im), im, op1,
             b), c)))))))
      => (op_assoc(im, op1))))));

iterates: (ty, uni, uni) -> BOOLEAN;

% iterates_def
  ASSERT
  (FORALL (im : ty):
  (FORALL (op1 : uni, neutral1 : uni):
  ((iterates(im, op1, neutral1))
  <=> ((op_neutral_left(im, op1, neutral1))
      AND ((op_neutral_right(im, op1, neutral1)) AND (op_assoc(im, op1)))))));

int_iterate: (ty, uni, uni, INT, INT) -> uni;

% int_iterate_sort
  ASSERT
  (FORALL (im : ty):
  (FORALL (x : uni, x1 : uni, x2 : INT, x3 : INT): (sort(im, int_iterate(im,
  x, x1, x2, x3)))));

infix_pl_closure: (ARRAY INT OF (ARRAY INT OF INT));

t2tb2: ((ARRAY INT OF (ARRAY INT OF INT))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF (ARRAY INT OF INT))): (sort(infix_mngt(int, 
  infix_mngt(int, int)), t2tb2(x))));

tb2t2: (uni) -> (ARRAY INT OF (ARRAY INT OF INT));

% BridgeL
  ASSERT
  (FORALL (i14 : (ARRAY INT OF (ARRAY INT OF INT))):PATTERN (t2tb2(i14)):  (
  tb2t2(t2tb2(i14)) = i14));

% BridgeR
  ASSERT
  (FORALL (j1 : uni):PATTERN (t2tb2(tb2t2(j1))):  (t2tb2(tb2t2(j1)) = j1));

t2tb3: ((ARRAY INT OF INT)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF INT)): (sort(infix_mngt(int, int), t2tb3(x))));

tb2t3: (uni) -> (ARRAY INT OF INT);

% BridgeL
  ASSERT
  (FORALL (i14 : (ARRAY INT OF INT)):PATTERN (t2tb3(i14)):  (tb2t3(
  t2tb3(i14)) = i14));

% BridgeR
  ASSERT
  (FORALL (j1 : uni):PATTERN (t2tb3(tb2t3(j1))):  (t2tb3(tb2t3(j1)) = j1));

t2tb4: (INT) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : INT): (sort(int, t2tb4(x))));

tb2t4: (uni) -> INT;

% BridgeL
  ASSERT
  (FORALL (i14 : INT):PATTERN (t2tb4(i14)):  (tb2t4(t2tb4(i14)) = i14));

% BridgeR
  ASSERT
  (FORALL (j1 : uni):PATTERN (t2tb4(tb2t4(j1))):  (t2tb4(tb2t4(j1)) = j1));

% infix +_closure_def
  ASSERT
  (FORALL (y : INT, y1 : INT): (tb2t4(infix_at(int, int, infix_at(
  infix_mngt(int, int), int, t2tb2(infix_pl_closure), t2tb4(y)), 
  t2tb4(y1))) = (y + y1)));

% isum_iter
  ASSERT (iterates(int, t2tb2(infix_pl_closure), t2tb4(0)));

ind_isum: ((ARRAY INT OF INT), INT, INT) -> INT;

% ind_isum_def
  ASSERT
  (FORALL (f : (ARRAY INT OF INT), i14 : INT, j1 : INT): (ind_isum(f, i14,
  j1) = tb2t4(int_iterate(int, t2tb2(infix_pl_closure), t2tb3(f), i14, j1))));

power: (INT, INT) -> INT;

% Power_one
  ASSERT (FORALL (i14 : INT): (power(i14, 1) = i14));

% power_plus_one
  ASSERT
  (FORALL (e1 : INT, i14 : INT): (power(e1, (i14 + 1)) = (e1 * power(e1,
  i14))));

fc32: (ARRAY INT OF INT);

% fc_def
  ASSERT
  (FORALL (k3 : INT): (tb2t4(infix_at(int, int, t2tb3(fc32), t2tb4(k3))) = 
  power(2, (k3 - 1))));

% power_decomp_minus_one
  ASSERT
  (FORALL (i14 : INT):
  ((1 <= i14) => (ind_isum(fc32, 1, i14) < power(2, (i14 - 1)))));

QUERY
% h4
  FALSE;
