<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="p_int.mlw"/>
<theory name="Int_comp" proved="true">
 <goal name="VC leq_trans" expl="VC for leq_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_trans.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_trans" expl="VC for inf_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_trans.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_trans_add" expl="VC for leq_trans_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_trans_add.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_trans_mult" expl="VC for leq_trans_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_trans_mult.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_trans_mult_right" expl="VC for leq_trans_mult_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_trans_mult_right.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_int_order_mult" expl="VC for compat_int_order_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_int_order_mult.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((c * a) &lt;= (c * b))">
   <goal name="VC compat_int_order_mult.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
   </goal>
   <goal name="VC compat_int_order_mult.0.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="12"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_trans_fact" expl="VC for leq_trans_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_trans_fact.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_trans_facrev" expl="VC for leq_trans_facrev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_trans_facrev.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC neutrals" expl="VC for neutrals" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC neutrals.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="6"/></proof>
  </goal>
  <goal name="VC neutrals.1" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="10"/></proof>
  </goal>
  <goal name="VC neutrals.2" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="VC neutrals.3" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC neutrals.4" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="VC neutrals.5" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="49"/></proof>
  </goal>
  <goal name="VC neutrals.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="38"/></proof>
  </goal>
  <goal name="VC neutrals.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.12" steps="40"/></proof>
  </goal>
  <goal name="VC neutrals.8" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="VC neutrals.9" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC isum" expl="VC for isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC isum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC isum.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct" expl="VC for iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC iproduct.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="isum_iter" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="63"/></proof>
 </goal>
 <goal name="isum_iter__" proved="true">
 <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
 </goal>
 <goal name="VC isum_eq" expl="VC for isum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC isum_eq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC isum_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="VC isum_eq.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="14"/></proof>
  </goal>
  <goal name="VC isum_eq.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC isum_eq_gen" expl="VC for isum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC isum_eq_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
  <goal name="VC isum_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC isum_add" expl="VC for isum_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC isum_add.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="36"/></proof>
  </goal>
  <goal name="VC isum_add.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="14"/></proof>
  </goal>
  <goal name="VC isum_add.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="14"/></proof>
  </goal>
  <goal name="VC isum_add.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_eq" expl="VC for iproduct_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_eq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="VC iproduct_eq.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_eq.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_eq_gen" expl="VC for iproduct_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_eq_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="16"/></proof>
  </goal>
  <goal name="VC iproduct_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_add" expl="VC for iproduct_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_add.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
  <goal name="VC iproduct_add.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_add.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_add.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_from_choose" expl="VC for iproduct_from_choose" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="58"/></proof>
 </goal>
 <goal name="VC iproduct_map" expl="VC for iproduct_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_map.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_map.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="VC iproduct_map.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_map.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="194"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_map_auto" expl="VC for iproduct_map_auto" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_map_auto.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_map_auto.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="336"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_one" expl="VC for iproduct_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_one.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="14"/></proof>
  </goal>
  <goal name="VC iproduct_one.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC iproduct_one.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="21"/></proof>
  </goal>
  <goal name="VC iproduct_one.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="160"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_one_but_maybe_one_elt" expl="VC for iproduct_one_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_one_but_maybe_one_elt.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="VC iproduct_one_but_maybe_one_elt.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="16"/></proof>
  </goal>
  <goal name="VC iproduct_one_but_maybe_one_elt.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC iproduct_one_but_maybe_one_elt.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul_assoc" expl="VC for mul_assoc" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="10"/></proof>
 </goal>
 <goal name="VC ad_assoc" expl="VC for ad_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ad_assoc.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ad_assoc_rev" expl="VC for ad_assoc_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ad_assoc_rev.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ad_seq_switch" expl="VC for ad_seq_switch" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ad_seq_switch.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul_comm" expl="VC for mul_comm" proved="true">
 <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
 </goal>
 <goal name="VC add_eq_i" expl="VC for add_eq_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_eq_i.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_eq_i" expl="VC for mult_eq_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_eq_i.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul_assoc_rev" expl="VC for mul_assoc_rev" proved="true">
 <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
 </goal>
 <goal name="VC mult_add_distr" expl="VC for mult_add_distr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_add_distr.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_add_right" expl="VC for mult_add_right" proved="true">
 <proof prover="4"><result status="valid" time="0.05" steps="10"/></proof>
 </goal>
 <goal name="VC mult_add_right_rev" expl="VC for mult_add_right_rev" proved="true">
 <proof prover="4"><result status="valid" time="0.06" steps="10"/></proof>
 </goal>
 <goal name="VC mult_add_left" expl="VC for mult_add_left" proved="true">
 <proof prover="4"><result status="valid" time="0.05" steps="10"/></proof>
 </goal>
 <goal name="VC mult_add_left_rev" expl="VC for mult_add_left_rev" proved="true">
 <proof prover="4"><result status="valid" time="0.04" steps="10"/></proof>
 </goal>
 <goal name="VC mult_add_distr_rev" expl="VC for mult_add_distr_rev" proved="true">
 <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
 </goal>
 <goal name="VC mul_assoc_comm" expl="VC for mul_assoc_comm" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="10"/></proof>
 </goal>
 <goal name="VC mul_assoc_rev_comm" expl="VC for mul_assoc_rev_comm" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="10"/></proof>
 </goal>
 <goal name="VC add_assoc" expl="VC for add_assoc" proved="true">
 <proof prover="4"><result status="valid" time="0.02" steps="10"/></proof>
 </goal>
 <goal name="VC add_assoc_rev" expl="VC for add_assoc_rev" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="10"/></proof>
 </goal>
 <goal name="VC isum_empty" expl="VC for isum_empty" proved="true">
 <proof prover="4"><result status="valid" time="0.05" steps="88"/></proof>
 </goal>
 <goal name="VC iproduct_empty" expl="VC for iproduct_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_empty.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC isum_iter_" expl="VC for isum_iter_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC isum_iter_.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="VC isum_iter_.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="34"/></proof>
  </goal>
  <goal name="VC isum_iter_.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="40"/></proof>
  </goal>
  <goal name="VC isum_iter_.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.12" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum" expl="VC for ind_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_empty" expl="VC for ind_isum_empty" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
 </goal>
 <goal name="VC ind_isum_one" expl="VC for ind_isum_one" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="48"/></proof>
 </goal>
 <goal name="VC ind_isum_plus_one" expl="VC for ind_isum_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_plus_one.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="VC ind_isum_plus_one.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_plus_one.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_to_isum" expl="VC for ind_isum_to_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_to_isum.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pos_to_strict" expl="VC for pos_to_strict" proved="true">
 <proof prover="4"><result status="valid" time="0.04" steps="20"/></proof>
 </goal>
 <goal name="VC pos_by_strict" expl="VC for pos_by_strict" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
 </goal>
 <goal name="VC ind_isum_const" expl="VC for ind_isum_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_const.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_const.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_const.1.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
   </goal>
   <goal name="VC ind_isum_const.1.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_const.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_const.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(j=i+1)">
   <goal name="VC ind_isum_const.3.0" expl="true case (postcondition)" proved="true">
   <proof prover="4"><result status="valid" time="0.05" steps="71"/></proof>
   </goal>
   <goal name="VC ind_isum_const.3.1" expl="false case (postcondition)" proved="true">
   <proof prover="2"><result status="valid" time="0.17"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_null" expl="VC for ind_isum_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_null.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_null.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_null.1.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.02" steps="24"/></proof>
   </goal>
   <goal name="VC ind_isum_null.1.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_null.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_null.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="VC ind_isum_null.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="70"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_right_extension" expl="VC for ind_isum_right_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_right_extension.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="VC ind_isum_right_extension.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.08" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_re" expl="VC for ind_isum_re" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_re.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_re_null" expl="VC for ind_isum_re_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_re_null.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_null_but_maybe_one_elt" expl="VC for ind_isum_null_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_null_but_maybe_one_elt.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_null_but_maybe_one_elt.5.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
   <goal name="VC ind_isum_null_but_maybe_one_elt.5.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_null_but_maybe_one_elt.6.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="VC ind_isum_null_but_maybe_one_elt.6.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_null_but_maybe_one_elt.7.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_null_but_maybe_one_elt.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_null_but_maybe_one_elt.8.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
   </goal>
   <goal name="VC ind_isum_null_but_maybe_one_elt.8.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="30"/></proof>
   </goal>
   <goal name="VC ind_isum_null_but_maybe_one_elt.8.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="32"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_eq" expl="VC for ind_isum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_eq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC ind_isum_eq.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_to_guard" expl="VC for ind_isum_to_guard" proved="true">
 <transf name="eliminate_definition" proved="true" >
  <goal name="VC ind_isum_to_guard.0" expl="VC for ind_isum_to_guard" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_to_guard.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.15" steps="52"/></proof>
   </goal>
   <goal name="VC ind_isum_to_guard.0.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.62" steps="693"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_no_guard" expl="VC for ind_isum_no_guard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_no_guard.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="51"/></proof>
  </goal>
  <goal name="VC ind_isum_no_guard.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.73" steps="709"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_eq_gen" expl="VC for ind_isum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_eq_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC ind_isum_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_func_const" expl="VC for ind_isum_func_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_func_const.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC ind_isum_func_const.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC ind_isum_func_const.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.63" steps="148"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_pos" expl="VC for ind_isum_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_pos.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_pos.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_pos.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="30"/></proof>
  </goal>
  <goal name="VC ind_isum_pos.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct" expl="VC for ind_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_eq" expl="VC for ind_iproduct_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_eq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
  <goal name="VC ind_iproduct_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC ind_iproduct_eq.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_eq_gen" expl="VC for ind_iproduct_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_eq_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="28"/></proof>
  </goal>
  <goal name="VC ind_iproduct_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_to_iproduct" expl="VC for ind_iproduct_to_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_to_iproduct.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_one_but_maybe_one_elt" expl="VC for ind_iproduct_one_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_one_but_maybe_one_elt.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="VC ind_iproduct_one_but_maybe_one_elt.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="VC ind_iproduct_one_but_maybe_one_elt.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_one_int" expl="VC for mult_one_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_one_int.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC one_mult_int" expl="VC for one_mult_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC one_mult_int.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_zero_int" expl="VC for mult_zero_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_zero_int.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC zero_mult_int" expl="VC for zero_mult_int" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
 </goal>
 <goal name="VC iproduct_to_iterate" expl="VC for iproduct_to_iterate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_to_iterate.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_map_auto" expl="VC for ind_isum_map_auto" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_map_auto.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_map_auto.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="65"/></proof>
  </goal>
  <goal name="VC ind_isum_map_auto.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_map_auto.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_rev" expl="VC for ind_isum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_rev.0" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ind_isum_rev.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_bijective1">
    <goal name="VC ind_isum_rev.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_isum_rev.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ind_isum_rev.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.07" steps="59"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_rev.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_isum_rev.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.08" steps="26"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_rev.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_isum_rev.0.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ind_isum_rev.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(((j - e&#39;) - 1) + i)">
       <goal name="VC ind_isum_rev.0.0.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ind_isum_rev.0.0.2.0.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.27"/></proof>
        </goal>
        <goal name="VC ind_isum_rev.0.0.2.0.0.0.1" proved="true">
        <proof prover="2"><result status="valid" time="0.06"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_rev.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC ind_isum_rev.1.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_map" expl="VC for ind_isum_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_map.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_map.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="70"/></proof>
  </goal>
  <goal name="VC ind_isum_map.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_map.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_map_auto_bij" expl="VC for ind_isum_map_auto_bij" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_map_auto_bij.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_map_auto_bij.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="28"/></proof>
  </goal>
  <goal name="VC ind_isum_map_auto_bij.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="H9" arg2="e&#39;">
   <goal name="VC ind_isum_map_auto_bij.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.16" steps="233"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_map_auto_bij.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_map_auto_bij.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.61" steps="150"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_map_bij" expl="VC for ind_isum_map_bij" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_map_bij.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC ind_isum_map_bij.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H11">
   <goal name="VC ind_isum_map_bij.1.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="29"/></proof>
   </goal>
   <goal name="VC ind_isum_map_bij.1.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="29"/></proof>
   </goal>
   <goal name="VC ind_isum_map_bij.1.2" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_map_bij.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="H9" arg2="e&#39;">
   <goal name="VC ind_isum_map_bij.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.94" steps="286"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_map_bij.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_map_bij.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_empty" expl="VC for ind_iproduct_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_empty.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="VC ind_iproduct_empty.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC ind_iproduct_empty.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_plus_one" expl="VC for ind_iproduct_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_plus_one.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.12" steps="20"/></proof>
  </goal>
  <goal name="VC ind_iproduct_plus_one.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_plus_one.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_right_extension" expl="VC for ind_iproduct_right_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_right_extension.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="18"/></proof>
  </goal>
  <goal name="VC ind_iproduct_right_extension.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.08" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_right_extension_comm" expl="VC for ind_iproduct_right_extension_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_right_extension_comm.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_comp" expl="VC for ind_iproduct_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_comp.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_comp.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC ind_iproduct_comp.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC ind_iproduct_comp.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="VC ind_iproduct_comp.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_iproduct_comp.4.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
   </goal>
   <goal name="VC ind_iproduct_comp.4.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="28"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_iproduct_comp.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="VC ind_iproduct_comp.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="34"/></proof>
  </goal>
  <goal name="VC ind_iproduct_comp.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_one" expl="VC for ind_iproduct_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_one.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_one.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC ind_iproduct_one.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="76"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_iproduct" expl="VC for positive_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_iproduct.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="22"/></proof>
  </goal>
  <goal name="VC positive_iproduct.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="VC positive_iproduct.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC positive_iproduct.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="72"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_pos" expl="VC for ind_iproduct_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_pos.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_pos.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_iproduct_pos.1.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
   </goal>
   <goal name="VC ind_iproduct_pos.1.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.13" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_iproduct_pos.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC ind_iproduct_pos.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_strict_pos" expl="VC for ind_iproduct_strict_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_strict_pos.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_strict_pos.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_strict_pos.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="VC ind_iproduct_strict_pos.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_strict_pos" expl="VC for iproduct_strict_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_strict_pos.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC iproduct_strict_pos.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="30"/></proof>
  </goal>
  <goal name="VC iproduct_strict_pos.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="29"/></proof>
  </goal>
  <goal name="VC iproduct_strict_pos.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_strict_pos_one" expl="VC for ind_iproduct_strict_pos_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_strict_pos_one.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC ind_iproduct_strict_pos_one.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_left_right" expl="VC for ind_iproduct_left_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_left_right.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_left_right.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="48"/></proof>
  </goal>
  <goal name="VC ind_iproduct_left_right.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_iproduct_left_right.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.13" steps="24"/></proof>
   </goal>
   <goal name="VC ind_iproduct_left_right.2.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_iproduct_left_right.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iterable_imult" expl="VC for iterable_imult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iterable_imult.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="95"/></proof>
  </goal>
  <goal name="VC iterable_imult.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_minus_distr" expl="VC for int_minus_distr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_minus_distr.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_minus_eq" expl="VC for int_minus_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_minus_eq.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_map_auto" expl="VC for ind_iproduct_map_auto" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_map_auto.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_map_auto.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="65"/></proof>
  </goal>
  <goal name="VC ind_iproduct_map_auto.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_map_auto.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ind_iproduct_map_auto.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_iproduct_def">
    <goal name="VC ind_iproduct_map_auto.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_iproduct_def">
     <goal name="VC ind_iproduct_map_auto.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.13" steps="90"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_map" expl="VC for ind_iproduct_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_map.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_map.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="70"/></proof>
  </goal>
  <goal name="VC ind_iproduct_map.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_iproduct_map.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ind_iproduct_map.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_iproduct_def">
    <goal name="VC ind_iproduct_map.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_iproduct_def">
     <goal name="VC ind_iproduct_map.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.06" steps="88"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_trans" expl="VC for ind_iproduct_trans" proved="true">
 <proof prover="1"><result status="valid" time="0.27"/></proof>
 </goal>
 <goal name="VC ind_iproduct_inf" expl="VC for ind_iproduct_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_inf.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="VC ind_iproduct_inf.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="25"/></proof>
  </goal>
  <goal name="VC ind_iproduct_inf.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="30"/></proof>
  </goal>
  <goal name="VC ind_iproduct_inf.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ind_iproduct_inf.3.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.07" steps="22"/></proof>
   </goal>
   <goal name="VC ind_iproduct_inf.3.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ind_iproduct_inf.3.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC ind_iproduct_inf.3.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC ind_iproduct_inf.3.1.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="VC ind_iproduct_inf.3.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="compat_int_order_mult">
        <goal name="VC ind_iproduct_inf.3.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ind_iproduct_inf.3.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.46"/></proof>
         </goal>
         <goal name="VC ind_iproduct_inf.3.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_iproduct_inf.3.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ind_iproduct_inf.3.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.06" steps="28"/></proof>
         </goal>
         <goal name="VC ind_iproduct_inf.3.1.0.0.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.06" steps="28"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_iproduct_inf.3.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.05" steps="26"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_iproduct_inf.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.05" steps="26"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_iproduct_sup_one" expl="VC for ind_iproduct_sup_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_iproduct_sup_one.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem k  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
   <goal name="VC ind_iproduct_sup_one.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(exists l. mem l  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
    <goal name="VC ind_iproduct_sup_one.0.0.0" expl="asserted formula" proved="true">
    <transf name="destruct" proved="true" arg1="H8">
     <goal name="VC ind_iproduct_sup_one.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="k1">
      <goal name="VC ind_iproduct_sup_one.0.0.0.0.0" proved="true">
      <proof prover="4"><result status="valid" time="0.08" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_iproduct_sup_one.0.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.31"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_iproduct_sup_one.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(exists l. mem l  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
    <goal name="VC ind_iproduct_sup_one.0.1.0" expl="asserted formula" proved="true">
    <transf name="destruct" proved="true" arg1="H8">
     <goal name="VC ind_iproduct_sup_one.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="k1">
      <goal name="VC ind_iproduct_sup_one.0.1.0.0.0" proved="true">
      <proof prover="4"><result status="valid" time="0.06" steps="158"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_iproduct_sup_one.0.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(mem k  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
     <goal name="VC ind_iproduct_sup_one.0.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.48"/></proof>
     </goal>
     <goal name="VC ind_iproduct_sup_one.0.1.1.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(mem k   (to_fset i j) )">
      <goal name="VC ind_iproduct_sup_one.0.1.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.19"/></proof>
      </goal>
      <goal name="VC ind_iproduct_sup_one.0.1.1.1.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(exists l. mem l   (to_fset i j) )">
       <goal name="VC ind_iproduct_sup_one.0.1.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.04" steps="46"/></proof>
       </goal>
       <goal name="VC ind_iproduct_sup_one.0.1.1.1.1.1" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="to_fset_bounds">
        <goal name="VC ind_iproduct_sup_one.0.1.1.1.1.1.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.04" steps="49"/></proof>
        </goal>
        <goal name="VC ind_iproduct_sup_one.0.1.1.1.1.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.23"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_iproduct_sup_one.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem k  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
   <goal name="VC ind_iproduct_sup_one.1.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(exists l. mem l  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
    <goal name="VC ind_iproduct_sup_one.1.0.0" expl="asserted formula" proved="true">
    <transf name="destruct" proved="true" arg1="H9">
     <goal name="VC ind_iproduct_sup_one.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="k1">
      <goal name="VC ind_iproduct_sup_one.1.0.0.0.0" proved="true">
      <proof prover="4"><result status="valid" time="0.16" steps="151"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_iproduct_sup_one.1.0.1" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.43"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_iproduct_sup_one.1.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((fun (l:int) -&gt; not (f @ l) = 1) k)">
    <goal name="VC ind_iproduct_sup_one.1.1.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="1.41"/></proof>
    </goal>
    <goal name="VC ind_iproduct_sup_one.1.1.1" expl="postcondition" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
     <goal name="VC ind_iproduct_sup_one.1.1.1.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.72"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_iproduct_sup_one.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &lt;= k /\ k &lt; j)">
   <goal name="VC ind_iproduct_sup_one.2.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="to_fset_bounds">
    <goal name="VC ind_iproduct_sup_one.2.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.05" steps="41"/></proof>
    </goal>
    <goal name="VC ind_iproduct_sup_one.2.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(mem k  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
     <goal name="VC ind_iproduct_sup_one.2.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(exists l. mem l  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
      <goal name="VC ind_iproduct_sup_one.2.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="destruct" proved="true" arg1="H10">
       <goal name="VC ind_iproduct_sup_one.2.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="exists" proved="true" arg1="k1">
        <goal name="VC ind_iproduct_sup_one.2.0.1.0.0.0.0" proved="true">
        <proof prover="4"><result status="valid" time="0.14" steps="187"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_iproduct_sup_one.2.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_iproduct_sup_one.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.18"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_iproduct_sup_one.2.1" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ind_iproduct_sup_one.2.1.0" expl="VC for ind_iproduct_sup_one" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="VC ind_iproduct_sup_one.2.1.1" expl="VC for ind_iproduct_sup_one" proved="true">
    <proof prover="0"><result status="valid" time="0.28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_iproduct_sup_one.3" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &lt;= k /\ k &lt; j)">
   <goal name="VC ind_iproduct_sup_one.3.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="to_fset_bounds">
    <goal name="VC ind_iproduct_sup_one.3.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.03" steps="43"/></proof>
    </goal>
    <goal name="VC ind_iproduct_sup_one.3.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(mem k  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
     <goal name="VC ind_iproduct_sup_one.3.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(exists l. mem l  (my_filter (to_fset i j) (fun (l:int) -&gt; not (f @ l) = 1)))">
      <goal name="VC ind_iproduct_sup_one.3.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="destruct" proved="true" arg1="H11">
       <goal name="VC ind_iproduct_sup_one.3.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="exists" proved="true" arg1="k1">
        <goal name="VC ind_iproduct_sup_one.3.0.1.0.0.0.0" proved="true">
        <proof prover="4"><result status="valid" time="1.69" steps="271"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_iproduct_sup_one.3.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.78"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_iproduct_sup_one.3.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.20"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_iproduct_sup_one.3.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.48"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_iproduct_sup_one.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC ind_iproduct_sup_one.4.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b. 1 &lt;= a &amp;&amp; 1&lt; b -&gt; 1 &lt; a*b)">
    <goal name="VC ind_iproduct_sup_one.4.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_iproduct_sup_one.4.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.09" steps="47"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_iproduct_sup_one.4.0.1" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="h">
     <goal name="VC ind_iproduct_sup_one.4.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_iproduct_sup_one.4.0.1.0.0" proved="true">
      <transf name="assert" proved="true" arg1="( 0 &lt; ind_iproduct f i k)">
       <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
        <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="pos_to_strict">
          <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="H15">
           <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.05" steps="49"/></proof>
            </goal>
            <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(forall a b c. a &lt; b /\ b &lt; c -&gt; a &lt; c)">
             <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
             <proof prover="4"><result status="valid" time="0.05" steps="53"/></proof>
             </goal>
             <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="h" arg2="k,k1,j">
              <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="Hinst">
               <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.1.1.0.0.0" proved="true">
                <transf name="apply" proved="true" arg1="H">
                </transf>
                </goal>
                <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.0.0.0.0.0.1.1.0.0.1" proved="true">
                <proof prover="0"><result status="valid" time="0.71"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.1" proved="true">
       <transf name="apply" proved="true" arg1="pos_by_strict">
        <goal name="VC ind_iproduct_sup_one.4.0.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="h">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_iproduct_sup_one.4.0.1.0.1" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0" proved="true">
       <transf name="assert" proved="true" arg1="(forall a b. 1 &lt; a &amp;&amp; 1&lt;= b -&gt; 1 &lt; a*b)">
        <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
         <proof prover="4"><result status="valid" time="0.05" steps="51"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1" proved="true">
        <transf name="apply" proved="true" arg1="h">
         <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0" proved="true">
          <transf name="assert" proved="true" arg1="(1 &lt;= f k)">
           <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="H14">
            <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="H4">
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.1" proved="true">
           <transf name="assert" proved="true" arg1="(forall a b. a&lt;= b /\ b&lt;&gt; a -&gt; a &lt; b)">
            <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="4"><result status="valid" time="0.06" steps="53"/></proof>
            </goal>
            <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.1.1" proved="true">
            <transf name="apply" proved="true" arg1="h">
             <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.1.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.1.1.0.0" proved="true">
              <transf name="apply" proved="true" arg1="H14">
               <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="H4">
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.0.1.1.0.1" proved="true">
              <transf name="apply" proved="true" arg1="H3">
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1" proved="true">
          <transf name="apply" proved="true" arg1="pos_by_strict">
           <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
            <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="pos_to_strict">
              <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="H17">
               <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="(forall a b c. a &lt;= b /\ b &lt;= c -&gt; a &lt;= c)">
                 <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <proof prover="4"><result status="valid" time="0.05" steps="57"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                 <transf name="instantiate" proved="true" arg1="h" arg2="i,k1,k">
                  <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="Hinst">
                   <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1.0.0.0" proved="true">
                    <proof prover="0"><result status="valid" time="0.85"/></proof>
                    </goal>
                    <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1.0.0.1" proved="true">
                    <transf name="assert" proved="true" arg1="(forall a b. a+1 &lt;= b -&gt; a &lt;= b)">
                     <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
                     <proof prover="4"><result status="valid" time="0.05" steps="55"/></proof>
                     </goal>
                     <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1.0.0.1.1" proved="true">
                     <transf name="apply" proved="true" arg1="h">
                      <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="H1">
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ind_iproduct_sup_one.4.0.1.0.1.0.1.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.05" steps="53"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_transl" expl="VC for ind_isum_transl" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC ind_isum_transl.0" expl="VC for ind_isum_transl" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_transl.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="18"/></proof>
   </goal>
   <goal name="VC ind_isum_transl.0.1" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ind_isum_transl.0.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_def">
     <goal name="VC ind_isum_transl.0.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_isum_def">
      <goal name="VC ind_isum_transl.0.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_transl_plus_one" expl="VC for ind_isum_transl_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_transl_plus_one.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_transl_minus_one" expl="VC for ind_isum_transl_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_transl_minus_one.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.41" steps="119"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_scal" expl="VC for ind_isum_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_scal.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_scal.0.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
   </goal>
   <goal name="VC ind_isum_scal.0.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_scal.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="VC ind_isum_scal.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_ind_isum" expl="VC for minus_ind_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_ind_isum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC minus_ind_isum.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.30" steps="153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_ind_isum_rev" expl="VC for minus_ind_isum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_ind_isum_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="1.77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_scal_rev" expl="VC for ind_isum_scal_rev" proved="true">
 <proof prover="4"><result status="valid" time="0.74" steps="148"/></proof>
 </goal>
 <goal name="VC ind_isum_scal_rev_right" expl="VC for ind_isum_scal_rev_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_scal_rev_right.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC ind_isum_scal_rev_right.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_scal_right" expl="VC for ind_isum_scal_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_scal_right.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="VC ind_isum_scal_right.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bound" expl="VC for ind_isum_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_bound.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="26"/></proof>
  </goal>
  <goal name="VC ind_isum_bound.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="VC ind_isum_bound.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="33"/></proof>
  </goal>
  <goal name="VC ind_isum_bound.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="280"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC comp_trans_equal_strict" expl="VC for comp_trans_equal_strict" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
 </goal>
 <goal name="VC transitive_inf_leq_int" expl="VC for transitive_inf_leq_int" proved="true">
 <proof prover="4"><result status="valid" time="0.13" steps="22"/></proof>
 </goal>
 <goal name="VC transitive_inf_int" expl="VC for transitive_inf_int" proved="true">
 <proof prover="4"><result status="valid" time="0.14" steps="22"/></proof>
 </goal>
 <goal name="VC compeq_trans_sum" expl="VC for compeq_trans_sum" proved="true">
 <proof prover="4"><result status="valid" time="0.04" steps="20"/></proof>
 </goal>
 <goal name="VC compeq_trans_sum_zero" expl="VC for compeq_trans_sum_zero" proved="true">
 <proof prover="4"><result status="valid" time="0.04" steps="20"/></proof>
 </goal>
 <goal name="VC comp_trans_sum" expl="VC for comp_trans_sum" proved="true">
 <proof prover="4"><result status="valid" time="0.13" steps="20"/></proof>
 </goal>
 <goal name="VC comp_trans_mult" expl="VC for comp_trans_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC comp_trans_mult.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bound_eq" expl="VC for ind_isum_bound_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_bound_eq.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="VC ind_isum_bound_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="28"/></proof>
  </goal>
  <goal name="VC ind_isum_bound_eq.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="34"/></proof>
  </goal>
  <goal name="VC ind_isum_bound_eq.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="223"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_scal_gen" expl="VC for ind_isum_scal_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_scal_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ind_isum_scal">
   <goal name="VC ind_isum_scal_gen.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_trans" expl="VC for ind_isum_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_trans.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_trans.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
  <goal name="VC ind_isum_trans.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_trans.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="24"/></proof>
  </goal>
  <goal name="VC ind_isum_trans.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_out_int" expl="VC for minus_out_int" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="18"/></proof>
 </goal>
</theory>
<theory name="Abs" proved="true">
 <goal name="VC abs_eqinf" expl="VC for abs_eqinf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC abs_eqinf.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
  <goal name="VC abs_eqinf.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC abs_inf" expl="VC for abs_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC abs_inf.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="VC abs_inf.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC abs_eqsup" expl="VC for abs_eqsup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC abs_eqsup.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC abs_sup" expl="VC for abs_sup" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="19"/></proof>
 </goal>
 <goal name="VC inv_negeq" expl="VC for inv_negeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_negeq.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="VC inv_negeq.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_neg" expl="VC for inv_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_neg.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="VC inv_neg.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="From_int_iter" proved="true">
 <goal name="VC from_int_sum" expl="VC for from_int_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC from_int_sum.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC from_int_sum.0.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="117"/></proof>
   </goal>
   <goal name="VC from_int_sum.0.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.19" steps="117"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC from_int_sum.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.08" steps="117"/></proof>
  </goal>
  <goal name="VC from_int_sum.2" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(j = i)">
   <goal name="VC from_int_sum.2.0" expl="true case (postcondition)" proved="true">
   <proof prover="2"><result status="valid" time="0.44"/></proof>
   </goal>
   <goal name="VC from_int_sum.2.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC from_int_sum.2.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.35"/></proof>
    </goal>
    <goal name="VC from_int_sum.2.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC from_int_sum.2.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC from_int_sum.2.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="((j - 1) + 1)" arg2="j" arg3="in" arg4="H1">
       <goal name="VC from_int_sum.2.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC from_int_sum.2.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
         <goal name="VC from_int_sum.2.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="4.61"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC from_int_sum.2.1.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.12" steps="115"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC from_int_sum.2.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="0.15" steps="115"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_sum" expl="VC for i_to_c_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_sum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="115"/></proof>
  </goal>
  <goal name="VC i_to_c_sum.1" expl="precondition" proved="true">
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="4"><result status="valid" time="0.15" steps="117"/></proof>
  </goal>
  <goal name="VC i_to_c_sum.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC i_to_c_sum.2.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.17" steps="119"/></proof>
   </goal>
   <goal name="VC i_to_c_sum.2.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.40"/></proof>
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC i_to_c_sum.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.50"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC i_to_c_sum.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="126"/></proof>
  </goal>
  <goal name="VC i_to_c_sum.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  <transf name="case" proved="true" arg1="(cardinal s = 1)">
   <goal name="VC i_to_c_sum.5.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="timeout" time="5.00"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC i_to_c_sum.5.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="isum_def">
     <goal name="VC i_to_c_sum.5.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="rewrite" proved="true" arg1="iterate_one">
      <goal name="VC i_to_c_sum.5.0.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="2"><result status="valid" time="0.86"/></proof>
      </goal>
      <goal name="VC i_to_c_sum.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.14"/></proof>
      </goal>
      <goal name="VC i_to_c_sum.5.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.72"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC i_to_c_sum.5.1" expl="false case (postcondition)" proved="true">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="timeout" time="5.00"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC i_to_c_sum.5.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.36"/></proof>
    </goal>
    <goal name="VC i_to_c_sum.5.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC i_to_c_sum.5.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC i_to_c_sum.5.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H4">
       <goal name="VC i_to_c_sum.5.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H4">
        <goal name="VC i_to_c_sum.5.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H3">
         <goal name="VC i_to_c_sum.5.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
          <goal name="VC i_to_c_sum.5.1.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="0.45"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC i_to_c_sum.5.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="0.33"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC from_int_product" expl="VC for from_int_product" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC from_int_product.0" expl="VC for from_int_product" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC from_int_product.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="113"/></proof>
   </goal>
   <goal name="VC from_int_product.0.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="117"/></proof>
   </goal>
   <goal name="VC from_int_product.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="117"/></proof>
   </goal>
   <goal name="VC from_int_product.0.3" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(i =j)">
    <goal name="VC from_int_product.0.3.0" expl="true case (postcondition)" proved="true">
    <proof prover="2"><result status="valid" time="0.45"/></proof>
    </goal>
    <goal name="VC from_int_product.0.3.1" expl="false case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="VC from_int_product.0.3.1.0" expl="false case (postcondition)" proved="true">
     <proof prover="1"><result status="valid" time="0.35"/></proof>
     </goal>
     <goal name="VC from_int_product.0.3.1.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC from_int_product.0.3.1.1.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC from_int_product.0.3.1.1.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC from_int_product.0.3.1.1.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC from_int_product.0.3.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
          <goal name="VC from_int_product.0.3.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="2.36"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC from_int_product.0.3.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.12" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="P_minmax">
 <goal name="VC min_set" expl="VC for min_set" proved="true">
 <proof prover="4"><result status="valid" time="0.09" steps="658"/></proof>
 </goal>
 <goal name="VC max_set" expl="VC for max_set" proved="true">
 <proof prover="4"><result status="valid" time="0.06" steps="737"/></proof>
 </goal>
 <goal name="VC max3" expl="VC for max3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC max3.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC max_right" expl="VC for max_right" proved="true">
 <proof prover="2"><result status="valid" time="0.01"/></proof>
 </goal>
 <goal name="VC max_left" expl="VC for max_left" proved="true">
 <proof prover="2"><result status="valid" time="0.01"/></proof>
 </goal>
 <goal name="VC min_filter" expl="VC for min_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC min_filter.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.1.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.3.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
   <goal name="VC min_filter.3.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.4.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.5.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="11"/></proof>
   </goal>
   <goal name="VC min_filter.5.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.6.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
   <goal name="VC min_filter.6.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC min_filter.7.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="18"/></proof>
   </goal>
   <goal name="VC min_filter.7.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_filter.8" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC max_filter" expl="VC for max_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC max_filter.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.1.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.3.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
   <goal name="VC max_filter.3.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.4.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.5.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="11"/></proof>
   </goal>
   <goal name="VC max_filter.5.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.6.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
   <goal name="VC max_filter.6.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC max_filter.7.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="18"/></proof>
   </goal>
   <goal name="VC max_filter.7.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC max_filter.8" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC appr_pre" expl="VC for appr_pre">
 <transf name="split_vc" >
  <goal name="VC appr_pre.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.0.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.22"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC appr_pre.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="valid" time="1.35"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24" steps="120"/></proof>
  </goal>
  <goal name="VC appr_pre.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="2.14"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC appr_pre.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="122"/></proof>
  </goal>
  <goal name="VC appr_pre.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.23" steps="128"/></proof>
  </goal>
  <goal name="VC appr_pre.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="timeout" time="5.00"/></proof>
  <proof prover="3"><result status="valid" time="5.43"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC appr_pre.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.7.0" expl="precondition" proved="true">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="valid" time="0.36"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.8" expl="precondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="timeout" time="5.00"/></proof>
  <proof prover="3"><result status="valid" time="5.02"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC appr_pre.9" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="130"/></proof>
  </goal>
  <goal name="VC appr_pre.10" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="2.72"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC appr_pre.11" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="132"/></proof>
  </goal>
  <goal name="VC appr_pre.12" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20" steps="138"/></proof>
  </goal>
  <goal name="VC appr_pre.13" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC appr_pre.14" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  <proof prover="3"><result status="valid" time="5.99"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC appr_pre.15" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="failure" time="0.00"/></proof>
  <proof prover="3"><result status="valid" time="7.18"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC appr_pre.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.16.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.13" steps="136"/></proof>
   </goal>
   <goal name="VC appr_pre.16.1" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.14" steps="136"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.17" expl="assertion">
  <transf name="split_vc" >
   <goal name="VC appr_pre.17.0" expl="assertion">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="failure" time="0.00"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.18" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.18.0" expl="assertion" proved="true">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="failure" time="0.00"/></proof>
   <proof prover="3"><result status="valid" time="12.43"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.19" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.19.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.20" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.20.0" expl="assertion" proved="true">
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="failure" time="0.00"/></proof>
   <proof prover="3"><result status="valid" time="11.62"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.21" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.21.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.22" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.22.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.23" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.23.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.24" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.24.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.25" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="141"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.25.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.26" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="141"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.26.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.27" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.27.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.28" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.28.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.29" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC appr_pre.29.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr_pre.30" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC appr_pre.30.0" expl="postcondition">
   <transf name="exists" arg1="n">
    <goal name="VC appr_pre.30.0.0">
    <transf name="split_vc" >
     <goal name="VC appr_pre.30.0.0.0" proved="true">
     <proof prover="4"><result status="valid" time="0.11" steps="111"/></proof>
     </goal>
     <goal name="VC appr_pre.30.0.0.1">
     <proof prover="1"><result status="timeout" time="5.00"/></proof>
     <proof prover="2"><result status="failure" time="0.00"/></proof>
     <proof prover="4"><result status="timeout" time="5.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC appr_pre.30.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="133"/></proof>
   <transf name="split_vc" >
    <goal name="VC appr_pre.30.1.0" expl="postcondition">
    <transf name="split_vc" >
     <goal name="VC appr_pre.30.1.0.0" expl="postcondition">
     <proof prover="1"><result status="timeout" time="5.00"/></proof>
     <proof prover="2"><result status="failure" time="0.00"/></proof>
     <proof prover="4"><result status="timeout" time="5.00"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC appr_pre.30.1.1" expl="postcondition">
    <transf name="split_vc" >
     <goal name="VC appr_pre.30.1.1.0" expl="postcondition">
     <proof prover="1"><result status="timeout" time="5.00"/></proof>
     <proof prover="2"><result status="failure" time="0.00"/></proof>
     <proof prover="4"><result status="timeout" time="5.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC appr" expl="VC for appr">
 <transf name="split_vc" >
  <goal name="VC appr.0" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC appr.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.15" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="109"/></proof>
  </goal>
  <goal name="VC appr.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="111"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC appr.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.16" steps="111"/></proof>
   </goal>
   <goal name="VC appr.2.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC appr.3" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC appr.3.0" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="VC appr.3.0.0" expl="postcondition">
    <transf name="exists" arg1="0">
     <goal name="VC appr.3.0.0.0">
     <transf name="split_vc" >
      <goal name="VC appr.3.0.0.0.0" proved="true">
      <proof prover="2"><result status="valid" time="0.63"/></proof>
      <proof prover="4"><result status="valid" time="0.17" steps="111"/></proof>
      </goal>
      <goal name="VC appr.3.0.0.0.1">
      <proof prover="1"><result status="timeout" time="5.00"/></proof>
      <proof prover="2"><result status="failure" time="0.00"/></proof>
      <proof prover="4"><result status="timeout" time="5.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC appr.3.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.53"/></proof>
    <transf name="split_vc" proved="true" >
     <goal name="VC appr.3.0.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC appr.3.0.1.0.0" expl="postcondition" proved="true">
      <proof prover="4"><result status="valid" time="0.17" steps="111"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC min_complex" expl="VC for min_complex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC min_complex.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.21"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC min_complex.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="105"/></proof>
   </goal>
   <goal name="VC min_complex.0.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_complex.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.47"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC min_complex.1.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.16" steps="108"/></proof>
   </goal>
   <goal name="VC min_complex.1.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.24"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_complex.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC min_complex.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="108"/></proof>
   </goal>
   <goal name="VC min_complex.2.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.17" steps="110"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC min_set_complex" expl="VC for min_set_complex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC min_set_complex.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.23"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC min_set_complex.0.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="103"/></proof>
   </goal>
   <goal name="VC min_set_complex.0.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.27"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_set_complex.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27"/></proof>
  <proof prover="2"><result status="valid" time="0.35"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC min_set_complex.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.39"/></proof>
  <proof prover="4"><result status="valid" time="0.15" steps="110"/></proof>
  </goal>
  <goal name="VC min_set_complex.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.24"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC min_set_complex.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27"/></proof>
  <proof prover="4"><result status="valid" time="0.09" steps="113"/></proof>
  </goal>
  <goal name="VC min_set_complex.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC min_set_complex.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.38"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC min_set_complex.6.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="110"/></proof>
   </goal>
   <goal name="VC min_set_complex.6.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.15" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_set_complex.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.35"/></proof>
  <transf name="split_vc" >
   <goal name="VC min_set_complex.7.0" expl="postcondition">
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2" obsolete="true"><result status="failure" time="0.00"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC min_set_complex.7.1" expl="postcondition">
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="2" obsolete="true"><result status="failure" time="0.00"/></proof>
   <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC min_set_complex_pos" expl="VC for min_set_complex_pos" proved="true">
 <proof prover="4"><result status="timeout" time="5.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="VC min_set_complex_pos.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="timeout" time="5.00"/></proof>
  <transf name="split_all_full" proved="true" >
   <goal name="VC min_set_complex_pos.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="min_set_complex_spec2" arg2="s,f">
    <goal name="VC min_set_complex_pos.0.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC min_set_complex_pos.0.0.0.0" expl="destruct premise" proved="true">
     <proof prover="2"><result status="valid" time="0.11"/></proof>
     </goal>
     <goal name="VC min_set_complex_pos.0.0.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC min_set_complex_pos.0.0.0.1.0" expl="destruct premise" proved="true">
      <proof prover="2"><result status="valid" time="0.31"/></proof>
      </goal>
      <goal name="VC min_set_complex_pos.0.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.26"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
