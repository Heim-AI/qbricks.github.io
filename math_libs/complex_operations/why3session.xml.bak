<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="complex_operations.mlw"/>
<theory name="Simpl_op" proved="true">
 <goal name="VC add_im_re" expl="VC for add_im_re" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_im_re.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="37"/></proof>
  </goal>
  <goal name="VC add_im_re.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="37"/></proof>
  </goal>
  <goal name="VC add_im_re.2" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC add_im_re.2.0" expl="precondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC add_im_re.2.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="t_real_part_def">
     <goal name="VC add_im_re.2.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="t_real_part_def">
      <goal name="VC add_im_re.2.0.0.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b c d. a+.b+.c+.d = (a+.c) +. (b+.d))">
       <goal name="VC add_im_re.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC add_im_re.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.07" steps="41"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC add_im_re.2.0.0.0.0.1" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="h">
        <goal name="VC add_im_re.2.0.0.0.0.1.0" expl="precondition" proved="true">
        <transf name="apply" proved="true" arg1="add_eq_t">
         <goal name="VC add_im_re.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.64" steps="43"/></proof>
         </goal>
         <goal name="VC add_im_re.2.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.15"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_im_re.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="1.28" steps="44"/></proof>
  </goal>
  <goal name="VC add_im_re.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="1.38" steps="46"/></proof>
  </goal>
  <goal name="VC add_im_re.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="1.31" steps="48"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_real_part" expl="VC for add_real_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_real_part.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_im_part" expl="VC for add_im_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_im_part.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_real_part_rev" expl="VC for add_real_part_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_real_part_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_im_part_rev" expl="VC for add_im_part_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_im_part_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_add_r" expl="VC for mult_distr_add_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_add_r.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_add_minus" expl="VC for add_add_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_add_minus.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_minus" expl="VC for mult_distr_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_minus.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(b-.c)" arg2="(b+. (-.c))">
   <goal name="VC mult_distr_minus.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.24"/></proof>
   </goal>
   <goal name="VC mult_distr_minus.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_out" expl="VC for minus_out" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_out.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_add_r_rev" expl="VC for mult_distr_add_r_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_add_r_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_minus_rev" expl="VC for mult_distr_minus_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_minus_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_distr_add" expl="VC for div_distr_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_distr_add.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_distr_minus" expl="VC for div_distr_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_distr_minus.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((b-.c)/.a)" arg2="((b-.c) *.  (c_one/.a))">
   <goal name="VC div_distr_minus.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.10"/></proof>
   </goal>
   <goal name="VC div_distr_minus.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_distr_add_rev" expl="VC for div_distr_add_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_distr_add_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_distr_minus_rev" expl="VC for div_distr_minus_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_distr_minus_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_add_l" expl="VC for mult_distr_add_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_add_l.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_add_l_rev" expl="VC for mult_distr_add_l_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_add_l_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_minus_r" expl="VC for mult_distr_minus_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_minus_r.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_minus_ll" expl="VC for mult_distr_minus_ll" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_minus_ll.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_minus_ri" expl="VC for mult_distr_minus_ri" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_minus_ri.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_distr_op" expl="VC for minus_distr_op" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_distr_op.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(a -. (b +. c))" arg2="(a +. (-.(b +. c)))">
   <goal name="VC minus_distr_op.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(-. (b +. c))" arg2="(-.b +. -. c)">
    <goal name="VC minus_distr_op.0.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.21"/></proof>
    </goal>
    <goal name="VC minus_distr_op.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.08" steps="37"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC minus_distr_op.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_distr_minus_l" expl="VC for mult_distr_minus_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_distr_minus_l.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assoc_right" expl="VC for assoc_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assoc_right.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assoc_right_mult" expl="VC for assoc_right_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assoc_right_mult.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_elim" expl="VC for minus_elim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_elim.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_eq_t" expl="VC for minus_eq_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_eq_t.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_distr_elim" expl="VC for minus_distr_elim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_distr_elim.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC plus_minus_distr_elim" expl="VC for plus_minus_distr_elim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC plus_minus_distr_elim.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC def_by_minus" expl="VC for def_by_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC def_by_minus.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC switch" expl="VC for switch" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC switch.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_a_c" expl="VC for meet_a_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_a_c.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_a_d" expl="VC for meet_a_d" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_a_d.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_b_c" expl="VC for meet_b_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_b_c.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_b_d" expl="VC for meet_b_d" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_b_d.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_c_d" expl="VC for meet_c_d" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_c_d.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_add" expl="VC for inv_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_add.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC switch_m" expl="VC for switch_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC switch_m.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_a_c_m" expl="VC for meet_a_c_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_a_c_m.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_a_d_m" expl="VC for meet_a_d_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_a_d_m.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_b_c_m" expl="VC for meet_b_c_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_b_c_m.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_b_d_m" expl="VC for meet_b_d_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_b_d_m.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meet_c_d_m" expl="VC for meet_c_d_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC meet_c_d_m.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_real_part_add" expl="VC for t_real_part_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_real_part_add.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_real_part_subs" expl="VC for t_real_part_subs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_real_part_subs.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="minus_elim">
   <goal name="VC t_real_part_subs.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="minus_elim">
    <goal name="VC t_real_part_subs.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="t_real_part_add">
     <goal name="VC t_real_part_subs.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="add_eq_t">
      <goal name="VC t_real_part_subs.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.05" steps="35"/></proof>
      </goal>
      <goal name="VC t_real_part_subs.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC t_real_part_subs.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.17" steps="37"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_im_part_add" expl="VC for t_im_part_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_im_part_add.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_im_part_subs" expl="VC for t_im_part_subs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_im_part_subs.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_real_part_real" expl="VC for t_real_part_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_real_part_real.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_real_part_im" expl="VC for t_real_part_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_real_part_im.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC im_t_im_part_im" expl="VC for im_t_im_part_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC im_t_im_part_im.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_im_part_im" expl="VC for t_im_part_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_im_part_im.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="39"/></proof>
  </goal>
  <goal name="VC t_im_part_im.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="39"/></proof>
  </goal>
  <goal name="VC t_im_part_im.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="minus_out">
   <goal name="VC t_im_part_im.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC t_im_part_im.2.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(im *. im)" arg2="(-.c_one)">
     <goal name="VC t_im_part_im.2.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.75"/></proof>
     </goal>
     <goal name="VC t_im_part_im.2.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.05" steps="40"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_im_part_real" expl="VC for t_im_part_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_im_part_real.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC t_im_part_real.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="real__def" arg2="in" arg3="H">
    <goal name="VC t_im_part_real.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(im_part a = 0.0)">
     <goal name="VC t_im_part_real.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.07" steps="42"/></proof>
     </goal>
     <goal name="VC t_im_part_real.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC a_div_b_mult_a" expl="VC for a_div_b_mult_a" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC a_div_b_mult_a.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="45"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Base_type" proved="true">
 <goal name="null_product" proved="true">
 <proof prover="6"><result status="valid" time="0.08" steps="41"/></proof>
 </goal>
 <goal name="VC couple_value" expl="VC for couple_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC couple_value.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC couple_value_dev" expl="VC for couple_value_dev" proved="true">
 <proof prover="6"><result status="valid" time="0.07" steps="41"/></proof>
 </goal>
 <goal name="VC neutral_c_zero" expl="VC for neutral_c_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC neutral_c_zero.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC neutral_c_zero.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC neutral_c_zero.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC neutral_c_zero.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="37"/></proof>
  </goal>
  <goal name="VC neutral_c_zero.4" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC neutral_c_zero.4.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC neutral_c_zero.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="iterable_def">
     <goal name="VC neutral_c_zero.4.0.0.0" expl="VC for neutral_c_zero" proved="true">
     <transf name="exists" proved="true" arg1="c_zero">
      <goal name="VC neutral_c_zero.4.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.09" steps="42"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum" expl="VC for sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="VC sum.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_empty" expl="VC for sum_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_empty.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="41"/></proof>
  </goal>
  <goal name="VC sum_empty.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC sum_empty.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="43"/></proof>
  </goal>
  <goal name="VC sum_empty.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.98"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_one" expl="VC for sum_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="41"/></proof>
  </goal>
  <goal name="VC sum_one.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC sum_one.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="45"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_add" expl="VC for sum_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_add.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC sum_add.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="43"/></proof>
  </goal>
  <goal name="VC sum_add.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="43"/></proof>
  </goal>
  <goal name="VC sum_add.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_plus_one" expl="VC for sum_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_plus_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="43"/></proof>
  </goal>
  <goal name="VC sum_plus_one.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_partition" expl="VC for sum_partition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_partition.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="46"/></proof>
  </goal>
  <goal name="VC sum_partition.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="45"/></proof>
  </goal>
  <goal name="VC sum_partition.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_partition.2.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="50"/></proof>
   </goal>
   <goal name="VC sum_partition.2.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.16"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_partition.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="VC sum_partition.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="52"/></proof>
  </goal>
  <goal name="VC sum_partition.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="54"/></proof>
  </goal>
  <goal name="VC sum_partition.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC sum_partition.6.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.52"/></proof>
   </goal>
   <goal name="VC sum_partition.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC sum_partition.6.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC sum_partition.6.1.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="1.27"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_real" expl="VC for sum_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_real.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="43"/></proof>
  </goal>
  <goal name="VC sum_real.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="VC sum_real.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="50"/></proof>
  </goal>
  <goal name="VC sum_real.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC sum_real.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="47"/></proof>
  </goal>
  <goal name="VC sum_real.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC sum_real.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="51"/></proof>
  </goal>
  <goal name="VC sum_real.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_sum_eq" expl="VC for map_sum_eq" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC map_sum_eq.0" expl="VC for map_sum_eq" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC map_sum_eq.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="43"/></proof>
   </goal>
   <goal name="VC map_sum_eq.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.19"/></proof>
   </goal>
   <goal name="VC map_sum_eq.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="43"/></proof>
   </goal>
   <goal name="VC map_sum_eq.0.3" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC map_sum_eq.0.3.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sum_def">
     <goal name="VC map_sum_eq.0.3.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sum_def">
      <goal name="VC map_sum_eq.0.3.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_comp" expl="VC for sum_comp" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC sum_comp.0" expl="VC for sum_comp" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_comp.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.04" steps="39"/></proof>
   </goal>
   <goal name="VC sum_comp.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.18"/></proof>
   </goal>
   <goal name="VC sum_comp.0.2" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.21"/></proof>
   </goal>
   <goal name="VC sum_comp.0.3" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC sum_comp.0.3.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sum_def">
     <goal name="VC sum_comp.0.3.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sum_def">
      <goal name="VC sum_comp.0.3.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_hyp" proved="true" arg1="in" arg2="H">
       <goal name="VC sum_comp.0.3.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC sum_comp.0.3.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="sum_def">
         <goal name="VC sum_comp.0.3.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(fun (k:b) -&gt; f @ k)" arg2="f">
          <goal name="VC sum_comp.0.3.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(fun (k:b) -&gt; g @ k)" arg2="g">
           <goal name="VC sum_comp.0.3.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="6"><result status="valid" time="0.05" steps="44"/></proof>
           </goal>
           <goal name="VC sum_comp.0.3.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.16" steps="44"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC sum_comp.0.3.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.05" steps="44"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_comp_rev" expl="VC for sum_comp_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_comp_rev.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC sum_comp_rev.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_iter_" expl="VC for sum_iter_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_iter_.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="VC sum_iter_.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sum_iter_.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="opposite_def">
    <goal name="VC sum_iter_.1.0.0" expl="VC for sum_iter_" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC sum_iter_.1.0.0.0" expl="VC for sum_iter_" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sum_iter_.1.0.0.0.0" expl="VC for sum_iter_" proved="true">
      <proof prover="6"><result status="valid" time="0.08" steps="46"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_iter_.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sum_iter_.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="opposite_com_def">
    <goal name="VC sum_iter_.2.0.0" expl="VC for sum_iter_" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC sum_iter_.2.0.0.0" expl="VC for sum_iter_" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC sum_iter_.2.0.0.0.0" expl="VC for sum_iter_" proved="true">
      <proof prover="4"><result status="valid" time="0.26"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_iter_.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="neutral_zero" proved="true">
 <proof prover="6"><result status="valid" time="0.08" steps="49"/></proof>
 </goal>
 <goal name="VC sum_eq" expl="VC for sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="53"/></proof>
  </goal>
  <goal name="VC sum_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC sum_eq.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="53"/></proof>
  </goal>
  <goal name="VC sum_eq.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_eq_gen" expl="VC for sum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_eq_gen.0" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC sum_eq_gen.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="53"/></proof>
   </goal>
   <goal name="VC sum_eq_gen.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="53"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_disjoint_transitivity" expl="VC for sum_disjoint_transitivity" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_disjoint_transitivity.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="51"/></proof>
  </goal>
  <goal name="VC sum_disjoint_transitivity.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC sum_disjoint_transitivity.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="53"/></proof>
  </goal>
  <goal name="VC sum_disjoint_transitivity.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_to_cartesian_product" expl="VC for sum_to_cartesian_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_to_cartesian_product.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="49"/></proof>
  </goal>
  <goal name="VC sum_to_cartesian_product.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="VC sum_to_cartesian_product.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sum_to_cartesian_product.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_def">
    <goal name="VC sum_to_cartesian_product.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sum_def">
     <goal name="VC sum_to_cartesian_product.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sum_def">
      <goal name="VC sum_to_cartesian_product.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_from_cartesian_product" expl="VC for sum_from_cartesian_product" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC sum_from_cartesian_product.0" expl="VC for sum_from_cartesian_product" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_from_cartesian_product.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.50"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum" expl="VC for ind_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_to_int_iterate" expl="VC for ind_sum_to_int_iterate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_to_int_iterate.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_cardone" expl="VC for ind_sum_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_cardone.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="51"/></proof>
  </goal>
  <goal name="VC ind_sum_cardone.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_right_extension" expl="VC for ind_sum_right_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_right_extension.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="49"/></proof>
  </goal>
  <goal name="VC ind_sum_right_extension.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_trans" expl="VC for ind_sum_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_trans.0" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="57"/></proof>
  </goal>
  <goal name="VC ind_sum_trans.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="57"/></proof>
  </goal>
  <goal name="VC ind_sum_trans.2" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ind_sum_trans.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.47"/></proof>
   </goal>
   <goal name="VC ind_sum_trans.2.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
    <goal name="VC ind_sum_trans.2.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
     <goal name="VC ind_sum_trans.2.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
      <goal name="VC ind_sum_trans.2.1.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="int_iterate_transitivity" arg2="(fun (y0:complex) (y1:complex) -&gt; y0 +. y1),f,i,k,j">
       <goal name="VC ind_sum_trans.2.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="1"><result status="valid" time="2.69"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_plus_one" expl="VC for ind_sum_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_plus_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="51"/></proof>
  </goal>
  <goal name="VC ind_sum_plus_one.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="53"/></proof>
  </goal>
  <goal name="VC ind_sum_plus_one.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_ind_sum" expl="VC for real_ind_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_ind_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="53"/></proof>
  </goal>
  <goal name="VC real_ind_sum.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC real_ind_sum.1.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="53"/></proof>
   </goal>
   <goal name="VC real_ind_sum.1.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_ind_sum.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="53"/></proof>
  </goal>
  <goal name="VC real_ind_sum.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="60"/></proof>
  </goal>
  <goal name="VC real_ind_sum.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC real_ind_sum.4.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="55"/></proof>
   </goal>
   <goal name="VC real_ind_sum.4.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_ind_sum.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="55"/></proof>
  </goal>
  <goal name="VC real_ind_sum.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="62"/></proof>
  </goal>
  <goal name="VC real_ind_sum.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="57"/></proof>
  </goal>
  <goal name="VC real_ind_sum.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC real_ind_sum.8.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="57"/></proof>
   </goal>
   <goal name="VC real_ind_sum.8.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="61"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_ind_sum" expl="VC for positive_ind_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_ind_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="53"/></proof>
  </goal>
  <goal name="VC positive_ind_sum.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="53"/></proof>
  </goal>
  <goal name="VC positive_ind_sum.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="53"/></proof>
  </goal>
  <goal name="VC positive_ind_sum.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="60"/></proof>
  </goal>
  <goal name="VC positive_ind_sum.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="55"/></proof>
  </goal>
  <goal name="VC positive_ind_sum.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_sum" expl="VC for positive_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_sum.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC positive_sum.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="58"/></proof>
  </goal>
  <goal name="VC positive_sum.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
  </goal>
  <goal name="VC positive_sum.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_eq" expl="VC for ind_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="55"/></proof>
  </goal>
  <goal name="VC ind_sum_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="51"/></proof>
  </goal>
  <goal name="VC ind_sum_eq.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_eq_del_bound" expl="VC for ind_sum_eq_del_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_eq_del_bound.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="55"/></proof>
  </goal>
  <goal name="VC ind_sum_eq_del_bound.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_eq_del_bound_rev" expl="VC for ind_sum_eq_del_bound_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_eq_del_bound_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.56"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_eq_gen" expl="VC for ind_sum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_eq_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="59"/></proof>
  </goal>
  <goal name="VC ind_sum_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_eq_bound" expl="VC for ind_sum_eq_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_eq_bound.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="57"/></proof>
  </goal>
  <goal name="VC ind_sum_eq_bound.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="53"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_comp" expl="VC for ind_sum_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_comp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="49"/></proof>
  </goal>
  <goal name="VC ind_sum_comp.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="51"/></proof>
  </goal>
  <goal name="VC ind_sum_comp.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="VC ind_sum_comp.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
   <goal name="VC ind_sum_comp.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(fun (k:int) -&gt; ((fun (y0:complex) (y1:complex) -&gt; y0 +. y1) @ (f @ k)) @ (g @ k))" arg2="(fun (k:int) -&gt; (f @ k) +. (g @ k))" arg3="in" arg4="H">
    <goal name="VC ind_sum_comp.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC ind_sum_comp.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.25"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_sum_comp.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_comp_rev" expl="VC for ind_sum_comp_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_comp_rev.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_to_iterate" expl="VC for ind_sum_to_iterate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_to_iterate.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="51"/></proof>
  </goal>
  <goal name="VC ind_sum_to_iterate.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC ind_sum_to_iterate.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="53"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_to_sum" expl="VC for ind_sum_to_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_to_sum.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_ind_sum_eq" expl="VC for map_ind_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC map_ind_sum_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
  </goal>
  <goal name="VC map_ind_sum_eq.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
   <goal name="VC map_ind_sum_eq.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
    <goal name="VC map_ind_sum_eq.1.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_scal" expl="VC for sum_scal" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC sum_scal.0" expl="VC for sum_scal" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_scal.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="53"/></proof>
   </goal>
   <goal name="VC sum_scal.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="55"/></proof>
   </goal>
   <goal name="VC sum_scal.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="57"/></proof>
   </goal>
   <goal name="VC sum_scal.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="59"/></proof>
   </goal>
   <goal name="VC sum_scal.0.4" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC sum_scal.0.4.0" expl="variant decrease" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="63"/></proof>
    </goal>
    <goal name="VC sum_scal.0.4.1" expl="variant decrease" proved="true">
    <proof prover="1"><result status="valid" time="0.22"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sum_scal.0.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC sum_scal.0.5.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.18"/></proof>
    </goal>
    <goal name="VC sum_scal.0.5.1" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H3">
     <goal name="VC sum_scal.0.5.1.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC sum_scal.0.5.1.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sum_scal.0.5.1.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC sum_scal.0.5.1.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.21"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sum_scal.0.5.1.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="65"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_scal_right" expl="VC for sum_scal_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_scal_right.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="53"/></proof>
  </goal>
  <goal name="VC sum_scal_right.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="55"/></proof>
  </goal>
  <goal name="VC sum_scal_right.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="57"/></proof>
  </goal>
  <goal name="VC sum_scal_right.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="59"/></proof>
  </goal>
  <goal name="VC sum_scal_right.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_scal_right.4.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="63"/></proof>
   </goal>
   <goal name="VC sum_scal_right.4.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.18"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_scal_right.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_scal_right.5.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.17"/></proof>
   </goal>
   <goal name="VC sum_scal_right.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC sum_scal_right.5.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H3">
     <goal name="VC sum_scal_right.5.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC sum_scal_right.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sum_scal_right.5.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H7">
        <goal name="VC sum_scal_right.5.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H7">
         <goal name="VC sum_scal_right.5.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_distr_add_l">
          <goal name="VC sum_scal_right.5.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.95"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_scal_right.5.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="65"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sum_scal_right.5.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="65"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_scal_rev_right" expl="VC for sum_scal_rev_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_scal_rev_right.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_scal_rev" expl="VC for sum_scal_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_scal_rev.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_scal" expl="VC for ind_sum_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_scal.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
   <goal name="VC ind_sum_scal.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
    <goal name="VC ind_sum_scal.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_scal_rev" expl="VC for ind_sum_scal_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_scal_rev.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_ind_sum" expl="VC for scal_ind_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_ind_sum.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_sum (fun (i1:int) -&gt; (f @ i1) *. a) i j)" arg2="(ind_sum (fun (i1:int) -&gt; a *. (f @ i1)) i j )">
   <goal name="VC scal_ind_sum.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC scal_ind_sum.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.05" steps="51"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC scal_ind_sum.0.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC scal_ind_sum.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
     <goal name="VC scal_ind_sum.0.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="VC scal_ind_sum.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC scal_ind_sum.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC scal_ind_sum.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.08" steps="55"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_ind_sum_rev" expl="VC for scal_ind_sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_ind_sum_rev.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_sum f i j *. a)" arg2="( a*. ind_sum f i j )">
   <goal name="VC scal_ind_sum_rev.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC scal_ind_sum_rev.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ind_sum_eq">
     <goal name="VC scal_ind_sum_rev.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC scal_ind_sum_rev.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="55"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC scal_ind_sum_rev.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="51"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_scal_gen" expl="VC for sum_scal_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_scal_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="sum_scal">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_scal_gen" expl="VC for ind_sum_scal_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_scal_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ind_sum_scal">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_commute" expl="VC for ind_sum_commute" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC ind_sum_commute.0" expl="VC for ind_sum_commute" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_sum_commute.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="53"/></proof>
   </goal>
   <goal name="VC ind_sum_commute.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.21"/></proof>
   </goal>
   <goal name="VC ind_sum_commute.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="55"/></proof>
   </goal>
   <goal name="VC ind_sum_commute.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="55"/></proof>
   </goal>
   <goal name="VC ind_sum_commute.0.4" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
    <goal name="VC ind_sum_commute.0.4.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
     <goal name="VC ind_sum_commute.0.4.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC ind_sum_commute.0.4.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
       <goal name="VC ind_sum_commute.0.4.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_sum_to_int_iterate">
        <goal name="VC ind_sum_commute.0.4.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_hyp" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_commute" expl="VC for sum_commute" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_commute.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="49"/></proof>
  </goal>
  <goal name="VC sum_commute.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC sum_commute.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sum_commute.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_def">
    <goal name="VC sum_commute.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sum_def">
     <goal name="VC sum_commute.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sum_def">
      <goal name="VC sum_commute.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="sum_def">
       <goal name="VC sum_commute.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(fun (a1:a) -&gt; iterate (fun (y0:complex) (y1:complex) -&gt; y0 +. y1) sb (f @ a1))" arg2="(fun (a1:a) -&gt;
    iterate (fun (y0:complex) (y1:complex) -&gt; y0 +. y1) sb (fun (a2:b) -&gt; (f @ a1) @ a2))">
        <goal name="VC sum_commute.2.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H">
         <goal name="VC sum_commute.2.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_commute.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.09" steps="56"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_c_zero" expl="VC for non_c_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_c_zero.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_c_zero.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
   </goal>
   <goal name="VC non_c_zero.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="55"/></proof>
   </goal>
   <goal name="VC non_c_zero.0.2" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC non_c_zero.0.2.0" expl="VC for non_c_zero" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC non_c_zero.0.2.0.0" expl="VC for non_c_zero" proved="true">
     <proof prover="6"><result status="valid" time="0.07" steps="55"/></proof>
     </goal>
     <goal name="VC non_c_zero.0.2.0.1" expl="VC for non_c_zero" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="57"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_non_c_zero_member" expl="VC for get_non_c_zero_member" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_non_c_zero_member.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="53"/></proof>
  </goal>
  <goal name="VC get_non_c_zero_member.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_non_c_zero_member.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_non_c_zero_member" expl="VC for set_non_c_zero_member" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_non_c_zero_member.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_non_c_zero_member_gen" expl="VC for set_non_c_zero_member_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_non_c_zero_member_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_non_c_zero_member_gen_" expl="VC for set_non_c_zero_member_gen_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_non_c_zero_member_gen_.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
  </goal>
  <goal name="VC set_non_c_zero_member_gen_.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_nullity_partition" expl="VC for sum_nullity_partition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_nullity_partition.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="49"/></proof>
  </goal>
  <goal name="VC sum_nullity_partition.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="VC sum_nullity_partition.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_null_map" expl="VC for non_null_map" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC non_null_map.0" expl="VC for non_null_map" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_null_map.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_map_mem">
    <goal name="VC non_null_map.0.0.0" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="f,s,e">
     <goal name="VC non_null_map.0.0.0.0" expl="apply premises" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC non_null_map.0.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="53"/></proof>
      </goal>
      <goal name="VC non_null_map.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.71"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_map.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.57"/></proof>
   </goal>
   <goal name="VC non_null_map.0.2" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_sum_eq_nonnull" expl="VC for map_sum_eq_nonnull" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC map_sum_eq_nonnull.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H2">
  </transf>
  </goal>
  <goal name="VC map_sum_eq_nonnull.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H1">
  </transf>
  </goal>
  <goal name="VC map_sum_eq_nonnull.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="H2">
  </transf>
  </goal>
  <goal name="VC map_sum_eq_nonnull.3" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC map_sum_eq_nonnull.3.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="non_c_zero_def">
    <goal name="VC map_sum_eq_nonnull.3.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="1.34"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC map_sum_eq_nonnull.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_map_mem">
   <goal name="VC map_sum_eq_nonnull.4.0" expl="apply premises" proved="true">
   <transf name="assert" proved="true" arg1="(mem e (map f s))">
    <goal name="VC map_sum_eq_nonnull.4.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="65"/></proof>
    </goal>
    <goal name="VC map_sum_eq_nonnull.4.0.1" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="f,s,e">
     <goal name="VC map_sum_eq_nonnull.4.0.1.0" expl="apply premises" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC map_sum_eq_nonnull.4.0.1.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="h">
      </transf>
      </goal>
      <goal name="VC map_sum_eq_nonnull.4.0.1.0.1" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC map_sum_eq_nonnull.4.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="a">
        <goal name="VC map_sum_eq_nonnull.4.0.1.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC map_sum_eq_nonnull.4.0.1.0.1.0.0.0" proved="true">
         <proof prover="1"><result status="valid" time="0.27"/></proof>
         </goal>
         <goal name="VC map_sum_eq_nonnull.4.0.1.0.1.0.0.1" proved="true">
         <proof prover="6"><result status="valid" time="0.06" steps="69"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC map_sum_eq_nonnull.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC map_sum_eq_nonnull.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H4">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_null_but_one" expl="VC for sum_null_but_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_null_but_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="51"/></proof>
  </goal>
  <goal name="VC sum_null_but_one.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC sum_null_but_one.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="53"/></proof>
  </goal>
  <goal name="VC sum_null_but_one.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_null" expl="VC for sum_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_null.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC sum_null.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="53"/></proof>
  </goal>
  <goal name="VC sum_null.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="53"/></proof>
  </goal>
  <goal name="VC sum_null.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_null_" expl="VC for sum_null_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_null_.0" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(is_empty (non_c_zero s t))">
   <goal name="VC sum_null_.0.0" expl="asserted formula" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC sum_null_.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_empty">
     <goal name="VC sum_null_.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC sum_null_.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="H" arg2="e">
       <goal name="VC sum_null_.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.09" steps="52"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sum_null_.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_null_.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_null_forall" expl="VC for sum_null_forall" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_null_forall.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="53"/></proof>
  </goal>
  <goal name="VC sum_null_forall.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_null_forall.1.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="58"/></proof>
   </goal>
   <goal name="VC sum_null_forall.1.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_null_forall.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="60"/></proof>
  </goal>
  <goal name="VC sum_null_forall.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_null" expl="VC for ind_sum_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_null.0" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(is_empty (non_c_zero (to_fset i j) t) )">
   <goal name="VC ind_sum_null.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="1.23"/></proof>
   </goal>
   <goal name="VC ind_sum_null.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_null.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_null_but_one_elt" expl="VC for sum_null_but_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_null_but_one_elt.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_null_but_one_elt.0.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="VC sum_null_but_one_elt.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_null_but_one_elt.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="57"/></proof>
  </goal>
  <goal name="VC sum_null_but_one_elt.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="59"/></proof>
  </goal>
  <goal name="VC sum_null_but_one_elt.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC sum_null_but_one_elt.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="61"/></proof>
  </goal>
  <goal name="VC sum_null_but_one_elt.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="61"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_null_but_maybe_one_elt" expl="VC for sum_null_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_null_but_maybe_one_elt.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC sum_null_but_maybe_one_elt.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="55"/></proof>
  </goal>
  <goal name="VC sum_null_but_maybe_one_elt.2" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sum_null_but_maybe_one_elt.2.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(is_empty (non_c_zero s t))">
    <goal name="VC sum_null_but_maybe_one_elt.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_empty">
     <goal name="VC sum_null_but_maybe_one_elt.2.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC sum_null_but_maybe_one_elt.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="H2" arg2="e">
       <goal name="VC sum_null_but_maybe_one_elt.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.30"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sum_null_but_maybe_one_elt.2.0.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="59"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_null_but_maybe_one_elt.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_null_but_maybe_one_elt.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="55"/></proof>
   </goal>
   <goal name="VC sum_null_but_maybe_one_elt.3.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_null_but_maybe_one_elt.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_null_but_maybe_one_elt.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="61"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_null_but_maybe_one_elt.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_null_but_maybe_one_elt.5.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="4.30"/></proof>
   </goal>
   <goal name="VC sum_null_but_maybe_one_elt.5.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="57"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_null_but_maybe_two_elt" expl="VC for sum_null_but_maybe_two_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_null_but_maybe_two_elt.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="57"/></proof>
  </goal>
  <goal name="VC sum_null_but_maybe_two_elt.1" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(not elt = elt&#39;)">
   <goal name="VC sum_null_but_maybe_two_elt.1.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="59"/></proof>
   </goal>
   <goal name="VC sum_null_but_maybe_two_elt.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="61"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_null_but_maybe_two_elt.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="67"/></proof>
  </goal>
  <goal name="VC sum_null_but_maybe_two_elt.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_null_but_maybe_one_elt" expl="VC for ind_sum_null_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_null_but_maybe_one_elt.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="57"/></proof>
  </goal>
  <goal name="VC ind_sum_null_but_maybe_one_elt.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="63"/></proof>
  </goal>
  <goal name="VC ind_sum_null_but_maybe_one_elt.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_null_but_maybe_two_elt" expl="VC for ind_sum_null_but_maybe_two_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_null_but_maybe_two_elt.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="63"/></proof>
  </goal>
  <goal name="VC ind_sum_null_but_maybe_two_elt.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="65"/></proof>
  </goal>
  <goal name="VC ind_sum_null_but_maybe_two_elt.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="63"/></proof>
  </goal>
  <goal name="VC ind_sum_null_but_maybe_two_elt.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="73"/></proof>
  </goal>
  <goal name="VC ind_sum_null_but_maybe_two_elt.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_map_filter" expl="VC for ind_sum_map_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_map_filter.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="5.67"/></proof>
  </goal>
  <goal name="VC ind_sum_map_filter.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_map_mem">
   <goal name="VC ind_sum_map_filter.1.0" expl="apply premises" proved="true">
   <transf name="instantiate" proved="true" arg1="H27" arg2="e">
    <goal name="VC ind_sum_map_filter.1.0.0" expl="apply premises" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC ind_sum_map_filter.1.0.0.0" expl="destruct premise" proved="true">
     <proof prover="1"><result status="valid" time="0.19"/></proof>
     </goal>
     <goal name="VC ind_sum_map_filter.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ind_sum_map_filter.1.0.0.1.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst1">
       <goal name="VC ind_sum_map_filter.1.0.0.1.0.0" expl="destruct premise" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="76"/></proof>
       </goal>
       <goal name="VC ind_sum_map_filter.1.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst1">
        <goal name="VC ind_sum_map_filter.1.0.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="ant">
         <goal name="VC ind_sum_map_filter.1.0.0.1.0.1.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ind_sum_map_filter.1.0.0.1.0.1.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.13" steps="84"/></proof>
          </goal>
          <goal name="VC ind_sum_map_filter.1.0.0.1.0.1.0.0.1" proved="true">
          <proof prover="6"><result status="valid" time="0.07" steps="75"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_map_filter.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="g,(to_fset 0 n&#39;),e">
   <goal name="VC ind_sum_map_filter.2.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC ind_sum_map_filter.2.0.0" expl="destruct premise" proved="true">
    <proof prover="6"><result status="valid" time="0.08" steps="69"/></proof>
    </goal>
    <goal name="VC ind_sum_map_filter.2.0.1" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="H28" arg2="e">
     <goal name="VC ind_sum_map_filter.2.0.1.0" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ind_sum_map_filter.2.0.1.0.0" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC ind_sum_map_filter.2.0.1.0.0.0" expl="destruct premise" proved="true">
       <proof prover="1"><result status="valid" time="0.28"/></proof>
       </goal>
       <goal name="VC ind_sum_map_filter.2.0.1.0.0.1" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="VC ind_sum_map_filter.2.0.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.32"/></proof>
        </goal>
        <goal name="VC ind_sum_map_filter.2.0.1.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.55" steps="82"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_map_filter.3" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(is_empty (non_c_zero (my_filter (to_fset 0 n) (fun (x:int) -&gt; not (p @ x) = True)) f))">
   <goal name="VC ind_sum_map_filter.3.0" expl="asserted formula" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ind_sum_map_filter.3.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_empty">
     <goal name="VC ind_sum_map_filter.3.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_sum_map_filter.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(mem e (to_fset 0 n))">
       <goal name="VC ind_sum_map_filter.3.0.0.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="case" proved="true" arg1="(p e)">
        <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="assert" proved="true" arg1="(not (mem e (my_filter (to_fset 0 n) (fun (x:int) -&gt; not (p @ x) = True))))">
         <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="82"/></proof>
         </goal>
         <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
         <transf name="assert" proved="true" arg1="(not (fun (x:int) -&gt; not (p @ x) = True) e)">
          <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.36" steps="84"/></proof>
          </goal>
          <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.0.1.1" expl="true case (apply premises)" proved="true">
          <transf name="assert" proved="true" arg1="(not (mem e (my_filter (to_fset 0 n) (fun (x:int) -&gt; not (p @ x) = True))))">
           <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.26" steps="86"/></proof>
           </goal>
           <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.0.1.1.1" expl="true case (apply premises)" proved="true">
           <proof prover="0"><result status="valid" time="11.20"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_sum_map_filter.3.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="82"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_sum_map_filter.3.0.0.0.0.1" expl="false case (apply premises)" proved="true">
       <proof prover="4"><result status="valid" time="2.78"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_sum_map_filter.3.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall s : set int. is_empty s -&gt; cardinal s = 0)">
    <goal name="VC ind_sum_map_filter.3.1.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.65" steps="82"/></proof>
    </goal>
    <goal name="VC ind_sum_map_filter.3.1.1" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="h">
     <goal name="VC ind_sum_map_filter.3.1.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="h1">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_map_filter.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="75"/></proof>
  </goal>
  <goal name="VC ind_sum_map_filter.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
   <goal name="VC ind_sum_map_filter.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(union (my_filter (to_fset 0 n) p)
   (my_filter (to_fset 0 n) (fun (x:int) -&gt; not (p @ x) = True)))" arg2="(to_fset 0 n)" arg3="in" arg4="H23">
    <goal name="VC ind_sum_map_filter.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H23">
     <goal name="VC ind_sum_map_filter.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="add_zero_t">
      <goal name="VC ind_sum_map_filter.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
       <goal name="VC ind_sum_map_filter.5.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="5.89"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_sum_map_filter.5.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="sum_null_">
       <goal name="VC ind_sum_map_filter.5.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ind_sum_map_filter.5.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.30"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_sum_map_filter.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="4"><result status="valid" time="1.60"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC neutral_c_one" expl="VC for neutral_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC neutral_c_one.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC neutral_c_one.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="VC neutral_c_one.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC neutral_c_one.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="51"/></proof>
  </goal>
  <goal name="VC neutral_c_one.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC neutral_c_one.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="iterable_def">
    <goal name="VC neutral_c_one.4.0.0" expl="VC for neutral_c_one" proved="true">
    <transf name="exists" proved="true" arg1="c_one">
     <goal name="VC neutral_c_one.4.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.30" steps="56"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_iter" expl="VC for product_iter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_iter.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="55"/></proof>
  </goal>
  <goal name="VC product_iter.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC product_iter.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="57"/></proof>
   </goal>
   <goal name="VC product_iter.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_iter.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC product_iter.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_iter.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC product_iter.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC product" expl="VC for product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="63"/></proof>
  </goal>
  <goal name="VC product.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_eq" expl="VC for product_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="67"/></proof>
  </goal>
  <goal name="VC product_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="63"/></proof>
  </goal>
  <goal name="VC product_eq.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="65"/></proof>
  </goal>
  <goal name="VC product_eq.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_eq_gen" expl="VC for product_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_eq_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="69"/></proof>
  </goal>
  <goal name="VC product_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_empty" expl="VC for product_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_empty.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="65"/></proof>
  </goal>
  <goal name="VC product_empty.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="65"/></proof>
  </goal>
  <goal name="VC product_empty.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="65"/></proof>
  </goal>
  <goal name="VC product_empty.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_iter_" expl="VC for product_iter_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_iter_.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="63"/></proof>
  </goal>
  <goal name="VC product_iter_.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_product" expl="VC for add_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_product.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="65"/></proof>
  </goal>
  <goal name="VC add_product.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="65"/></proof>
  </goal>
  <goal name="VC add_product.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="65"/></proof>
  </goal>
  <goal name="VC add_product.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_add" expl="VC for product_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_add.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="neutral_one" proved="true">
 <proof prover="6"><result status="valid" time="0.09" steps="65"/></proof>
 </goal>
 <goal name="VC ind_product" expl="VC for ind_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_eq" expl="VC for ind_product_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="71"/></proof>
  </goal>
  <goal name="VC ind_product_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="67"/></proof>
  </goal>
  <goal name="VC ind_product_eq.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_cardone" expl="VC for ind_product_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_cardone.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="67"/></proof>
  </goal>
  <goal name="VC ind_product_cardone.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_eq_gen" expl="VC for ind_product_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_eq_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="75"/></proof>
  </goal>
  <goal name="VC ind_product_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_right_extension" expl="VC for ind_product_right_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_right_extension.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="VC ind_product_right_extension.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="69"/></proof>
  </goal>
  <goal name="VC ind_product_right_extension.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.45"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_left_extension" expl="VC for ind_product_left_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_left_extension.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_to_product" expl="VC for ind_product_to_product" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_to_product.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_product_eq" expl="VC for map_product_eq" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC map_product_eq.0" expl="VC for map_product_eq" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC map_product_eq.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="69"/></proof>
   </goal>
   <goal name="VC map_product_eq.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="67"/></proof>
   </goal>
   <goal name="VC map_product_eq.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="67"/></proof>
   </goal>
   <goal name="VC map_product_eq.0.3" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC map_product_eq.0.3.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="product_def">
     <goal name="VC map_product_eq.0.3.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="product_def">
      <goal name="VC map_product_eq.0.3.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.30"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_ind_product_eq" expl="VC for map_ind_product_eq" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC map_ind_product_eq.0" expl="VC for map_ind_product_eq" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC map_ind_product_eq.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="67"/></proof>
   </goal>
   <goal name="VC map_ind_product_eq.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="69"/></proof>
   </goal>
   <goal name="VC map_ind_product_eq.0.2" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_product t k l)" arg2="( product (map f (to_fset i j)) t)">
    <goal name="VC map_ind_product_eq.0.2.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC map_ind_product_eq.0.2.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="H2">
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_ind_product_eq.0.2.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="81"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_right_extension_comm" expl="VC for ind_product_right_extension_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_right_extension_comm.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_eq_func" expl="VC for ind_product_eq_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_eq_func.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_product_eq_func.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_product_eq_func.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="71"/></proof>
  </goal>
  <goal name="VC ind_product_eq_func.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="71"/></proof>
  </goal>
  <goal name="VC ind_product_eq_func.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="71"/></proof>
  </goal>
  <goal name="VC ind_product_eq_func.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
  </goal>
  <goal name="VC ind_product_eq_func.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_trans" expl="VC for ind_product_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_trans.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="69"/></proof>
  </goal>
  <goal name="VC ind_product_trans.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="69"/></proof>
  </goal>
  <goal name="VC ind_product_trans.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="69"/></proof>
  </goal>
  <goal name="VC ind_product_trans.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_product_trans.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="70"/></proof>
   </goal>
   <goal name="VC ind_product_trans.3.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="70"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_product_trans.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_zero_pre" expl="VC for ind_product_zero_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_zero_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="73"/></proof>
  </goal>
  <goal name="VC ind_product_zero_pre.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_product_zero_pre.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="75"/></proof>
   </goal>
   <goal name="VC ind_product_zero_pre.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="75"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_product_zero_pre.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_zero" expl="VC for ind_product_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_zero.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_product_zero.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="75"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_zero_elt" expl="VC for ind_product_zero_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_zero_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_const_c_one" expl="VC for ind_product_const_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_const_c_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="69"/></proof>
  </goal>
  <goal name="VC ind_product_const_c_one.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_product_const_c_one.1.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="71"/></proof>
   </goal>
   <goal name="VC ind_product_const_c_one.1.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_product_const_c_one.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="71"/></proof>
  </goal>
  <goal name="VC ind_product_const_c_one.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="78"/></proof>
  </goal>
  <goal name="VC ind_product_const_c_one.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.54"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Indic" proved="true">
 <goal name="VC indic" expl="VC for indic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="71"/></proof>
  </goal>
  <goal name="VC indic.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_indic" expl="VC for get_indic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_indic.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_bool" expl="VC for indic_bool" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_bool.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_comm" expl="VC for indic_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_comm.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_transl_r" expl="VC for indic_transl_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_transl_r.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_transl_l" expl="VC for indic_transl_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_transl_l.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_2" expl="VC for indic_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_2.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="1.40" steps="75"/></proof>
  </goal>
  <goal name="VC indic_2.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="71"/></proof>
  </goal>
  <goal name="VC indic_2.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indic_2.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="77"/></proof>
   </goal>
   <goal name="VC indic_2.2.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="69"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC indic_2.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indic_2.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="80"/></proof>
   </goal>
   <goal name="VC indic_2.3.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.21"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_2_if" expl="VC for indic_2_if" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_2_if.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_2_comm" expl="VC for indic_2_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_2_comm.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC indic_2_comm.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC indic_2_comm.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_indic" expl="VC for ind_sum_indic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_indic.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ind_sum_indic.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_indic_def">
    <goal name="VC ind_sum_indic.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
     <goal name="VC ind_sum_indic.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.74"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_indic_t" expl="VC for sum_indic_t" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC sum_indic_t.0" expl="VC for sum_indic_t" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_indic_t.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="71"/></proof>
   </goal>
   <goal name="VC sum_indic_t.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.70"/></proof>
   </goal>
   <goal name="VC sum_indic_t.0.2" expl="postcondition" proved="true">
   <transf name="compute_hyp" proved="true" arg1="in" arg2="H">
    <goal name="VC sum_indic_t.0.2.0" expl="postcondition" proved="true">
    <transf name="compute_hyp" proved="true" >
     <goal name="VC sum_indic_t.0.2.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC sum_indic_t.0.2.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC sum_indic_t.0.2.0.0.0.0" expl="VC for sum_indic_t" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC sum_indic_t.0.2.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="77"/></proof>
        </goal>
        <goal name="VC sum_indic_t.0.2.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="77"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_indic_ts" expl="VC for sum_indic_ts" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_indic_ts.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="71"/></proof>
  </goal>
  <goal name="VC sum_indic_ts.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sum_indic_ts.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_indic_def" arg2="in" arg3="H">
    <goal name="VC sum_indic_ts.1.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.58"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_indic_t" expl="VC for ind_sum_indic_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_indic_t.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="77"/></proof>
  </goal>
  <goal name="VC ind_sum_indic_t.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="79"/></proof>
  </goal>
  <goal name="VC ind_sum_indic_t.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_indic_spec" arg2="in" arg3="H">
   <goal name="VC ind_sum_indic_t.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
    <goal name="VC ind_sum_indic_t.2.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ind_sum_indic_t.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sum_indic_def" arg2="in" arg3="H">
      <goal name="VC ind_sum_indic_t.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_sum_indic_t.2.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="77"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_indic_t_quant" expl="VC for ind_sum_indic_t_quant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_indic_t_quant.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="77"/></proof>
  </goal>
  <goal name="VC ind_sum_indic_t_quant.1" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_indic_spec">
   <goal name="VC ind_sum_indic_t_quant.1.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ind_sum_indic_t_quant.1.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="sum_indic_def">
     <goal name="VC ind_sum_indic_t_quant.1.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
      <goal name="VC ind_sum_indic_t_quant.1.0.0.0.0" expl="assertion" proved="true">
      <proof prover="2"><result status="valid" time="0.59"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_sum_indic_t_quant.1.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="73"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_indic_t_quant.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="H2" arg2="i">
   <goal name="VC ind_sum_indic_t_quant.2.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC ind_sum_indic_t_quant.2.0.0" expl="destruct premise" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_sum_indic_t_quant.2.0.0.0" expl="destruct premise" proved="true">
     <proof prover="6"><result status="valid" time="0.07" steps="73"/></proof>
     </goal>
     <goal name="VC ind_sum_indic_t_quant.2.0.0.1" expl="destruct premise" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="73"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_sum_indic_t_quant.2.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.74"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Inv_func" proved="true">
 <goal name="VC inv_func" expl="VC for inv_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_func.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="81"/></proof>
  </goal>
  <goal name="VC inv_func.1" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists e. mem e s)">
   <goal name="VC inv_func.1.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.26"/></proof>
   </goal>
   <goal name="VC inv_func.1.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(exists a. mem a s /\ e&#39; = ((f @ a) ))">
    <goal name="VC inv_func.1.1.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="VC inv_func.1.1.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="h">
     <goal name="VC inv_func.1.1.1.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(indic_bool (f @ a) e&#39;)">
      <goal name="VC inv_func.1.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.09" steps="89"/></proof>
      </goal>
      <goal name="VC inv_func.1.1.1.0.1" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(exists a. mem a s /\ (fun (e1:a1) -&gt; indic_bool (f @ e1) e&#39;) a)">
       <goal name="VC inv_func.1.1.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="89"/></proof>
       </goal>
       <goal name="VC inv_func.1.1.1.0.1.1" expl="precondition" proved="true">
       <transf name="destruct" proved="true" arg1="h">
        <goal name="VC inv_func.1.1.1.0.1.1.0" expl="precondition" proved="true">
        <transf name="assert" proved="true" arg1="((fun (e1:a2) -&gt; indic_bool (f @ e1) e&#39;) @ a /\ mem a s )">
         <goal name="VC inv_func.1.1.1.0.1.1.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC inv_func.1.1.1.0.1.1.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.13" steps="95"/></proof>
          </goal>
          <goal name="VC inv_func.1.1.1.0.1.1.0.0.1" proved="true">
          <proof prover="6"><result status="valid" time="0.19" steps="93"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC inv_func.1.1.1.0.1.1.0.1" expl="precondition" proved="true">
         <transf name="exists" proved="true" arg1="a">
          <goal name="VC inv_func.1.1.1.0.1.1.0.1.0" proved="true">
          <proof prover="1"><result status="valid" time="0.27"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_func.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="85"/></proof>
  </goal>
  <goal name="VC inv_func.3" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(indic_bool (f e) e&#39;1)">
   <goal name="VC inv_func.3.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="89"/></proof>
   </goal>
   <goal name="VC inv_func.3.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(f e = f e&#39;)">
    <goal name="VC inv_func.3.1.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC inv_func.3.1.0.0" expl="asserted formula" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC inv_func.3.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(f e)" arg2="e&#39;1">
       <goal name="VC inv_func.3.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="(indic_bool (f e&#39;) e&#39;1)">
        <goal name="VC inv_func.3.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="94"/></proof>
        </goal>
        <goal name="VC inv_func.3.1.0.0.0.0.1" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="96"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC inv_func.3.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="94"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC inv_func.3.1.1" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="93"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_func.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="83"/></proof>
  </goal>
  <goal name="VC inv_func.5" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="( exists e1 e2. mem e1 s_indic /\ mem e2 s_indic /\ e1 &lt;&gt; e2)">
   <goal name="VC inv_func.5.0" expl="true case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="91"/></proof>
   </goal>
   <goal name="VC inv_func.5.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(exists e1. mem e1 s_indic)">
    <goal name="VC inv_func.5.1.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.25"/></proof>
    </goal>
    <goal name="VC inv_func.5.1.1" expl="false case (precondition)" proved="true">
    <transf name="destruct" proved="true" arg1="h">
     <goal name="VC inv_func.5.1.1.0" expl="false case (precondition)" proved="true">
     <transf name="exists" proved="true" arg1="e1">
      <goal name="VC inv_func.5.1.1.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="89"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_func.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="85"/></proof>
  </goal>
  <goal name="VC inv_func.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="VC inv_func.8" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(indic_bool (f result ) e&#39;)">
   <goal name="VC inv_func.8.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="( (f result )  = e&#39;)">
    <goal name="VC inv_func.8.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(mem result ( filter (fun (e:a) -&gt; indic_bool (f @ e) e&#39;) s))">
     <goal name="VC inv_func.8.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="filter_def">
      <goal name="VC inv_func.8.0.0.0.0" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC inv_func.8.0.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC inv_func.8.0.0.0.0.0.0" proved="true">
        <transf name="assert" proved="true" arg1="(mem result s_indic)">
         <goal name="VC inv_func.8.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.25"/></proof>
         </goal>
         <goal name="VC inv_func.8.0.0.0.0.0.0.1" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="91"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC inv_func.8.0.0.0.0.0.1" proved="true">
        <proof prover="6"><result status="valid" time="0.08" steps="87"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC inv_func.8.0.0.1" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mem result s_indic)">
      <goal name="VC inv_func.8.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.24"/></proof>
      </goal>
      <goal name="VC inv_func.8.0.0.1.1" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="((fun (e:a) -&gt; indic_bool (f @ e) e&#39;) result)">
       <goal name="VC inv_func.8.0.0.1.1.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.24"/></proof>
       </goal>
       <goal name="VC inv_func.8.0.0.1.1.1" expl="asserted formula" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h1">
        <goal name="VC inv_func.8.0.0.1.1.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="95"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC inv_func.8.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="91"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC inv_func.8.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="91"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bijective_inv_func" expl="VC for bijective_inv_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bijective_inv_func.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC bijective_inv_func.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_bijective1">
    <goal name="VC bijective_inv_func.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bijective_inv_func.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.16"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bijective_inv_func.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bijective_inv_func.0.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC bijective_inv_func.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(inv_func f s s&#39; e = inv_func f s s&#39; e&#39;)">
       <goal name="VC bijective_inv_func.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="case" proved="true" arg1="(f(inv_func f s s&#39; e) = f(inv_func f s s&#39; e&#39;))">
        <goal name="VC bijective_inv_func.0.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
        <proof prover="1"><result status="valid" time="0.26"/></proof>
        </goal>
        <goal name="VC bijective_inv_func.0.0.1.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
        <proof prover="6"><result status="valid" time="0.07" steps="79"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bijective_inv_func.0.0.1.0.0.1" expl="false case (apply premises)" proved="true">
       <proof prover="6"><result status="valid" time="0.07" steps="79"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bijective_inv_func.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bijective_inv_func.0.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_in_goal" proved="true" >
      <goal name="VC bijective_inv_func.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(f e&#39;)">
       <goal name="VC bijective_inv_func.0.0.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC bijective_inv_func.0.0.2.0.0.0.0" proved="true">
        <proof prover="1"><result status="valid" time="0.32"/></proof>
        </goal>
        <goal name="VC bijective_inv_func.0.0.2.0.0.0.1" proved="true">
        <transf name="assert" proved="true" arg1="(f (inv_func f s s&#39; (f @ e&#39;)) = f e&#39;)">
         <goal name="VC bijective_inv_func.0.0.2.0.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="0.27"/></proof>
         </goal>
         <goal name="VC bijective_inv_func.0.0.2.0.0.0.1.1" proved="true">
         <proof prover="2"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_rec" expl="VC for inv_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_rec.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(inv_func f s s&#39; (f @ e) &lt;&gt; e)">
   <goal name="VC inv_rec.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(f (inv_func f s s&#39; (f @ e)) &lt;&gt; f e)">
    <goal name="VC inv_rec.0.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.81"/></proof>
    </goal>
    <goal name="VC inv_rec.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.23"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC inv_rec.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="75"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_" expl="VC for inv_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="73"/></proof>
  </goal>
  <goal name="VC inv_.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="73"/></proof>
  </goal>
  <goal name="VC inv_.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="77"/></proof>
  </goal>
  <goal name="VC inv_.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_bijective" expl="VC for inv_bijective" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_bijective.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="73"/></proof>
  </goal>
  <goal name="VC inv_bijective.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="73"/></proof>
  </goal>
  <goal name="VC inv_bijective.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="3.83"/></proof>
  </goal>
  <goal name="VC inv_bijective.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC inv_bijective.3.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_bijective.4" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="(f e&#39;)">
   <goal name="VC inv_bijective.4.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC inv_bijective.4.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="VC inv_bijective.4.0.1" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC inv_bijective.4.0.1.0" proved="true">
     <proof prover="2"><result status="valid" time="0.77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_bijective.5" expl="postcondition" proved="true">
  <transf name="compute_hyp" proved="true" >
   <goal name="VC inv_bijective.5.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC inv_bijective.5.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="79"/></proof>
    </goal>
    <goal name="VC inv_bijective.5.0.1" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.36"/></proof>
    </goal>
    <goal name="VC inv_bijective.5.0.2" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="79"/></proof>
    </goal>
    <goal name="VC inv_bijective.5.0.3" expl="postcondition" proved="true">
    <transf name="exists" proved="true" arg1="(f e&#39;)">
     <goal name="VC inv_bijective.5.0.3.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC inv_bijective.5.0.3.0.0" proved="true">
      <proof prover="1"><result status="valid" time="0.31"/></proof>
      </goal>
      <goal name="VC inv_bijective.5.0.3.0.1" proved="true">
      <proof prover="2"><result status="valid" time="3.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_bijective_inv" expl="VC for set_bijective_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_bijective_inv.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="75"/></proof>
  </goal>
  <goal name="VC set_bijective_inv.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="79"/></proof>
  </goal>
  <goal name="VC set_bijective_inv.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="4.10"/></proof>
  </goal>
  <goal name="VC set_bijective_inv.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="73"/></proof>
  </goal>
  <goal name="VC set_bijective_inv.4" expl="postcondition" proved="true">
  <transf name="compute_hyp" proved="true" >
   <goal name="VC set_bijective_inv.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.27"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_bij_inv" expl="VC for set_bij_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_bij_inv.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC set_bij_inv.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_bijective1">
    <goal name="VC set_bij_inv.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_bij_inv.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="73"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_bij_inv.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_bij_inv.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="77"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_bij_inv.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_bij_inv.0.0.2.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="4.03"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_bij_inv.1" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="set_bijective" arg2="g,(map f s),s">
   <goal name="VC set_bij_inv.1.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC set_bij_inv.1.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst1">
     <goal name="VC set_bij_inv.1.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_bij_inv.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="77"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_bij_inv.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_bij_inv.1.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.34"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_bij_inv.1.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_bij_inv.1.0.0.2.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(f e&#39;)">
       <goal name="VC set_bij_inv.1.0.0.2.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC set_bij_inv.1.0.0.2.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="77"/></proof>
        </goal>
        <goal name="VC set_bij_inv.1.0.0.2.0.0.1" proved="true">
        <transf name="assert" proved="true" arg1="(f (g (f e&#39;)) = f e&#39;)">
         <goal name="VC set_bij_inv.1.0.0.2.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="1.70"/></proof>
         </goal>
         <goal name="VC set_bij_inv.1.0.0.2.0.0.1.1" proved="true">
         <proof prover="2"><result status="valid" time="1.59"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_bij_inv.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_f" expl="VC for inv_f" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_f.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="73"/></proof>
  </goal>
  <goal name="VC inv_f.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="73"/></proof>
  </goal>
  <goal name="VC inv_f.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="75"/></proof>
  </goal>
  <goal name="VC inv_f.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC inv_f.4" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="(f e&#39;)">
   <goal name="VC inv_f.4.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC inv_f.4.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.34"/></proof>
    </goal>
    <goal name="VC inv_f.4.0.1" proved="true">
    <proof prover="2"><result status="valid" time="0.81"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_f.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="77"/></proof>
  </goal>
  <goal name="VC inv_f.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="77"/></proof>
  </goal>
  <goal name="VC inv_f.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="79"/></proof>
  </goal>
  <goal name="VC inv_f.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="79"/></proof>
  </goal>
  <goal name="VC inv_f.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_f_back" expl="VC for inv_f_back" proved="true">
 <proof prover="2"><result status="valid" time="0.57"/></proof>
 </goal>
 <goal name="VC inv_f_back_rev" expl="VC for inv_f_back_rev" proved="true">
 <proof prover="2"><result status="valid" time="0.85"/></proof>
 </goal>
 <goal name="VC injective_is_bijective" expl="VC for injective_is_bijective" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injective_is_bijective.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="79"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="83"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="77"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.3" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="84"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.8" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(e = f (choose s))">
   <goal name="VC injective_is_bijective.8.0" expl="true case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="88"/></proof>
   </goal>
   <goal name="VC injective_is_bijective.8.1" expl="false case (precondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_map_mem">
    <goal name="VC injective_is_bijective.8.1.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.81"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC injective_is_bijective.9" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="f,s,e">
   <goal name="VC injective_is_bijective.9.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="92"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC injective_is_bijective.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="83"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="85"/></proof>
  </goal>
  <goal name="VC injective_is_bijective.12" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC injective_is_bijective.12.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="79"/></proof>
   </goal>
   <goal name="VC injective_is_bijective.12.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="82"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_is_bijective_auto" expl="VC for injective_is_bijective_auto" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injective_is_bijective_auto.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="71"/></proof>
  </goal>
  <goal name="VC injective_is_bijective_auto.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="75"/></proof>
  </goal>
  <goal name="VC injective_is_bijective_auto.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
  </transf>
  </goal>
  <goal name="VC injective_is_bijective_auto.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="73"/></proof>
  </goal>
  <goal name="VC injective_is_bijective_auto.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_auto" expl="VC for inv_auto" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_auto.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
  </goal>
  <goal name="VC inv_auto.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="75"/></proof>
  </goal>
  <goal name="VC inv_auto.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="75"/></proof>
  </goal>
  <goal name="VC inv_auto.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="81"/></proof>
  </goal>
  <goal name="VC inv_auto.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="81"/></proof>
  </goal>
  <goal name="VC inv_auto.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Im_re" proved="true">
 <goal name="VC real" expl="VC for real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(x = r_to_c (real_part x) +. im *. c_zero)">
   <goal name="VC real.0.0" expl="asserted formula" proved="true">
   <transf name="replace" proved="true" arg1="c_zero" arg2="(r_to_c (im_part x))">
    <goal name="VC real.0.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.06" steps="39"/></proof>
    </goal>
    <goal name="VC real.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="(im_part x)" arg2="0.0">
     <goal name="VC real.0.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="39"/></proof>
     </goal>
     <goal name="VC real.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="6.54"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC real.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pure_im" expl="VC for pure_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pure_im.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC im_dec" expl="VC for im_dec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC im_dec.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.63" steps="37"/></proof>
  </goal>
  <goal name="VC im_dec.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC im_dec.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="39"/></proof>
   </goal>
   <goal name="VC im_dec.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.04" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC c_one_dec" expl="VC for c_one_dec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC c_one_dec.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="41"/></proof>
  </goal>
  <goal name="VC c_one_dec.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC c_one_dec.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="43"/></proof>
   </goal>
   <goal name="VC c_one_dec.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC c_zero_dec" expl="VC for c_zero_dec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC c_zero_dec.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="45"/></proof>
  </goal>
  <goal name="VC c_zero_dec.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC c_zero_dec.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="47"/></proof>
   </goal>
   <goal name="VC c_zero_dec.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ttwo_dec" expl="VC for ttwo_dec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ttwo_dec.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ttwo_dec.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="53"/></proof>
   </goal>
   <goal name="VC ttwo_dec.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="53"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="FromInt">
 <goal name="VC i_to_c" expl="VC for i_to_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_zero" expl="VC for i_to_c_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_zero.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC i_to_c_zero.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_def">
    <goal name="VC i_to_c_zero.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.06" steps="54"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_surj" expl="VC for i_to_c_surj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_surj.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(i_to_c (i * j) /. i_to_c j)" arg2="(((i_to_c i *. i_to_c j)) /. i_to_c j)">
   <goal name="VC i_to_c_surj.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.86"/></proof>
   </goal>
   <goal name="VC i_to_c_surj.0.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC i_to_c_surj.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="i_to_c_def">
     <goal name="VC i_to_c_surj.0.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_def">
      <goal name="VC i_to_c_surj.0.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="i_to_c_def">
       <goal name="VC i_to_c_surj.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="r_to_c_mult">
        <goal name="VC i_to_c_surj.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.85"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_eq" expl="VC for i_to_c_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_eq.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC i_to_c_eq.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_def">
    <goal name="VC i_to_c_eq.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="i_to_c_def">
     <goal name="VC i_to_c_eq.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.05" steps="58"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_inf" expl="VC for i_to_c_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_inf.0" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC i_to_c_inf.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="(-.)_def">
    <goal name="VC i_to_c_inf.0.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(j -&#39; i)" arg2="(j + - i)">
     <goal name="VC i_to_c_inf.0.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_def">
      <goal name="VC i_to_c_inf.0.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="i_to_c_def">
       <goal name="VC i_to_c_inf.0.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="rewrite" proved="true" arg1="i_to_c_def">
        <goal name="VC i_to_c_inf.0.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="rewrite" proved="true" arg1="Add">
         <goal name="VC i_to_c_inf.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
         <proof prover="6"><result status="valid" time="2.73" steps="60"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC i_to_c_inf.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.05" steps="58"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC i_to_c_inf.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_nzero" expl="VC for i_to_c_nzero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_nzero.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="57"/></proof>
  </goal>
  <goal name="VC i_to_c_nzero.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_one" expl="VC for i_to_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_one.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_add" expl="VC for i_to_c_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_add.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC i_to_c_add.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_def">
    <goal name="VC i_to_c_add.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="i_to_c_def">
     <goal name="VC i_to_c_add.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_def">
      <goal name="VC i_to_c_add.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="2.28" steps="60"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_add_rev" expl="VC for i_to_c_add_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_add_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_ttwo" expl="VC for i_to_c_ttwo" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_ttwo.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_pos" expl="VC for i_to_c_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_pos.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_minus" expl="VC for i_to_c_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_minus.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC i_to_c_minus.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_def">
    <goal name="VC i_to_c_minus.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="i_to_c_def">
     <goal name="VC i_to_c_minus.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="3.61" steps="62"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_strict_pos" expl="VC for i_to_c_strict_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_strict_pos.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="61"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_mult_pos" expl="VC for i_to_c_mult_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_mult_pos.0" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(i_to_c j -. i_to_c i)" arg2="(i_to_c j +. (-. i_to_c i))">
   <goal name="VC i_to_c_mult_pos.0.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(j-&#39;1)" arg2="(j + -1)">
    <goal name="VC i_to_c_mult_pos.0.0.0" expl="assertion" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC i_to_c_mult_pos.0.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_def">
      <goal name="VC i_to_c_mult_pos.0.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="i_to_c_def">
       <goal name="VC i_to_c_mult_pos.0.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="rewrite" proved="true" arg1="i_to_c_def">
        <goal name="VC i_to_c_mult_pos.0.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="replace" proved="true" arg1="(from_int (j+(-1)))" arg2="(from_int j +* from_int (- 1))">
         <goal name="VC i_to_c_mult_pos.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
         <proof prover="4"><result status="valid" time="3.78"/></proof>
         </goal>
         <goal name="VC i_to_c_mult_pos.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.07" steps="66"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC i_to_c_mult_pos.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.06" steps="61"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC i_to_c_mult_pos.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC i_to_c_mult_pos.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="63"/></proof>
  </goal>
  <goal name="VC i_to_c_mult_pos.2" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="64"/></proof>
  </goal>
  <goal name="VC i_to_c_mult_pos.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="64"/></proof>
  </goal>
  <goal name="VC i_to_c_mult_pos.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC i_to_c_mult_pos.4.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC i_to_c_mult_pos.4.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="63"/></proof>
    </goal>
    <goal name="VC i_to_c_mult_pos.4.0.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC i_to_c_mult_pos.4.0.1.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="66"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_mult" expl="VC for i_to_c_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_mult.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="59"/></proof>
  </goal>
  <goal name="VC i_to_c_mult.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC i_to_c_mult.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="63"/></proof>
  </goal>
  <goal name="VC i_to_c_mult.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC i_to_c_mult.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC i_to_c_mult.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC i_to_c_mult.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_def">
    <goal name="VC i_to_c_mult.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="i_to_c_def">
     <goal name="VC i_to_c_mult.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_def">
      <goal name="VC i_to_c_mult.4.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="5.02" steps="269"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_mult_rev" expl="VC for i_to_c_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_mult_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_mult_assoc" expl="VC for i_to_c_mult_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_mult_assoc.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_mult_assoc_rev" expl="VC for i_to_c_mult_assoc_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_mult_assoc_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_sub" expl="VC for i_to_c_sub" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_sub.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_sub_rev" expl="VC for i_to_c_sub_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_sub_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_opp" expl="VC for i_to_c_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_opp.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC i_to_c_opp.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="i_to_c_def">
    <goal name="VC i_to_c_opp.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="i_to_c_def">
     <goal name="VC i_to_c_opp.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="3.48" steps="64"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_div" expl="VC for i_to_c_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_div.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="i_to_c_mult_rev">
   <goal name="VC i_to_c_div.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="61"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_minus_mult" expl="VC for i_to_c_minus_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_minus_mult.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC i_to_c_div_leq_c_one" expl="VC for i_to_c_div_leq_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC i_to_c_div_leq_c_one.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((i_to_c a /. i_to_c b)*.i_to_c b &lt;=. c_one *. i_to_c b)">
   <goal name="VC i_to_c_div_leq_c_one.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(i_to_c a &lt;. i_to_c b)">
    <goal name="VC i_to_c_div_leq_c_one.0.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.08" steps="63"/></proof>
    </goal>
    <goal name="VC i_to_c_div_leq_c_one.0.0.1" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="((i_to_c a /. i_to_c b) *. i_to_c b)" arg2="(i_to_c a)">
     <goal name="VC i_to_c_div_leq_c_one.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="one_mult_t">
      <goal name="VC i_to_c_div_leq_c_one.0.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="65"/></proof>
      </goal>
      <goal name="VC i_to_c_div_leq_c_one.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.05" steps="63"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC i_to_c_div_leq_c_one.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.29"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC i_to_c_div_leq_c_one.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.20"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_i_to_c_infeq" expl="VC for compat_i_to_c_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_i_to_c_infeq.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_i_to_c_inf" expl="VC for compat_i_to_c_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_i_to_c_inf.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="61"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_i_to_c_inf_rev" expl="VC for compat_i_to_c_inf_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_i_to_c_inf_rev.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_i_to_c_sup" expl="VC for compat_i_to_c_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_i_to_c_sup.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i_to_c b &lt;. i_to_c a)">
   <goal name="VC compat_i_to_c_sup.0.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="61"/></proof>
   </goal>
   <goal name="VC compat_i_to_c_sup.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="63"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_int_squrt" expl="VC for positive_int_squrt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_int_squrt.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_null_int_squrt" expl="VC for non_null_int_squrt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_null_int_squrt.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_constant" expl="VC for ind_sum_constant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_constant.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_sum_constant.0.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="93"/></proof>
   </goal>
   <goal name="VC ind_sum_constant.0.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_constant.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="93"/></proof>
  </goal>
  <goal name="VC ind_sum_constant.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="99"/></proof>
  </goal>
  <goal name="VC ind_sum_constant.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ind_sum_constant.3.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ind_sum_constant.3.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(i&lt;j)">
     <goal name="VC ind_sum_constant.3.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.07" steps="91"/></proof>
     </goal>
     <goal name="VC ind_sum_constant.3.0.0.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ind_sum_constant.3.0.0.1.0" expl="false case (postcondition)" proved="true">
      <proof prover="2"><result status="valid" time="1.02"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_sum_constant.3.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC ind_sum_constant.3.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_sum_constant.3.1.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC ind_sum_constant.3.1.0.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(i&lt;j)">
       <goal name="VC ind_sum_constant.3.1.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC ind_sum_constant.3.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H">
         <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="H2">
          <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="(i_to_c ((j -&#39; 1) -&#39; i))" arg2="(i_to_c ((j -&#39; i)) -. c_one)">
           <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
           <transf name="replace" proved="true" arg1="(valu *. i_to_c (j -&#39; i))" arg2="(valu *. (i_to_c (j -&#39; i-&#39;1)+.c_one))">
            <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
            <transf name="assert" proved="true" arg1="(forall a b c. a*. (b+. c) = a*.b+.a*.c)">
             <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="1.09" steps="97"/></proof>
             </goal>
             <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0.0.1" expl="true case (postcondition)" proved="true">
             <transf name="rewrite" proved="true" arg1="h">
              <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0.0.1.0" expl="true case (postcondition)" proved="true">
              <transf name="apply" proved="true" arg1="add_eq_t">
               <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.20" steps="97"/></proof>
               </goal>
               <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.16" steps="97"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.64" steps="97"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.51" steps="97"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ind_sum_constant.3.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.06" steps="95"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_sum_constant.3.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.08" steps="95"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_sum_constant.3.1.0.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="1"><result status="valid" time="0.67"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_constant_from_z" expl="VC for ind_sum_constant_from_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_constant_from_z.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="89"/></proof>
  </goal>
  <goal name="VC ind_sum_constant_from_z.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="95"/></proof>
  </goal>
  <goal name="VC ind_sum_constant_from_z.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_constant_lower_bound" expl="VC for sum_constant_lower_bound">
 <transf name="split_vc" >
  <goal name="VC sum_constant_lower_bound.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="91"/></proof>
  </goal>
  <goal name="VC sum_constant_lower_bound.1" expl="variant decrease" proved="true">
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC sum_constant_lower_bound.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="98"/></proof>
  </goal>
  <goal name="VC sum_constant_lower_bound.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="98"/></proof>
  </goal>
  <goal name="VC sum_constant_lower_bound.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="98"/></proof>
  </goal>
  <goal name="VC sum_constant_lower_bound.5" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="100"/></proof>
  </goal>
  <goal name="VC sum_constant_lower_bound.6" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="destruct" arg1="H">
   <goal name="VC sum_constant_lower_bound.6.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC sum_constant_lower_bound.6.0.0" expl="postcondition" proved="true">
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="rewrite" arg1="sum_null">
     <goal name="VC sum_constant_lower_bound.6.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.23"/></proof>
     </goal>
     <goal name="VC sum_constant_lower_bound.6.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     </goal>
    </transf>
    <transf name="rewrite" proved="true" arg1="sum_empty">
     <goal name="VC sum_constant_lower_bound.6.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.20"/></proof>
     </goal>
     <goal name="VC sum_constant_lower_bound.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.19"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sum_constant_lower_bound.6.1" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="VC sum_constant_lower_bound.6.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC sum_constant_lower_bound.6.1.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC sum_constant_lower_bound.6.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="2"><result status="valid" time="0.81"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sum_constant_lower_bound.6.1.1" expl="postcondition">
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="eliminate_let" >
     <goal name="VC sum_constant_lower_bound.6.1.1.0" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="VC sum_constant_lower_bound.6.1.1.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H5">
       <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0" expl="postcondition">
       <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <transf name="replace" arg1="(i_to_c (cardinal s))" arg2="((i_to_c (cardinal (remove (choose s) s)) +. c_one))">
        <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0" expl="postcondition">
        <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <transf name="rewrite" arg1="mult_comm">
         <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H">
          <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0" expl="postcondition">
          <transf name="assert" arg1="(forall a b. a+. b = b+.a)">
           <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="2"><result status="valid" time="0.23"/></proof>
           </goal>
           <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1" expl="postcondition">
           <transf name="rewrite" arg1="h">
            <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1.0" expl="postcondition">
            <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
            <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
            <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
            <transf name="apply" arg1="compat_order_add_both">
             <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.29"/></proof>
             </goal>
             <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.33"/></proof>
             </goal>
             <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.27"/></proof>
             <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
             <proof prover="6"><result status="timeout" time="5.00"/></proof>
             </goal>
             <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1.0.3" expl="apply premises">
             <proof prover="1"><result status="timeout" time="5.00"/></proof>
             <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
             <proof prover="6"><result status="timeout" time="5.00"/></proof>
             </goal>
             <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1.0.4" expl="apply premises">
             <proof prover="1"><result status="timeout" time="5.00"/></proof>
             <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
             <proof prover="6"><result status="timeout" time="5.00"/></proof>
             </goal>
             <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.0.0.0.1.0.5" expl="apply premises">
             <proof prover="1"><result status="timeout" time="5.00"/></proof>
             <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
             <proof prover="6"><result status="timeout" time="5.00"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_constant_lower_bound.6.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.47" steps="104"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_inf" expl="VC for sum_inf">
 <transf name="split_vc" >
  <goal name="VC sum_inf.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="91"/></proof>
  </goal>
  <goal name="VC sum_inf.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="93"/></proof>
  </goal>
  <goal name="VC sum_inf.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_inf.2.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="96"/></proof>
   </goal>
   <goal name="VC sum_inf.2.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.20"/></proof>
   <proof prover="6"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_inf.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="98"/></proof>
  </goal>
  <goal name="VC sum_inf.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="98"/></proof>
  </goal>
  <goal name="VC sum_inf.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="98"/></proof>
  </goal>
  <goal name="VC sum_inf.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="98"/></proof>
  </goal>
  <goal name="VC sum_inf.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="100"/></proof>
  </goal>
  <goal name="VC sum_inf.8" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="102"/></proof>
  </goal>
  <goal name="VC sum_inf.9" expl="postcondition">
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="6"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_constant" expl="VC for sum_constant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_constant.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="91"/></proof>
  </goal>
  <goal name="VC sum_constant.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC sum_constant.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="98"/></proof>
  </goal>
  <goal name="VC sum_constant.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="98"/></proof>
  </goal>
  <goal name="VC sum_constant.4" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="100"/></proof>
  </goal>
  <goal name="VC sum_constant.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_constant_case" expl="VC for ind_sum_constant_case" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_constant_case.0" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(p e)">
   <goal name="VC ind_sum_constant_case.0.0" expl="true case (precondition)" proved="true">
   <proof prover="2"><result status="valid" time="1.06"/></proof>
   </goal>
   <goal name="VC ind_sum_constant_case.0.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem e (my_filter (to_fset 0 n) (p))) )">
    <goal name="VC ind_sum_constant_case.0.1.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="105"/></proof>
    </goal>
    <goal name="VC ind_sum_constant_case.0.1.1" expl="false case (precondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="107"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_constant_case.1" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(p e)">
   <goal name="VC ind_sum_constant_case.1.0" expl="true case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="119"/></proof>
   </goal>
   <goal name="VC ind_sum_constant_case.1.1" expl="false case (precondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_constant_case.2" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(mem e (my_filter (to_fset 0 n) p))">
   <goal name="VC ind_sum_constant_case.2.0" expl="true case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="119"/></proof>
   </goal>
   <goal name="VC ind_sum_constant_case.2.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(mem e (my_filter (to_fset 0 n) (fun (x1:int) -&gt; not (p @ x1) = True)))">
    <goal name="VC ind_sum_constant_case.2.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="H21">
     <goal name="VC ind_sum_constant_case.2.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="VC ind_sum_constant_case.2.1.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.08" steps="115"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_sum_constant_case.2.1.1" expl="false case (precondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="121"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_constant_case.3" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ind_sum_constant_case.3.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_empty1">
    <goal name="VC ind_sum_constant_case.3.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_sum_constant_case.3.0.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="( p e)">
      <goal name="VC ind_sum_constant_case.3.0.0.0.0" expl="true case (apply premises)" proved="true">
      <transf name="assert" proved="true" arg1="(not (mem e (my_filter (to_fset 0 n) (fun (x1:int) -&gt; not (p @ x1) = True))))">
       <goal name="VC ind_sum_constant_case.3.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="123"/></proof>
       </goal>
       <goal name="VC ind_sum_constant_case.3.0.0.0.0.1" expl="true case (apply premises)" proved="true">
       <proof prover="0"><result status="valid" time="0.34"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_sum_constant_case.3.0.0.0.1" expl="false case (apply premises)" proved="true">
      <transf name="assert" proved="true" arg1="(not (mem e (my_filter (to_fset 0 n) (p))))">
       <goal name="VC ind_sum_constant_case.3.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.25" steps="123"/></proof>
       </goal>
       <goal name="VC ind_sum_constant_case.3.0.0.0.1.1" expl="false case (apply premises)" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="125"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_constant_case.4" expl="precondition" proved="true">
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="apply" proved="true" arg1="H65">
  </transf>
  <transf name="apply" proved="true" arg1="H50">
  </transf>
  </goal>
  <goal name="VC ind_sum_constant_case.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="VC ind_sum_constant_case.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC ind_sum_constant_case.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(union (my_filter (to_fset 0 n) p)
   (my_filter (to_fset 0 n) (fun (x1:int) -&gt; not (p @ x1) = True)))" arg2="(to_fset 0 n)" arg3="in" arg4="H16">
   <goal name="VC ind_sum_constant_case.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
    <goal name="VC ind_sum_constant_case.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H16">
     <goal name="VC ind_sum_constant_case.7.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC ind_sum_constant_case.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H8">
       <goal name="VC ind_sum_constant_case.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(cardinal (my_filter (to_fset 0 n) p))" arg2="k1">
        <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(cardinal
        (my_filter (to_fset 0 n) (fun (x1:int) -&gt; not (p @ x1) = True)))" arg2="(n-&#39; k1)">
         <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="6"><result status="valid" time="0.08" steps="133"/></proof>
         </goal>
         <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="(union (my_filter (to_fset 0 n) p)
   (my_filter (to_fset 0 n) (fun (x1:int) -&gt; not (p @ x1) = True)))" arg2="(to_fset 0 n)" arg3="in" arg4="H31">
          <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="replace" proved="true" arg1="(cardinal (my_filter (to_fset 0 n) p))" arg2="k1" arg3="in" arg4="H31">
           <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="( cardinal (to_fset 0 n))" arg2="n" arg3="in" arg4="H31">
            <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
            <transf name="assert" proved="true" arg1="(forall j. n = k1 + j -&gt; j = n-&#39; k1)">
             <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="0.09" steps="135"/></proof>
             </goal>
             <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="h">
              <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="H31">
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.40" steps="140"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.09" steps="133"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H46">
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_sum_constant_case.7.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.09" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_sum_constant_case.7.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ind_sum_constant_case.7.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H46">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_const_one" expl="VC for sum_const_one" proved="true">
 <proof prover="1"><result status="valid" time="0.38"/></proof>
 </goal>
</theory>
<theory name="Conjugate" proved="true">
 <goal name="VC real_part_conjugate" expl="VC for real_part_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_part_conjugate.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC real_part_conjugate.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="conjugate_def">
    <goal name="VC real_part_conjugate.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="t_real_part_subs">
     <goal name="VC real_part_conjugate.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="t_real_part_real">
      <goal name="VC real_part_conjugate.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="( t_real_part (im *. t_im_part i))" arg2="c_zero">
       <goal name="VC real_part_conjugate.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="70"/></proof>
       </goal>
       <goal name="VC real_part_conjugate.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="t_real_part_im">
        <goal name="VC real_part_conjugate.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.08" steps="68"/></proof>
        </goal>
        <goal name="VC real_part_conjugate.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <transf name="assert" proved="true" arg1="((im *. t_im_part i) = (c_zero +. im *. t_im_part i) )">
         <goal name="VC real_part_conjugate.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.18" steps="70"/></proof>
         </goal>
         <goal name="VC real_part_conjugate.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="(real_ (t_im_part i))">
          <goal name="VC real_part_conjugate.0.0.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="72"/></proof>
          </goal>
          <goal name="VC real_part_conjugate.0.0.0.0.0.1.1.1.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="pure_im__def">
           <goal name="VC real_part_conjugate.0.0.0.0.0.1.1.1.1.0" proved="true">
           <transf name="instantiate" proved="true" arg1="unic_decomp" arg2="(im *. t_im_part i),0.0,(im_part i)">
            <goal name="VC real_part_conjugate.0.0.0.0.0.1.1.1.1.0.0" proved="true">
            <proof prover="4"><result status="valid" time="0.40"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC real_part_conjugate.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="70"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC im_part_conjugate" expl="VC for im_part_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC im_part_conjugate.0" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC im_part_conjugate.0.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pure_im__def">
    <goal name="VC im_part_conjugate.0.0.0" expl="VC for im_part_conjugate" proved="true">
    <transf name="instantiate" proved="true" arg1="unic_decomp" arg2="(im *. t_im_part i),0.0,(im_part i)">
     <goal name="VC im_part_conjugate.0.0.0.0" expl="VC for im_part_conjugate" proved="true">
     <proof prover="4"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC im_part_conjugate.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC im_part_conjugate.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="conjugate_def">
    <goal name="VC im_part_conjugate.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="t_im_part_subs">
     <goal name="VC im_part_conjugate.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="t_im_part_real">
      <goal name="VC im_part_conjugate.1.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.07"/></proof>
      </goal>
      <goal name="VC im_part_conjugate.1.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="74"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_conjugate" expl="VC for invol_conjugate" proved="true">
 <transf name="eliminate_definition" proved="true" >
  <goal name="VC invol_conjugate.0" expl="VC for invol_conjugate" proved="true">
  <transf name="rewrite" proved="true" arg1="conjugate_def">
   <goal name="VC invol_conjugate.0.0" expl="VC for invol_conjugate" proved="true">
   <transf name="rewrite" proved="true" arg1="conjugate_def">
    <goal name="VC invol_conjugate.0.0.0" expl="VC for invol_conjugate" proved="true">
    <transf name="rewrite" proved="true" arg1="minus_elim">
     <goal name="VC invol_conjugate.0.0.0.0" expl="VC for invol_conjugate" proved="true">
     <transf name="rewrite" proved="true" arg1="minus_elim">
      <goal name="VC invol_conjugate.0.0.0.0.0" expl="VC for invol_conjugate" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC invol_conjugate.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="1"><result status="valid" time="1.57"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_conjugate" expl="VC for add_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_conjugate.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC add_conjugate.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="conjugate_def">
    <goal name="VC add_conjugate.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="conjugate_def">
     <goal name="VC add_conjugate.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="conjugate_def">
      <goal name="VC add_conjugate.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="add_real_part_rev">
       <goal name="VC add_conjugate.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="add_im_part_rev">
        <goal name="VC add_conjugate.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(forall a b c d. (a+.b) -. (c+.d) = (a-.c)+.(b-.d))">
         <goal name="VC add_conjugate.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(forall a b. a-. b = a+. (-.b))">
          <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.09" steps="70"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="rewrite" proved="true" arg1="h1">
            <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="rewrite" proved="true" arg1="h1">
             <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="rewrite" proved="true" arg1="h1">
              <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="assert" proved="true" arg1="(forall a b. -. (a+. b) = -. a+. -. b)">
               <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                <proof prover="6"><result status="valid" time="0.20" steps="70"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
               <transf name="rewrite" proved="true" arg1="h1">
                <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
                <transf name="assert" proved="true" arg1="(forall a b c d. ((a+.b) +. (c+.d)) = (a+.c) +. (b+.d))">
                 <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                  <proof prover="6"><result status="valid" time="0.08" steps="68"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC add_conjugate.0.0.0.0.0.0.0.0.1.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
                 <proof prover="6"><result status="valid" time="0.09" steps="68"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC add_conjugate.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="1"><result status="valid" time="1.69"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_own_conjugate" expl="VC for add_own_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_own_conjugate.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ttwo *. t_real_part i)" arg2="((t_real_part i) +. (t_real_part i))">
   <goal name="VC add_own_conjugate.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="complex_decomp" arg2="i">
    <goal name="VC add_own_conjugate.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC add_own_conjugate.0.0.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC add_own_conjugate.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="conjugate_def">
       <goal name="VC add_own_conjugate.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(i +. (t_real_part i -. (im *. t_im_part i)))" arg2="((r_to_c (real_part i) +. (im *. r_to_c (im_part i))) +. (t_real_part i -. (im *. t_im_part i)))">
        <goal name="VC add_own_conjugate.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(forall a b c. (a+. c) +. (b -. c) = a+. b)">
         <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(forall a b c. (a+. c) +. (b -. c) = a+. c +. b +. -. c)">
           <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.20" steps="72"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <transf name="rewrite" proved="true" arg1="h1">
            <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(forall a b c d. (a+. b +. c+.d) = a+. c +. (b +. d))">
             <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(forall a b c d. (a+. b +. c+.d) = a+. (b +. c) +. d)">
              <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="6"><result status="valid" time="0.10" steps="70"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
              <transf name="rewrite" proved="true" arg1="h1">
               <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
                <transf name="replace" proved="true" arg1="(b +. c)" arg2="(c +. b)">
                 <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="6"><result status="valid" time="0.10" steps="70"/></proof>
                 </goal>
                 <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="6"><result status="valid" time="0.08" steps="70"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
             <proof prover="4"><result status="valid" time="1.16"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.1.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="t_real_part_def">
           <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.1.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="t_im_part_def">
            <goal name="VC add_own_conjugate.0.0.0.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
            <transf name="apply" proved="true" arg1="h">
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC add_own_conjugate.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.09" steps="70"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC add_own_conjugate.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="67"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC itself_times_conjugate" expl="VC for itself_times_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC itself_times_conjugate.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="67"/></proof>
  </goal>
  <goal name="VC itself_times_conjugate.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="69"/></proof>
  </goal>
  <goal name="VC itself_times_conjugate.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC itself_times_conjugate.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="real__def">
    <goal name="VC itself_times_conjugate.2.0.0" expl="VC for itself_times_conjugate" proved="true">
    <transf name="assert" proved="true" arg1="(((r_to_c (real_part i) *. r_to_c (im_part (conjugate i)))
             +. (r_to_c (real_part (conjugate i)) *. r_to_c (im_part i))) = c_zero)">
     <goal name="VC itself_times_conjugate.2.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="1.62"/></proof>
     </goal>
     <goal name="VC itself_times_conjugate.2.0.0.1" expl="VC for itself_times_conjugate" proved="true">
     <proof prover="2"><result status="valid" time="1.22"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC itself_times_conjugate.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_to_modulus" expl="VC for conjugate_to_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_to_modulus.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC conjugate_to_modulus.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="modulus_def">
    <goal name="VC conjugate_to_modulus.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="conjugate_def">
     <goal name="VC conjugate_to_modulus.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="1.45"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_times_itself_pos" expl="VC for conjugate_times_itself_pos" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="VC conjugate_times_itself_pos.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="itself_times_conjugate">
   <goal name="VC conjugate_times_itself_pos.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC conjugate_times_itself_pos.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="add_pos">
     <goal name="VC conjugate_times_itself_pos.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="67"/></proof>
     </goal>
     <goal name="VC conjugate_times_itself_pos.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="67"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_conjugate" expl="VC for sum_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_conjugate.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="69"/></proof>
  </goal>
  <goal name="VC sum_conjugate.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="69"/></proof>
  </goal>
  <goal name="VC sum_conjugate.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="71"/></proof>
  </goal>
  <goal name="VC sum_conjugate.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="73"/></proof>
  </goal>
  <goal name="VC sum_conjugate.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_conjugate.4.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="80"/></proof>
   </goal>
   <goal name="VC sum_conjugate.4.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_conjugate.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_conjugate.5.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.62"/></proof>
   </goal>
   <goal name="VC sum_conjugate.5.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="2.82"/></proof>
   </goal>
   <goal name="VC sum_conjugate.5.2" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC sum_conjugate.5.2.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((f @ choose s) +. sum (remove (choose s) s) f)" arg2="(sum s f)">
     <goal name="VC sum_conjugate.5.2.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H7">
      <goal name="VC sum_conjugate.5.2.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H7">
       <goal name="VC sum_conjugate.5.2.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="2.45"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sum_conjugate.5.2.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="82"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC sum_conjugate.5.2.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="82"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_module_one" expl="VC for conjugate_module_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_module_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="71"/></proof>
  </goal>
  <goal name="VC conjugate_module_one.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="73"/></proof>
  </goal>
  <goal name="VC conjugate_module_one.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="75"/></proof>
  </goal>
  <goal name="VC conjugate_module_one.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="75"/></proof>
  </goal>
  <goal name="VC conjugate_module_one.4" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(square_rt (i *. conjugate i) = c_one)">
   <goal name="VC conjugate_module_one.4.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="75"/></proof>
   </goal>
   <goal name="VC conjugate_module_one.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="76"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC conjugate_module_one.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_module_one_rev" expl="VC for conjugate_module_one_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_module_one_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="69"/></proof>
  </goal>
  <goal name="VC conjugate_module_one_rev.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="71"/></proof>
  </goal>
  <goal name="VC conjugate_module_one_rev.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_real" expl="VC for conjugate_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_real.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_real_gen" expl="VC for conjugate_real_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_real_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_one" expl="VC for conjugate_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="69"/></proof>
  </goal>
  <goal name="VC conjugate_one.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_c_zero" expl="VC for conjugate_c_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_c_zero.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="71"/></proof>
  </goal>
  <goal name="VC conjugate_c_zero.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_indic" expl="VC for conjugate_indic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_indic.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_indic_rev" expl="VC for conjugate_indic_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_indic_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_indic_gen_int" expl="VC for conjugate_indic_gen_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_indic_gen_int.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_pure_im" expl="VC for conjugate_pure_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_pure_im.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_im" expl="VC for conjugate_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_im.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.75" steps="75"/></proof>
  </goal>
  <goal name="VC conjugate_im.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC conjugate_im.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_value" expl="VC for conjugate_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_value.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_minus_value" expl="VC for conjugate_minus_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_minus_value.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="81"/></proof>
  </goal>
  <goal name="VC conjugate_minus_value.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="81"/></proof>
  </goal>
  <goal name="VC conjugate_minus_value.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="81"/></proof>
  </goal>
  <goal name="VC conjugate_minus_value.3" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(t_im_part c = (-. b))">
   <goal name="VC conjugate_minus_value.3.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="85"/></proof>
   </goal>
   <goal name="VC conjugate_minus_value.3.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.01"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prod_conjugate" expl="VC for prod_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prod_conjugate.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="t_decomp_mult">
   <goal name="VC prod_conjugate.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="add_eq_t">
    <goal name="VC prod_conjugate.0.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.27"/></proof>
    </goal>
    <goal name="VC prod_conjugate.0.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq_t">
     <goal name="VC prod_conjugate.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="79"/></proof>
     </goal>
     <goal name="VC prod_conjugate.0.0.1.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="im_part_conjugate">
      <goal name="VC prod_conjugate.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="real_part_conjugate">
       <goal name="VC prod_conjugate.0.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="minus_out_right">
        <goal name="VC prod_conjugate.0.0.1.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.43" steps="81"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_conjugate" expl="VC for mult_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_conjugate.0" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="( t_real_part (conjugate (a *. b)) = t_real_part (conjugate a *. conjugate b))">
   <goal name="VC mult_conjugate.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC mult_conjugate.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.48"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_conjugate.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC mult_conjugate.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="85"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_prod" expl="VC for conjugate_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_prod.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="t_decomp_mult">
   <goal name="VC conjugate_prod.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="add_eq_t">
    <goal name="VC conjugate_prod.0.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="VC conjugate_prod.0.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq_t">
     <goal name="VC conjugate_prod.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="79"/></proof>
     </goal>
     <goal name="VC conjugate_prod.0.0.1.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="im_part_conjugate">
      <goal name="VC conjugate_prod.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="real_part_conjugate">
       <goal name="VC conjugate_prod.0.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="1.50"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC conj_conj_prod" expl="VC for conj_conj_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conj_conj_prod.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC conj_conj_prod.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(conjugate
  (((t_real_part a *. t_real_part b) +. (t_im_part a *. t_im_part b))
   +. (im
       *. ((t_real_part a *. t_im_part b) -. (t_real_part b *. t_im_part a)))))" arg2="((((t_real_part a *. t_real_part b) +. (t_im_part a *. t_im_part b))
   -. (im
       *. ((t_real_part a *. t_im_part b) -. (t_real_part b *. t_im_part a)))))">
    <goal name="VC conj_conj_prod.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC conj_conj_prod.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC conj_conj_prod.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="t_decomp_mult">
       <goal name="VC conj_conj_prod.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC conj_conj_prod.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="minus_elim">
         <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="add_eq_t">
          <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.82"/></proof>
          </goal>
          <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="im_part_conjugate">
           <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="real_part_conjugate">
            <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="minus_elim">
             <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="minus_in_right">
              <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="mult_eq_t">
               <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.10" steps="82"/></proof>
               </goal>
               <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="minus_out_right">
                <goal name="VC conj_conj_prod.0.0.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="3.08" steps="84"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC conj_conj_prod.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="conjugate_value">
     <goal name="VC conj_conj_prod.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.41" steps="81"/></proof>
     </goal>
     <goal name="VC conj_conj_prod.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.51" steps="81"/></proof>
     </goal>
     <goal name="VC conj_conj_prod.0.0.1.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="79"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC conj_prod_conj" expl="VC for conj_prod_conj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conj_prod_conj.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC conj_prod_conj.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC conj_prod_conj.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC conj_prod_conj.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="minus_elim">
      <goal name="VC conj_prod_conj.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.28"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC itself_prod_conjugate_modulus_one" expl="VC for itself_prod_conjugate_modulus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC itself_prod_conjugate_modulus_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="81"/></proof>
  </goal>
  <goal name="VC itself_prod_conjugate_modulus_one.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="83"/></proof>
  </goal>
  <goal name="VC itself_prod_conjugate_modulus_one.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.53" steps="85"/></proof>
  </goal>
  <goal name="VC itself_prod_conjugate_modulus_one.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="85"/></proof>
  </goal>
  <goal name="VC itself_prod_conjugate_modulus_one.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.42" steps="87"/></proof>
  </goal>
  <goal name="VC itself_prod_conjugate_modulus_one.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="81"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_prod_itself_modulus_one" expl="VC for conjugate_prod_itself_modulus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC conjugate_prod_itself_modulus_one.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_opposite" expl="VC for modulus_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_opposite.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_conjugate" expl="VC for modulus_conjugate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_conjugate.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_pos" expl="VC for modulus_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_pos.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="81"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_neg" expl="VC for modulus_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_neg.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="81"/></proof>
  </goal>
  <goal name="VC modulus_neg.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC modulus_neg.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Int_dec_parts" proved="true">
 <goal name="VC int_part" expl="VC for int_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_part.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="91"/></proof>
  </goal>
  <goal name="VC int_part.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="91"/></proof>
  </goal>
  <goal name="VC int_part.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_part.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(from_int(floor (real_part x)) &lt;=* real_part x)">
    <goal name="VC int_part.2.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.32"/></proof>
    </goal>
    <goal name="VC int_part.2.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.26"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_part.2.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(  real_part x &lt;* from_int(floor (real_part x)+1))">
    <goal name="VC int_part.2.1.0" expl="asserted formula" proved="true">
    <transf name="instantiate" proved="true" arg1="Floor_down" arg2="(real_part x)">
     <goal name="VC int_part.2.1.0.0" expl="asserted formula" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC int_part.2.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="( real_part x &lt;&#39; from_int (floor (real_part x) + 1))">
       <goal name="VC int_part.2.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="1.78" steps="104"/></proof>
       </goal>
       <goal name="VC int_part.2.1.0.0.0.1" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="(&lt;*)_def">
        <goal name="VC int_part.2.1.0.0.0.1.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC int_part.2.1.0.0.0.1.0.0" proved="true">
         <proof prover="6"><result status="valid" time="0.11" steps="106"/></proof>
         </goal>
         <goal name="VC int_part.2.1.0.0.0.1.0.1" proved="true">
         <proof prover="6"><result status="valid" time="1.83" steps="106"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_part.2.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.12"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_part_int" expl="VC for int_part_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_part_int.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="91"/></proof>
  </goal>
  <goal name="VC int_part_int.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC dec_part" expl="VC for dec_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC dec_part.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="89"/></proof>
  </goal>
  <goal name="VC dec_part.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="101"/></proof>
  </goal>
  <goal name="VC dec_part.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="101"/></proof>
  </goal>
  <goal name="VC dec_part.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC dec_part.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="103"/></proof>
   </goal>
   <goal name="VC dec_part.3.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="result" arg2="( x +. (-. int_part x))">
    <goal name="VC dec_part.3.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="c_one" arg2="( (c_one +. int_part x) +. (-. int_part x))">
     <goal name="VC dec_part.3.1.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.21"/></proof>
     </goal>
     <goal name="VC dec_part.3.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.25"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC dec_part.3.1.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC dec_part_decomp" expl="VC for dec_part_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC dec_part_decomp.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC dec_part_decomp_rev" expl="VC for dec_part_decomp_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.09" steps="91"/></proof>
 </goal>
 <goal name="VC dec_part_decomp_int" expl="VC for dec_part_decomp_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC dec_part_decomp_int.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC dec_part_decomp_int_rev" expl="VC for dec_part_decomp_int_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.11" steps="91"/></proof>
 </goal>
</theory>
</file>
</why3session>
