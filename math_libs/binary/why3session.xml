<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="binary.mlw"/>
<theory name="Binary_Op" proved="true">
 <goal name="VC set_binary" expl="VC for set_binary" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_binary.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_binary" expl="VC for get_binary" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_binary.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_binary.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="VC get_binary.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.29"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC head_bit" expl="VC for head_bit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC head_bit.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="93"/></proof>
  </goal>
  <goal name="VC head_bit.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.25" steps="95"/></proof>
  </goal>
  <goal name="VC head_bit.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC head_bit.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.25" steps="95"/></proof>
   </goal>
   <goal name="VC head_bit.2.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.72"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC tail_bits" expl="VC for tail_bits" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC tail_bits.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="93"/></proof>
  </goal>
  <goal name="VC tail_bits.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24" steps="95"/></proof>
  </goal>
  <goal name="VC tail_bits.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC tail_bits.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.13" steps="95"/></proof>
   </goal>
   <goal name="VC tail_bits.2.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.23" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ht_to_int" expl="VC for ht_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ht_to_int.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC head_tail_inv" expl="VC for head_tail_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC head_tail_inv.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ht_to_int_def">
   <goal name="VC head_tail_inv.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="head_bit_def">
    <goal name="VC head_tail_inv.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
    <goal name="VC head_tail_inv.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.11" steps="93"/></proof>
    </goal>
    <goal name="VC head_tail_inv.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="93"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC head_tail_inv.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.19" steps="93"/></proof>
   </goal>
   <goal name="VC head_tail_inv.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC head_tail_inv.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.33" steps="95"/></proof>
    </goal>
    <goal name="VC head_tail_inv.0.2.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.20" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC head_tail_inv.0.3" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC head_tail_inv.0.3.0" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.16" steps="95"/></proof>
    </goal>
    <goal name="VC head_tail_inv.0.3.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="4.85"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ht_to_int_head" expl="VC for ht_to_int_head" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ht_to_int_head.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
  </goal>
  <goal name="VC ht_to_int_head.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="97"/></proof>
  </goal>
  <goal name="VC ht_to_int_head.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ht_to_int_def">
   <goal name="VC ht_to_int_head.2.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ht_to_int_head.2.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="head_bit_def">
     <goal name="VC ht_to_int_head.2.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="head_bit_def">
      <goal name="VC ht_to_int_head.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="decomp" arg2="i,(power 2 (k - 1))">
       <goal name="VC ht_to_int_head.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.16" steps="101"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ht_to_int_head.2.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.08" steps="99"/></proof>
      </goal>
      <goal name="VC ht_to_int_head.2.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ht_to_int_head.2.0.0.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.09" steps="99"/></proof>
       </goal>
       <goal name="VC ht_to_int_head.2.0.0.0.2.1" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="((div i (power 2 (k - 1))) &lt;2)">
        <goal name="VC ht_to_int_head.2.0.0.0.2.1.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="1.11"/></proof>
        </goal>
        <goal name="VC ht_to_int_head.2.0.0.0.2.1.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ht_to_int_head.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.09" steps="99"/></proof>
     </goal>
     <goal name="VC ht_to_int_head.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.19" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ht_to_int_head.2.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.18" steps="99"/></proof>
   </goal>
   <goal name="VC ht_to_int_head.2.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ht_to_int_head.2.2.0" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.26" steps="101"/></proof>
    </goal>
    <goal name="VC ht_to_int_head.2.2.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.26" steps="101"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ht_to_int_head.2.3" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.16" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ht_to_int_tail" expl="VC for ht_to_int_tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ht_to_int_tail.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="97"/></proof>
  </goal>
  <goal name="VC ht_to_int_tail.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="99"/></proof>
  </goal>
  <goal name="VC ht_to_int_tail.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ht_to_int_def">
   <goal name="VC ht_to_int_tail.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="tail_bits_def">
    <goal name="VC ht_to_int_tail.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="tail_bits_def">
     <goal name="VC ht_to_int_tail.2.0.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.18" steps="101"/></proof>
     </goal>
     <goal name="VC ht_to_int_tail.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.08" steps="99"/></proof>
     </goal>
     <goal name="VC ht_to_int_tail.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.12" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ht_to_int_tail.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
    </goal>
    <goal name="VC ht_to_int_tail.2.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ht_to_int_tail.2.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="5"><result status="valid" time="0.46"/></proof>
     </goal>
     <goal name="VC ht_to_int_tail.2.0.2.1" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="((hi * power 2 (k - 1)) &lt;= power 2 (k-1))">
      <goal name="VC ht_to_int_tail.2.0.2.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.42"/></proof>
      </goal>
      <goal name="VC ht_to_int_tail.2.0.2.1.1" expl="rewrite premises" proved="true">
      <transf name="assert" proved="true" arg1="(tail_bits i k &lt; power 2 (k-1))">
       <goal name="VC ht_to_int_tail.2.0.2.1.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.32"/></proof>
       </goal>
       <goal name="VC ht_to_int_tail.2.0.2.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.28"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ht_to_int_tail.2.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.21" steps="99"/></proof>
   </goal>
   <goal name="VC ht_to_int_tail.2.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.19" steps="99"/></proof>
   </goal>
   <goal name="VC ht_to_int_tail.2.3" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ht_to_int_tail.2.3.0" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.15" steps="101"/></proof>
    </goal>
    <goal name="VC ht_to_int_tail.2.3.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.32"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_fun_bin_i" expl="VC for concat_fun_bin_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_fun_bin_i.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_fun_bin_i.0.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.45"/></proof>
   </goal>
   <goal name="VC concat_fun_bin_i.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.66"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC shift_bin_i" expl="VC for shift_bin_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC shift_bin_i.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC shift_bin_i.0.0" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.36"/></proof>
   </goal>
   <goal name="VC shift_bin_i.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_fun_bin" expl="VC for concat_fun_bin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_fun_bin.0" expl="postcondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC concat_fun_bin.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC concat_fun_bin.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_fun_value">
     <goal name="VC concat_fun_bin.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="binary_def">
      <goal name="VC concat_fun_bin.0.0.0.0.0" expl="VC for concat_fun_bin" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC concat_fun_bin.0.0.0.0.0.0" expl="VC for concat_fun_bin" proved="true">
       <proof prover="3"><result status="valid" time="1.49"/></proof>
       </goal>
       <goal name="VC concat_fun_bin.0.0.0.0.0.1" expl="VC for concat_fun_bin" proved="true">
       <proof prover="3"><result status="valid" time="1.29"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_func_bin" expl="VC for mod_func_bin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_func_bin.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC mod_func_bin.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="binary_def">
    <goal name="VC mod_func_bin.0.0.0" expl="VC for mod_func_bin" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mod_func_bin.0.0.0.0" expl="VC for mod_func_bin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mod_func_bin.0.0.0.0.0" expl="VC for mod_func_bin" proved="true">
      <transf name="rewrite" proved="true" arg1="mod_func_def">
       <goal name="VC mod_func_bin.0.0.0.0.0.0" expl="VC for mod_func_bin" proved="true">
       <proof prover="0"><result status="valid" time="1.80"/></proof>
       </goal>
       <goal name="VC mod_func_bin.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.21" steps="94"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mod_func_bin.0.0.0.0.1" expl="VC for mod_func_bin" proved="true">
      <transf name="rewrite" proved="true" arg1="mod_func_def">
       <goal name="VC mod_func_bin.0.0.0.0.1.0" expl="VC for mod_func_bin" proved="true">
       <proof prover="0"><result status="valid" time="1.32"/></proof>
       </goal>
       <goal name="VC mod_func_bin.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.12" steps="94"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC shift_bin" expl="VC for shift_bin" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC shift_bin.0" expl="postcondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC shift_bin.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC shift_bin.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="binary_def">
     <goal name="VC shift_bin.0.0.0.0" expl="VC for shift_bin" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC shift_bin.0.0.0.0.0" expl="VC for shift_bin" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC shift_bin.0.0.0.0.0.0" expl="VC for shift_bin" proved="true">
       <proof prover="4"><result status="valid" time="0.24" steps="94"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC shift_bin.0.0.0.0.1" expl="VC for shift_bin" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC shift_bin.0.0.0.0.1.0" expl="VC for shift_bin" proved="true">
       <proof prover="4"><result status="valid" time="0.14" steps="94"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC binary_comp" expl="VC for binary_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC binary_comp.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC binary_comp.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="binary_def">
    <goal name="VC binary_comp.0.0.0" expl="VC for binary_comp" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC binary_comp.0.0.0.0" expl="VC for binary_comp" proved="true">
     <proof prover="3"><result status="valid" time="0.72"/></proof>
     </goal>
     <goal name="VC binary_comp.0.0.0.1" expl="VC for binary_comp" proved="true">
     <proof prover="3"><result status="valid" time="0.61"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_is_all_binary" expl="VC for set_is_all_binary" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_is_all_binary.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC nary_length" expl="VC for nary_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC nary_length.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.24" steps="95"/></proof>
  </goal>
  <goal name="VC nary_length.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(div i (power n (j + 1)))" arg2="((div (div i n) (power n j) ))">
   <goal name="VC nary_length.1.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="compat_order_div">
    <goal name="VC nary_length.1.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.16" steps="97"/></proof>
    </goal>
    <goal name="VC nary_length.1.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.13" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nary_length.1.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="4.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC nary_length.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC nary_length.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.22"/></proof>
   </goal>
   <goal name="VC nary_length.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC nary_length.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
  </transf>
  </goal>
  <goal name="VC nary_length.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="93"/></proof>
  </goal>
  <goal name="VC nary_length.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC nary_length.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="5.52"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC nary_length.6" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.19" steps="93"/></proof>
  </goal>
  <goal name="VC nary_length.7" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC nary_length.8" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="VC nary_length.9" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="99"/></proof>
  </goal>
  <goal name="VC nary_length.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.18" steps="103"/></proof>
  </goal>
  <goal name="VC nary_length.11" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="105"/></proof>
  </goal>
  <goal name="VC nary_length.12" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC nary_length.12.0" expl="loop variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.23" steps="107"/></proof>
   </goal>
   <goal name="VC nary_length.12.1" expl="loop variant decrease" proved="true">
   <transf name="replace" proved="true" arg1="kp" arg2="(div kp1 n)">
    <goal name="VC nary_length.12.1.0" expl="loop variant decrease" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
    <goal name="VC nary_length.12.1.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="3.95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC nary_length.13" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="105"/></proof>
  </goal>
  <goal name="VC nary_length.14" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.19" steps="106"/></proof>
  </goal>
  <goal name="VC nary_length.15" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.18" steps="106"/></proof>
  </goal>
  <goal name="VC nary_length.16" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="102"/></proof>
  </goal>
  <goal name="VC nary_length.17" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.17" steps="103"/></proof>
  </goal>
  <goal name="VC nary_length.18" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="103"/></proof>
  </goal>
  <goal name="VC nary_length.19" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="106"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC binary_length" expl="VC for binary_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC binary_length.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.17" steps="89"/></proof>
  </goal>
  <goal name="VC binary_length.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.17" steps="90"/></proof>
  </goal>
  <goal name="VC binary_length.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC binary_length.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
   </goal>
   <goal name="VC binary_length.2.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.19" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC binary_length.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20" steps="97"/></proof>
  </goal>
  <goal name="VC binary_length.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19" steps="93"/></proof>
  </goal>
  <goal name="VC binary_length.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.22" steps="93"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_binary_length" expl="VC for set_binary_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_binary_length.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_binary_length.0.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.70"/></proof>
   </goal>
   <goal name="VC set_binary_length.0.1" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.75"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_binary_length.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20" steps="95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_binary_length_b" expl="VC for set_binary_length_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_binary_length_b.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_binary_length_b.0.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.22" steps="97"/></proof>
   </goal>
   <goal name="VC set_binary_length_b.0.1" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.21" steps="97"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_binary_length_b.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bit_vector" proved="true">
 <goal name="VC bitvec" expl="VC for bitvec" proved="true">
 <transf name="exists" proved="true" arg1="(fun (i:int) -&gt; 0)">
  <goal name="VC bitvec.0" proved="true">
  <transf name="exists" proved="true" arg1="0">
   <goal name="VC bitvec.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC bitvec.0.0.0" expl="type invariant" proved="true">
    <proof prover="4"><result status="valid" time="0.18" steps="87"/></proof>
    </goal>
    <goal name="VC bitvec.0.0.1" expl="type invariant" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bitvec.0.0.1.0" expl="type invariant" proved="true">
     <proof prover="4"><result status="valid" time="0.19" steps="90"/></proof>
     </goal>
     <goal name="VC bitvec.0.0.1.1" expl="type invariant" proved="true">
     <proof prover="4"><result status="valid" time="0.09" steps="90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bitvec.0.0.2" expl="type invariant" proved="true">
    <proof prover="4"><result status="valid" time="0.23" steps="91"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC binary_mult" expl="VC for binary_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC binary_mult.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="87"/></proof>
  </goal>
  <goal name="VC binary_mult.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="89"/></proof>
  </goal>
  <goal name="VC binary_mult.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20" steps="89"/></proof>
  </goal>
  <goal name="VC binary_mult.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19" steps="89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC getbv" expl="VC for getbv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC getbv.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_binary">
   <goal name="VC getbv.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC getbv.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.30"/></proof>
    </goal>
    <goal name="VC getbv.0.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC getbv.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC getbv_bound" expl="VC for getbv_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC getbv_bound.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC getbv_bound.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="VC getbv_bound.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.46"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC getbv_eq" expl="VC for getbv_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC getbv_eq.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC getbv_eq_gen" expl="VC for getbv_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC getbv_eq_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="93"/></proof>
  </goal>
  <goal name="VC getbv_eq_gen.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="94"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC setbv" expl="VC for setbv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC setbv.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.23" steps="95"/></proof>
  </goal>
  <goal name="VC setbv.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC setbv_int" expl="VC for setbv_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC setbv_int.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24" steps="95"/></proof>
  </goal>
  <goal name="VC setbv_int.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24" steps="93"/></proof>
  </goal>
  <goal name="VC setbv_int.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="93"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_bvlength" expl="VC for set_bvlength" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_bvlength.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC set_bvlength.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC set_bvlength.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bvlength_def">
     <goal name="VC set_bvlength.0.0.0.0" expl="VC for set_bvlength" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_bvlength.0.0.0.0.0" expl="VC for set_bvlength" proved="true">
      <proof prover="4"><result status="valid" time="0.12" steps="98"/></proof>
      </goal>
      <goal name="VC set_bvlength.0.0.0.0.1" expl="VC for set_bvlength" proved="true">
      <proof prover="4"><result status="valid" time="0.15" steps="98"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC null_product_bitvec" expl="VC for null_product_bitvec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC null_product_bitvec.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_null_product_bitvec" expl="VC for non_null_product_bitvec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_null_product_bitvec.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem m (to_fset 0 n))">
   <goal name="VC non_null_product_bitvec.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(exists i. mem i  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0)))">
    <goal name="VC non_null_product_bitvec.0.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(exists i:int. 0 &lt;= i /\ i &lt; n /\ (getbv x @ i) = 0)">
     <goal name="VC non_null_product_bitvec.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.38"/></proof>
     </goal>
     <goal name="VC non_null_product_bitvec.0.0.0.1" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="h1">
      <goal name="VC non_null_product_bitvec.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="i">
       <goal name="VC non_null_product_bitvec.0.0.0.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="VC non_null_product_bitvec.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.24" steps="115"/></proof>
        </goal>
        <goal name="VC non_null_product_bitvec.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC non_null_product_bitvec.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.10" steps="112"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_product_bitvec.0.0.1" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="( mem m  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0)))">
     <goal name="VC non_null_product_bitvec.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. (exists e. mem e s) -&gt; mem (choose s) s)">
      <goal name="VC non_null_product_bitvec.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC non_null_product_bitvec.0.0.1.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="3.91"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC non_null_product_bitvec.0.0.1.0.1" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC non_null_product_bitvec.0.0.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="m_def">
        <goal name="VC non_null_product_bitvec.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="h1" arg2="(my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0))">
         <goal name="VC non_null_product_bitvec.0.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="VC non_null_product_bitvec.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="h1">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_product_bitvec.0.0.1.1" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="in_my_filter_set" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 0),m">
      <goal name="VC non_null_product_bitvec.0.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC non_null_product_bitvec.0.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec.0.1" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="to_fset_bounds">
    <goal name="VC non_null_product_bitvec.0.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="108"/></proof>
    </goal>
    <goal name="VC non_null_product_bitvec.0.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="h">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((fun (i:int) -&gt; (getbv x @ i) = 0) m)">
   <goal name="VC non_null_product_bitvec.1.0" expl="asserted formula" proved="true">
   <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 0),m">
    <goal name="VC non_null_product_bitvec.1.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC non_null_product_bitvec.1.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H1">
      <goal name="VC non_null_product_bitvec.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(exists i:int. 0 &lt;= i /\ i &lt; n /\ (getbv x @ i) = 0)">
       <goal name="VC non_null_product_bitvec.1.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.38"/></proof>
       </goal>
       <goal name="VC non_null_product_bitvec.1.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(exists i. mem i (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 0)))">
        <goal name="VC non_null_product_bitvec.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="h1">
         <goal name="VC non_null_product_bitvec.1.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="exists" proved="true" arg1="i">
          <goal name="VC non_null_product_bitvec.1.0.0.0.0.1.0.0.0" proved="true">
          <transf name="apply" proved="true" arg1="in_my_filter">
           <goal name="VC non_null_product_bitvec.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.14" steps="120"/></proof>
           </goal>
           <goal name="VC non_null_product_bitvec.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.17" steps="120"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC non_null_product_bitvec.1.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.52"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec.1.1" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
    <goal name="VC non_null_product_bitvec.1.1.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="h">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_null_product_bitvec.2.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC non_null_product_bitvec.2.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="H4">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec.2.1" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC non_null_product_bitvec.2.1.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall m n. m&lt;n -&gt; m&lt;=n)">
     <goal name="VC non_null_product_bitvec.2.1.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.09" steps="114"/></proof>
     </goal>
     <goal name="VC non_null_product_bitvec.2.1.0.1" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="VC non_null_product_bitvec.2.1.0.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H3">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec.3" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_iproduct_plus_one">
   <goal name="VC non_null_product_bitvec.3.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(getbv x @ m)" arg2="0">
    <goal name="VC non_null_product_bitvec.3.0.0" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.09" steps="116"/></proof>
    </goal>
    <goal name="VC non_null_product_bitvec.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="H3">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec.3.1" expl="rewrite premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC non_null_product_bitvec.3.1.0" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="H4">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_null_product_bitvec.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC non_null_product_bitvec.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC non_null_product_bitvec.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.10" steps="116"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC null_product_bitvec_inv" expl="VC for null_product_bitvec_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC null_product_bitvec_inv.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="97"/></proof>
  </goal>
  <goal name="VC null_product_bitvec_inv.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="97"/></proof>
  </goal>
  <goal name="VC null_product_bitvec_inv.2" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=0)">
   <goal name="VC null_product_bitvec_inv.2.0" expl="true case (postcondition)" proved="true">
   <proof prover="4"><result status="valid" time="0.16" steps="99"/></proof>
   </goal>
   <goal name="VC null_product_bitvec_inv.2.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC null_product_bitvec_inv.2.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
    </goal>
    <goal name="VC null_product_bitvec_inv.2.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC null_product_bitvec_inv.2.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC null_product_bitvec_inv.2.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC null_product_bitvec_inv.2.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="one_mult">
        <goal name="VC null_product_bitvec_inv.2.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC null_product_bitvec_inv.2.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="4"><result status="valid" time="0.14" steps="103"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC null_product_bitvec_inv.2.1.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="1.50"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC null_product_bitvec_inv.2.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC null_product_bitvec_inv.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="93"/></proof>
  </goal>
  <goal name="VC null_product_bitvec_inv.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.01"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_null_product_bitvec_inv" expl="VC for non_null_product_bitvec_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_null_product_bitvec_inv.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists i. mem i  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
   <goal name="VC non_null_product_bitvec_inv.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="((exists i:int. 0 &lt;= i /\ i &lt; n /\ not (getbv x @ i) = 0))">
    <goal name="VC non_null_product_bitvec_inv.0.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC non_null_product_bitvec_inv.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.15" steps="105"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_product_bitvec_inv.0.0.1" expl="asserted formula" proved="true">
    <transf name="destruct" proved="true" arg1="h1">
     <goal name="VC non_null_product_bitvec_inv.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="i">
      <goal name="VC non_null_product_bitvec_inv.0.0.1.0.0" proved="true">
      <transf name="apply" proved="true" arg1="in_my_filter">
       <goal name="VC non_null_product_bitvec_inv.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.23" steps="115"/></proof>
       </goal>
       <goal name="VC non_null_product_bitvec_inv.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC non_null_product_bitvec_inv.0.0.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.34"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec_inv.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="( mem m  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
    <goal name="VC non_null_product_bitvec_inv.0.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(forall s: set int. (exists e. mem e s) -&gt; mem (choose s) s)">
     <goal name="VC non_null_product_bitvec_inv.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.35"/></proof>
     </goal>
     <goal name="VC non_null_product_bitvec_inv.0.1.0.1" expl="asserted formula" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC non_null_product_bitvec_inv.0.1.0.1.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="m_def">
       <goal name="VC non_null_product_bitvec_inv.0.1.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="h1" arg2="(my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1))">
        <goal name="VC non_null_product_bitvec_inv.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="VC non_null_product_bitvec_inv.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="h1">
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_product_bitvec_inv.0.1.1" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="in_my_filter_set" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
     <goal name="VC non_null_product_bitvec_inv.0.1.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="VC non_null_product_bitvec_inv.0.1.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="h">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec_inv.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="to_fset_bounds">
   <goal name="VC non_null_product_bitvec_inv.1.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.20" steps="108"/></proof>
   </goal>
   <goal name="VC non_null_product_bitvec_inv.1.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec_inv.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
   <goal name="VC non_null_product_bitvec_inv.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(((fun (i:int) -&gt; (getbv x @ i) = 1) @ m) = True)">
    <goal name="VC non_null_product_bitvec_inv.2.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC non_null_product_bitvec_inv.2.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H2">
      <goal name="VC non_null_product_bitvec_inv.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(exists i:int. 0 &lt;= i /\ i &lt; n /\ not (getbv x @ i) = 0)">
       <goal name="VC non_null_product_bitvec_inv.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.16" steps="114"/></proof>
       </goal>
       <goal name="VC non_null_product_bitvec_inv.2.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.53"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_product_bitvec_inv.2.0.1" expl="postcondition" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
     <goal name="VC non_null_product_bitvec_inv.2.0.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec_inv.3" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem m (to_fset 0 n))">
   <goal name="VC non_null_product_bitvec_inv.3.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(exists i. mem i  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
    <goal name="VC non_null_product_bitvec_inv.3.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="((exists i:int. 0 &lt;= i /\ i &lt; n /\ not (getbv x @ i) = 0))">
     <goal name="VC non_null_product_bitvec_inv.3.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC non_null_product_bitvec_inv.3.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="4"><result status="valid" time="0.16" steps="113"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_product_bitvec_inv.3.0.0.1" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="h1">
      <goal name="VC non_null_product_bitvec_inv.3.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="i">
       <goal name="VC non_null_product_bitvec_inv.3.0.0.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="VC non_null_product_bitvec_inv.3.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.29" steps="123"/></proof>
        </goal>
        <goal name="VC non_null_product_bitvec_inv.3.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC non_null_product_bitvec_inv.3.0.0.1.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_product_bitvec_inv.3.0.1" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="( mem m  (my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1)))">
     <goal name="VC non_null_product_bitvec_inv.3.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. (exists e. mem e s) -&gt; mem (choose s) s)">
      <goal name="VC non_null_product_bitvec_inv.3.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.52"/></proof>
      </goal>
      <goal name="VC non_null_product_bitvec_inv.3.0.1.0.1" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC non_null_product_bitvec_inv.3.0.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="m_def">
        <goal name="VC non_null_product_bitvec_inv.3.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="h1" arg2="(my_filter (to_fset 0 n) (fun (i:int) -&gt; (getbv x @ i) = 1))">
         <goal name="VC non_null_product_bitvec_inv.3.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="VC non_null_product_bitvec_inv.3.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="h1">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_product_bitvec_inv.3.0.1.1" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="in_my_filter_set" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
      <goal name="VC non_null_product_bitvec_inv.3.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC non_null_product_bitvec_inv.3.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec_inv.3.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="( 0 &lt;= m /\ m &lt; n)">
    <goal name="VC non_null_product_bitvec_inv.3.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="to_fset_bounds">
     <goal name="VC non_null_product_bitvec_inv.3.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.12" steps="116"/></proof>
     </goal>
     <goal name="VC non_null_product_bitvec_inv.3.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_product_bitvec_inv.3.1.1" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC non_null_product_bitvec_inv.3.1.1.0" expl="VC for non_null_product_bitvec_inv" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC non_null_product_bitvec_inv.3.1.1.0.0" expl="VC for non_null_product_bitvec_inv" proved="true">
      <transf name="apply" proved="true" arg1="h1">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_product_bitvec_inv.3.1.1.1" expl="VC for non_null_product_bitvec_inv" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC non_null_product_bitvec_inv.3.1.1.1.0" expl="VC for non_null_product_bitvec_inv" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b. a&lt;b -&gt; a&lt;=b)">
       <goal name="VC non_null_product_bitvec_inv.3.1.1.1.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.12" steps="122"/></proof>
       </goal>
       <goal name="VC non_null_product_bitvec_inv.3.1.1.1.0.1" expl="VC for non_null_product_bitvec_inv" proved="true">
       <transf name="apply" proved="true" arg1="h">
        <goal name="VC non_null_product_bitvec_inv.3.1.1.1.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="h1">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec_inv.4" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_iproduct_plus_one">
   <goal name="VC non_null_product_bitvec_inv.4.0" expl="assertion" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC non_null_product_bitvec_inv.4.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(getbv x @ m)" arg2="1">
     <goal name="VC non_null_product_bitvec_inv.4.0.0.0" expl="assertion" proved="true">
     <proof prover="4"><result status="valid" time="0.22" steps="116"/></proof>
     </goal>
     <goal name="VC non_null_product_bitvec_inv.4.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(to_fset 0 n),(fun (i:int) -&gt; (getbv x @ i) = 1),m">
      <goal name="VC non_null_product_bitvec_inv.4.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="assert" proved="true" arg1="(((fun (i:int) -&gt; (getbv x @ i) = 1) @ m) = True)">
       <goal name="VC non_null_product_bitvec_inv.4.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="VC non_null_product_bitvec_inv.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H4">
         <goal name="VC non_null_product_bitvec_inv.4.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.54"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC non_null_product_bitvec_inv.4.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
        <goal name="VC non_null_product_bitvec_inv.4.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="h">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec_inv.4.1" expl="rewrite premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC non_null_product_bitvec_inv.4.1.0" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="H2">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_product_bitvec_inv.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_null_product_bitvec_inv.5.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b. b =0 -&gt; a*b=0)">
    <goal name="VC non_null_product_bitvec_inv.5.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC non_null_product_bitvec_inv.5.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.13" steps="118"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_product_bitvec_inv.5.0.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC non_null_product_bitvec_inv.5.0.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="h">
      <goal name="VC non_null_product_bitvec_inv.5.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC null_product_bitvec_rev" expl="VC for null_product_bitvec_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC null_product_bitvec_rev.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_null_product_bitvec_rev" expl="VC for non_null_product_bitvec_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_null_product_bitvec_rev.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC null_product_bitvec_inv_rev" expl="VC for null_product_bitvec_inv_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC null_product_bitvec_inv_rev.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="99"/></proof>
  </goal>
  <goal name="VC null_product_bitvec_inv_rev.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="99"/></proof>
  </goal>
  <goal name="VC null_product_bitvec_inv_rev.2" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H2">
   <goal name="VC null_product_bitvec_inv_rev.2.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC null_product_bitvec_inv_rev.2.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.22" steps="101"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC null_product_bitvec_inv_rev.2.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC null_product_bitvec_inv_rev.2.1.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="((getbv x @ i) &lt;&gt; 0)">
     <goal name="VC null_product_bitvec_inv_rev.2.1.0.0" expl="true case (postcondition)" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H2">
      <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="(i &lt;k-1)">
       <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="4"><result status="valid" time="0.19" steps="107"/></proof>
       </goal>
       <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(1 - (getbv x @ (k - 1)))" arg2="0" arg3="in" arg4="H2">
        <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="((ind_iproduct (fun (i1:int) -&gt; 1 - (getbv x @ i1)) 0 (k - 1) * 0))" arg2="0" arg3="in" arg4="H2">
         <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="instantiate" proved="true" arg1="ind_iproduct_trans" arg2="(fun (i1:int) -&gt; 1 - (getbv x @ i1)),0,k,n">
          <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i1:int) -&gt; 1 - (getbv x @ i1)) 0 k
     * ind_iproduct (fun (i1:int) -&gt; 1 - (getbv x @ i1)) k n)" arg2="0" arg3="in" arg4="Hinst">
           <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
           <proof prover="3"><result status="valid" time="1.02"/></proof>
           </goal>
           <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.08"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="0.22" steps="105"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC null_product_bitvec_inv_rev.2.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="0.44"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC null_product_bitvec_inv_rev.2.1.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="4"><result status="valid" time="0.21" steps="103"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC null_product_bitvec_inv_rev.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="95"/></proof>
  </goal>
  <goal name="VC null_product_bitvec_inv_rev.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inter" expl="VC for inter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inter.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.28" steps="99"/></proof>
  </goal>
  <goal name="VC inter.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="100"/></proof>
  </goal>
  <goal name="VC inter.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19" steps="100"/></proof>
  </goal>
  <goal name="VC inter.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.93"/></proof>
  </goal>
  <goal name="VC inter.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20" steps="102"/></proof>
  </goal>
  <goal name="VC inter.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.25" steps="109"/></proof>
  </goal>
  <goal name="VC inter.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC inter.6.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.16" steps="101"/></proof>
   </goal>
   <goal name="VC inter.6.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC inter.6.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC inter.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC inter.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_one">
       <goal name="VC inter.6.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="2.00"/></proof>
       </goal>
       <goal name="VC inter.6.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.49"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC inter.6.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.09" steps="103"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_null_product_bitvec_inv_rev" expl="VC for non_null_product_bitvec_inv_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_null_product_bitvec_inv_rev.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(forall i:int. 0 &lt;= i /\ i &lt; n -&gt; (getbv x @ i) = 0)">
   <goal name="VC non_null_product_bitvec_inv_rev.0.0" expl="true case (postcondition)" proved="true">
   <transf name="instantiate" proved="true" arg1="null_product_bitvec_inv" arg2="x,n">
    <goal name="VC non_null_product_bitvec_inv_rev.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.91"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_product_bitvec_inv_rev.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="4"><result status="valid" time="0.24" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_flength" expl="VC for set_flength" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_flength.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_flength.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bvlength_def">
    <goal name="VC set_flength.0.0.0" expl="VC for set_flength" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_flength.0.0.0.0" expl="VC for set_flength" proved="true">
     <proof prover="4"><result status="valid" time="0.24" steps="98"/></proof>
     </goal>
     <goal name="VC set_flength.0.0.0.1" expl="VC for set_flength" proved="true">
     <proof prover="4"><result status="valid" time="0.25" steps="98"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_bvlength" expl="VC for get_bvlength" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_bvlength.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_bvlength.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.32"/></proof>
   </goal>
   <goal name="VC get_bvlength.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_bv_to" expl="VC for set_bv_to" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_bv_to.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.80"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_in_range_val" expl="VC for set_in_range_val" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_in_range_val.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_in_range_val.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.23" steps="95"/></proof>
   </goal>
   <goal name="VC set_in_range_val.0.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.24" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bvlengthm" expl="VC for bvlengthm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bvlengthm.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC binary_bv" expl="VC for binary_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC binary_bv.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="95"/></proof>
  </goal>
  <goal name="VC binary_bv.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC binary_bv.1.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.16" steps="95"/></proof>
   </goal>
   <goal name="VC binary_bv.1.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.17" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_bv" expl="VC for set_equal_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_bv.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_equal_bv" expl="VC for get_equal_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_equal_bv.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="91"/></proof>
  </goal>
  <goal name="VC get_equal_bv.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.14" steps="96"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_bv" expl="VC for make_bv" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="VC make_bv.0" expl="VC for make_bv" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC make_bv.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.21" steps="91"/></proof>
   </goal>
   <goal name="VC make_bv.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.24" steps="96"/></proof>
   </goal>
   <goal name="VC make_bv.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="91"/></proof>
   </goal>
   <goal name="VC make_bv.0.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.21" steps="93"/></proof>
   </goal>
   <goal name="VC make_bv.0.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.15" steps="99"/></proof>
   </goal>
   <goal name="VC make_bv.0.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.18" steps="96"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="VC make_bv.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="91"/></proof>
  </goal>
  <goal name="VC make_bv.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC make_bv.1.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC make_bv.1.0.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.20" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC make_bv.1.1" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC make_bv.1.1.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.15" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC make_bv.2" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC make_bv.2.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC make_bv.2.0.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.14" steps="91"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC make_bv.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="93"/></proof>
  </goal>
  <goal name="VC make_bv.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19" steps="99"/></proof>
  </goal>
  <goal name="VC make_bv.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="96"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_bv_m" expl="VC for make_bv_m" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC make_bv_m.0" expl="VC for make_bv_m" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC make_bv_m.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="91"/></proof>
   </goal>
   <goal name="VC make_bv_m.0.1" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC make_bv_m.0.1.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.90"/></proof>
    </goal>
    <goal name="VC make_bv_m.0.1.1" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.78"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC make_bv_m.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.11" steps="91"/></proof>
   </goal>
   <goal name="VC make_bv_m.0.3" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC make_bv_m.0.3.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="make_bv_spec3">
     <goal name="VC make_bv_m.0.3.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC make_bv_m.0.3.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="1.19"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.3.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="1.03"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC make_bv_m.0.3.0.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.10" steps="93"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC make_bv_m.0.4" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.84"/></proof>
   </goal>
   <goal name="VC make_bv_m.0.5" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(k &lt;0)">
    <goal name="VC make_bv_m.0.5.0" expl="true case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC make_bv_m.0.5.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_spec1">
      <goal name="VC make_bv_m.0.5.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="4"><result status="valid" time="0.16" steps="99"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.5.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_bv_m.0.5.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.13" steps="99"/></proof>
       </goal>
       <goal name="VC make_bv_m.0.5.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.11" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC make_bv_m.0.5.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.09" steps="99"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.5.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC make_bv_m.0.5.1" expl="false case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC make_bv_m.0.5.1.0" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_spec2">
      <goal name="VC make_bv_m.0.5.1.0.0" expl="false case (postcondition)" proved="true">
      <proof prover="4"><result status="valid" time="0.28" steps="102"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.5.1.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_bv_m.0.5.1.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.15"/></proof>
       </goal>
       <goal name="VC make_bv_m.0.5.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.40"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC make_bv_m.0.5.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.16" steps="100"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.5.1.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_bv_m.0.5.1.0.3.0" proved="true">
       <proof prover="4"><result status="valid" time="0.10" steps="100"/></proof>
       </goal>
       <goal name="VC make_bv_m.0.5.1.0.3.1" proved="true">
       <proof prover="4"><result status="valid" time="0.23" steps="100"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC make_bv_m.0.6" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC make_bv_m.0.6.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(k &lt; 0)">
     <goal name="VC make_bv_m.0.6.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_spec1">
      <goal name="VC make_bv_m.0.6.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="4"><result status="valid" time="0.12" steps="97"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.6.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_bv_m.0.6.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.05"/></proof>
       </goal>
       <goal name="VC make_bv_m.0.6.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.21"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC make_bv_m.0.6.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.19" steps="97"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.6.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.13" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC make_bv_m.0.6.0.1" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_spec">
      <goal name="VC make_bv_m.0.6.0.1.0" expl="false case (postcondition)" proved="true">
      <proof prover="4"><result status="valid" time="0.12" steps="97"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.6.0.1.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_bv_m.0.6.0.1.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.35"/></proof>
       </goal>
       <goal name="VC make_bv_m.0.6.0.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.05"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC make_bv_m.0.6.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.13" steps="97"/></proof>
      </goal>
      <goal name="VC make_bv_m.0.6.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.14" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bitvec_null" expl="VC for bitvec_null" proved="true">
 <transf name="compute_specified" proved="true" >
 </transf>
 </goal>
 <goal name="VC assert_make_bv_no_bound" expl="VC for assert_make_bv_no_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make_bv_no_bound.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC assert_make_bv_no_bound.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="make_bv_spec">
    <goal name="VC assert_make_bv_no_bound.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC assert_make_bv_no_bound.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.17" steps="97"/></proof>
     </goal>
     <goal name="VC assert_make_bv_no_bound.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.14" steps="97"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC assert_make_bv_no_bound.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.17" steps="95"/></proof>
    </goal>
    <goal name="VC assert_make_bv_no_bound.0.0.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.14" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_bv_length" expl="VC for make_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_bv_length.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC make_bv_length.0.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.11"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_make_bv" expl="VC for assert_make_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make_bv.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC assert_make_bv.0.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.19"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_make_m" expl="VC for assert_make_m" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make_m.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_bv_eq" expl="VC for make_bv_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_bv_eq.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="VC make_bv_eq.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="make_bv_length">
    <goal name="VC make_bv_eq.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="VC make_bv_eq.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.12" steps="95"/></proof>
     </goal>
     <goal name="VC make_bv_eq.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC make_bv_eq.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.77"/></proof>
      </goal>
      <goal name="VC make_bv_eq.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.80"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC make_bv_eq.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.10" steps="95"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC make_bv_eq.0.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC make_bv_eq.0.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.23" steps="101"/></proof>
     </goal>
     <goal name="VC make_bv_eq.0.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.16" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC make_bv_eq.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.12" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC make_bv_eq.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC make_bv_eq.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_bv">
     <goal name="VC make_bv_eq.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv">
      <goal name="VC make_bv_eq.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.25" steps="104"/></proof>
      </goal>
      <goal name="VC make_bv_eq.0.1.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_bv_eq.0.1.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.70"/></proof>
       </goal>
       <goal name="VC make_bv_eq.0.1.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.69"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC make_bv_eq.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC make_bv_eq.0.1.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC make_bv_eq.0.1.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.24" steps="105"/></proof>
      </goal>
      <goal name="VC make_bv_eq.0.1.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.24" steps="105"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC make_bv_eq.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.13" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_make_bv_b" expl="VC for assert_make_bv_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make_bv_b.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_make_m_b" expl="VC for assert_make_m_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make_m_b.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="98"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_m_bv_length" expl="VC for make_m_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_m_bv_length.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="make_bv_m_def">
   <goal name="VC make_m_bv_length.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_bvlength">
    <goal name="VC make_m_bv_length.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC make_m_bv_length.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv">
      <goal name="VC make_m_bv_length.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.25"/></proof>
      </goal>
      <goal name="VC make_m_bv_length.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_m_bv_length.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.68"/></proof>
       </goal>
       <goal name="VC make_m_bv_length.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.69"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC make_m_bv_length.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC make_m_bv_length.0.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv">
      <goal name="VC make_m_bv_length.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.09"/></proof>
      </goal>
      <goal name="VC make_m_bv_length.0.0.0.1.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC make_m_bv_length.0.0.0.1.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.84"/></proof>
       </goal>
       <goal name="VC make_m_bv_length.0.0.0.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.93"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC make_m_bv_length.0.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC make_m_bv_length.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_m_length" expl="VC for make_m_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_m_length.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.25" steps="95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_bv_make" expl="VC for set_equal_bv_make" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="VC set_equal_bv_make.0" expl="VC for set_equal_bv_make" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_equal_bv_make.0.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.82"/></proof>
   </goal>
   <goal name="VC set_equal_bv_make.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="93"/></proof>
   </goal>
   <goal name="VC set_equal_bv_make.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.25" steps="100"/></proof>
   </goal>
   <goal name="VC set_equal_bv_make.0.3" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.20" steps="95"/></proof>
   </goal>
   <goal name="VC set_equal_bv_make.0.4" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="97"/></proof>
   </goal>
   <goal name="VC set_equal_bv_make.0.5" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.33"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_bv_make.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_equal_bv_make.0.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.72"/></proof>
   </goal>
   <goal name="VC set_equal_bv_make.0.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_equal_bv_make.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="93"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_equal_bv_make.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.25" steps="101"/></proof>
   </goal>
   <goal name="VC set_equal_bv_make.2.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.28" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_equal_bv_make.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.22" steps="95"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.21" steps="97"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.11"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.21" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_bv_make_" expl="VC for set_equal_bv_make_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_bv_make_.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.55"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make_.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make_.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make_.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make_.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make_.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="2.32"/></proof>
  </goal>
  <goal name="VC set_equal_bv_make_.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_bv_m_make" expl="VC for set_equal_bv_m_make" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="VC set_equal_bv_m_make.0" expl="VC for set_equal_bv_m_make" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_equal_bv_m_make.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.28" steps="93"/></proof>
   </goal>
   <goal name="VC set_equal_bv_m_make.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.24" steps="95"/></proof>
   </goal>
   <goal name="VC set_equal_bv_m_make.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.27" steps="97"/></proof>
   </goal>
   <goal name="VC set_equal_bv_m_make.0.3" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="3.10"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_bv_m_make.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.26" steps="93"/></proof>
  </goal>
  <goal name="VC set_equal_bv_m_make.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.26" steps="95"/></proof>
  </goal>
  <goal name="VC set_equal_bv_m_make.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.28" steps="97"/></proof>
  </goal>
  <goal name="VC set_equal_bv_m_make.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.06"/></proof>
  </goal>
  <goal name="VC set_equal_bv_m_make.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.26" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_bv_itself" expl="VC for make_bv_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_bv_itself.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="VC make_bv_itself.0.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="1.50"/></proof>
   </goal>
   <goal name="VC make_bv_itself.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC make_bv_itself.0.1.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="2.75"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC head" expl="VC for head" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC head.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC head.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.41" steps="97"/></proof>
   </goal>
   <goal name="VC head.0.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.32" steps="97"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC makes_bv" expl="VC for makes_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC makes_bv.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC makes_bv.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC makes_bv.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.91"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC makes_bv.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.32" steps="93"/></proof>
  </goal>
  <goal name="VC makes_bv.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.38" steps="97"/></proof>
  </goal>
  <goal name="VC makes_bv.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.83"/></proof>
  </goal>
  <goal name="VC makes_bv.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC makes_bv.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC makes_bv.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv">
     <goal name="VC makes_bv.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="2.66"/></proof>
     </goal>
     <goal name="VC makes_bv.4.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC makes_bv.4.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_bv">
       <goal name="VC makes_bv.4.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.97"/></proof>
       </goal>
       <goal name="VC makes_bv.4.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC makes_bv.4.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.61"/></proof>
        </goal>
        <goal name="VC makes_bv.4.0.0.1.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.65"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC makes_bv.4.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.31" steps="104"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC makes_bv.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_makes_bv_c" expl="VC for assert_makes_bv_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_makes_bv_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_makes_bv_b" expl="VC for assert_makes_bv_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_makes_bv_b.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_makes_bv" expl="VC for assert_makes_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_makes_bv.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC makes_bv_length" expl="VC for makes_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC makes_bv_length.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.34" steps="95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tail" expl="VC for tail" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC tail.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC tail.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="3.73"/></proof>
   </goal>
   <goal name="VC tail.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="7.55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC tail.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20" steps="93"/></proof>
  </goal>
  <goal name="VC tail.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.18" steps="97"/></proof>
  </goal>
  <goal name="VC tail.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_l" expl="VC for concat_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_l.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_l.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="5.69"/></proof>
   </goal>
   <goal name="VC concat_l.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="4.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_l.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.13" steps="101"/></proof>
  </goal>
  <goal name="VC concat_l.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="103"/></proof>
  </goal>
  <goal name="VC concat_l.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.26"/></proof>
  </goal>
  <goal name="VC concat_l.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_l_value" expl="VC for concat_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_l_value.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC concat_l_value.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="concat_l_def">
    <goal name="VC concat_l_value.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_bv">
     <goal name="VC concat_l_value.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC concat_l_value.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.52"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC concat_l_value.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC concat_l_value.0.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.13"/></proof>
      </goal>
      <goal name="VC concat_l_value.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.68"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC concat_l_value.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.19" steps="97"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC concat_l_value.0.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC concat_l_value.0.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.13" steps="95"/></proof>
     </goal>
     <goal name="VC concat_l_value.0.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.21" steps="95"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_l_value_b" expl="VC for concat_l_value_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_l_value_b.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_ht" expl="VC for concat_ht" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC concat_ht.0" expl="VC for concat_ht" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_ht.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="93"/></proof>
   </goal>
   <goal name="VC concat_ht.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.14" steps="97"/></proof>
   </goal>
   <goal name="VC concat_ht.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC concat_ht.0.2.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.16" steps="99"/></proof>
    </goal>
    <goal name="VC concat_ht.0.2.1" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_ht.0.3" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.21" steps="103"/></proof>
   </goal>
   <goal name="VC concat_ht.0.4" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="concat_l_def">
    <goal name="VC concat_ht.0.4.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_bv">
     <goal name="VC concat_ht.0.4.0.0" expl="precondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC concat_ht.0.4.0.0.0" expl="precondition" proved="true">
      <transf name="case" proved="true" arg1="(0 &lt;= i /\ i &lt; (length (tail bv) + 1))">
       <goal name="VC concat_ht.0.4.0.0.0.0" expl="true case (precondition)" proved="true">
       <transf name="replace" proved="true" arg1="(if 0 &lt;= i /\ i &lt; (length (tail bv) + 1)
     then (fun (k:int) -&gt; if k = 0 then head bv else getbv (tail bv) (k - 1))
          @ i
     else 0)
" arg2="((fun (k:int) -&gt; if k = 0 then head bv else getbv (tail bv) (k - 1))
          @ i)">
        <goal name="VC concat_ht.0.4.0.0.0.0.0" expl="true case (precondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC concat_ht.0.4.0.0.0.0.0.0" expl="true case (precondition)" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC concat_ht.0.4.0.0.0.0.0.0.0" expl="VC for concat_ht" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC concat_ht.0.4.0.0.0.0.0.0.0.0" expl="true case (precondition)" proved="true">
           <proof prover="4"><result status="valid" time="0.20" steps="113"/></proof>
           </goal>
           <goal name="VC concat_ht.0.4.0.0.0.0.0.0.0.1" expl="true case (precondition)" proved="true">
           <proof prover="3"><result status="valid" time="1.85"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC concat_ht.0.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.75"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC concat_ht.0.4.0.0.0.1" expl="false case (precondition)" proved="true">
       <proof prover="4"><result status="valid" time="0.18" steps="108"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC concat_ht.0.4.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC concat_ht.0.4.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="4.89"/></proof>
      </goal>
      <goal name="VC concat_ht.0.4.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="4.78"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC concat_ht.0.4.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC concat_ht.0.4.0.2.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC concat_ht.0.4.0.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.09" steps="108"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC concat_ht.0.4.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC concat_ht.0.4.1.0" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.11" steps="108"/></proof>
     </goal>
     <goal name="VC concat_ht.0.4.1.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.25" steps="108"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_ht.0.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.23" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_ht_union" expl="VC for concat_ht_union" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_ht_union.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.12" steps="93"/></proof>
  </goal>
  <goal name="VC concat_ht_union.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int" expl="VC for bv_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int.0" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="ind_isum_eq">
   <goal name="VC bv_to_int.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC bv_to_int.0.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bv_to_int.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.25" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.24" steps="97"/></proof>
  </goal>
  <goal name="VC bv_to_int.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.65"/></proof>
  </goal>
  <goal name="VC bv_to_int.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC bv_to_int.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_pos">
    <goal name="VC bv_to_int.3.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bv_to_int.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.16" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int.3.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bv_to_int.3.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC bv_to_int.3.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.50"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_eq" expl="VC for bv_to_int_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_eq.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="93"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_sum" expl="VC for bv_to_int_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_sum.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC bv_to_int_sum.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="bv_to_int_spec1">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_sum_inv" expl="VC for bv_to_int_sum_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_sum_inv.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="VC bv_to_int_sum_inv.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_rev">
    <goal name="VC bv_to_int_sum_inv.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bv_to_int_sum_inv.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="1.18"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_sum_opp" expl="VC for bv_to_int_sum_opp" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="VC bv_to_int_sum_opp.0" expl="VC for bv_to_int_sum_opp" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_to_int_sum_opp.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.15" steps="97"/></proof>
   </goal>
   <goal name="VC bv_to_int_sum_opp.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.19" steps="95"/></proof>
   </goal>
   <goal name="VC bv_to_int_sum_opp.0.2" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC bv_to_int_sum_opp.0.2.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_empty">
     <goal name="VC bv_to_int_sum_opp.0.2.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
      <goal name="VC bv_to_int_sum_opp.0.2.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ind_isum_empty">
       <goal name="VC bv_to_int_sum_opp.0.2.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="4"><result status="valid" time="0.15" steps="93"/></proof>
       </goal>
       <goal name="VC bv_to_int_sum_opp.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.18" steps="93"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_sum_opp.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.16" steps="93"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_sum_opp.0.2.1" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_isum
    (fun (k:int) -&gt; (- (getbv bv @ k)) * power 2 ((length bv - 1) - k)) 0
    (length bv))" arg2="(ind_isum
  (fun (i:int) -&gt;
    (- 1)
    * (if 0 &lt;= i /\ i &lt; length bv
       then (getbv bv @ i) * power 2 ((length bv - 1) - i) else 0))
  0 (length bv))">
     <goal name="VC bv_to_int_sum_opp.0.2.1.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(- bv_to_int bv)" arg2="((-1) * bv_to_int bv)">
      <goal name="VC bv_to_int_sum_opp.0.2.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC bv_to_int_sum_opp.0.2.1.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="mult_eq">
        <goal name="VC bv_to_int_sum_opp.0.2.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.23" steps="93"/></proof>
        </goal>
        <goal name="VC bv_to_int_sum_opp.0.2.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
         <goal name="VC bv_to_int_sum_opp.0.2.1.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="VC bv_to_int_sum_opp.0.2.1.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC bv_to_int_sum_opp.0.2.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC bv_to_int_sum_opp.0.2.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.11" steps="97"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_sum_opp.0.2.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.21" steps="93"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_sum_opp.0.2.1.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="VC bv_to_int_sum_opp.0.2.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bv_to_int_sum_opp.0.2.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.11" steps="97"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_onebit" expl="VC for bv_to_int_onebit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_onebit.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="VC bv_to_int_onebit.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_one">
    <goal name="VC bv_to_int_onebit.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bv_to_int_onebit.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="0.26" steps="95"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_onebit.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.13" steps="93"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bv_rev" expl="VC for ind_isum_bv_rev" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC ind_isum_bv_rev.0" expl="VC for ind_isum_bv_rev" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_bv_rev.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.60"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_rev.0.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.60"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_rev.0.2" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(length bv -1 - e&#39;)
">
    <goal name="VC ind_isum_bv_rev.0.2.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_isum_bv_rev.0.2.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.56"/></proof>
     </goal>
     <goal name="VC ind_isum_bv_rev.0.2.0.1" proved="true">
     <proof prover="4"><result status="valid" time="0.14" steps="102"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_bv_rev.0.3" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="103"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_rev.0.4" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="99"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_rev.0.5" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; getbv bv l * power 2 ((length bv - 1) - l)) i
  (length bv))" arg2="(ind_isum
  (fun (l:int) -&gt;
    if 0 &lt;= l /\ l &lt; length bv
    then getbv bv l * power 2 ((length bv - 1) - l) else 0)
  i (length bv))">
    <goal name="VC ind_isum_bv_rev.0.5.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC ind_isum_bv_rev.0.5.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq">
      <goal name="VC ind_isum_bv_rev.0.5.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ind_isum_bv_rev.0.5.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ind_isum_bv_rev.0.5.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.11" steps="105"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_bv_rev.0.5.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq">
     <goal name="VC ind_isum_bv_rev.0.5.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_isum_bv_rev.0.5.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ind_isum_bv_rev.0.5.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.21" steps="105"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bin_rev" expl="VC for ind_isum_bin_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_bin_rev.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ind_isum_bv_rev" arg2="(make_bv f n)">
   <goal name="VC ind_isum_bin_rev.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (f @ l) * power 2 ((n - 1) - l)) i n)" arg2="( ind_isum
   (fun (l:int) -&gt;
     (getbv (make_bv f n) @ l) * power 2 ((length (make_bv f n) - 1) - l))
   i (length (make_bv f n)))">
    <goal name="VC ind_isum_bin_rev.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC ind_isum_bin_rev.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="VC ind_isum_bin_rev.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv">
         <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="0.59"/></proof>
             </goal>
             <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="0.33"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.12" steps="105"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="6.85"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.45"/></proof>
          </goal>
          <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.29"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_isum_bin_rev.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.14" steps="101"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_isum_bin_rev.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
      </goal>
      <goal name="VC ind_isum_bin_rev.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="8.10"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_isum_bin_rev.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_isum_bin_rev.0.0.0.1.0" proved="true">
      <proof prover="4"><result status="valid" time="0.13" steps="97"/></proof>
      </goal>
      <goal name="VC ind_isum_bin_rev.0.0.0.1.1" proved="true">
      <proof prover="0"><result status="valid" time="6.80"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_bin_rev.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
     <goal name="VC ind_isum_bin_rev.0.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_isum_bin_rev.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv">
         <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.13" steps="102"/></proof>
           </goal>
           <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.14" steps="101"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.43"/></proof>
          </goal>
          <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.47"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.11" steps="101"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.31"/></proof>
         </goal>
         <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.42"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_isum_bin_rev.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.11" steps="101"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_isum_bin_rev.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.20" steps="97"/></proof>
     </goal>
     <goal name="VC ind_isum_bin_rev.0.0.1.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="8.09"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bin_rev_z" expl="VC for ind_isum_bin_rev_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_bin_rev_z.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(n=0)">
   <goal name="VC ind_isum_bin_rev_z.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC ind_isum_bin_rev_z.0.1" expl="false case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_bin_rev">
    <goal name="VC ind_isum_bin_rev_z.0.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.82"/></proof>
    </goal>
    <goal name="VC ind_isum_bin_rev_z.0.1.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_isum_bin_rev_z.0.1.1.0" proved="true">
     <proof prover="4"><result status="valid" time="0.16" steps="97"/></proof>
     </goal>
     <goal name="VC ind_isum_bin_rev_z.0.1.1.1" proved="true">
     <proof prover="4"><result status="valid" time="0.17" steps="97"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_bin_rev_z.0.1.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_sum_rev" expl="VC for bv_to_int_sum_rev" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="VC bv_to_int_sum_rev.0" expl="VC for bv_to_int_sum_rev" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_to_int_sum_rev.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.17" steps="95"/></proof>
   </goal>
   <goal name="VC bv_to_int_sum_rev.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.61"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_sum_rev.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_to_int_sum_rev.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.14" steps="93"/></proof>
   </goal>
   <goal name="VC bv_to_int_sum_rev.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.13" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_sum_rev.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC bv_to_int_sum_rev.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC bv_to_int_sum_rev.1.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.71"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bv_bound_growing" expl="VC for ind_isum_bv_bound_growing" proved="true">
 <transf name="compute_specified" proved="true" >
  <goal name="VC ind_isum_bv_bound_growing.0" expl="VC for ind_isum_bv_bound_growing" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_bv_bound_growing.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="95"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound_growing.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.11" steps="101"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound_growing.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.11" steps="101"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound_growing.0.3" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.26" steps="97"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound_growing.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound_growing.0.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.58"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bv_bound" expl="VC for ind_isum_bv_bound" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC ind_isum_bv_bound.0" expl="VC for ind_isum_bv_bound" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_bv_bound.0.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ind_isum_bv_bound.0.0.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.18" steps="95"/></proof>
    </goal>
    <goal name="VC ind_isum_bv_bound.0.0.1" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="99"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.3" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.4" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC ind_isum_bv_bound.0.4.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.51"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.5" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.14" steps="99"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.6" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.12" steps="101"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.7" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.20" steps="103"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.8" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.13" steps="103"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H1">
   </transf>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.10" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="4.15"/></proof>
   </goal>
   <goal name="VC ind_isum_bv_bound.0.11" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H3">
    <goal name="VC ind_isum_bv_bound.0.11.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="4.29"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_bin_bound" expl="VC for ind_isum_bin_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_bin_bound.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_bin_bound.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC ind_isum_bin_bound.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_bin_bound.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
  </goal>
  <goal name="VC ind_isum_bin_bound.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_isum_bin_bound.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.11" steps="99"/></proof>
   </goal>
   <goal name="VC ind_isum_bin_bound.2.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.26" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_isum_bin_bound.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_isum (fun (l:int) -&gt; (f @ l) * power 2 ((n - 1) - l)) i n)" arg2="(ind_isum
  (fun (l:int) -&gt;
    (getbv (make_bv f n) @ l) * power 2 ((length (make_bv f n) - 1) - l))
  i (length (make_bv f n)))">
   <goal name="VC ind_isum_bin_bound.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
    <goal name="VC ind_isum_bin_bound.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="VC ind_isum_bin_bound.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="1.19"/></proof>
     </goal>
     <goal name="VC ind_isum_bin_bound.3.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_isum_bin_bound.3.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.51"/></proof>
      </goal>
      <goal name="VC ind_isum_bin_bound.3.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.45"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_isum_bin_bound.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.19" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_bin_bound.3.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_isum_bin_bound.3.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.56"/></proof>
     </goal>
     <goal name="VC ind_isum_bin_bound.3.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.72"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_bin_bound.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.28" steps="101"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_bin_bound.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
    <goal name="VC ind_isum_bin_bound.3.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_isum_bin_bound.3.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ind_isum_bin_bound.3.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.39" steps="107"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_bin_bound.3.1.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.25" steps="101"/></proof>
    </goal>
    <goal name="VC ind_isum_bin_bound.3.1.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.21" steps="101"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_bound" expl="VC for bv_to_int_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_bound.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_to_int_bound.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.21" steps="93"/></proof>
   </goal>
   <goal name="VC bv_to_int_bound.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_bound.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="VC bv_to_int_bound.1.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.67"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bit_vector_decomp">
 <goal name="VC ind_isum_mod_div" expl="VC for ind_isum_mod_div">
 <transf name="eliminate_let" >
  <goal name="VC ind_isum_mod_div.0" expl="VC for ind_isum_mod_div">
  <transf name="split_vc" >
   <goal name="VC ind_isum_mod_div.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="131"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="131"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.2" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="131"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="127"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.5" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC ind_isum_mod_div.0.5.0" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.52"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.6" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="133"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.7" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC ind_isum_mod_div.0.7.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.8" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC ind_isum_mod_div.0.8.0" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.62"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.9" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.10" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="131"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.11" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC ind_isum_mod_div.0.11.0" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.12" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="137"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.13" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC ind_isum_mod_div.0.13.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="133"/></proof>
    </goal>
    <goal name="VC ind_isum_mod_div.0.13.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.14" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="135"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.15" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="139"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.16" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.17" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC ind_isum_mod_div.0.17.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="137"/></proof>
    </goal>
    <goal name="VC ind_isum_mod_div.0.17.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.18" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="139"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.19" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="141"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_div.0.20" expl="precondition">
   <transf name="replace" arg1="( ind_isum
  (fun (k:int) -&gt;
    if 1 &lt;= k /\ k &lt; (length bv + 1)
    then getbv bv k * power 2 (length bv - k) else 0)
  1 (length bv + 1))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 1 &lt;= k /\ k &lt;= length bv then getbv bv k * power 2 (length bv - k)
    else 0)
  1 (length bv + 1))">
    <goal name="VC ind_isum_mod_div.0.20.0" expl="precondition">
    <transf name="rewrite" arg1="H3">
     <goal name="VC ind_isum_mod_div.0.20.0.0" expl="precondition">
     <transf name="apply" arg1="add_eq">
      <goal name="VC ind_isum_mod_div.0.20.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="ind_isum_scal_rev_right">
       <goal name="VC ind_isum_mod_div.0.20.0.0.0.0" expl="apply premises">
       <transf name="apply" arg1="ind_isum_eq">
        <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="eliminate_if" >
           <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0">
           <transf name="split_vc" >
            <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="mul_assoc">
             <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="apply" arg1="mult_eq">
              <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="147"/></proof>
              </goal>
              <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="149"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0.1" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="147"/></proof>
            </goal>
            <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0.2" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="145"/></proof>
            </goal>
            <goal name="VC ind_isum_mod_div.0.20.0.0.0.0.0.0.0.0.3" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="145"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_isum_mod_div.0.20.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="141"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_isum_mod_div.0.20.0.0.1" expl="apply premises">
      <proof prover="3" obsolete="true"><result status="valid" time="5.32"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_mod_div.0.20.1" expl="equality hypothesis">
    <proof prover="3" obsolete="true"><result status="valid" time="4.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.21" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC ind_isum_mod_div.0.21.0" expl="precondition">
    <transf name="apply" arg1="ind_isum_pos">
     <goal name="VC ind_isum_mod_div.0.21.0.0" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="143"/></proof>
     </goal>
     <goal name="VC ind_isum_mod_div.0.21.0.1" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC ind_isum_mod_div.0.21.0.1.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC ind_isum_mod_div.0.21.0.1.0.0" expl="apply premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_mod_div.0.21.1" expl="precondition">
    <transf name="replace" arg1="(ind_isum
  (fun (k:int) -&gt;
    if i &lt;= k /\ k &lt; length bv
    then (getbv bv @ k) * power 2 ((length bv - 1) - k) else 0)
  i (length bv))" arg2="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) i
  (length bv))">
     <goal name="VC ind_isum_mod_div.0.21.1.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="H2">
     </transf>
     </goal>
     <goal name="VC ind_isum_mod_div.0.21.1.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC ind_isum_mod_div.0.21.1.1.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC ind_isum_mod_div.0.21.1.1.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="147"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.22" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="VC ind_isum_mod_div.0.22.0" expl="postcondition">
    <transf name="rewrite" arg1="bound_eq_rev">
     <goal name="VC ind_isum_mod_div.0.22.0.0" expl="postcondition">
     <proof prover="3" obsolete="true"><result status="valid" time="1.51"/></proof>
     </goal>
     <goal name="VC ind_isum_mod_div.0.22.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC ind_isum_mod_div.0.22.0.1.0" expl="rewrite premises">
      <transf name="apply" arg1="ind_isum_pos">
       <goal name="VC ind_isum_mod_div.0.22.0.1.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="127"/></proof>
       </goal>
       <goal name="VC ind_isum_mod_div.0.22.0.1.0.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC ind_isum_mod_div.0.22.0.1.0.1.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC ind_isum_mod_div.0.22.0.1.0.1.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_isum_mod_div.0.22.0.1.1" expl="rewrite premises">
      <transf name="instantiate" arg1="ind_isum_bv_bound" arg2="bv,i">
       <goal name="VC ind_isum_mod_div.0.22.0.1.1.0" expl="rewrite premises">
       <proof prover="3" obsolete="true"><result status="valid" time="1.72"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_isum_mod_div.0.22.1" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC ind_isum_mod_div.0.22.1.0" expl="postcondition">
     <transf name="replace" arg1="(ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 ((length bv - 1) - k))
    i (length bv))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if i &lt;= k /\ k &lt; length bv
    then (getbv bv @ k) * power 2 ((length bv - 1) - k) else 0)
  i (length bv))">
      <goal name="VC ind_isum_mod_div.0.22.1.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H">
       <goal name="VC ind_isum_mod_div.0.22.1.0.0.0" expl="postcondition">
       <transf name="replace" arg1="(ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 ((length bv - 1) - k)) 0
   (length bv))" arg2="(ind_isum
     (fun (k:int) -&gt;
       if 0 &lt;= k /\ k &lt; length bv
       then (getbv bv @ k) * power 2 ((length bv - 1) - k) else 0)
     0 (length bv))">
        <goal name="VC ind_isum_mod_div.0.22.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="mod_eq">
         <goal name="VC ind_isum_mod_div.0.22.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="VC ind_isum_mod_div.0.22.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_isum_mod_div.0.22.1.0.0.0.1" expl="equality hypothesis">
        <transf name="apply" arg1="ind_isum_eq">
         <goal name="VC ind_isum_mod_div.0.22.1.0.0.0.1.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC ind_isum_mod_div.0.22.1.0.0.0.1.0.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC ind_isum_mod_div.0.22.1.0.0.0.1.0.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="145"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_isum_mod_div.0.22.1.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="ind_isum_eq">
       <goal name="VC ind_isum_mod_div.0.22.1.0.1.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC ind_isum_mod_div.0.22.1.0.1.0.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC ind_isum_mod_div.0.22.1.0.1.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_div.0.23" expl="postcondition">
   <transf name="destruct" arg1="H1">
    <goal name="VC ind_isum_mod_div.0.23.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="4.60"/></proof>
    </goal>
    <goal name="VC ind_isum_mod_div.0.23.1" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC ind_isum_mod_div.0.23.1.0" expl="postcondition">
     <transf name="replace" arg1="(ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 ((i - 1) - k)) 0 i)" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt; i then (getbv bv @ k) * power 2 ((i - 1) - k) else 0)
  0 i)">
      <goal name="VC ind_isum_mod_div.0.23.1.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H2">
       <goal name="VC ind_isum_mod_div.0.23.1.0.0.0" expl="postcondition">
       <transf name="apply" arg1="e_div_eq">
        <goal name="VC ind_isum_mod_div.0.23.1.0.0.0.0" expl="apply premises">
        <transf name="apply" arg1="ind_isum_eq">
         <goal name="VC ind_isum_mod_div.0.23.1.0.0.0.0.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC ind_isum_mod_div.0.23.1.0.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="1.09"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_isum_mod_div.0.23.1.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="ind_isum_eq">
       <goal name="VC ind_isum_mod_div.0.23.1.0.1.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC ind_isum_mod_div.0.23.1.0.1.0.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC ind_isum_mod_div.0.23.1.0.1.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_ind_isum" expl="VC for mod_ind_isum">
 <transf name="split_vc" >
  <goal name="VC mod_ind_isum.0" expl="postcondition">
  <transf name="instantiate" arg1="unicity_div_mod" arg2="(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l),(power 2 i),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k-i)) 0 (l-i)),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) (l - i) l)">
   <goal name="VC mod_ind_isum.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC mod_ind_isum.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC mod_ind_isum.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC mod_ind_isum.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="129"/></proof>
     </goal>
     <goal name="VC mod_ind_isum.0.0.0.2" expl="rewrite premises">
     <transf name="instantiate" arg1="ind_isum_trans" arg2="(fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)),0,(l-i),l">
      <goal name="VC mod_ind_isum.0.0.0.2.0" expl="rewrite premises">
      <transf name="rewrite" arg1="Hinst">
       <goal name="VC mod_ind_isum.0.0.0.2.0.0" expl="rewrite premises">
       <transf name="apply" arg1="add_eq">
        <goal name="VC mod_ind_isum.0.0.0.2.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="ind_isum_scal_rev_right">
         <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="ind_isum_eq">
          <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="replace" arg1="((f @ k) * power 2 ((l - 1) - k))" arg2="((f @ k) * power 2 ((((l - 1) - k) -i)+i))">
             <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="rewrite" arg1="power_sum">
              <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
              </goal>
              <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="133"/></proof>
              </goal>
              <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.0.0.0.0.1" expl="equality hypothesis">
             <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mod_ind_isum.0.0.0.2.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="129"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mod_ind_isum.0.0.0.2.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mod_ind_isum.0.0.0.2.0.1" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC mod_ind_isum.0.0.0.2.0.1.0">
        <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="129"/></proof>
        </goal>
        <goal name="VC mod_ind_isum.0.0.0.2.0.1.1">
        <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="129"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mod_ind_isum.0.0.0.3" expl="rewrite premises">
     <transf name="case" arg1="(i = 0)">
      <goal name="VC mod_ind_isum.0.0.0.3.0" expl="true case (rewrite premises)">
      <transf name="split_vc" >
       <goal name="VC mod_ind_isum.0.0.0.3.0.0">
       <proof prover="0" obsolete="true"><result status="valid" time="0.84"/></proof>
       </goal>
       <goal name="VC mod_ind_isum.0.0.0.3.0.1">
       <proof prover="3" obsolete="true"><result status="valid" time="1.04"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mod_ind_isum.0.0.0.3.1" expl="false case (rewrite premises)">
      <transf name="split_vc" >
       <goal name="VC mod_ind_isum.0.0.0.3.1.0">
       <transf name="apply" arg1="ind_isum_pos">
        <goal name="VC mod_ind_isum.0.0.0.3.1.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
        </goal>
        <goal name="VC mod_ind_isum.0.0.0.3.1.0.1" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC mod_ind_isum.0.0.0.3.1.0.1.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC mod_ind_isum.0.0.0.3.1.0.1.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.75"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mod_ind_isum.0.0.0.3.1.1">
       <transf name="instantiate" arg1="ind_isum_bin_bound" arg2="f,l,(l-i)">
        <goal name="VC mod_ind_isum.0.0.0.3.1.1.0">
        <transf name="replace" arg1="(l - (l - i))" arg2="i" arg3="in" arg4="Hinst">
         <goal name="VC mod_ind_isum.0.0.0.3.1.1.0.0">
         <transf name="apply" arg1="Hinst">
          <goal name="VC mod_ind_isum.0.0.0.3.1.1.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mod_ind_isum.0.0.0.3.1.1.0.0.0.0">
           <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="131"/></proof>
           </goal>
           <goal name="VC mod_ind_isum.0.0.0.3.1.1.0.0.0.1">
           <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="131"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mod_ind_isum.0.0.0.3.1.1.0.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="131"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mod_ind_isum.0.0.0.3.1.1.0.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="131"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_ind_isum_z" expl="VC for mod_ind_isum_z">
 <transf name="split_vc" >
  <goal name="VC mod_ind_isum_z.0" expl="postcondition">
  <transf name="rewrite" arg1="mod_ind_isum">
   <goal name="VC mod_ind_isum_z.0.0" expl="postcondition">
   <transf name="instantiate" arg1="ind_isum_transl" arg2="(fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)),(l-i),l,(l-i)">
    <goal name="VC mod_ind_isum_z.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC mod_ind_isum_z.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC mod_ind_isum_z.0.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC mod_ind_isum_z.0.0.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC mod_ind_isum_z.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mod_ind_isum_z.0.0.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
      </goal>
      <goal name="VC mod_ind_isum_z.0.0.0.0.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="129"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mod_ind_isum_z.0.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC mod_ind_isum_z.0.1.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="127"/></proof>
    </goal>
    <goal name="VC mod_ind_isum_z.0.1.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mod_ind_isum_z.0.2" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_ind_isum" expl="VC for div_ind_isum">
 <transf name="split_vc" >
  <goal name="VC div_ind_isum.0" expl="postcondition">
  <transf name="instantiate" arg1="unicity_div_mod" arg2="(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l),(power 2 i),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k-i)) 0 (l-i)),(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) (l - i) l)">
   <goal name="VC div_ind_isum.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC div_ind_isum.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst1">
     <goal name="VC div_ind_isum.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC div_ind_isum.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="129"/></proof>
     </goal>
     <goal name="VC div_ind_isum.0.0.0.2" expl="rewrite premises">
     <transf name="instantiate" arg1="ind_isum_trans" arg2="(fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)),0,(l-i),l">
      <goal name="VC div_ind_isum.0.0.0.2.0" expl="rewrite premises">
      <transf name="rewrite" arg1="Hinst">
       <goal name="VC div_ind_isum.0.0.0.2.0.0" expl="rewrite premises">
       <transf name="apply" arg1="add_eq">
        <goal name="VC div_ind_isum.0.0.0.2.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="ind_isum_scal_rev_right">
         <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="ind_isum_eq">
          <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="replace" arg1="((f @ k) * power 2 ((l - 1) - k))" arg2="((f @ k) * power 2 ((((l - 1) - k) -i)+i))">
             <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="rewrite" arg1="power_sum">
              <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
              </goal>
              <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="133"/></proof>
              </goal>
              <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC div_ind_isum.0.0.0.2.0.0.0.0.0.0.0.1" expl="equality hypothesis">
             <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_ind_isum.0.0.0.2.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC div_ind_isum.0.0.0.2.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC div_ind_isum.0.0.0.2.0.1" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC div_ind_isum.0.0.0.2.0.1.0">
        <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="129"/></proof>
        </goal>
        <goal name="VC div_ind_isum.0.0.0.2.0.1.1">
        <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="129"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC div_ind_isum.0.0.0.3" expl="rewrite premises">
     <transf name="case" arg1="(i = 0)">
      <goal name="VC div_ind_isum.0.0.0.3.0" expl="true case (rewrite premises)">
      <transf name="split_vc" >
       <goal name="VC div_ind_isum.0.0.0.3.0.0">
       <proof prover="0" obsolete="true"><result status="valid" time="0.75"/></proof>
       </goal>
       <goal name="VC div_ind_isum.0.0.0.3.0.1">
       <proof prover="3" obsolete="true"><result status="valid" time="1.40"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC div_ind_isum.0.0.0.3.1" expl="false case (rewrite premises)">
      <transf name="split_vc" >
       <goal name="VC div_ind_isum.0.0.0.3.1.0">
       <transf name="apply" arg1="ind_isum_pos">
        <goal name="VC div_ind_isum.0.0.0.3.1.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="129"/></proof>
        </goal>
        <goal name="VC div_ind_isum.0.0.0.3.1.0.1" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC div_ind_isum.0.0.0.3.1.0.1.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC div_ind_isum.0.0.0.3.1.0.1.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.90"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC div_ind_isum.0.0.0.3.1.1">
       <transf name="instantiate" arg1="ind_isum_bin_bound" arg2="f,l,(l-i)">
        <goal name="VC div_ind_isum.0.0.0.3.1.1.0">
        <transf name="replace" arg1="(l - (l - i))" arg2="i" arg3="in" arg4="Hinst">
         <goal name="VC div_ind_isum.0.0.0.3.1.1.0.0">
         <transf name="apply" arg1="Hinst">
          <goal name="VC div_ind_isum.0.0.0.3.1.1.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC div_ind_isum.0.0.0.3.1.1.0.0.0.0">
           <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="131"/></proof>
           </goal>
           <goal name="VC div_ind_isum.0.0.0.3.1.1.0.0.0.1">
           <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="131"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_ind_isum.0.0.0.3.1.1.0.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="131"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_ind_isum.0.0.0.3.1.1.0.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="131"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_mod" expl="VC for ind_isum_mod">
 <transf name="split_vc" >
  <goal name="VC ind_isum_mod.0" expl="postcondition">
  <transf name="instantiate" arg1="unicity_div_mod" arg2="(ind_isum (fun l -&gt; getbv bv l * power 2 (i -1 -l)) 0 (i+1)),2,(ind_isum (fun l -&gt; getbv bv l * power 2 (i -1 -l)) 0 i),(getbv bv i )">
   <goal name="VC ind_isum_mod.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC ind_isum_mod.0.0.0" expl="postcondition">
    <transf name="instantiate" arg1="unicity_div_mod" arg2="(ind_isum (fun l -&gt; getbv bv l * power 2 (i  -l)) 0 (i+1)),2,(ind_isum (fun l -&gt; getbv bv l * power 2 (i -1 -l)) 0 i),(getbv bv i )">
     <goal name="VC ind_isum_mod.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Hinst">
      <goal name="VC ind_isum_mod.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC ind_isum_mod.0.0.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="125"/></proof>
      </goal>
      <goal name="VC ind_isum_mod.0.0.0.0.2" expl="rewrite premises">
      <transf name="rewrite" arg1="ind_isum_right_extension">
       <goal name="VC ind_isum_mod.0.0.0.0.2.0" expl="rewrite premises">
       <transf name="apply" arg1="add_eq">
        <goal name="VC ind_isum_mod.0.0.0.0.2.0.0" expl="apply premises">
        <transf name="rewrite" arg1="ind_isum_scal_rev_right">
         <goal name="VC ind_isum_mod.0.0.0.0.2.0.0.0" expl="apply premises">
         <transf name="apply" arg1="ind_isum_eq">
          <goal name="VC ind_isum_mod.0.0.0.0.2.0.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC ind_isum_mod.0.0.0.0.2.0.0.0.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC ind_isum_mod.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="134"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_isum_mod.0.0.0.0.2.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="125"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_isum_mod.0.0.0.0.2.0.1" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC ind_isum_mod.0.0.0.0.2.0.1.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="130"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_isum_mod.0.0.0.0.2.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="125"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_isum_mod.0.0.0.0.3" expl="rewrite premises">
      <transf name="split_vc" >
       <goal name="VC ind_isum_mod.0.0.0.0.3.0">
       <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="127"/></proof>
       </goal>
       <goal name="VC ind_isum_mod.0.0.0.0.3.1">
       <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="127"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_ind_isum_" expl="VC for mod_ind_isum_">
 <transf name="split_vc" >
  <goal name="VC mod_ind_isum_.0" expl="postcondition">
  <transf name="replace" arg1="(mod (ind_isum (fun (k:int) -&gt; (f @ k) * power_ 2 ((l - 1) - k)) 0 l)
  (power_ 2 i))" arg2="( mod (ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)
   (power 2 i))">
   <goal name="VC mod_ind_isum_.0.0" expl="postcondition">
   <transf name="rewrite" arg1="mod_ind_isum">
    <goal name="VC mod_ind_isum_.0.0.0" expl="postcondition">
    <transf name="apply" arg1="ind_isum_eq">
     <goal name="VC mod_ind_isum_.0.0.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC mod_ind_isum_.0.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC mod_ind_isum_.0.0.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="power_no_">
        <goal name="VC mod_ind_isum_.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="131"/></proof>
        </goal>
        <goal name="VC mod_ind_isum_.0.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mod_ind_isum_.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="127"/></proof>
    </goal>
    <goal name="VC mod_ind_isum_.0.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mod_ind_isum_.0.1" expl="equality hypothesis">
   <transf name="replace" arg1="(power 2 i)" arg2="(power_ 2 i)">
    <goal name="VC mod_ind_isum_.0.1.0" expl="equality hypothesis">
    <transf name="apply" arg1="mod_eq">
     <goal name="VC mod_ind_isum_.0.1.0.0" expl="apply premises">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC mod_ind_isum_.0.1.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC mod_ind_isum_.0.1.0.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC mod_ind_isum_.0.1.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power_to_">
         <goal name="VC mod_ind_isum_.0.1.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="131"/></proof>
         </goal>
         <goal name="VC mod_ind_isum_.0.1.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="131"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mod_ind_isum_.0.1.1" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_ind_isum_z_" expl="VC for mod_ind_isum_z_">
 <transf name="split_vc" >
  <goal name="VC mod_ind_isum_z_.0" expl="postcondition">
  <transf name="replace" arg1="(mod (ind_isum (fun (k:int) -&gt; (f @ k) * power_ 2 ((l - 1) - k)) 0 l)
  (power_ 2 i))" arg2="(mod (ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)
  (power 2 i))">
   <goal name="VC mod_ind_isum_z_.0.0" expl="postcondition">
   <transf name="rewrite" arg1="mod_ind_isum_z">
    <goal name="VC mod_ind_isum_z_.0.0.0" expl="postcondition">
    <transf name="apply" arg1="ind_isum_eq">
     <goal name="VC mod_ind_isum_z_.0.0.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC mod_ind_isum_z_.0.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC mod_ind_isum_z_.0.0.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="power_to_">
        <goal name="VC mod_ind_isum_z_.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="131"/></proof>
        </goal>
        <goal name="VC mod_ind_isum_z_.0.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mod_ind_isum_z_.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="127"/></proof>
    </goal>
    <goal name="VC mod_ind_isum_z_.0.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mod_ind_isum_z_.0.1" expl="equality hypothesis">
   <transf name="replace" arg1="(power 2 i)" arg2="(power_ 2 i)">
    <goal name="VC mod_ind_isum_z_.0.1.0" expl="equality hypothesis">
    <transf name="apply" arg1="mod_eq">
     <goal name="VC mod_ind_isum_z_.0.1.0.0" expl="apply premises">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC mod_ind_isum_z_.0.1.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC mod_ind_isum_z_.0.1.0.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC mod_ind_isum_z_.0.1.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power_to_">
         <goal name="VC mod_ind_isum_z_.0.1.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="131"/></proof>
         </goal>
         <goal name="VC mod_ind_isum_z_.0.1.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="131"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mod_ind_isum_z_.0.1.1" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_ind_isum_" expl="VC for div_ind_isum_">
 <transf name="split_vc" >
  <goal name="VC div_ind_isum_.0" expl="postcondition">
  <transf name="replace" arg1="(div (ind_isum (fun (k:int) -&gt; (f @ k) * power_ 2 ((l - 1) - k)) 0 l)
  (power_ 2 i))" arg2="(div (ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)
  (power 2 i))">
   <goal name="VC div_ind_isum_.0.0" expl="postcondition">
   <transf name="rewrite" arg1="div_ind_isum">
    <goal name="VC div_ind_isum_.0.0.0" expl="postcondition">
    <transf name="apply" arg1="ind_isum_eq">
     <goal name="VC div_ind_isum_.0.0.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC div_ind_isum_.0.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC div_ind_isum_.0.0.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="power_to_">
        <goal name="VC div_ind_isum_.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
        </goal>
        <goal name="VC div_ind_isum_.0.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC div_ind_isum_.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="127"/></proof>
    </goal>
    <goal name="VC div_ind_isum_.0.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC div_ind_isum_.0.1" expl="equality hypothesis">
   <transf name="replace" arg1="(power 2 i)" arg2="(power_ 2 i)">
    <goal name="VC div_ind_isum_.0.1.0" expl="equality hypothesis">
    <transf name="replace" arg1="(ind_isum (fun (k:int) -&gt; (f @ k) * power_ 2 ((l - 1) - k)) 0 l)" arg2="(ind_isum (fun (k:int) -&gt; (f @ k) * power 2 ((l - 1) - k)) 0 l)">
     <goal name="VC div_ind_isum_.0.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC div_ind_isum_.0.1.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC div_ind_isum_.0.1.0.1.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC div_ind_isum_.0.1.0.1.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC div_ind_isum_.0.1.0.1.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power_to_">
         <goal name="VC div_ind_isum_.0.1.0.1.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="131"/></proof>
         </goal>
         <goal name="VC div_ind_isum_.0.1.0.1.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="131"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC div_ind_isum_.0.1.1" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_mod_" expl="VC for ind_isum_mod_">
 <transf name="split_vc" >
  <goal name="VC ind_isum_mod_.0" expl="postcondition">
  <transf name="replace" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power_ 2 (i - l)) 0 (i + 1))" arg2="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 (i - l)) 0 (i + 1))">
   <goal name="VC ind_isum_mod_.0.0" expl="postcondition">
   <transf name="apply" arg1="ind_isum_mod">
    <goal name="VC ind_isum_mod_.0.0.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_isum_mod_.0.1" expl="equality hypothesis">
   <transf name="apply" arg1="ind_isum_eq">
    <goal name="VC ind_isum_mod_.0.1.0" expl="apply premises">
    <transf name="compute_specified" >
     <goal name="VC ind_isum_mod_.0.1.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC ind_isum_mod_.0.1.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="power_no_">
       <goal name="VC ind_isum_mod_.0.1.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="129"/></proof>
       </goal>
       <goal name="VC ind_isum_mod_.0.1.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="129"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_kth_pre" expl="VC for bv_to_int_kth_pre">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_kth_pre.0" expl="postcondition">
  <transf name="rewrite" arg1="div_ind_isum">
   <goal name="VC bv_to_int_kth_pre.0.0" expl="postcondition">
   <transf name="replace" arg1="(length bv - ((length bv - k) - 1))" arg2="(k+1)">
    <goal name="VC bv_to_int_kth_pre.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(fun (k1:int) -&gt;
       (getbv bv @ k1)
       * power 2 (((length bv - 1) - k1) - ((length bv - k) - 1)))" arg2="(fun (k1:int) -&gt;
       (getbv bv @ k1)
       * power 2 (k-k1))">
     <goal name="VC bv_to_int_kth_pre.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="ind_isum_mod">
      <goal name="VC bv_to_int_kth_pre.0.0.0.0.0" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="125"/></proof>
      </goal>
      <goal name="VC bv_to_int_kth_pre.0.0.0.0.1" expl="rewrite premises">
      <transf name="split_vc" >
       <goal name="VC bv_to_int_kth_pre.0.0.0.0.1.0" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="125"/></proof>
       </goal>
       <goal name="VC bv_to_int_kth_pre.0.0.0.0.1.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="125"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_kth_pre.0.0.0.1" expl="equality hypothesis">
     <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="127"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_kth_pre.0.0.1" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_kth_pre.0.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC bv_to_int_kth_pre.0.1.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="125"/></proof>
    </goal>
    <goal name="VC bv_to_int_kth_pre.0.1.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_kth_pre.0.2" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_kth_pre.1" expl="postcondition">
  <transf name="rewrite" arg1="mod_ind_isum">
   <goal name="VC bv_to_int_kth_pre.1.0" expl="postcondition">
   <transf name="replace" arg1="(length bv - (length bv - k))" arg2="k">
    <goal name="VC bv_to_int_kth_pre.1.0.0" expl="postcondition">
    <transf name="instantiate" arg1="ind_isum_transl" arg2="(fun (k1:int) -&gt; (getbv bv @ k1) * power 2 ((length bv - 1) - k1)),k,(length bv),k">
     <goal name="VC bv_to_int_kth_pre.1.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Hinst">
      <goal name="VC bv_to_int_kth_pre.1.0.0.0.0" expl="postcondition">
      <transf name="compute_specified" >
       <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0" expl="postcondition">
       <transf name="instantiate" arg1="div_ind_isum" arg2="(fun b -&gt; getbv bv (b+k)),(length bv - k-1),(length bv - k)">
        <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(ind_isum
     (fun (b:int) -&gt;
       (getbv bv @ (b + k)) * power 2 ((length bv - 1) - (b + k)))
     (k - k) (length bv - k))" arg2="(ind_isum
   (fun (k1:int) -&gt;
     ((fun (b:int) -&gt; getbv bv @ (b + k)) @ k1)
     * power 2 (((length bv - k) - 1) - k1))
   0 (length bv - k))">
         <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="ind_isum_one">
           <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="compute_specified" >
            <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <proof prover="4" obsolete="true"><result status="valid" time="0.68" steps="132"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="129"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.1" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.1.0">
           <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="129"/></proof>
           </goal>
           <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.1.1">
           <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="129"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.2" expl="rewrite premises">
          <transf name="eliminate_definition" >
           <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.2.0" expl="rewrite premises">
           <transf name="rewrite" arg1="binary_def">
            <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.2.0.0">
            <transf name="split_vc" >
             <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.2.0.0.0">
             <transf name="compute_specified" >
              <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.2.0.0.0.0">
              <proof prover="3" obsolete="true"><result status="valid" time="0.88"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.2.0.0.1">
             <transf name="compute_specified" >
              <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.0.2.0.0.1.0">
              <proof prover="3" obsolete="true"><result status="valid" time="1.16"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.1" expl="equality hypothesis">
         <transf name="apply" arg1="ind_isum_eq_gen">
          <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.1.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.1.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="133"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.1.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="129"/></proof>
          </goal>
          <goal name="VC bv_to_int_kth_pre.1.0.0.0.0.0.0.1.2" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="129"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_kth_pre.1.0.1" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_kth_pre.1.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC bv_to_int_kth_pre.1.1.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="127"/></proof>
    </goal>
    <goal name="VC bv_to_int_kth_pre.1.1.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_kth_pre.1.2" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.58" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv" expl="VC for int_to_bv">
 <transf name="split_vc" >
  <goal name="VC int_to_bv.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="127"/></proof>
  </goal>
  <goal name="VC int_to_bv.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv.1.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="129"/></proof>
  </goal>
  <goal name="VC int_to_bv.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="129"/></proof>
  </goal>
  <goal name="VC int_to_bv.4" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv.4.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.20"/></proof>
   </goal>
   <goal name="VC int_to_bv.4.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.52"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv.5" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="123"/></proof>
  </goal>
  <goal name="VC int_to_bv.6" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="127"/></proof>
  </goal>
  <goal name="VC int_to_bv.7" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC int_to_bv.7.0" expl="apply premises">
   <transf name="rewrite" arg1="make_bv_length">
    <goal name="VC int_to_bv.7.0.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="127"/></proof>
    </goal>
    <goal name="VC int_to_bv.7.0.1" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_to_bv.7.0.1.0" expl="rewrite premises">
     <proof prover="3" obsolete="true"><result status="valid" time="2.27"/></proof>
     </goal>
     <goal name="VC int_to_bv.7.0.1.1" expl="rewrite premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.77"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv.7.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv.7.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv.7.1.0" expl="apply premises">
    <transf name="rewrite" arg1="assert_make_bv">
     <goal name="VC int_to_bv.7.1.0.0" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="3.18"/></proof>
     </goal>
     <goal name="VC int_to_bv.7.1.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC int_to_bv.7.1.0.1.0" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="1.53"/></proof>
      </goal>
      <goal name="VC int_to_bv.7.1.0.1.1" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="1.45"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_bv.7.1.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_sum_pre" expl="VC for int_to_bv_sum_pre">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_sum_pre.0" expl="assertion">
  <transf name="assert" arg1="( (mod i (power 2 (k - 1))) &lt; (power 2 k) )">
   <goal name="VC int_to_bv_sum_pre.0.0" expl="asserted formula">
   <transf name="assert" arg1="( (mod i (power 2 (k - 1))) &lt; (power 2 (k-1)) )">
    <goal name="VC int_to_bv_sum_pre.0.0.0" expl="asserted formula">
    <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="133"/></proof>
    </goal>
    <goal name="VC int_to_bv_sum_pre.0.0.1" expl="asserted formula">
    <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_sum_pre.0.1" expl="assertion">
   <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_sum_pre.1" expl="variant decrease">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_sum_pre.1.0" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
   </goal>
   <goal name="VC int_to_bv_sum_pre.1.1" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_sum_pre.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_sum_pre.2.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="133"/></proof>
   </goal>
   <goal name="VC int_to_bv_sum_pre.2.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_sum_pre.3" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_sum_pre.3.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="135"/></proof>
   </goal>
   <goal name="VC int_to_bv_sum_pre.3.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_sum_pre.4" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC int_to_bv_sum_pre.4.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.50"/></proof>
   </goal>
   <goal name="VC int_to_bv_sum_pre.4.1" expl="postcondition">
   <transf name="case" arg1="(k=0)">
    <goal name="VC int_to_bv_sum_pre.4.1.0" expl="true case (postcondition)">
    <proof prover="3" obsolete="true"><result status="valid" time="0.79"/></proof>
    </goal>
    <goal name="VC int_to_bv_sum_pre.4.1.1" expl="false case (postcondition)">
    <transf name="eliminate_let" >
     <goal name="VC int_to_bv_sum_pre.4.1.1.0" expl="false case (postcondition)">
     <transf name="instantiate" arg1="decomp" arg2="( mod i (power 2 k)),(power 2 (k-1))">
      <goal name="VC int_to_bv_sum_pre.4.1.1.0.0" expl="false case (postcondition)">
      <transf name="rewrite" arg1="ind_isum_plus_one">
       <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0" expl="false case (postcondition)">
       <transf name="rewrite" arg1="Hinst">
        <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0" expl="false case (postcondition)">
        <transf name="apply" arg1="add_eq">
         <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0" expl="apply premises">
          <transf name="apply" arg1="mult_eq_inv">
           <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
           </goal>
           <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1" expl="apply premises">
           <transf name="split_all_full" >
            <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0" expl="apply premises">
            <transf name="rewrite" arg1="int_to_bv_spec">
             <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0" expl="apply premises">
             <transf name="rewrite" arg1="assert_make_bv">
              <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
              <transf name="eliminate_if" >
               <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.0.0">
               <transf name="split_vc" >
                <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
                <proof prover="3" obsolete="true"><result status="valid" time="0.99"/></proof>
                </goal>
                <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="135"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises">
              <transf name="compute_specified" >
               <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.1.0" expl="rewrite premises">
               <transf name="split_vc" >
                <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.1.0.0" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.55" steps="142"/></proof>
                </goal>
                <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.1.0.1" expl="rewrite premises">
                <proof prover="0" obsolete="true"><result status="valid" time="0.78"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.0.0.1.0.1" expl="rewrite premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="135"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1" expl="apply premises">
         <transf name="replace" arg1="(  mod (mod i (power 2 k)) (power 2 (k - 1)))" arg2="(mod i (power 2 (k-1)))">
          <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1.0" expl="apply premises">
          <transf name="split_all_full" >
           <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1.0.0" expl="apply premises">
           <transf name="rewrite" arg1="H">
            <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1.0.0.0" expl="apply premises">
            <transf name="apply" arg1="ind_isum_eq_gen">
             <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1.0.0.0.1" expl="apply premises">
             <proof prover="3" obsolete="true"><result status="valid" time="0.33"/></proof>
             </goal>
             <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1.0.0.0.2" expl="apply premises">
             <proof prover="3" obsolete="true"><result status="valid" time="0.29"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.0.1.1" expl="equality hypothesis">
          <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_sum_pre.4.1.1.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_sum" expl="VC for int_to_bv_sum">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_sum.0" expl="postcondition">
  <transf name="instantiate" arg1="int_to_bv_sum_pre" arg2="i,n,n">
   <goal name="VC int_to_bv_sum.0.0" expl="postcondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.97"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_sum_rev" expl="VC for int_to_bv_sum_rev">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_sum_rev.0" expl="postcondition">
  <transf name="instantiate" arg1="int_to_bv_sum" arg2="i,n">
   <goal name="VC int_to_bv_sum_rev.0.0" expl="postcondition">
   <transf name="replace" arg1="(ind_isum
  (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power_ 2 ((n - k) - 1)) 0 n)" arg2="(ind_isum
  (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)">
    <goal name="VC int_to_bv_sum_rev.0.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="2.50"/></proof>
    </goal>
    <goal name="VC int_to_bv_sum_rev.0.0.1" expl="equality hypothesis">
    <transf name="apply" arg1="ind_isum_eq">
     <goal name="VC int_to_bv_sum_rev.0.0.1.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC int_to_bv_sum_rev.0.0.1.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC int_to_bv_sum_rev.0.0.1.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_mod_div" expl="VC for int_to_bv_mod_div">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_mod_div.0" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC int_to_bv_mod_div.0.0" expl="apply premises">
   <transf name="split_all_full" >
    <goal name="VC int_to_bv_mod_div.0.0.0" expl="apply premises">
    <transf name="rewrite" arg1="int_to_bv_spec">
     <goal name="VC int_to_bv_mod_div.0.0.0.0" expl="apply premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="VC int_to_bv_mod_div.0.0.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="make_bv_length">
       <goal name="VC int_to_bv_mod_div.0.0.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="127"/></proof>
       </goal>
       <goal name="VC int_to_bv_mod_div.0.0.0.0.0.1" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC int_to_bv_mod_div.0.0.0.0.0.1.0" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="1.92"/></proof>
        </goal>
        <goal name="VC int_to_bv_mod_div.0.0.0.0.0.1.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="2.46"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_mod_div.0.0.0.0.0.2" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="127"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_mod_div.0.0.0.0.1" expl="rewrite premises">
      <transf name="compute_specified" >
       <goal name="VC int_to_bv_mod_div.0.0.0.0.1.0" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC int_to_bv_mod_div.0.0.0.0.1.0.0" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="133"/></proof>
        </goal>
        <goal name="VC int_to_bv_mod_div.0.0.0.0.1.0.1" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.71"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_mod_div.0.0.0.0.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="127"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_bv_mod_div.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="127"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_mod_div.0.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_mod_div.0.1.0" expl="apply premises">
    <transf name="split_all_full" >
     <goal name="VC int_to_bv_mod_div.0.1.0.0" expl="apply premises">
     <transf name="rewrite" arg1="int_to_bv_spec">
      <goal name="VC int_to_bv_mod_div.0.1.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="assert_make_bv_b">
       <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="assert_make_bv_b">
        <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.1" expl="rewrite premises">
        <transf name="split_vc" >
         <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.1.0" expl="rewrite premises">
         <proof prover="3" obsolete="true"><result status="valid" time="1.71"/></proof>
         </goal>
         <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.1.1" expl="rewrite premises">
         <proof prover="3" obsolete="true"><result status="valid" time="2.13"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.2" expl="rewrite premises">
        <transf name="split_vc" >
         <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.2.0" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="131"/></proof>
         </goal>
         <goal name="VC int_to_bv_mod_div.0.1.0.0.0.0.2.1" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.63"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_mod_div.0.1.0.0.0.1" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC int_to_bv_mod_div.0.1.0.0.0.1.0" expl="rewrite premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bv_mod_div.0.1.0.0.0.1.0.0" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_mod_div.0.1.0.0.0.1.1" expl="rewrite premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bv_mod_div.0.1.0.0.0.1.1.0" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.71"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_mod_div.0.1.0.0.0.2" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC int_to_bv_mod_div.0.1.0.0.0.2.0" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="131"/></proof>
        </goal>
        <goal name="VC int_to_bv_mod_div.0.1.0.0.0.2.1" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.97"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_mod_div.0.1.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_isum" expl="VC for mod_isum">
 <transf name="split_vc" >
  <goal name="VC mod_isum.0" expl="postcondition">
  <transf name="replace" arg1="(mod i (power 2 k))" arg2="(mod (ind_isum
     (fun (k:int) -&gt;
       (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k))
     0 n) (power 2 k))">
   <goal name="VC mod_isum.0.0" expl="postcondition">
   <transf name="rewrite" arg1="mod_ind_isum">
    <goal name="VC mod_isum.0.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="2.48"/></proof>
    </goal>
    <goal name="VC mod_isum.0.0.1" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC mod_isum.0.0.1.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
     </goal>
     <goal name="VC mod_isum.0.0.1.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mod_isum.0.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mod_isum.0.1" expl="equality hypothesis">
   <transf name="replace" arg1="((ind_isum
     (fun (k1:int) -&gt; (getbv (int_to_bv i n) @ k1) * power 2 ((n - 1) - k1))
     0 n))" arg2="i">
    <goal name="VC mod_isum.0.1.0" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="131"/></proof>
    </goal>
    <goal name="VC mod_isum.0.1.1" expl="equality hypothesis">
    <transf name="apply" arg1="goal_comm">
     <goal name="VC mod_isum.0.1.1.0" expl="apply premises">
     <transf name="apply" arg1="int_to_bv_sum">
      <goal name="VC mod_isum.0.1.1.0.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="131"/></proof>
      </goal>
      <goal name="VC mod_isum.0.1.1.0.1" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC mod_isum.0.1.1.0.1.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="131"/></proof>
       </goal>
       <goal name="VC mod_isum.0.1.1.0.1.1" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="131"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_isum_z" expl="VC for mod_isum_z">
 <transf name="split_vc" >
  <goal name="VC mod_isum_z.0" expl="postcondition">
  <transf name="instantiate" arg1="mod_isum" arg2="i,k,n">
   <goal name="VC mod_isum_z.0.0" expl="postcondition">
   <transf name="instantiate" arg1="ind_isum_transl" arg2="(fun (l:int) -&gt; (getbv (int_to_bv i n) @ l) * power 2 ((n - 1) - l)),(n-k),n,(n-k)">
    <goal name="VC mod_isum_z.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst1">
     <goal name="VC mod_isum_z.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Hinst">
      <goal name="VC mod_isum_z.0.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="ind_isum_eq_gen">
       <goal name="VC mod_isum_z.0.0.0.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC mod_isum_z.0.0.0.0.0.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC mod_isum_z.0.0.0.0.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="mult_eq">
          <goal name="VC mod_isum_z.0.0.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="139"/></proof>
          </goal>
          <goal name="VC mod_isum_z.0.0.0.0.0.0.0.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mod_isum_z.0.0.0.0.0.1" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
       </goal>
       <goal name="VC mod_isum_z.0.0.0.0.0.2" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mod_isum_z.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="135"/></proof>
     </goal>
     <goal name="VC mod_isum_z.0.0.0.2" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC mod_isum_z.0.0.0.2.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
      </goal>
      <goal name="VC mod_isum_z.0.0.0.2.1">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mod_isum_z.0.0.0.3" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC mod_isum_z.0.0.0.3.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
      </goal>
      <goal name="VC mod_isum_z.0.0.0.3.1">
      <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_isum" expl="VC for div_isum">
 <transf name="split_vc" >
  <goal name="VC div_isum.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC div_isum.0.0" expl="postcondition">
   <transf name="replace" arg1="(div i (power 2 k))" arg2="(div (ind_isum
     (fun (k:int) -&gt;
       (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k))
     0 n) (power 2 k))">
    <goal name="VC div_isum.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="div_ind_isum">
     <goal name="VC div_isum.0.0.0.0" expl="postcondition">
     <proof prover="3" obsolete="true"><result status="valid" time="2.14"/></proof>
     </goal>
     <goal name="VC div_isum.0.0.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC div_isum.0.0.0.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="131"/></proof>
      </goal>
      <goal name="VC div_isum.0.0.0.1.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC div_isum.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC div_isum.0.0.1" expl="equality hypothesis">
    <transf name="assert" arg1="((ind_isum
     (fun (k1:int) -&gt; (getbv (int_to_bv i n) @ k1) * power 2 ((n - 1) - k1))
     0 n) = i)">
     <goal name="VC div_isum.0.0.1.0" expl="asserted formula">
     <transf name="apply" arg1="goal_comm">
      <goal name="VC div_isum.0.0.1.0.0" expl="apply premises">
      <transf name="apply" arg1="int_to_bv_sum">
       <goal name="VC div_isum.0.0.1.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="131"/></proof>
       </goal>
       <goal name="VC div_isum.0.0.1.0.0.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC div_isum.0.0.1.0.0.1.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="131"/></proof>
        </goal>
        <goal name="VC div_isum.0.0.1.0.0.1.1" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC div_isum.0.0.1.1" expl="equality hypothesis">
     <transf name="rewrite" arg1="h">
      <goal name="VC div_isum.0.0.1.1.0" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_div_mod" expl="VC for int_to_bv_div_mod">
 <transf name="eliminate_let" >
  <goal name="VC int_to_bv_div_mod.0" expl="VC for int_to_bv_div_mod">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_div_mod.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC int_to_bv_div_mod.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="int_to_bv_spec">
     <goal name="VC int_to_bv_div_mod.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC int_to_bv_div_mod.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_value" expl="VC for int_to_bv_value">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_value.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC int_to_bv_value.0.0" expl="postcondition">
   <transf name="rewrite" arg1="int_to_bv_mod_div">
    <goal name="VC int_to_bv_value.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="assert_make_bv">
     <goal name="VC int_to_bv_value.0.0.0.0" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.64" steps="133"/></proof>
     </goal>
     <goal name="VC int_to_bv_value.0.0.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC int_to_bv_value.0.0.0.1.0" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="2.23"/></proof>
      </goal>
      <goal name="VC int_to_bv_value.0.0.0.1.1" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="2.51"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_bv_value.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_value.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="131"/></proof>
    </goal>
    <goal name="VC int_to_bv_value.0.0.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_to_bv_value.0.0.2.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="131"/></proof>
     </goal>
     <goal name="VC int_to_bv_value.0.0.2.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_value_zero" expl="VC for int_to_bv_value_zero">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_value_zero.0" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC int_to_bv_value_zero.0.0" expl="VC for int_to_bv_value_zero">
   <transf name="rewrite" arg1="int_to_bv_value">
    <goal name="VC int_to_bv_value_zero.0.0.0" expl="VC for int_to_bv_value_zero">
    <transf name="split_vc" >
     <goal name="VC int_to_bv_value_zero.0.0.0.0" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
     </goal>
     <goal name="VC int_to_bv_value_zero.0.0.0.1" expl="postcondition">
     <transf name="replace" arg1="(div  i (power 2 ((n - 0) - 1)))" arg2="1">
      <goal name="VC int_to_bv_value_zero.0.0.0.1.0" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="129"/></proof>
      </goal>
      <goal name="VC int_to_bv_value_zero.0.0.0.1.1" expl="equality hypothesis">
      <proof prover="3" obsolete="true"><result status="valid" time="1.93"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_value_zero.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="127"/></proof>
    </goal>
    <goal name="VC int_to_bv_value_zero.0.0.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_to_bv_value_zero.0.0.2.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="127"/></proof>
     </goal>
     <goal name="VC int_to_bv_value_zero.0.0.2.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="127"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_value_zero.0.0.3" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_to_bv_value_zero.0.0.3.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="127"/></proof>
     </goal>
     <goal name="VC int_to_bv_value_zero.0.0.3.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="127"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_mod_div_" expl="VC for int_to_bv_mod_div_">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_mod_div_.0" expl="postcondition">
  <transf name="rewrite" arg1="int_to_bv_mod_div">
   <goal name="VC int_to_bv_mod_div_.0.0" expl="postcondition">
   <transf name="apply" arg1="set_equal_bv">
    <goal name="VC int_to_bv_mod_div_.0.0.0" expl="apply premises">
    <transf name="rewrite" arg1="make_bv_length">
     <goal name="VC int_to_bv_mod_div_.0.0.0.0" expl="apply premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="VC int_to_bv_mod_div_.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC int_to_bv_mod_div_.0.0.0.0.1" expl="rewrite premises">
      <transf name="compute_specified" >
       <goal name="VC int_to_bv_mod_div_.0.0.0.0.1.0" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="131"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_mod_div_.0.0.0.0.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="127"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_bv_mod_div_.0.0.0.1" expl="rewrite premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.87"/></proof>
     </goal>
     <goal name="VC int_to_bv_mod_div_.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="127"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_mod_div_.0.0.1" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC int_to_bv_mod_div_.0.0.1.0" expl="apply premises">
     <transf name="rewrite" arg1="assert_make_bv_b">
      <goal name="VC int_to_bv_mod_div_.0.0.1.0.0" expl="apply premises">
      <transf name="rewrite" arg1="assert_make_bv_b">
       <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power_no_">
         <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="131"/></proof>
         </goal>
         <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0.1" expl="rewrite premises">
         <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
          <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0.1.0" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="131"/></proof>
          </goal>
          <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0.1.1" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0.1.1.0" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="1.88"/></proof>
           </goal>
           <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0.1.1.1" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="2.08"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.0.0.1.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="131"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.1" expl="rewrite premises">
       <transf name="compute_specified" >
        <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.1.0" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="135"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.2" expl="rewrite premises">
       <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
        <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.2.0" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="131"/></proof>
        </goal>
        <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.2.1" expl="rewrite premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.2.1.0" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="135"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_mod_div_.0.0.1.0.0.2.2" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_mod_div_.0.0.1.0.1" expl="rewrite premises">
      <transf name="compute_specified" >
       <goal name="VC int_to_bv_mod_div_.0.0.1.0.1.0" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_mod_div_.0.0.1.0.2" expl="rewrite premises">
      <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
       <goal name="VC int_to_bv_mod_div_.0.0.1.0.2.0" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="131"/></proof>
       </goal>
       <goal name="VC int_to_bv_mod_div_.0.0.1.0.2.1" expl="rewrite premises">
       <transf name="compute_specified" >
        <goal name="VC int_to_bv_mod_div_.0.0.1.0.2.1.0" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="135"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_mod_div_.0.0.1.0.2.2" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="131"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_mod_div_.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="127"/></proof>
   </goal>
   <goal name="VC int_to_bv_mod_div_.0.2" expl="rewrite premises">
   <proof prover="0" obsolete="true"><result status="valid" time="0.73"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_isum_" expl="VC for mod_isum_">
 <transf name="split_vc" >
  <goal name="VC mod_isum_.0" expl="postcondition">
  <transf name="rewrite" arg1="power_no_">
   <goal name="VC mod_isum_.0.0" expl="postcondition">
   <transf name="instantiate" arg1="mod_isum" arg2="i,k,n">
    <goal name="VC mod_isum_.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC mod_isum_.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC mod_isum_.0.0.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC mod_isum_.0.0.0.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC mod_isum_.0.0.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power_no_">
         <goal name="VC mod_isum_.0.0.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="135"/></proof>
         </goal>
         <goal name="VC mod_isum_.0.0.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="135"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mod_isum_.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="131"/></proof>
     </goal>
     <goal name="VC mod_isum_.0.0.0.2" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.62"/></proof>
     </goal>
     <goal name="VC mod_isum_.0.0.0.3" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mod_isum_.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_isum_z_" expl="VC for mod_isum_z_">
 <transf name="split_vc" >
  <goal name="VC mod_isum_z_.0" expl="postcondition">
  <transf name="instantiate" arg1="mod_isum_z" arg2="i,k,n">
   <goal name="VC mod_isum_z_.0.0" expl="postcondition">
   <transf name="rewrite" arg1="power_no_">
    <goal name="VC mod_isum_z_.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC mod_isum_z_.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC mod_isum_z_.0.0.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC mod_isum_z_.0.0.0.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC mod_isum_z_.0.0.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power_no_">
         <goal name="VC mod_isum_z_.0.0.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="135"/></proof>
         </goal>
         <goal name="VC mod_isum_z_.0.0.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mod_isum_z_.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="131"/></proof>
     </goal>
     <goal name="VC mod_isum_z_.0.0.0.2" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.74"/></proof>
     </goal>
     <goal name="VC mod_isum_z_.0.0.0.3" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mod_isum_z_.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_isum_" expl="VC for div_isum_">
 <transf name="split_vc" >
  <goal name="VC div_isum_.0" expl="postcondition">
  <transf name="instantiate" arg1="div_isum" arg2="i,k,n">
   <goal name="VC div_isum_.0.0" expl="postcondition">
   <transf name="rewrite" arg1="power_no_">
    <goal name="VC div_isum_.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC div_isum_.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC div_isum_.0.0.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC div_isum_.0.0.0.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC div_isum_.0.0.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power_no_">
         <goal name="VC div_isum_.0.0.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
         </goal>
         <goal name="VC div_isum_.0.0.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="135"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC div_isum_.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="131"/></proof>
     </goal>
     <goal name="VC div_isum_.0.0.0.2" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
     </goal>
     <goal name="VC div_isum_.0.0.0.3" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC div_isum_.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_div_mod_" expl="VC for int_to_bv_div_mod_">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_div_mod_.0" expl="postcondition">
  <transf name="instantiate" arg1="int_to_bv_div_mod" arg2="i,k,n">
   <goal name="VC int_to_bv_div_mod_.0.0" expl="postcondition">
   <transf name="rewrite" arg1="Hinst">
    <goal name="VC int_to_bv_div_mod_.0.0.0" expl="postcondition">
    <transf name="apply" arg1="set_equal_bv">
     <goal name="VC int_to_bv_div_mod_.0.0.0.0" expl="apply premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="VC int_to_bv_div_mod_.0.0.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="make_bv_length">
       <goal name="VC int_to_bv_div_mod_.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="VC int_to_bv_div_mod_.0.0.0.0.0.1" expl="rewrite premises">
       <transf name="compute_specified" >
        <goal name="VC int_to_bv_div_mod_.0.0.0.0.0.1.0" expl="rewrite premises">
        <transf name="split_vc" >
         <goal name="VC int_to_bv_div_mod_.0.0.0.0.0.1.0.0" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="138"/></proof>
         </goal>
         <goal name="VC int_to_bv_div_mod_.0.0.0.0.0.1.0.1" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_div_mod_.0.0.0.0.0.2" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="131"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_div_mod_.0.0.0.0.1" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="2.16"/></proof>
      </goal>
      <goal name="VC int_to_bv_div_mod_.0.0.0.0.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_bv_div_mod_.0.0.0.1" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC int_to_bv_div_mod_.0.0.0.1.0" expl="apply premises">
      <transf name="rewrite" arg1="assert_make_bv_b">
       <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0" expl="apply premises">
       <transf name="rewrite" arg1="assert_make_bv_b">
        <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="power_no_">
          <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="power_no_">
           <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="135"/></proof>
           </goal>
           <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises">
           <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
            <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.1.0" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="135"/></proof>
            </goal>
            <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.1.1" expl="rewrite premises">
            <transf name="compute_specified" >
             <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.1.1.0" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.1.1.0.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="142"/></proof>
              </goal>
              <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.1.1.0.1" expl="rewrite premises">
              <proof prover="0" obsolete="true"><result status="valid" time="0.89"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.0.1.2" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
          <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
           <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.1.0" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="135"/></proof>
           </goal>
           <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.1.1" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="2.04"/></proof>
           </goal>
           <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.0.0.1.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="135"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.1" expl="rewrite premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.1.0" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.1.0.0" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="142"/></proof>
          </goal>
          <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.1.0.1" expl="rewrite premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.2" expl="rewrite premises">
        <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
         <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.2.0" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
         </goal>
         <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.2.1" expl="rewrite premises">
         <transf name="compute_specified" >
          <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.2.1.0" expl="rewrite premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.61"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.0.2.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="135"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.1" expl="rewrite premises">
       <transf name="compute_specified" >
        <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.1.0" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.81"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.2" expl="rewrite premises">
       <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
        <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.2.0" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="135"/></proof>
        </goal>
        <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.2.1" expl="rewrite premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.2.1.0" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.84"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_div_mod_.0.0.0.1.0.2.2" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="135"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_div_mod_.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="131"/></proof>
    </goal>
    <goal name="VC int_to_bv_div_mod_.0.0.2" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.71"/></proof>
    </goal>
    <goal name="VC int_to_bv_div_mod_.0.0.3" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_value_" expl="VC for int_to_bv_value_">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_value_.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_value_zero_" expl="VC for int_to_bv_value_zero_">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_value_zero_.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.87"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_zero" expl="VC for int_to_bv_zero">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_zero.0" expl="postcondition">
  <transf name="rewrite" arg1="int_to_bv_value">
   <goal name="VC int_to_bv_zero.0.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="127"/></proof>
   </goal>
   <goal name="VC int_to_bv_zero.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="125"/></proof>
   </goal>
   <goal name="VC int_to_bv_zero.0.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_zero.0.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="125"/></proof>
    </goal>
    <goal name="VC int_to_bv_zero.0.2.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_zero.0.3" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_zero.0.3.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="125"/></proof>
    </goal>
    <goal name="VC int_to_bv_zero.0.3.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_sum" expl="VC for int_to_sum">
 <transf name="split_vc" >
  <goal name="VC int_to_sum.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC int_to_sum.0.0" expl="postcondition">
   <transf name="instantiate" arg1="int_to_bv_sum" arg2="i,n">
    <goal name="VC int_to_sum.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1)) 0 n)" arg2="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)">
     <goal name="VC int_to_sum.0.0.0.0" expl="postcondition">
     <proof prover="3" obsolete="true"><result status="valid" time="3.26"/></proof>
     </goal>
     <goal name="VC int_to_sum.0.0.0.1" expl="equality hypothesis">
     <proof prover="3" obsolete="true"><result status="valid" time="2.24"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_transl" expl="VC for int_to_bv_transl">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_transl.0" expl="postcondition">
  <transf name="rewrite" arg1="int_to_bv_value_">
   <goal name="VC int_to_bv_transl.0.0" expl="postcondition">
   <transf name="rewrite" arg1="int_to_bv_value_">
    <goal name="VC int_to_bv_transl.0.0.0" expl="postcondition">
    <transf name="instantiate" arg1="mod_isum_z_" arg2="i,(n-t),n">
     <goal name="VC int_to_bv_transl.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Hinst">
      <goal name="VC int_to_bv_transl.0.0.0.0.0" expl="postcondition">
      <transf name="instantiate" arg1="div_ind_isum_" arg2="(fun (l:int) -&gt;
       (getbv (int_to_bv i n) @ (l + (n - (n - t))))),(n - t-k-1),(n-t)">
       <goal name="VC int_to_bv_transl.0.0.0.0.0.0" expl="postcondition">
       <transf name="compute_hyp_specified" arg1="in" arg2="Hinst">
        <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(ind_isum
    (fun (l:int) -&gt;
      (getbv (int_to_bv i n) @ (l + (n - (n - t))))
      * power_ 2 (((n - t) - l) - 1))
    0 (n - t))" arg2="(ind_isum
   (fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power_ 2 (((n - t) - 1) - k1))
   0 (n - t))">
         <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="replace" arg1="(fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power_ 2 ((((n - t) - 1) - k1) - (((n - t) - k) - 1)))" arg2="(fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power_ 2 (k-k1))">
           <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="replace" arg1="((n - t) - (((n - t) - k) - 1))" arg2="(k+1)">
            <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="instantiate" arg1="mod_ind_isum_" arg2="(fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))),1,(k+1)">
             <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
             <transf name="compute_hyp_specified" arg1="in" arg2="Hinst">
              <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <transf name="replace" arg1="( mod
  (ind_isum
   (fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t))))
     * power_ 2 (((k + 1) - 1) - k1))
   0 (k + 1))
  (power_ 2 1))" arg2="(mod
  (ind_isum
   (fun (k1:int) -&gt;
     (getbv (int_to_bv i n) @ (k1 + (n - (n - t)))) * power_ 2 (k - k1))
   0 (k + 1))
  2)" arg3="in" arg4="Hinst">
               <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
               <transf name="rewrite" arg1="Hinst">
                <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                <transf name="instantiate" arg1="div_isum_" arg2="i,((n - (k + t)) - 1),n">
                 <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                 <transf name="rewrite" arg1="Hinst">
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                  <transf name="replace" arg1="((n - 1) - ((n - (k + t)) - 1))" arg2="(k+t)">
                   <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                   <transf name="replace" arg1="(n - (n - t))" arg2="t">
                    <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                    <transf name="rewrite" arg1="ind_isum_one">
                     <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                     <transf name="compute_specified" >
                      <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                      <transf name="instantiate" arg1="ind_isum_mod_" arg2="(int_to_bv i n),(k+t)">
                       <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                       <transf name="replace" arg1="(n - ((n - (k + t)) - 1))" arg2="(k+t+1)">
                        <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                        <transf name="rewrite" arg1="Hinst">
                         <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                         <transf name="rewrite" arg1="mult_one">
                          <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                          <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
                          </goal>
                          <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                          <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="139"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                         <transf name="split_vc" >
                          <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0">
                          <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
                          </goal>
                          <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1">
                          <transf name="replace" arg1="(length (int_to_bv i n))" arg2="n">
                           <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0">
                           <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
                           </goal>
                           <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis">
                           <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="139"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
                        <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="133"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="133"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="133"/></proof>
                  </goal>
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
                  <proof prover="0" obsolete="true"><result status="valid" time="0.65"/></proof>
                  </goal>
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="133"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="133"/></proof>
                </goal>
                <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
                <transf name="apply" arg1="set_binary">
                 <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises">
                 <transf name="compute_specified" >
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="137"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
               <transf name="replace" arg1="(power_ 2 1)" arg2="2">
                <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis">
                <transf name="apply" arg1="mod_eq">
                 <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
                 <transf name="apply" arg1="ind_isum_eq_gen">
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
                  <transf name="compute_specified" >
                   <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises">
                   <proof prover="3" obsolete="true"><result status="valid" time="0.46"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises">
                  <proof prover="3" obsolete="true"><result status="valid" time="0.37"/></proof>
                  </goal>
                  <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="apply premises">
                  <proof prover="3" obsolete="true"><result status="valid" time="0.34"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis">
                <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="138"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
            <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
           <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="137"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="133"/></proof>
          </goal>
          <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
          <transf name="apply" arg1="set_binary">
           <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.2.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="136"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_bv_transl.0.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="3" obsolete="true"><result status="valid" time="3.76"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_transl.0.0.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="133"/></proof>
      </goal>
      <goal name="VC int_to_bv_transl.0.0.0.0.2" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
      </goal>
      <goal name="VC int_to_bv_transl.0.0.0.0.3" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_transl.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
    </goal>
    <goal name="VC int_to_bv_transl.0.0.2" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
    </goal>
    <goal name="VC int_to_bv_transl.0.0.3" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_transl.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="133"/></proof>
   </goal>
   <goal name="VC int_to_bv_transl.0.2" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="134"/></proof>
   </goal>
   <goal name="VC int_to_bv_transl.0.3" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_transl_div" expl="VC for int_to_bv_transl_div">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_transl_div.0" expl="postcondition">
  <transf name="rewrite" arg1="int_to_bv_value_">
   <goal name="VC int_to_bv_transl_div.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC int_to_bv_transl_div.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="div_div">
     <goal name="VC int_to_bv_transl_div.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="int_to_bv_value_">
      <goal name="VC int_to_bv_transl_div.0.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H2">
       <goal name="VC int_to_bv_transl_div.0.0.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="mod_eq">
        <goal name="VC int_to_bv_transl_div.0.0.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="power__sum_rev">
         <goal name="VC int_to_bv_transl_div.0.0.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="134"/></proof>
         </goal>
         <goal name="VC int_to_bv_transl_div.0.0.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="134"/></proof>
         </goal>
         <goal name="VC int_to_bv_transl_div.0.0.0.0.0.0.0.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="134"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_transl_div.0.0.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="134"/></proof>
      </goal>
      <goal name="VC int_to_bv_transl_div.0.0.0.0.2" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
      </goal>
      <goal name="VC int_to_bv_transl_div.0.0.0.0.3" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="134"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_bv_transl_div.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="134"/></proof>
     </goal>
     <goal name="VC int_to_bv_transl_div.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="136"/></proof>
     </goal>
     <goal name="VC int_to_bv_transl_div.0.0.0.3" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="136"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_transl_div.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="134"/></proof>
   </goal>
   <goal name="VC int_to_bv_transl_div.0.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_transl_div.0.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="136"/></proof>
    </goal>
    <goal name="VC int_to_bv_transl_div.0.2.1" expl="rewrite premises">
    <transf name="rewrite" arg1="H2">
     <goal name="VC int_to_bv_transl_div.0.2.1.0" expl="rewrite premises">
     <transf name="assert" arg1="(div i (power_ 2 (n - t)) * power_ 2 (n-t) &lt; power_ 2 n)">
      <goal name="VC int_to_bv_transl_div.0.2.1.0.0" expl="asserted formula">
      <proof prover="0" obsolete="true"><result status="valid" time="0.87"/></proof>
      </goal>
      <goal name="VC int_to_bv_transl_div.0.2.1.0.1" expl="rewrite premises">
      <transf name="case" arg1="(power_  2 t &lt;= div i (power_ 2 (n - t)) )">
       <goal name="VC int_to_bv_transl_div.0.2.1.0.1.0" expl="true case (rewrite premises)">
       <transf name="assert" arg1="( power_ 2 (t+(n-t)) &lt;= div i (power_ 2 (n - t)) * power_ 2 (n-t))">
        <goal name="VC int_to_bv_transl_div.0.2.1.0.1.0.0" expl="asserted formula">
        <transf name="rewrite" arg1="power__sum">
         <goal name="VC int_to_bv_transl_div.0.2.1.0.1.0.0.0" expl="asserted formula">
         <proof prover="0" obsolete="true"><result status="valid" time="0.73"/></proof>
         </goal>
         <goal name="VC int_to_bv_transl_div.0.2.1.0.1.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="138"/></proof>
         </goal>
         <goal name="VC int_to_bv_transl_div.0.2.1.0.1.0.0.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="138"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_transl_div.0.2.1.0.1.0.1" expl="true case (rewrite premises)">
        <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="138"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_transl_div.0.2.1.0.1.1" expl="false case (rewrite premises)">
       <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="138"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_transl_div.0.3" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="134"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_int_to_bv_inv" expl="VC for product_int_to_bv_inv">
 <transf name="split_vc" >
  <goal name="VC product_int_to_bv_inv.0" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC product_int_to_bv_inv.0.0" expl="VC for product_int_to_bv_inv">
   <transf name="split_vc" >
    <goal name="VC product_int_to_bv_inv.0.0.0" expl="postcondition">
    <transf name="apply" arg1="ind_iproduct_one">
     <goal name="VC product_int_to_bv_inv.0.0.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC product_int_to_bv_inv.0.0.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC product_int_to_bv_inv.0.0.0.0.0.0" expl="apply premises">
       <transf name="replace" arg1="(getbv (int_to_bv i n) @ k)" arg2="0">
        <goal name="VC product_int_to_bv_inv.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="133"/></proof>
        </goal>
        <goal name="VC product_int_to_bv_inv.0.0.0.0.0.0.1" expl="equality hypothesis">
        <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="135"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC product_int_to_bv_inv.0.0.1" expl="postcondition">
    <transf name="apply" arg1="non_null_product_bitvec_inv">
     <goal name="VC product_int_to_bv_inv.0.0.1.0" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="131"/></proof>
     </goal>
     <goal name="VC product_int_to_bv_inv.0.0.1.1" expl="apply premises">
     <transf name="case" arg1="(forall i1:int. 0 &lt;= i1 /\ i1 &lt; n -&gt; (getbv (int_to_bv i n) @ i1) = 0)
">
      <goal name="VC product_int_to_bv_inv.0.0.1.1.0" expl="true case (apply premises)">
      <transf name="assert" arg1="(i = 0)">
       <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0" expl="asserted formula">
       <transf name="instantiate" arg1="int_to_sum" arg2="i,n">
        <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0.0" expl="asserted formula">
        <transf name="rewrite" arg1="Hinst">
         <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0.0.0" expl="asserted formula">
         <transf name="apply" arg1="ind_isum_null">
          <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.76"/></proof>
          </goal>
          <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0.0.0.1" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0.0.0.1.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="137"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0.0.1" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
         </goal>
         <goal name="VC product_int_to_bv_inv.0.0.1.1.0.0.0.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC product_int_to_bv_inv.0.0.1.1.0.1" expl="true case (apply premises)">
       <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="129"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC product_int_to_bv_inv.0.0.1.1.1" expl="false case (apply premises)">
      <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_to_int" expl="VC for bin_to_int">
 <transf name="split_vc" >
  <goal name="VC bin_to_int.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_to_int.0.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.79"/></proof>
   </goal>
   <goal name="VC bin_to_int.0.1" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_to_int.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="125"/></proof>
  </goal>
  <goal name="VC bin_to_int.2" expl="postcondition">
  <transf name="rewrite" arg1="H1">
   <goal name="VC bin_to_int.2.0" expl="postcondition">
   <transf name="apply" arg1="ind_isum_eq_gen">
    <goal name="VC bin_to_int.2.0.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC bin_to_int.2.0.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC bin_to_int.2.0.0.0.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_to_int.2.0.1" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
    </goal>
    <goal name="VC bin_to_int.2.0.2" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_to_int.3" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC bin_to_int.3.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bin" expl="VC for int_to_bin">
 <transf name="split_vc" >
  <goal name="VC int_to_bin.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="127"/></proof>
  </goal>
  <goal name="VC int_to_bin.1" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC int_to_bin.1.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC int_to_bin.1.0.0" expl="postcondition">
    <transf name="instantiate" arg1="int_to_bv_sum" arg2="i,n">
     <goal name="VC int_to_bin.1.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power_ 2 ((n - 1) - k)) 0 n)" arg2="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - 1) - k)) 0 n)">
      <goal name="VC int_to_bin.1.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="Hinst">
       <goal name="VC int_to_bin.1.0.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="142"/></proof>
       </goal>
       <goal name="VC int_to_bin.1.0.0.0.0.1" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="142"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bin.1.0.0.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="ind_isum_eq">
       <goal name="VC int_to_bin.1.0.0.0.1.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC int_to_bin.1.0.0.0.1.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC int_to_bin.1.0.0.0.1.0.0.0" expl="apply premises">
         <transf name="apply" arg1="mult_eq">
          <goal name="VC int_to_bin.1.0.0.0.1.0.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="146"/></proof>
          </goal>
          <goal name="VC int_to_bin.1.0.0.0.1.0.0.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="148"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bin.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="135"/></proof>
  </goal>
  <goal name="VC int_to_bin.3" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC int_to_bin.3.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC int_to_bin.3.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC int_to_bin.3.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="4.40"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_tail" expl="VC for int_to_bv_tail">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_tail.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="127"/></proof>
  </goal>
  <goal name="VC int_to_bv_tail.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="131"/></proof>
  </goal>
  <goal name="VC int_to_bv_tail.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="133"/></proof>
  </goal>
  <goal name="VC int_to_bv_tail.3" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_tail.3.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="134"/></proof>
   </goal>
   <goal name="VC int_to_bv_tail.3.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="134"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_tail.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="137"/></proof>
  </goal>
  <goal name="VC int_to_bv_tail.5" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="141"/></proof>
  </goal>
  <goal name="VC int_to_bv_tail.6" expl="precondition">
  <transf name="rewrite" arg1="tail_bits_def">
   <goal name="VC int_to_bv_tail.6.0" expl="precondition">
   <transf name="rewrite" arg1="H7">
    <goal name="VC int_to_bv_tail.6.0.0" expl="precondition">
    <transf name="rewrite" arg1="power_to_">
     <goal name="VC int_to_bv_tail.6.0.0.0" expl="precondition">
     <transf name="rewrite" arg1="int_to_bv_transl">
      <goal name="VC int_to_bv_tail.6.0.0.0.0" expl="precondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC int_to_bv_tail.6.0.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="146"/></proof>
      </goal>
      <goal name="VC int_to_bv_tail.6.0.0.0.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="146"/></proof>
      </goal>
      <goal name="VC int_to_bv_tail.6.0.0.0.3" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_bv_tail.6.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="146"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_tail.6.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="148"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_tail.6.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="146"/></proof>
   </goal>
   <goal name="VC int_to_bv_tail.6.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_tail.6.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="146"/></proof>
    </goal>
    <goal name="VC int_to_bv_tail.6.2.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="146"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_tail.7" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_sum_dec" expl="VC for bound_sum_dec">
 <transf name="eliminate_let" >
  <goal name="VC bound_sum_dec.0" expl="VC for bound_sum_dec">
  <transf name="split_vc" >
   <goal name="VC bound_sum_dec.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="129"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC bound_sum_dec.0.1.0" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
    </goal>
    <goal name="VC bound_sum_dec.0.1.1" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bound_sum_dec.0.2" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.3" expl="precondition">
   <transf name="exists" arg1="(length bv - e&#39; +1)">
    <goal name="VC bound_sum_dec.0.3.0">
    <transf name="split_vc" >
     <goal name="VC bound_sum_dec.0.3.0.0">
     <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="129"/></proof>
     </goal>
     <goal name="VC bound_sum_dec.0.3.0.1">
     <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="129"/></proof>
     </goal>
     <goal name="VC bound_sum_dec.0.3.0.2">
     <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bound_sum_dec.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="127"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.5" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="133"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.6" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="133"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.7" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="129"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.8" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC bound_sum_dec.0.8.0" expl="precondition">
    <transf name="eliminate_if" >
     <goal name="VC bound_sum_dec.0.8.0.0" expl="VC for bound_sum_dec">
     <transf name="split_vc" >
      <goal name="VC bound_sum_dec.0.8.0.0.0" expl="precondition">
      <proof prover="0" obsolete="true"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC bound_sum_dec.0.8.0.0.1" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="136"/></proof>
      </goal>
      <goal name="VC bound_sum_dec.0.8.0.0.2" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="134"/></proof>
      </goal>
      <goal name="VC bound_sum_dec.0.8.0.0.3" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="134"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bound_sum_dec.0.9" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="131"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.10" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="135"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.11" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.12" expl="precondition">
   <transf name="rewrite" arg1="H2">
    <goal name="VC bound_sum_dec.0.12.0" expl="precondition">
    <transf name="replace" arg1="(ind_isum
  (fun (b:int) -&gt;
    (fun (l:int) -&gt;
      if 1 &lt;= l /\ l &lt;= length bv then getbv bv l * power 2 (length bv - l)
      else 0)
    @ ((fun (l:int) -&gt; (length bv - l) + 1) @ b))
  1 ((length bv - i) + 2))" arg2="(ind_isum
  (fun (l:int) -&gt;
    if 1 &lt;= l /\ l &lt;= length bv
    then getbv bv ((length bv - l) + 1) * power 2 (l - 1) else 0)
  1 ((length bv - i) + 2))">
     <goal name="VC bound_sum_dec.0.12.0.0" expl="precondition">
     <proof prover="3" obsolete="true"><result status="valid" time="5.35"/></proof>
     </goal>
     <goal name="VC bound_sum_dec.0.12.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC bound_sum_dec.0.12.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bound_sum_dec.0.12.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bound_sum_dec.0.12.0.1.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="135"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bound_sum_dec.0.13" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="6.76"/></proof>
   </goal>
   <goal name="VC bound_sum_dec.0.14" expl="postcondition">
   <transf name="replace" arg1="(ind_isum (fun (l:int) -&gt; getbv bv l * power 2 (length bv - l)) i
  (length bv + 1))" arg2="( ind_isum
  (fun (l:int) -&gt;
    if 1 &lt;= l /\ l &lt;= length bv then getbv bv l * power 2 (length bv - l)
    else 0)
  i (length bv + 1))">
    <goal name="VC bound_sum_dec.0.14.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="4.22"/></proof>
    </goal>
    <goal name="VC bound_sum_dec.0.14.1" expl="equality hypothesis">
    <proof prover="3" obsolete="true"><result status="valid" time="6.07"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_to_bv" expl="VC for bv_to_int_to_bv">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_to_bv.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="129"/></proof>
  </goal>
  <goal name="VC bv_to_int_to_bv.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bv_to_int_to_bv.1.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="130"/></proof>
   </goal>
   <goal name="VC bv_to_int_to_bv.1.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="130"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_to_bv.2" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC bv_to_int_to_bv.2.0" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_sum">
    <goal name="VC bv_to_int_to_bv.2.0.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
  (fun (k:int) -&gt;
    getbv (int_to_bv i n) k * power 2 (length (int_to_bv i n) - k))
  1 (length (int_to_bv i n) + 1))" arg2="(ind_isum (fun (k:int) -&gt; getbv (int_to_bv i n) k * power 2 (n - k)) 1
    (n + 1))">
     <goal name="VC bv_to_int_to_bv.2.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(ind_isum
  (fun (k:int) -&gt;
    (getbv (int_to_bv i n) @ k) * power 2 ((length (int_to_bv i n) - 1) - k))
  0 (length (int_to_bv i n)) )" arg2="(ind_isum
    (fun (k:int) -&gt; (getbv (int_to_bv i n) @ k) * power 2 ((n - k) - 1)) 0 n)">
      <goal name="VC bv_to_int_to_bv.2.0.0.0.0" expl="postcondition">
      <proof prover="3" obsolete="true"><result status="valid" time="2.31"/></proof>
      </goal>
      <goal name="VC bv_to_int_to_bv.2.0.0.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="ind_isum_eq_gen">
       <goal name="VC bv_to_int_to_bv.2.0.0.0.1.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC bv_to_int_to_bv.2.0.0.0.1.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC bv_to_int_to_bv.2.0.0.0.1.0.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.56"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC bv_to_int_to_bv.2.0.0.0.1.1" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="127"/></proof>
       </goal>
       <goal name="VC bv_to_int_to_bv.2.0.0.0.1.2" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="130"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_to_bv.2.0.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC bv_to_int_to_bv.2.0.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_to_int_to_bv.2.0.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bv_to_int_to_bv.2.0.0.1.0.0.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.93"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_to_bv.2.0.0.1.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="127"/></proof>
      </goal>
      <goal name="VC bv_to_int_to_bv.2.0.0.1.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="130"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_to_bv_" expl="VC for bv_to_int_to_bv_">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_to_bv_.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="129"/></proof>
  </goal>
  <goal name="VC bv_to_int_to_bv_.1" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.80"/></proof>
  </goal>
  <goal name="VC bv_to_int_to_bv_.2" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="0.91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tail_bits_sum" expl="VC for tail_bits_sum">
 <transf name="split_vc" >
  <goal name="VC tail_bits_sum.0" expl="postcondition">
  <transf name="rewrite" arg1="tail_bits_def">
   <goal name="VC tail_bits_sum.0.0" expl="postcondition">
   <transf name="instantiate" arg1="mod_isum" arg2="i,(n-1),n">
    <goal name="VC tail_bits_sum.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC tail_bits_sum.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC tail_bits_sum.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC tail_bits_sum.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC tail_bits_sum.0.0.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="129"/></proof>
      </goal>
      <goal name="VC tail_bits_sum.0.0.0.0.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC tail_bits_sum.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="129"/></proof>
     </goal>
     <goal name="VC tail_bits_sum.0.0.0.2" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC tail_bits_sum.0.0.0.2.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="129"/></proof>
      </goal>
      <goal name="VC tail_bits_sum.0.0.0.2.1">
      <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="129"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC tail_bits_sum.0.0.0.3" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC tail_bits_sum.0.0.0.3.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="129"/></proof>
      </goal>
      <goal name="VC tail_bits_sum.0.0.0.3.1">
      <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC tail_bits_sum.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="127"/></proof>
   </goal>
   <goal name="VC tail_bits_sum.0.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC tail_bits_sum.0.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="127"/></proof>
    </goal>
    <goal name="VC tail_bits_sum.0.2.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_to_int" expl="VC for int_to_bv_to_int">
 <transf name="eliminate_let" >
  <goal name="VC int_to_bv_to_int.0" expl="VC for int_to_bv_to_int">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_to_int.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_to_int.0.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="123"/></proof>
    </goal>
    <goal name="VC int_to_bv_to_int.0.0.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="123"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_to_int.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="129"/></proof>
   </goal>
   <goal name="VC int_to_bv_to_int.0.2" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
   </goal>
   <goal name="VC int_to_bv_to_int.0.3" expl="precondition">
   <transf name="rewrite" arg1="int_to_bv_value">
    <goal name="VC int_to_bv_to_int.0.3.0" expl="precondition">
    <transf name="rewrite" arg1="H6">
     <goal name="VC int_to_bv_to_int.0.3.0.0" expl="precondition">
     <transf name="rewrite" arg1="div_ind_isum">
      <goal name="VC int_to_bv_to_int.0.3.0.0.0" expl="precondition">
      <transf name="replace" arg1="(ind_isum
   (fun (k:int) -&gt;
     (getbv bv @ k) * power 2 (((length bv - 1) - k) - ((length bv - i) - 1)))
   0 (length bv - ((length bv - i) - 1)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     (getbv bv @ k) * power 2 (i-k))
   0 (i+1))">
       <goal name="VC int_to_bv_to_int.0.3.0.0.0.0" expl="precondition">
       <transf name="instantiate" arg1="mod_ind_isum" arg2="(getbv bv),1,(i+1)">
        <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0" expl="precondition">
        <transf name="replace" arg1="((i + 1) - 1)" arg2="i" arg3="in" arg4="Hinst">
         <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0" expl="precondition">
         <transf name="replace" arg1="(power 2 1)" arg2="2" arg3="in" arg4="Hinst">
          <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0" expl="precondition">
          <transf name="rewrite" arg1="Hinst">
           <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.0" expl="precondition">
           <transf name="rewrite" arg1="ind_isum_one">
            <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.0.0" expl="precondition">
            <transf name="compute_specified" >
             <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.0.0.0" expl="precondition">
             <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="140"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises">
           <transf name="split_vc" >
            <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.1.0">
            <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="137"/></proof>
            </goal>
            <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.1.1">
            <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="137"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.0.1" expl="equality hypothesis">
          <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="140"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_bv_to_int.0.3.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_bv_to_int.0.3.0.0.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="ind_isum_eq_gen">
        <goal name="VC int_to_bv_to_int.0.3.0.0.0.1.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC int_to_bv_to_int.0.3.0.0.0.1.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC int_to_bv_to_int.0.3.0.0.0.1.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_bv_to_int.0.3.0.0.0.1.1" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
        </goal>
        <goal name="VC int_to_bv_to_int.0.3.0.0.0.1.2" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_to_int.0.3.0.0.1" expl="rewrite premises">
      <transf name="split_vc" >
       <goal name="VC int_to_bv_to_int.0.3.0.0.1.0" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="137"/></proof>
       </goal>
       <goal name="VC int_to_bv_to_int.0.3.0.0.1.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="137"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_bv_to_int.0.3.0.0.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_to_int.0.3.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
    </goal>
    <goal name="VC int_to_bv_to_int.0.3.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_to_bv_to_int.0.3.2.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="137"/></proof>
     </goal>
     <goal name="VC int_to_bv_to_int.0.3.2.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="139"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_bv_to_int.0.3.3" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_to_bv_to_int.0.3.3.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="137"/></proof>
     </goal>
     <goal name="VC int_to_bv_to_int.0.3.3.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_to_int.0.4" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_to_int_" expl="VC for int_to_bv_to_int_">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_to_int_.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="127"/></proof>
  </goal>
  <goal name="VC int_to_bv_to_int_.1" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC int_to_bv_to_int_.1.0" expl="apply premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="128"/></proof>
   </goal>
   <goal name="VC int_to_bv_to_int_.1.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_to_int_.1.1.0" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.77"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_to_int" expl="VC for concat_to_int">
 <transf name="eliminate_let" >
  <goal name="VC concat_to_int.0" expl="VC for concat_to_int">
  <transf name="split_vc" >
   <goal name="VC concat_to_int.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC concat_to_int.0.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="127"/></proof>
    </goal>
    <goal name="VC concat_to_int.0.0.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_to_int.0.1" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.97"/></proof>
   </goal>
   <goal name="VC concat_to_int.0.2" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.66"/></proof>
   </goal>
   <goal name="VC concat_to_int.0.3" expl="precondition">
   <transf name="exists" arg1="(e&#39;+1)">
    <goal name="VC concat_to_int.0.3.0">
    <transf name="split_vc" >
     <goal name="VC concat_to_int.0.3.0.0">
     <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
     </goal>
     <goal name="VC concat_to_int.0.3.0.1">
     <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="140"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_to_int.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="141"/></proof>
   </goal>
   <goal name="VC concat_to_int.0.5" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="3.40"/></proof>
   </goal>
   <goal name="VC concat_to_int.0.6" expl="assertion">
   <transf name="replace" arg1="(ind_isum (fun (k:int) -&gt; getbv bv k * power 2 (length bv - k)) 1
  (length bv + 1))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt;= length bv then getbv bv k * power 2 (length bv - k)
    else 0)1 (length bv + 1) )">
    <goal name="VC concat_to_int.0.6.0" expl="assertion">
    <transf name="rewrite" arg1="H">
     <goal name="VC concat_to_int.0.6.0.0" expl="assertion">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC concat_to_int.0.6.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC concat_to_int.0.6.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC concat_to_int.0.6.0.0.0.0.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.79"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC concat_to_int.0.6.1" expl="equality hypothesis">
    <transf name="apply" arg1="ind_isum_eq">
     <goal name="VC concat_to_int.0.6.1.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC concat_to_int.0.6.1.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC concat_to_int.0.6.1.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="143"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_to_int.0.7" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC concat_to_int.0.7.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="145"/></proof>
    </goal>
    <goal name="VC concat_to_int.0.7.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_to_int.0.8" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
   </goal>
   <goal name="VC concat_to_int.0.9" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC concat_to_int.0.9.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="145"/></proof>
    </goal>
    <goal name="VC concat_to_int.0.9.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_to_int.0.10" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="149"/></proof>
   </goal>
   <goal name="VC concat_to_int.0.11" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_sum">
    <goal name="VC concat_to_int.0.11.0" expl="postcondition">
    <transf name="rewrite" arg1="bv_to_int_sum">
     <goal name="VC concat_to_int.0.11.0.0" expl="postcondition">
     <transf name="replace" arg1="(length (concat_l bv i))" arg2="(length bv + 1)">
      <goal name="VC concat_to_int.0.11.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="ind_isum_plus_one">
       <goal name="VC concat_to_int.0.11.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="add_eq_inv">
        <goal name="VC concat_to_int.0.11.0.0.0.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC concat_to_int.0.11.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="143"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC concat_to_int.0.11.0.0.0.0.1" expl="apply premises">
        <transf name="apply" arg1="goal_comm">
         <goal name="VC concat_to_int.0.11.0.0.0.0.1.0" expl="apply premises">
         <transf name="rewrite" arg1="ind_isum_transl_plus_one">
          <goal name="VC concat_to_int.0.11.0.0.0.0.1.0.0" expl="apply premises">
          <transf name="apply" arg1="ind_isum_eq">
           <goal name="VC concat_to_int.0.11.0.0.0.0.1.0.0.0" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC concat_to_int.0.11.0.0.0.0.1.0.0.0.0" expl="apply premises">
            <transf name="compute_specified" >
             <goal name="VC concat_to_int.0.11.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
             <proof prover="0" obsolete="true"><result status="valid" time="0.63"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC concat_to_int.0.11.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="151"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC concat_to_int.0.11.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="143"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bounded_to_int" expl="VC for bounded_to_int">
 <transf name="split_vc" >
  <goal name="VC bounded_to_int.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="125"/></proof>
  </goal>
  <goal name="VC bounded_to_int.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="129"/></proof>
  </goal>
  <goal name="VC bounded_to_int.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bounded_to_int.2.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="129"/></proof>
   </goal>
   <goal name="VC bounded_to_int.2.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bounded_to_int.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="133"/></proof>
  </goal>
  <goal name="VC bounded_to_int.4" expl="variant decrease">
  <transf name="split_vc" >
   <goal name="VC bounded_to_int.4.0" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="133"/></proof>
   </goal>
   <goal name="VC bounded_to_int.4.1" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bounded_to_int.5" expl="postcondition">
  <proof prover="5" obsolete="true"><result status="valid" time="0.92"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_to_int_value" expl="VC for int_to_bv_to_int_value">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_to_int_value.0" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC int_to_bv_to_int_value.0.0" expl="VC for int_to_bv_to_int_value">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_to_int_value.0.0.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="129"/></proof>
    </goal>
    <goal name="VC int_to_bv_to_int_value.0.0.1" expl="postcondition">
    <proof prover="1" obsolete="true"><result status="valid" time="0.71"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_to_int_gen" expl="VC for int_to_bv_to_int_gen">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_to_int_gen.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="125"/></proof>
  </goal>
  <goal name="VC int_to_bv_to_int_gen.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="127"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_mod" expl="VC for bv_to_int_mod">
 <transf name="eliminate_let" >
  <goal name="VC bv_to_int_mod.0" expl="VC for bv_to_int_mod">
  <transf name="split_vc" >
   <goal name="VC bv_to_int_mod.0.0" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_sum">
    <goal name="VC bv_to_int_mod.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="mod_ind_isum">
     <goal name="VC bv_to_int_mod.0.0.0.0" expl="postcondition">
     <proof prover="3" obsolete="true"><result status="valid" time="1.76"/></proof>
     </goal>
     <goal name="VC bv_to_int_mod.0.0.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC bv_to_int_mod.0.0.0.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="125"/></proof>
      </goal>
      <goal name="VC bv_to_int_mod.0.0.0.1.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="125"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_mod.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="127"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_mod_rev" expl="VC for bv_to_int_mod_rev">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_mod_rev.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bv_to_int_mod_rev.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="125"/></proof>
   </goal>
   <goal name="VC bv_to_int_mod_rev.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="125"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_mod_rev.1" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="1.99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_mod_gen" expl="VC for bv_to_int_mod_gen">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_mod_gen.0" expl="postcondition">
  <transf name="apply" arg1="bv_to_int_mod">
   <goal name="VC bv_to_int_mod_gen.0.0" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC bv_to_int_mod_gen.0.0.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="127"/></proof>
    </goal>
    <goal name="VC bv_to_int_mod_gen.0.0.1" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC to_int_head_tail" expl="VC for to_int_head_tail">
 <transf name="split_vc" >
  <goal name="VC to_int_head_tail.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="123"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="127"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC to_int_head_tail.2.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="129"/></proof>
   </goal>
   <goal name="VC to_int_head_tail.2.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC to_int_head_tail.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="131"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="135"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.5" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="135"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.6" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="141"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.7" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="143"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.8" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC to_int_head_tail.8.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="143"/></proof>
   </goal>
   <goal name="VC to_int_head_tail.8.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC to_int_head_tail.9" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="145"/></proof>
  </goal>
  <goal name="VC to_int_head_tail.10" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC my_map" expl="VC for my_map">
 <transf name="split_vc" >
  <goal name="VC my_map.0" expl="variant decrease">
  <transf name="split_vc" >
   <goal name="VC my_map.0.0" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="128"/></proof>
   </goal>
   <goal name="VC my_map.0.1" expl="variant decrease">
   <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC my_map.1" expl="postcondition">
  <transf name="apply" arg1="set_equal">
   <goal name="VC my_map.1.0" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC my_map.1.0.0" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.79"/></proof>
    </goal>
    <goal name="VC my_map.1.0.1" expl="apply premises">
    <transf name="eliminate_let" >
     <goal name="VC my_map.1.0.1.0" expl="apply premises">
     <transf name="case" arg1="(e = f (choose u))">
      <goal name="VC my_map.1.0.1.0.0" expl="true case (apply premises)">
      <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="134"/></proof>
      </goal>
      <goal name="VC my_map.1.0.1.0.1" expl="false case (apply premises)">
      <transf name="assert" arg1="(mem e (map1 f (remove (choose u) u)))">
       <goal name="VC my_map.1.0.1.0.1.0" expl="asserted formula">
       <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="134"/></proof>
       </goal>
       <goal name="VC my_map.1.0.1.0.1.1" expl="false case (apply premises)">
       <proof prover="3" obsolete="true"><result status="valid" time="2.04"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC my_map.1.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC my_map.1.1.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="129"/></proof>
    </goal>
    <goal name="VC my_map.1.1.1" expl="apply premises">
    <proof prover="3" obsolete="true"><result status="valid" time="2.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC my_map_to_map" expl="VC for my_map_to_map">
 <transf name="split_vc" >
  <goal name="VC my_map_to_map.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="123"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_to_my_map" expl="VC for map_to_my_map">
 <transf name="split_vc" >
  <goal name="VC map_to_my_map.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="123"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mapz_pre" expl="VC for mapz_pre">
 <transf name="split_vc" >
  <goal name="VC mapz_pre.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="123"/></proof>
  </goal>
  <goal name="VC mapz_pre.1" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC mapz_pre.1.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC mapz_pre.1.0.0" expl="postcondition">
    <transf name="rewrite" arg1="my_map_spec">
     <goal name="VC mapz_pre.1.0.0.0" expl="postcondition">
     <transf name="apply" arg1="set_map_mem">
      <goal name="VC mapz_pre.1.0.0.0.0" expl="apply premises">
      <transf name="compute_in_goal" >
       <goal name="VC mapz_pre.1.0.0.0.0.0" expl="apply premises">
       <transf name="exists" arg1="( make_bv (fun (i:int) -&gt; 0) (n-1))">
        <goal name="VC mapz_pre.1.0.0.0.0.0.0">
        <transf name="split_vc" >
         <goal name="VC mapz_pre.1.0.0.0.0.0.0.0">
         <proof prover="3" obsolete="true"><result status="valid" time="1.91"/></proof>
         </goal>
         <goal name="VC mapz_pre.1.0.0.0.0.0.0.1">
         <transf name="rewrite" arg1="concat_l_def">
          <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0">
          <transf name="apply" arg1="set_equal_bv">
           <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0" expl="apply premises">
           <transf name="rewrite" arg1="make_bv_length">
            <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="make_bv_length">
             <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises">
             <transf name="rewrite" arg1="make_bv_length">
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="132"/></proof>
              </goal>
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="5.53" steps="375"/></proof>
              </goal>
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="132"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
             <transf name="compute_specified" >
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0.1.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="139"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="134"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="5.57" steps="372"/></proof>
            </goal>
            <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="132"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0" expl="apply premises">
            <transf name="rewrite" arg1="assert_make_bv_b">
             <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises">
             <transf name="rewrite" arg1="assert_make_bv_b">
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises">
               <transf name="rewrite" arg1="assert_make_bv">
                <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="143"/></proof>
                </goal>
                <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises">
                <transf name="split_vc" >
                 <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.1.0" expl="rewrite premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="3.09" steps="142"/></proof>
                 </goal>
                 <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.1.1" expl="rewrite premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="2.23" steps="142"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="136"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises">
              <transf name="split_vc" >
               <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.1.0" expl="rewrite premises">
               <proof prover="3" obsolete="true"><result status="valid" time="1.47"/></proof>
               </goal>
               <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.1.1" expl="rewrite premises">
               <proof prover="3" obsolete="true"><result status="valid" time="1.42"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.0.2" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="1.52"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="2.44" steps="142"/></proof>
              </goal>
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.1.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="2.32" steps="142"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.2" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.2.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="136"/></proof>
              </goal>
              <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.0.1.0.2.1" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="2.13"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.1" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.1.0" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="132"/></proof>
           </goal>
           <goal name="VC mapz_pre.1.0.0.0.0.0.0.1.1.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="132"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapz_pre.2" expl="postcondition">
  <transf name="assert" arg1="(exists f. mem f s /\ e = concat_l f 0)">
   <goal name="VC mapz_pre.2.0" expl="asserted formula">
   <transf name="instantiate" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 0),s,e">
    <goal name="VC mapz_pre.2.0.0" expl="asserted formula">
    <transf name="destruct" arg1="Hinst">
     <goal name="VC mapz_pre.2.0.0.0" expl="destruct premise">
     <proof prover="3" obsolete="true"><result status="valid" time="2.39"/></proof>
     </goal>
     <goal name="VC mapz_pre.2.0.0.1" expl="asserted formula">
     <transf name="destruct" arg1="Hinst">
      <goal name="VC mapz_pre.2.0.0.1.0" expl="asserted formula">
      <transf name="exists" arg1="a">
       <goal name="VC mapz_pre.2.0.0.1.0.0">
       <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="137"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mapz_pre.2.1" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapz_pre.3" expl="postcondition">
  <transf name="instantiate" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 0),s,e">
   <goal name="VC mapz_pre.3.0" expl="postcondition">
   <transf name="destruct" arg1="Hinst">
    <goal name="VC mapz_pre.3.0.0" expl="destruct premise">
    <proof prover="3" obsolete="true"><result status="valid" time="2.81"/></proof>
    </goal>
    <goal name="VC mapz_pre.3.0.1" expl="postcondition">
    <transf name="destruct" arg1="Hinst">
     <goal name="VC mapz_pre.3.0.1.0" expl="postcondition">
     <transf name="exists" arg1="a">
      <goal name="VC mapz_pre.3.0.1.0.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapz_pre.4" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="1.47"/></proof>
  </goal>
  <goal name="VC mapz_pre.5" expl="postcondition">
  <transf name="rewrite" arg1="H6">
   <goal name="VC mapz_pre.5.0" expl="postcondition">
   <transf name="apply" arg1="set_map_mem">
    <goal name="VC mapz_pre.5.0.0" expl="apply premises">
    <transf name="exists" arg1="(make_bv (fun i -&gt; getbv e (i+1)) (n-1))">
     <goal name="VC mapz_pre.5.0.0.0">
     <transf name="split_vc" >
      <goal name="VC mapz_pre.5.0.0.0.0">
      <transf name="assert" arg1="(length (make_bv (fun (i:int) -&gt; getbv e @ (i + 1)) (n - 1)) = n-1)">
       <goal name="VC mapz_pre.5.0.0.0.0.0" expl="asserted formula">
       <transf name="rewrite" arg1="make_bv_length">
        <goal name="VC mapz_pre.5.0.0.0.0.0.0" expl="asserted formula">
        <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="133"/></proof>
        </goal>
        <goal name="VC mapz_pre.5.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="3.62"/></proof>
        </goal>
        <goal name="VC mapz_pre.5.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mapz_pre.5.0.0.0.0.1">
       <transf name="split_all_full" >
        <goal name="VC mapz_pre.5.0.0.0.0.1.0">
        <transf name="apply" arg1="H7">
         <goal name="VC mapz_pre.5.0.0.0.0.1.0.0" expl="apply premises">
         <transf name="rewrite" arg1="make_bv_length">
          <goal name="VC mapz_pre.5.0.0.0.0.1.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="135"/></proof>
          </goal>
          <goal name="VC mapz_pre.5.0.0.0.0.1.0.0.1" expl="rewrite premises">
          <proof prover="3" obsolete="true"><result status="valid" time="5.18"/></proof>
          </goal>
          <goal name="VC mapz_pre.5.0.0.0.0.1.0.0.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mapz_pre.5.0.0.0.1">
      <transf name="compute_specified" >
       <goal name="VC mapz_pre.5.0.0.0.1.0">
       <transf name="apply" arg1="set_equal_bv">
        <goal name="VC mapz_pre.5.0.0.0.1.0.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="VC mapz_pre.5.0.0.0.1.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="concat_l_spec2">
          <goal name="VC mapz_pre.5.0.0.0.1.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="make_bv_length">
           <goal name="VC mapz_pre.5.0.0.0.1.0.0.0.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="133"/></proof>
           </goal>
           <goal name="VC mapz_pre.5.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="4.12"/></proof>
           </goal>
           <goal name="VC mapz_pre.5.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mapz_pre.5.0.0.0.1.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mapz_pre.5.0.0.0.1.0.1" expl="apply premises">
        <transf name="rewrite" arg1="concat_l_value">
         <goal name="VC mapz_pre.5.0.0.0.1.0.1.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0" expl="apply premises">
          <transf name="rewrite" arg1="make_bv_length">
           <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0" expl="apply premises">
           <transf name="eliminate_if" >
            <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0.0">
            <transf name="split_vc" >
             <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="139"/></proof>
             </goal>
             <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises">
             <transf name="rewrite" arg1="assert_make_bv_b">
              <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0.0.1.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="143"/></proof>
              </goal>
              <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0.0.1.1" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="3.67"/></proof>
              </goal>
              <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0.0.1.2" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="141"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="139"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.1" expl="rewrite premises">
           <transf name="split_vc" >
            <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.1.0" expl="rewrite premises">
            <proof prover="3" obsolete="true"><result status="valid" time="3.71"/></proof>
            </goal>
            <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.1.1" expl="rewrite premises">
            <proof prover="3" obsolete="true"><result status="valid" time="4.04"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mapz_pre.5.0.0.0.1.0.1.0.0.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mapz_pre.5.0.0.0.1.0.1.1" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="VC mapz_pre.5.0.0.0.1.0.1.1.0" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
          </goal>
          <goal name="VC mapz_pre.5.0.0.0.1.0.1.1.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mapo_pre" expl="VC for mapo_pre">
 <transf name="split_vc" >
  <goal name="VC mapo_pre.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="123"/></proof>
  </goal>
  <goal name="VC mapo_pre.1" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC mapo_pre.1.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC mapo_pre.1.0.0" expl="postcondition">
    <transf name="rewrite" arg1="my_map_spec">
     <goal name="VC mapo_pre.1.0.0.0" expl="postcondition">
     <transf name="apply" arg1="set_map_mem">
      <goal name="VC mapo_pre.1.0.0.0.0" expl="apply premises">
      <transf name="compute_in_goal" >
       <goal name="VC mapo_pre.1.0.0.0.0.0" expl="apply premises">
       <transf name="exists" arg1="( make_bv (fun (i:int) -&gt; 1) (n-1))">
        <goal name="VC mapo_pre.1.0.0.0.0.0.0">
        <transf name="split_vc" >
         <goal name="VC mapo_pre.1.0.0.0.0.0.0.0">
         <proof prover="3" obsolete="true"><result status="valid" time="1.64"/></proof>
         </goal>
         <goal name="VC mapo_pre.1.0.0.0.0.0.0.1">
         <transf name="rewrite" arg1="concat_l_def">
          <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0">
          <transf name="apply" arg1="set_equal_bv">
           <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0" expl="apply premises">
           <transf name="rewrite" arg1="make_bv_length">
            <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="make_bv_length">
             <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises">
             <transf name="rewrite" arg1="make_bv_length">
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="132"/></proof>
              </goal>
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
              <transf name="split_vc" >
               <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="rewrite premises">
               <proof prover="4" obsolete="true"><result status="valid" time="3.77" steps="138"/></proof>
               </goal>
               <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.0.1.1" expl="rewrite premises">
               <proof prover="4" obsolete="true"><result status="valid" time="2.45" steps="138"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="132"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
             <transf name="compute_specified" >
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.1.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="138"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="134"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="4.53" steps="372"/></proof>
            </goal>
            <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="132"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0" expl="apply premises">
            <transf name="rewrite" arg1="assert_make_bv_b">
             <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises">
             <transf name="rewrite" arg1="assert_make_bv_b">
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises">
               <transf name="rewrite" arg1="assert_make_bv">
                <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises">
                <proof prover="3" obsolete="true"><result status="valid" time="2.94"/></proof>
                </goal>
                <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises">
                <proof prover="0" obsolete="true"><result status="valid" time="2.10"/></proof>
                </goal>
                <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="136"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="2.19"/></proof>
              </goal>
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.0.2" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="1.54"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.1.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="4.49" steps="142"/></proof>
              </goal>
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.1.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="3.28" steps="142"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.2" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.2.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="136"/></proof>
              </goal>
              <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.0.1.0.2.1" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="2.22"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.1" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.1.0" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="132"/></proof>
           </goal>
           <goal name="VC mapo_pre.1.0.0.0.0.0.0.1.1.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="132"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapo_pre.2" expl="postcondition">
  <transf name="assert" arg1="(exists f. mem f s /\ e = concat_l f 1)">
   <goal name="VC mapo_pre.2.0" expl="asserted formula">
   <transf name="instantiate" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 1),s,e">
    <goal name="VC mapo_pre.2.0.0" expl="asserted formula">
    <transf name="destruct" arg1="Hinst">
     <goal name="VC mapo_pre.2.0.0.0" expl="destruct premise">
     <proof prover="3" obsolete="true"><result status="valid" time="2.32"/></proof>
     </goal>
     <goal name="VC mapo_pre.2.0.0.1" expl="asserted formula">
     <transf name="destruct" arg1="Hinst">
      <goal name="VC mapo_pre.2.0.0.1.0" expl="asserted formula">
      <transf name="exists" arg1="a">
       <goal name="VC mapo_pre.2.0.0.1.0.0">
       <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="137"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mapo_pre.2.1" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapo_pre.3" expl="postcondition">
  <transf name="instantiate" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 1),s,e">
   <goal name="VC mapo_pre.3.0" expl="postcondition">
   <transf name="destruct" arg1="Hinst">
    <goal name="VC mapo_pre.3.0.0" expl="destruct premise">
    <proof prover="3" obsolete="true"><result status="valid" time="2.42"/></proof>
    </goal>
    <goal name="VC mapo_pre.3.0.1" expl="postcondition">
    <transf name="destruct" arg1="Hinst">
     <goal name="VC mapo_pre.3.0.1.0" expl="postcondition">
     <transf name="exists" arg1="a">
      <goal name="VC mapo_pre.3.0.1.0.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapo_pre.4" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="1.28"/></proof>
  </goal>
  <goal name="VC mapo_pre.5" expl="postcondition">
  <transf name="rewrite" arg1="H6">
   <goal name="VC mapo_pre.5.0" expl="postcondition">
   <transf name="apply" arg1="set_map_mem">
    <goal name="VC mapo_pre.5.0.0" expl="apply premises">
    <transf name="exists" arg1="(make_bv (fun i -&gt; getbv e (i+1)) (n-1))">
     <goal name="VC mapo_pre.5.0.0.0">
     <transf name="split_vc" >
      <goal name="VC mapo_pre.5.0.0.0.0">
      <transf name="assert" arg1="(length (make_bv (fun (i:int) -&gt; getbv e @ (i + 1)) (n - 1)) = n-1)">
       <goal name="VC mapo_pre.5.0.0.0.0.0" expl="asserted formula">
       <transf name="rewrite" arg1="make_bv_length">
        <goal name="VC mapo_pre.5.0.0.0.0.0.0" expl="asserted formula">
        <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
        </goal>
        <goal name="VC mapo_pre.5.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="3.73"/></proof>
        </goal>
        <goal name="VC mapo_pre.5.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mapo_pre.5.0.0.0.0.1">
       <transf name="split_all_full" >
        <goal name="VC mapo_pre.5.0.0.0.0.1.0">
        <transf name="apply" arg1="H7">
         <goal name="VC mapo_pre.5.0.0.0.0.1.0.0" expl="apply premises">
         <transf name="rewrite" arg1="make_bv_length">
          <goal name="VC mapo_pre.5.0.0.0.0.1.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="135"/></proof>
          </goal>
          <goal name="VC mapo_pre.5.0.0.0.0.1.0.0.1" expl="rewrite premises">
          <proof prover="3" obsolete="true"><result status="valid" time="3.72"/></proof>
          </goal>
          <goal name="VC mapo_pre.5.0.0.0.0.1.0.0.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mapo_pre.5.0.0.0.1">
      <transf name="compute_specified" >
       <goal name="VC mapo_pre.5.0.0.0.1.0">
       <transf name="apply" arg1="set_equal_bv">
        <goal name="VC mapo_pre.5.0.0.0.1.0.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="VC mapo_pre.5.0.0.0.1.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="concat_l_spec2">
          <goal name="VC mapo_pre.5.0.0.0.1.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="make_bv_length">
           <goal name="VC mapo_pre.5.0.0.0.1.0.0.0.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
           </goal>
           <goal name="VC mapo_pre.5.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="3.49"/></proof>
           </goal>
           <goal name="VC mapo_pre.5.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mapo_pre.5.0.0.0.1.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mapo_pre.5.0.0.0.1.0.1" expl="apply premises">
        <transf name="rewrite" arg1="concat_l_value">
         <goal name="VC mapo_pre.5.0.0.0.1.0.1.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0" expl="apply premises">
          <transf name="rewrite" arg1="make_bv_length">
           <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0" expl="apply premises">
           <transf name="eliminate_if" >
            <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0.0">
            <transf name="split_vc" >
             <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="139"/></proof>
             </goal>
             <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises">
             <transf name="rewrite" arg1="assert_make_bv_b">
              <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0.0.1.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="143"/></proof>
              </goal>
              <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0.0.1.1" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="3.37"/></proof>
              </goal>
              <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0.0.1.2" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="141"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="139"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.1" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="4.06"/></proof>
           </goal>
           <goal name="VC mapo_pre.5.0.0.0.1.0.1.0.0.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="137"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mapo_pre.5.0.0.0.1.0.1.1" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="VC mapo_pre.5.0.0.0.1.0.1.1.0" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="133"/></proof>
          </goal>
          <goal name="VC mapo_pre.5.0.0.0.1.0.1.1.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC n_bvs" expl="VC for n_bvs">
 <transf name="eliminate_let" >
  <goal name="VC n_bvs.0" expl="VC for n_bvs">
  <transf name="split_vc" >
   <goal name="VC n_bvs.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC n_bvs.0.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="127"/></proof>
    </goal>
    <goal name="VC n_bvs.0.0.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="125"/></proof>
   </goal>
   <goal name="VC n_bvs.0.2" expl="variant decrease">
   <transf name="split_vc" >
    <goal name="VC n_bvs.0.2.0" expl="variant decrease">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="125"/></proof>
    </goal>
    <goal name="VC n_bvs.0.2.1" expl="variant decrease">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="125"/></proof>
   </goal>
   <goal name="VC n_bvs.0.4" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="130"/></proof>
   </goal>
   <goal name="VC n_bvs.0.5" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="127"/></proof>
   </goal>
   <goal name="VC n_bvs.0.6" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
   </goal>
   <goal name="VC n_bvs.0.7" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="134"/></proof>
   </goal>
   <goal name="VC n_bvs.0.8" expl="postcondition">
   <transf name="instantiate" arg1="H4" arg2="e">
    <goal name="VC n_bvs.0.8.0" expl="postcondition">
    <transf name="destruct" arg1="Hinst">
     <goal name="VC n_bvs.0.8.0.0" expl="destruct premise">
     <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="131"/></proof>
     </goal>
     <goal name="VC n_bvs.0.8.0.1" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="138"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs.0.9" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="134"/></proof>
   </goal>
   <goal name="VC n_bvs.0.10" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="136"/></proof>
   </goal>
   <goal name="VC n_bvs.0.11" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC n_bvs.0.11.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs.0.12" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
   </goal>
   <goal name="VC n_bvs.0.13" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="136"/></proof>
   </goal>
   <goal name="VC n_bvs.0.14" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.75"/></proof>
   </goal>
   <goal name="VC n_bvs.0.15" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="136"/></proof>
   </goal>
   <goal name="VC n_bvs.0.16" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="138"/></proof>
   </goal>
   <goal name="VC n_bvs.0.17" expl="assertion">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="134"/></proof>
   </goal>
   <goal name="VC n_bvs.0.18" expl="postcondition">
   <transf name="destruct" arg1="H2">
    <goal name="VC n_bvs.0.18.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC n_bvs.0.18.0.0" expl="postcondition">
     <transf name="replace" arg1="s" arg2="res">
      <goal name="VC n_bvs.0.18.0.0.0" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
      </goal>
      <goal name="VC n_bvs.0.18.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC n_bvs.0.18.1" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC n_bvs.0.18.1.0" expl="postcondition">
     <transf name="replace" arg1="s" arg2="res">
      <goal name="VC n_bvs.0.18.1.0.0" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="134"/></proof>
      </goal>
      <goal name="VC n_bvs.0.18.1.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="set_equal">
       <goal name="VC n_bvs.0.18.1.0.1.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC n_bvs.0.18.1.0.1.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvs.0.18.1.0.1.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC n_bvs.0.18.1.0.1.1.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs.0.19" expl="postcondition">
   <transf name="induction_arg_pr" arg1="H1">
    <goal name="VC n_bvs.0.19.0" expl="postcondition">
    <transf name="split_vc" >
     <goal name="VC n_bvs.0.19.0.0" expl="postcondition">
     <proof prover="3" obsolete="true"><result status="valid" time="2.10"/></proof>
     </goal>
     <goal name="VC n_bvs.0.19.0.1" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="140"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs.0.20" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC n_bvs.0.20.0" expl="postcondition">
    <transf name="induction_arg_pr" arg1="H2">
     <goal name="VC n_bvs.0.20.0.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="VC n_bvs.0.20.0.0.0" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="138"/></proof>
      </goal>
      <goal name="VC n_bvs.0.20.0.0.1" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="140"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC n_bvs.0.20.1" expl="postcondition">
    <transf name="destruct" arg1="H3">
     <goal name="VC n_bvs.0.20.1.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="VC n_bvs.0.20.1.0.0" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC n_bvs.0.20.1.1" expl="postcondition">
     <transf name="split_vc" >
      <goal name="VC n_bvs.0.20.1.1.0" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs.0.21" expl="postcondition">
   <transf name="assert" arg1="(mem (make_bv (fun _ -&gt; 0) n) result)">
    <goal name="VC n_bvs.0.21.0" expl="asserted formula">
    <transf name="induction_arg_pr" arg1="H3">
     <goal name="VC n_bvs.0.21.0.0" expl="asserted formula">
     <transf name="split_vc" >
      <goal name="VC n_bvs.0.21.0.0.0" expl="asserted formula">
      <proof prover="0" obsolete="true"><result status="valid" time="1.01"/></proof>
      </goal>
      <goal name="VC n_bvs.0.21.0.0.1" expl="asserted formula">
      <transf name="split_all_full" >
       <goal name="VC n_bvs.0.21.0.0.1.0" expl="asserted formula">
       <transf name="apply" arg1="H1">
        <goal name="VC n_bvs.0.21.0.0.1.0.0" expl="apply premises">
        <transf name="assert" arg1="(length (make_bv (fun (_:int) -&gt; 0) n)  = n)">
         <goal name="VC n_bvs.0.21.0.0.1.0.0.0" expl="asserted formula">
         <transf name="rewrite" arg1="make_bv_length">
          <goal name="VC n_bvs.0.21.0.0.1.0.0.0.0" expl="asserted formula">
          <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvs.0.21.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC n_bvs.0.21.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC n_bvs.0.21.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC n_bvs.0.21.0.0.1.0.0.0.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC n_bvs.0.21.0.0.1.0.0.1" expl="apply premises">
         <transf name="apply" arg1="mapz_pre_spec">
          <goal name="VC n_bvs.0.21.0.0.1.0.0.1.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="135"/></proof>
          </goal>
          <goal name="VC n_bvs.0.21.0.0.1.0.0.1.1" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.1.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="141"/></proof>
           </goal>
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.1.1" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="141"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC n_bvs.0.21.0.0.1.0.0.1.2" expl="apply premises">
          <transf name="rewrite" arg1="make_bv_length">
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.2.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="135"/></proof>
           </goal>
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.2.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC n_bvs.0.21.0.0.1.0.0.1.2.1.0" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC n_bvs.0.21.0.0.1.0.0.1.2.1.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.2.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC n_bvs.0.21.0.0.1.0.0.1.3" expl="apply premises">
          <transf name="rewrite" arg1="assert_make_bv">
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.3.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="140"/></proof>
           </goal>
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.3.1" expl="rewrite premises">
           <transf name="split_vc" >
            <goal name="VC n_bvs.0.21.0.0.1.0.0.1.3.1.0" expl="rewrite premises">
            <proof prover="0" obsolete="true"><result status="valid" time="0.88"/></proof>
            </goal>
            <goal name="VC n_bvs.0.21.0.0.1.0.0.1.3.1.1" expl="rewrite premises">
            <proof prover="0" obsolete="true"><result status="valid" time="0.88"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC n_bvs.0.21.0.0.1.0.0.1.3.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="135"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC n_bvs.0.21.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="183"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC in_n_bvs" expl="VC for in_n_bvs">
 <transf name="split_vc" >
  <goal name="VC in_n_bvs.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_in_n_bvs" expl="VC for get_in_n_bvs">
 <proof prover="0" obsolete="true"><result status="valid" time="0.63"/></proof>
 </goal>
 <goal name="VC mapz" expl="VC for mapz">
 <transf name="split_vc" >
  <goal name="VC mapz.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="123"/></proof>
  </goal>
  <goal name="VC mapz.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="125"/></proof>
  </goal>
  <goal name="VC mapz.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC mapz.2.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="130"/></proof>
   </goal>
   <goal name="VC mapz.2.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="130"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapz.3" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC mapz.3.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC mapz.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="mapz_pre_def">
     <goal name="VC mapz.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC mapz.3.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="134"/></proof>
     </goal>
     <goal name="VC mapz.3.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapz.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="132"/></proof>
  </goal>
  <goal name="VC mapz.5" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="136"/></proof>
  </goal>
  <goal name="VC mapz.6" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.84"/></proof>
  </goal>
  <goal name="VC mapz.7" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="136"/></proof>
  </goal>
  <goal name="VC mapz.8" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="138"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mapo" expl="VC for mapo">
 <transf name="split_vc" >
  <goal name="VC mapo.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="123"/></proof>
  </goal>
  <goal name="VC mapo.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="125"/></proof>
  </goal>
  <goal name="VC mapo.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="128"/></proof>
  </goal>
  <goal name="VC mapo.3" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC mapo.3.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC mapo.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="mapo_pre_def">
     <goal name="VC mapo.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC mapo.3.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="134"/></proof>
     </goal>
     <goal name="VC mapo.3.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mapo.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="132"/></proof>
  </goal>
  <goal name="VC mapo.5" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="136"/></proof>
  </goal>
  <goal name="VC mapo.6" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.96"/></proof>
  </goal>
  <goal name="VC mapo.7" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="136"/></proof>
  </goal>
  <goal name="VC mapo.8" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="138"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC n_bvs_node" expl="VC for n_bvs_node">
 <transf name="eliminate_let" >
  <goal name="VC n_bvs_node.0" expl="VC for n_bvs_node">
  <transf name="split_vc" >
   <goal name="VC n_bvs_node.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC n_bvs_node.0.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="123"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs_node.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC n_bvs_node.0.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs_node.0.2" expl="precondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC n_bvs_node.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="135"/></proof>
   </goal>
   <goal name="VC n_bvs_node.0.4" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC n_bvs_node.0.4.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs_node.0.5" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC n_bvs_node.0.5.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs_node.0.6" expl="precondition">
   <transf name="assert" arg1="(length e = n)">
    <goal name="VC n_bvs_node.0.6.0" expl="asserted formula">
    <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="147"/></proof>
    </goal>
    <goal name="VC n_bvs_node.0.6.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs_node.0.7" expl="precondition">
   <transf name="case" arg1="(getbv e 0 = 0)">
    <goal name="VC n_bvs_node.0.7.0" expl="true case (precondition)">
    <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="149"/></proof>
    </goal>
    <goal name="VC n_bvs_node.0.7.1" expl="false case (precondition)">
    <proof prover="3" obsolete="true"><result status="valid" time="2.48"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs_node.0.8" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="145"/></proof>
   </goal>
   <goal name="VC n_bvs_node.0.9" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H1">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC n_bvsz" expl="VC for n_bvsz">
 <transf name="split_vc" >
  <goal name="VC n_bvsz.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="121"/></proof>
  </goal>
  <goal name="VC n_bvsz.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="128"/></proof>
  </goal>
  <goal name="VC n_bvsz.2" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="1.57"/></proof>
  </goal>
  <goal name="VC n_bvsz.3" expl="postcondition">
  <transf name="apply" arg1="set_equal">
   <goal name="VC n_bvsz.3.0" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC n_bvsz.3.0.0" expl="apply premises">
    <proof prover="3" obsolete="true"><result status="valid" time="2.22"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvsz.3.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC n_bvsz.3.1.0" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC n_bvsz.4" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="1.60"/></proof>
  </goal>
  <goal name="VC n_bvsz.5" expl="postcondition">
  <transf name="rewrite" arg1="mat_sum_cardone">
   <goal name="VC n_bvsz.5.0" expl="postcondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.03"/></proof>
   </goal>
   <goal name="VC n_bvsz.5.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="130"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC n_bvso" expl="VC for n_bvso">
 <transf name="split_vc" >
  <goal name="VC n_bvso.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="125"/></proof>
  </goal>
  <goal name="VC n_bvso.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="133"/></proof>
  </goal>
  <goal name="VC n_bvso.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
  </goal>
  <goal name="VC n_bvso.3" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC n_bvso.3.0" expl="postcondition">
   <transf name="eliminate_definition" >
    <goal name="VC n_bvso.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="result_def">
     <goal name="VC n_bvso.3.0.0.0" expl="postcondition">
     <transf name="instantiate" arg1="n_bvs_spec4" arg2="1">
      <goal name="VC n_bvso.3.0.0.0.0" expl="postcondition">
      <transf name="destruct" arg1="Hinst">
       <goal name="VC n_bvso.3.0.0.0.0.0" expl="destruct premise">
       <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="132"/></proof>
       </goal>
       <goal name="VC n_bvso.3.0.0.0.0.1" expl="postcondition">
       <transf name="destruct" arg1="Hinst">
        <goal name="VC n_bvso.3.0.0.0.0.1.0" expl="destruct premise">
        <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="132"/></proof>
        </goal>
        <goal name="VC n_bvso.3.0.0.0.0.1.1" expl="postcondition">
        <transf name="instantiate" arg1="Hinst" arg2="(n_bvs 0)">
         <goal name="VC n_bvso.3.0.0.0.0.1.1.0" expl="postcondition">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0" expl="postcondition">
          <transf name="apply" arg1="set_equal">
           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0" expl="apply premises">
            <transf name="case" arg1="(mem e (mapz_pre 1 (n_bvs 0)))">
             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0" expl="true case (apply premises)">
             <transf name="replace" arg1="e" arg2="(make_bv (fun (_:int) -&gt; 0) 1)">
              <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.0" expl="true case (apply premises)">
              <transf name="assert" arg1="(forall s: set2 &#39;a. forall a .  mem a (add a s))">
               <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="asserted formula">
               <transf name="split_vc" >
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0" expl="asserted formula">
                <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="139"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
               <transf name="apply" proved="true" arg1="h">
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1" expl="equality hypothesis">
              <transf name="split_all_full" >
               <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0" expl="equality hypothesis">
               <transf name="rewrite" arg1="mapz_pre_def" arg2="in" arg3="h">
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0" expl="equality hypothesis">
                <transf name="rewrite" arg1="my_map_spec" arg2="in" arg3="h">
                 <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0" expl="equality hypothesis">
                 <transf name="instantiate" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 0),(n_bvs 0),e">
                  <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0" expl="equality hypothesis">
                  <transf name="destruct" arg1="Hinst">
                   <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.0" expl="destruct premise">
                   <proof prover="3" obsolete="true"><result status="valid" time="2.37"/></proof>
                   </goal>
                   <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis">
                   <transf name="destruct" arg1="Hinst">
                    <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0" expl="equality hypothesis">
                    <transf name="split_all_full" >
                     <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0" expl="equality hypothesis">
                     <transf name="replace" arg1="a" arg2="(make_bv (fun _ -&gt; 0)0)" arg3="in" arg4="Hinst">
                      <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0" expl="equality hypothesis">
                      <transf name="compute_hyp_specified" arg1="in" arg2="Hinst">
                       <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0" expl="equality hypothesis">
                       <transf name="rewrite" arg1="Hinst">
                        <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0" expl="equality hypothesis">
                        <transf name="apply" arg1="set_equal_bv">
                         <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises">
                         <transf name="rewrite" arg1="concat_l_def">
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises">
                          <transf name="rewrite" arg1="make_bv_length">
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises">
                           <transf name="rewrite" arg1="make_bv_length">
                            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises">
                            <transf name="rewrite" arg1="make_bv_length">
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                             <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="140"/></proof>
                             </goal>
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                             <proof prover="4" obsolete="true"><result status="valid" time="5.14" steps="428"/></proof>
                             </goal>
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
                             <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="140"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                            <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="140"/></proof>
                            </goal>
                            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
                            <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="140"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises">
                           <proof prover="0" obsolete="true"><result status="valid" time="3.64"/></proof>
                           </goal>
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises">
                           <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="143"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises">
                          <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="140"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises">
                         <transf name="split_vc" >
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises">
                          <transf name="rewrite" arg1="concat_l_value">
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0.0" expl="apply premises">
                           <transf name="eliminate_if" >
                            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0.0.0">
                            <transf name="split_vc" >
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0.0.0.0" expl="apply premises">
                             <proof prover="3" obsolete="true"><result status="valid" time="2.59"/></proof>
                             </goal>
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0.0.0.1" expl="apply premises">
                             <proof prover="0" obsolete="true"><result status="valid" time="3.17"/></proof>
                             </goal>
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0.0.0.2" expl="apply premises">
                             <proof prover="0" obsolete="true"><result status="valid" time="2.61"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0.1" expl="rewrite premises">
                           <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="144"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1" expl="equality hypothesis">
                      <proof prover="3" obsolete="true"><result status="valid" time="1.57"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.1" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="136"/></proof>
                </goal>
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.0.1.0.2" expl="rewrite premises">
                <proof prover="0" obsolete="true"><result status="valid" time="2.41"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1" expl="false case (apply premises)">
             <transf name="assert" arg1="(mem e (mapo_pre 1 (n_bvs 0)))">
              <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.0" expl="asserted formula">
              <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="139"/></proof>
              </goal>
              <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1" expl="false case (apply premises)">
              <transf name="replace" arg1="e" arg2="(make_bv (fun (_:int) -&gt; 1) 1)">
               <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.0" expl="false case (apply premises)">
               <transf name="assert" arg1="(forall s: set2 &#39;a. forall a e: &#39;a. mem a s  -&gt; mem a (add e  s))">
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.0.0" expl="asserted formula">
                <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="143"/></proof>
                </goal>
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.0.1" expl="false case (apply premises)">
                <transf name="apply" arg1="h">
                 <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.0.1.0" expl="apply premises">
                 <proof prover="3" obsolete="true"><result status="valid" time="2.07"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1" expl="equality hypothesis">
               <transf name="rewrite" arg1="mapo_pre_def" arg2="in" arg3="h">
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0" expl="equality hypothesis">
                <transf name="rewrite" arg1="my_map_spec" arg2="in" arg3="h">
                 <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0" expl="equality hypothesis">
                 <transf name="instantiate" arg1="map_antec" arg2="(fun (bv:bitvec) -&gt; concat_l bv 1),(n_bvs 0),e">
                  <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0" expl="equality hypothesis">
                  <transf name="destruct" arg1="Hinst">
                   <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.0" expl="destruct premise">
                   <transf name="destruct" arg1="Hinst">
                    <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.0.0" expl="destruct premise">
                    <proof prover="3" obsolete="true"><result status="valid" time="1.13"/></proof>
                    </goal>
                    <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.0.1" expl="destruct premise">
                    <proof prover="3" obsolete="true"><result status="valid" time="1.47"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1" expl="equality hypothesis">
                   <transf name="destruct" arg1="Hinst">
                    <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0" expl="equality hypothesis">
                    <transf name="split_all_full" >
                     <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0" expl="equality hypothesis">
                     <transf name="rewrite" arg1="Hinst">
                      <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0" expl="equality hypothesis">
                      <transf name="compute_specified" >
                       <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0" expl="equality hypothesis">
                       <transf name="rewrite" arg1="concat_l_def">
                        <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0" expl="equality hypothesis">
                        <transf name="apply" arg1="set_equal_bv">
                         <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises">
                         <transf name="rewrite" arg1="make_bv_length">
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises">
                          <transf name="rewrite" arg1="make_bv_length">
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises">
                           <proof prover="0" obsolete="true"><result status="valid" time="2.80"/></proof>
                           </goal>
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises">
                           <proof prover="4" obsolete="true"><result status="valid" time="3.77" steps="428"/></proof>
                           </goal>
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises">
                           <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="142"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises">
                          <proof prover="3" obsolete="true"><result status="valid" time="0.82"/></proof>
                          </goal>
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises">
                          <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="145"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1" expl="apply premises">
                         <transf name="rewrite" arg1="make_bv_length">
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises">
                          <transf name="split_vc" >
                           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0" expl="apply premises">
                           <transf name="rewrite" arg1="assert_make_bv_b">
                            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0.0" expl="apply premises">
                            <transf name="rewrite" arg1="assert_make_bv_b">
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0.0.0" expl="apply premises">
                             <transf name="compute_specified" >
                              <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
                              <proof prover="0" obsolete="true"><result status="valid" time="2.85"/></proof>
                              </goal>
                             </transf>
                             </goal>
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
                             <proof prover="4" obsolete="true"><result status="valid" time="3.83" steps="440"/></proof>
                             </goal>
                             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises">
                             <proof prover="0" obsolete="true"><result status="valid" time="2.69"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0.1" expl="rewrite premises">
                            <proof prover="3" obsolete="true"><result status="valid" time="0.93"/></proof>
                            </goal>
                            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.0.0.2" expl="rewrite premises">
                            <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="146"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.1" expl="rewrite premises">
                          <proof prover="3" obsolete="true"><result status="valid" time="0.76"/></proof>
                          </goal>
                          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.0.1.2" expl="rewrite premises">
                          <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="145"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
                        <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="142"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.1" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="138"/></proof>
                </goal>
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.2" expl="rewrite premises">
                <transf name="split_vc" >
                 <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.2.0" expl="rewrite premises">
                 <proof prover="0" obsolete="true"><result status="valid" time="2.29"/></proof>
                 </goal>
                 <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.0.0.1.1.1.2.1" expl="rewrite premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="143"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0" expl="apply premises">
            <transf name="case" arg1="(e = (make_bv (fun (_:int) -&gt; 0) 1) )">
             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0.0" expl="true case (apply premises)">
             <proof prover="0" obsolete="true"><result status="valid" time="3.01"/></proof>
             </goal>
             <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0.1" expl="false case (apply premises)">
             <transf name="assert" arg1="(mem e (to_set (make_bv (fun (_:int) -&gt; 1) 1)))">
              <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0.1.0" expl="asserted formula">
              <transf name="assert" arg1="(forall e a: &#39;a. e = a -&gt; mem e (to_set a) )">
               <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0.1.0.0" expl="asserted formula">
               <transf name="split_vc" >
                <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0.1.0.0.0" expl="asserted formula">
                <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="141"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0.1.0.1" expl="asserted formula">
               <proof prover="3" obsolete="true"><result status="valid" time="1.76"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC n_bvso.3.0.0.0.0.1.1.0.0.1.0.1.1" expl="false case (apply premises)">
              <proof prover="0" obsolete="true"><result status="valid" time="2.25"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC n_bvso.3.0.0.0.0.1.1.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="3.31" steps="375"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC n_bvso.4" expl="postcondition">
  <transf name="rewrite" arg1="H1">
   <goal name="VC n_bvso.4.0" expl="postcondition">
   <transf name="rewrite" arg1="mat_sum_add">
    <goal name="VC n_bvso.4.0.0" expl="postcondition">
    <transf name="rewrite" arg1="mat_sum_cardone">
     <goal name="VC n_bvso.4.0.0.0" expl="postcondition">
     <transf name="apply" arg1="add_mat_eq">
      <goal name="VC n_bvso.4.0.0.0.0" expl="apply premises">
      <transf name="replace" arg1="(rows (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_rows (n_bvs 1) f)">
       <goal name="VC n_bvso.4.0.0.0.0.0" expl="apply premises">
       <transf name="apply" arg1="set_s_rows_elt">
        <goal name="VC n_bvso.4.0.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
        </goal>
        <goal name="VC n_bvso.4.0.0.0.0.0.1" expl="apply premises">
        <transf name="apply" arg1="in_n_bvs">
         <goal name="VC n_bvso.4.0.0.0.0.0.1.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="133"/></proof>
         </goal>
         <goal name="VC n_bvso.4.0.0.0.0.0.1.1" expl="apply premises">
         <transf name="replace" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))">
          <goal name="VC n_bvso.4.0.0.0.0.0.1.1.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.39"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.0.0.0.0.1.1.1" expl="equality hypothesis">
          <transf name="rewrite" arg1="element_def">
           <goal name="VC n_bvso.4.0.0.0.0.0.1.1.1.0" expl="equality hypothesis">
           <proof prover="3" obsolete="true"><result status="valid" time="2.01"/></proof>
           </goal>
           <goal name="VC n_bvso.4.0.0.0.0.0.1.1.1.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="135"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.0.0.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC n_bvso.4.0.0.0.0.1.0" expl="apply premises">
        <transf name="apply" arg1="set_s_rows_elt">
         <goal name="VC n_bvso.4.0.0.0.0.1.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
         </goal>
         <goal name="VC n_bvso.4.0.0.0.0.1.0.1" expl="apply premises">
         <transf name="apply" arg1="in_n_bvs">
          <goal name="VC n_bvso.4.0.0.0.0.1.0.1.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.15" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.0.0.0.1.0.1.1" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.41"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC n_bvso.4.0.0.0.1" expl="apply premises">
      <transf name="replace" arg1="(columns (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_columns (n_bvs 1) f)">
       <goal name="VC n_bvso.4.0.0.0.1.0" expl="apply premises">
       <transf name="apply" arg1="set_s_columns_elt">
        <goal name="VC n_bvso.4.0.0.0.1.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
        </goal>
        <goal name="VC n_bvso.4.0.0.0.1.0.1" expl="apply premises">
        <transf name="apply" arg1="in_n_bvs">
         <goal name="VC n_bvso.4.0.0.0.1.0.1.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
         </goal>
         <goal name="VC n_bvso.4.0.0.0.1.0.1.1" expl="apply premises">
         <transf name="replace" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))">
          <goal name="VC n_bvso.4.0.0.0.1.0.1.1.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.37"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.0.0.1.0.1.1.1" expl="equality hypothesis">
          <transf name="rewrite" arg1="element_def">
           <goal name="VC n_bvso.4.0.0.0.1.0.1.1.1.0" expl="equality hypothesis">
           <proof prover="3" obsolete="true"><result status="valid" time="2.02"/></proof>
           </goal>
           <goal name="VC n_bvso.4.0.0.0.1.0.1.1.1.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.0.0.1.1" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC n_bvso.4.0.0.0.1.1.0" expl="apply premises">
        <transf name="apply" arg1="set_s_columns_elt">
         <goal name="VC n_bvso.4.0.0.0.1.1.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="133"/></proof>
         </goal>
         <goal name="VC n_bvso.4.0.0.0.1.1.0.1" expl="apply premises">
         <transf name="apply" arg1="in_n_bvs">
          <goal name="VC n_bvso.4.0.0.0.1.1.0.1.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.0.0.1.1.0.1.1" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.41"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC n_bvso.4.0.0.0.2" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC n_bvso.4.0.0.0.3" expl="apply premises">
      <transf name="replace" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="(make_bv (fun (_:int) -&gt; 1) 1)">
       <goal name="VC n_bvso.4.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.0.0.3.1" expl="equality hypothesis">
       <transf name="apply" arg1="set_equal_bv">
        <goal name="VC n_bvso.4.0.0.0.3.1.0" expl="apply premises">
        <transf name="rewrite" arg1="make_bv_length">
         <goal name="VC n_bvso.4.0.0.0.3.1.0.0" expl="apply premises">
         <transf name="replace" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))">
          <goal name="VC n_bvso.4.0.0.0.3.1.0.0.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.42"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.0.0.3.1.0.0.1" expl="equality hypothesis">
          <transf name="rewrite" arg1="element_def">
           <goal name="VC n_bvso.4.0.0.0.3.1.0.0.1.0" expl="equality hypothesis">
           <proof prover="3" obsolete="true"><result status="valid" time="2.02"/></proof>
           </goal>
           <goal name="VC n_bvso.4.0.0.0.3.1.0.0.1.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="135"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC n_bvso.4.0.0.0.3.1.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC n_bvso.4.0.0.0.3.1.0.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC n_bvso.4.0.0.0.3.1.1" expl="apply premises">
        <transf name="replace" arg1="(element (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="( ( (make_bv (fun (_:int) -&gt; 1) 1)))">
         <goal name="VC n_bvso.4.0.0.0.3.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC n_bvso.4.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC n_bvso.4.0.0.0.3.1.1.1" expl="equality hypothesis">
         <transf name="rewrite" arg1="element_def">
          <goal name="VC n_bvso.4.0.0.0.3.1.1.1.0" expl="equality hypothesis">
          <proof prover="3" obsolete="true"><result status="valid" time="2.05"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.0.0.3.1.1.1.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="135"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC n_bvso.4.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="135"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC n_bvso.4.0.1" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
    </goal>
    <goal name="VC n_bvso.4.0.2" expl="rewrite premises">
    <transf name="apply" arg1="set_constant_size">
     <goal name="VC n_bvso.4.0.2.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC n_bvso.4.0.2.0.0" expl="apply premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC n_bvso.4.0.2.1" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC n_bvso.4.0.2.1.0" expl="apply premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.53"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC n_bvso.4.0.3" expl="rewrite premises">
    <transf name="apply" arg1="goal_comm">
     <goal name="VC n_bvso.4.0.3.0" expl="apply premises">
     <transf name="apply" arg1="set_s_rows">
      <goal name="VC n_bvso.4.0.3.0.0" expl="apply premises">
      <transf name="apply" arg1="set_constant_size">
       <goal name="VC n_bvso.4.0.3.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC n_bvso.4.0.3.0.0.0.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.53"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.3.0.0.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC n_bvso.4.0.3.0.0.1.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC n_bvso.4.0.3.0.1" expl="apply premises">
      <transf name="replace" arg1="(choose (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="(make_bv (fun (_:int) -&gt; 1) 1)">
       <goal name="VC n_bvso.4.0.3.0.1.0" expl="apply premises">
       <transf name="replace" arg1="(rows (f @ make_bv (fun (_:int) -&gt; 1) 1))" arg2="(s_rows (n_bvs 1) f)">
        <goal name="VC n_bvso.4.0.3.0.1.0.0" expl="apply premises">
        <transf name="apply" arg1="set_s_rows_elt">
         <goal name="VC n_bvso.4.0.3.0.1.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
         </goal>
         <goal name="VC n_bvso.4.0.3.0.1.0.0.1" expl="apply premises">
         <transf name="apply" arg1="in_n_bvs">
          <goal name="VC n_bvso.4.0.3.0.1.0.0.1.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.3.0.1.0.0.1.1" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.40"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC n_bvso.4.0.3.0.1.0.1" expl="equality hypothesis">
        <transf name="apply" arg1="goal_comm">
         <goal name="VC n_bvso.4.0.3.0.1.0.1.0" expl="apply premises">
         <transf name="apply" arg1="set_s_rows_elt">
          <goal name="VC n_bvso.4.0.3.0.1.0.1.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.3.0.1.0.1.0.1" expl="apply premises">
          <transf name="apply" arg1="in_n_bvs">
           <goal name="VC n_bvso.4.0.3.0.1.0.1.0.1.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
           </goal>
           <goal name="VC n_bvso.4.0.3.0.1.0.1.0.1.1" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="1.39"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.3.0.1.1" expl="equality hypothesis">
       <proof prover="3" obsolete="true"><result status="valid" time="2.05"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC n_bvso.4.0.4" expl="rewrite premises">
    <transf name="apply" arg1="goal_comm">
     <goal name="VC n_bvso.4.0.4.0" expl="apply premises">
     <transf name="apply" arg1="set_s_columns">
      <goal name="VC n_bvso.4.0.4.0.0" expl="apply premises">
      <transf name="apply" arg1="set_constant_size">
       <goal name="VC n_bvso.4.0.4.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC n_bvso.4.0.4.0.0.0.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.53"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.4.0.0.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC n_bvso.4.0.4.0.0.1.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC n_bvso.4.0.4.0.1" expl="apply premises">
      <transf name="replace" arg1="(choose (to_set (make_bv (fun (_:int) -&gt; 1) 1)))" arg2="(make_bv (fun (_:int) -&gt; 1) 1)">
       <goal name="VC n_bvso.4.0.4.0.1.0" expl="apply premises">
       <transf name="replace" arg1="(columns (f @ make_bv (fun (_:int) -&gt; 1) 1))" arg2="(s_columns (n_bvs 1) f)">
        <goal name="VC n_bvso.4.0.4.0.1.0.0" expl="apply premises">
        <transf name="apply" arg1="set_s_columns_elt">
         <goal name="VC n_bvso.4.0.4.0.1.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="133"/></proof>
         </goal>
         <goal name="VC n_bvso.4.0.4.0.1.0.0.1" expl="apply premises">
         <transf name="apply" arg1="in_n_bvs">
          <goal name="VC n_bvso.4.0.4.0.1.0.0.1.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.4.0.1.0.0.1.1" expl="apply premises">
          <transf name="apply" arg1="make_bv_length">
           <goal name="VC n_bvso.4.0.4.0.1.0.0.1.1.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
           </goal>
           <goal name="VC n_bvso.4.0.4.0.1.0.0.1.1.1" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.15" steps="133"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC n_bvso.4.0.4.0.1.0.1" expl="equality hypothesis">
        <transf name="apply" arg1="goal_comm">
         <goal name="VC n_bvso.4.0.4.0.1.0.1.0" expl="apply premises">
         <transf name="apply" arg1="set_s_columns_elt">
          <goal name="VC n_bvso.4.0.4.0.1.0.1.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.4.0.1.0.1.0.1" expl="apply premises">
          <transf name="apply" arg1="in_n_bvs">
           <goal name="VC n_bvso.4.0.4.0.1.0.1.0.1.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
           </goal>
           <goal name="VC n_bvso.4.0.4.0.1.0.1.0.1.1" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="1.40"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.4.0.1.1" expl="equality hypothesis">
       <proof prover="3" obsolete="true"><result status="valid" time="2.04"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC n_bvso.4.0.5" expl="rewrite premises">
    <transf name="assert" arg1="(forall a b:&#39;a. a&lt;&gt; b -&gt; not (mem a (to_set b)))">
     <goal name="VC n_bvso.4.0.5.0" expl="asserted formula">
     <transf name="split_vc" >
      <goal name="VC n_bvso.4.0.5.0.0" expl="asserted formula">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC n_bvso.4.0.5.1" expl="rewrite premises">
     <transf name="apply" arg1="h">
      <goal name="VC n_bvso.4.0.5.1.0" expl="apply premises">
      <transf name="assert" arg1="(forall x y:bitvec. forall i. 0&lt;= i &lt; length x -&gt; getbv x i &lt;&gt; getbv y i -&gt; x &lt;&gt;y)">
       <goal name="VC n_bvso.4.0.5.1.0.0" expl="asserted formula">
       <transf name="split_vc" >
        <goal name="VC n_bvso.4.0.5.1.0.0.0" expl="asserted formula">
        <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvso.4.0.5.1.0.1" expl="apply premises">
       <transf name="instantiate" arg1="h" arg2="(make_bv (fun (_:int) -&gt; 0) 1),(make_bv (fun (_:int) -&gt; 1) 1),0">
        <goal name="VC n_bvso.4.0.5.1.0.1.0" expl="apply premises">
        <transf name="apply" arg1="Hinst">
         <goal name="VC n_bvso.4.0.5.1.0.1.0.0" expl="apply premises">
         <proof prover="3" obsolete="true"><result status="valid" time="3.09"/></proof>
         </goal>
         <goal name="VC n_bvso.4.0.5.1.0.1.0.1" expl="apply premises">
         <transf name="rewrite" arg1="assert_make_bv">
          <goal name="VC n_bvso.4.0.5.1.0.1.0.1.0" expl="apply premises">
          <transf name="rewrite" arg1="assert_make_bv">
           <goal name="VC n_bvso.4.0.5.1.0.1.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC n_bvso.4.0.5.1.0.1.0.1.0.1" expl="rewrite premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.47"/></proof>
           </goal>
           <goal name="VC n_bvso.4.0.5.1.0.1.0.1.0.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC n_bvso.4.0.5.1.0.1.0.1.1" expl="rewrite premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
          </goal>
          <goal name="VC n_bvso.4.0.5.1.0.1.0.1.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_node" expl="VC for injective_node">
 <transf name="eliminate_let" >
  <goal name="VC injective_node.0" expl="VC for injective_node">
  <transf name="split_vc" >
   <goal name="VC injective_node.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="129"/></proof>
   </goal>
   <goal name="VC injective_node.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC injective_node.0.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
    </goal>
    <goal name="VC injective_node.0.1.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_node.0.2" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC injective_node.0.2.0" expl="precondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.33"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_node.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
   </goal>
   <goal name="VC injective_node.0.4" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC injective_node.0.4.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
    </goal>
    <goal name="VC injective_node.0.4.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_node.0.5" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC injective_node.0.5.0" expl="precondition">
    <proof prover="3" obsolete="true"><result status="valid" time="5.32"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_node.0.6" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H5">
   </transf>
   </goal>
   <goal name="VC injective_node.0.7" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H1">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_n_bvs_pos" expl="VC for mat_sum_n_bvs_pos">
 <transf name="eliminate_let" >
  <goal name="VC mat_sum_n_bvs_pos.0" expl="VC for mat_sum_n_bvs_pos">
  <transf name="split_vc" >
   <goal name="VC mat_sum_n_bvs_pos.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="133"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="137"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC mat_sum_n_bvs_pos.0.2.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.3" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC mat_sum_n_bvs_pos.0.3.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="149"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.5" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.15" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.6" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.7" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.8" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.9" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.10" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC mat_sum_n_bvs_pos.0.10.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="155"/></proof>
    </goal>
    <goal name="VC mat_sum_n_bvs_pos.0.10.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.11" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="155"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.12" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="159"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.13" expl="precondition">
   <transf name="apply" arg1="set_constant_size">
    <goal name="VC mat_sum_n_bvs_pos.0.13.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC mat_sum_n_bvs_pos.0.13.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0" expl="apply premises">
      <transf name="replace" arg1="(rows (f @ concat_l e 0) )" arg2="(s_rows (n_bvs n) f)">
       <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.0" expl="apply premises">
       <transf name="apply" arg1="set_s_rows_elt">
        <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.0.0" expl="apply premises">
        <transf name="apply" arg1="set_constant_size">
         <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.0.0.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.0.0.1" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.0.0.1.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.66"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.0.1" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1.0" expl="apply premises">
        <transf name="apply" arg1="set_s_rows_elt">
         <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1.0.0" expl="apply premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1.0.0.0.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1.0.0.1" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1.0.0.1.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.13.0.0.0.1.0.1" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.50"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_n_bvs_pos.0.13.1" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC mat_sum_n_bvs_pos.0.13.1.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0" expl="apply premises">
      <transf name="replace" arg1="(columns (f @ concat_l e 0))" arg2="(s_columns (n_bvs n) f)">
       <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.0" expl="apply premises">
       <transf name="apply" arg1="set_s_columns_elt">
        <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.0.0" expl="apply premises">
        <transf name="apply" arg1="set_constant_size">
         <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.0.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.0.0.1" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.0.1" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.1.0" expl="apply premises">
        <transf name="apply" arg1="set_s_columns_elt">
         <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.1.0.0" expl="apply premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.1.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.56"/></proof>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.1.0.0.1" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.56"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.13.1.0.0.1.0.1" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.14" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H24">
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.15" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC mat_sum_n_bvs_pos.0.15.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="161"/></proof>
    </goal>
    <goal name="VC mat_sum_n_bvs_pos.0.15.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="161"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.16" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="161"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.17" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="163"/></proof>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.18" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC mat_sum_n_bvs_pos.0.18.0" expl="precondition">
    <transf name="apply" arg1="set_constant_size">
     <goal name="VC mat_sum_n_bvs_pos.0.18.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0" expl="apply premises">
       <transf name="replace" arg1="(rows (f @ concat_l e 1))" arg2="(s_rows (n_bvs n) f)">
        <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.0" expl="apply premises">
        <transf name="apply" arg1="set_s_rows_elt">
         <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.56"/></proof>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.0.0.1" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.0.1" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.49"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.1" expl="equality hypothesis">
        <transf name="apply" arg1="goal_comm">
         <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.1.0" expl="apply premises">
         <transf name="apply" arg1="set_s_rows_elt">
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.1.0.0" expl="apply premises">
          <transf name="apply" arg1="set_constant_size">
           <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.1.0.0.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.1.0.0.1" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.0.0.0.1.0.1" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.63"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_n_bvs_pos.0.18.0.1" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0" expl="apply premises">
       <transf name="replace" arg1="(columns (f @ concat_l e 1))" arg2="(s_columns (n_bvs n) f)">
        <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.0" expl="apply premises">
        <transf name="apply" arg1="set_s_columns_elt">
         <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.0.0.1" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.0.1" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.53"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.1" expl="equality hypothesis">
        <transf name="apply" arg1="goal_comm">
         <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.1.0" expl="apply premises">
         <transf name="apply" arg1="set_s_columns_elt">
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.1.0.0" expl="apply premises">
          <transf name="apply" arg1="set_constant_size">
           <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.1.0.0.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.71"/></proof>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.1.0.0.1" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.61"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.18.0.1.0.0.1.0.1" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.19" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H28">
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_pos.0.20" expl="postcondition">
   <transf name="eliminate_definition" >
    <goal name="VC mat_sum_n_bvs_pos.0.20.0" expl="postcondition">
    <transf name="destruct" arg1="H">
     <goal name="VC mat_sum_n_bvs_pos.0.20.0.0" expl="postcondition">
     <transf name="replace" arg1="(n_bvs n)" arg2="(n_bvso())">
      <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0" expl="postcondition">
      <transf name="split_all_full" >
       <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="n_bvso_spec">
        <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0" expl="postcondition">
        <transf name="apply" arg1="add_mat_eq">
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0" expl="apply premises">
         <transf name="replace" arg1="(rows (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_rows (n_bvso()) f)">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="apply" arg1="set_s_rows_elt">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="1.68" steps="134"/></proof>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0.0.1" expl="apply premises">
           <transf name="apply" arg1="n_bvso_spec3">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0.0.1.0" expl="apply premises">
            <transf name="apply" arg1="make_bv_length">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
             <proof prover="0" obsolete="true"><result status="valid" time="2.90"/></proof>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0.0.1.0.1" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="132"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.0.1" expl="equality hypothesis">
          <proof prover="3" obsolete="true"><result status="valid" time="2.01"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1" expl="apply premises">
         <transf name="replace" arg1="(columns (f @ make_bv (fun (_:int) -&gt; 0) 1))" arg2="(s_columns (n_bvso()) f)">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.0" expl="apply premises">
          <transf name="apply" arg1="set_s_columns_elt">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="1.95" steps="134"/></proof>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.0.1" expl="apply premises">
           <transf name="rewrite" arg1="n_bvso_spec1">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.0.1.0" expl="apply premises">
            <transf name="assert" arg1="( forall e s: bitvec. mem e (add s (to_set e)))">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.0.1.0.0" expl="asserted formula">
             <proof prover="3" obsolete="true"><result status="valid" time="1.48"/></proof>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="h">
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.1" expl="equality hypothesis">
          <transf name="apply" arg1="goal_comm">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.1.0" expl="apply premises">
           <transf name="apply" arg1="set_s_columns_elt">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.1.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="2.21" steps="134"/></proof>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.1.1.0.1" expl="apply premises">
            <proof prover="3" obsolete="true"><result status="valid" time="2.30"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2" expl="apply premises">
         <transf name="replace" arg1="(n_bvs (n - 1))" arg2="(n_bvsz())">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0" expl="apply premises">
          <transf name="rewrite" arg1="n_bvsz_spec">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0" expl="apply premises">
            <transf name="replace" arg1="(make_bv (fun (_:int) -&gt; 0) 1)" arg2="(concat_l (make_bv (fun (_:int) -&gt; 0) 0) 0)">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1" expl="equality hypothesis">
             <transf name="rewrite" arg1="concat_l_def">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0" expl="equality hypothesis">
              <transf name="apply" arg1="set_equal_bv">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises">
               <transf name="rewrite" arg1="make_bv_length">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0" expl="apply premises">
                <transf name="rewrite" arg1="make_bv_length">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0" expl="apply premises">
                 <transf name="rewrite" arg1="make_bv_length">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="132"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="132"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="132"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.1" expl="rewrite premises">
                 <proof prover="0" obsolete="true"><result status="valid" time="2.46"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.0.2" expl="rewrite premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="134"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.1" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="4.27" steps="400"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.0.2" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="132"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises">
               <transf name="split_vc" >
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0" expl="apply premises">
                <transf name="rewrite" arg1="assert_make_bv_b">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0" expl="apply premises">
                 <transf name="rewrite" arg1="assert_make_bv_b">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.0" expl="apply premises">
                  <transf name="compute_specified" >
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.0.0" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="4.03" steps="661"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.1" expl="rewrite premises">
                  <proof prover="0" obsolete="true"><result status="valid" time="2.96"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2" expl="rewrite premises">
                  <transf name="rewrite" arg1="make_bv_length">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2.0" expl="rewrite premises">
                   <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2.0.0" expl="rewrite premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="136"/></proof>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2.0.1" expl="rewrite premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="3.55" steps="410"/></proof>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2.0.2" expl="rewrite premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="136"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2.1" expl="rewrite premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="136"/></proof>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.0.2.2" expl="rewrite premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="136"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.1" expl="rewrite premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="4.21" steps="410"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.2" expl="rewrite premises">
                 <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.2.0" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="136"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.2.1" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="3.62" steps="410"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.0.1.0.2.2" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="136"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.0.0.0.1.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="132"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.2.1" expl="equality hypothesis">
          <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="134"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3" expl="apply premises">
         <transf name="replace" arg1="(n_bvs (n - 1))" arg2="(n_bvsz())">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0" expl="apply premises">
          <transf name="rewrite" arg1="n_bvsz_spec">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0" expl="apply premises">
            <transf name="replace" arg1="(make_bv (fun (_:int) -&gt; 1) 1)" arg2="(concat_l (make_bv (fun (_:int) -&gt; 0) 0) 1)">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1" expl="equality hypothesis">
             <transf name="rewrite" arg1="concat_l_def">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0" expl="equality hypothesis">
              <transf name="apply" arg1="set_equal_bv">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises">
               <transf name="rewrite" arg1="make_bv_length">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises">
                <transf name="rewrite" arg1="make_bv_length">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises">
                 <transf name="rewrite" arg1="make_bv_length">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="132"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="132"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="132"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="rewrite premises">
                 <proof prover="0" obsolete="true"><result status="valid" time="3.13"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="rewrite premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="134"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises">
                <proof prover="0" obsolete="true"><result status="valid" time="2.32"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="132"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1" expl="apply premises">
               <transf name="split_vc" >
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="apply premises">
                <transf name="rewrite" arg1="assert_make_bv_b">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises">
                 <transf name="rewrite" arg1="assert_make_bv_b">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises">
                  <transf name="compute_specified" >
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0" expl="apply premises">
                   <transf name="rewrite" arg1="assert_make_bv">
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises">
                    <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
                     <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises">
                     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="136"/></proof>
                     </goal>
                     <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises">
                     <proof prover="0" obsolete="true"><result status="valid" time="3.64"/></proof>
                     </goal>
                     <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0.0.2" expl="rewrite premises">
                     <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="136"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="136"/></proof>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="136"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="rewrite premises">
                  <proof prover="0" obsolete="true"><result status="valid" time="3.11"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2" expl="rewrite premises">
                  <transf name="rewrite" arg1="make_bv_length">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2.0" expl="rewrite premises">
                   <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2.0.0" expl="rewrite premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="136"/></proof>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2.0.1" expl="rewrite premises">
                    <proof prover="0" obsolete="true"><result status="valid" time="2.60"/></proof>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2.0.2" expl="rewrite premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="136"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2.1" expl="rewrite premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="136"/></proof>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2.2" expl="rewrite premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="136"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.1" expl="rewrite premises">
                 <proof prover="0" obsolete="true"><result status="valid" time="2.41"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.2" expl="rewrite premises">
                 <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.2.0" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="136"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.2.1" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="4.09" steps="410"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.0.1.0.2.2" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="136"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.0.0.0.1.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="132"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.0.3.1" expl="equality hypothesis">
          <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="134"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="1.90" steps="134"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_n_bvs_pos.0.20.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="134"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_n_bvs_pos.0.20.0.1" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0" expl="postcondition">
      <transf name="replace" arg1="( mat_sum (n_bvs n) f)" arg2="(add_mat (mat_sum (mapz n) f) (mat_sum (mapo n) f))">
       <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0" expl="postcondition">
       <transf name="apply" arg1="add_mat_eq">
        <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="mat_sum_spec3">
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="mat_sum_spec3">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0" expl="apply premises">
          <transf name="replace" arg1="(s_rows (mapz n) f )" arg2="(s_rows (n_bvs n) f )">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0" expl="apply premises">
           <transf name="apply" arg1="goal_comm">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="apply" arg1="set_s_rows">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="apply" arg1="set_constant_size">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <transf name="split_vc" >
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
               <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                <transf name="apply" arg1="set_s_rows_elt">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="162"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="165"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
                <transf name="apply" arg1="goal_comm">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises">
                 <transf name="apply" arg1="set_s_rows_elt">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="162"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="165"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises">
              <transf name="split_vc" >
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises">
               <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
                <transf name="apply" arg1="set_s_columns_elt">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="162"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="165"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis">
                <transf name="apply" arg1="goal_comm">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises">
                 <transf name="apply" arg1="set_s_columns_elt">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="162"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="165"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.1" expl="apply premises">
             <transf name="apply" arg1="goal_comm">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.1.0" expl="apply premises">
              <transf name="apply" arg1="set_s_rows_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="158"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.1.0.1" expl="apply premises">
               <transf name="apply" arg1="in_n_bvs">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="158"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.0.0.1.0.1.1" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="2.98" steps="161"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1" expl="equality hypothesis">
           <transf name="apply" arg1="set_s_rows">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0" expl="apply premises">
            <transf name="apply" arg1="set_constant_size">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0" expl="apply premises">
             <transf name="split_vc" >
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0" expl="apply premises">
              <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0.0" expl="apply premises">
               <transf name="apply" arg1="set_s_rows_elt">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="162"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0.0.1" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.57" steps="165"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis">
               <transf name="apply" arg1="goal_comm">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises">
                <transf name="apply" arg1="set_s_rows_elt">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0.1.0.0" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="162"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.0.0.1.0.1" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.66" steps="165"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1" expl="apply premises">
             <transf name="split_vc" >
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0" expl="apply premises">
              <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0.0" expl="apply premises">
               <transf name="apply" arg1="set_s_columns_elt">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="162"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0.0.1" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.61" steps="165"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis">
               <transf name="apply" arg1="goal_comm">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0.1.0" expl="apply premises">
                <transf name="apply" arg1="set_s_columns_elt">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0.1.0.0" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="162"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.0.1.0.1.0.1" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="165"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.1" expl="apply premises">
            <transf name="apply" arg1="goal_comm">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.1.0" expl="apply premises">
             <transf name="apply" arg1="set_s_rows_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.1.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="158"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.1.0.1" expl="apply premises">
              <transf name="apply" arg1="in_n_bvs">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.1.0.1.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="158"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.0.1.1.0.1.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="4.79" steps="161"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1" expl="rewrite premises">
          <transf name="apply" arg1="set_constant_size">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0" expl="apply premises">
            <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0.0" expl="apply premises">
             <transf name="apply" arg1="set_s_rows_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0.1" expl="equality hypothesis">
             <transf name="apply" arg1="goal_comm">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0.1.0" expl="apply premises">
              <transf name="apply" arg1="set_s_rows_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0.1.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="162"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.0.0.1.0.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="165"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0" expl="apply premises">
            <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0.0" expl="apply premises">
             <transf name="apply" arg1="set_s_columns_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0.1" expl="equality hypothesis">
             <transf name="apply" arg1="goal_comm">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0.1.0" expl="apply premises">
              <transf name="apply" arg1="set_s_columns_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0.1.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="162"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.1.1.0.1.0.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="165"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.0.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="158"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1" expl="rewrite premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0" expl="apply premises">
           <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0.0" expl="apply premises">
            <transf name="apply" arg1="set_s_rows_elt">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="162"/></proof>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0.0.1" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="165"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0.1" expl="equality hypothesis">
            <transf name="apply" arg1="goal_comm">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0.1.0" expl="apply premises">
             <transf name="apply" arg1="set_s_rows_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0.1.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.0.0.1.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.70" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0" expl="apply premises">
           <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0.0" expl="apply premises">
            <transf name="apply" arg1="set_s_columns_elt">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="162"/></proof>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0.0.1" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="165"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0.1" expl="equality hypothesis">
            <transf name="apply" arg1="goal_comm">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0.1.0" expl="apply premises">
             <transf name="apply" arg1="set_s_columns_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0.1.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.1.1.0.1.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.0.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="158"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1" expl="apply premises">
        <transf name="rewrite" arg1="mat_sum_spec2">
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0" expl="apply premises">
         <transf name="apply" arg1="set_s_columns">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0" expl="apply premises">
          <transf name="apply" arg1="set_constant_size">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0" expl="apply premises">
            <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0.0" expl="apply premises">
             <transf name="apply" arg1="set_s_rows_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0.1" expl="equality hypothesis">
             <transf name="apply" arg1="goal_comm">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0.1.0" expl="apply premises">
              <transf name="apply" arg1="set_s_rows_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0.1.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="162"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.0.0.1.0.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="165"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0" expl="apply premises">
            <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0.0" expl="apply premises">
             <transf name="apply" arg1="set_s_columns_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0.1" expl="equality hypothesis">
             <transf name="apply" arg1="goal_comm">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0.1.0" expl="apply premises">
              <transf name="apply" arg1="set_s_columns_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0.1.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="162"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.0.1.0.1.0.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="165"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1" expl="apply premises">
          <transf name="rewrite" arg1="mat_sum_spec2">
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0" expl="apply premises">
           <transf name="replace" arg1="(s_columns (mapo n) f)" arg2="(s_columns (n_bvs n) f)">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0" expl="apply premises">
            <transf name="apply" arg1="goal_comm">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0" expl="apply premises">
             <transf name="apply" arg1="set_s_columns_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0" expl="apply premises">
              <transf name="apply" arg1="set_constant_size">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0" expl="apply premises">
               <transf name="split_vc" >
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises">
                <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0.0" expl="apply premises">
                 <transf name="apply" arg1="set_s_rows_elt">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="162"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0.0.1" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="162"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0.1" expl="equality hypothesis">
                 <transf name="apply" arg1="goal_comm">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0.1.0" expl="apply premises">
                  <transf name="apply" arg1="set_s_rows_elt">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0.1.0.0" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="162"/></proof>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.0.0.1.0.1" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="162"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1" expl="apply premises">
               <transf name="split_vc" >
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0" expl="apply premises">
                <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0.0" expl="apply premises">
                 <transf name="apply" arg1="set_s_columns_elt">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="162"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0.0.1" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="162"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0.1" expl="equality hypothesis">
                 <transf name="apply" arg1="goal_comm">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0.1.0" expl="apply premises">
                  <transf name="apply" arg1="set_s_columns_elt">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0.1.0.0" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="162"/></proof>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.0.1.0.1.0.1" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="162"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.1" expl="apply premises">
              <transf name="apply" arg1="in_n_bvs">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.1.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="158"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.0.0.1.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="5.53" steps="161"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1" expl="equality hypothesis">
            <transf name="apply" arg1="set_s_columns">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0" expl="apply premises">
             <transf name="apply" arg1="set_constant_size">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0" expl="apply premises">
              <transf name="split_vc" >
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0" expl="apply premises">
               <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0.0" expl="apply premises">
                <transf name="apply" arg1="set_s_rows_elt">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0.0.0" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="162"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0.0.1" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.66" steps="165"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0.1" expl="equality hypothesis">
                <transf name="apply" arg1="goal_comm">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0.1.0" expl="apply premises">
                 <transf name="apply" arg1="set_s_rows_elt">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0.1.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="162"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.0.0.1.0.1" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.55" steps="165"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1" expl="apply premises">
              <transf name="split_vc" >
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0" expl="apply premises">
               <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0.0" expl="apply premises">
                <transf name="apply" arg1="set_s_columns_elt">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0.0.0" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="162"/></proof>
                 </goal>
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0.0.1" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.74" steps="165"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0.1" expl="equality hypothesis">
                <transf name="apply" arg1="goal_comm">
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0.1.0" expl="apply premises">
                 <transf name="apply" arg1="set_s_columns_elt">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0.1.0.0" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="162"/></proof>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.0.1.0.1.0.1" expl="apply premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.67" steps="165"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1" expl="apply premises">
             <transf name="apply" arg1="goal_comm">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0" expl="apply premises">
              <transf name="apply" arg1="set_s_columns_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0" expl="apply premises">
               <transf name="apply" arg1="set_constant_size">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0" expl="apply premises">
                <transf name="split_vc" >
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0" expl="apply premises">
                 <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0.0" expl="apply premises">
                  <transf name="apply" arg1="set_s_rows_elt">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0.0.0" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="162"/></proof>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0.0.1" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="162"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0.1" expl="equality hypothesis">
                  <transf name="apply" arg1="goal_comm">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0.1.0" expl="apply premises">
                   <transf name="apply" arg1="set_s_rows_elt">
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0.1.0.0" expl="apply premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="162"/></proof>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.0.0.1.0.1" expl="apply premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="162"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1" expl="apply premises">
                <transf name="split_vc" >
                 <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0" expl="apply premises">
                 <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0.0" expl="apply premises">
                  <transf name="apply" arg1="set_s_columns_elt">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0.0.0" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="162"/></proof>
                   </goal>
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0.0.1" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="162"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0.1" expl="equality hypothesis">
                  <transf name="apply" arg1="goal_comm">
                   <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0.1.0" expl="apply premises">
                   <transf name="apply" arg1="set_s_columns_elt">
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0.1.0.0" expl="apply premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="162"/></proof>
                    </goal>
                    <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.0.1.0.1.0.1" expl="apply premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="162"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.1" expl="apply premises">
               <transf name="apply" arg1="in_n_bvs">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.1.0" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="158"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.0.1.1.0.1.1" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="4.86" steps="161"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1" expl="rewrite premises">
           <transf name="apply" arg1="set_constant_size">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0" expl="apply premises">
            <transf name="split_vc" >
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0" expl="apply premises">
             <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0.0" expl="apply premises">
              <transf name="apply" arg1="set_s_rows_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="162"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0.0.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.60" steps="165"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0.1" expl="equality hypothesis">
              <transf name="apply" arg1="goal_comm">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0.1.0" expl="apply premises">
               <transf name="apply" arg1="set_s_rows_elt">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0.1.0.0" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="162"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.0.0.1.0.1" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="165"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1" expl="apply premises">
            <transf name="split_vc" >
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0" expl="apply premises">
             <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0.0" expl="apply premises">
              <transf name="apply" arg1="set_s_columns_elt">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="162"/></proof>
               </goal>
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0.0.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="165"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0.1" expl="equality hypothesis">
              <transf name="apply" arg1="goal_comm">
               <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0.1.0" expl="apply premises">
               <transf name="apply" arg1="set_s_columns_elt">
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0.1.0.0" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="162"/></proof>
                </goal>
                <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.1.1.0.1.0.1" expl="apply premises">
                <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="165"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.0.1.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="158"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1" expl="rewrite premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0" expl="apply premises">
           <transf name="replace" arg1="(rows (f @ e) )" arg2="(s_rows (n_bvs n) f)">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0.0" expl="apply premises">
            <transf name="apply" arg1="set_s_rows_elt">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="162"/></proof>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0.0.1" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="165"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0.1" expl="equality hypothesis">
            <transf name="apply" arg1="goal_comm">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0.1.0" expl="apply premises">
             <transf name="apply" arg1="set_s_rows_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0.1.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.0.0.1.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0" expl="apply premises">
           <transf name="replace" arg1="(columns (f @ e) )" arg2="(s_columns (n_bvs n) f)">
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0.0" expl="apply premises">
            <transf name="apply" arg1="set_s_columns_elt">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="162"/></proof>
             </goal>
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0.0.1" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.59" steps="165"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0.1" expl="equality hypothesis">
            <transf name="apply" arg1="goal_comm">
             <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0.1.0" expl="apply premises">
             <transf name="apply" arg1="set_s_columns_elt">
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0.1.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="162"/></proof>
              </goal>
              <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.1.1.0.1.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.1.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="158"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.2" expl="apply premises">
        <transf name="replace" arg1="((mapz n))" arg2="(map1 (fun (bv:bitvec) -&gt; concat_l bv 0) (n_bvs (n - 1)))">
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.2.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H5">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.2.1" expl="equality hypothesis">
         <transf name="rewrite" arg1="mapz_spec5">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.2.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="my_map_spec">
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.2.1.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="158"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.3" expl="apply premises">
        <transf name="replace" arg1="((mapo n))" arg2="(map1 (fun (bv:bitvec) -&gt; concat_l bv 1) (n_bvs (n - 1)))">
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.3.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.3.1" expl="equality hypothesis">
         <transf name="rewrite" arg1="mapo_spec5">
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.3.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="my_map_spec">
          </transf>
          </goal>
          <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.0.3.1.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="158"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_n_bvs_pos.0.20.0.1.0.1" expl="equality hypothesis">
       <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="158"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_n_bvs_null" expl="VC for mat_sum_n_bvs_null">
 <transf name="split_vc" >
  <goal name="VC mat_sum_n_bvs_null.0" expl="postcondition">
  <transf name="rewrite" arg1="mat_sum_cardone">
   <goal name="VC mat_sum_n_bvs_null.0.0" expl="postcondition">
   <transf name="compute_specified" >
    <goal name="VC mat_sum_n_bvs_null.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(element (n_bvs 0))" arg2="(make_bv (fun (y1:int) -&gt; const 0 y1) 0)">
     <goal name="VC mat_sum_n_bvs_null.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC mat_sum_n_bvs_null.0.0.0.1" expl="equality hypothesis">
     <transf name="replace" arg1="(n_bvs 0)" arg2="(to_set (make_bv (fun i -&gt; 0) 0))">
      <goal name="VC mat_sum_n_bvs_null.0.0.0.1.0" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.94"/></proof>
      </goal>
      <goal name="VC mat_sum_n_bvs_null.0.0.0.1.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="1.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_n_bvs_null.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_n_bvs_null_eq" expl="VC for mat_sum_n_bvs_null_eq">
 <transf name="split_vc" >
  <goal name="VC mat_sum_n_bvs_null_eq.0" expl="postcondition">
  <transf name="rewrite" arg1="mat_sum_n_bvs_null">
   <goal name="VC mat_sum_n_bvs_null_eq.0.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.97"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_n_bvs" expl="VC for get_n_bvs">
 <transf name="split_vc" >
  <goal name="VC get_n_bvs.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="129"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_n_bvs_gen" expl="VC for get_n_bvs_gen">
 <transf name="split_vc" >
  <goal name="VC get_n_bvs_gen.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_n_bvs" expl="VC for set_n_bvs">
 <transf name="split_vc" >
  <goal name="VC set_n_bvs.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="132"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_n_bvs" expl="VC for int_to_bv_n_bvs">
 <transf name="eliminate_let" >
  <goal name="VC int_to_bv_n_bvs.0" expl="VC for int_to_bv_n_bvs">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_n_bvs.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="133"/></proof>
   </goal>
   <goal name="VC int_to_bv_n_bvs.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="137"/></proof>
   </goal>
   <goal name="VC int_to_bv_n_bvs.0.2" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC n_bvs_def_pos" expl="VC for n_bvs_def_pos">
 <transf name="split_vc" >
  <goal name="VC n_bvs_def_pos.0" expl="postcondition">
  <transf name="case" arg1="(n = 0)">
   <goal name="VC n_bvs_def_pos.0.0" expl="true case (postcondition)">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="129"/></proof>
   </goal>
   <goal name="VC n_bvs_def_pos.0.1" expl="false case (postcondition)">
   <transf name="split_all_full" >
    <goal name="VC n_bvs_def_pos.0.1.0" expl="false case (postcondition)">
    <transf name="instantiate" arg1="n_bvs_node" arg2="n">
     <goal name="VC n_bvs_def_pos.0.1.0.0" expl="false case (postcondition)">
     <transf name="rewrite" arg1="mapz_spec5" arg2="in" arg3="Hinst">
      <goal name="VC n_bvs_def_pos.0.1.0.0.0" expl="false case (postcondition)">
      <transf name="rewrite" arg1="mapo_spec5" arg2="in" arg3="Hinst">
       <goal name="VC n_bvs_def_pos.0.1.0.0.0.0" expl="false case (postcondition)">
       <transf name="rewrite" arg1="my_map_spec" arg2="in" arg3="Hinst">
        <goal name="VC n_bvs_def_pos.0.1.0.0.0.0.0" expl="false case (postcondition)">
        <transf name="rewrite" arg1="my_map_spec" arg2="in" arg3="Hinst">
         <goal name="VC n_bvs_def_pos.0.1.0.0.0.0.0.0" expl="false case (postcondition)">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC n_bvs_def_pos.0.1.0.0.0.0.0.0.0" expl="false case (postcondition)">
          <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
          </goal>
          <goal name="VC n_bvs_def_pos.0.1.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvs_def_pos.0.1.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC n_bvs_def_pos.0.1.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_n_bvs" expl="VC for map_n_bvs">
 <transf name="eliminate_let" >
  <goal name="VC map_n_bvs.0" expl="VC for map_n_bvs">
  <transf name="split_vc" >
   <goal name="VC map_n_bvs.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="129"/></proof>
   </goal>
   <goal name="VC map_n_bvs.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="133"/></proof>
   </goal>
   <goal name="VC map_n_bvs.0.2" expl="precondition">
   <transf name="apply" arg1="set_map_mem">
    <goal name="VC map_n_bvs.0.2.0" expl="apply premises">
    <transf name="exists" arg1="(int_to_bv e n)">
     <goal name="VC map_n_bvs.0.2.0.0">
     <transf name="split_vc" >
      <goal name="VC map_n_bvs.0.2.0.0.0">
      <transf name="apply" arg1="get_n_bvs_gen">
       <goal name="VC map_n_bvs.0.2.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="139"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC map_n_bvs.0.2.0.0.1">
      <proof prover="0" obsolete="true"><result status="valid" time="0.73"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_n_bvs.0.3" expl="precondition">
   <transf name="instantiate" arg1="map_antec" arg2="(fun (y0:bitvec) -&gt; bv_to_int y0),(n_bvs n),e">
    <goal name="VC map_n_bvs.0.3.0" expl="precondition">
    <transf name="destruct" arg1="Hinst">
     <goal name="VC map_n_bvs.0.3.0.0" expl="destruct premise" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="VC map_n_bvs.0.3.0.1" expl="precondition">
     <transf name="destruct" arg1="Hinst">
      <goal name="VC map_n_bvs.0.3.0.1.0" expl="precondition">
      <transf name="assert" arg1="(0&lt;= e &lt; power 2 n)">
       <goal name="VC map_n_bvs.0.3.0.1.0.0" expl="asserted formula">
       <transf name="split_vc" >
        <goal name="VC map_n_bvs.0.3.0.1.0.0.0">
        <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="143"/></proof>
        </goal>
        <goal name="VC map_n_bvs.0.3.0.1.0.0.1">
        <transf name="replace" arg1="n" arg2="(length a)">
         <goal name="VC map_n_bvs.0.3.0.1.0.0.1.0">
         <transf name="split_all_full" >
          <goal name="VC map_n_bvs.0.3.0.1.0.0.1.0.0">
          <transf name="rewrite" arg1="Hinst">
           <goal name="VC map_n_bvs.0.3.0.1.0.0.1.0.0.0">
           <transf name="compute_specified" >
            <goal name="VC map_n_bvs.0.3.0.1.0.0.1.0.0.0.0">
            <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="143"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_n_bvs.0.3.0.1.0.0.1.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="143"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_n_bvs.0.3.0.1.0.1" expl="precondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="148"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_n_bvs.0.4" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_bv" expl="VC for ind_sum_bv">
 <transf name="split_vc" >
  <goal name="VC ind_sum_bv.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="131"/></proof>
  </goal>
  <goal name="VC ind_sum_bv.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="131"/></proof>
  </goal>
  <goal name="VC ind_sum_bv.2" expl="precondition">
  <transf name="apply" arg1="set_injective">
   <goal name="VC ind_sum_bv.2.0" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC ind_sum_bv.2.0.0" expl="apply premises">
    <transf name="compute_specified" >
     <goal name="VC ind_sum_bv.2.0.0.0" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.63"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ind_sum_bv.3" expl="postcondition">
  <transf name="replace" arg1="(map1 (fun (i:int) -&gt; int_to_bv i n) (to_fset 0 (power 2 n)))" arg2="(n_bvs n)" arg3="in" arg4="H">
   <goal name="VC ind_sum_bv.3.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC ind_sum_bv.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ind_sum_to_sum">
     <goal name="VC ind_sum_bv.3.0.0.0" expl="postcondition">
     <transf name="apply" arg1="sum_eq_gen">
      <goal name="VC ind_sum_bv.3.0.0.0.0" expl="apply premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.76"/></proof>
      </goal>
      <goal name="VC ind_sum_bv.3.0.0.0.1" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC ind_sum_bv.3.0.0.0.1.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC ind_sum_bv.3.0.0.0.1.0.0" expl="apply premises">
        <proof prover="3" obsolete="true"><result status="valid" time="0.93"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_sum_bv.3.1" expl="equality hypothesis">
   <transf name="apply" arg1="set_equal">
    <goal name="VC ind_sum_bv.3.1.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC ind_sum_bv.3.1.0.0" expl="apply premises">
     <transf name="instantiate" arg1="map_antec" arg2="(fun (i:int) -&gt; int_to_bv i n),(to_fset 0 (power 2 n)),e">
      <goal name="VC ind_sum_bv.3.1.0.0.0" expl="apply premises">
      <transf name="destruct" arg1="Hinst">
       <goal name="VC ind_sum_bv.3.1.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
       <goal name="VC ind_sum_bv.3.1.0.0.0.1" expl="apply premises">
       <transf name="destruct" arg1="Hinst">
        <goal name="VC ind_sum_bv.3.1.0.0.0.1.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="VC ind_sum_bv.3.1.0.0.0.1.0.0" expl="apply premises">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC ind_sum_bv.3.1.0.0.0.1.0.0.0" expl="apply premises">
          <transf name="replace" arg1="((fun (i:int) -&gt; int_to_bv i n) @ a)" arg2="(int_to_bv a n)">
           <goal name="VC ind_sum_bv.3.1.0.0.0.1.0.0.0.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="143"/></proof>
           </goal>
           <goal name="VC ind_sum_bv.3.1.0.0.0.1.0.0.0.1" expl="equality hypothesis">
           <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="143"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_sum_bv.3.1.1" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC ind_sum_bv.3.1.1.0" expl="apply premises">
     <transf name="apply" arg1="set_map_mem">
      <goal name="VC ind_sum_bv.3.1.1.0.0" expl="apply premises">
      <transf name="exists" arg1="(bv_to_int e)">
       <goal name="VC ind_sum_bv.3.1.1.0.0.0">
       <transf name="split_vc" >
        <goal name="VC ind_sum_bv.3.1.1.0.0.0.0">
        <proof prover="3" obsolete="true"><result status="valid" time="0.86"/></proof>
        </goal>
        <goal name="VC ind_sum_bv.3.1.1.0.0.0.1">
        <transf name="compute_specified" >
         <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0">
         <transf name="replace" arg1="n" arg2="(length e)">
          <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0">
          <transf name="rewrite" arg1="int_to_bv_to_int">
           <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0.0">
           <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
           </goal>
           <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0.1" expl="rewrite premises">
           <transf name="replace" arg1="(length e)" arg2="n">
            <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0.1.0" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="135"/></proof>
            </goal>
            <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0.1.1" expl="equality hypothesis">
            <transf name="split_all_full" >
             <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0.1.1.0" expl="equality hypothesis">
             <transf name="apply" arg1="n_bvs_spec2">
              <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0.1.1.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
              </goal>
              <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.0.1.1.0.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="135"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.1" expl="equality hypothesis">
          <transf name="apply" arg1="goal_comm">
           <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.1.0" expl="apply premises">
           <transf name="split_all_full" >
            <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.1.0.0" expl="apply premises">
            <transf name="apply" arg1="n_bvs_spec2">
             <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.1.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="135"/></proof>
             </goal>
             <goal name="VC ind_sum_bv.3.1.1.0.0.0.1.0.1.0.0.1" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="135"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC first_div" expl="VC for first_div">
 <transf name="split_vc" >
  <goal name="VC first_div.0" expl="loop invariant init">
  <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="131"/></proof>
  </goal>
  <goal name="VC first_div.1" expl="loop invariant init">
  <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="133"/></proof>
  </goal>
  <goal name="VC first_div.2" expl="loop invariant init">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
  </goal>
  <goal name="VC first_div.3" expl="loop invariant init">
  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="135"/></proof>
  </goal>
  <goal name="VC first_div.4" expl="loop invariant init">
  <proof prover="3" obsolete="true"><result status="valid" time="2.10"/></proof>
  </goal>
  <goal name="VC first_div.5" expl="loop variant decrease">
  <transf name="split_vc" >
   <goal name="VC first_div.5.0" expl="loop variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.58" steps="155"/></proof>
   </goal>
   <goal name="VC first_div.5.1" expl="loop variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.6" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.6.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.7" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.7.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="156"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.8" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.8.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="156"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.9" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.9.0" expl="loop invariant preservation">
   <proof prover="0" obsolete="true"><result status="valid" time="0.99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.10" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.10.0" expl="loop invariant preservation">
   <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.11" expl="loop variant decrease">
  <transf name="split_vc" >
   <goal name="VC first_div.11.0" expl="loop variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="155"/></proof>
   </goal>
   <goal name="VC first_div.11.1" expl="loop variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.12" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.12.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.13" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.13.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="156"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.14" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.14.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.15" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.15.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="166"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.16" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="VC first_div.16.0" expl="loop invariant preservation">
   <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.17" expl="assertion">
  <transf name="split_vc" >
   <goal name="VC first_div.17.0" expl="assertion">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.18" expl="assertion">
  <transf name="split_vc" >
   <goal name="VC first_div.18.0" expl="assertion">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.19" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC first_div.19.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="153"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.20" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC first_div.20.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC first_div.21" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC first_div.21.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="145"/></proof>
   </goal>
   <goal name="VC first_div.21.1" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_concat" expl="VC for injective_concat">
 <transf name="eliminate_let" >
  <goal name="VC injective_concat.0" expl="VC for injective_concat">
  <transf name="split_vc" >
   <goal name="VC injective_concat.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="133"/></proof>
   </goal>
   <goal name="VC injective_concat.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC injective_concat.0.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="135"/></proof>
    </goal>
    <goal name="VC injective_concat.0.1.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_concat.0.2" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC injective_concat.0.2.0" expl="precondition">
    <transf name="assert" arg1="(getbv (concat_l e i) (first_div e e&#39;+1) &lt;&gt; getbv (concat_l e&#39; i) ((first_div e e&#39;)+1))">
     <goal name="VC injective_concat.0.2.0.0" expl="asserted formula">
     <transf name="rewrite" arg1="concat_l_def">
      <goal name="VC injective_concat.0.2.0.0.0" expl="asserted formula">
      <transf name="rewrite" arg1="concat_l_def">
       <goal name="VC injective_concat.0.2.0.0.0.0" expl="asserted formula">
       <transf name="rewrite" arg1="assert_make_bv_b">
        <goal name="VC injective_concat.0.2.0.0.0.0.0" expl="asserted formula">
        <transf name="rewrite" arg1="assert_make_bv_b">
         <goal name="VC injective_concat.0.2.0.0.0.0.0.0" expl="asserted formula">
         <transf name="compute_specified" >
          <goal name="VC injective_concat.0.2.0.0.0.0.0.0.0" expl="asserted formula">
          <proof prover="0" obsolete="true"><result status="valid" time="1.19"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC injective_concat.0.2.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="3" obsolete="true"><result status="valid" time="3.53"/></proof>
         </goal>
         <goal name="VC injective_concat.0.2.0.0.0.0.0.2" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="VC injective_concat.0.2.0.0.0.0.0.2.0" expl="rewrite premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.85"/></proof>
          </goal>
          <goal name="VC injective_concat.0.2.0.0.0.0.0.2.1" expl="rewrite premises">
          <proof prover="5" obsolete="true"><result status="valid" time="1.15"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC injective_concat.0.2.0.0.0.0.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="5.52"/></proof>
        </goal>
        <goal name="VC injective_concat.0.2.0.0.0.0.2" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="1.70"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC injective_concat.0.2.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="141"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC injective_concat.0.2.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC injective_concat.0.2.0.1" expl="precondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="143"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_concat.0.3" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_first_div" expl="VC for inf_first_div">
 <transf name="split_vc" >
  <goal name="VC inf_first_div.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.61"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC first_div_diff" expl="VC for first_div_diff">
 <transf name="split_vc" >
  <goal name="VC first_div_diff.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC exists_first_div" expl="VC for exists_first_div">
 <transf name="split_vc" >
  <goal name="VC exists_first_div.0" expl="postcondition">
  <transf name="exists" arg1="(first_div bv1 bv2)">
   <goal name="VC exists_first_div.0.0">
   <transf name="split_vc" >
    <goal name="VC exists_first_div.0.0.0">
    <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="133"/></proof>
    </goal>
    <goal name="VC exists_first_div.0.0.1">
    <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="133"/></proof>
    </goal>
    <goal name="VC exists_first_div.0.0.2">
    <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_diff_length" expl="VC for set_diff_length">
 <transf name="split_vc" >
  <goal name="VC set_diff_length.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="129"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_diff_val" expl="VC for set_diff_val">
 <transf name="split_vc" >
  <goal name="VC set_diff_val.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_decomp" expl="VC for kth_decomp">
 <transf name="eliminate_let" >
  <goal name="VC kth_decomp.0" expl="VC for kth_decomp">
  <transf name="split_vc" >
   <goal name="VC kth_decomp.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="135"/></proof>
   </goal>
   <goal name="VC kth_decomp.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC kth_decomp.0.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="133"/></proof>
    </goal>
    <goal name="VC kth_decomp.0.1.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_decomp.0.2" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="137"/></proof>
   </goal>
   <goal name="VC kth_decomp.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
   </goal>
   <goal name="VC kth_decomp.0.4" expl="postcondition">
   <transf name="rewrite" arg1="H2">
    <goal name="VC kth_decomp.0.4.0" expl="postcondition">
    <transf name="replace" arg1="( ind_isum (fun (k1:int) -&gt; (getbv bv @ k1) * power 2 ((length bv - 1) - k1))
  0 (length bv))" arg2="(ind_isum
  (fun (l:int) -&gt;
    if l &lt; length bv then (getbv bv @ l) * power 2 ((length bv - 1) - l)
    else 0)
  0 (length bv))">
     <goal name="VC kth_decomp.0.4.0.0" expl="postcondition">
     <transf name="rewrite" arg1="H1">
      <goal name="VC kth_decomp.0.4.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H">
       <goal name="VC kth_decomp.0.4.0.0.0.0" expl="postcondition">
       <transf name="compute_specified" >
        <goal name="VC kth_decomp.0.4.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="add_assoc">
         <goal name="VC kth_decomp.0.4.0.0.0.0.0.0" expl="postcondition">
         <transf name="apply" arg1="add_eq">
          <goal name="VC kth_decomp.0.4.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="4.04"/></proof>
          </goal>
          <goal name="VC kth_decomp.0.4.0.0.0.0.0.0.1" expl="apply premises">
          <transf name="apply" arg1="add_eq">
           <goal name="VC kth_decomp.0.4.0.0.0.0.0.0.1.0" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="137"/></proof>
           </goal>
           <goal name="VC kth_decomp.0.4.0.0.0.0.0.0.1.1" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="4.40"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC kth_decomp.0.4.0.1" expl="equality hypothesis">
     <proof prover="3" obsolete="true"><result status="valid" time="5.66"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_decomp.0.5" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC kth_decomp.0.5.0" expl="postcondition">
    <transf name="apply" arg1="add_eq">
     <goal name="VC kth_decomp.0.5.0.0" expl="apply premises">
     <transf name="apply" arg1="add_eq">
      <goal name="VC kth_decomp.0.5.0.0.0" expl="apply premises">
      <transf name="apply" arg1="ind_isum_eq">
       <goal name="VC kth_decomp.0.5.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC kth_decomp.0.5.0.0.0.0.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC kth_decomp.0.5.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="143"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC kth_decomp.0.5.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC kth_decomp.0.5.0.1" expl="apply premises">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC kth_decomp.0.5.0.1.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC kth_decomp.0.5.0.1.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC kth_decomp.0.5.0.1.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="143"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_prod" expl="VC for int_to_bv_prod">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_prod.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="139"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="143"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="147"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.3" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.4" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.4.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="153"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.5" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.5.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.6" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.6.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.7" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.7.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.78"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.8" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.8.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.9" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.9.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="164"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.10" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.10.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.11" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_to_bv_prod.11.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="161"/></proof>
   </goal>
   <goal name="VC int_to_bv_prod.11.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.12" expl="precondition">
  <transf name="compute_specified" >
   <goal name="VC int_to_bv_prod.12.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_prod.12.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.66" steps="164"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.13" expl="assertion">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="145"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.14" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="139"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.15" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="145"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.16" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="139"/></proof>
  </goal>
  <goal name="VC int_to_bv_prod.17" expl="precondition">
  <transf name="compute_specified" >
   <goal name="VC int_to_bv_prod.17.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="146"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_bv_prod.18" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC int_to_bv_prod.18.0" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="VC int_to_bv_prod.18.0.0" expl="postcondition">
    <transf name="case" arg1="(i = j)">
     <goal name="VC int_to_bv_prod.18.0.0.0" expl="true case (postcondition)">
     <proof prover="3" obsolete="true"><result status="valid" time="2.02"/></proof>
     </goal>
     <goal name="VC int_to_bv_prod.18.0.0.1" expl="false case (postcondition)">
     <proof prover="3" obsolete="true"><result status="valid" time="4.71"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_bv_prod_gen" expl="VC for int_to_bv_prod_gen">
 <transf name="split_vc" >
  <goal name="VC int_to_bv_prod_gen.0" expl="postcondition">
  <transf name="apply" arg1="int_to_bv_prod">
   <goal name="VC int_to_bv_prod_gen.0.0" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_prod_gen.0.0.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_prod_gen.0.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_prod_gen.0.1.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="137"/></proof>
    </goal>
    <goal name="VC int_to_bv_prod_gen.0.1.1" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_bv_prod_gen.0.2" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC int_to_bv_prod_gen.0.2.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="137"/></proof>
    </goal>
    <goal name="VC int_to_bv_prod_gen.0.2.1" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_decomp_bound_zero" expl="VC for kth_decomp_bound_zero">
 <transf name="eliminate_let" >
  <goal name="VC kth_decomp_bound_zero.0" expl="VC for kth_decomp_bound_zero">
  <transf name="split_vc" >
   <goal name="VC kth_decomp_bound_zero.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC kth_decomp_bound_zero.0.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
    </goal>
    <goal name="VC kth_decomp_bound_zero.0.0.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_decomp_bound_zero.0.1" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC kth_decomp_bound_zero.0.1.0" expl="postcondition">
    <transf name="rewrite" arg1="add_assoc">
     <goal name="VC kth_decomp_bound_zero.0.1.0.0" expl="postcondition">
     <transf name="assert" arg1="((((getbv bv @ k) * power 2 ((length bv - 1) - k))
         + ind_isum
           (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
           (k + 1) (length bv)) &gt;= 0)">
      <goal name="VC kth_decomp_bound_zero.0.1.0.0.0" expl="asserted formula">
      <transf name="assert" arg1="(0&lt;=ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
     (k + 1) (length bv) )">
       <goal name="VC kth_decomp_bound_zero.0.1.0.0.0.0" expl="asserted formula">
       <transf name="apply" arg1="ind_isum_pos">
        <goal name="VC kth_decomp_bound_zero.0.1.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="137"/></proof>
        </goal>
        <goal name="VC kth_decomp_bound_zero.0.1.0.0.0.0.1" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC kth_decomp_bound_zero.0.1.0.0.0.0.1.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC kth_decomp_bound_zero.0.1.0.0.0.0.1.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.79"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC kth_decomp_bound_zero.0.1.0.0.0.1" expl="asserted formula">
       <proof prover="3" obsolete="true"><result status="valid" time="4.20"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kth_decomp_bound_zero.0.1.0.0.1" expl="postcondition">
      <proof prover="3" obsolete="true"><result status="valid" time="5.52"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_decomp_bound_zero.0.2" expl="postcondition">
   <transf name="rewrite" arg1="H1">
    <goal name="VC kth_decomp_bound_zero.0.2.0" expl="postcondition">
    <transf name="rewrite" arg1="add_assoc">
     <goal name="VC kth_decomp_bound_zero.0.2.0.0" expl="postcondition">
     <transf name="replace" arg1="(((getbv bv @ k) * power 2 ((length bv - 1) - k))
      + ind_isum
        (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
        (k + 1) (length bv))" arg2="(mod (bv_to_int bv) (power 2 ((length bv - k) - 1)) )">
      <goal name="VC kth_decomp_bound_zero.0.2.0.0.0" expl="postcondition">
      <proof prover="3" obsolete="true"><result status="valid" time="6.92"/></proof>
      </goal>
      <goal name="VC kth_decomp_bound_zero.0.2.0.0.1" expl="equality hypothesis">
      <transf name="instantiate" arg1="mod_isum" arg2="(bv_to_int bv),(length bv -k -1),(length bv)">
       <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="zero_add">
        <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0" expl="equality hypothesis">
        <transf name="rewrite" arg1="Hinst">
         <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.0" expl="equality hypothesis">
         <transf name="apply" arg1="ind_isum_eq_gen">
          <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.0.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.0.0.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="146"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="139"/></proof>
          </goal>
          <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.0.2" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="139"/></proof>
         </goal>
         <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.2" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.2.0">
          <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="141"/></proof>
          </goal>
          <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.2.1">
          <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.3" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.3.0">
          <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="139"/></proof>
          </goal>
          <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.0.3.1">
          <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC kth_decomp_bound_zero.0.2.0.0.1.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_decomp_bound_one" expl="VC for kth_decomp_bound_one">
 <transf name="eliminate_let" >
  <goal name="VC kth_decomp_bound_one.0" expl="VC for kth_decomp_bound_one">
  <transf name="split_vc" >
   <goal name="VC kth_decomp_bound_one.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC kth_decomp_bound_one.0.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
    </goal>
    <goal name="VC kth_decomp_bound_one.0.0.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_decomp_bound_one.0.1" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC kth_decomp_bound_one.0.1.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) 0
   k + power 2 ((length bv - k) - 1))" arg2="(ind_isum
       (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) 0 k
       + ((getbv bv @ k) * power 2 ((length bv - 1) - k)))">
     <goal name="VC kth_decomp_bound_one.0.1.0.0" expl="postcondition">
     <transf name="assert" arg1="(0&lt;=ind_isum
        (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
        (k + 1) (length bv))">
      <goal name="VC kth_decomp_bound_one.0.1.0.0.0" expl="asserted formula">
      <transf name="apply" arg1="ind_isum_pos">
       <goal name="VC kth_decomp_bound_one.0.1.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="137"/></proof>
       </goal>
       <goal name="VC kth_decomp_bound_one.0.1.0.0.0.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC kth_decomp_bound_one.0.1.0.0.0.1.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC kth_decomp_bound_one.0.1.0.0.0.1.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.94"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC kth_decomp_bound_one.0.1.0.0.1" expl="postcondition">
      <proof prover="3" obsolete="true"><result status="valid" time="6.17"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC kth_decomp_bound_one.0.1.0.1" expl="equality hypothesis">
     <proof prover="3" obsolete="true"><result status="valid" time="4.26"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_decomp_bound_one.0.2" expl="postcondition">
   <transf name="rewrite" arg1="H1">
    <goal name="VC kth_decomp_bound_one.0.2.0" expl="postcondition">
    <transf name="rewrite" arg1="add_assoc">
     <goal name="VC kth_decomp_bound_one.0.2.0.0" expl="postcondition">
     <transf name="replace" arg1="(((getbv bv @ k) * power 2 ((length bv - 1) - k))
      + ind_isum
        (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
        (k + 1) (length bv))" arg2="((ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l)) k   (length bv)))">
      <goal name="VC kth_decomp_bound_one.0.2.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(ind_isum (fun (l:int) -&gt; (getbv bv @ l) * power 2 ((length bv - 1) - l))
     k (length bv) )" arg2="(mod (bv_to_int bv) (power 2 (length bv -k)))">
       <goal name="VC kth_decomp_bound_one.0.2.0.0.0.0" expl="postcondition">
       <proof prover="3" obsolete="true"><result status="valid" time="6.17"/></proof>
       </goal>
       <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1" expl="equality hypothesis">
       <transf name="instantiate" arg1="mod_isum" arg2="(bv_to_int bv),(length bv -k),(length bv)">
        <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0" expl="equality hypothesis">
        <transf name="case" arg1="(k =0)">
         <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0" expl="true case (equality hypothesis)">
         <transf name="replace" arg1="(mod (bv_to_int bv) (power 2 (length bv - k)))" arg2="(bv_to_int bv)">
          <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0.0" expl="true case (equality hypothesis)">
          <transf name="rewrite" arg1="bv_to_int_sum">
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0.0.0" expl="true case (equality hypothesis)">
           <transf name="apply" arg1="ind_isum_eq_gen">
            <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0.0.0.0" expl="apply premises">
            <transf name="split_vc" >
             <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0.0.0.0.0" expl="apply premises">
             <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0.0.0.1" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="141"/></proof>
            </goal>
            <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0.0.0.2" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="141"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.0.1" expl="equality hypothesis">
          <proof prover="3" obsolete="true"><result status="valid" time="0.98"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1" expl="false case (equality hypothesis)">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.0" expl="false case (equality hypothesis)">
          <transf name="apply" arg1="ind_isum_eq_gen">
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.0.0" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.0.0.0" expl="apply premises">
            <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.0.1" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="141"/></proof>
           </goal>
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.0.2" expl="apply premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="141"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="141"/></proof>
          </goal>
          <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.2" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.2.0">
           <proof prover="4" obsolete="true"><result status="valid" time="0.47" steps="143"/></proof>
           </goal>
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.2.1">
           <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="143"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.3" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.3.0">
           <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="141"/></proof>
           </goal>
           <goal name="VC kth_decomp_bound_one.0.2.0.0.0.1.0.1.3.1">
           <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="141"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC kth_decomp_bound_one.0.2.0.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="goal_comm">
       <goal name="VC kth_decomp_bound_one.0.2.0.0.1.0" expl="apply premises">
       <transf name="rewrite" arg1="ind_isum_plus_one">
        <goal name="VC kth_decomp_bound_one.0.2.0.0.1.0.0" expl="apply premises">
        <transf name="apply" arg1="add_eq">
         <goal name="VC kth_decomp_bound_one.0.2.0.0.1.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="141"/></proof>
         </goal>
         <goal name="VC kth_decomp_bound_one.0.2.0.0.1.0.0.1" expl="apply premises">
         <proof prover="3" obsolete="true"><result status="valid" time="5.11"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC kth_decomp_bound_one.0.2.0.0.1.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_length_2" expl="VC for bv_to_int_length_2">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_length_2.0" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="4.60"/></proof>
  </goal>
  <goal name="VC bv_to_int_length_2.1" expl="postcondition">
  <transf name="replace" arg1="x" arg2="(int_to_bv (bv_to_int x ) 2)">
   <goal name="VC bv_to_int_length_2.1.0" expl="postcondition">
   <transf name="rewrite" arg1="int_to_bv_value">
    <goal name="VC bv_to_int_length_2.1.0.0" expl="postcondition">
    <transf name="rewrite" arg1="int_to_bv_to_int_">
     <goal name="VC bv_to_int_length_2.1.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(power 2 ((2 - 1) - 1))" arg2="1">
      <goal name="VC bv_to_int_length_2.1.0.0.0.0" expl="postcondition">
      <proof prover="3" obsolete="true"><result status="valid" time="0.74"/></proof>
      </goal>
      <goal name="VC bv_to_int_length_2.1.0.0.0.1" expl="equality hypothesis">
      <proof prover="3" obsolete="true"><result status="valid" time="0.69"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_length_2.1.0.0.1" expl="rewrite premises">
     <proof prover="3" obsolete="true"><result status="valid" time="0.27"/></proof>
     </goal>
     <goal name="VC bv_to_int_length_2.1.0.0.2" expl="rewrite premises">
     <proof prover="3" obsolete="true"><result status="valid" time="0.39"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_length_2.1.0.1" expl="rewrite premises">
    <proof prover="3" obsolete="true"><result status="valid" time="0.30"/></proof>
    </goal>
    <goal name="VC bv_to_int_length_2.1.0.2" expl="rewrite premises">
    <proof prover="3" obsolete="true"><result status="valid" time="0.78"/></proof>
    </goal>
    <goal name="VC bv_to_int_length_2.1.0.3" expl="rewrite premises">
    <proof prover="3" obsolete="true"><result status="valid" time="0.48"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_length_2.1.1" expl="equality hypothesis">
   <proof prover="3" obsolete="true"><result status="valid" time="0.93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_length_2_gen" expl="VC for bv_to_int_length_2_gen">
 <proof prover="3" obsolete="true"><result status="valid" time="2.82"/></proof>
 </goal>
</theory>
<theory name="Bv_int_op">
 <goal name="VC pre_injective_bv_to_int" expl="VC for pre_injective_bv_to_int">
 <transf name="compute_specified" >
  <goal name="VC pre_injective_bv_to_int.0" expl="VC for pre_injective_bv_to_int">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.44" steps="131"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.2" expl="assertion">
   <proof prover="0" obsolete="true"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="143"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="143"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.5" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="143"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.6" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="143"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.7" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="147"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.8" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="147"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.9" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="147"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.10" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="148"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.11" expl="assertion">
   <proof prover="0" obsolete="true"><result status="valid" time="0.92"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.12" expl="assertion">
   <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.13" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="145"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.14" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="145"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.15" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="145"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.16" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="145"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.17" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="149"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.18" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="149"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.19" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="149"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.20" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="150"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.0.21" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" >
  <goal name="VC pre_injective_bv_to_int.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="131"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.2" expl="assertion">
  <proof prover="0" obsolete="true"><result status="valid" time="1.02"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="143"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="143"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.5" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.5.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="143"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.5.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.6" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.6.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.7" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="147"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.8" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="147"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.9" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.9.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="147"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.9.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.10" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.10.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="148"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.11" expl="assertion">
  <proof prover="0" obsolete="true"><result status="valid" time="1.09"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.12" expl="assertion">
  <proof prover="0" obsolete="true"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.13" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="145"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.14" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="145"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.15" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.15.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="145"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.15.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.16" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.16.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.17" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="149"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.18" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="149"/></proof>
  </goal>
  <goal name="VC pre_injective_bv_to_int.19" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.19.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="149"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.19.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.20" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.20.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="150"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pre_injective_bv_to_int.21" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC pre_injective_bv_to_int.21.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.86"/></proof>
   </goal>
   <goal name="VC pre_injective_bv_to_int.21.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.74"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_bv_to_int" expl="VC for injective_bv_to_int">
 <transf name="eliminate_let" >
  <goal name="VC injective_bv_to_int.0" expl="VC for injective_bv_to_int">
  <transf name="split_vc" >
   <goal name="VC injective_bv_to_int.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
   </goal>
   <goal name="VC injective_bv_to_int.0.1" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC injective_bv_to_int.0.1.0" expl="precondition">
    <transf name="case" arg1="(bv_to_int e = bv_to_int e&#39;)">
     <goal name="VC injective_bv_to_int.0.1.0.0" expl="true case (precondition)">
     <proof prover="3" obsolete="true"><result status="valid" time="0.84"/></proof>
     </goal>
     <goal name="VC injective_bv_to_int.0.1.0.1" expl="false case (precondition)">
     <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="139"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_bv_to_int.0.2" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bijective_to_int" expl="VC for bijective_to_int">
 <transf name="compute_specified" >
  <goal name="VC bijective_to_int.0" expl="VC for bijective_to_int">
  <transf name="split_vc" >
   <goal name="VC bijective_to_int.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="129"/></proof>
   </goal>
   <goal name="VC bijective_to_int.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="135"/></proof>
   </goal>
   <goal name="VC bijective_to_int.0.2" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="137"/></proof>
   </goal>
   <goal name="VC bijective_to_int.0.3" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.90"/></proof>
   </goal>
   <goal name="VC bijective_to_int.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
   </goal>
   <goal name="VC bijective_to_int.0.5" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC bijective_to_int.0.6" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC bijective_to_int.0.6.0" expl="precondition">
    <transf name="eliminate_if" >
     <goal name="VC bijective_to_int.0.6.0.0" expl="VC for bijective_to_int">
     <transf name="split_vc" >
      <goal name="VC bijective_to_int.0.6.0.0.0" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="141"/></proof>
      </goal>
      <goal name="VC bijective_to_int.0.6.0.0.1" expl="precondition">
      <transf name="apply" arg1="in_n_bvs">
       <goal name="VC bijective_to_int.0.6.0.0.1.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="135"/></proof>
       </goal>
       <goal name="VC bijective_to_int.0.6.0.0.1.1" expl="apply premises">
       <transf name="assert" arg1="false">
        <goal name="VC bijective_to_int.0.6.0.0.1.1.0" expl="asserted formula">
        <transf name="replace" arg1="(map1 (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))" arg2="(to_fset 0 (power 2 n))" arg3="in" arg4="H1">
         <goal name="VC bijective_to_int.0.6.0.0.1.1.0.0" expl="asserted formula">
         <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="136"/></proof>
         </goal>
         <goal name="VC bijective_to_int.0.6.0.0.1.1.0.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="138"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bijective_to_int.0.6.0.0.1.1.1" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="135"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bijective_to_int.0.6.1" expl="precondition">
    <transf name="eliminate_if" >
     <goal name="VC bijective_to_int.0.6.1.0" expl="VC for bijective_to_int">
     <transf name="split_vc" >
      <goal name="VC bijective_to_int.0.6.1.0.0" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="141"/></proof>
      </goal>
      <goal name="VC bijective_to_int.0.6.1.0.1" expl="precondition">
      <transf name="assert" arg1="false">
       <goal name="VC bijective_to_int.0.6.1.0.1.0" expl="asserted formula">
       <transf name="replace" arg1="(map1 (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))" arg2="(to_fset 0 (power 2 n))" arg3="in" arg4="H1">
        <goal name="VC bijective_to_int.0.6.1.0.1.0.0" expl="asserted formula">
        <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="136"/></proof>
        </goal>
        <goal name="VC bijective_to_int.0.6.1.0.1.0.1" expl="equality hypothesis">
        <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="138"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bijective_to_int.0.6.1.0.1.1" expl="precondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_to_int.0.7" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="137"/></proof>
   </goal>
   <goal name="VC bijective_to_int.0.8" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_int_to_bv" expl="VC for injective_int_to_bv">
 <transf name="split_vc" >
  <goal name="VC injective_int_to_bv.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="129"/></proof>
  </goal>
  <goal name="VC injective_int_to_bv.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="129"/></proof>
  </goal>
  <goal name="VC injective_int_to_bv.2" expl="precondition">
  <transf name="compute_specified" >
   <goal name="VC injective_int_to_bv.2.0" expl="precondition">
   <transf name="case" arg1="(int_to_bv e n = int_to_bv e&#39; n)">
    <goal name="VC injective_int_to_bv.2.0.0" expl="true case (precondition)">
    <transf name="assert" arg1="(bv_to_int (int_to_bv e n) = bv_to_int (int_to_bv e&#39; n))">
     <goal name="VC injective_int_to_bv.2.0.0.0" expl="asserted formula">
     <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="137"/></proof>
     </goal>
     <goal name="VC injective_int_to_bv.2.0.0.1" expl="true case (precondition)">
     <proof prover="0" obsolete="true"><result status="valid" time="1.03"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC injective_int_to_bv.2.0.1" expl="false case (precondition)">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC injective_int_to_bv.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC n_bvs_card" expl="VC for n_bvs_card">
 <transf name="split_vc" >
  <goal name="VC n_bvs_card.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="129"/></proof>
  </goal>
  <goal name="VC n_bvs_card.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="129"/></proof>
  </goal>
  <goal name="VC n_bvs_card.2" expl="precondition">
  <transf name="case" arg1="(n=0)">
   <goal name="VC n_bvs_card.2.0" expl="true case (precondition)">
   <transf name="split_all_full" >
    <goal name="VC n_bvs_card.2.0.0" expl="true case (precondition)">
    <transf name="apply" arg1="set_bijective1">
     <goal name="VC n_bvs_card.2.0.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC n_bvs_card.2.0.0.0.0" expl="apply premises">
      <proof prover="3" obsolete="true"><result status="valid" time="2.15"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC n_bvs_card.2.0.0.1" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC n_bvs_card.2.0.0.1.0" expl="apply premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.96"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC n_bvs_card.2.0.0.2" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC n_bvs_card.2.0.0.2.0" expl="apply premises">
      <transf name="replace" arg1="e&#39;" arg2="0">
       <goal name="VC n_bvs_card.2.0.0.2.0.0" expl="apply premises">
       <transf name="exists" arg1="(make_bv (fun _ -&gt; 0) 0)">
        <goal name="VC n_bvs_card.2.0.0.2.0.0.0">
        <transf name="split_vc" >
         <goal name="VC n_bvs_card.2.0.0.2.0.0.0.0">
         <proof prover="0" obsolete="true"><result status="valid" time="0.74"/></proof>
         </goal>
         <goal name="VC n_bvs_card.2.0.0.2.0.0.0.1">
         <proof prover="3" obsolete="true"><result status="valid" time="2.14"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC n_bvs_card.2.0.0.2.0.1" expl="equality hypothesis">
       <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC n_bvs_card.2.1" expl="false case (precondition)">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC n_bvs_card.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_first_term_zero" expl="VC for concat_first_term_zero">
 <transf name="compute_specified" >
  <goal name="VC concat_first_term_zero.0" expl="VC for concat_first_term_zero">
  <transf name="split_vc" >
   <goal name="VC concat_first_term_zero.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
   </goal>
   <goal name="VC concat_first_term_zero.0.1" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H4">
   </transf>
   </goal>
   <goal name="VC concat_first_term_zero.0.2" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_first_term_one" expl="VC for concat_first_term_one">
 <transf name="compute_specified" >
  <goal name="VC concat_first_term_one.0" expl="VC for concat_first_term_one">
  <transf name="split_vc" >
   <goal name="VC concat_first_term_one.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="131"/></proof>
   </goal>
   <goal name="VC concat_first_term_one.0.1" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H4">
   </transf>
   </goal>
   <goal name="VC concat_first_term_one.0.2" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_sum_to_int_sum" expl="VC for bv_sum_to_int_sum">
 <transf name="split_vc" >
  <goal name="VC bv_sum_to_int_sum.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="145"/></proof>
  </goal>
  <goal name="VC bv_sum_to_int_sum.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="150"/></proof>
  </goal>
  <goal name="VC bv_sum_to_int_sum.2" expl="postcondition">
  <transf name="replace" arg1="(to_fset 0 (power 2 n))" arg2="(map1 (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))">
   <goal name="VC bv_sum_to_int_sum.2.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC bv_sum_to_int_sum.2.0.0" expl="postcondition">
    <transf name="apply" arg1="sum_eq">
     <goal name="VC bv_sum_to_int_sum.2.0.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC bv_sum_to_int_sum.2.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_sum_to_int_sum.2.0.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="154"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_sum_to_int_sum.2.1" expl="equality hypothesis">
   <transf name="apply" arg1="set_equal">
    <goal name="VC bv_sum_to_int_sum.2.1.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC bv_sum_to_int_sum.2.1.0.0" expl="apply premises">
     <transf name="apply" arg1="set_map_mem">
      <goal name="VC bv_sum_to_int_sum.2.1.0.0.0" expl="apply premises">
      <transf name="exists" arg1="(int_to_bv e n)">
       <goal name="VC bv_sum_to_int_sum.2.1.0.0.0.0">
       <transf name="split_vc" >
        <goal name="VC bv_sum_to_int_sum.2.1.0.0.0.0.0">
        <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="154"/></proof>
        </goal>
        <goal name="VC bv_sum_to_int_sum.2.1.0.0.0.0.1">
        <proof prover="3" obsolete="true"><result status="valid" time="2.81"/></proof>
        <proof prover="5" obsolete="true"><result status="valid" time="0.84"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_sum_to_int_sum.2.1.1" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC bv_sum_to_int_sum.2.1.1.0" expl="apply premises">
     <transf name="instantiate" arg1="map_antec" arg2="(fun (y0:bitvec) -&gt; bv_to_int y0),(n_bvs n),e">
      <goal name="VC bv_sum_to_int_sum.2.1.1.0.0" expl="apply premises">
      <transf name="destruct" arg1="Hinst">
       <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
       <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.1" expl="apply premises">
       <transf name="destruct" arg1="Hinst">
        <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.1.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.1.0.0" expl="apply premises">
         <transf name="compute_hyp_specified" arg1="in" arg2="Hinst">
          <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.1.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="Hinst">
           <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.1.0.0.0.0" expl="apply premises">
           <transf name="replace" arg1="n" arg2="(length a)">
            <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.1.0.0.0.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="158"/></proof>
            </goal>
            <goal name="VC bv_sum_to_int_sum.2.1.1.0.0.1.0.0.0.0.1" expl="equality hypothesis">
            <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="158"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_concat" expl="VC for sum_concat">
 <transf name="eliminate_let" >
  <goal name="VC sum_concat.0" expl="VC for sum_concat">
  <transf name="split_vc" >
   <goal name="VC sum_concat.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
   </goal>
   <goal name="VC sum_concat.0.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.35"/></proof>
   </goal>
   <goal name="VC sum_concat.0.2" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC sum_concat.0.2.0" expl="postcondition">
    <transf name="instantiate" arg1="mat_sum_comp" arg2="(n_bvs i),(fun bv -&gt; f @ concat_l bv 0),(fun bv -&gt; f @ concat_l bv 1)">
     <goal name="VC sum_concat.0.2.0.0" expl="postcondition">
     <transf name="replace" arg1="( mat_sum (n_bvs i)
  (fun (bv:bitvec) -&gt; add_mat (f @ concat_l bv 0) (f @ concat_l bv 1)))" arg2="(mat_sum (n_bvs i)
  (fun (k:bitvec) -&gt;
    add_mat ((fun (bv:bitvec) -&gt; f @ concat_l bv 0) @ k)
    ((fun (bv:bitvec) -&gt; f @ concat_l bv 1) @ k)))">
      <goal name="VC sum_concat.0.2.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="Hinst">
       <goal name="VC sum_concat.0.2.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="add_mat_eq">
        <goal name="VC sum_concat.0.2.0.0.0.0.0" expl="apply premises">
        <transf name="apply" arg1="rows_mat_sum">
         <goal name="VC sum_concat.0.2.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="150"/></proof>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.0.0.1" expl="apply premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC sum_concat.0.2.0.0.0.0.0.1.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC sum_concat.0.2.0.0.0.0.0.1.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC sum_concat.0.2.0.0.0.0.0.1.0.0.0" expl="apply premises">
            <proof prover="3" obsolete="true"><result status="valid" time="0.83"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sum_concat.0.2.0.0.0.0.0.1.1" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC sum_concat.0.2.0.0.0.0.0.1.1.0" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="3.98"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.0.0.2" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0" expl="apply premises">
           <transf name="apply" arg1="goal_comm">
            <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0" expl="apply premises">
            <transf name="apply" arg1="rows_mat_sum">
             <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="152"/></proof>
             </goal>
             <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.1" expl="apply premises">
             <transf name="apply" arg1="set_constant_size">
              <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.1.0" expl="apply premises">
              <transf name="split_vc" >
               <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises">
               <transf name="compute_specified" >
                <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.1.0.0.0" expl="apply premises">
                <proof prover="3" obsolete="true"><result status="valid" time="0.75"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.1.1" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.1.1.0" expl="apply premises">
               <proof prover="0" obsolete="true"><result status="valid" time="0.82"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.2" expl="apply premises">
             <transf name="compute_specified" >
              <goal name="VC sum_concat.0.2.0.0.0.0.0.2.0.0.0.2.0" expl="apply premises">
              <proof prover="0" obsolete="true"><result status="valid" time="0.72"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.0.0.1" expl="apply premises">
        <transf name="apply" arg1="columns_mat_sum">
         <goal name="VC sum_concat.0.2.0.0.0.0.1.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="150"/></proof>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.0.1.1" expl="apply premises">
         <transf name="apply" arg1="set_constant_size">
          <goal name="VC sum_concat.0.2.0.0.0.0.1.1.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC sum_concat.0.2.0.0.0.0.1.1.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC sum_concat.0.2.0.0.0.0.1.1.0.0.0" expl="apply premises">
            <proof prover="3" obsolete="true"><result status="valid" time="0.74"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sum_concat.0.2.0.0.0.0.1.1.1" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="3.70"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.0.1.2" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0" expl="apply premises">
           <transf name="apply" arg1="goal_comm">
            <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0" expl="apply premises">
            <transf name="apply" arg1="columns_mat_sum">
             <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="152"/></proof>
             </goal>
             <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.1" expl="apply premises">
             <transf name="apply" arg1="set_constant_size">
              <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.1.0" expl="apply premises">
              <transf name="split_vc" >
               <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.1.0.0" expl="apply premises">
               <transf name="compute_specified" >
                <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.1.0.0.0" expl="apply premises">
                <proof prover="3" obsolete="true"><result status="valid" time="0.96"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.1.1" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.1.1.0" expl="apply premises">
               <proof prover="0" obsolete="true"><result status="valid" time="0.75"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.2" expl="apply premises">
             <transf name="compute_specified" >
              <goal name="VC sum_concat.0.2.0.0.0.0.1.2.0.0.0.2.0" expl="apply premises">
              <proof prover="0" obsolete="true"><result status="valid" time="0.66"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.0.0.2" expl="apply premises">
        <transf name="replace" arg1="((i + 1) - 1)" arg2="i">
         <goal name="VC sum_concat.0.2.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.0.2.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.0.0.3" expl="apply premises">
        <transf name="replace" arg1="((i + 1) - 1)" arg2="i">
         <goal name="VC sum_concat.0.2.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.0.3.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sum_concat.0.2.0.0.0.1" expl="rewrite premises">
       <transf name="apply" arg1="set_constant_size">
        <goal name="VC sum_concat.0.2.0.0.0.1.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC sum_concat.0.2.0.0.0.1.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC sum_concat.0.2.0.0.0.1.0.0.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="0.89"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.0.1.1" expl="apply premises">
        <proof prover="3" obsolete="true"><result status="valid" time="3.62"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sum_concat.0.2.0.0.0.2" expl="rewrite premises">
       <transf name="apply" arg1="set_constant_size">
        <goal name="VC sum_concat.0.2.0.0.0.2.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC sum_concat.0.2.0.0.0.2.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC sum_concat.0.2.0.0.0.2.0.0.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="0.71"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.0.2.1" expl="apply premises">
        <proof prover="3" obsolete="true"><result status="valid" time="4.16"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sum_concat.0.2.0.0.0.3" expl="rewrite premises">
       <transf name="apply" arg1="set_s_rows">
        <goal name="VC sum_concat.0.2.0.0.0.3.0" expl="apply premises">
        <transf name="apply" arg1="set_constant_size">
         <goal name="VC sum_concat.0.2.0.0.0.3.0.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC sum_concat.0.2.0.0.0.3.0.0.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC sum_concat.0.2.0.0.0.3.0.0.0.0" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="0.69"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.3.0.1" expl="apply premises">
         <proof prover="3" obsolete="true"><result status="valid" time="3.61"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.0.3.1" expl="apply premises">
        <transf name="apply" arg1="goal_comm">
         <goal name="VC sum_concat.0.2.0.0.0.3.1.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0" expl="apply premises">
          <transf name="apply" arg1="set_s_rows">
           <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0.0" expl="apply premises">
           <transf name="apply" arg1="set_constant_size">
            <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0.0.0" expl="apply premises">
            <transf name="split_vc" >
             <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0.0.0.0" expl="apply premises">
             <transf name="compute_specified" >
              <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0.0.0.0.0" expl="apply premises">
              <proof prover="3" obsolete="true"><result status="valid" time="0.83"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0.0.1" expl="apply premises">
            <proof prover="3" obsolete="true"><result status="valid" time="4.38"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0.1" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC sum_concat.0.2.0.0.0.3.1.0.0.1.0" expl="apply premises">
            <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sum_concat.0.2.0.0.0.4" expl="rewrite premises">
       <transf name="apply" arg1="set_s_columns">
        <goal name="VC sum_concat.0.2.0.0.0.4.0" expl="apply premises">
        <transf name="apply" arg1="set_constant_size">
         <goal name="VC sum_concat.0.2.0.0.0.4.0.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC sum_concat.0.2.0.0.0.4.0.0.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC sum_concat.0.2.0.0.0.4.0.0.0.0" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="0.71"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sum_concat.0.2.0.0.0.4.0.1" expl="apply premises">
         <proof prover="3" obsolete="true"><result status="valid" time="3.69"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.0.4.1" expl="apply premises">
        <transf name="apply" arg1="goal_comm">
         <goal name="VC sum_concat.0.2.0.0.0.4.1.0" expl="apply premises">
         <transf name="apply" arg1="set_s_columns">
          <goal name="VC sum_concat.0.2.0.0.0.4.1.0.0" expl="apply premises">
          <transf name="apply" arg1="set_constant_size">
           <goal name="VC sum_concat.0.2.0.0.0.4.1.0.0.0" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC sum_concat.0.2.0.0.0.4.1.0.0.0.0" expl="apply premises">
            <transf name="compute_specified" >
             <goal name="VC sum_concat.0.2.0.0.0.4.1.0.0.0.0.0" expl="apply premises">
             <proof prover="3" obsolete="true"><result status="valid" time="0.86"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sum_concat.0.2.0.0.0.4.1.0.0.1" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="4.15"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC sum_concat.0.2.0.0.0.4.1.0.1" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC sum_concat.0.2.0.0.0.4.1.0.1.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sum_concat.0.2.0.0.0.5" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="149"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sum_concat.0.2.0.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="mat_sum_eq">
       <goal name="VC sum_concat.0.2.0.0.1.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="149"/></proof>
       </goal>
       <goal name="VC sum_concat.0.2.0.0.1.1" expl="apply premises">
       <transf name="apply" arg1="set_constant_size">
        <goal name="VC sum_concat.0.2.0.0.1.1.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC sum_concat.0.2.0.0.1.1.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC sum_concat.0.2.0.0.1.1.0.0.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="0.73"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sum_concat.0.2.0.0.1.1.1" expl="apply premises">
        <proof prover="3" obsolete="true"><result status="valid" time="4.02"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sum_concat.0.2.0.0.1.2" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC sum_concat.0.2.0.0.1.2.0" expl="apply premises">
        <proof prover="5" obsolete="true"><result status="valid" time="1.05"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC geometric_series_bv" expl="VC for geometric_series_bv">
 <transf name="split_vc" >
  <goal name="VC geometric_series_bv.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="147"/></proof>
  </goal>
  <goal name="VC geometric_series_bv.1" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
  </goal>
  <goal name="VC geometric_series_bv.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="149"/></proof>
  </goal>
  <goal name="VC geometric_series_bv.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="151"/></proof>
  </goal>
  <goal name="VC geometric_series_bv.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="151"/></proof>
  </goal>
  <goal name="VC geometric_series_bv.5" expl="postcondition">
  <transf name="rewrite" arg1="H1">
   <goal name="VC geometric_series_bv.5.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC geometric_series_bv.5.0.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="153"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC geometric_series_bv_init_one" expl="VC for geometric_series_bv_init_one">
 <transf name="split_vc" >
  <goal name="VC geometric_series_bv_init_one.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="147"/></proof>
  </goal>
  <goal name="VC geometric_series_bv_init_one.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="147"/></proof>
  </goal>
  <goal name="VC geometric_series_bv_init_one.2" expl="postcondition">
  <transf name="replace" arg1="(sum (n_bvs n) (fun (i:bitvec) -&gt; cpower q (bv_to_int i)))" arg2="(sum (n_bvs n) (fun (i:bitvec) -&gt; c_one *.  cpower q (bv_to_int i)))
">
   <goal name="VC geometric_series_bv_init_one.2.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC geometric_series_bv_init_one.2.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.61"/></proof>
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="151"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC geometric_series_bv_init_one.2.1" expl="equality hypothesis">
   <transf name="apply" arg1="sum_eq">
    <goal name="VC geometric_series_bv_init_one.2.1.0" expl="apply premises">
    <transf name="compute_specified" >
     <goal name="VC geometric_series_bv_init_one.2.1.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC geometric_series_bv_init_one.2.1.0.0.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bit_vector_inversions">
 <goal name="VC bv_inversion" expl="VC for bv_inversion">
 <transf name="split_vc" >
  <goal name="VC bv_inversion.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bv_inversion.0.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.49"/></proof>
   </goal>
   <goal name="VC bv_inversion.0.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_inversion.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="129"/></proof>
  </goal>
  <goal name="VC bv_inversion.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
  </goal>
  <goal name="VC bv_inversion.3" expl="postcondition">
  <transf name="rewrite" arg1="H3">
   <goal name="VC bv_inversion.3.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
   <goal name="VC bv_inversion.3.1" expl="rewrite premises">
   <proof prover="0" obsolete="true"><result status="valid" time="0.44"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_inversion_value" expl="VC for bv_inversion_value">
 <transf name="split_vc" >
  <goal name="VC bv_inversion_value.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC bv_inversion_value.0.0" expl="postcondition">
   <transf name="rewrite" arg1="bv_inversion_def">
    <goal name="VC bv_inversion_value.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="assert_make_bv">
     <goal name="VC bv_inversion_value.0.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="1.54"/></proof>
     </goal>
     <goal name="VC bv_inversion_value.0.0.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC bv_inversion_value.0.0.0.1.0" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="1.32"/></proof>
      </goal>
      <goal name="VC bv_inversion_value.0.0.0.1.1" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="1.11"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_inversion_value.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="128"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_inversion_invol" expl="VC for bv_inversion_invol">
 <transf name="split_vc" >
  <goal name="VC bv_inversion_invol.0" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC bv_inversion_invol.0.0" expl="apply premises">
   <proof prover="0" obsolete="true"><result status="valid" time="0.44"/></proof>
   </goal>
   <goal name="VC bv_inversion_invol.0.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC bv_inversion_invol.0.1.0" expl="apply premises">
    <transf name="eliminate_definition" >
     <goal name="VC bv_inversion_invol.0.1.0.0" expl="apply premises">
     <transf name="rewrite" arg1="bv_inversion_def">
      <goal name="VC bv_inversion_invol.0.1.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="bv_inversion_def">
       <goal name="VC bv_inversion_invol.0.1.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="assert_make_bv_b">
        <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="assert_make_bv_b">
          <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="rewrite" arg1="make_bv_length">
            <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="130"/></proof>
            </goal>
            <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
            <proof prover="3" obsolete="true"><result status="valid" time="1.34"/></proof>
            </goal>
            <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="132"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.32"/></proof>
          </goal>
          <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.2" expl="rewrite premises">
          <transf name="rewrite" arg1="make_bv_length">
           <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.2.0" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="1.70" steps="132"/></proof>
           </goal>
           <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.2.1" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="1.29"/></proof>
           </goal>
           <goal name="VC bv_inversion_invol.0.1.0.0.0.0.0.0.2.2" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="132"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC bv_inversion_invol.0.1.0.0.0.0.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="1.86"/></proof>
        </goal>
        <goal name="VC bv_inversion_invol.0.1.0.0.0.0.2" expl="rewrite premises">
        <transf name="rewrite" arg1="make_bv_length">
         <goal name="VC bv_inversion_invol.0.1.0.0.0.0.2.0" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="2.05" steps="132"/></proof>
         </goal>
         <goal name="VC bv_inversion_invol.0.1.0.0.0.0.2.1" expl="rewrite premises">
         <proof prover="3" obsolete="true"><result status="valid" time="1.44"/></proof>
         </goal>
         <goal name="VC bv_inversion_invol.0.1.0.0.0.0.2.2" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="132"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion" expl="VC for int_bit_inversion">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
  </goal>
  <goal name="VC int_bit_inversion.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC int_bit_inversion.1.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="143"/></proof>
   </goal>
   <goal name="VC int_bit_inversion.1.1" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_ext" expl="VC for int_bit_inversion_ext">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion_ext.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="135"/></proof>
  </goal>
  <goal name="VC int_bit_inversion_ext.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="VC int_bit_inversion_ext.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_invol" expl="VC for int_bit_inversion_invol">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion_invol.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC int_bit_inversion_invol.0.0" expl="postcondition">
   <transf name="rewrite" arg1="int_bit_inversion_def">
    <goal name="VC int_bit_inversion_invol.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="int_bit_inversion_def">
     <goal name="VC int_bit_inversion_invol.0.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="1.83"/></proof>
     </goal>
     <goal name="VC int_bit_inversion_invol.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="132"/></proof>
     </goal>
     <goal name="VC int_bit_inversion_invol.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="132"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_bit_inversion_invol.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="132"/></proof>
    </goal>
    <goal name="VC int_bit_inversion_invol.0.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_inj" expl="VC for int_bit_inversion_inj">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion_inj.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.48"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_ext_invol" expl="VC for int_bit_inversion_ext_invol">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion_ext_invol.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC int_bit_inversion_ext_invol.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC int_bit_inversion_ext_invol.0.0.0" expl="postcondition">
    <transf name="case" arg1="(i = power 2 n)">
     <goal name="VC int_bit_inversion_ext_invol.0.0.0.0" expl="true case (postcondition)">
     <transf name="rewrite" arg1="int_bit_inversion_ext_def1">
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.0" expl="true case (postcondition)">
      <transf name="rewrite" arg1="int_bit_inversion_ext_def1">
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.0.0" expl="true case (postcondition)">
       <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="134"/></proof>
       </goal>
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="134"/></proof>
       </goal>
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.0.2" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="2.08" steps="136"/></proof>
       </goal>
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.0.3" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="136"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="134"/></proof>
      </goal>
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="3.40" steps="385"/></proof>
      </goal>
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.0.3" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="0.64"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_bit_inversion_ext_invol.0.0.0.1" expl="false case (postcondition)">
     <transf name="rewrite" arg1="int_bit_inversion_ext_def">
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.0" expl="false case (postcondition)">
      <transf name="rewrite" arg1="int_bit_inversion_ext_def">
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.0.0" expl="false case (postcondition)">
       <proof prover="0" obsolete="true"><result status="valid" time="2.87"/></proof>
       </goal>
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="134"/></proof>
       </goal>
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.0.2" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="1.87" steps="136"/></proof>
       </goal>
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.0.3" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="136"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="134"/></proof>
      </goal>
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="3.76" steps="385"/></proof>
      </goal>
      <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3" expl="rewrite premises">
      <transf name="case" arg1="(int_bit_inversion_ext i n = power_ 2 n)">
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0" expl="true case (rewrite premises)">
       <transf name="assert" arg1="(i = power 2 n)">
        <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.0" expl="asserted formula">
        <transf name="case" arg1="(i&lt; power 2 n)">
         <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.0.0" expl="true case (asserted formula)">
         <transf name="rewrite" arg1="int_bit_inversion_ext_def" arg2="in" arg3="h2">
          <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.0.0.0" expl="true case (asserted formula)">
          <proof prover="4" obsolete="true"><result status="valid" time="2.07" steps="137"/></proof>
          </goal>
          <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="137"/></proof>
          </goal>
          <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.0.0.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="1.77" steps="139"/></proof>
          </goal>
          <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.0.0.3" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.0.1" expl="false case (asserted formula)">
         <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="136"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.0.1" expl="true case (rewrite premises)">
        <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="136"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_bit_inversion_ext_invol.0.0.0.1.3.1" expl="false case (rewrite premises)">
       <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="136"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_onebit" expl="VC for int_bit_inversion_onebit">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion_onebit.0" expl="postcondition">
  <transf name="rewrite" arg1="int_bit_inversion_def">
   <goal name="VC int_bit_inversion_onebit.0.0" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_sum">
    <goal name="VC int_bit_inversion_onebit.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ind_isum_one">
     <goal name="VC int_bit_inversion_onebit.0.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC int_bit_inversion_onebit.0.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="mult_one">
       <goal name="VC int_bit_inversion_onebit.0.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="bv_inversion_value">
        <goal name="VC int_bit_inversion_onebit.0.0.0.0.0.0.0" expl="postcondition">
        <proof prover="3" obsolete="true"><result status="valid" time="2.14"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_bit_inversion_onebit.0.0.0.0.0.1" expl="rewrite premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_bit_inversion_onebit.0.0.0.1" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bit_inversion_onebit.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="131"/></proof>
   </goal>
   <goal name="VC int_bit_inversion_onebit.0.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_bit_inversion_onebit.0.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
    </goal>
    <goal name="VC int_bit_inversion_onebit.0.2.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_zero" expl="VC for int_bit_inversion_zero">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion_zero.0" expl="postcondition">
  <transf name="rewrite" arg1="int_bit_inversion_def">
   <goal name="VC int_bit_inversion_zero.0.0" expl="postcondition">
   <transf name="replace" arg1="(bv_inversion (int_to_bv i n))" arg2="( (int_to_bv i n))">
    <goal name="VC int_bit_inversion_zero.0.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.62"/></proof>
    </goal>
    <goal name="VC int_bit_inversion_zero.0.0.1" expl="equality hypothesis">
    <transf name="eliminate_definition" >
     <goal name="VC int_bit_inversion_zero.0.0.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="bv_inversion_def">
      <goal name="VC int_bit_inversion_zero.0.0.1.0.0" expl="equality hypothesis">
      <transf name="apply" arg1="set_equal_bv">
       <goal name="VC int_bit_inversion_zero.0.0.1.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="make_bv_length">
        <goal name="VC int_bit_inversion_zero.0.0.1.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="130"/></proof>
        </goal>
        <goal name="VC int_bit_inversion_zero.0.0.1.0.0.0.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="1.31"/></proof>
        </goal>
        <goal name="VC int_bit_inversion_zero.0.0.1.0.0.0.2" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="132"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1" expl="apply premises">
       <transf name="rewrite" arg1="make_bv_length">
        <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0" expl="apply premises">
         <transf name="rewrite" arg1="assert_make_bv_b">
          <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0.0" expl="apply premises">
           <transf name="replace" arg1="i1" arg2="0">
            <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="int_to_bv_zero">
             <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0.0.0.0" expl="apply premises">
             <transf name="rewrite" arg1="int_to_bv_zero">
              <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="134"/></proof>
              </goal>
              <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="1.75" steps="136"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0.0.0.1" expl="rewrite premises">
             <proof prover="4" obsolete="true"><result status="valid" time="2.07" steps="136"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.0.0.1" expl="equality hypothesis">
            <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="134"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.1" expl="rewrite premises">
          <proof prover="3" obsolete="true"><result status="valid" time="1.52"/></proof>
          </goal>
          <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.0.0.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="134"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="1.35"/></proof>
        </goal>
        <goal name="VC int_bit_inversion_zero.0.0.1.0.0.1.2" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="132"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bit_inversion_zero.0.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="131"/></proof>
   </goal>
   <goal name="VC int_bit_inversion_zero.0.2" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_sum_inversion" expl="VC for bv_to_int_sum_inversion">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_sum_inversion.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="133"/></proof>
  </goal>
  <goal name="VC bv_to_int_sum_inversion.1" expl="postcondition">
  <transf name="rewrite" arg1="int_bit_inversion_def">
   <goal name="VC bv_to_int_sum_inversion.1.0" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_sum">
    <goal name="VC bv_to_int_sum_inversion.1.0.0" expl="postcondition">
    <transf name="apply" arg1="ind_isum_eq_gen">
     <goal name="VC bv_to_int_sum_inversion.1.0.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC bv_to_int_sum_inversion.1.0.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC bv_to_int_sum_inversion.1.0.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="141"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_sum_inversion.1.0.0.1" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="135"/></proof>
     </goal>
     <goal name="VC bv_to_int_sum_inversion.1.0.0.2" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="135"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_sum_inversion.1.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC bv_to_int_sum_inversion.1.1.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_sum_inversion.1.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC bv_to_int_sum_inversion.1.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="137"/></proof>
    </goal>
    <goal name="VC bv_to_int_sum_inversion.1.2.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_sum_inversion_inc" expl="VC for bv_to_int_sum_inversion_inc">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_sum_inversion_inc.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.15" steps="129"/></proof>
  </goal>
  <goal name="VC bv_to_int_sum_inversion_inc.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="135"/></proof>
  </goal>
  <goal name="VC bv_to_int_sum_inversion_inc.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bv_to_int_sum_inversion_inc.2.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
   </goal>
   <goal name="VC bv_to_int_sum_inversion_inc.2.1" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC bv_to_int_sum_inversion_inc.2.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_sum_inversion_inc.3" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.63"/></proof>
  </goal>
  <goal name="VC bv_to_int_sum_inversion_inc.4" expl="precondition">
  <transf name="exists" arg1="(length bv -e&#39; -1)">
   <goal name="VC bv_to_int_sum_inversion_inc.4.0">
   <transf name="split_vc" >
    <goal name="VC bv_to_int_sum_inversion_inc.4.0.0">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
    </goal>
    <goal name="VC bv_to_int_sum_inversion_inc.4.0.1">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
    </goal>
    <goal name="VC bv_to_int_sum_inversion_inc.4.0.2">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_sum_inversion_inc.5" expl="postcondition">
  <transf name="rewrite" arg1="H1">
   <goal name="VC bv_to_int_sum_inversion_inc.5.0" expl="postcondition">
   <transf name="replace" arg1="( ind_isum (fun (k:int) -&gt; (getbv bv @ k) * power 2 k) 0 (length bv))" arg2="( ind_isum
  (fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt; length bv then (getbv bv @ k) * power 2 k else 0)
  0 (length bv))">
    <goal name="VC bv_to_int_sum_inversion_inc.5.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H">
     <goal name="VC bv_to_int_sum_inversion_inc.5.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC bv_to_int_sum_inversion_inc.5.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_to_int_sum_inversion_inc.5.0.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bv_to_int_sum_inversion_inc.5.0.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_sum_inversion_inc.5.0.1" expl="equality hypothesis">
    <proof prover="3" obsolete="true"><result status="valid" time="2.73"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inversion_to_int_comm" expl="VC for inversion_to_int_comm">
 <transf name="eliminate_let" >
  <goal name="VC inversion_to_int_comm.0" expl="VC for inversion_to_int_comm">
  <transf name="split_vc" >
   <goal name="VC inversion_to_int_comm.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="131"/></proof>
   </goal>
   <goal name="VC inversion_to_int_comm.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="135"/></proof>
   </goal>
   <goal name="VC inversion_to_int_comm.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC inversion_to_int_comm.0.2.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="135"/></proof>
    </goal>
    <goal name="VC inversion_to_int_comm.0.2.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC inversion_to_int_comm.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="139"/></proof>
   </goal>
   <goal name="VC inversion_to_int_comm.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="143"/></proof>
   </goal>
   <goal name="VC inversion_to_int_comm.0.5" expl="precondition">
   <transf name="rewrite" arg1="int_bit_inversion_def">
    <goal name="VC inversion_to_int_comm.0.5.0" expl="precondition">
    <transf name="rewrite" arg1="int_to_bv_to_int">
     <goal name="VC inversion_to_int_comm.0.5.0.0" expl="precondition">
     <transf name="replace" arg1="(length bv)" arg2="(length (bv_inversion bv))">
      <goal name="VC inversion_to_int_comm.0.5.0.0.0" expl="precondition">
      <transf name="rewrite" arg1="int_to_bv_to_int">
       <goal name="VC inversion_to_int_comm.0.5.0.0.0.0" expl="precondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="148"/></proof>
       </goal>
       <goal name="VC inversion_to_int_comm.0.5.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="148"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC inversion_to_int_comm.0.5.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="148"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC inversion_to_int_comm.0.5.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="148"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC inversion_to_int_comm.0.5.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="148"/></proof>
    </goal>
    <goal name="VC inversion_to_int_comm.0.5.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC inversion_to_int_comm.0.5.2.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="148"/></proof>
     </goal>
     <goal name="VC inversion_to_int_comm.0.5.2.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC inversion_to_int_comm.0.6" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_inversion_sum" expl="VC for bv_inversion_sum">
 <transf name="split_vc" >
  <goal name="VC bv_inversion_sum.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
  </goal>
  <goal name="VC bv_inversion_sum.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="137"/></proof>
  </goal>
  <goal name="VC bv_inversion_sum.2" expl="postcondition">
  <transf name="replace" arg1="(int_bit_inversion i n)" arg2="(int_bit_inversion (bv_to_int (int_to_bv i n))  (length (int_to_bv i n)))">
   <goal name="VC bv_inversion_sum.2.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC bv_inversion_sum.2.0.0" expl="postcondition">
    <transf name="apply" arg1="ind_isum_eq_gen">
     <goal name="VC bv_inversion_sum.2.0.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC bv_inversion_sum.2.0.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC bv_inversion_sum.2.0.0.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="143"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_inversion_sum.2.0.0.1" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="139"/></proof>
     </goal>
     <goal name="VC bv_inversion_sum.2.0.0.2" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="139"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_inversion_sum.2.1" expl="equality hypothesis">
   <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_inversion_sum" expl="VC for bv_to_int_inversion_sum">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_inversion_sum.0" expl="postcondition">
  <transf name="rewrite" arg1="H">
   <goal name="VC bv_to_int_inversion_sum.0.0" expl="postcondition">
   <transf name="apply" arg1="ind_isum_eq_gen">
    <goal name="VC bv_to_int_inversion_sum.0.0.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC bv_to_int_inversion_sum.0.0.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC bv_to_int_inversion_sum.0.0.0.0.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_inversion_sum.0.0.1" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
    </goal>
    <goal name="VC bv_to_int_inversion_sum.0.0.2" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_bit_inversion" expl="VC for bv_to_int_bit_inversion">
 <transf name="eliminate_let" >
  <goal name="VC bv_to_int_bit_inversion.0" expl="VC for bv_to_int_bit_inversion">
  <transf name="split_vc" >
   <goal name="VC bv_to_int_bit_inversion.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="129"/></proof>
   </goal>
   <goal name="VC bv_to_int_bit_inversion.0.1" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC bv_to_int_bit_inversion.0.1.0" expl="postcondition">
    <transf name="rewrite" arg1="H3">
     <goal name="VC bv_to_int_bit_inversion.0.1.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC bv_to_int_bit_inversion.0.1.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_to_int_bit_inversion.0.1.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bv_to_int_bit_inversion.0.1.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_bit_inversion.0.1.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
      </goal>
      <goal name="VC bv_to_int_bit_inversion.0.1.0.0.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_inversion_sum_inc" expl="VC for bv_to_int_inversion_sum_inc">
 <transf name="eliminate_let" >
  <goal name="VC bv_to_int_inversion_sum_inc.0" expl="VC for bv_to_int_inversion_sum_inc">
  <transf name="split_vc" >
   <goal name="VC bv_to_int_inversion_sum_inc.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="129"/></proof>
   </goal>
   <goal name="VC bv_to_int_inversion_sum_inc.0.1" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_bit_inversion">
    <goal name="VC bv_to_int_inversion_sum_inc.0.1.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="VC bv_to_int_inversion_sum_inc.0.1.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_m_to_int_bit_inversion" expl="VC for bv_m_to_int_bit_inversion">
 <transf name="split_vc" >
  <goal name="VC bv_m_to_int_bit_inversion.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="129"/></proof>
  </goal>
  <goal name="VC bv_m_to_int_bit_inversion.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="131"/></proof>
  </goal>
  <goal name="VC bv_m_to_int_bit_inversion.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_tail_bits" expl="VC for int_bit_inversion_tail_bits">
 <transf name="eliminate_let" >
  <goal name="VC int_bit_inversion_tail_bits.0" expl="VC for int_bit_inversion_tail_bits">
  <transf name="split_vc" >
   <goal name="VC int_bit_inversion_tail_bits.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
   </goal>
   <goal name="VC int_bit_inversion_tail_bits.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC int_bit_inversion_tail_bits.0.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="134"/></proof>
    </goal>
    <goal name="VC int_bit_inversion_tail_bits.0.1.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="134"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bit_inversion_tail_bits.0.2" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="137"/></proof>
   </goal>
   <goal name="VC int_bit_inversion_tail_bits.0.3" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC int_bit_inversion_tail_bits.0.3.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="138"/></proof>
    </goal>
    <goal name="VC int_bit_inversion_tail_bits.0.3.1" expl="precondition">
    <proof prover="3" obsolete="true"><result status="valid" time="2.25"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bit_inversion_tail_bits.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="139"/></proof>
   </goal>
   <goal name="VC int_bit_inversion_tail_bits.0.5" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC int_bit_inversion_tail_bits.0.5.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="139"/></proof>
    </goal>
    <goal name="VC int_bit_inversion_tail_bits.0.5.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bit_inversion_tail_bits.0.6" expl="postcondition">
   <transf name="rewrite" arg1="H1">
    <goal name="VC int_bit_inversion_tail_bits.0.6.0" expl="postcondition">
    <transf name="rewrite" arg1="ind_isum_transl_plus_one">
     <goal name="VC int_bit_inversion_tail_bits.0.6.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0" expl="apply premises">
        <transf name="apply" arg1="mult_eq">
         <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="int_to_bv_tail">
          <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="tail_def">
           <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="replace" arg1="(length (int_to_bv i n))" arg2="n">
            <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="assert_make_bv">
             <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="149"/></proof>
             </goal>
             <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="1.59"/></proof>
              </goal>
              <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="1.92"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="145"/></proof>
             </goal>
            </transf>
            <transf name="rewrite" arg1="assert_make_bv_b">
             <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="compute_specified" >
              <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="145"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="1.62"/></proof>
              </goal>
              <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
              <proof prover="3" obsolete="true"><result status="valid" time="1.95"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
             <transf name="split_vc" >
              <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="145"/></proof>
              </goal>
              <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="145"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
            <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="147"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.0.1" expl="rewrite premises">
           <proof prover="5" obsolete="true"><result status="valid" time="0.53"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="145"/></proof>
          </goal>
          <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.2" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.2.0" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="145"/></proof>
           </goal>
           <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.0.2.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="145"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.0.0.0.1" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="145"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="141"/></proof>
      </goal>
      <goal name="VC int_bit_inversion_tail_bits.0.6.0.0.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC tail_bits_int_bit_inversion" expl="VC for tail_bits_int_bit_inversion">
 <transf name="eliminate_let" >
  <goal name="VC tail_bits_int_bit_inversion.0" expl="VC for tail_bits_int_bit_inversion">
  <transf name="split_vc" >
   <goal name="VC tail_bits_int_bit_inversion.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="129"/></proof>
   </goal>
   <goal name="VC tail_bits_int_bit_inversion.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="135"/></proof>
   </goal>
   <goal name="VC tail_bits_int_bit_inversion.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC tail_bits_int_bit_inversion.0.2.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
    </goal>
    <goal name="VC tail_bits_int_bit_inversion.0.2.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC tail_bits_int_bit_inversion.0.3" expl="postcondition">
   <transf name="rewrite" arg1="tail_bits_sum">
    <goal name="VC tail_bits_int_bit_inversion.0.3.0" expl="postcondition">
    <transf name="rewrite" arg1="int_bit_inversion_def">
     <goal name="VC tail_bits_int_bit_inversion.0.3.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq">
      <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="int_to_bv_to_int_gen">
         <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="int_to_bv_to_int_gen">
          <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
          </goal>
          <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="141"/></proof>
          </goal>
          <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0.0.0.2" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.65"/></proof>
         </goal>
         <goal name="VC tail_bits_int_bit_inversion.0.3.0.0.0.0.0.2" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.50"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC tail_bits_int_bit_inversion.0.3.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC tail_bits_int_bit_inversion.0.3.0.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC tail_bits_int_bit_inversion.0.3.0.2" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC tail_bits_int_bit_inversion.0.3.0.2.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="137"/></proof>
      </goal>
      <goal name="VC tail_bits_int_bit_inversion.0.3.0.2.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC tail_bits_int_bit_inversion.0.3.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="137"/></proof>
    </goal>
    <goal name="VC tail_bits_int_bit_inversion.0.3.2" expl="rewrite premises">
    <proof prover="3" obsolete="true"><result status="valid" time="0.64"/></proof>
    </goal>
    <goal name="VC tail_bits_int_bit_inversion.0.3.3" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC tail_bits_int_bit_inversion.0.3.3.0" expl="rewrite premises">
     <proof prover="3" obsolete="true"><result status="valid" time="0.79"/></proof>
     </goal>
     <goal name="VC tail_bits_int_bit_inversion.0.3.3.1" expl="rewrite premises">
     <proof prover="3" obsolete="true"><result status="valid" time="0.65"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bit_inversion_ht" expl="VC for int_bit_inversion_ht">
 <transf name="split_vc" >
  <goal name="VC int_bit_inversion_ht.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_bit_inversion_ht.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_bit_inversion_ht.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_bit_inversion_ht.1.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="133"/></proof>
   </goal>
   <goal name="VC int_bit_inversion_ht.1.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_bit_inversion_ht.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
  </goal>
  <goal name="VC int_bit_inversion_ht.3" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC int_bit_inversion_ht.3.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="136"/></proof>
   </goal>
   <goal name="VC int_bit_inversion_ht.3.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="136"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_bit_inversion_ht.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="141"/></proof>
  </goal>
  <goal name="VC int_bit_inversion_ht.5" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="141"/></proof>
  </goal>
  <goal name="VC int_bit_inversion_ht.6" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="137"/></proof>
  </goal>
  <goal name="VC int_bit_inversion_ht.7" expl="postcondition">
  <transf name="rewrite" arg1="H2">
   <goal name="VC int_bit_inversion_ht.7.0" expl="postcondition">
   <transf name="rewrite" arg1="H1">
    <goal name="VC int_bit_inversion_ht.7.0.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
  (fun (k:int) -&gt;
    (getbv (int_to_bv i n) @ ((n - k) - 1)) * power 2 ((n - 1) - k))
  0 n)" arg2="(ind_isum
  (fun (k:int) -&gt;
    (getbv (int_to_bv i n) @ ((n - k) - 1)) * power 2 ((n - 1) - k))
  0 ((n-1)+1))">
     <goal name="VC int_bit_inversion_ht.7.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="ind_isum_right_extension">
      <goal name="VC int_bit_inversion_ht.7.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="add_eq">
       <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="ind_isum_transl_plus_one">
        <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="ind_isum_scal_rev">
         <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="ind_isum_eq_gen">
          <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.57" steps="145"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="139"/></proof>
          </goal>
          <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0.0.2" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_bit_inversion_ht.7.0.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_bit_inversion_ht.7.0.0.0.0.1" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC int_bit_inversion_ht.7.0.0.0.0.1.0" expl="apply premises">
        <transf name="replace" arg1="((n - (n - 1)) - 1)" arg2="0">
         <goal name="VC int_bit_inversion_ht.7.0.0.0.0.1.0.0" expl="apply premises">
         <transf name="rewrite" arg1="mult_one">
          <goal name="VC int_bit_inversion_ht.7.0.0.0.0.1.0.0.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="3.14"/></proof>
          </goal>
          <goal name="VC int_bit_inversion_ht.7.0.0.0.0.1.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_bit_inversion_ht.7.0.0.0.0.1.0.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_bit_inversion_ht.7.0.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_bit_inversion_ht.7.0.0.1" expl="equality hypothesis">
     <proof prover="3" obsolete="true"><result status="valid" time="2.75"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_inversion_ht" expl="VC for bv_inversion_ht">
 <transf name="split_vc" >
  <goal name="VC bv_inversion_ht.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="129"/></proof>
  </goal>
  <goal name="VC bv_inversion_ht.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
  </goal>
  <goal name="VC bv_inversion_ht.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bv_inversion_ht.2.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="135"/></proof>
   </goal>
   <goal name="VC bv_inversion_ht.2.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_inversion_ht.3" expl="postcondition">
  <transf name="rewrite" arg1="bv_to_int_sum">
   <goal name="VC bv_inversion_ht.3.0" expl="postcondition">
   <transf name="replace" arg1="(length (bv_inversion (make_bv_m f n)))" arg2="(n-1+1)">
    <goal name="VC bv_inversion_ht.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ind_isum_right_extension">
     <goal name="VC bv_inversion_ht.3.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(head (make_bv_m f n)
     + (2 * bv_to_int (bv_inversion (tail (make_bv_m f n)))))" arg2="( (2 * bv_to_int (bv_inversion (tail (make_bv_m f n)))) + head (make_bv_m f n)
     )">
      <goal name="VC bv_inversion_ht.3.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="add_eq">
       <goal name="VC bv_inversion_ht.3.0.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="bv_to_int_sum">
        <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="ind_isum_scal_rev">
         <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="ind_isum_eq_gen">
          <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="compute_specified" >
            <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="replace" arg1="(length (bv_inversion (tail (make_bv_m f n))) - 1)" arg2="(n-2)">
             <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="eliminate_definition" >
              <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <transf name="rewrite" arg1="bv_inversion_def">
               <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
               <transf name="rewrite" arg1="bv_inversion_def">
                <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                <transf name="rewrite" arg1="assert_make_bv">
                 <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                 <transf name="rewrite" arg1="assert_make_bv">
                  <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                  <transf name="eliminate_if" >
                   <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0">
                   <transf name="split_vc" >
                    <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                    <transf name="compute_specified" >
                     <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                     <transf name="split_all_full" >
                      <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                      <transf name="rewrite" arg1="tail_spec">
                       <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                       <proof prover="4" obsolete="true"><result status="valid" time="4.29" steps="145"/></proof>
                       </goal>
                       <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                       <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="143"/></proof>
                       </goal>
                       <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
                       <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="145"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="4.42" steps="145"/></proof>
                    </goal>
                    <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="140"/></proof>
                    </goal>
                    <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises">
                    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="140"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                  <transf name="split_vc" >
                   <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
                   <proof prover="3" obsolete="true"><result status="valid" time="1.43"/></proof>
                   </goal>
                   <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
                   <proof prover="3" obsolete="true"><result status="valid" time="1.35"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="142"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                 <transf name="split_vc" >
                  <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
                  <proof prover="3" obsolete="true"><result status="valid" time="1.31"/></proof>
                  </goal>
                  <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
                  <proof prover="3" obsolete="true"><result status="valid" time="1.35"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="140"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
             <transf name="split_all_full" >
              <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis">
              <transf name="rewrite" arg1="bv_inversion_spec1">
               <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis">
               <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="143"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="137"/></proof>
          </goal>
          <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.2" expl="apply premises">
          <transf name="split_all_full" >
           <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.2.0" expl="apply premises">
           <transf name="rewrite" arg1="bv_inversion_spec1">
            <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.0.2.0.0" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="139"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_inversion_ht.3.0.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC bv_inversion_ht.3.0.0.0.0.1" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bv_inversion_ht.3.0.0.0.0.1.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_inversion_ht.3.0.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_inversion_ht.3.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_inversion_ht.3.0.1" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_inversion_ht_bv" expl="VC for bv_inversion_ht_bv">
 <transf name="eliminate_let" >
  <goal name="VC bv_inversion_ht_bv.0" expl="VC for bv_inversion_ht_bv">
  <transf name="split_vc" >
   <goal name="VC bv_inversion_ht_bv.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
   </goal>
   <goal name="VC bv_inversion_ht_bv.0.1" expl="postcondition">
   <transf name="replace" arg1="(make_bv_m ((fun (y0:bitvec) (y1:int) -&gt; getbv y0 y1) @ bv)
             (length bv))" arg2="bv" arg3="in" arg4="H">
    <goal name="VC bv_inversion_ht_bv.0.1.0" expl="postcondition">
    <transf name="replace" arg1="(make_bv_m (getbv bv) (length bv))" arg2="bv" arg3="in" arg4="H">
     <goal name="VC bv_inversion_ht_bv.0.1.0.0" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="133"/></proof>
     </goal>
     <goal name="VC bv_inversion_ht_bv.0.1.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="set_equal_bv">
      <goal name="VC bv_inversion_ht_bv.0.1.0.1.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="135"/></proof>
      </goal>
      <goal name="VC bv_inversion_ht_bv.0.1.0.1.1" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_inversion_ht_bv.0.1.0.1.1.0" expl="apply premises">
       <transf name="rewrite" arg1="make_bv_m_def">
        <goal name="VC bv_inversion_ht_bv.0.1.0.1.1.0.0" expl="apply premises">
        <transf name="rewrite" arg1="assert_make_bv_b">
         <goal name="VC bv_inversion_ht_bv.0.1.0.1.1.0.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC bv_inversion_ht_bv.0.1.0.1.1.0.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_inversion_ht_bv.0.1.0.1.1.0.0.1" expl="rewrite premises">
         <proof prover="3" obsolete="true"><result status="valid" time="2.17"/></proof>
         </goal>
         <goal name="VC bv_inversion_ht_bv.0.1.0.1.1.0.0.2" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bv_inversion_ht_bv.0.1.0.1.1.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_inversion_ht_bv.0.1.1" expl="equality hypothesis">
    <transf name="compute_specified" >
     <goal name="VC bv_inversion_ht_bv.0.1.1.0" expl="equality hypothesis">
     <transf name="apply" arg1="set_equal_bv">
      <goal name="VC bv_inversion_ht_bv.0.1.1.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_inversion_ht_bv.0.1.1.0.0.0" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_inversion_ht_bv.0.1.1.0.1" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_inversion_ht_bv.0.1.1.0.1.0" expl="apply premises">
       <transf name="rewrite" arg1="make_bv_m_def">
        <goal name="VC bv_inversion_ht_bv.0.1.1.0.1.0.0" expl="apply premises">
        <transf name="rewrite" arg1="assert_make_bv_b">
         <goal name="VC bv_inversion_ht_bv.0.1.1.0.1.0.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC bv_inversion_ht_bv.0.1.1.0.1.0.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_inversion_ht_bv.0.1.1.0.1.0.0.1" expl="rewrite premises">
         <proof prover="3" obsolete="true"><result status="valid" time="2.08"/></proof>
         </goal>
         <goal name="VC bv_inversion_ht_bv.0.1.1.0.1.0.0.2" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bv_inversion_ht_bv.0.1.1.0.1.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_ht" expl="VC for bv_to_int_ht">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_ht.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_inversion_mult_ht" expl="VC for bv_inversion_mult_ht">
 <transf name="split_vc" >
  <goal name="VC bv_inversion_mult_ht.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="129"/></proof>
  </goal>
  <goal name="VC bv_inversion_mult_ht.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
  </goal>
  <goal name="VC bv_inversion_mult_ht.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.72"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_inversion_mult_ht_bv" expl="VC for bv_inversion_mult_ht_bv">
 <transf name="split_vc" >
  <goal name="VC bv_inversion_mult_ht_bv.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="135"/></proof>
  </goal>
  <goal name="VC bv_inversion_mult_ht_bv.1" expl="postcondition">
  <transf name="replace" arg1="(make_bv_m (getbv bvx) (length bvx))" arg2="bvx" arg3="in" arg4="H">
   <goal name="VC bv_inversion_mult_ht_bv.1.0" expl="postcondition">
   <transf name="replace" arg1="(make_bv_m (getbv bvy) (length bvx))" arg2="bvy" arg3="in" arg4="H">
    <goal name="VC bv_inversion_mult_ht_bv.1.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="VC bv_inversion_mult_ht_bv.1.0.1" expl="equality hypothesis">
    <transf name="apply" arg1="set_equal_bv">
     <goal name="VC bv_inversion_mult_ht_bv.1.0.1.0" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.81"/></proof>
     </goal>
     <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1.0" expl="apply premises">
      <transf name="rewrite" arg1="make_bv_m_def">
       <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1.0.0" expl="apply premises">
       <transf name="rewrite" arg1="assert_make_bv_b">
        <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1.0.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1.0.0.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1.0.0.1" expl="rewrite premises">
        <proof prover="3" obsolete="true"><result status="valid" time="3.20"/></proof>
        </goal>
        <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1.0.0.2" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.48"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bv_inversion_mult_ht_bv.1.0.1.1.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="141"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_inversion_mult_ht_bv.1.1" expl="equality hypothesis">
   <transf name="apply" arg1="set_equal_bv">
    <goal name="VC bv_inversion_mult_ht_bv.1.1.0" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
    </goal>
    <goal name="VC bv_inversion_mult_ht_bv.1.1.1" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC bv_inversion_mult_ht_bv.1.1.1.0" expl="apply premises">
     <transf name="rewrite" arg1="make_bv_m_def">
      <goal name="VC bv_inversion_mult_ht_bv.1.1.1.0.0" expl="apply premises">
      <transf name="rewrite" arg1="assert_make_bv_b">
       <goal name="VC bv_inversion_mult_ht_bv.1.1.1.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bv_inversion_mult_ht_bv.1.1.1.0.0.0.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.71"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bv_inversion_mult_ht_bv.1.1.1.0.0.1" expl="rewrite premises">
       <proof prover="3" obsolete="true"><result status="valid" time="2.88"/></proof>
       </goal>
       <goal name="VC bv_inversion_mult_ht_bv.1.1.1.0.0.2" expl="rewrite premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_inversion_mult_ht_bv.1.1.1.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_concat">
 <goal name="VC concat" expl="VC for concat">
 <transf name="split_vc" >
  <goal name="VC concat.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat.0.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.40"/></proof>
   </goal>
   <goal name="VC concat.0.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.79"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat.1.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.71"/></proof>
   </goal>
   <goal name="VC concat.1.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.81"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat.2" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="VC concat.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="133"/></proof>
  </goal>
  <goal name="VC concat.4" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
  </goal>
  <goal name="VC concat.5" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
  </goal>
  <goal name="VC concat.6" expl="postcondition">
  <transf name="rewrite" arg1="H6">
   <goal name="VC concat.6.0" expl="postcondition">
   <transf name="compute_specified" >
    <goal name="VC concat.6.0.0" expl="postcondition">
    <transf name="eliminate_if" >
     <goal name="VC concat.6.0.0.0" expl="VC for concat">
     <transf name="split_vc" >
      <goal name="VC concat.6.0.0.0.0" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="138"/></proof>
      </goal>
      <goal name="VC concat.6.0.0.0.1" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat.6.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC concat.6.1.0" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
    </goal>
    <goal name="VC concat.6.1.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_length" expl="VC for concat_length">
 <transf name="split_vc" >
  <goal name="VC concat_length.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="129"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC hpart" expl="VC for hpart">
 <transf name="eliminate_let" >
  <goal name="VC hpart.0" expl="VC for hpart">
  <transf name="split_vc" >
   <goal name="VC hpart.0.0" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC hpart.0.0.0" expl="precondition">
    <transf name="split_vc" >
     <goal name="VC hpart.0.0.0.0" expl="precondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="137"/></proof>
     </goal>
     <goal name="VC hpart.0.0.0.1" expl="precondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC hpart.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="131"/></proof>
   </goal>
   <goal name="VC hpart.0.2" expl="postcondition">
   <transf name="eliminate_if" >
    <goal name="VC hpart.0.2.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC hpart.0.3" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="137"/></proof>
   </goal>
   <goal name="VC hpart.0.4" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="140"/></proof>
   </goal>
   <goal name="VC hpart.0.5" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC hpart_value" expl="VC for hpart_value">
 <transf name="split_vc" >
  <goal name="VC hpart_value.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.86"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC hpart_value_b" expl="VC for hpart_value_b">
 <transf name="split_vc" >
  <goal name="VC hpart_value_b.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart" expl="VC for tpart">
 <transf name="eliminate_let" >
  <goal name="VC tpart.0" expl="VC for tpart">
  <transf name="split_vc" >
   <goal name="VC tpart.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC tpart.0.0.0" expl="precondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.77"/></proof>
    </goal>
    <goal name="VC tpart.0.0.1" expl="precondition">
    <proof prover="3" obsolete="true"><result status="valid" time="2.01"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC tpart.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="131"/></proof>
   </goal>
   <goal name="VC tpart.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC tpart.0.2.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="133"/></proof>
    </goal>
    <goal name="VC tpart.0.2.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC tpart.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
   </goal>
   <goal name="VC tpart.0.4" expl="postcondition">
   <transf name="eliminate_if" >
    <goal name="VC tpart.0.4.0" expl="postcondition">
    <transf name="split_vc" >
     <goal name="VC tpart.0.4.0.0" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="139"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC tpart.0.5" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC tpart.0.5.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
    </goal>
    <goal name="VC tpart.0.5.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="136"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC tpart.0.6" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC tpart.0.6.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="0.98"/></proof>
    </goal>
    <goal name="VC tpart.0.6.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_tail" expl="VC for bv_tail">
 <transf name="split_vc" >
  <goal name="VC bv_tail.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="131"/></proof>
  </goal>
  <goal name="VC bv_tail.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="134"/></proof>
  </goal>
  <goal name="VC bv_tail.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_head" expl="VC for bv_head">
 <transf name="split_vc" >
  <goal name="VC bv_head.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="131"/></proof>
  </goal>
  <goal name="VC bv_head.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
  </goal>
  <goal name="VC bv_head.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="140"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart" expl="VC for htpart">
 <transf name="split_vc" >
  <goal name="VC htpart.0" expl="precondition">
  <transf name="compute_specified" >
   <goal name="VC htpart.0.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC htpart.0.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="137"/></proof>
    </goal>
    <goal name="VC htpart.0.0.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC htpart.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
  </goal>
  <goal name="VC htpart.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="135"/></proof>
  </goal>
  <goal name="VC htpart.3" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC htpart.3.0" expl="postcondition">
   <proof prover="3" obsolete="true"><result status="valid" time="0.93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart_value" expl="VC for tpart_value">
 <transf name="split_vc" >
  <goal name="VC tpart_value.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart_value_b" expl="VC for tpart_value_b">
 <transf name="split_vc" >
  <goal name="VC tpart_value_b.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart_length" expl="VC for tpart_length">
 <transf name="split_vc" >
  <goal name="VC tpart_length.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart_value" expl="VC for htpart_value">
 <transf name="split_vc" >
  <goal name="VC htpart_value.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart_value_b" expl="VC for htpart_value_b">
 <transf name="split_vc" >
  <goal name="VC htpart_value_b.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.45" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart_product_" expl="VC for htpart_product_">
 <transf name="split_vc" >
  <goal name="VC htpart_product_.0" expl="postcondition">
  <transf name="instantiate" arg1="ind_iproduct_map" arg2="k,n,0,(n-k),(fun i -&gt; i-k),(getbv (htpart x k n&#39;))">
   <goal name="VC htpart_product_.0.0" expl="postcondition">
   <transf name="destruct" arg1="Hinst">
    <goal name="VC htpart_product_.0.0.0" expl="destruct premise">
    <transf name="split_all_full" >
     <goal name="VC htpart_product_.0.0.0.0" expl="destruct premise">
     <transf name="apply" arg1="set_bijective1">
      <goal name="VC htpart_product_.0.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC htpart_product_.0.0.0.0.0.0" expl="apply premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.86"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC htpart_product_.0.0.0.0.1" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC htpart_product_.0.0.0.0.1.0" expl="apply premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.65"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC htpart_product_.0.0.0.0.2" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC htpart_product_.0.0.0.0.2.0" expl="apply premises">
       <transf name="exists" arg1="(e&#39;+k)">
        <goal name="VC htpart_product_.0.0.0.0.2.0.0">
        <transf name="split_vc" >
         <goal name="VC htpart_product_.0.0.0.0.2.0.0.0">
         <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
         </goal>
         <goal name="VC htpart_product_.0.0.0.0.2.0.0.1">
         <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC htpart_product_.0.0.1" expl="postcondition">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC htpart_product_.0.0.1.0" expl="postcondition">
     <transf name="apply" arg1="ind_iproduct_eq">
      <goal name="VC htpart_product_.0.0.1.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC htpart_product_.0.0.1.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC htpart_product_.0.0.1.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart_product_one" expl="VC for htpart_product_one">
 <transf name="split_vc" >
  <goal name="VC htpart_product_one.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="137"/></proof>
  </goal>
  <goal name="VC htpart_product_one.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="137"/></proof>
  </goal>
  <goal name="VC htpart_product_one.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
  </goal>
  <goal name="VC htpart_product_one.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
  </goal>
  <goal name="VC htpart_product_one.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="139"/></proof>
  </goal>
  <goal name="VC htpart_product_one.5" expl="precondition">
  <proof prover="3" obsolete="true"><result status="valid" time="2.67"/></proof>
  </goal>
  <goal name="VC htpart_product_one.6" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart_product_zero" expl="VC for htpart_product_zero">
 <transf name="split_vc" >
  <goal name="VC htpart_product_zero.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="143"/></proof>
  </goal>
  <goal name="VC htpart_product_zero.1" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
  </goal>
  <goal name="VC htpart_product_zero.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="151"/></proof>
  </goal>
  <goal name="VC htpart_product_zero.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="151"/></proof>
  </goal>
  <goal name="VC htpart_product_zero.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="153"/></proof>
  </goal>
  <goal name="VC htpart_product_zero.5" expl="precondition">
  <proof prover="3" obsolete="true"><result status="valid" time="2.65"/></proof>
  </goal>
  <goal name="VC htpart_product_zero.6" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC htpart_product_zero.6.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="151"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart_product" expl="VC for htpart_product">
 <transf name="split_vc" >
  <goal name="VC htpart_product.0" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC htpart_product.0.0" expl="VC for htpart_product">
   <transf name="split_vc" >
    <goal name="VC htpart_product.0.0.0" expl="postcondition">
    <transf name="apply" arg1="null_product_bitvec">
     <goal name="VC htpart_product.0.0.0.0" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="137"/></proof>
     </goal>
     <goal name="VC htpart_product.0.0.0.1" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.82"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC htpart_product.0.0.1" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="0.84"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC htpart_length" expl="VC for htpart_length">
 <transf name="split_vc" >
  <goal name="VC htpart_length.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart_length_gen" expl="VC for tpart_length_gen">
 <transf name="split_vc" >
  <goal name="VC tpart_length_gen.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_value_left" expl="VC for concat_value_left">
 <transf name="split_vc" >
  <goal name="VC concat_value_left.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_value" expl="VC for concat_value">
 <transf name="split_vc" >
  <goal name="VC concat_value.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC concat_value.0.0" expl="postcondition">
   <transf name="eliminate_definition" >
    <goal name="VC concat_value.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="concat_def">
     <goal name="VC concat_value.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="assert_make_bv">
      <goal name="VC concat_value.0.0.0.0.0" expl="postcondition">
      <transf name="compute_specified" >
       <goal name="VC concat_value.0.0.0.0.0.0" expl="postcondition">
       <transf name="split_vc" >
        <goal name="VC concat_value.0.0.0.0.0.0.0" expl="postcondition">
        <proof prover="0" obsolete="true"><result status="valid" time="2.29"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC concat_value.0.0.0.0.1" expl="rewrite premises">
      <transf name="split_vc" >
       <goal name="VC concat_value.0.0.0.0.1.0" expl="rewrite premises">
       <proof prover="3" obsolete="true"><result status="valid" time="1.75"/></proof>
       </goal>
       <goal name="VC concat_value.0.0.0.0.1.1" expl="rewrite premises">
       <proof prover="3" obsolete="true"><result status="valid" time="1.65"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC concat_value.0.0.0.0.2" expl="rewrite premises">
      <transf name="split_vc" >
       <goal name="VC concat_value.0.0.0.0.2.0" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="1.90" steps="128"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_value_right" expl="VC for concat_value_right">
 <transf name="split_all_full" >
  <goal name="VC concat_value_right.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC concat_value_right.0.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_value_out" expl="VC for concat_value_out">
 <transf name="split_vc" >
  <goal name="VC concat_value_out.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_value_tpart" expl="VC for concat_value_tpart">
 <transf name="split_vc" >
  <goal name="VC concat_value_tpart.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat_value_tpart.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
   </goal>
   <goal name="VC concat_value_tpart.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_value_tpart.1" expl="postcondition">
  <transf name="rewrite" arg1="concat_value_right">
   <goal name="VC concat_value_tpart.1.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="135"/></proof>
   </goal>
   <goal name="VC concat_value_tpart.1.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC concat_value_tpart.1.1.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
    </goal>
    <goal name="VC concat_value_tpart.1.1.1" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.61"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_value_ht" expl="VC for concat_value_ht">
 <transf name="split_vc" >
  <goal name="VC concat_value_ht.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat_value_ht.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="137"/></proof>
   </goal>
   <goal name="VC concat_value_ht.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_value_ht.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat_value_ht.1.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
   </goal>
   <goal name="VC concat_value_ht.1.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_value_ht.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC concat_value_ht.2.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="139"/></proof>
   </goal>
   <goal name="VC concat_value_ht.2.1" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_ht" expl="VC for concat_ht">
 <transf name="eliminate_let" >
  <goal name="VC concat_ht.0" expl="VC for concat_ht">
  <transf name="split_vc" >
   <goal name="VC concat_ht.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="135"/></proof>
   </goal>
   <goal name="VC concat_ht.0.1" expl="precondition">
   <transf name="instantiate" arg1="concat_value_ht" arg2="bv1,bv2,bv3,bv4,i">
    <goal name="VC concat_ht.0.1.0" expl="precondition">
    <transf name="apply" arg1="Hinst">
     <goal name="VC concat_ht.0.1.0.0" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC concat_ht.0.1.0.0.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="140"/></proof>
      </goal>
      <goal name="VC concat_ht.0.1.0.0.1">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="140"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC concat_ht.0.1.0.1" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC concat_ht.0.1.0.1.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC concat_ht.0.1.0.2" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC concat_ht.0.1.0.2.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC concat_ht.0.1.0.3" expl="apply premises">
     <transf name="split_vc" >
      <goal name="VC concat_ht.0.1.0.3.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="140"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_ht.0.2" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_concat" expl="VC for set_concat">
 <transf name="eliminate_let" >
  <goal name="VC set_concat.0" expl="VC for set_concat">
  <transf name="split_vc" >
   <goal name="VC set_concat.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
   </goal>
   <goal name="VC set_concat.0.1" expl="precondition">
   <transf name="rewrite" arg1="concat_value">
    <goal name="VC set_concat.0.1.0" expl="precondition">
    <transf name="eliminate_if" >
     <goal name="VC set_concat.0.1.0.0" expl="VC for set_concat">
     <transf name="split_vc" >
      <goal name="VC set_concat.0.1.0.0.0" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="141"/></proof>
      </goal>
      <goal name="VC set_concat.0.1.0.0.1" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="141"/></proof>
      </goal>
      <goal name="VC set_concat.0.1.0.0.2" expl="precondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="138"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_concat.0.2" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_m" expl="VC for concat_m">
 <transf name="split_vc" >
  <goal name="VC concat_m.0" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC concat_m.0.0" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC concat_m.0.0.0" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC concat_m.0.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC concat_m.0.1.0" expl="apply premises">
    <transf name="rewrite" arg1="concat_value">
     <goal name="VC concat_m.0.1.0.0" expl="apply premises">
     <transf name="rewrite" arg1="make_m_length">
      <goal name="VC concat_m.0.1.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="make_m_length">
       <goal name="VC concat_m.0.1.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="assert_make_m">
        <goal name="VC concat_m.0.1.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="assert_make_m">
         <goal name="VC concat_m.0.1.0.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="assert_make_m">
          <goal name="VC concat_m.0.1.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="eliminate_if" >
           <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0">
           <transf name="split_vc" >
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="145"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.2" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="143"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.3" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="143"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.4" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="147"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.5" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="141"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.6" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="141"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.7" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="141"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.8" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="141"/></proof>
            </goal>
            <goal name="VC concat_m.0.1.0.0.0.0.0.0.0.0.9" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="143"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC concat_m.0.1.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC concat_m.0.1.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC concat_m.0.1.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC concat_m.0.1.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="139"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC concat_m.0.1.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_comm" expl="VC for concat_comm">
 <transf name="eliminate_let" >
  <goal name="VC concat_comm.0" expl="VC for concat_comm">
  <transf name="split_vc" >
   <goal name="VC concat_comm.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="131"/></proof>
   </goal>
   <goal name="VC concat_comm.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="131"/></proof>
   </goal>
   <goal name="VC concat_comm.0.2" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
   </goal>
   <goal name="VC concat_comm.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="136"/></proof>
   </goal>
   <goal name="VC concat_comm.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="141"/></proof>
   </goal>
   <goal name="VC concat_comm.0.5" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC concat_comm.0.6" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="135"/></proof>
   </goal>
   <goal name="VC concat_comm.0.7" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_and_rec" expl="VC for concat_and_rec">
 <transf name="split_vc" >
  <goal name="VC concat_and_rec.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="131"/></proof>
  </goal>
  <goal name="VC concat_and_rec.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="134"/></proof>
  </goal>
  <goal name="VC concat_and_rec.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="138"/></proof>
  </goal>
  <goal name="VC concat_and_rec.3" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC concat_and_rec.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="140"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_int_bv" expl="VC for concat_int_bv">
 <transf name="split_vc" >
  <goal name="VC concat_int_bv.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_int_to_bv_value" expl="VC for concat_int_to_bv_value">
 <transf name="split_vc" >
  <goal name="VC concat_int_to_bv_value.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="139"/></proof>
  </goal>
  <goal name="VC concat_int_to_bv_value.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat_int_to_bv_value.1.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="140"/></proof>
   </goal>
   <goal name="VC concat_int_to_bv_value.1.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_int_to_bv_value.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_concat" expl="VC for bv_to_int_concat">
 <transf name="eliminate_let" >
  <goal name="VC bv_to_int_concat.0" expl="VC for bv_to_int_concat">
  <transf name="split_vc" >
   <goal name="VC bv_to_int_concat.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="145"/></proof>
   </goal>
   <goal name="VC bv_to_int_concat.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC bv_to_int_concat.0.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="137"/></proof>
    </goal>
    <goal name="VC bv_to_int_concat.0.1.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_concat.0.2" expl="postcondition">
   <transf name="rewrite" arg1="H7">
    <goal name="VC bv_to_int_concat.0.2.0" expl="postcondition">
    <transf name="replace" arg1="( ind_isum
  (fun (k:int) -&gt;
    (getbv (concat bvx bvy) @ k)
    * power 2 ((length (concat bvx bvy) - 1) - k))
  0 (length (concat bvx bvy)))" arg2="(ind_isum
  (fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt; length (concat bvx bvy)
    then (getbv (concat bvx bvy) @ k)
         * power 2 ((length (concat bvx bvy) - 1) - k)
    else 1)
  0 (length (concat bvx bvy)))">
     <goal name="VC bv_to_int_concat.0.2.0.0" expl="postcondition">
     <transf name="rewrite" arg1="H">
      <goal name="VC bv_to_int_concat.0.2.0.0.0" expl="postcondition">
      <transf name="apply" arg1="add_eq">
       <goal name="VC bv_to_int_concat.0.2.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="concat_value">
        <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="H6">
         <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="ind_isum_scal_rev">
          <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="apply" arg1="ind_isum_eq">
           <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="compute_specified" >
             <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="eliminate_if" >
              <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0">
              <transf name="split_vc" >
               <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="143"/></proof>
               </goal>
               <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
               <transf name="replace" arg1="(power 2 (length (concat bvx bvy) - k))" arg2="(power 2 (length bvx - k) * power 2 (length bvy))">
                <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises">
                <transf name="replace" arg1="((length (concat bvx bvy) - 1) - k)" arg2="(((length bvx - 1) - k) + length bvy)">
                 <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="146"/></proof>
                 </goal>
                 <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis">
                 <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="144"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis">
                <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="146"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="144"/></proof>
               </goal>
               <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="145"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_to_int_concat.0.2.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC bv_to_int_concat.0.2.0.0.0.1" expl="apply premises">
       <transf name="rewrite" arg1="concat_value">
        <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0" expl="apply premises">
        <transf name="rewrite" arg1="H5">
         <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0" expl="apply premises">
         <transf name="instantiate" arg1="ind_isum_transl" arg2="(fun (k:int) -&gt;
    if 0 &lt;= k /\ k &lt; length (concat bvx bvy)
    then (if length bvx &lt;= k /\ k &lt; (length bvx + length bvy)
          then getbv bvy @ (k - length bvx)
          else if 0 &lt;= k /\ k &lt; length bvx then getbv bvx @ k else 0)
         * power 2 ((length (concat bvx bvy) - 1) - k)
    else 1),(length bvx),(length (concat bvx bvy)),(length bvx)">
          <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="Hinst">
           <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0.0.0" expl="apply premises">
           <transf name="apply" arg1="ind_isum_eq_gen">
            <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0.0.0.0" expl="apply premises">
            <transf name="split_vc" >
             <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0.0.0.0.0" expl="apply premises">
             <transf name="compute_specified" >
              <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.43" steps="147"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0.0.0.1" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="139"/></proof>
            </goal>
            <goal name="VC bv_to_int_concat.0.2.0.0.0.1.0.0.0.0.2" expl="apply premises">
            <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="139"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_concat.0.2.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC bv_to_int_concat.0.2.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_to_int_concat.0.2.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bv_to_int_concat.0.2.0.1.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_concat.0.2.0.1.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="137"/></proof>
      </goal>
      <goal name="VC bv_to_int_concat.0.2.0.1.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_fin" expl="VC for concat_fin">
 <transf name="split_vc" >
  <goal name="VC concat_fin.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat_fin.0.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.65"/></proof>
   </goal>
   <goal name="VC concat_fin.0.1" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_fin.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
  </goal>
  <goal name="VC concat_fin.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat_fin.2.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.73"/></proof>
   </goal>
   <goal name="VC concat_fin.2.1" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.63"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_fin.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
  </goal>
  <goal name="VC concat_fin.4" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC concat_fin.4.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC concat_fin.4.1" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.82"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_fin.5" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="141"/></proof>
  </goal>
  <goal name="VC concat_fin.6" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="143"/></proof>
  </goal>
  <goal name="VC concat_fin.7" expl="precondition">
  <transf name="compute_specified" >
   <goal name="VC concat_fin.7.0" expl="precondition">
   <transf name="rewrite" arg1="assert_make_bv">
    <goal name="VC concat_fin.7.0.0" expl="precondition">
    <transf name="rewrite" arg1="concat_value">
     <goal name="VC concat_fin.7.0.0.0" expl="precondition">
     <transf name="eliminate_if" >
      <goal name="VC concat_fin.7.0.0.0.0" expl="VC for concat_fin">
      <transf name="split_vc" >
       <goal name="VC concat_fin.7.0.0.0.0.0" expl="precondition">
       <transf name="rewrite" arg1="assert_make_bv_b">
        <goal name="VC concat_fin.7.0.0.0.0.0.0" expl="precondition">
        <transf name="compute_specified" >
         <goal name="VC concat_fin.7.0.0.0.0.0.0.0" expl="precondition">
         <transf name="replace" arg1="(length (make_bv f1 l1))" arg2="l1">
          <goal name="VC concat_fin.7.0.0.0.0.0.0.0.0" expl="precondition">
          <transf name="instantiate" arg1="concat_fun_value" arg2="f1,f2,l1,i">
           <goal name="VC concat_fin.7.0.0.0.0.0.0.0.0.0" expl="precondition">
           <transf name="split_all_full" >
            <goal name="VC concat_fin.7.0.0.0.0.0.0.0.0.0.0" expl="precondition">
            <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="155"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC concat_fin.7.0.0.0.0.0.0.0.1" expl="equality hypothesis">
          <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="152"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC concat_fin.7.0.0.0.0.0.1" expl="rewrite premises">
        <transf name="split_vc" >
         <goal name="VC concat_fin.7.0.0.0.0.0.1.0" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.62"/></proof>
         </goal>
         <goal name="VC concat_fin.7.0.0.0.0.0.1.1" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.62"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC concat_fin.7.0.0.0.0.0.2" expl="rewrite premises">
        <transf name="split_vc" >
         <goal name="VC concat_fin.7.0.0.0.0.0.2.0" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="152"/></proof>
         </goal>
         <goal name="VC concat_fin.7.0.0.0.0.0.2.1" expl="rewrite premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="152"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC concat_fin.7.0.0.0.0.1" expl="precondition">
       <transf name="compute_specified" >
        <goal name="VC concat_fin.7.0.0.0.0.1.0" expl="precondition">
        <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC concat_fin.7.0.0.0.0.2" expl="precondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="151"/></proof>
       </goal>
       <goal name="VC concat_fin.7.0.0.0.0.3" expl="precondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="148"/></proof>
       </goal>
       <goal name="VC concat_fin.7.0.0.0.0.4" expl="precondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="148"/></proof>
       </goal>
       <goal name="VC concat_fin.7.0.0.0.0.5" expl="precondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="148"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC concat_fin.7.0.1" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC concat_fin.7.0.1.0" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.76"/></proof>
     </goal>
     <goal name="VC concat_fin.7.0.1.1" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.86"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC concat_fin.7.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="148"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_fin.8" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_to_int_concat" expl="VC for bin_to_int_concat">
 <transf name="split_vc" >
  <goal name="VC bin_to_int_concat.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_to_int_concat.0.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
   </goal>
   <goal name="VC bin_to_int_concat.0.1" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_to_int_concat.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
  </goal>
  <goal name="VC bin_to_int_concat.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_to_int_concat.2.0" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
   </goal>
   <goal name="VC bin_to_int_concat.2.1" expl="precondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_to_int_concat.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="137"/></proof>
  </goal>
  <goal name="VC bin_to_int_concat.4" expl="postcondition">
  <transf name="rewrite" arg1="bin_to_int_def">
   <goal name="VC bin_to_int_concat.4.0" expl="postcondition">
   <transf name="rewrite" arg1="bin_to_int_def">
    <goal name="VC bin_to_int_concat.4.0.0" expl="postcondition">
    <transf name="rewrite" arg1="bin_to_int_def">
     <goal name="VC bin_to_int_concat.4.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC bin_to_int_concat.4.0.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(make_bv (fun (y3:int) -&gt; concat_fun f1 f2 l1 y3) (l1 + l2))" arg2="(concat (make_bv f1 l1) (make_bv f2 l2))">
       <goal name="VC bin_to_int_concat.4.0.0.0.0.0" expl="postcondition">
       <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="141"/></proof>
       </goal>
       <goal name="VC bin_to_int_concat.4.0.0.0.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="set_equal_bv">
        <goal name="VC bin_to_int_concat.4.0.0.0.0.1.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="143"/></proof>
        </goal>
        <goal name="VC bin_to_int_concat.4.0.0.0.0.1.1" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC bin_to_int_concat.4.0.0.0.0.1.1.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_to_int_concat.4.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="141"/></proof>
     </goal>
     <goal name="VC bin_to_int_concat.4.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="141"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_to_int_concat.4.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="141"/></proof>
    </goal>
    <goal name="VC bin_to_int_concat.4.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_to_int_concat.4.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="141"/></proof>
   </goal>
   <goal name="VC bin_to_int_concat.4.2" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bijective_concat" expl="VC for bijective_concat">
 <transf name="eliminate_let" >
  <goal name="VC bijective_concat.0" expl="VC for bijective_concat">
  <transf name="split_vc" >
   <goal name="VC bijective_concat.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC bijective_concat.0.2.0" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.73"/></proof>
    </goal>
    <goal name="VC bijective_concat.0.2.1" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.3" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="139"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.5" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="136"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.6" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC bijective_concat.0.6.0" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
    </goal>
    <goal name="VC bijective_concat.0.6.1" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.60"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.7" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="133"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.8" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC bijective_concat.0.8.0" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.78"/></proof>
    </goal>
    <goal name="VC bijective_concat.0.8.1" expl="precondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.9" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="135"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.10" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="131"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.11" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.12" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="135"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.13" expl="precondition">
   <transf name="instantiate" arg1="map_antec" arg2="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (fir o) (sec o)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j)),(cartesian_product (n_bvs i) (n_bvs j)),e">
    <goal name="VC bijective_concat.0.13.0" expl="precondition">
    <transf name="destruct" arg1="Hinst">
     <goal name="VC bijective_concat.0.13.0.0" expl="destruct premise" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="VC bijective_concat.0.13.0.1" expl="precondition">
     <transf name="destruct" arg1="Hinst">
      <goal name="VC bijective_concat.0.13.0.1.0" expl="precondition">
      <transf name="destruct" arg1="Hinst">
       <goal name="VC bijective_concat.0.13.0.1.0.0" expl="precondition">
       <transf name="rewrite" arg1="Hinst">
        <goal name="VC bijective_concat.0.13.0.1.0.0.0" expl="precondition">
        <transf name="compute_specified" >
         <goal name="VC bijective_concat.0.13.0.1.0.0.0.0" expl="precondition">
         <transf name="apply" arg1="get_n_bvs_gen">
          <goal name="VC bijective_concat.0.13.0.1.0.0.0.0.0" expl="apply premises">
          <proof prover="3" obsolete="true"><result status="valid" time="2.37"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.14" expl="precondition">
   <transf name="apply" arg1="set_map_mem">
    <goal name="VC bijective_concat.0.14.0" expl="apply premises">
    <transf name="exists" arg1="(hpart e i, tpart e i)">
     <goal name="VC bijective_concat.0.14.0.0">
     <transf name="split_vc" >
      <goal name="VC bijective_concat.0.14.0.0.0">
      <transf name="assert" arg1="(mem (hpart e i) (n_bvs i) )">
       <goal name="VC bijective_concat.0.14.0.0.0.0" expl="asserted formula">
       <transf name="apply" arg1="get_n_bvs_gen">
        <goal name="VC bijective_concat.0.14.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="145"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bijective_concat.0.14.0.0.0.1">
       <transf name="assert" arg1="(mem (tpart e i) (n_bvs j) )">
        <goal name="VC bijective_concat.0.14.0.0.0.1.0" expl="asserted formula">
        <transf name="apply" arg1="in_n_bvs">
         <goal name="VC bijective_concat.0.14.0.0.0.1.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="143"/></proof>
         </goal>
         <goal name="VC bijective_concat.0.14.0.0.0.1.0.1" expl="apply premises">
         <transf name="split_all_full" >
          <goal name="VC bijective_concat.0.14.0.0.0.1.0.1.0" expl="apply premises">
          <transf name="rewrite" arg1="tpart_spec2">
           <goal name="VC bijective_concat.0.14.0.0.0.1.0.1.0.0" expl="apply premises">
           <proof prover="3" obsolete="true"><result status="valid" time="0.59"/></proof>
           </goal>
           <goal name="VC bijective_concat.0.14.0.0.0.1.0.1.0.1" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="0.33"/></proof>
           </goal>
           <goal name="VC bijective_concat.0.14.0.0.0.1.0.1.0.2" expl="rewrite premises">
           <proof prover="3" obsolete="true"><result status="valid" time="0.61"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC bijective_concat.0.14.0.0.0.1.1">
        <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="149"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bijective_concat.0.14.0.0.1">
      <transf name="compute_specified" >
       <goal name="VC bijective_concat.0.14.0.0.1.0">
       <transf name="eliminate_if" >
        <goal name="VC bijective_concat.0.14.0.0.1.0.0">
        <transf name="split_vc" >
         <goal name="VC bijective_concat.0.14.0.0.1.0.0.0">
         <transf name="apply" arg1="set_equal_bv">
          <goal name="VC bijective_concat.0.14.0.0.1.0.0.0.0" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC bijective_concat.0.14.0.0.1.0.0.0.0.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.72"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC bijective_concat.0.14.0.0.1.0.0.0.1" expl="apply premises">
          <transf name="split_vc" >
           <goal name="VC bijective_concat.0.14.0.0.1.0.0.0.1.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC bijective_concat.0.14.0.0.1.0.0.1">
         <proof prover="0" obsolete="true"><result status="valid" time="0.75"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.15" expl="assertion">
   <proof prover="3" obsolete="true"><result status="valid" time="3.62"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.16" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="143"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.17" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="143"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.18" expl="precondition">
   <transf name="compute_specified" >
    <goal name="VC bijective_concat.0.18.0" expl="precondition">
    <transf name="case" arg1="(fir e = fir e&#39;)">
     <goal name="VC bijective_concat.0.18.0.0" expl="true case (precondition)">
     <transf name="case" arg1="(sec e &lt;&gt; sec e&#39;)">
      <goal name="VC bijective_concat.0.18.0.0.0" expl="true case (precondition)">
      <transf name="eliminate_if" >
       <goal name="VC bijective_concat.0.18.0.0.0.0" expl="true case (precondition)">
       <transf name="split_vc" >
        <goal name="VC bijective_concat.0.18.0.0.0.0.0" expl="true case (precondition)">
        <transf name="assert" arg1="(not (concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;)))">
         <goal name="VC bijective_concat.0.18.0.0.0.0.0.0" expl="asserted formula">
         <transf name="case" arg1="(concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;))">
          <goal name="VC bijective_concat.0.18.0.0.0.0.0.0.0" expl="true case (asserted formula)">
          <proof prover="1" obsolete="true"><result status="valid" time="0.14"/></proof>
          </goal>
          <goal name="VC bijective_concat.0.18.0.0.0.0.0.0.1" expl="false case (asserted formula)">
          <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="155"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bijective_concat.0.18.0.0.0.0.0.1" expl="true case (precondition)">
         <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="155"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bijective_concat.0.18.0.0.0.0.1" expl="true case (precondition)">
        <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="153"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bijective_concat.0.18.0.0.1" expl="false case (true case. precondition)">
      <proof prover="3" obsolete="true"><result status="valid" time="1.28"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bijective_concat.0.18.0.1" expl="false case (precondition)">
     <transf name="assert" arg1="(not (concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;)))">
      <goal name="VC bijective_concat.0.18.0.1.0" expl="asserted formula">
      <transf name="case" arg1="(concat (fir e) (sec e) = concat (fir e&#39;) (sec e&#39;))">
       <goal name="VC bijective_concat.0.18.0.1.0.0" expl="true case (asserted formula)">
       <proof prover="1" obsolete="true"><result status="valid" time="0.71"/></proof>
       </goal>
       <goal name="VC bijective_concat.0.18.0.1.0.1" expl="false case (asserted formula)">
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="153"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bijective_concat.0.18.0.1.1" expl="false case (precondition)">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.19" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC bijective_concat.0.19.0" expl="precondition">
    <transf name="assert" arg1="(mem e&#39; (n_bvs (i+j)))">
     <goal name="VC bijective_concat.0.19.0.0" expl="asserted formula">
     <transf name="apply" arg1="get_n_bvs_gen">
      <goal name="VC bijective_concat.0.19.0.0.0" expl="apply premises">
      <transf name="instantiate" arg1="map_antec" arg2="(fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (fir o) (sec o)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j)),(cartesian_product (n_bvs i) (n_bvs j)),e&#39;">
       <goal name="VC bijective_concat.0.19.0.0.0.0" expl="apply premises">
       <transf name="destruct" arg1="Hinst">
        <goal name="VC bijective_concat.0.19.0.0.0.0.0" expl="destruct premise" proved="true">
        <transf name="apply" proved="true" arg1="H">
        </transf>
        </goal>
        <goal name="VC bijective_concat.0.19.0.0.0.0.1" expl="apply premises">
        <transf name="destruct" arg1="Hinst">
         <goal name="VC bijective_concat.0.19.0.0.0.0.1.0" expl="apply premises">
         <transf name="compute_hyp_specified" arg1="in" arg2="Hinst">
          <goal name="VC bijective_concat.0.19.0.0.0.0.1.0.0" expl="apply premises">
          <transf name="replace" arg1="e&#39;" arg2="(concat (fir a) (sec a))">
           <goal name="VC bijective_concat.0.19.0.0.0.0.1.0.0.0" expl="apply premises">
           <transf name="split_all_full" >
            <goal name="VC bijective_concat.0.19.0.0.0.0.1.0.0.0.0" expl="apply premises">
            <proof prover="3" obsolete="true"><result status="valid" time="1.86"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC bijective_concat.0.19.0.0.0.0.1.0.0.1" expl="equality hypothesis">
           <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="149"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bijective_concat.0.19.0.1" expl="precondition">
     <transf name="compute_specified" >
      <goal name="VC bijective_concat.0.19.0.1.0" expl="precondition">
      <transf name="eliminate_if" >
       <goal name="VC bijective_concat.0.19.0.1.0.0" expl="VC for bijective_concat">
       <transf name="split_vc" >
        <goal name="VC bijective_concat.0.19.0.1.0.0.0" expl="precondition">
        <proof prover="3" obsolete="true"><result status="valid" time="2.37"/></proof>
        </goal>
        <goal name="VC bijective_concat.0.19.0.1.0.0.1" expl="precondition">
        <transf name="assert" arg1="false">
         <goal name="VC bijective_concat.0.19.0.1.0.0.1.0" expl="asserted formula">
         <transf name="split_vc" >
          <goal name="VC bijective_concat.0.19.0.1.0.0.1.0.0" expl="asserted formula">
          <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="151"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bijective_concat.0.19.0.1.0.0.1.1" expl="precondition">
         <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="149"/></proof>
         </goal>
        </transf>
        <transf name="eliminate_epsilon" >
         <goal name="VC bijective_concat.0.19.0.1.0.0.1.0" expl="precondition">
         <transf name="assert" arg1="false">
          <goal name="VC bijective_concat.0.19.0.1.0.0.1.0.0" expl="asserted formula">
          <transf name="split_vc" >
           <goal name="VC bijective_concat.0.19.0.1.0.0.1.0.0.0" expl="asserted formula">
           <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="149"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC bijective_concat.0.19.0.1.0.0.1.0.1" expl="precondition">
          <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="147"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        <transf name="replace" arg1="(fir (make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) i,
   make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) j))" arg2="(make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) i)">
         <goal name="VC bijective_concat.0.19.0.1.0.0.1.0" expl="precondition">
         <transf name="replace" arg1="(sec (make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) i,
   make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) j))" arg2="(make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) j)">
          <goal name="VC bijective_concat.0.19.0.1.0.0.1.0.0" expl="precondition">
          <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="153"/></proof>
          </goal>
          <goal name="VC bijective_concat.0.19.0.1.0.0.1.0.1" expl="equality hypothesis">
          <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="153"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bijective_concat.0.19.0.1.0.0.1.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="153"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bijective_concat.0.19.1" expl="precondition">
    <transf name="replace" arg1="(map1
   (fun (o:(bitvec, bitvec)) -&gt;
     if mem o (cartesian_product (n_bvs i) (n_bvs j))
     then concat (fir o) (sec o)
     else make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) (i + j))
   (cartesian_product (n_bvs i) (n_bvs j)))" arg2="(map1
   (fun (o:(bitvec, bitvec)) -&gt;
     concat (fir o) (sec o)
     )
   (cartesian_product (n_bvs i) (n_bvs j)))" arg3="in" arg4="H">
     <goal name="VC bijective_concat.0.19.1.0" expl="precondition">
     <transf name="compute_specified" >
      <goal name="VC bijective_concat.0.19.1.0.0" expl="precondition">
      <transf name="compute_hyp_specified" arg1="in" arg2="H1">
       <goal name="VC bijective_concat.0.19.1.0.0.0" expl="precondition">
       <transf name="eliminate_if" >
        <goal name="VC bijective_concat.0.19.1.0.0.0.0" expl="VC for bijective_concat">
        <transf name="split_vc" >
         <goal name="VC bijective_concat.0.19.1.0.0.0.0.0" expl="precondition">
         <proof prover="3" obsolete="true"><result status="valid" time="0.84"/></proof>
         </goal>
         <goal name="VC bijective_concat.0.19.1.0.0.0.0.1" expl="precondition">
         <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="149"/></proof>
         </goal>
         <goal name="VC bijective_concat.0.19.1.0.0.0.0.2" expl="precondition">
         <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="149"/></proof>
         </goal>
         <goal name="VC bijective_concat.0.19.1.0.0.0.0.3" expl="precondition">
         <transf name="assert" arg1="false">
          <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0" expl="asserted formula">
          <transf name="instantiate" arg1="map_antec" arg2="(fun (o:(bitvec, bitvec)) -&gt; concat (fir o) (sec o)),(cartesian_product (n_bvs i) (n_bvs j)),e&#39;">
           <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0" expl="asserted formula">
           <transf name="destruct" arg1="Hinst">
            <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.0" expl="destruct premise" proved="true">
            <transf name="apply" proved="true" arg1="H3">
            </transf>
            </goal>
            <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1" expl="asserted formula">
            <transf name="destruct" arg1="Hinst">
             <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0" expl="asserted formula">
             <transf name="destruct" arg1="Hinst">
              <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0.0" expl="asserted formula">
              <transf name="assert" arg1="(e&#39; = concat (fir a) (sec a))">
               <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0.0.0" expl="asserted formula">
               <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="157"/></proof>
               </goal>
               <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0.0.1" expl="asserted formula">
               <transf name="assert" arg1="(length e&#39; = i+j)">
                <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0.0.1.0" expl="asserted formula">
                <transf name="rewrite" arg1="h1">
                 <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0.0.1.0.0" expl="asserted formula">
                 <transf name="rewrite" arg1="concat_length">
                  <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0.0.1.0.0.0" expl="asserted formula">
                  <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="159"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.0.0.1.0.0.1.1" expl="asserted formula">
                <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="155"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bijective_concat.0.19.1.0.0.0.0.3.1" expl="precondition">
          <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="149"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bijective_concat.0.19.1.0.0.0.0.4" expl="precondition">
         <transf name="assert" arg1="(((length e&#39; = (i + j) -&gt;
        mem (hpart e&#39; i, tpart e&#39; i) (cartesian_product (n_bvs i) (n_bvs j))) /\
       (not length e&#39; = (i + j) -&gt;
        mem (make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) i,
        make_bv ((fun (y0:int) (y1:int) -&gt; const y0 y1) @ 0) j)
        (cartesian_product (n_bvs i) (n_bvs j)))))">
          <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0" expl="asserted formula">
          <transf name="split_vc" >
           <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.0" expl="asserted formula">
           <proof prover="3" obsolete="true"><result status="valid" time="2.15"/></proof>
           </goal>
           <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1" expl="asserted formula">
           <transf name="apply" arg1="mem_cartesian_product">
            <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.0" expl="apply premises">
            <transf name="apply" arg1="in_n_bvs">
             <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.0.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="149"/></proof>
             </goal>
             <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.0.1" expl="apply premises">
             <transf name="apply" arg1="make_bv_length">
              <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.0.1.0" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.0.1.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="153"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.0.1.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="149"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.1" expl="apply premises">
            <transf name="apply" arg1="in_n_bvs">
             <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.1.0" expl="apply premises">
             <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="149"/></proof>
             </goal>
             <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.1.1" expl="apply premises">
             <transf name="apply" arg1="make_bv_length">
              <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.1.1.0" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.1.1.0.0" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="153"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.0.1.1.1.1" expl="apply premises">
              <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="149"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bijective_concat.0.19.1.0.0.0.0.4.1" expl="precondition">
          <proof prover="3" obsolete="true"><result status="valid" time="0.89"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bijective_concat.0.19.1.1" expl="equality hypothesis">
     <transf name="apply" arg1="map_eq">
      <goal name="VC bijective_concat.0.19.1.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bijective_concat.0.19.1.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bijective_concat.0.19.1.1.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="147"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.20" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="147"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.21" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="147"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.22" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="147"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.23" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H30" arg2="in" arg3="H17">
    <goal name="VC bijective_concat.0.23.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="H17">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.24" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="147"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.25" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="147"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.26" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="147"/></proof>
   </goal>
   <goal name="VC bijective_concat.0.27" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H46" arg2="in" arg3="H32">
    <goal name="VC bijective_concat.0.27.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="H32">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.28" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC bijective_concat.0.28.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="3.53"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bijective_concat.0.29" expl="postcondition">
   <transf name="apply" arg1="H1">
    <goal name="VC bijective_concat.0.29.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC bijective_concat.0.29.0.0" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_hpart" expl="VC for bv_to_int_hpart">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_hpart.0" expl="postcondition">
  <transf name="rewrite" arg1="bv_to_int_sum">
   <goal name="VC bv_to_int_hpart.0.0" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_sum">
    <goal name="VC bv_to_int_hpart.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="div_ind_isum">
     <goal name="VC bv_to_int_hpart.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC bv_to_int_hpart.0.0.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC bv_to_int_hpart.0.0.0.0.0.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC bv_to_int_hpart.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="3.29"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_hpart.0.0.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="131"/></proof>
      </goal>
      <goal name="VC bv_to_int_hpart.0.0.0.0.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_hpart.0.0.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC bv_to_int_hpart.0.0.0.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="131"/></proof>
      </goal>
      <goal name="VC bv_to_int_hpart.0.0.0.1.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_hpart.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_tpart" expl="VC for bv_to_int_tpart">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_tpart.0" expl="postcondition">
  <transf name="rewrite" arg1="bv_to_int_sum">
   <goal name="VC bv_to_int_tpart.0.0" expl="postcondition">
   <transf name="rewrite" arg1="bv_to_int_sum">
    <goal name="VC bv_to_int_tpart.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="mod_ind_isum_z">
     <goal name="VC bv_to_int_tpart.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC bv_to_int_tpart.0.0.0.0.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC bv_to_int_tpart.0.0.0.0.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC bv_to_int_tpart.0.0.0.0.0.0.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="VC bv_to_int_tpart.0.0.0.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="tpart_spec">
          <goal name="VC bv_to_int_tpart.0.0.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
          </goal>
          <goal name="VC bv_to_int_tpart.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="135"/></proof>
          </goal>
          <goal name="VC bv_to_int_tpart.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
          <transf name="split_vc" >
           <goal name="VC bv_to_int_tpart.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="135"/></proof>
           </goal>
           <goal name="VC bv_to_int_tpart.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises">
           <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="135"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_tpart.0.0.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
      </goal>
      <goal name="VC bv_to_int_tpart.0.0.0.0.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_tpart.0.0.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC bv_to_int_tpart.0.0.0.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="131"/></proof>
      </goal>
      <goal name="VC bv_to_int_tpart.0.0.0.1.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_tpart.0.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_hpart_rev" expl="VC for bv_to_int_hpart_rev" proved="true">
 <proof prover="0"><result status="valid" time="0.39"/></proof>
 <proof prover="3"><result status="timeout" time="5.00"/></proof>
 <proof prover="4"><result status="timeout" time="5.00"/></proof>
 </goal>
 <goal name="VC bv_to_int_tpart_rev" expl="VC for bv_to_int_tpart_rev" proved="true">
 <proof prover="0"><result status="valid" time="0.50"/></proof>
 <proof prover="3"><result status="timeout" time="5.00"/></proof>
 </goal>
</theory>
<theory name="Bv_op">
 <goal name="VC bin_and" expl="VC for bin_and">
 <transf name="split_vc" >
  <goal name="VC bin_and.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC bin_and.0.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC bin_and.0.0.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="141"/></proof>
    </goal>
    <goal name="VC bin_and.0.0.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_and.0.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC bin_and.0.1.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="141"/></proof>
    </goal>
    <goal name="VC bin_and.0.1.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_and.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC bin_and.1.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC bin_and.1.0.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="143"/></proof>
    </goal>
    <goal name="VC bin_and.1.0.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_and.1.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC bin_and.1.1.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="143"/></proof>
    </goal>
    <goal name="VC bin_and.1.1.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_and.1.2" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC bin_and.1.2.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="143"/></proof>
    </goal>
    <goal name="VC bin_and.1.2.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="143"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_and.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC bin_and.2.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC bin_and.2.0.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="143"/></proof>
    </goal>
    <goal name="VC bin_and.2.0.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="144"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_and.2.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC bin_and.2.1.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="143"/></proof>
    </goal>
    <goal name="VC bin_and.2.1.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="140"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_andv" expl="VC for bin_andv">
 <transf name="split_vc" >
  <goal name="VC bin_andv.0" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.65"/></proof>
  </goal>
  <goal name="VC bin_andv.1" expl="precondition">
  <proof prover="3" obsolete="true"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="VC bin_andv.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.2.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="141"/></proof>
   </goal>
   <goal name="VC bin_andv.2.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.3" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.3.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="145"/></proof>
   </goal>
   <goal name="VC bin_andv.3.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.4" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.4.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="1.97"/></proof>
   </goal>
   <goal name="VC bin_andv.4.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.5" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.5.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="143"/></proof>
   </goal>
   <goal name="VC bin_andv.5.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.6" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.6.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="147"/></proof>
   </goal>
   <goal name="VC bin_andv.6.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.7" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.7.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.02"/></proof>
   </goal>
   <goal name="VC bin_andv.7.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.8" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="139"/></proof>
  </goal>
  <goal name="VC bin_andv.9" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.9.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="145"/></proof>
   </goal>
   <goal name="VC bin_andv.9.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.10" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.10.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="149"/></proof>
   </goal>
   <goal name="VC bin_andv.10.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.46" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.11" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.11.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.87"/></proof>
   </goal>
   <goal name="VC bin_andv.11.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.12" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.12.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="147"/></proof>
   </goal>
   <goal name="VC bin_andv.12.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.13" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.13.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="151"/></proof>
   </goal>
   <goal name="VC bin_andv.13.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="151"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.14" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bin_andv.14.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.75"/></proof>
   </goal>
   <goal name="VC bin_andv.14.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="2.09"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.15" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="143"/></proof>
  </goal>
  <goal name="VC bin_andv.16" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.21" steps="145"/></proof>
  </goal>
  <goal name="VC bin_andv.17" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC bin_andv.17.0" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC bin_andv.17.0.0" expl="apply premises">
    <transf name="rewrite" arg1="make_bv_length">
     <goal name="VC bin_andv.17.0.0.0" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="145"/></proof>
     </goal>
     <goal name="VC bin_andv.17.0.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC bin_andv.17.0.0.1.0" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="2.58"/></proof>
      </goal>
      <goal name="VC bin_andv.17.0.0.1.1" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="3.17"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_andv.17.0.0.2" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_andv.17.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC bin_andv.17.1.0" expl="apply premises">
    <transf name="rewrite" arg1="H4">
     <goal name="VC bin_andv.17.1.0.0" expl="apply premises">
     <transf name="eliminate_definition" >
      <goal name="VC bin_andv.17.1.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC bin_andv.17.1.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="assert_make_bv">
        <goal name="VC bin_andv.17.1.0.0.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="151"/></proof>
        </goal>
        <goal name="VC bin_andv.17.1.0.0.0.0.1" expl="rewrite premises">
        <transf name="split_vc" >
         <goal name="VC bin_andv.17.1.0.0.0.0.1.0" expl="rewrite premises">
         <transf name="compute_specified" >
          <goal name="VC bin_andv.17.1.0.0.0.0.1.0.0" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="154"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bin_andv.17.1.0.0.0.0.1.1" expl="rewrite premises">
         <transf name="compute_specified" >
          <goal name="VC bin_andv.17.1.0.0.0.0.1.1.0" expl="rewrite premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="154"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC bin_andv.17.1.0.0.0.0.2" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="148"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_andv.17.1.0.1" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC bin_andv.17.1.0.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="149"/></proof>
      </goal>
      <goal name="VC bin_andv.17.1.0.1.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_andv.18" expl="postcondition">
  <proof prover="3" obsolete="true"><result status="valid" time="2.79"/></proof>
  </goal>
  <goal name="VC bin_andv.19" expl="postcondition">
  <transf name="rewrite" arg1="H3">
   <goal name="VC bin_andv.19.0" expl="postcondition">
   <transf name="rewrite" arg1="assert_make_bv_b">
    <goal name="VC bin_andv.19.0.0" expl="postcondition">
    <transf name="compute_specified" >
     <goal name="VC bin_andv.19.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.74"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_andv.19.0.1" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC bin_andv.19.0.1.0" expl="rewrite premises">
     <transf name="compute_specified" >
      <goal name="VC bin_andv.19.0.1.0.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="159"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_andv.19.0.1.1" expl="rewrite premises">
     <transf name="compute_specified" >
      <goal name="VC bin_andv.19.0.1.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="159"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_andv.19.0.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC bin_andv.19.0.2.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="153"/></proof>
     </goal>
     <goal name="VC bin_andv.19.0.2.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="153"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_andv_values" expl="VC for bin_andv_values">
 <transf name="split_vc" >
  <goal name="VC bin_andv_values.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bin_and_seq" expl="VC for int_bin_and_seq">
 <transf name="eliminate_let" >
  <goal name="VC int_bin_and_seq.0" expl="VC for int_bin_and_seq">
  <transf name="split_vc" >
   <goal name="VC int_bin_and_seq.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="139"/></proof>
   </goal>
   <goal name="VC int_bin_and_seq.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="143"/></proof>
   </goal>
   <goal name="VC int_bin_and_seq.0.2" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="147"/></proof>
   </goal>
   <goal name="VC int_bin_and_seq.0.3" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="159"/></proof>
   </goal>
   <goal name="VC int_bin_and_seq.0.4" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="153"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bin_and_seq_inst" expl="VC for int_bin_and_seq_inst">
 <transf name="split_vc" >
  <goal name="VC int_bin_and_seq_inst.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_bin_and_seq_zero" expl="VC for int_bin_and_seq_zero">
 <transf name="split_vc" >
  <goal name="VC int_bin_and_seq_zero.0" expl="postcondition">
  <transf name="rewrite" arg1="int_bin_and_seq_def">
   <goal name="VC int_bin_and_seq_zero.0.0" expl="postcondition">
   <transf name="rewrite" arg1="bin_andv_values">
    <goal name="VC int_bin_and_seq_zero.0.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.79"/></proof>
    </goal>
    <goal name="VC int_bin_and_seq_zero.0.0.1" expl="rewrite premises">
    <proof prover="5" obsolete="true"><result status="valid" time="0.85"/></proof>
    </goal>
    <goal name="VC int_bin_and_seq_zero.0.0.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_bin_and_seq_zero.0.0.2.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="145"/></proof>
     </goal>
     <goal name="VC int_bin_and_seq_zero.0.0.2.1" expl="rewrite premises">
     <transf name="replace" arg1="(length (int_to_bv i n))" arg2="n">
      <goal name="VC int_bin_and_seq_zero.0.0.2.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
      </goal>
      <goal name="VC int_bin_and_seq_zero.0.0.2.1.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bin_and_seq_zero.0.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_bin_and_seq_zero.0.1.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bin_and_seq_zero.0.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_bin_and_seq_zero.0.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="145"/></proof>
    </goal>
    <goal name="VC int_bin_and_seq_zero.0.2.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bin_and_seq_zero.0.3" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_bin_and_seq_zero.0.3.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="145"/></proof>
    </goal>
    <goal name="VC int_bin_and_seq_zero.0.3.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_bin_and_seq_zero.1" expl="postcondition">
  <transf name="rewrite" arg1="int_bin_and_seq_def">
   <goal name="VC int_bin_and_seq_zero.1.0" expl="postcondition">
   <transf name="case" arg1="(i = 0)">
    <goal name="VC int_bin_and_seq_zero.1.0.0" expl="true case (postcondition)">
    <transf name="rewrite" arg1="bin_andv_values">
     <goal name="VC int_bin_and_seq_zero.1.0.0.0" expl="true case (postcondition)">
     <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="147"/></proof>
     </goal>
     <goal name="VC int_bin_and_seq_zero.1.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="147"/></proof>
     </goal>
     <goal name="VC int_bin_and_seq_zero.1.0.0.2" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC int_bin_and_seq_zero.1.0.0.2.0">
      <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="147"/></proof>
      </goal>
      <goal name="VC int_bin_and_seq_zero.1.0.0.2.1">
      <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_bin_and_seq_zero.1.0.1" expl="false case (postcondition)">
    <transf name="rewrite" arg1="bin_andv_values">
     <goal name="VC int_bin_and_seq_zero.1.0.1.0" expl="false case (postcondition)">
     <proof prover="0" obsolete="true"><result status="valid" time="0.72"/></proof>
     </goal>
     <goal name="VC int_bin_and_seq_zero.1.0.1.1" expl="rewrite premises">
     <transf name="replace" arg1="(length (int_to_bv i n))" arg2="n">
      <goal name="VC int_bin_and_seq_zero.1.0.1.1.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="149"/></proof>
      </goal>
      <goal name="VC int_bin_and_seq_zero.1.0.1.1.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_bin_and_seq_zero.1.0.1.2" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bin_and_seq_zero.1.1" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_bin_and_seq_zero.1.1.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bin_and_seq_zero.1.2" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_bin_and_seq_zero.1.2.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="147"/></proof>
    </goal>
    <goal name="VC int_bin_and_seq_zero.1.2.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_bin_and_seq_zero.1.3" expl="rewrite premises">
   <transf name="split_vc" >
    <goal name="VC int_bin_and_seq_zero.1.3.0" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="147"/></proof>
    </goal>
    <goal name="VC int_bin_and_seq_zero.1.3.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC popcount" expl="VC for popcount">
 <transf name="eliminate_let" >
  <goal name="VC popcount.0" expl="VC for popcount">
  <transf name="split_vc" >
   <goal name="VC popcount.0.0" expl="variant decrease">
   <transf name="split_vc" >
    <goal name="VC popcount.0.0.0" expl="variant decrease">
    <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
    </goal>
    <goal name="VC popcount.0.0.1" expl="variant decrease">
    <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC popcount.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
   </goal>
   <goal name="VC popcount.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC popcount.0.2.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="140"/></proof>
    </goal>
    <goal name="VC popcount.0.2.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="140"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC popcount.0.3" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC popcount.0.3.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="137"/></proof>
    </goal>
    <goal name="VC popcount.0.3.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC popcount.0.4" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC popcount.0.4.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="139"/></proof>
    </goal>
    <goal name="VC popcount.0.4.1" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_popcount" expl="VC for positive_popcount">
 <transf name="split_vc" >
  <goal name="VC positive_popcount.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC popcount_right_extension" expl="VC for popcount_right_extension">
 <transf name="split_vc" >
  <goal name="VC popcount_right_extension.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC popcount_right_extension.0.0" expl="postcondition">
   <transf name="rewrite" arg1="popcount_spec1">
    <goal name="VC popcount_right_extension.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ind_isum_right_extension">
     <goal name="VC popcount_right_extension.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="popcount_spec1">
      <goal name="VC popcount_right_extension.0.0.0.0.0" expl="postcondition">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="131"/></proof>
      </goal>
      <goal name="VC popcount_right_extension.0.0.0.0.1" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="131"/></proof>
      </goal>
      <goal name="VC popcount_right_extension.0.0.0.0.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.23" steps="136"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC popcount_right_extension.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC popcount_right_extension.0.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
    </goal>
    <goal name="VC popcount_right_extension.0.0.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC popcount_right_extension.0.0.2.0" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.25" steps="137"/></proof>
     </goal>
     <goal name="VC popcount_right_extension.0.0.2.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC popcount_left_extension" expl="VC for popcount_left_extension">
 <transf name="split_vc" >
  <goal name="VC popcount_left_extension.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC popcount_zero" expl="VC for popcount_zero">
 <transf name="split_vc" >
  <goal name="VC popcount_zero.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
  </goal>
  <goal name="VC popcount_zero.1" expl="precondition">
  <transf name="eliminate_definition" >
   <goal name="VC popcount_zero.1.0" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC popcount_zero.1.0.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="2.46" steps="139"/></proof>
    </goal>
    <goal name="VC popcount_zero.1.0.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="2.51" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC popcount_zero.2" expl="variant decrease">
  <transf name="split_vc" >
   <goal name="VC popcount_zero.2.0" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="135"/></proof>
   </goal>
   <goal name="VC popcount_zero.2.1" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC popcount_zero.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.40" steps="141"/></proof>
  </goal>
  <goal name="VC popcount_zero.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="135"/></proof>
  </goal>
  <goal name="VC popcount_zero.5" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC popcount_one" expl="VC for popcount_one">
 <transf name="split_vc" >
  <goal name="VC popcount_one.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC popcount_right_extension_comm" expl="VC for popcount_right_extension_comm">
 <transf name="split_vc" >
  <goal name="VC popcount_right_extension_comm.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC popcount_eq" expl="VC for popcount_eq">
 <transf name="split_vc" >
  <goal name="VC popcount_eq.0" expl="variant decrease">
  <transf name="split_vc" >
   <goal name="VC popcount_eq.0.0" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
   </goal>
   <goal name="VC popcount_eq.0.1" expl="variant decrease">
   <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC popcount_eq.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="139"/></proof>
  </goal>
  <goal name="VC popcount_eq.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
  </goal>
  <goal name="VC popcount_eq.3" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC popcount_eq.3.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="140"/></proof>
   </goal>
   <goal name="VC popcount_eq.3.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC popcount_eq.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="135"/></proof>
  </goal>
  <goal name="VC popcount_eq.5" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC popcount_eq.5.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.38" steps="142"/></proof>
   </goal>
   <goal name="VC popcount_eq.5.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.26" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC popcount_eq.6" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="137"/></proof>
  </goal>
  <goal name="VC popcount_eq.7" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC popcount_eq.7.0" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="4.90"/></proof>
   </goal>
   <goal name="VC popcount_eq.7.1" expl="precondition">
   <proof prover="3" obsolete="true"><result status="valid" time="4.64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC popcount_eq.8" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Binary_inversion_op">
 <goal name="VC head_bv_to_int_inversion" expl="VC for head_bv_to_int_inversion">
 <transf name="eliminate_let" >
  <goal name="VC head_bv_to_int_inversion.0" expl="VC for head_bv_to_int_inversion">
  <transf name="split_vc" >
   <goal name="VC head_bv_to_int_inversion.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="129"/></proof>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC head_bv_to_int_inversion.0.2.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
    </goal>
    <goal name="VC head_bv_to_int_inversion.0.2.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.3" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="VC head_bv_to_int_inversion.0.3.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC head_bv_to_int_inversion.0.3.0.0" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="2.14"/></proof>
     </goal>
     <goal name="VC head_bv_to_int_inversion.0.3.0.1" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.61"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.5" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC head_bv_to_int_inversion.0.5.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="135"/></proof>
    </goal>
    <goal name="VC head_bv_to_int_inversion.0.5.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.6" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="VC head_bv_to_int_inversion.0.6.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC head_bv_to_int_inversion.0.6.0.0" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.85"/></proof>
     </goal>
     <goal name="VC head_bv_to_int_inversion.0.6.0.1" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.86"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.7" expl="postcondition">
   <transf name="rewrite" arg1="H2">
    <goal name="VC head_bv_to_int_inversion.0.7.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
   (fun (k:int) -&gt;
     (getbv (make_bv_m f n) @ ((length (make_bv_m f n) - k) - 1))
     * power 2 ((length (make_bv_m f n) - 1) - k))
   0 (length (make_bv_m f n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (f @ ((n - k1) - 1)) 2) @ k)
     * power 2 ((n - 1) - k))
   0 n)">
     <goal name="VC head_bv_to_int_inversion.0.7.0.0" expl="postcondition">
     <transf name="replace" arg1="(power 2 1)" arg2="2" arg3="in" arg4="H">
      <goal name="VC head_bv_to_int_inversion.0.7.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H">
       <goal name="VC head_bv_to_int_inversion.0.7.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="ind_isum_one">
        <goal name="VC head_bv_to_int_inversion.0.7.0.0.0.0.0" expl="postcondition">
        <transf name="compute_specified" >
         <goal name="VC head_bv_to_int_inversion.0.7.0.0.0.0.0.0" expl="postcondition">
         <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC head_bv_to_int_inversion.0.7.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC head_bv_to_int_inversion.0.7.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.42" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC head_bv_to_int_inversion.0.7.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC head_bv_to_int_inversion.0.7.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC head_bv_to_int_inversion.0.7.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC head_bv_to_int_inversion.0.7.0.1.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.48" steps="143"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC head_bv_to_int_inversion.0.7.0.1.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="137"/></proof>
      </goal>
      <goal name="VC head_bv_to_int_inversion.0.7.0.1.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC head_bv_to_int_inversion.0.8" expl="postcondition">
   <transf name="rewrite" arg1="H3">
    <goal name="VC head_bv_to_int_inversion.0.8.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
     (fun (k:int) -&gt;
       (getbv (make_bv_m f n) @ ((length (make_bv_m f n) - k) - 1))
       * power 2 ((length (make_bv_m f n) - 1) - k))
     0 (length (make_bv_m f n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (f @ ((n - k1) - 1)) 2) @ k)
     * power 2 ((n - 1) - k))
   0 n)">
     <goal name="VC head_bv_to_int_inversion.0.8.0.0" expl="postcondition">
     <transf name="replace" arg1="(power 2 1)" arg2="2" arg3="in" arg4="H2">
      <goal name="VC head_bv_to_int_inversion.0.8.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H2">
       <goal name="VC head_bv_to_int_inversion.0.8.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="ind_isum_eq">
        <goal name="VC head_bv_to_int_inversion.0.8.0.0.0.0.0" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC head_bv_to_int_inversion.0.8.0.0.0.0.0.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC head_bv_to_int_inversion.0.8.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="143"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC head_bv_to_int_inversion.0.8.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.37" steps="141"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC head_bv_to_int_inversion.0.8.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC head_bv_to_int_inversion.0.8.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC head_bv_to_int_inversion.0.8.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC head_bv_to_int_inversion.0.8.0.1.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.61" steps="145"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC head_bv_to_int_inversion.0.8.0.1.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="139"/></proof>
      </goal>
      <goal name="VC head_bv_to_int_inversion.0.8.0.1.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cond_mod_sum" expl="VC for cond_mod_sum">
 <transf name="eliminate_let" >
  <goal name="VC cond_mod_sum.0" expl="VC for cond_mod_sum">
  <transf name="split_vc" >
   <goal name="VC cond_mod_sum.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
   </goal>
   <goal name="VC cond_mod_sum.0.1" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC cond_mod_sum.0.1.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
    </goal>
    <goal name="VC cond_mod_sum.0.1.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cond_mod_sum.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC cond_mod_sum.0.2.0" expl="precondition">
    <transf name="apply" arg1="set_binary">
     <goal name="VC cond_mod_sum.0.2.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC cond_mod_sum.0.2.0.0.0" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="132"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cond_mod_sum.0.3" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="VC cond_mod_sum.0.3.0" expl="postcondition">
    <transf name="rewrite" arg1="bv_to_int_sum">
     <goal name="VC cond_mod_sum.0.3.0.0" expl="postcondition">
     <transf name="replace" arg1="(length (make_bv_m bvx n))" arg2="n" arg3="in" arg4="H">
      <goal name="VC cond_mod_sum.0.3.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(length (make_bv_m bvx n))" arg2="n">
       <goal name="VC cond_mod_sum.0.3.0.0.0.0" expl="postcondition">
       <transf name="split_all_full" >
        <goal name="VC cond_mod_sum.0.3.0.0.0.0.0" expl="postcondition">
        <transf name="split_vc" >
         <goal name="VC cond_mod_sum.0.3.0.0.0.0.0.0" expl="postcondition">
         <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cond_mod_sum.0.3.0.0.0.1" expl="equality hypothesis">
       <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="133"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cond_mod_sum.0.3.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="0.22" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cond_mod_sum.0.3.1" expl="postcondition">
    <transf name="rewrite" arg1="bv_to_int_sum">
     <goal name="VC cond_mod_sum.0.3.1.0" expl="postcondition">
     <transf name="replace" arg1="(ind_isum
     (fun (k:int) -&gt;
       (getbv (make_bv_m bvx n) @ k)
       * power 2 ((length (make_bv_m bvx n) - 1) - k))
     0 (length (make_bv_m bvx n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (bvx @ k1) 2) @ k) * power 2 ((n - 1) - k))
   0 n)">
      <goal name="VC cond_mod_sum.0.3.1.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H">
       <goal name="VC cond_mod_sum.0.3.1.0.0.0" expl="postcondition">
       <transf name="apply" arg1="ind_isum_eq_gen">
        <goal name="VC cond_mod_sum.0.3.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC cond_mod_sum.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cond_mod_sum.0.3.1.0.0.0.1" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC cond_mod_sum.0.3.1.0.0.0.1.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="131"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cond_mod_sum.0.3.1.0.0.0.2" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC cond_mod_sum.0.3.1.0.0.0.2.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="131"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cond_mod_sum.0.3.1.0.1" expl="equality hypothesis">
      <transf name="apply" arg1="ind_isum_eq_gen">
       <goal name="VC cond_mod_sum.0.3.1.0.1.0" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC cond_mod_sum.0.3.1.0.1.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC cond_mod_sum.0.3.1.0.1.0.0.0" expl="apply premises">
         <transf name="replace" arg1="(length (make_bv_m bvx n) - 1)" arg2="(n-1)">
          <goal name="VC cond_mod_sum.0.3.1.0.1.0.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
          </goal>
          <goal name="VC cond_mod_sum.0.3.1.0.1.0.0.0.1" expl="equality hypothesis">
          <proof prover="4" obsolete="true"><result status="valid" time="0.35" steps="137"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cond_mod_sum.0.3.1.0.1.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC cond_mod_sum.0.3.1.0.1.1.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cond_mod_sum.0.3.1.0.1.2" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC cond_mod_sum.0.3.1.0.1.2.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.24" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cond_mod_sum_gen" expl="VC for cond_mod_sum_gen">
 <transf name="split_vc" >
  <goal name="VC cond_mod_sum_gen.0" expl="postcondition">
  <transf name="apply" arg1="cond_mod_sum">
   <goal name="VC cond_mod_sum_gen.0.0" expl="apply premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cond_mod_sum_gen.1" expl="postcondition">
  <transf name="rewrite" arg1="H">
   <goal name="VC cond_mod_sum_gen.1.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cond_mod_sum_inversion" expl="VC for cond_mod_sum_inversion">
 <transf name="eliminate_let" >
  <goal name="VC cond_mod_sum_inversion.0" expl="VC for cond_mod_sum_inversion">
  <transf name="split_vc" >
   <goal name="VC cond_mod_sum_inversion.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="129"/></proof>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="133"/></proof>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.2" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC cond_mod_sum_inversion.0.2.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="133"/></proof>
    </goal>
    <goal name="VC cond_mod_sum_inversion.0.2.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.3" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="VC cond_mod_sum_inversion.0.3.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC cond_mod_sum_inversion.0.3.0.0" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.70"/></proof>
     </goal>
     <goal name="VC cond_mod_sum_inversion.0.3.0.1" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="2.23"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.4" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="135"/></proof>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.5" expl="precondition">
   <transf name="split_vc" >
    <goal name="VC cond_mod_sum_inversion.0.5.0" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="135"/></proof>
    </goal>
    <goal name="VC cond_mod_sum_inversion.0.5.1" expl="precondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.6" expl="precondition">
   <transf name="apply" arg1="set_binary">
    <goal name="VC cond_mod_sum_inversion.0.6.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC cond_mod_sum_inversion.0.6.0.0" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="2.10"/></proof>
     </goal>
     <goal name="VC cond_mod_sum_inversion.0.6.0.1" expl="apply premises">
     <proof prover="3" obsolete="true"><result status="valid" time="1.93"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.7" expl="postcondition">
   <transf name="rewrite" arg1="H2">
    <goal name="VC cond_mod_sum_inversion.0.7.0" expl="postcondition">
    <transf name="replace" arg1="(ind_isum
     (fun (k:int) -&gt;
       (getbv (make_bv_m f n) @ ((length (make_bv_m f n) - k) - 1))
       * power 2 ((length (make_bv_m f n) - 1) - k))
     0 (length (make_bv_m f n)))" arg2="(ind_isum
   (fun (k:int) -&gt;
     ((fun (k1:int) -&gt; mod (f @ ((n - k1) - 1)) 2) @ k)
     * power 2 ((n - 1) - k))
   0 n)">
     <goal name="VC cond_mod_sum_inversion.0.7.0.0" expl="postcondition">
     <transf name="rewrite" arg1="H">
      <goal name="VC cond_mod_sum_inversion.0.7.0.0.0" expl="postcondition">
      <transf name="apply" arg1="ind_isum_eq_gen">
       <goal name="VC cond_mod_sum_inversion.0.7.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cond_mod_sum_inversion.0.7.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cond_mod_sum_inversion.0.7.0.0.0.1" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="137"/></proof>
       </goal>
       <goal name="VC cond_mod_sum_inversion.0.7.0.0.0.2" expl="apply premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="137"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cond_mod_sum_inversion.0.7.0.1" expl="equality hypothesis">
     <transf name="apply" arg1="ind_isum_eq_gen">
      <goal name="VC cond_mod_sum_inversion.0.7.0.1.0" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC cond_mod_sum_inversion.0.7.0.1.0.0" expl="apply premises">
       <transf name="compute_specified" >
        <goal name="VC cond_mod_sum_inversion.0.7.0.1.0.0.0" expl="apply premises">
        <proof prover="4" obsolete="true"><result status="valid" time="0.59" steps="143"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cond_mod_sum_inversion.0.7.0.1.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="137"/></proof>
      </goal>
      <goal name="VC cond_mod_sum_inversion.0.7.0.1.2" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cond_mod_sum_inversion.0.8" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC cond_mod_sum_inversion.0.8.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cond_mod_sum_inversion_gen" expl="VC for cond_mod_sum_inversion_gen">
 <transf name="split_vc" >
  <goal name="VC cond_mod_sum_inversion_gen.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC cond_mod_sum_inversion_gen.0.0" expl="postcondition">
   <transf name="apply" arg1="cond_mod_sum_inversion1">
    <goal name="VC cond_mod_sum_inversion_gen.0.0.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC cond_mod_sum_inversion_gen.0.0.0.0" expl="apply premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="129"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cond_mod_sum_inversion_gen.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC cond_mod_sum_inversion_gen.1.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ht_inv_decomp_mod" expl="VC for ht_inv_decomp_mod">
 <transf name="split_vc" >
  <goal name="VC ht_inv_decomp_mod.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="137"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="139"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.2" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="139"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.3" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="140"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.4" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="140"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.5" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="140"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.6" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.41" steps="142"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.7" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="140"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.8" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.27" steps="142"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod.9" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.39" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ht_inv_decomp_mod_rev" expl="VC for ht_inv_decomp_mod_rev">
 <transf name="split_vc" >
  <goal name="VC ht_inv_decomp_mod_rev.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="137"/></proof>
  </goal>
  <goal name="VC ht_inv_decomp_mod_rev.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC ht_inv_decomp_mod_rev.1.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.15" steps="137"/></proof>
   </goal>
   <goal name="VC ht_inv_decomp_mod_rev.1.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ht_inv_decomp_mod_rev.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC ht_inv_decomp_mod_rev.2.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="137"/></proof>
   </goal>
   <goal name="VC ht_inv_decomp_mod_rev.2.1" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ht_inv_decomp_mod_rev.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.36" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ht_inv_decomp_mod_bv_gen" expl="VC for ht_inv_decomp_mod_bv_gen">
 <transf name="split_vc" >
  <goal name="VC ht_inv_decomp_mod_bv_gen.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_to_int_ext">
 <goal name="VC bv_to_int_zero" expl="VC for bv_to_int_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_zero.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="VC bv_to_int_zero.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_null">
    <goal name="VC bv_to_int_zero.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.12" steps="95"/></proof>
    </goal>
    <goal name="VC bv_to_int_zero.0.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bv_to_int_zero.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.16" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_all_one" expl="VC for bv_to_int_all_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_all_one.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="101"/></proof>
  </goal>
  <goal name="VC bv_to_int_all_one.1" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.12" steps="102"/></proof>
  </goal>
  <goal name="VC bv_to_int_all_one.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="102"/></proof>
  </goal>
  <goal name="VC bv_to_int_all_one.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC bv_to_int_all_one.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_one">
    <goal name="VC bv_to_int_all_one.3.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bv_to_int_all_one.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.33"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_all_one.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="101"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_all_one.3.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC bv_to_int_all_one.3.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC bv_to_int_all_one.3.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_isum_re">
      <goal name="VC bv_to_int_all_one.3.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC bv_to_int_all_one.3.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC bv_to_int_all_one.3.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H4">
         <goal name="VC bv_to_int_all_one.3.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="4"><result status="valid" time="0.26" steps="105"/></proof>
         </goal>
         <goal name="VC bv_to_int_all_one.3.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.12" steps="103"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_all_one.3.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.22" steps="103"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_all_one.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_to_int_all_one.4.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.11" steps="95"/></proof>
   </goal>
   <goal name="VC bv_to_int_all_one.4.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.09" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_all_one.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="VC bv_to_int_all_one.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_bin_rev_z">
    <goal name="VC bv_to_int_all_one.5.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="( ind_isum (fun (l:int) -&gt; (getbv x @ ((length x - 1) - l)) * power 2 l) 0
  (length x))" arg2="(ind_isum (fun (k:int) -&gt; (getbv x @ ((n - 1) - k)) * power_ 2 k) 0 n)">
     <goal name="VC bv_to_int_all_one.5.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="VC bv_to_int_all_one.5.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
      <goal name="VC bv_to_int_all_one.5.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bv_to_int_all_one.5.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC bv_to_int_all_one.5.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.18" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bv_to_int_all_one.5.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.11" steps="97"/></proof>
      </goal>
      <goal name="VC bv_to_int_all_one.5.0.0.1.2" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.09" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_all_one.5.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="97"/></proof>
    </goal>
    <goal name="VC bv_to_int_all_one.5.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.20" steps="99"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_zero_gen" expl="VC for bv_to_int_zero_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_zero_gen.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="bv_to_int_zero" arg2="x,n">
   <goal name="VC bv_to_int_zero_gen.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC bv_to_int_zero_gen.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.11" steps="95"/></proof>
    </goal>
    <goal name="VC bv_to_int_zero_gen.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.11" steps="95"/></proof>
    </goal>
    <goal name="VC bv_to_int_zero_gen.0.0.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.12" steps="102"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_zero_gen_rev" expl="VC for bv_to_int_zero_gen_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_zero_gen_rev.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(getbv x i &lt;&gt; 0)">
   <goal name="VC bv_to_int_zero_gen_rev.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(getbv x i = 1)">
    <goal name="VC bv_to_int_zero_gen_rev.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.48"/></proof>
    </goal>
    <goal name="VC bv_to_int_zero_gen_rev.0.0.1" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="( 1 &lt;= bv_to_int x )">
     <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
      <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_isum_trans" arg2="(fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)),0,i,(length x)">
       <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(1&lt;= ind_isum
        (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)) i
        (length x))">
         <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
          <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="( 1 +0  &lt;= (((getbv x @ i) * power 2 ((length x - 1) - i))
      + ind_isum
        (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)) (
        i + 1) (length x)))">
            <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="leq_trans_add">
             <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(1*1 &lt;= ((getbv x @ i) * power 2 ((length x - 1) - i)))">
              <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="compat_int_order_mult">
               <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.10" steps="107"/></proof>
               </goal>
               <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.26" steps="109"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.09" steps="109"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="ind_isum_pos">
              <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.11" steps="107"/></proof>
              </goal>
              <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.33"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="1.48"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.09" steps="107"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(0+1
  &lt;= (ind_isum (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k))
      0 i
      + ind_isum
        (fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)) i
        (length x)))">
          <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="leq_trans_add">
           <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ind_isum_pos">
            <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.13" steps="109"/></proof>
            </goal>
            <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.36"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.66"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.0.1.1" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="4.52"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC bv_to_int_zero_gen_rev.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.09" steps="107"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_zero_gen_rev.0.0.1.1" expl="true case (postcondition)" proved="true">
     <proof prover="4"><result status="valid" time="0.10" steps="105"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_zero_gen_rev.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="103"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_all_one_gen" expl="VC for bv_to_int_all_one_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_int_all_one_gen.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_int_all_one_gen_rev" expl="VC for bv_to_int_all_one_gen_rev">
 <transf name="split_vc" >
  <goal name="VC bv_to_int_all_one_gen_rev.0" expl="assertion">
  <transf name="rewrite" arg1="H">
   <goal name="VC bv_to_int_all_one_gen_rev.0.0" expl="assertion">
   <transf name="instantiate" arg1="bv_to_int_all_one" arg2="(make_bv (fun (_:int) -&gt; 1) n),n">
    <goal name="VC bv_to_int_all_one_gen_rev.0.0.0" expl="assertion">
    <transf name="rewrite" arg1="Hinst">
     <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.0" expl="assertion">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="149"/></proof>
     </goal>
     <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.1" expl="rewrite premises">
     <proof prover="4" obsolete="true"><result status="valid" time="0.30" steps="149"/></proof>
     </goal>
     <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.2" expl="rewrite premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.2.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="149"/></proof>
      </goal>
      <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.2.1" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
      </goal>
      <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.2.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.20" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.3" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.3.0" expl="rewrite premises">
      <transf name="rewrite" arg1="assert_make_bv">
       <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.3.0.0" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="156"/></proof>
       </goal>
       <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.3.0.1" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.3.0.1.0" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.56"/></proof>
        </goal>
        <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.3.0.1.1" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bv_to_int_all_one_gen_rev.0.0.0.3.0.2" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.31" steps="153"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_all_one_gen_rev.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.16" steps="145"/></proof>
  </goal>
  <goal name="VC bv_to_int_all_one_gen_rev.2" expl="assertion">
  <transf name="assert" arg1="(int_to_bv (bv_to_int x) n  = int_to_bv (bv_to_int (make_bv (fun (_:int) -&gt; 1) n)) n )">
   <goal name="VC bv_to_int_all_one_gen_rev.2.0" expl="asserted formula">
   <transf name="rewrite" arg1="H3">
    <goal name="VC bv_to_int_all_one_gen_rev.2.0.0" expl="asserted formula" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC bv_to_int_all_one_gen_rev.2.0.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.32" steps="151"/></proof>
    </goal>
    <goal name="VC bv_to_int_all_one_gen_rev.2.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="151"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_all_one_gen_rev.2.1" expl="assertion">
   <transf name="rewrite" arg1="int_to_bv_to_int_gen" arg2="in" arg3="h">
    <goal name="VC bv_to_int_all_one_gen_rev.2.1.0" expl="assertion">
    <transf name="rewrite" arg1="int_to_bv_to_int_gen" arg2="in" arg3="h">
     <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
     <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.1.0" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="0.69"/></proof>
      </goal>
      <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.1.1" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="0.86"/></proof>
      </goal>
      <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.1.2" expl="rewrite premises">
      <proof prover="3" obsolete="true"><result status="valid" time="0.62"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.2" expl="rewrite premises">
     <transf name="rewrite" arg1="make_bv_length">
      <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.2.0" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.34" steps="153"/></proof>
      </goal>
      <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.2.1" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.66"/></proof>
      </goal>
      <goal name="VC bv_to_int_all_one_gen_rev.2.1.0.2.2" expl="rewrite premises">
      <proof prover="4" obsolete="true"><result status="valid" time="0.19" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_int_all_one_gen_rev.2.1.1" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.33" steps="153"/></proof>
    </goal>
    <goal name="VC bv_to_int_all_one_gen_rev.2.1.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="153"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_int_all_one_gen_rev.3" expl="postcondition">
  <transf name="rewrite" arg1="H4">
   <goal name="VC bv_to_int_all_one_gen_rev.3.0" expl="postcondition">
   <transf name="rewrite" arg1="assert_make_bv">
    <goal name="VC bv_to_int_all_one_gen_rev.3.0.0" expl="postcondition">
    <proof prover="4" obsolete="true"><result status="valid" time="0.28" steps="157"/></proof>
    </goal>
    <goal name="VC bv_to_int_all_one_gen_rev.3.0.1" expl="rewrite premises" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC bv_to_int_all_one_gen_rev.3.0.2" expl="rewrite premises">
    <proof prover="4" obsolete="true"><result status="valid" time="0.18" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_int_all_one_gen_rev.3.1" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.17" steps="155"/></proof>
   </goal>
   <goal name="VC bv_to_int_all_one_gen_rev.3.2" expl="rewrite premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.29" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
