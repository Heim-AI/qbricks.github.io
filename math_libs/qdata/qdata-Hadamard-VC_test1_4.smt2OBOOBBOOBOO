(set-logic AUFNIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort t 0)

(declare-fun t1 () ty)

(declare-fun tzero () t)

(declare-fun tone () t)

(declare-fun prefix_mndt (t) t)

(declare-fun infix_sldt (t t) t)

(declare-fun infix_pldt (t t) t)

(declare-fun infix_asdt (t t) t)

(declare-fun infix_lseqdt (t t) Bool)

(declare-fun prefix_mnas (Real) Real)

(declare-fun infix_lseqas (Real Real) Bool)

;; Refl
  (assert (forall ((x Real)) (infix_lseqas x x)))

;; Trans
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (infix_lseqas x y) (=> (infix_lseqas y z) (infix_lseqas x z)))))

;; Comm
  (assert (forall ((x t) (y t)) (= (infix_asdt x y) (infix_asdt y x))))

;; NonTrivialRing
  (assert (not (= tzero tone)))

(declare-fun inv (t) t)

;; div_def
  (assert
  (forall ((x t) (y t))
  (=> (not (= y tzero)) (= (infix_sldt x y) (infix_asdt x (inv y))))))

;; absorbinf_zero
  (assert (forall ((x t)) (= (infix_asdt x tzero) tzero)))

(declare-fun real_part (t) Real)

(declare-fun im_part (t) Real)

(declare-fun real_ (t) Bool)

;; real__def
  (assert (forall ((x t)) (= (real_ x) (= (im_part x) 0.0))))

;; Inf_eq_def
  (assert
  (forall ((x t) (y t))
  (= (infix_lseqdt x y)
  (or
  (and (real_ x) (and (real_ y) (infix_lseqas (real_part x) (real_part y))))
  (= x y)))))

OAOAOBOOBOO
;; zeroLessOne
  (assert (infix_lseqdt tzero tone))

(declare-fuAOn set (ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

;; infix ==_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (=> (infix_eqeq a s1 s2) (forall ((x uni)) (= (mem a x s1) (mem a x s2))))
  (=> (forall ((x uni)) (=> (sort a x) (= (mem a x s1) (mem a x s2))))
  (infix_eqeq a s1 s2))))))

(declare-fun infix_mngt (ty ty) ty)

(declare-fun infix_at (ty ty uni uni) uni)

;; infix @_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort b (infix_at b a x x1)))))

(declare-fun abs1 (Int) Int)

;; abs_def
  (assert
  (forall ((x Int)) (ite (<= 0 x) (= (abs1 x) x) (= (abs1 x) (- x)))))

(declare-fun cpower (t Int) t)

;; Cpower_zero
  (assert (forall ((i t)) (= (cpower i 0) tone)))

;; Cpower_plus_one
  (assert
  (forall ((i t))
  (forall ((n Int)) (= (cpower i n) (infix_asdt i (cpower i (- n 1)))))))

(declare-fun squarert_two () t)

;; squarertTwo
  (assert (= (cpower squarert_two 2) (infix_pldt tone tone)))

;; coeffs
  (assert
  (= (infix_sldt (prefix_mndt tone) squarert_two) (prefix_mndt
                                                  (infix_sldt tone
                                                  squarert_two))))

(declare-fun is_binary ((Array Int Int) Int Int) Bool)

(declare-fun t2tb ((Array Int Int)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int Int))) (sort (infix_mngt int int) (t2tb x))))

(declare-fun tb2t (uni) (Array Int Int))

;; BridgeL
  (assert
  (forall ((i (Array Int Int)))
  (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni)) (! (= (t2tb (tb2t j)) j) :pattern ((t2tb (tb2t j))) )))

(declare-fun t2tb1 (Int) uni)

;; t2tb_sort
  (assert (forall ((x Int)) (sort int (t2tb1 x))))

(declare-fun tb2t1 (uni) Int)

;; BridgeL
  (assert
  (forall ((i Int)) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb1 (tb2t1 j)) j) :pattern ((t2tb1 (tb2t1 j))) )))

;; is_binary_def
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (= (is_binary t2 i j)
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (and (<= 0 (tb2t1 (infix_at int int (t2tb t2) (t2tb1 k))))
  (< (tb2t1 (infix_at int int (t2tb t2) (t2tb1 k))) 2)))))))

(declare-fun bvlength ((Array Int Int) Int) Bool)

;; bvlength_def
  (assert
  (forall ((bv1 (Array Int Int)) (i Int))
  (= (bvlength bv1 i) (is_binary bv1 1 (+ i 1)))))

(declare-fun length ((Array Int Int)) Int)

(declare-fun make_bv ((Array Int Int) Int) (Array Int Int))

(declare-fun bin_and (Int Int) Int)

(declare-fun bin_andv ((Array Int Int) (Array Int Int)) (Array Int Int))

(declare-fun fc ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)) (i Int))
  (= (tb2t1 (infix_at int int (t2tb (fc bv1 bv2)) (t2tb1 i))) (bin_and
                                                              (tb2t1
                                                              (infix_at 
                                                              int int
                                                              (t2tb bv1)
                                                              (t2tb1 i)))
                                                              (tb2t1
                                                              (infix_at 
                                                              int int
                                                              (t2tb bv2)
                                                              (t2tb1 i)))))))

;; bin_andv_spec
  (assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)))
  (=> (= (length bv1) (length bv2))
  (and (= (length (bin_andv bv1 bv2)) (length bv1))
  (and (= (bin_andv bv1 bv2) (make_bv (fc bv1 bv2) (length bv1)))
  (and (bvlength (bin_andv bv1 bv2) (length bv1))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i (length (bin_andv bv1 bv2))))
  (= (tb2t1 (infix_at int int (t2tb (bin_andv bv1 bv2)) (t2tb1 i))) (ite 
                                                                    (and
                                                                    (= 
                                                                    (tb2t1
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb
                                                                    bv1)
                                                                    (t2tb1 i))) 1)
                                                                    (= 
                                                                    (tb2t1
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb
                                                                    bv2)
                                                                    (t2tb1 i))) 1))
                                                                    1 0))))))))))

(assert
;; VC_test1
 ;; File "qdata/../qdata.mlw", line 889, characters 15-20
  (not false))
(check-sat)
