(set-logic AUFNIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2: real arithmetic
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-fun bool () ty)

(declare-fun match_bool (ty Bool uni uni) uni)

;; match_bool_sort
  (assert
  (forall ((a ty))
  (forall ((x Bool) (x1 uni) (x2 uni)) (sort a (match_bool a x x1 x2)))))

;; match_bool_True
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni)) (=> (sort a z) (= (match_bool a true z z1) z)))))

;; match_bool_False
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni))
  (=> (sort a z1) (= (match_bool a false z z1) z1)))))

(declare-fun index_bool (Bool) Int)

;; index_bool_True
  (assert (= (index_bool true) 0))

;; index_bool_False
  (assert (= (index_bool false) 1))

;; bool_inversion
  (assert (forall ((u Bool)) (or (= u true) (= u false))))

(declare-sort tuple0 0)

(declare-fun tuple01 () ty)

(declare-fun Tuple0 () tuple0)

;; tuple0_inversion
  (assert (forall ((u tuple0)) (= u Tuple0)))

(declare-fun infix_eqeq (ty uni uni) Bool)

;; infix ==_spec
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni))
  (=> (sort a a1) (=> (sort a b) (= (infix_eqeq a a1 b) (= a1 b)))))))

;; assert_equal
  (assert true)

;; goal_comm
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni))
  (=> (sort a a1) (=> (sort a b) (=> (= a1 b) (= b a1)))))))

(declare-sort complex 0)

(declare-fun complex1 () ty)

(declare-fun t2tb (complex) uni)

;; t2tb_sort
  (assert (forall ((x complex)) (sort complex1 (t2tb x))))

(declare-fun tb2t (uni) complex)

;; BridgeL
  (assert
  (forall ((i complex)) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort complex1 j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb (tb2t j))) )))

;; teq_spec
  (assert
  (forall ((x complex) (y complex))
  (= (infix_eqeq complex1 (t2tb x) (t2tb y)) (= x y))))

(declare-fun c_zero () complex)

(declare-fun c_one () complex)

(declare-fun prefix_mndt (complex) complex)

(declare-fun infix_pldt (complex complex) complex)

(declare-fun infix_asdt (complex complex) complex)

(declare-fun inv (complex) complex)

;; Assoc
  (assert
  (forall ((x complex) (y complex) (z complex))
  (= (infix_pldt (infix_pldt x y) z) (infix_pldt x (infix_pldt y z)))))

;; Unit_def_l
  (assert (forall ((x complex)) (= (infix_pldt c_zero x) x)))

;; Unit_def_r
  (assert (forall ((x complex)) (= (infix_pldt x c_zero) x)))

;; Inv_def_l
  (assert (forall ((x complex)) (= (infix_pldt (prefix_mndt x) x) c_zero)))

;; Inv_def_r
  (assert (forall ((x complex)) (= (infix_pldt x (prefix_mndt x)) c_zero)))

;; Comm
  (assert
  (forall ((x complex) (y complex)) (= (infix_pldt x y) (infix_pldt y x))))

;; Assoc
  (assert
  (forall ((x complex) (y complex) (z complex))
  (= (infix_asdt (infix_asdt x y) z) (infix_asdt x (infix_asdt y z)))))

;; Mul_distr_l
  (assert
  (forall ((x complex) (y complex) (z complex))
  (= (infix_asdt x (infix_pldt y z)) (infix_pldt (infix_asdt x y)
                                     (infix_asdt x z)))))

;; Mul_distr_r
  (assert
  (forall ((x complex) (y complex) (z complex))
  (= (infix_asdt (infix_pldt y z) x) (infix_pldt (infix_asdt y x)
                                     (infix_asdt z x)))))

;; Comm
  (assert
  (forall ((x complex) (y complex)) (= (infix_asdt x y) (infix_asdt y x))))

;; Unitary
  (assert (forall ((x complex)) (= (infix_asdt c_one x) x)))

;; NonTrivialRing
  (assert (not (= c_zero c_one)))

;; Inverse
  (assert
  (forall ((x complex))
  (=> (not (= x c_zero)) (= (infix_asdt x (inv x)) c_one))))

(declare-fun infix_mn (complex complex) complex)

;; infix -_def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_mn x y) (infix_pldt x (prefix_mndt y)))))

(declare-fun infix_sl (complex complex) complex)

;; infix /_def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_sl x y) (infix_asdt x (inv y)))))

;; add_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= z c_zero))
  (= (infix_sl (infix_pldt x y) z) (infix_pldt (infix_sl x z) (infix_sl y z))))))

;; sub_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= z c_zero))
  (= (infix_sl (infix_mn x y) z) (infix_mn (infix_sl x z) (infix_sl y z))))))

;; neg_div
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= y c_zero))
  (= (infix_sl (prefix_mndt x) y) (prefix_mndt (infix_sl x y))))))

;; assoc_mul_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= z c_zero))
  (= (infix_sl (infix_asdt x y) z) (infix_asdt x (infix_sl y z))))))

;; assoc_div_mul
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (and (not (= y c_zero)) (not (= z c_zero)))
  (= (infix_sl (infix_sl x y) z) (infix_sl x (infix_asdt y z))))))

;; assoc_div_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (and (not (= y c_zero)) (not (= z c_zero)))
  (= (infix_sl x (infix_sl y z)) (infix_sl (infix_asdt x z) y)))))

(declare-fun infix_mndt (complex complex) complex)

;; infix -._def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_mndt x y) (infix_pldt x (prefix_mndt y)))))

(declare-fun infix_sldt (complex complex) complex)

;; infix /._def
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= y c_zero)) (= (infix_sldt x y) (infix_asdt x (inv y))))))

;; infix /._spec
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= y c_zero)) (= (infix_sldt x y) (infix_asdt x (inv y))))))

;; add_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (not (= z 0.0)) (= (/ (+ x y) z) (+ (/ x z) (/ y z))))))

;; sub_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (not (= z 0.0)) (= (/ (- x y) z) (- (/ x z) (/ y z))))))

;; neg_div
  (assert
  (forall ((x Real) (y Real))
  (=> (not (= y 0.0)) (= (/ (- x) y) (- (/ x y))))))

;; assoc_mul_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (not (= z 0.0)) (= (/ (* x y) z) (* x (/ y z))))))

;; assoc_div_mul
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (and (not (= y 0.0)) (not (= z 0.0))) (= (/ (/ x y) z) (/ x (* y z))))))

;; assoc_div_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (and (not (= y 0.0)) (not (= z 0.0))) (= (/ x (/ y z)) (/ (* x z) y)))))

;; CompatOrderMult
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (<= x y) (=> (<= 0.0 z) (<= (* x z) (* y z))))))

(declare-fun infix_slas (Real Real) Real)

;; infix /*_def
  (assert
  (forall ((x Real) (y Real))
  (=> (not (= y 0.0)) (= (infix_slas x y) (/ x y)))))

(declare-fun t2tb1 (Real) uni)

;; t2tb_sort
  (assert (forall ((x Real)) (sort real (t2tb1 x))))

(declare-fun tb2t1 (uni) Real)

;; BridgeL
  (assert
  (forall ((i Real)) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb1 (tb2t1 j)) j) :pattern ((t2tb1 (tb2t1 j))) )))

;; infix =*_spec
  (assert
  (forall ((x Real) (y Real))
  (= (infix_eqeq real (t2tb1 x) (t2tb1 y)) (= x y))))

(declare-fun infix_lsgtas (Real Real) Bool)

;; infix <>*_def
  (assert
  (forall ((x Real) (y Real))
  (= (infix_lsgtas x y) (not (infix_eqeq real (t2tb1 x) (t2tb1 y))))))

;; infix <>*_spec
  (assert (forall ((x Real) (y Real)) (= (infix_lsgtas x y) (not (= x y)))))

(declare-fun infix_mnas (Real Real) Real)

;; infix -*_def
  (assert (forall ((x Real) (y Real)) (= (infix_mnas x y) (+ x (- y)))))

(declare-fun infix_lsas (Real Real) Bool)

;; infix <*_def
  (assert
  (forall ((x Real) (y Real))
  (= (infix_lsas x y) (and (<= x y) (infix_lsgtas x y)))))

;; CompatOrderMult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (=> (<= x y) (=> (<= 0 z) (<= (* x z) (* y z))))))

(declare-fun from_int (Int) Real)

;; Zero
  (assert (= (from_int 0) 0.0))

;; One
  (assert (= (from_int 1) 1.0))

;; Add
  (assert
  (forall ((x Int) (y Int))
  (= (from_int (+ x y)) (+ (from_int x) (from_int y)))))

;; Sub
  (assert
  (forall ((x Int) (y Int))
  (= (from_int (- x y)) (- (from_int x) (from_int y)))))

;; Mul
  (assert
  (forall ((x Int) (y Int))
  (= (from_int (* x y)) (* (from_int x) (from_int y)))))

;; Neg
  (assert (forall ((x Int)) (= (from_int (- x)) (- (from_int x)))))

;; Injective
  (assert
  (forall ((x Int) (y Int)) (=> (= (from_int x) (from_int y)) (= x y))))

;; Monotonic
  (assert
  (forall ((x Int) (y Int)) (=> (<= x y) (<= (from_int x) (from_int y)))))

(declare-fun from_int1 (Int) Real)

;; from_int_spec
  (assert (forall ((x Int)) (= (from_int1 x) (from_int x))))

;; Zero
  (assert (= (from_int1 0) 0.0))

;; Add
  (assert
  (forall ((x Int) (y Int))
  (= (from_int1 (+ x y)) (+ (from_int1 x) (from_int1 y)))))

;; One
  (assert (= (from_int1 1) 1.0))

;; Sub
  (assert
  (forall ((x Int) (y Int))
  (= (from_int1 (- x y)) (infix_mnas (from_int1 x) (from_int1 y)))))

;; mul_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (<= 0 y) (= (from_int1 (* x y)) (* (from_int1 x) (from_int1 y))))))

;; mul
  (assert
  (forall ((x Int) (y Int))
  (=> (<= 0 y) (= (from_int1 (* x y)) (* (from_int1 x) (from_int1 y))))))

;; mul_rev
  (assert
  (forall ((x Int) (y Int))
  (=> (<= 0 y) (= (* (from_int1 x) (from_int1 y)) (from_int1 (* x y))))))

;; neg
  (assert (forall ((x Int)) (= (from_int1 (- x)) (- (from_int1 x)))))

;; injective
  (assert
  (forall ((x Int) (y Int)) (=> (= (from_int1 x) (from_int1 y)) (= x y))))

;; Monotonic
  (assert
  (forall ((x Int) (y Int)) (=> (<= x y) (<= (from_int1 x) (from_int1 y)))))

;; positive_inv
  (assert
  (forall ((x Real))
  (=> (infix_lsas 0.0 x) (infix_lsas 0.0 (infix_slas 1.0 x)))))

;; r_zeroLessOne
  (assert (<= 0.0 1.0))

;; r_compatOrderAdd
  (assert
  (forall ((x Real) (y Real) (z Real)) (=> (<= x y) (<= (+ x z) (+ y z)))))

;; r_compatOrderMult
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (<= x y) (=> (<= 0.0 z) (<= (* x z) (* y z))))))

;; inv_order
  (assert
  (forall ((a Real) (b Real))
  (=> (infix_lsas 0.0 a)
  (=> (infix_lsas 0.0 b) (=> (<= a b) (<= (/ 1.0 b) (/ 1.0 a)))))))

;; inv_strict_order
  (assert
  (forall ((a Real) (b Real))
  (=> (infix_lsas 0.0 a)
  (=> (infix_lsas 0.0 b)
  (=> (infix_lsas a b) (infix_lsas (/ 1.0 b) (/ 1.0 a)))))))

;; invol_neg
  (assert (forall ((a complex)) (= (prefix_mndt (prefix_mndt a)) a)))

;; injective_neg
  (assert
  (forall ((a complex) (b complex))
  (=> (= (prefix_mndt a) (prefix_mndt b)) (= a b))))

;; find_opposite
  (assert
  (forall ((a complex) (b complex)) (=> (= (infix_mndt a b) c_zero) (= a b))))

;; add_opposite
  (assert (forall ((a complex)) (= (infix_pldt a (prefix_mndt a)) c_zero)))

;; opposite
  (assert (forall ((a complex)) (= (infix_mndt a a) c_zero)))

;; mult_num
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= c c_zero))
  (= (infix_sldt (infix_asdt a b) c) (infix_asdt a (infix_sldt b c))))))

;; div_as_mult_inv
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= b c_zero))
  (= (infix_sldt a b) (infix_asdt a (infix_sldt c_one b))))))

;; div_rev
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= b c_zero))
  (= (infix_asdt a (infix_sldt c_one b)) (infix_sldt a b)))))

;; mult_div_num
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= c c_zero))
  (= (infix_asdt (infix_sldt a c) b) (infix_sldt (infix_asdt a b) c)))))

;; mult_denom
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= c c_zero))
  (=> (not (= b c_zero))
  (= (infix_sldt a (infix_asdt b c)) (infix_asdt (infix_sldt a b)
                                     (infix_sldt c_one c)))))))

;; mult_simpl
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= c c_zero))
  (=> (not (= b c_zero))
  (= (infix_sldt (infix_asdt a b) (infix_asdt c b)) (infix_sldt a c))))))

;; dic_simpl
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= c c_zero))
  (=> (not (= b c_zero))
  (= (infix_asdt (infix_sldt a (infix_asdt c b)) b) (infix_sldt a c))))))

;; simpl_with_c_one
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= a c_zero))
  (=> (not (= b c_zero))
  (= (infix_asdt (infix_sldt a b) (infix_sldt c_one a)) (infix_sldt c_one b))))))

;; add_op
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a1 (prefix_mndt a2)) (= (infix_pldt a1 a2) c_zero))))

;; mult_eq_t
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt a2 b2))))))

;; mult_eq_t_rev
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt b2 a2))))))

;; mult_comm
  (assert
  (forall ((a complex) (b complex)) (= (infix_asdt a b) (infix_asdt b a))))

;; mult_assoc
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt (infix_asdt a b) c) (infix_asdt a (infix_asdt b c)))))

;; mult_abc_to_acb
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt (infix_asdt a b) c) (infix_asdt (infix_asdt a c) b))))

;; zero_mult_t
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a1 c_zero) (= (infix_asdt a1 a2) c_zero))))

;; mult_zero_t
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a1 c_zero) (= (infix_asdt a2 a1) c_zero))))

;; mult_one_t
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a2 c_one) (= (infix_asdt a1 a2) a1))))

;; add_eq_t
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt a2 b2))))))

;; add_eq_t_rev
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt b2 a2))))))

;; substr_eq_t
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_mndt a1 b1) (infix_mndt a2 b2))))))

(declare-fun im () complex)

;; im_Def
  (assert (= (infix_asdt im im) (prefix_mndt c_one)))

(declare-fun r_to_c (Real) complex)

;; r_to_c_zero
  (assert (= (r_to_c 0.0) c_zero))

;; r_to_c_one
  (assert (= (r_to_c 1.0) c_one))

;; r_to_c_add
  (assert
  (forall ((i Real) (j Real))
  (= (infix_pldt (r_to_c i) (r_to_c j)) (r_to_c (+ i j)))))

;; r_to_c_add_rev
  (assert
  (forall ((i Real) (j Real))
  (= (r_to_c (+ i j)) (infix_pldt (r_to_c i) (r_to_c j)))))

;; r_to_c_opp
  (assert (forall ((i Real)) (= (r_to_c (- i)) (prefix_mndt (r_to_c i)))))

;; r_to_c_div
  (assert
  (forall ((i Real) (j Real))
  (=> (not (= j 0.0))
  (= (r_to_c (infix_slas i j)) (infix_sldt (r_to_c i) (r_to_c j))))))

;; r_to_c_mult
  (assert
  (forall ((i Real) (j Real))
  (= (infix_asdt (r_to_c i) (r_to_c j)) (r_to_c (* i j)))))

;; r_to_c_mult_rev
  (assert
  (forall ((i Real) (j Real))
  (= (r_to_c (* i j)) (infix_asdt (r_to_c i) (r_to_c j)))))

;; r_to_c_sub
  (assert
  (forall ((i Real) (j Real))
  (= (infix_mndt (r_to_c i) (r_to_c j)) (r_to_c (infix_mnas i j)))))

(declare-fun real_part (complex) Real)

(declare-fun im_part (complex) Real)

;; Real_part_add
  (assert
  (forall ((i complex) (j complex))
  (= (real_part (infix_pldt i j)) (+ (real_part i) (real_part j)))))

;; Im_part_add
  (assert
  (forall ((i complex) (j complex))
  (= (im_part (infix_pldt i j)) (+ (im_part i) (im_part j)))))

;; Real_part_opposite
  (assert
  (forall ((i complex)) (= (real_part (prefix_mndt i)) (- (real_part i)))))

;; Im_part_opposite
  (assert
  (forall ((i complex)) (= (im_part (prefix_mndt i)) (- (im_part i)))))

;; Complex_decomp
  (assert
  (forall ((i complex))
  (= i (infix_pldt (r_to_c (real_part i))
       (infix_asdt im (r_to_c (im_part i)))))))

;; Unic_decomp
  (assert
  (forall ((i complex))
  (forall ((x Real) (y Real))
  (=> (= i (infix_pldt (r_to_c x) (infix_asdt im (r_to_c y))))
  (and (= x (real_part i)) (= y (im_part i)))))))

(declare-fun real_ (complex) Bool)

;; real__def
  (assert
  (forall ((x complex))
  (= (real_ x) (infix_eqeq real (t2tb1 (im_part x)) (t2tb1 0.0)))))

(declare-fun pure_im_ (complex) Bool)

;; pure_im__def
  (assert
  (forall ((x complex))
  (= (pure_im_ x) (infix_eqeq real (t2tb1 (real_part x)) (t2tb1 0.0)))))

;; unic_decomp
  (assert
  (forall ((i complex) (x Real) (y Real))
  (=> (= i (infix_pldt (r_to_c x) (infix_asdt im (r_to_c y))))
  (and (= x (real_part i)) (= y (im_part i))))))

;; r_to_c_real
  (assert (forall ((x complex)) (=> (real_ x) (= x (r_to_c (real_part x))))))

;; real_r_to_c
  (assert (forall ((x Real)) (real_ (r_to_c x))))

;; r_to_c_pure_im
  (assert
  (forall ((x complex))
  (=> (pure_im_ x) (= x (infix_asdt im (r_to_c (im_part x)))))))

;; decomp_mult
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a b) (infix_pldt
                      (infix_mndt
                      (infix_asdt (r_to_c (real_part a))
                      (r_to_c (real_part b)))
                      (infix_asdt (r_to_c (im_part a)) (r_to_c (im_part b))))
                      (infix_asdt im
                      (infix_pldt
                      (infix_asdt (r_to_c (real_part a))
                      (r_to_c (im_part b)))
                      (infix_asdt (r_to_c (real_part b))
                      (r_to_c (im_part a)))))))))

(declare-fun t_real_part (complex) complex)

;; t_real_part_def
  (assert (forall ((x complex)) (= (t_real_part x) (r_to_c (real_part x)))))

;; t_real_part_spec
  (assert (forall ((x complex)) (real_ (t_real_part x))))

;; t_real_part_inv
  (assert
  (forall ((x complex))
  (= (t_real_part (prefix_mndt x)) (prefix_mndt (t_real_part x)))))

(declare-fun t_im_part (complex) complex)

;; t_im_part_def
  (assert (forall ((x complex)) (= (t_im_part x) (r_to_c (im_part x)))))

;; t_im_part_spec
  (assert (forall ((x complex)) (real_ (t_im_part x))))

;; t_im_part_inv
  (assert
  (forall ((x complex))
  (= (t_im_part (prefix_mndt x)) (prefix_mndt (t_im_part x)))))

;; decomp_mult_as_reals
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a b) (infix_pldt
                      (infix_mndt
                      (infix_asdt (t_real_part a) (t_real_part b))
                      (infix_asdt (t_im_part a) (t_im_part b)))
                      (infix_asdt im
                      (infix_pldt (infix_asdt (t_real_part a) (t_im_part b))
                      (infix_asdt (t_real_part b) (t_im_part a))))))))

;; decomp_mult_real_part
  (assert
  (forall ((a complex) (b complex))
  (= (real_part (infix_asdt a b)) (infix_mnas (* (real_part a) (real_part b))
                                  (* (im_part a) (im_part b))))))

;; decomp_mult_im_part
  (assert
  (forall ((a complex) (b complex))
  (= (im_part (infix_asdt a b)) (+ (* (real_part a) (im_part b)) (* (real_part
                                                                    b) 
  (im_part a))))))

;; t_mult_real
  (assert
  (forall ((a complex) (b complex))
  (= (t_real_part (infix_asdt a b)) (infix_mndt
                                    (infix_asdt (t_real_part a)
                                    (t_real_part b))
                                    (infix_asdt (t_im_part a) (t_im_part b))))))

;; t_mult_im
  (assert
  (forall ((a complex) (b complex))
  (= (t_im_part (infix_asdt a b)) (infix_pldt
                                  (infix_asdt (t_real_part a) (t_im_part b))
                                  (infix_asdt (t_im_part a) (t_real_part b))))))

;; mult_real_real
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (and
  (and
  (= (infix_asdt a b) (infix_asdt (r_to_c (real_part a))
                      (r_to_c (real_part b))))
  (= (infix_asdt (r_to_c (real_part a)) (r_to_c (real_part b))) (r_to_c
                                                                (* (real_part
                                                                   a) 
                                                                (real_part b)))))
  (and (= (real_part (infix_asdt a b)) (* (real_part a) (real_part b)))
  (= (im_part (infix_asdt a b)) 0.0)))))))

;; complex_squared
  (assert
  (forall ((a complex))
  (and
  (= (infix_asdt a a) (infix_pldt
                      (infix_mndt
                      (infix_asdt (t_real_part a) (t_real_part a))
                      (infix_asdt (t_im_part a) (t_im_part a)))
                      (infix_asdt
                      (infix_asdt (infix_asdt im (infix_pldt c_one c_one))
                      (t_real_part a)) (t_im_part a))))
  (and
  (= (t_real_part (infix_asdt a a)) (infix_mndt
                                    (infix_asdt (t_real_part a)
                                    (t_real_part a))
                                    (infix_asdt (t_im_part a) (t_im_part a))))
  (= (t_im_part (infix_asdt a a)) (infix_asdt
                                  (infix_asdt (infix_pldt c_one c_one)
                                  (t_real_part a)) (t_im_part a)))))))

;; complex_real_squared
  (assert
  (forall ((a complex))
  (=> (real_ a)
  (= (infix_asdt a a) (infix_asdt (t_real_part a) (t_real_part a))))))

;; decomp_div
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= b c_zero))
  (= (infix_sldt a b) (infix_pldt
                      (infix_sldt (t_real_part (infix_asdt a b))
                      (infix_asdt b b))
                      (infix_asdt im
                      (infix_sldt (t_im_part (infix_asdt a b))
                      (infix_asdt b b))))))))

;; decomp_div_real
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ b)
  (=> (not (= b c_zero))
  (= (infix_sldt a b) (infix_pldt
                      (infix_sldt (infix_asdt (t_real_part a) b)
                      (infix_asdt b b))
                      (infix_asdt im
                      (infix_sldt (infix_asdt (t_im_part a) b)
                      (infix_asdt b b)))))))))

;; complex_prod_fact
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a b) (infix_pldt (infix_asdt (r_to_c (real_part a)) b)
                      (infix_asdt (infix_asdt im (r_to_c (im_part a))) b)))))

;; non_zero_prod_pre
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= a c_zero))
  (=> (= (infix_asdt a b) c_zero)
  (and (= (im_part b) (real_part b)) (= (real_part b) 0.0))))))

;; non_zero_prod
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= a c_zero))
  (=> (not (= b c_zero)) (not (= (infix_asdt a b) c_zero))))))

;; minus_c_one
  (assert
  (forall ((a complex))
  (= (prefix_mndt a) (infix_asdt (prefix_mndt c_one) a))))

;; mult_neg_l
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (prefix_mndt a) b) (prefix_mndt (infix_asdt a b)))))

;; mult_neg_r
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a (prefix_mndt b)) (prefix_mndt (infix_asdt a b)))))

;; neg_neg_out
  (assert (forall ((a complex)) (= (prefix_mndt (prefix_mndt a)) a)))

;; div_neg_l
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= b c_zero))
  (= (infix_sldt (prefix_mndt a) b) (prefix_mndt (infix_sldt a b))))))

;; eq_to_real
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a) (=> (real_ b) (=> (= a b) (= (real_part a) (real_part b)))))))

;; eq_by_real
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a) (=> (real_ b) (=> (= (real_part a) (real_part b)) (= a b))))))

;; div_neg_r
  (assert
  (forall ((a complex) (b complex))
  (=> (not (= b c_zero))
  (= (infix_sldt a (prefix_mndt b)) (prefix_mndt (infix_sldt a b))))))

;; invadd
  (assert
  (forall ((i complex))
  (= (prefix_mndt i) (infix_asdt (prefix_mndt c_one) i))))

;; noc_zeroAdd
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= x c_zero)) (not (= (infix_pldt x y) y)))))

;; Absorbing_zero
  (assert
  (forall ((a complex) (b complex))
  (= (= (infix_asdt a b) c_zero) (=> (not (= a c_zero)) (= b c_zero)))))

;; real_part_add
  (assert
  (forall ((i complex) (j complex))
  (= (real_part (infix_pldt i j)) (+ (real_part i) (real_part j)))))

;; mult_im_rev
  (assert (forall ((a complex)) (= (infix_asdt a im) (infix_asdt im a))))

;; im_im_elim
  (assert
  (forall ((a complex))
  (= (infix_asdt im (infix_asdt im a)) (prefix_mndt a))))

;; im_im_fact
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (infix_asdt im a) (infix_asdt im b)) (prefix_mndt
                                                      (infix_asdt a b)))))

;; minus_minus_fact
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (prefix_mndt a) (prefix_mndt b)) (infix_asdt a b))))

;; minus_minus_add
  (assert
  (forall ((a complex) (b complex))
  (= (infix_pldt (prefix_mndt a) (prefix_mndt b)) (prefix_mndt
                                                  (infix_pldt a b)))))

;; minus_minus_add_rev
  (assert
  (forall ((a complex) (b complex))
  (= (prefix_mndt (infix_pldt a b)) (infix_pldt (prefix_mndt a)
                                    (prefix_mndt b)))))

;; minus_out_left
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (prefix_mndt a) b) (prefix_mndt (infix_asdt a b)))))

;; minus_out_right
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a (prefix_mndt b)) (prefix_mndt (infix_asdt a b)))))

;; minus_in_left
  (assert
  (forall ((a complex) (b complex))
  (= (prefix_mndt (infix_asdt a b)) (infix_asdt (prefix_mndt a) b))))

;; minus_in_right
  (assert
  (forall ((a complex) (b complex))
  (= (prefix_mndt (infix_asdt a b)) (infix_asdt a (prefix_mndt b)))))

;; minus_add_out_left
  (assert
  (forall ((a complex) (b complex))
  (= (infix_pldt (prefix_mndt a) b) (prefix_mndt
                                    (infix_pldt a (prefix_mndt b))))))

;; minus_as_add_opp
  (assert
  (forall ((a complex) (b complex))
  (= (infix_mndt a b) (infix_pldt a (prefix_mndt b)))))

;; minus_add_out_right
  (assert
  (forall ((a complex) (b complex))
  (= (infix_pldt a (prefix_mndt b)) (prefix_mndt
                                    (infix_pldt (prefix_mndt a) b)))))

;; minus_add_in
  (assert
  (forall ((a complex) (b complex))
  (= (prefix_mndt (infix_pldt a b)) (infix_pldt (prefix_mndt a)
                                    (prefix_mndt b)))))

;; minus_add_out
  (assert
  (forall ((a complex) (b complex))
  (= (infix_pldt (prefix_mndt a) (prefix_mndt b)) (prefix_mndt
                                                  (infix_pldt a b)))))

;; minus_eq
  (assert
  (forall ((a complex) (b complex))
  (=> (= a b) (= (prefix_mndt a) (prefix_mndt b)))))

;; im_out_right
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (infix_asdt im a) b) (infix_asdt im (infix_asdt a b)))))

;; im_out_left
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a (infix_asdt im b)) (infix_asdt im (infix_asdt a b)))))

;; im_part_add
  (assert
  (forall ((i complex) (j complex))
  (= (im_part (infix_pldt i j)) (+ (im_part i) (im_part j)))))

;; injective_real_part
  (assert
  (forall ((i complex) (j complex))
  (=> (not (= (real_part i) (real_part j))) (not (= i j)))))

;; injective_im_part
  (assert
  (forall ((i complex) (j complex))
  (=> (not (= (im_part i) (im_part j))) (not (= i j)))))

;; minus_distr_four
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_asdt a b)
     (infix_asdt (infix_asdt (prefix_mndt b) c) d)) (infix_asdt
                                                    (infix_mndt a
                                                    (infix_asdt c d)) b))))

;; complex_decomp
  (assert
  (forall ((i complex))
  (= i (infix_pldt (r_to_c (real_part i))
       (infix_asdt im (r_to_c (im_part i)))))))

;; simpl_frac
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= y c_zero)) (= (infix_sldt (infix_asdt x y) y) x))))

;; simpl_frac_
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= y c_zero))
  (=> (not (= z c_zero))
  (= (infix_sldt (infix_asdt x y) (infix_asdt z y)) (infix_sldt x z))))))

;; fact_frac
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= z c_zero))
  (= (infix_sldt (infix_asdt x y) z) (infix_asdt x (infix_sldt y z))))))

;; fact_frac_rev
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= z c_zero))
  (= (infix_asdt x (infix_sldt y z)) (infix_sldt (infix_asdt x y) z)))))

;; mult_sym
  (assert
  (forall ((x complex) (y complex)) (= (infix_asdt x y) (infix_asdt y x))))

;; inv_mult
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= x c_zero))
  (=> (not (= y c_zero))
  (= (infix_asdt (infix_sldt c_one x) (infix_sldt c_one y)) (infix_sldt 
                                                            c_one
                                                            (infix_asdt x y)))))))

;; div_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= y c_zero))
  (=> (not (= z c_zero))
  (= (infix_sldt (infix_sldt x y) z) (infix_sldt x (infix_asdt y z)))))))

;; div_div_rev
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= y c_zero))
  (=> (not (= z c_zero))
  (= (infix_sldt x (infix_asdt y z)) (infix_sldt (infix_sldt x y) z))))))

;; involutive_inv
  (assert
  (forall ((a complex))
  (=> (not (= a c_zero)) (= (infix_sldt c_one (infix_sldt c_one a)) a))))

;; twice
  (assert
  (forall ((i complex))
  (= (infix_asdt (infix_pldt c_one c_one) i) (infix_pldt i i))))

;; twice_half
  (assert
  (= (infix_asdt (infix_pldt c_one c_one)
     (infix_sldt c_one (infix_pldt c_one c_one))) c_one))

;; half_plus_half
  (assert
  (forall ((i complex))
  (= (infix_pldt (infix_sldt i (infix_pldt c_one c_one))
     (infix_sldt i (infix_pldt c_one c_one))) i)))

;; decomp_inv_real
  (assert
  (forall ((a complex))
  (=> (real_ a)
  (=> (not (= a c_zero))
  (and (= (infix_sldt c_one a) (infix_sldt c_one (t_real_part a)))
  (and (real_ (infix_sldt c_one a))
  (and
  (= (t_real_part (infix_sldt c_one a)) (infix_sldt c_one (t_real_part a)))
  (= (real_part (infix_sldt c_one a)) (infix_slas 1.0 (real_part a))))))))))

;; mult_div_comm
  (assert
  (forall ((x complex) (y complex) (z complex) (t complex))
  (=> (not (= z c_zero))
  (=> (not (= t c_zero))
  (= (infix_sldt (infix_asdt x y) (infix_asdt z t)) (infix_asdt
                                                    (infix_sldt x z)
                                                    (infix_sldt y t)))))))

;; mult_div_comm_rev
  (assert
  (forall ((x complex) (y complex) (z complex) (t complex))
  (=> (not (= z c_zero))
  (=> (not (= t c_zero))
  (= (infix_asdt (infix_sldt x z) (infix_sldt y t)) (infix_sldt
                                                    (infix_asdt x y)
                                                    (infix_asdt z t)))))))

(declare-fun infix_lseqdt (complex complex) Bool)

;; infix <=._def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_lseqdt x y)
  (or (and (real_ x) (and (real_ y) (<= (real_part x) (real_part y))))
  (infix_eqeq complex1 (t2tb x) (t2tb y))))))

(declare-fun infix_lsdt (complex complex) Bool)

;; infix <._def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_lsdt x y)
  (and (infix_lseqdt x y) (not (infix_eqeq complex1 (t2tb x) (t2tb y)))))))

(declare-fun infix_gtdt (complex complex) Bool)

;; infix >._def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_gtdt x y)
  (and (infix_lseqdt y x) (not (infix_eqeq complex1 (t2tb x) (t2tb y)))))))

;; leq_left_real
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt a b) (=> (real_ a) (real_ b)))))

;; leq_right_real
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt a b) (=> (real_ b) (real_ a)))))

;; inf_left_real
  (assert (forall ((a complex) (b complex)) (=> (infix_lsdt a b) (real_ a))))

;; inf_right_real
  (assert (forall ((a complex) (b complex)) (=> (infix_lsdt a b) (real_ b))))

;; inf_from_real
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (infix_lsas (real_part a) (real_part b)) (infix_lsdt a b))))))

;; inf_to_real
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lsdt a b) (infix_lsas (real_part a) (real_part b)))))

;; leq_left_not_real_a
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt a b) (=> (not (real_ a)) (= a b)))))

;; leq_left_not_real_b
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt a b) (=> (not (real_ b)) (= a b)))))

;; Refl
  (assert (forall ((x complex)) (infix_lseqdt x x)))

;; Trans
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt x y) (=> (infix_lseqdt y z) (infix_lseqdt x z)))))

;; Antisymm
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lseqdt x y) (=> (infix_lseqdt y x) (= x y)))))

;; Refl
  (assert (forall ((x complex)) (infix_lseqdt x x)))

;; Trans
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt y x) (=> (infix_lseqdt z y) (infix_lseqdt z x)))))

;; Antisymm
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lseqdt y x) (=> (infix_lseqdt x y) (= x y)))))

;; Trans
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y) (=> (infix_lsdt y z) (infix_lsdt x z)))))

;; Asymm
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lsdt x y) (not (infix_lsdt y x)))))

;; Trans
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_gtdt x y) (=> (infix_gtdt y z) (infix_gtdt x z)))))

;; Asymm
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_gtdt x y) (not (infix_gtdt y x)))))

;; r_to_c_inf
  (assert
  (forall ((i Real) (j Real))
  (= (infix_lseqdt (r_to_c i) (r_to_c j)) (<= i j))))

;; reali_is_its_real_part
  (assert (forall ((a complex)) (=> (real_ a) (= a (r_to_c (real_part a))))))

;; inf_from_r
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b) (=> (<= (real_part a) (real_part b)) (infix_lseqdt a b))))))

;; strict_inf_from_r
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (infix_lsas (real_part a) (real_part b)) (infix_lsdt a b))))))

;; positive_inv_t
  (assert
  (forall ((x complex))
  (=> (infix_lsdt c_zero x) (infix_lsdt c_zero (infix_sldt c_one x)))))

(declare-fun pi1 () complex)

;; pi_def
  (assert (infix_lsdt (r_to_c 3.0) pi1))

;; real_pi
  (assert (real_ pi1))

;; pi_sup_one
  (assert (infix_lsdt c_one pi1))

;; pi_sup_zero
  (assert (infix_lsdt c_zero pi1))

;; compat_order_mult
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lseqdt c_zero z) (infix_lseqdt (infix_asdt x z)
  (infix_asdt y z)))))))))

;; compat_order_add
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z) (infix_lseqdt (infix_pldt x z) (infix_pldt y z))))))))

;; compat_order_substr
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z) (infix_lseqdt (infix_mndt x z) (infix_mndt y z))))))))

;; compat_inf_mult
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_lsdt (infix_asdt x z) (infix_asdt y z)))))))))

;; transitive_infeq
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt a b) (=> (infix_lseqdt b c) (infix_lseqdt a c)))))

;; transitive_infeq_inf
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt a b) (=> (infix_lsdt b c) (infix_lsdt a c)))))

;; transitive_inf_infeq
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt a b) (=> (infix_lseqdt b c) (infix_lsdt a c)))))

;; transitive_inf
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt a b) (=> (infix_lsdt b c) (infix_lsdt a c)))))

;; pi_sup_ttwo
  (assert (infix_lsdt (infix_pldt c_one c_one) pi1))

;; transitive_leq_inv_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (real_ c)
  (=> (infix_lseqdt a b)
  (=> (infix_lseqdt b (infix_sldt c_one c))
  (=> (infix_lseqdt c_one c) (and (infix_lseqdt a b) (infix_lseqdt b c_one))))))))))

;; compat_inf_mult_left
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_lsdt (infix_asdt z x) (infix_asdt z y)))))))))

;; compat_inf_mult_both
  (assert
  (forall ((x complex) (y complex) (z complex) (t complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (and (infix_lsdt c_zero z) (infix_lsdt z t))
  (=> (infix_lsdt c_zero y) (infix_lsdt (infix_asdt z x) (infix_asdt t y))))))))))

;; compat_inf_add
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z) (infix_lsdt (infix_pldt x z) (infix_pldt y z))))))))

;; compat_inf_add_left
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z) (infix_lsdt (infix_pldt z x) (infix_pldt z y))))))))

;; compat_inf_add_both
  (assert
  (forall ((x complex) (y complex) (z complex) (t complex))
  (=> (infix_lsdt x y)
  (=> (infix_lsdt z t) (infix_lsdt (infix_pldt x z) (infix_pldt y t))))))

;; compat_inf_substr
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z) (infix_lsdt (infix_mndt x z) (infix_mndt y z))))))))

;; real_inv
  (assert
  (forall ((x complex))
  (=> (real_ x) (=> (not (= x c_zero)) (real_ (infix_sldt c_one x))))))

;; compat_order_mult_rev
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z)
  (=> (infix_lseqdt (infix_asdt x z) (infix_asdt y z)) (infix_lseqdt x y))))))))

;; compat_order_mult_left
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lseqdt c_zero z) (infix_lseqdt (infix_asdt z x)
  (infix_asdt z y)))))))))

;; strict_compat_order_mult
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_lsdt (infix_asdt x z) (infix_asdt y z)))))))))

;; strict_compat_order_mult_left
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_lsdt (infix_asdt z x) (infix_asdt z y)))))))))

;; complete_order_real
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (not (= x y)) (=> (not (infix_lsdt x y)) (infix_lsdt y x)))))))

;; complete_order_real_
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (not (infix_lsdt x y)) (=> (not (infix_lsdt y x)) (= y x)))))))

;; compat_order_mult_both
  (assert
  (forall ((x complex) (y complex) (z complex) (t complex))
  (=> (and (infix_lseqdt c_zero x) (infix_lseqdt x y))
  (=> (and (infix_lseqdt c_zero z) (infix_lseqdt z t)) (infix_lseqdt
  (infix_asdt z x) (infix_asdt t y))))))

;; inf_to_non_sup_eq
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y) (=> (infix_lsdt x y) (not (infix_lseqdt y x)))))))

;; sup_eq_to_non_inf
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y) (=> (infix_lseqdt y x) (not (infix_lsdt x y)))))))

;; sup_to_inf
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x) (=> (real_ y) (=> (infix_gtdt x y) (infix_lsdt y x))))))

;; inf_to_sup
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x) (=> (real_ y) (=> (infix_lsdt x y) (infix_gtdt y x))))))

;; sup_to_non_inf_eq
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y) (=> (infix_gtdt x y) (not (infix_lseqdt x y)))))))

;; inf_eq_to_non_sup
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y) (=> (infix_lseqdt x y) (not (infix_gtdt x y)))))))

;; non_inf_eq_to_sup
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y) (=> (not (infix_lseqdt x y)) (infix_gtdt x y))))))

;; non_sup_toinf_eq
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y) (=> (not (infix_gtdt x y)) (infix_lseqdt x y))))))

;; real_mult
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x) (=> (real_ y) (real_ (infix_asdt x y))))))

;; real_add
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x) (=> (real_ y) (real_ (infix_pldt x y))))))

;; inv_pos
  (assert
  (forall ((x complex))
  (=> (real_ x)
  (=> (infix_lsdt c_zero x) (infix_lsdt c_zero (infix_sldt c_one x))))))

;; lower_over_cons
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt c_zero c)
  (=> (infix_lseqdt c_zero a)
  (=> (infix_lseqdt a b) (infix_lseqdt (infix_sldt a c) (infix_sldt b c)))))))

;; eq_to_leq_t
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a) (=> (= a b) (infix_lseqdt a b)))))

;; real_minus
  (assert (forall ((a complex)) (=> (real_ a) (real_ (prefix_mndt a)))))

;; compat_r_to_c_infeq
  (assert
  (forall ((a Real) (b Real))
  (=> (<= a b) (infix_lseqdt (r_to_c a) (r_to_c b)))))

;; compat_r_to_c_inf
  (assert
  (forall ((a Real) (b Real))
  (=> (infix_lsas a b) (infix_lsdt (r_to_c a) (r_to_c b)))))

;; compat_r_to_c_supeq
  (assert
  (forall ((a Real) (b Real))
  (=> (<= b a) (infix_lseqdt (r_to_c b) (r_to_c a)))))

;; compat_r_to_c_sup
  (assert
  (forall ((a Real) (b Real))
  (=> (infix_lsas b a) (infix_gtdt (r_to_c a) (r_to_c b)))))

;; unic_inv
  (assert
  (forall ((i complex) (j complex))
  (=> (not (= i c_zero)) (=> (= (infix_asdt i j) c_one) (= j (inv i))))))

;; inf_eq_def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_lseqdt x y)
  (or (and (real_ x) (and (real_ y) (<= (real_part x) (real_part y))))
  (= x y)))))

;; inf_minus
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lsdt x y) (infix_lsdt (prefix_mndt y) (prefix_mndt x)))))

;; absorbing_zero
  (assert
  (forall ((a complex) (b complex))
  (=> (= (infix_asdt a b) c_zero)
  (and (=> (not (= a c_zero)) (= b c_zero))
  (=> (not (= b c_zero)) (= a c_zero))))))

;; inf_zero_inv
  (assert
  (forall ((z complex))
  (=> (infix_lsdt c_zero z)
  (and (infix_lsdt c_zero (infix_sldt c_one z)) (infix_lseqdt c_zero
  (infix_sldt c_one z))))))

;; mult_pos
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lseqdt c_zero x)
  (=> (infix_lseqdt c_zero y) (infix_lseqdt c_zero (infix_asdt x y))))))

;; simpl_leq_mult_div
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt (infix_asdt a b) c) (infix_lseqdt a
  (infix_asdt (infix_sldt c_one b) c)))))))

;; mult_leq_c_one_leq
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt c_zero a)
  (=> (and (infix_lseqdt c_zero b) (infix_lseqdt b c_one)) (infix_lseqdt
  (infix_asdt a b) a)))))

;; mult_leq_c_one_leq_gen
  (assert
  (forall ((a complex) (aqt complex) (b complex))
  (=> (infix_lseqdt c_zero a)
  (=> (and (infix_lseqdt c_zero b) (infix_lseqdt b c_one))
  (=> (= a aqt) (infix_lseqdt (infix_asdt a b) aqt))))))

;; mult_leq_c_one
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt c_zero a)
  (=>
  (exists ((c complex)) (and (infix_lseqdt a c) (= b (infix_sldt c_one c))))
  (=> (infix_lsdt c_zero b) (infix_lseqdt (infix_asdt a b) c_one))))))

;; mult_leq_c_one_expl
  (assert
  (forall ((a complex) (b complex) (d complex))
  (=> (infix_lseqdt c_zero a)
  (=> (infix_lseqdt a d)
  (=> (infix_lsdt c_zero d)
  (=> (= b (infix_sldt c_one d)) (infix_lseqdt (infix_asdt a b) c_one)))))))

;; mult_leq_c_one_rev
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt c_zero a)
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt (infix_asdt a b) c_one) (infix_lseqdt a
  (infix_sldt c_one b)))))))

;; simpl_leq_mult
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt a c) (infix_lseqdt (infix_asdt a b) (infix_asdt c b))))))

;; simpl_leq_mult_inv
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt c_zero a)
  (=> (infix_lsdt c_zero b)
  (=> (infix_lsdt c_zero c)
  (=> (infix_lseqdt a (infix_sldt c_one (infix_asdt b c))) (infix_lseqdt
  (infix_asdt a b) (infix_sldt c_one c))))))))

;; mult_to_div_leq
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt (infix_asdt a b) c) (infix_lseqdt a
  (infix_asdt (infix_sldt c_one b) c)))))))

;; mult_div
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lseqdt c_zero x)
  (=> (infix_lsdt c_zero y) (infix_lseqdt c_zero (infix_sldt x y))))))

;; strict_mult_pos
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lsdt c_zero x)
  (=> (infix_lsdt c_zero y) (infix_lsdt c_zero (infix_asdt x y))))))

;; rewrite_supeq
  (assert true)

;; rewrite_sup
  (assert
  (forall ((x complex) (y complex)) (=> (infix_lsdt x y) (infix_gtdt y x))))

;; inv_order_complex
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lsdt c_zero a)
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt a b) (infix_lseqdt (infix_sldt c_one b)
  (infix_sldt c_one a)))))))

;; compat_inv_order
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (and (infix_lsdt c_zero a) (infix_lseqdt a b))
  (=> (infix_lseqdt c (infix_sldt c_one b)) (infix_lseqdt c
  (infix_sldt c_one a))))))

;; leq_by_div_simpl
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt c_zero a)
  (=> (and (infix_lsdt c_zero b) (infix_lseqdt b c)) (infix_lseqdt
  (infix_sldt a c) (infix_sldt a b))))))

;; leq_by_div
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt c_zero a)
  (=> (and (infix_lsdt c_zero b) (infix_lseqdt b c)) (infix_lseqdt
  (infix_sldt a c) (infix_sldt a b))))))

;; inf_def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_lsdt x y)
  (and (real_ x) (and (real_ y) (infix_lsas (real_part x) (real_part y)))))))

;; sup_eq_def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_lseqdt y x)
  (or (and (real_ x) (and (real_ y) (<= (real_part y) (real_part x))))
  (= x y)))))

;; sup_def
  (assert
  (forall ((x complex) (y complex))
  (= (infix_gtdt x y)
  (and (real_ x) (and (real_ y) (infix_lsas (real_part y) (real_part x)))))))

;; assoc_mult_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= z c_zero))
  (= (infix_asdt x (infix_sldt y z)) (infix_sldt (infix_asdt x y) z)))))

;; assoc_mult_div_rev
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (not (= z c_zero))
  (= (infix_sldt (infix_asdt x y) z) (infix_asdt x (infix_sldt y z))))))

;; subst_zero
  (assert (forall ((a complex)) (= (infix_mndt a c_zero) a)))

;; subst_zero_gen
  (assert
  (forall ((a complex) (b complex)) (=> (= b c_zero) (= (infix_mndt a b) a))))

;; transitive_inf_inv_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt a b)
  (=> (infix_lseqdt b (infix_sldt c_one c))
  (=> (infix_lsdt c_one c) (and (infix_lseqdt a b) (infix_lsdt b c_one)))))))

;; infeq_scal_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt a c)
  (=> (infix_lseqdt c_zero b) (infix_lseqdt (infix_asdt a b)
  (infix_asdt c b))))))

;; infeq_scal_l
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt a c)
  (=> (infix_lseqdt c_zero b) (infix_lseqdt (infix_asdt b a)
  (infix_asdt b c))))))

;; transitive_supeq
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt b a) (=> (infix_lseqdt c b) (infix_lseqdt c a)))))

;; transitive_inf_l
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt a b) (=> (infix_lseqdt b c) (infix_lsdt a c)))))

;; transitive_sup_l
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_gtdt a b) (=> (infix_lseqdt c b) (infix_gtdt a c)))))

;; transitive_inf_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt a b) (=> (infix_lsdt b c) (infix_lsdt a c)))))

;; transitive_sup_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt b a) (=> (infix_gtdt b c) (infix_gtdt a c)))))

;; simpl_frac_r
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= x c_zero)) (= (infix_asdt x (infix_sldt y x)) y))))

;; compat_mult_sup_eq_right
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt c_zero a)
  (=> (infix_lseqdt c b) (infix_lseqdt (infix_asdt a c) (infix_asdt a b))))))

;; compat_mult_sup_right
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt c_zero a)
  (=> (infix_gtdt b c) (infix_gtdt (infix_asdt a b) (infix_asdt a c))))))

;; compat_mult_inf_right
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt c_zero a)
  (=> (infix_lsdt b c) (infix_lsdt (infix_asdt a b) (infix_asdt a c))))))

;; infeq_to_supeq
  (assert true)

;; infeq_inv
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt a b) (infix_lseqdt (prefix_mndt b) (prefix_mndt a)))))

;; infeq_inv_add_l
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lseqdt (infix_pldt a c) b)
  (=> (real_ a) (=> (real_ c) (infix_lseqdt a (infix_mndt b c)))))))

;; infeq_inv_add_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (real_ c)
  (=> (infix_lseqdt a (infix_pldt b c)) (infix_lseqdt (infix_mndt a c) b))))))

;; r_to_c_surj
  (assert
  (forall ((x Real) (y Real))
  (=> (not (= x y)) (not (= (r_to_c x) (r_to_c y))))))

;; r_to_c_inf_rev
  (assert
  (forall ((x Real) (y Real))
  (=> (infix_lsas x y) (infix_lsdt (r_to_c x) (r_to_c y)))))

;; div_simpl
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lsdt c_zero a)
  (=> (infix_lsdt c_zero b)
  (= (infix_sldt c_one b) (infix_sldt a (infix_asdt a b)))))))

;; infeq_inv_subs_l
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (real_ c)
  (=> (infix_lseqdt (infix_mndt a c) b) (infix_lseqdt a (infix_pldt b c))))))))

;; infeq_inv_subs_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (real_ c)
  (=> (infix_lseqdt a (infix_mndt b c)) (infix_lseqdt (infix_pldt a c) b)))))))

;; infeq_pos_elim
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (infix_lseqdt c_zero b) (infix_lseqdt a (infix_pldt a b))))))

;; infeq_pos_elim_add
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (real_ c)
  (=> (infix_lseqdt c_zero b)
  (=> (infix_lseqdt c a) (infix_lseqdt c (infix_pldt a b)))))))))

;; supeq_elim_left
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (infix_lseqdt b a) (infix_lseqdt (infix_mndt b a) c_zero))))))

;; sup_elim_left
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_gtdt a b) (infix_gtdt c_zero (infix_mndt b a)))))

;; infeq_elim_left
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (infix_lseqdt a b) (infix_lseqdt c_zero (infix_mndt b a)))))))

;; inf_elim_left
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lsdt a b) (infix_lsdt c_zero (infix_mndt b a)))))

;; t_im_real
  (assert
  (forall ((a complex) (b complex))
  (= (t_im_part (infix_asdt a b)) (infix_pldt
                                  (infix_asdt (t_real_part a) (t_im_part b))
                                  (infix_asdt (t_im_part a) (t_real_part b))))))

;; t_decomp_mult
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a b) (infix_pldt
                      (infix_mndt
                      (infix_asdt (t_real_part a) (t_real_part b))
                      (infix_asdt (t_im_part a) (t_im_part b)))
                      (infix_asdt im
                      (infix_pldt (infix_asdt (t_real_part a) (t_im_part b))
                      (infix_asdt (t_im_part a) (t_real_part b))))))))

;; t_complex_decomp
  (assert
  (forall ((i complex))
  (= i (infix_pldt (t_real_part i) (infix_asdt im (t_im_part i))))))

;; t_unic_decomp
  (assert
  (forall ((i complex) (a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (= i (infix_pldt a (infix_asdt im b)))
  (and (= a (t_real_part i)) (= b (t_im_part i))))))))

;; t_decomp_minus
  (assert
  (forall ((i complex) (a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (= i (infix_mndt a (infix_asdt im b)))
  (and (= a (t_real_part i)) (= (prefix_mndt b) (t_im_part i))))))))

;; real_sum
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x) (=> (real_ y) (real_ (infix_pldt x y))))))

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun infix_eqeq1 (ty uni uni) Bool)

;; infix ==_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (=> (infix_eqeq1 a s1 s2) (forall ((x uni)) (= (mem a x s1) (mem a x s2))))
  (=> (forall ((x uni)) (=> (sort a x) (= (mem a x s1) (mem a x s2))))
  (infix_eqeq1 a s1 s2))))))

;; extensionality
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (=> (sort (set1 a) s1)
  (=> (sort (set1 a) s2) (=> (infix_eqeq1 a s1 s2) (= s1 s2)))))))

(declare-fun subset1 (ty uni uni) Bool)

;; subset_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (=> (subset1 a s1 s2) (forall ((x uni)) (=> (mem a x s1) (mem a x s2))))
  (=> (forall ((x uni)) (=> (sort a x) (=> (mem a x s1) (mem a x s2))))
  (subset1 a s1 s2))))))

;; subset_refl
  (assert (forall ((a ty)) (forall ((s uni)) (subset1 a s s))))

;; subset_trans
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (=> (subset1 a s1 s2) (=> (subset1 a s2 s3) (subset1 a s1 s3))))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_spec
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (and (=> (is_empty a s) (forall ((x uni)) (not (mem a x s))))
  (=> (forall ((x uni)) (=> (sort a x) (not (mem a x s)))) (is_empty a s))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a ty)) (sort (set1 a) (empty a))))

;; empty_def
  (assert (forall ((a ty)) (is_empty a (empty a))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (set1 a) (add a x x1)))))

;; add_spec
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (=> (sort a x)
  (forall ((y uni))
  (=> (sort a y) (= (mem a y (add a x s)) (or (= y x) (mem a y s)))))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (remove a x x1)))))

;; remove_spec
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (=> (sort a x)
  (forall ((y uni))
  (=> (sort a y)
  (= (mem a y (remove a x s)) (and (not (= y x)) (mem a y s)))))))))

;; add_remove
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (=> (sort (set1 a) s) (=> (mem a x s) (= (add a x (remove a x s)) s))))))

;; remove_add
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni)) (= (remove a x (add a x s)) (remove a x s)))))

;; subset_remove
  (assert
  (forall ((a ty)) (forall ((x uni) (s uni)) (subset1 a (remove a x s) s))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (union1 a x x1)))))

;; union_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((x uni))
  (= (mem a x (union1 a s1 s2)) (or (mem a x s1) (mem a x s2)))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (inter a x x1)))))

;; inter_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((x uni))
  (= (mem a x (inter a s1 s2)) (and (mem a x s1) (mem a x s2)))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (set1 a) (diff a x x1)))))

;; diff_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((x uni))
  (= (mem a x (diff a s1 s2)) (and (mem a x s1) (not (mem a x s2))))))))

;; subset_diff
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni)) (subset1 a (diff a s1 s2) s1))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (choose a x)))))

;; choose_spec
  (assert
  (forall ((a ty))
  (forall ((s uni)) (=> (not (is_empty a s)) (mem a (choose a s) s)))))

(declare-fun cardinal (ty uni) Int)

;; cardinal_nonneg
  (assert (forall ((a ty)) (forall ((s uni)) (<= 0 (cardinal a s)))))

;; cardinal_empty
  (assert
  (forall ((a ty))
  (forall ((s uni)) (= (= (cardinal a s) 0) (is_empty a s)))))

;; cardinal_add
  (assert
  (forall ((a ty))
  (forall ((x uni))
  (forall ((s uni))
  (=> (not (mem a x s)) (= (cardinal a (add a x s)) (+ 1 (cardinal a s))))))))

;; cardinal_remove
  (assert
  (forall ((a ty))
  (forall ((x uni))
  (forall ((s uni))
  (=> (mem a x s) (= (cardinal a s) (+ 1 (cardinal a (remove a x s)))))))))

;; cardinal_subset
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (=> (subset1 a s1 s2) (<= (cardinal a s1) (cardinal a s2))))))

;; subset_eq
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (=> (subset1 a s1 s2)
  (=> (= (cardinal a s1) (cardinal a s2)) (infix_eqeq1 a s1 s2))))))

;; cardinal1
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (= (cardinal a s) 1)
  (forall ((x uni)) (=> (sort a x) (=> (mem a x s) (= x (choose a s)))))))))

;; real_diff
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x) (=> (real_ y) (real_ (infix_mndt x y))))))

;; pure_im_sum
  (assert
  (forall ((x complex) (y complex))
  (=> (pure_im_ x) (=> (pure_im_ y) (pure_im_ (infix_pldt x y))))))

;; equal_decomp
  (assert
  (forall ((x complex) (y complex))
  (=> (= (real_part x) (real_part y))
  (=> (= (im_part x) (im_part y)) (= x y)))))

;; t_equal_decomp
  (assert
  (forall ((x complex) (y complex))
  (=> (= (t_real_part x) (t_real_part y))
  (=> (= (t_im_part x) (t_im_part y)) (= x y)))))

;; pure_im_diff
  (assert
  (forall ((x complex) (y complex))
  (=> (pure_im_ x) (=> (pure_im_ y) (pure_im_ (infix_mndt x y))))))

;; real_div
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (not (= y c_zero)) (=> (real_ y) (real_ (infix_sldt x y)))))))

;; mult_im_im
  (assert
  (forall ((a complex) (b complex))
  (=> (pure_im_ a)
  (=> (pure_im_ b)
  (and
  (= (infix_asdt a b) (infix_asdt (infix_asdt im im)
                      (infix_asdt (r_to_c (im_part a)) (r_to_c (im_part b)))))
  (and
  (= (infix_asdt a b) (prefix_mndt (r_to_c (* (im_part a) (im_part b)))))
  (and (= (real_part (infix_asdt a b)) (- (* (im_part a) (im_part b))))
  (= (im_part (infix_asdt a b)) 0.0))))))))

;; mult_real_im
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (pure_im_ b)
  (and
  (= (infix_asdt a b) (infix_asdt im
                      (infix_asdt (r_to_c (real_part a))
                      (r_to_c (im_part b)))))
  (and
  (= (infix_asdt a b) (infix_asdt im (r_to_c (* (real_part a) (im_part b)))))
  (and (= (real_part (infix_asdt a b)) 0.0)
  (= (im_part (infix_asdt a b)) (* (real_part a) (im_part b))))))))))

;; mult_im_real
  (assert
  (forall ((a complex) (b complex))
  (=> (pure_im_ a)
  (=> (real_ b)
  (and
  (= (infix_asdt a b) (infix_asdt im
                      (infix_asdt (r_to_c (im_part a))
                      (r_to_c (real_part b)))))
  (and
  (= (infix_asdt a b) (infix_asdt im (r_to_c (* (im_part a) (real_part b)))))
  (and (= (real_part (infix_asdt a b)) 0.0)
  (= (im_part (infix_asdt a b)) (* (im_part a) (real_part b))))))))))

;; decomp_mult_gen
  (assert
  (forall ((a complex) (b complex))
  (and
  (= (real_part (infix_asdt a b)) (infix_mnas (* (real_part a) (real_part b))
                                  (* (im_part a) (im_part b))))
  (= (im_part (infix_asdt a b)) (+ (* (real_part a) (im_part b)) (* (im_part
                                                                    a) 
  (real_part b)))))))

;; inv_real
  (assert
  (forall ((a complex))
  (=> (not (= a c_zero))
  (=> (real_ a)
  (and (= (real_part (infix_sldt c_one a)) (infix_slas 1.0 (real_part a)))
  (real_ (infix_sldt c_one a)))))))

;; div_real_real
  (assert
  (forall ((a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (not (= b c_zero))
  (= (real_part (infix_sldt a b)) (infix_slas (real_part a) (real_part b))))))))

;; zeroLessOne
  (assert (infix_lseqdt c_zero c_one))

;; compatOrderAdd
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z) (infix_lseqdt (infix_pldt x z) (infix_pldt y z))))))))

;; positive_add
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lseqdt c_zero x)
  (=> (infix_lseqdt c_zero y) (infix_lseqdt c_zero (infix_pldt x y))))))

;; strict_positive_add_l
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lsdt c_zero x)
  (=> (infix_lseqdt c_zero y) (infix_lsdt c_zero (infix_pldt x y))))))

;; strict_compatOrderAdd
  (assert
  (forall ((x complex) (y complex) (z complex) (t complex))
  (=> (infix_lsdt x y)
  (=> (infix_lsdt z t)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (real_ t) (infix_lsdt (infix_pldt x z) (infix_pldt y t))))))))))

;; compat_sup_add
  (assert
  (forall ((x complex) (y complex) (z complex) (t complex))
  (=> (infix_gtdt x y)
  (=> (infix_gtdt z t)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (real_ t) (infix_gtdt (infix_pldt x z) (infix_pldt y t))))))))))

;; compat_supeq_mult
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt y x)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lseqdt c_zero z) (infix_lseqdt (infix_asdt y z)
  (infix_asdt x z)))))))))

;; compat_supeq_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt y x)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_lseqdt (infix_sldt y z) (infix_sldt x z)))))))))

;; compat_infeq_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_lseqdt (infix_sldt x z) (infix_sldt y z)))))))))

;; compat_sup_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_gtdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_gtdt (infix_sldt x z) (infix_sldt y z)))))))))

;; compat_inf_div
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_lsdt (infix_sldt x z) (infix_sldt y z)))))))))

;; positive_prod_itself
  (assert
  (forall ((x complex))
  (=> (real_ x) (infix_lseqdt c_zero (infix_asdt x x)))))

;; strict_positive_prod_itself
  (assert
  (forall ((x complex))
  (=> (real_ x) (=> (not (= x c_zero)) (infix_lsdt c_zero (infix_asdt x x))))))

;; compat_sup_mult
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt y x)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lseqdt c_zero z) (infix_lseqdt (infix_asdt y z)
  (infix_asdt x z)))))))))

;; strict_compat_sup_mult
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_gtdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_gtdt (infix_asdt x z) (infix_asdt y z)))))))))

;; compat_sup_mult_left
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_lseqdt y x)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lseqdt c_zero z) (infix_lseqdt (infix_asdt z y)
  (infix_asdt z x)))))))))

;; strict_compat_sup_mult_left
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (infix_gtdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt c_zero z) (infix_gtdt (infix_asdt z x) (infix_asdt z y)))))))))

;; inv_inf_eq
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lsdt c_zero a)
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt a b) (infix_lseqdt (infix_sldt c_one b)
  (infix_sldt c_one a)))))))

;; inv_sup_eq
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lsdt c_zero a)
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt b a) (infix_lseqdt (infix_sldt c_one a)
  (infix_sldt c_one b)))))))

;; inv_sup
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (and (infix_lsdt c_zero x) (infix_lsdt x y)) (infix_gtdt
  (infix_sldt c_one x) (infix_sldt c_one y)))))))

;; inv_eqinf
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (and (infix_lsdt c_zero x) (infix_lseqdt x y)) (infix_lseqdt
  (infix_sldt c_one y) (infix_sldt c_one x)))))))

;; inv_eqsup
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (and (infix_lseqdt y x) (infix_gtdt y c_zero)) (infix_lseqdt
  (infix_sldt c_one x) (infix_sldt c_one y)))))))

;; inv_inf
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (and (infix_gtdt x y) (infix_gtdt y c_zero)) (infix_lsdt
  (infix_sldt c_one x) (infix_sldt c_one y)))))))

;; inv_neg
  (assert
  (forall ((x complex))
  (=> (real_ x)
  (=> (infix_lsdt x c_zero) (infix_lsdt (infix_sldt c_one x) c_zero)))))

;; lower_inv
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt c_zero a)
  (=> (infix_lseqdt b c) (infix_lseqdt (infix_sldt a c) (infix_sldt a b)))))))

;; lower_inv_
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (infix_lsdt c_zero b)
  (=> (infix_lseqdt c_zero a)
  (=> (infix_lseqdt b c) (infix_lseqdt (infix_sldt a c) (infix_sldt a b)))))))

;; zero_add_t
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a1 c_zero) (= (infix_pldt a1 a2) a2))))

;; add_zero_t
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a2 c_zero) (= (infix_pldt a1 a2) a1))))

;; one_mult_t
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a1 c_one) (= (infix_asdt a1 a2) a2))))

;; one_mult_t_const
  (assert (forall ((a complex)) (= (infix_asdt c_one a) a)))

;; zero_mult_t_const
  (assert (forall ((a complex)) (= (infix_asdt c_zero a) c_zero)))

;; mult_zero_t_const
  (assert (forall ((a complex)) (= (infix_asdt a c_zero) c_zero)))

;; subs_eq
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_mndt a1 b1) (infix_mndt a2 b2))))))

;; subst_itself
  (assert
  (forall ((a1 complex) (a2 complex))
  (=> (= a1 a2) (= (infix_mndt a1 a2) c_zero))))

;; mult_assoc_four
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_asdt (infix_asdt a (infix_asdt b c)) d) (infix_asdt
                                                    (infix_asdt a b)
                                                    (infix_asdt c d)))))

;; mult_assoc_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt a (infix_asdt b c)) (infix_asdt (infix_asdt a b) c))))

;; add_assoc
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_pldt (infix_pldt a b) c) (infix_pldt a (infix_pldt b c)))))

;; add_assoc_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_pldt a (infix_pldt b c)) (infix_pldt (infix_pldt a b) c))))

;; div_mult
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= c c_zero))
  (= (infix_asdt a (infix_sldt b c)) (infix_sldt (infix_asdt a b) c)))))

;; div_mult_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= c c_zero))
  (= (infix_sldt (infix_asdt a b) c) (infix_asdt a (infix_sldt b c))))))

;; triang_p
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (infix_pldt a b) (infix_pldt a b)) (infix_pldt
                                                    (infix_pldt
                                                    (infix_asdt a a)
                                                    (infix_asdt b b))
                                                    (infix_asdt
                                                    (infix_asdt
                                                    (infix_pldt c_one c_one)
                                                    a) b)))))

;; triang_n
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (infix_mndt a b) (infix_mndt a b)) (infix_mndt
                                                    (infix_pldt
                                                    (infix_asdt a a)
                                                    (infix_asdt b b))
                                                    (infix_asdt
                                                    (infix_asdt
                                                    (infix_pldt c_one c_one)
                                                    a) b)))))

;; triang_s
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex) (e complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c)
     (infix_pldt (infix_mndt d b) e)) (infix_pldt (infix_pldt a c)
                                      (infix_pldt d e)))))

;; triang_t
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (infix_pldt a b) (infix_mndt a b)) (infix_mndt
                                                    (infix_asdt a a)
                                                    (infix_asdt b b)))))

;; triang_sr
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex) (e complex))
  (= (infix_pldt (infix_pldt (infix_mndt a b) c)
     (infix_pldt (infix_pldt d b) e)) (infix_pldt (infix_pldt a c)
                                      (infix_pldt d e)))))

;; add_pos
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lseqdt c_zero x)
  (=> (infix_lseqdt c_zero y) (infix_lseqdt c_zero (infix_pldt x y))))))

;; add_pos_strit_l
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lsdt c_zero x)
  (=> (infix_lseqdt c_zero y) (infix_lsdt c_zero (infix_pldt x y))))))

;; add_pos_strit_r
  (assert
  (forall ((x complex) (y complex))
  (=> (infix_lseqdt c_zero x)
  (=> (infix_lsdt c_zero y) (infix_lsdt c_zero (infix_pldt x y))))))

;; modulus_pre_pre
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (and
  (= (infix_pldt (infix_pldt (infix_asdt a b) (infix_asdt c d))
     (infix_pldt (infix_asdt a d) (infix_asdt c b))) (infix_pldt
                                                     (infix_asdt a
                                                     (infix_pldt b d))
                                                     (infix_asdt c
                                                     (infix_pldt b d))))
  (= (infix_pldt (infix_pldt (infix_asdt a b) (infix_asdt c d))
     (infix_pldt (infix_asdt a d) (infix_asdt c b))) (infix_asdt
                                                     (infix_pldt a c)
                                                     (infix_pldt b d))))))

;; modulus_pre
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt
     (infix_pldt (infix_asdt (infix_asdt a b) (infix_asdt a b))
     (infix_asdt (infix_asdt c d) (infix_asdt c d)))
     (infix_pldt (infix_asdt (infix_asdt a d) (infix_asdt a d))
     (infix_asdt (infix_asdt c b) (infix_asdt c b)))) (infix_asdt
                                                      (infix_pldt
                                                      (infix_asdt a a)
                                                      (infix_asdt c c))
                                                      (infix_pldt
                                                      (infix_asdt b b)
                                                      (infix_asdt d d))))))

(declare-fun sqr (Real) Real)

;; sqr_def
  (assert (forall ((x Real)) (= (sqr x) (* x x))))

(declare-fun sqrt (Real) Real)

;; Sqrt_positive
  (assert (forall ((x Real)) (=> (<= 0.0 x) (<= 0.0 (sqrt x)))))

;; Sqrt_square
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqr (sqrt x)) x))))

;; Square_sqrt
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqrt (* x x)) x))))

;; Sqrt_mul
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= 0.0 y)) (= (sqrt (* x y)) (* (sqrt x) (sqrt y))))))

;; Sqrt_le
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= x y)) (<= (sqrt x) (sqrt y)))))

(declare-fun real_sqrt (Real) Real)

;; real_sqrt_spec
  (assert
  (forall ((x Real))
  (=> (<= 0.0 x)
  (and (= (* (real_sqrt x) (real_sqrt x)) x) (= (real_sqrt x) (sqrt x))))))

(declare-fun square_rt (complex) complex)

;; square_rt_def
  (assert
  (forall ((x complex))
  (=> (infix_lseqdt c_zero x)
  (= (square_rt x) (r_to_c (real_sqrt (real_part x)))))))

;; square_rt_spec
  (assert
  (forall ((x complex))
  (=> (infix_lseqdt c_zero x)
  (and (real_ (square_rt x))
  (and (= (infix_asdt (square_rt x) (square_rt x)) x) (infix_lseqdt c_zero
  (square_rt x)))))))

;; square_rt_eq
  (assert
  (forall ((a complex) (b complex))
  (=> (infix_lseqdt c_zero a)
  (=> (infix_lseqdt c_zero b) (=> (= a b) (= (square_rt a) (square_rt b)))))))

;; real_square_rt
  (assert
  (forall ((x complex))
  (=> (real_ x) (=> (infix_lseqdt c_zero x) (real_ (square_rt x))))))

;; pos_square_rt
  (assert
  (forall ((x complex))
  (=> (real_ x)
  (=> (infix_lseqdt c_zero x) (infix_lseqdt c_zero (square_rt x))))))

;; square_rt_square
  (assert
  (forall ((x complex))
  (=> (infix_lseqdt c_zero x) (= (infix_asdt (square_rt x) (square_rt x)) x))))

;; square_rt_infeq
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (and (infix_lseqdt c_zero x) (infix_lseqdt x y)) (infix_lseqdt
  (square_rt x) (square_rt y)))))))

;; square_rt_inf
  (assert
  (forall ((x complex) (y complex))
  (=> (and (infix_lseqdt c_zero x) (infix_lsdt x y)) (infix_lsdt
  (square_rt x) (square_rt y)))))

;; injective_square_rt
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (infix_lseqdt c_zero x)
  (=> (infix_lseqdt c_zero y) (=> (= (square_rt x) (square_rt y)) (= x y))))))))

;; injective_square
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (real_ y)
  (=> (infix_lseqdt c_zero x)
  (=> (infix_lseqdt c_zero y)
  (=> (= (infix_asdt x x) (infix_asdt y y)) (= x y))))))))

;; square_rt_c_one
  (assert (= (square_rt c_one) c_one))

;; square_rt_mult
  (assert
  (forall ((t complex) (tqt complex))
  (=> (real_ t)
  (=> (infix_lseqdt c_zero t)
  (=> (real_ tqt)
  (=> (infix_lseqdt c_zero tqt)
  (= (infix_asdt (square_rt t) (square_rt tqt)) (square_rt
                                                (infix_asdt t tqt)))))))))

;; square_rt_mult_rev
  (assert
  (forall ((t complex) (tqt complex))
  (=> (real_ t)
  (=> (infix_lseqdt c_zero t)
  (=> (real_ tqt)
  (=> (infix_lseqdt c_zero tqt)
  (= (square_rt (infix_asdt t tqt)) (infix_asdt (square_rt t)
                                    (square_rt tqt)))))))))

(declare-fun modulus (complex) complex)

;; modulus_def
  (assert
  (forall ((x complex))
  (= (modulus x) (square_rt
                 (infix_pldt (infix_asdt (t_real_part x) (t_real_part x))
                 (infix_asdt (t_im_part x) (t_im_part x)))))))

;; modulus_spec
  (assert (forall ((x complex)) (infix_lseqdt c_zero (modulus x))))

(declare-fun c_one_modulus (complex) Bool)

;; c_one_modulus_def
  (assert (forall ((x complex)) (= (c_one_modulus x) (= (modulus x) c_one))))

;; modulus_eq
  (assert
  (forall ((x complex) (y complex))
  (=>
  (= (infix_asdt (t_real_part x) (t_real_part x)) (infix_asdt (t_real_part y)
                                                  (t_real_part y)))
  (=>
  (= (infix_asdt (t_im_part x) (t_im_part x)) (infix_asdt (t_im_part y)
                                              (t_im_part y)))
  (= (modulus x) (modulus y))))))

;; modulus_minus
  (assert (forall ((x complex)) (= (modulus (prefix_mndt x)) (modulus x))))

;; square_rt_simpl
  (assert
  (forall ((x complex))
  (=> (infix_lsdt c_zero x)
  (= (infix_asdt x (infix_sldt c_one (square_rt x))) (square_rt x)))))

;; square_rt_simpl_fact
  (assert
  (forall ((x complex) (a complex))
  (=> (infix_lsdt c_zero x)
  (= (infix_asdt (infix_asdt a (infix_sldt c_one (square_rt x))) x) (infix_asdt
                                                                    a
                                                                    (square_rt
                                                                    x))))))

;; square_rt_simpl_mult
  (assert
  (forall ((x complex) (a complex))
  (=> (infix_lsdt c_zero x)
  (= (infix_asdt (infix_asdt (square_rt x) a)
     (infix_sldt c_one (square_rt x))) a))))

;; square_rt_simpl_fact_assoc
  (assert
  (forall ((x complex) (a complex))
  (=> (infix_lsdt c_zero x)
  (= (infix_asdt x (infix_asdt a (infix_sldt c_one (square_rt x)))) (infix_asdt
                                                                    a
                                                                    (square_rt
                                                                    x))))))

;; modulus_itself
  (assert
  (forall ((x complex) (y complex)) (=> (= x y) (= (modulus x) (modulus y)))))

;; modulus_real_pos
  (assert
  (forall ((x complex))
  (=> (real_ x) (=> (infix_lseqdt c_zero x) (= (modulus x) x)))))

;; modulus_real_pos_inv
  (assert
  (forall ((x complex))
  (=> (real_ x) (=> (infix_lseqdt c_zero x) (= (modulus (prefix_mndt x)) x)))))

;; modulus_real_neg
  (assert
  (forall ((x complex))
  (=> (real_ x) (=> (infix_lseqdt x c_zero) (= (modulus x) (prefix_mndt x))))))

;; strict_positive_modulus
  (assert
  (forall ((x complex))
  (=> (not (= x c_zero)) (infix_lsdt c_zero (modulus x)))))

;; not_modulus_zero
  (assert
  (forall ((x complex)) (=> (not (= x c_zero)) (not (= (modulus x) c_zero)))))

;; modulus_real
  (assert (forall ((x complex)) (real_ (modulus x))))

;; t_mult_real_square
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (t_real_part (infix_asdt a b))
     (t_real_part (infix_asdt a b))) (infix_mndt
                                     (infix_pldt
                                     (infix_asdt
                                     (infix_asdt (t_real_part a)
                                     (t_real_part a))
                                     (infix_asdt (t_real_part b)
                                     (t_real_part b)))
                                     (infix_asdt
                                     (infix_asdt (t_im_part a) (t_im_part a))
                                     (infix_asdt (t_im_part b) (t_im_part b))))
                                     (infix_asdt (infix_pldt c_one c_one)
                                     (infix_asdt
                                     (infix_asdt
                                     (infix_asdt (t_real_part a)
                                     (t_real_part b)) (t_im_part a))
                                     (t_im_part b)))))))

;; t_mult_im_square
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (t_im_part (infix_asdt a b)) (t_im_part (infix_asdt a b))) 
  (infix_pldt
  (infix_pldt
  (infix_asdt (infix_asdt (t_real_part a) (t_real_part a))
  (infix_asdt (t_im_part b) (t_im_part b)))
  (infix_asdt (infix_asdt (t_im_part a) (t_im_part a))
  (infix_asdt (t_real_part b) (t_real_part b))))
  (infix_asdt (infix_pldt c_one c_one)
  (infix_asdt
  (infix_asdt (infix_asdt (t_real_part a) (t_real_part b)) (t_im_part a))
  (t_im_part b)))))))

;; mult_modulus_pre
  (assert
  (forall ((a complex) (b complex))
  (= (infix_pldt
     (infix_asdt (t_real_part (infix_asdt a b))
     (t_real_part (infix_asdt a b)))
     (infix_asdt (t_im_part (infix_asdt a b)) (t_im_part (infix_asdt a b)))) 
  (infix_asdt
  (infix_pldt (infix_asdt (t_real_part a) (t_real_part a))
  (infix_asdt (t_im_part a) (t_im_part a)))
  (infix_pldt (infix_asdt (t_real_part b) (t_real_part b))
  (infix_asdt (t_im_part b) (t_im_part b)))))))

;; mult_modulus
  (assert
  (forall ((x complex) (y complex))
  (= (modulus (infix_asdt x y)) (infix_asdt (modulus x) (modulus y)))))

;; mult_modulus_rev
  (assert
  (forall ((x complex) (y complex))
  (= (infix_asdt (modulus x) (modulus y)) (modulus (infix_asdt x y)))))

;; mult_real_modulus
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ x)
  (=> (infix_lseqdt c_zero x)
  (= (modulus (infix_asdt x y)) (infix_asdt x (modulus y)))))))

;; mult_modulus_real
  (assert
  (forall ((x complex) (y complex))
  (=> (real_ y)
  (=> (infix_lseqdt c_zero y)
  (= (modulus (infix_asdt x y)) (infix_asdt (modulus x) y))))))

;; mult_modulus_non_null
  (assert
  (forall ((x complex) (y complex))
  (=> (not (= x c_zero))
  (=> (not (= y c_zero)) (not (= (modulus (infix_asdt x y)) c_zero))))))

;; modulus_to_non_null
  (assert
  (forall ((x complex))
  (=> (infix_lsdt c_zero (modulus x)) (not (= x c_zero)))))

;; mult_c_one_modulus
  (assert
  (forall ((x complex) (y complex))
  (=> (c_one_modulus x)
  (=> (c_one_modulus y) (c_one_modulus (infix_asdt x y))))))

;; modulus_pos
  (assert
  (forall ((x complex))
  (=> (not (= x c_zero)) (infix_lseqdt c_zero (modulus x)))))

;; modulus_infeq
  (assert
  (forall ((x complex) (b complex) (c complex))
  (=> (real_ x)
  (=> (infix_lseqdt b c)
  (=> (infix_lseqdt (modulus x) b) (infix_lseqdt x c))))))

;; modulus_inf
  (assert
  (forall ((x complex) (b complex) (c complex))
  (=> (real_ x)
  (=> (infix_lsdt b c) (=> (infix_lseqdt (modulus x) b) (infix_lsdt x c))))))

;; modulus_diff_rev
  (assert
  (forall ((a complex) (b complex))
  (= (modulus (infix_mndt a b)) (modulus (infix_mndt b a)))))

;; modulus_simpl_leq
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (real_ c)
  (=> (infix_lsdt c_zero c)
  (=> (infix_lseqdt (modulus (infix_asdt a c)) (infix_asdt b c))
  (infix_lseqdt (modulus a) b))))))))

;; modulus_simpl_leq_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (real_ c)
  (=> (infix_lseqdt c_zero c)
  (=> (infix_lseqdt (modulus a) b) (infix_lseqdt (modulus (infix_asdt a c))
  (infix_asdt b c)))))))))

;; div_eq
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2)
  (=> (= b1 b2)
  (=> (not (= b1 c_zero)) (= (infix_sldt a1 b1) (infix_sldt a2 b2)))))))

;; add_eq_inv_t
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt b2 a2))))))

;; mult_eq_inv_t
  (assert
  (forall ((a1 complex) (a2 complex) (b1 complex) (b2 complex))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt b2 a2))))))

;; sum_frac
  (assert
  (forall ((a1 complex) (a2 complex) (b complex))
  (=> (not (= b c_zero))
  (= (infix_pldt (infix_sldt a1 b) (infix_sldt a2 b)) (infix_sldt
                                                      (infix_pldt a1 a2) b)))))

;; sum_frac_rev
  (assert
  (forall ((a1 complex) (a2 complex) (b complex))
  (=> (not (= b c_zero))
  (= (infix_sldt (infix_pldt a1 a2) b) (infix_pldt (infix_sldt a1 b)
                                       (infix_sldt a2 b))))))

(declare-fun infix_mngt (ty ty) ty)

(declare-fun infix_at (ty ty uni uni) uni)

;; infix @_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort b (infix_at b a x x1)))))

(declare-fun filter (ty uni uni) uni)

;; filter_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (filter a x x1)))))

(declare-fun t2tb2 (Bool) uni)

;; t2tb_sort
  (assert (forall ((x Bool)) (sort bool (t2tb2 x))))

(declare-fun tb2t2 (uni) Bool)

;; BridgeL
  (assert
  (forall ((i Bool)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort bool j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; filter_def
  (assert
  (forall ((a ty))
  (forall ((p uni) (u uni))
  (forall ((x uni))
  (= (mem a x (filter a p u))
  (and (= (tb2t2 (infix_at bool a p x)) true) (mem a x u)))))))

;; filter_cardinal
  (assert
  (forall ((a ty))
  (forall ((p uni) (u uni)) (<= (cardinal a (filter a p u)) (cardinal a u)))))

(declare-fun map1 (ty ty uni uni) uni)

;; map_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b) (map1 b a x x1)))))

;; map_def1
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni))
  (forall ((y uni))
  (=> (sort b y)
  (and
  (=> (mem b y (map1 b a f u))
  (exists ((x uni))
  (and (sort a x) (and (mem a x u) (= y (infix_at b a f x))))))
  (=> (exists ((x uni)) (and (mem a x u) (= y (infix_at b a f x)))) (mem b y
  (map1 b a f u)))))))))

;; map_def2
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni))
  (forall ((x uni))
  (=> (mem a x u) (mem b (infix_at b a f x) (map1 b a f u)))))))

;; map_cardinal
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni)) (<= (cardinal b (map1 b a f u)) (cardinal a u)))))

(declare-fun op (ty uni uni) uni)

;; op_sort
  (assert
  (forall ((im1 ty)) (forall ((x uni) (x1 uni)) (sort im1 (op im1 x x1)))))

(declare-fun po (ty uni uni) uni)

;; po_sort
  (assert
  (forall ((im1 ty)) (forall ((x uni) (x1 uni)) (sort im1 (po im1 x x1)))))

(declare-fun inver (ty uni) uni)

;; inver_sort
  (assert (forall ((im1 ty)) (forall ((x uni)) (sort im1 (inver im1 x)))))

(declare-sort tuple2 2)

(declare-fun tuple21 (ty ty) ty)

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple21 a1 a) (Tuple2 a1 a x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((x uni)) (sort a1 (Tuple2_proj_1 a1 a x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a1 u) (= (Tuple2_proj_1 a1 a (Tuple2 a1 a u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((x uni)) (sort a (Tuple2_proj_2 a1 a x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a u1) (= (Tuple2_proj_2 a1 a (Tuple2 a1 a u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((u uni))
  (=> (sort (tuple21 a1 a) u)
  (= u (Tuple2 a1 a (Tuple2_proj_1 a1 a u) (Tuple2_proj_2 a1 a u)))))))

(declare-fun fir (ty ty uni) uni)

;; fir_sort
  (assert (forall ((a ty) (b ty)) (forall ((x uni)) (sort a (fir b a x)))))

(declare-fun sec (ty ty uni) uni)

;; sec_sort
  (assert (forall ((a ty) (b ty)) (forall ((x uni)) (sort b (sec b a x)))))

;; projections
  (assert
  (forall ((a ty) (b ty))
  (forall ((o uni))
  (=> (sort (tuple21 a b) o) (= o (Tuple2 a b (fir b a o) (sec b a o)))))))

;; get_fir
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (b1 uni))
  (=> (sort a a1) (= (fir b a (Tuple2 a b a1 b1)) a1)))))

;; get_sec
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (b1 uni))
  (=> (sort b b1) (= (sec b a (Tuple2 a b a1 b1)) b1)))))

(declare-fun ref (ty) ty)

(declare-fun mk_ref (ty uni) uni)

;; mk ref_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort (ref a) (mk_ref a x)))))

(declare-fun contents (ty uni) uni)

;; contents_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (contents a x)))))

;; contents_def
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort a u) (= (contents a (mk_ref a u)) u)))))

;; ref_inversion
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort (ref a) u) (= u (mk_ref a (contents a u)))))))

;; set_equal
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) s)
  (=> (sort (set1 a) sqt)
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (mem a e sqt))))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
  (= s sqt))))))))

;; set_equal_eqq
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (mem a e sqt))))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
  (infix_eqeq (set1 a) s sqt))))))

;; union_exchange
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (not (is_empty a sqt))
  (= (union1 a (add a (choose a sqt) s) (remove a (choose a sqt) sqt)) 
  (union1 a s sqt))))))

;; get_filter
  (assert
  (forall ((a ty))
  (forall ((p uni) (s uni) (x uni))
  (=> (mem a x (filter a p s))
  (and (= (tb2t2 (infix_at bool a p x)) true) (mem a x s))))))

;; set_filter
  (assert
  (forall ((a ty))
  (forall ((p uni) (s uni) (x uni))
  (=> (= (tb2t2 (infix_at bool a p x)) true)
  (=> (mem a x s) (mem a x (filter a p s)))))))

;; inter_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (is_empty a s) (is_empty a (inter a s sqt))))))

;; inter_empty_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (is_empty a sqt) (is_empty a (inter a s sqt))))))

;; inter_empty_elts
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (not (mem a e sqt)))))
  (is_empty a (inter a s sqt))))))

;; inter_sym
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni)) (= (inter a s sqt) (inter a sqt s)))))

;; union_sym
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni)) (= (union1 a s sqt) (union1 a sqt s)))))

;; union_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) sqt) (=> (is_empty a s) (= (union1 a s sqt) sqt))))))

;; union_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) s) (=> (is_empty a sqt) (= (union1 a s sqt) s))))))

;; union_members
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (and
  (forall ((a1 uni))
  (=> (mem a a1 (union1 a s sqt)) (=> (not (mem a a1 s)) (mem a a1 sqt))))
  (forall ((a1 uni))
  (=> (mem a a1 (union1 a s sqt)) (=> (not (mem a a1 sqt)) (mem a a1 s))))))))

;; union_alt
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (e uni))
  (=> (mem a e (union1 a s sqt)) (=> (not (mem a e s)) (mem a e sqt))))))

;; union_empty_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) s) (=> (is_empty a sqt) (= (union1 a s sqt) s))))))

;; set_subset
  (assert
  (forall ((a ty))
  (forall ((sqt uni) (s uni))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
  (subset1 a sqt s)))))

;; set_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (sort (set1 a) s)
  (=> (forall ((e uni)) (=> (sort a e) (not (mem a e s))))
  (and (= s (empty a)) (is_empty a s)))))))

;; get_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (= s (empty a))
  (and (forall ((e uni)) (not (mem a e s))) (is_empty a s))))))

;; get_non_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (not (is_empty a s)) (exists ((e uni)) (and (sort a e) (mem a e s)))))))

;; set_non_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (exists ((e uni)) (mem a e s))
  (and (not (is_empty a s)) (< 0 (cardinal a s)))))))

;; set_pos_card_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (a1 uni)) (=> (mem a a1 s) (< 0 (cardinal a s))))))

;; union_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (x uni))
  (=> (not (mem a x sqt))
  (= (union1 a s (add a x sqt)) (add a x (union1 a s sqt)))))))

;; union_add_mem
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (x uni) (y uni))
  (=> (sort a x)
  (=> (sort a y)
  (=> (mem a x (add a y (union1 a s sqt)))
  (=> (not (mem a x sqt)) (=> (not (mem a x s)) (= x y)))))))))

;; union_add_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (x uni))
  (=> (not (mem a x sqt))
  (= (add a x (union1 a s sqt)) (union1 a s (add a x sqt)))))))

;; remove_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (x uni))
  (=> (sort (set1 a) s)
  (=> (not (mem a x s)) (= (remove a x (add a x s)) s))))))

;; add_remove
  (assert
  (forall ((a ty))
  (forall ((s uni) (x uni))
  (=> (sort (set1 a) s) (=> (mem a x s) (= (add a x (remove a x s)) s))))))

(declare-fun p_injective (ty ty uni uni) Bool)

;; p_injective_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (= (p_injective b a f s)
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))))))

;; set_map_mem
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni))
  (=> (exists ((a1 uni)) (and (mem a a1 s) (= b1 (infix_at b a f a1)))) (mem
  b b1 (map1 b a f s))))))

;; map_add
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (x uni))
  (=> (not (mem a x s))
  (= (map1 b a f (add a x s)) (add b (infix_at b a f x) (map1 b a f s)))))))

;; map_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
  (= (map1 b a f s) (map1 b a g s))))))

;; remove_mem
  (assert
  (forall ((a ty))
  (forall ((s uni) (e uni) (f uni))
  (=> (mem a e (remove a f s)) (mem a e s)))))

;; injective_map_cardinal
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (p_injective b a f s) (= (cardinal b (map1 b a f s)) (cardinal a s))))))

;; set_map_mem_el
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni) (a1 uni))
  (=> (mem a a1 s) (=> (= b1 (infix_at b a f a1)) (mem b b1 (map1 b a f s)))))))

;; set_map_mem_el_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni))
  (=> (exists ((a1 uni)) (and (mem a a1 s) (= b1 (infix_at b a f a1)))) (mem
  b b1 (map1 b a f s))))))

;; map_antec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni))
  (=> (sort b b1)
  (=> (mem b b1 (map1 b a f s))
  (exists ((a1 uni))
  (and (sort a a1) (and (mem a a1 s) (= b1 (infix_at b a f a1))))))))))

;; map_antec_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (forall ((b1 uni))
  (=> (sort b b1)
  (=> (mem b b1 (map1 b a f s))
  (exists ((a1 uni))
  (and (sort a a1) (and (mem a a1 s) (= b1 (infix_at b a f a1)))))))))))

;; map_remove_choose
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni))
  (=> (p_injective b a f s)
  (= (map1 b a f (remove a (choose a s) s)) (remove b
                                            (infix_at b a f (choose a s))
                                            (map1 b a f s)))))))

(declare-fun antec_set (ty ty uni uni uni) uni)

;; antec_set_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (antec_set b a x x1 x2)))))

(declare-fun result (ty ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result b a x x1)))))

;; result_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (b1 uni) (e uni))
  (=> (sort b b1)
  (= (= (tb2t2 (infix_at bool a (result b a f b1) e)) true)
  (= (infix_at b a f e) b1))))))

;; antec_set_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (antec_set b a s f b1) (filter a (result b a f b1) s))))))

(declare-fun remove_s (ty uni uni) uni)

;; remove_s_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (remove_s a x x1)))))

(declare-fun result1 (ty uni) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni)) (sort (infix_mngt a bool) (result1 a x)))))

;; result_def
  (assert
  (forall ((a ty))
  (forall ((sqt uni) (e uni))
  (= (= (tb2t2 (infix_at bool a (result1 a sqt) e)) true)
  (not (mem a e sqt))))))

;; remove_s_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (subset1 a sqt s) (= (remove_s a s sqt) (filter a (result1 a sqt) s))))))

;; remove_s_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (subset1 a sqt s)
  (forall ((e uni))
  (= (mem a e (remove_s a s sqt)) (and (mem a e s) (not (mem a e sqt)))))))))

(declare-fun remove_antecs (ty ty uni uni uni) uni)

;; remove_antecs_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (remove_antecs b a x x1 x2)))))

;; remove_antecs_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (remove_antecs b a s f b1) (remove_s a s (antec_set b a s f b1)))))))

;; remove_antecs_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (sort b b1)
  (=> (mem b b1 (map1 b a f s))
  (and
  (forall ((e uni))
  (= (mem a e (remove_antecs b a s f b1))
  (and (mem a e s) (not (= (infix_at b a f e) b1)))))
  (< (cardinal a (remove_antecs b a s f b1)) (cardinal a s))))))))

;; map_remove_antec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (map1 b a f (remove_antecs b a s f b1)) (remove b b1 (map1 b a f s)))))))

;; map_non_empty
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (< 0 (cardinal a s)) (< 0 (cardinal b (map1 b a f s)))))))

;; non_empty_map
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (< 0 (cardinal b (map1 b a f s))) (< 0 (cardinal a s))))))

(declare-fun right_injections (ty ty uni uni) uni)

;; right_injections_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 a b))
  (right_injections b a x x1)))))

;; right_injections_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (s uni))
  (ite (is_empty b s) (= (right_injections b a a1 s) (empty (tuple21 a b)))
  (= (right_injections b a a1 s) (add (tuple21 a b)
                                 (Tuple2 a b a1 (choose b s))
                                 (right_injections b a a1
                                 (remove b (choose b s) s))))))))

(declare-fun Tuple2_closure (ty ty) uni)

;; Tuple2_closure_sort
  (assert
  (forall ((a ty) (a1 ty)) (sort
  (infix_mngt a1 (infix_mngt a (tuple21 a1 a))) (Tuple2_closure a1 a))))

;; Tuple2_closure_def
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((y uni) (y1 uni))
  (= (infix_at (tuple21 a1 a) a
     (infix_at (infix_mngt a (tuple21 a1 a)) a1 (Tuple2_closure a1 a) y) y1) 
  (Tuple2 a1 a y y1)))))

;; right_injections_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (s uni))
  (=> (sort a a1)
  (and
  (= (cardinal (tuple21 a b) (right_injections b a a1 s)) (cardinal b s))
  (and
  (forall ((aqt uni))
  (=> (sort a aqt)
  (forall ((b1 uni))
  (= (mem (tuple21 a b) (Tuple2 a b aqt b1) (right_injections b a a1 s))
  (and (= aqt a1) (mem b b1 s))))))
  (= (right_injections b a a1 s) (map1 (tuple21 a b) b
                                 (infix_at (infix_mngt b (tuple21 a b)) a
                                 (Tuple2_closure a b) a1) s))))))))

(declare-fun left_injections (ty ty uni uni) uni)

;; left_injections_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 a b))
  (left_injections b a x x1)))))

;; left_injections_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni))
  (ite (is_empty a s) (= (left_injections b a s b1) (empty (tuple21 a b)))
  (= (left_injections b a s b1) (add (tuple21 a b)
                                (Tuple2 a b (choose a s) b1)
                                (left_injections b a
                                (remove a (choose a s) s) b1)))))))

(declare-fun fc (ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc b a x)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((b1 uni) (a1 uni))
  (= (infix_at (tuple21 a b) a (fc b a b1) a1) (Tuple2 a b a1 b1)))))

;; left_injections_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni))
  (=> (sort b b1)
  (and
  (forall ((a1 uni))
  (forall ((bqt uni))
  (=> (sort b bqt)
  (= (mem (tuple21 a b) (Tuple2 a b a1 bqt) (left_injections b a s b1))
  (and (mem a a1 s) (= bqt b1))))))
  (and (= (cardinal (tuple21 a b) (left_injections b a s b1)) (cardinal a s))
  (= (left_injections b a s b1) (map1 (tuple21 a b) a (fc b a b1) s))))))))

;; set_map_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (sort (set1 b) sqt)
  (=>
  (forall ((b1 uni))
  (=> (sort b b1)
  (=> (mem b b1 sqt)
  (exists ((a1 uni)) (and (mem a a1 s) (= (infix_at b a f a1) b1))))))
  (=>
  (forall ((a1 uni))
  (=> (sort a a1) (=> (mem a a1 s) (mem b (infix_at b a f a1) sqt))))
  (= (map1 b a f s) sqt)))))))

;; right_injections_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (s uni))
  (=> (sort a a1)
  (and
  (= (cardinal (tuple21 a b) (right_injections b a a1 s)) (cardinal b s))
  (and
  (forall ((aqt uni))
  (=> (sort a aqt)
  (forall ((b1 uni))
  (= (mem (tuple21 a b) (Tuple2 a b aqt b1) (right_injections b a a1 s))
  (and (= aqt a1) (mem b b1 s))))))
  (= (right_injections b a a1 s) (map1 (tuple21 a b) b
                                 (infix_at (infix_mngt b (tuple21 a b)) a
                                 (Tuple2_closure a b) a1) s))))))))

(declare-fun fc1 (ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc1 b a x)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((b1 uni) (a1 uni))
  (= (infix_at (tuple21 a b) a (fc1 b a b1) a1) (Tuple2 a b a1 b1)))))

;; left_injections_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni))
  (=> (sort b b1)
  (and
  (forall ((a1 uni))
  (forall ((bqt uni))
  (=> (sort b bqt)
  (= (mem (tuple21 a b) (Tuple2 a b a1 bqt) (left_injections b a s b1))
  (and (mem a a1 s) (= bqt b1))))))
  (and (= (cardinal (tuple21 a b) (left_injections b a s b1)) (cardinal a s))
  (= (left_injections b a s b1) (map1 (tuple21 a b) a (fc1 b a b1) s))))))))

;; disjoint_injections
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni) (c uni))
  (=> (sort b b1)
  (=> (sort b c)
  (=> (not (= b1 c))
  (and (is_empty (tuple21 b a)
  (inter (tuple21 b a) (right_injections a b b1 s)
  (right_injections a b c s))) (is_empty (tuple21 a b)
  (inter (tuple21 a b) (left_injections b a s b1) (left_injections b a s c))))))))))

;; induction
  (assert
  (forall ((a ty))
  (forall ((p uni) (t uni))
  (=>
  (forall ((s uni))
  (=> (sort (set1 a) s)
  (=> (is_empty a s) (= (tb2t2 (infix_at bool (set1 a) p s)) true))))
  (=>
  (forall ((s uni))
  (=> (sort (set1 a) s)
  (=> (= (tb2t2 (infix_at bool (set1 a) p s)) true)
  (forall ((t1 uni))
  (=> (sort a t1)
  (=> (not (mem a t1 s))
  (= (tb2t2 (infix_at bool (set1 a) p (add a t1 s))) true)))))))
  (= (tb2t2 (infix_at bool (set1 a) p t)) true))))))

;; cardinal_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (= (cardinal a (union1 a s sqt)) (- (+ (cardinal a s) (cardinal a sqt)) 
  (cardinal a (inter a s sqt)))))))

;; cardinal_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (mem a e sqt))))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
  (= (cardinal a s) (cardinal a sqt)))))))

;; cardinal_sum_empty_inter
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (= (inter a s sqt) (empty a))
  (= (cardinal a (union1 a s sqt)) (+ (cardinal a s) (cardinal a sqt)))))))

(declare-fun cartesian_product (ty ty uni uni) uni)

;; cartesian_product_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 a b))
  (cartesian_product b a x x1)))))

;; cartesian_product_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (= (cardinal (tuple21 a b) (cartesian_product b a s1 s2)) (* (cardinal a
                                                               s1) (cardinal
                                                                   b s2)))
  (and
  (forall ((a1 uni))
  (forall ((b1 uni))
  (= (mem (tuple21 a b) (Tuple2 a b a1 b1) (cartesian_product b a s1 s2))
  (and (mem a a1 s1) (mem b b1 s2)))))
  (forall ((o uni))
  (= (mem (tuple21 a b) o (cartesian_product b a s1 s2))
  (and (mem a (fir b a o) s1) (mem b (sec b a o) s2)))))))))

(declare-fun commute (ty ty uni) uni)

;; commute_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (tuple21 b a) (commute b a x)))))

;; commute_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (b1 uni))
  (= (commute b a (Tuple2 a b a1 b1)) (Tuple2 b a b1 a1)))))

;; commute_inj
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (=> (sort a a1)
  (=> (sort a aqt)
  (=> (sort b b1)
  (=> (sort b bqt)
  (=> (=> (= a1 aqt) (not (= b1 bqt)))
  (not
  (= (commute b a (Tuple2 a b a1 b1)) (commute b a (Tuple2 a b aqt bqt))))))))))))

;; mem_cartesian_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (a1 uni) (b1 uni))
  (=> (mem a a1 s1)
  (=> (mem b b1 s2) (mem (tuple21 a b) (Tuple2 a b a1 b1)
  (cartesian_product b a s1 s2)))))))

(declare-fun commute_closure (ty ty) uni)

;; commute_closure_sort
  (assert
  (forall ((a ty) (b ty)) (sort (infix_mngt (tuple21 a b) (tuple21 b a))
  (commute_closure b a))))

;; commute_closure_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((y uni))
  (= (infix_at (tuple21 b a) (tuple21 a b) (commute_closure b a) y) (commute
                                                                    b a y)))))

;; commute_inj_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni)) (p_injective (tuple21 b a) (tuple21 a b)
  (commute_closure b a) (cartesian_product b a s1 s2)))))

(declare-fun commute_product (ty ty uni uni) uni)

;; commute_product_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 b a))
  (commute_product b a x x1)))))

;; commute_product_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (= (commute_product b a s1 s2) (map1 (tuple21 b a) (tuple21 a b)
                                 (commute_closure b a)
                                 (cartesian_product b a s1 s2))))))

;; commute_product_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (= (commute_product b a s1 s2) (cartesian_product a b s2 s1)))))

(declare-fun commute_product_el (ty ty uni uni) uni)

;; commute_product_el_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 b a))
  (commute_product_el b a x x1)))))

;; commute_product_el_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (= (commute_product_el b a s1 s2) (map1 (tuple21 b a) (tuple21 a b)
                                    (commute_closure b a)
                                    (cartesian_product b a s1 s2))))))

;; commute_product_el_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((a1 uni) (b1 uni))
  (and
  (= (mem (tuple21 a b) (Tuple2 a b a1 b1) (cartesian_product b a s1 s2))
  (and (mem a a1 s1) (mem b b1 s2)))
  (= (and (mem a a1 s1) (mem b b1 s2)) (mem (tuple21 b a) (Tuple2 b a b1 a1)
  (commute_product_el b a s1 s2))))))))

;; cartesian_product_union
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (= (cartesian_product b a s1 (union1 b s2 s3)) (union1 (tuple21 a b)
                                                 (cartesian_product b a s1
                                                 s2)
                                                 (cartesian_product b a s1
                                                 s3))))))

;; cartesian_union_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (= (cartesian_product b a (union1 a s1 s2) s3) (union1 (tuple21 a b)
                                                 (cartesian_product b a s1
                                                 s3)
                                                 (cartesian_product b a s2
                                                 s3))))))

;; cartesian_product_cardone_r
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (=> (= (cardinal a s1) 1)
  (and (infix_eqeq (set1 (tuple21 a b)) (cartesian_product b a s1 s2)
  (right_injections b a (choose a s1) s2)) (infix_eqeq (set1 (tuple21 a b))
  (cartesian_product b a s1 s2)
  (map1 (tuple21 a b) b
  (infix_at (infix_mngt b (tuple21 a b)) a (Tuple2_closure a b)
  (choose a s1)) s2)))))))

(declare-fun fc2 (ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc2 b a x)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((e uni) (e1 uni))
  (= (infix_at (tuple21 a b) a (fc2 b a e) e1) (Tuple2 a b e1 e)))))

;; cartesian_product_cardone_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (=> (= (cardinal b s2) 1)
  (and (infix_eqeq (set1 (tuple21 a b)) (cartesian_product b a s1 s2)
  (left_injections b a s1 (choose b s2))) (infix_eqeq (set1 (tuple21 a b))
  (cartesian_product b a s1 s2)
  (map1 (tuple21 a b) a (fc2 b a (choose b s2)) s1)))))))

;; disjoint_cartesian_product_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (=> (= (inter a s1 s2) (empty a))
  (= (inter (tuple21 a b) (cartesian_product b a s1 s3)
     (cartesian_product b a s2 s3)) (empty (tuple21 a b)))))))

;; disjoint_cartesian_product_r
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (=> (= (inter b s2 s3) (empty b))
  (= (inter (tuple21 a b) (cartesian_product b a s1 s2)
     (cartesian_product b a s1 s3)) (empty (tuple21 a b)))))))

(declare-fun iter_union (ty uni) uni)

;; iter_union_sort
  (assert
  (forall ((a ty)) (forall ((x uni)) (sort (set1 a) (iter_union a x)))))

;; iter_union_def
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (ite (is_empty (set1 a) s) (= (iter_union a s) (empty a))
  (= (iter_union a s) (union1 a (choose (set1 a) s)
                      (iter_union a (remove (set1 a) (choose (set1 a) s) s))))))))

;; get_mem_union
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (e uni))
  (=> (mem a e (union1 a s sqt)) (=> (not (mem a e sqt)) (mem a e s))))))

;; get_mem_union'
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (e uni))
  (=> (mem a e (union1 a s sqt)) (=> (not (mem a e s)) (mem a e sqt))))))

;; set_mem_union
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (e uni))
  (=> (mem a e s) (mem a e (union1 a s sqt))))))

;; set_mem_union'
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (e uni))
  (=> (mem a e sqt) (mem a e (union1 a s sqt))))))

(declare-fun op_neutral_left (ty uni uni) Bool)

;; op_neutral_left_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral uni))
  (= (op_neutral_left im1 op1 neutral)
  (forall ((e uni))
  (=> (sort im1 e)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 neutral) e) e)))))))

(declare-fun op_neutral_right (ty uni uni) Bool)

;; op_neutral_right_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral uni))
  (= (op_neutral_right im1 op1 neutral)
  (forall ((e uni))
  (=> (sort im1 e)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 e) neutral) e)))))))

(declare-fun op_assoc (ty uni) Bool)

;; op_assoc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (op_assoc im1 op1)
  (forall ((a uni) (b uni) (c uni))
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c)))))
  (=>
  (forall ((a uni) (b uni) (c uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (=> (sort im1 c)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c)))))))
  (op_assoc im1 op1))))))

(declare-fun op_neutral_left_comm (ty uni uni) Bool)

;; op_neutral_left_comm_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral uni))
  (=> (sort im1 neutral)
  (= (op_neutral_left_comm im1 op1 neutral)
  (forall ((a uni))
  (=> (sort im1 a)
  (=>
  (forall ((b uni))
  (=> (sort im1 b)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) b)))
  (= a neutral)))))))))

(declare-fun commut (ty uni) Bool)

;; commut_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (commut im1 op1)
  (forall ((a uni) (b uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    b) a))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    b) a)))))
  (commut im1 op1))))))

(declare-fun assoc (ty uni) Bool)

;; assoc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (assoc im1 op1)
  (forall ((a uni) (b uni) (c uni))
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c)))))
  (=>
  (forall ((a uni) (b uni) (c uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (=> (sort im1 c)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c))))))) (assoc
  im1 op1))))))

(declare-fun opposite_n (ty uni uni uni) Bool)

;; opposite_n_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (neutral uni))
  (=> (sort im1 neutral)
  (and
  (=> (opposite_n im1 op1 po1 neutral)
  (forall ((a uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) a) neutral)))
  (=>
  (forall ((a uni))
  (=> (sort im1 a)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) a) neutral)))
  (opposite_n im1 op1 po1 neutral)))))))

(declare-fun inverse (ty uni uni uni) Bool)

;; inverse_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (inver1 uni))
  (and
  (=> (inverse im1 op1 po1 inver1)
  (forall ((a uni) (b uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    a)
                                                                    (infix_at
                                                                    im1 im1
                                                                    inver1 b)))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    a)
                                                                    (infix_at
                                                                    im1 im1
                                                                    inver1 b))))))
  (inverse im1 op1 po1 inver1))))))

(declare-fun opposite (ty uni uni) Bool)

;; opposite_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni))
  (and
  (=> (opposite im1 op1 po1)
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b)) b) a))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b)) b) a))))
  (opposite im1 op1 po1))))))

(declare-fun opposite_com (ty uni uni) Bool)

;; opposite_com_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni))
  (and
  (=> (opposite_com im1 op1 po1)
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) b) a))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) b) a))))
  (opposite_com im1 op1 po1))))))

;; refl
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (a uni) (b uni))
  (=> (commut im1 op1)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    b) a))))))

(declare-fun neutral (ty uni uni) Bool)

;; neutral_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neut uni))
  (= (neutral im1 op1 neut)
  (and (op_neutral_left im1 op1 neut)
  (and (op_neutral_right im1 op1 neut) (op_assoc im1 op1)))))))

;; set_neutral
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neut uni))
  (=> (op_neutral_left im1 op1 neut)
  (=> (op_neutral_right im1 op1 neut)
  (=> (op_assoc im1 op1) (neutral im1 op1 neut)))))))

(declare-fun has_neutral (ty uni) Bool)

;; has_neutral_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (has_neutral im1 op1)
  (exists ((e uni)) (and (sort im1 e) (neutral im1 op1 e))))
  (=> (exists ((e uni)) (neutral im1 op1 e)) (has_neutral im1 op1))))))

(declare-fun iterates (ty uni uni) Bool)

;; iterates_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral1 uni))
  (= (iterates im1 op1 neutral1)
  (and (op_neutral_left im1 op1 neutral1)
  (and (op_neutral_right im1 op1 neutral1) (op_assoc im1 op1)))))))

(declare-fun iterable (ty uni) Bool)

;; iterable_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (iterable im1 op1)
  (exists ((e uni)) (and (sort im1 e) (iterates im1 op1 e))))
  (=> (exists ((e uni)) (iterates im1 op1 e)) (iterable im1 op1))))))

;; iterates_
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral1 uni))
  (=> (op_neutral_left im1 op1 neutral1)
  (=> (op_neutral_right im1 op1 neutral1)
  (=> (op_assoc im1 op1)
  (and (iterates im1 op1 neutral1) (iterable im1 op1))))))))

(declare-fun neutral_elt (ty uni) uni)

;; neutral_elt_sort
  (assert
  (forall ((im1 ty)) (forall ((x uni)) (sort im1 (neutral_elt im1 x)))))

;; neutral_elt_spec
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (forall ((e uni))
  (=> (sort im1 e) (= (neutral im1 op1 e) (= (neutral_elt im1 op1) e)))))))

(declare-fun inverse_tuple (ty uni uni uni) Bool)

;; inverse_tuple_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (neutral1 uni))
  (= (inverse_tuple im1 op1 po1 neutral1)
  (and (opposite_n im1 op1 po1 neutral1)
  (and (opposite im1 op1 po1) (opposite_com im1 op1 po1)))))))

(declare-fun iterate (ty ty uni uni uni) uni)

;; iterate_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort im1 (iterate im1 a x x1 x2)))))

;; Iterate_def_empty
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni))
  (forall ((s uni))
  (forall ((f uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (is_empty a s)
  (= (iterate im1 a op1 (empty a) f) (neutral_elt im1 op1))))))))))

;; Iterate_one
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni))
  (forall ((s uni))
  (forall ((f uni))
  (forall ((x uni))
  (=> (is_empty a s)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 (add a x s) f) (infix_at im1 a f x))))))))))

;; Iterate_add
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni))
  (forall ((s uni))
  (forall ((f uni))
  (forall ((x uni))
  (=> (< 0 (cardinal a s))
  (=> (commut im1 op1)
  (=> (not (mem a x s))
  (= (iterate im1 a op1 (add a x s) f) (infix_at im1 im1
                                       (infix_at (infix_mngt im1 im1) im1 op1
                                       (infix_at im1 a f x))
                                       (iterate im1 a op1 s f))))))))))))

;; minus_zero
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (a uni))
  (=> (sort im1 a)
  (=> (iterable im1 op1)
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a)
     (neutral_elt im1 op1)) a)))))))

;; unic
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (a uni) (b uni) (c uni))
  (=> (sort im1 b)
  (=> (sort im1 c)
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=>
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    a) c))
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1)) (= b c))))))))))

;; substract_comm
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (a uni) (b uni) (c uni))
  (=> (sort im1 b)
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
  (and
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) a) b)
  (and
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) a)) a) b)
  (and
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a)
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 b) c)) 
  (infix_at im1 im1
  (infix_at (infix_mngt im1 im1) im1 op1
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b)) c))
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 b) c)))))))))))))

(declare-fun int_iterate (ty uni uni Int Int) uni)

;; int_iterate_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort im1
  (int_iterate im1 x x1 x2 x3)))))

(declare-fun t2tb3 (Int) uni)

;; t2tb_sort
  (assert (forall ((x Int)) (sort int (t2tb3 x))))

(declare-fun tb2t3 (uni) Int)

;; BridgeL
  (assert
  (forall ((i Int)) (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb3 (tb2t3 j)) j) :pattern ((t2tb3 (tb2t3 j))) )))

;; int_iterate_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (=> (<= j i) (iterable im1 op1))
  (ite (<= j i) (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1))
  (ite (= j (+ i 1))
  (= (int_iterate im1 op1 f i j) (infix_at im1 int f (t2tb3 i)))
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (infix_at im1 int f (t2tb3 i)))
                                 (int_iterate im1 op1 f (+ i 1) j)))))))))

;; int_iterate_spec
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (=> (<= j i) (iterable im1 op1))
  (and (=> (<= j i) (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1)))
  (=> (= j (+ i 1))
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (infix_at im1 int f (t2tb3 i)))
                                 (neutral_elt im1 op1)))))))))

(declare-fun int_int_iterate (ty uni uni Int Int Int Int) uni)

;; int_int_iterate_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) (sort im1
  (int_int_iterate im1 x x1 x2 x3 x4 x5)))))

;; int_int_iterate_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (iterable im1 op1)
  (ite (<= j i) (= (int_int_iterate im1 op1 f i j k l) (neutral_elt im1 op1))
  (= (int_int_iterate im1 op1 f i j k l) (infix_at im1 im1
                                         (infix_at (infix_mngt im1 im1) im1
                                         op1
                                         (int_iterate im1 op1
                                         (infix_at (infix_mngt int im1) 
                                         int f (t2tb3 i)) k l))
                                         (int_int_iterate im1 op1 f (+ i 1) j
                                         k l))))))))

;; to_set_spec
  (assert
  (forall ((a ty))
  (forall ((e uni))
  (=> (sort a e)
  (and (forall ((b uni)) (=> (= b e) (mem a b (add a e (empty a)))))
  (and (= (cardinal a (add a e (empty a))) 1)
  (forall ((b uni))
  (=> (sort a b) (=> (mem a b (add a e (empty a))) (= b e))))))))))

(declare-fun to_fset (Int Int) (set Int))

(declare-fun t2tb4 ((set Int)) uni)

;; t2tb_sort
  (assert (forall ((x (set Int))) (sort (set1 int) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set Int))

;; BridgeL
  (assert
  (forall ((i (set Int))) (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb4 (tb2t4 j)) j) :pattern ((t2tb4 (tb2t4 j))) )))

;; to_fset_spec
  (assert
  (forall ((i Int) (j Int))
  (and (=> (< i j) (= (cardinal int (t2tb4 (to_fset i j))) (- j i)))
  (and (=> (<= j i) (is_empty int (t2tb4 (to_fset i j))))
  (forall ((k Int))
  (= (mem int (t2tb3 k) (t2tb4 (to_fset i j))) (and (<= i k) (< k j))))))))

;; to_fset_bounds
  (assert
  (forall ((i Int) (k Int) (j Int))
  (=> (< i j)
  (=> (mem int (t2tb3 k) (t2tb4 (to_fset i j))) (and (<= i k) (< k j))))))

;; to_fset_unit_ext
  (assert
  (forall ((i Int) (j Int))
  (=> (< i j)
  (= (to_fset i j) (tb2t4 (add int (t2tb3 i) (t2tb4 (to_fset (+ i 1) j))))))))

;; to_fset_ext
  (assert
  (forall ((i Int) (iqt Int) (j Int))
  (=> (and (<= i iqt) (<= iqt j))
  (= (to_fset i j) (tb2t4
                   (union1 int (t2tb4 (to_fset i iqt))
                   (t2tb4 (to_fset iqt j))))))))

;; card_fset
  (assert
  (forall ((n Int)) (=> (<= 0 n) (= (cardinal int (t2tb4 (to_fset 0 n))) n))))

;; set_mem_to_fset
  (assert
  (forall ((i Int) (k Int) (j Int))
  (=> (and (<= i k) (< k j)) (mem int (t2tb3 k) (t2tb4 (to_fset i j))))))

(declare-fun element (ty uni) uni)

;; element_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (element a x)))))

;; element_def
  (assert
  (forall ((a ty))
  (forall ((s uni)) (=> (= (cardinal a s) 1) (= (element a s) (choose a s))))))

;; cardone
  (assert
  (forall ((a ty))
  (forall ((s uni) (a1 uni))
  (=> (sort a a1)
  (=> (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
  (=> (< 0 (cardinal a s)) (and (= (cardinal a s) 1) (= (element a s) a1))))))))

;; set_cardone
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (< 0 (cardinal a s))
  (=>
  (exists ((a1 uni))
  (and (sort a a1)
  (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))))
  (= (cardinal a s) 1))))))

;; get_cardone
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (= (cardinal a s) 1)
  (exists ((a1 uni))
  (and (sort a a1)
  (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))))))))

;; get_cardone_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (e uni))
  (=> (sort a e)
  (=> (= (cardinal a s) 1) (=> (mem a e s) (= e (element a s))))))))

;; set_cardone_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (a1 uni))
  (=> (sort a a1)
  (=> (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
  (and (= (cardinal a s) 1) (= (element a s) a1)))))))

;; set_cardone_elt_
  (assert
  (forall ((a ty))
  (forall ((s uni) (a1 uni))
  (=> (sort a a1)
  (=> (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
  (= (cardinal a s) 1))))))

;; cardzero
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (forall ((b uni)) (=> (sort a b) (not (mem a b s))))
  (= (cardinal a s) 0)))))

;; get_choose_cardone
  (assert
  (forall ((a ty))
  (forall ((s uni) (e uni))
  (=> (sort a e)
  (=> (= (cardinal a s) 1) (=> (mem a e s) (= (choose a s) e)))))))

(declare-fun p_injective_in (ty ty uni uni uni) Bool)

;; p_injective_in_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (and
  (=> (p_injective_in b a f s sqt)
  (forall ((e uni))
  (=> (mem a e s)
  (and (mem b (infix_at b a f e) sqt)
  (forall ((e1 uni) (eqt uni))
  (=> (sort a e1)
  (=> (sort a eqt)
  (=> (mem a e1 s)
  (=> (mem a eqt s)
  (=> (not (= e1 eqt)) (not (= (infix_at b a f e1) (infix_at b a f eqt)))))))))))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (and (mem b (infix_at b a f e) sqt)
  (forall ((e1 uni) (eqt uni))
  (=> (sort a e1)
  (=> (sort a eqt)
  (=> (mem a e1 s)
  (=> (mem a eqt s)
  (=> (not (= e1 eqt)) (not (= (infix_at b a f e1) (infix_at b a f eqt)))))))))))))
  (p_injective_in b a f s sqt))))))

(declare-fun equal_func (ty ty uni uni) Bool)

;; equal_func_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni))
  (and
  (=> (equal_func b a f g)
  (forall ((e uni)) (= (infix_at b a f e) (infix_at b a g e))))
  (=>
  (forall ((e uni))
  (=> (sort a e) (= (infix_at b a f e) (infix_at b a g e)))) (equal_func b a
  f g))))))

;; set_equal_func
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni))
  (=> (sort (infix_mngt a b) f)
  (=> (sort (infix_mngt a b) g)
  (=>
  (forall ((e uni))
  (=> (sort a e) (= (infix_at b a f e) (infix_at b a g e)))) (= f g)))))))

;; get_equal_func
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni))
  (=> (equal_func b a f g)
  (forall ((e uni)) (= (infix_at b a f e) (infix_at b a g e)))))))

;; set_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (p_injective b a f s)))))

;; image_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (forall ((a1 uni))
  (=> (sort b a1)
  (and
  (=> (mem b a1 (map1 b a f s))
  (exists ((antec_a uni))
  (and (sort a antec_a)
  (and (mem a antec_a s) (= a1 (infix_at b a f antec_a))))))
  (=>
  (exists ((antec_a uni))
  (and (mem a antec_a s) (= a1 (infix_at b a f antec_a)))) (mem b a1
  (map1 b a f s)))))))))

;; card_image
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni)) (<= (cardinal b (map1 b a f s)) (cardinal a s)))))

;; card_image_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (p_injective b a f s) (= (cardinal b (map1 b a f s)) (cardinal a s))))))

;; get_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (p_injective b a f s)
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))))))

;; get_not_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (not (p_injective b a f s))
  (exists ((e uni) (eqt uni))
  (and (sort a e)
  (and (sort a eqt)
  (and (mem a e s)
  (and (mem a eqt s)
  (and (not (= e eqt)) (= (infix_at b a f e) (infix_at b a f eqt))))))))))))

;; set_injective_in
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (p_injective b a f s))))))

;; get_injective_in
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_injective_in b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt))))))))))))))

(declare-fun p_surjective (ty ty uni uni uni) Bool)

;; p_surjective_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (and
  (=> (p_surjective b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni))
  (and (sort a e) (and (mem a e s) (= (infix_at b a f e) eqt)))))))))
  (=>
  (and
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni)) (and (mem a e s) (= (infix_at b a f e) eqt)))))))
  (p_surjective b a f s sqt))))))

;; set_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni)) (and (mem a e s) (= (infix_at b a f e) eqt))))))
  (p_surjective b a f s sqt))))))

;; get_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_surjective b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni))
  (and (sort a e) (and (mem a e s) (= (infix_at b a f e) eqt))))))))))))

;; image_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (sort (set1 b) sqt)
  (=> (p_surjective b a f s sqt) (= (map1 b a f s) sqt))))))

(declare-fun p_bijective (ty ty uni uni uni) Bool)

;; p_bijective_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (= (p_bijective b a f s sqt)
  (and (p_injective_in b a f s sqt) (p_surjective b a f s sqt))))))

;; bijective_is_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt) (p_injective b a f s)))))

;; bijective_is_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt) (p_surjective b a f s sqt)))))

;; set_bijective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (sort (set1 b) sqt)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni)) (and (mem a e s) (= (infix_at b a f e) eqt))))))
  (and (p_bijective b a f s sqt) (= (map1 b a f s) sqt)))))))))

(declare-fun fc3 (ty ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a c) (fc3 c b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((f uni) (g uni) (k uni))
  (= (infix_at c a (fc3 c b a f g) k) (infix_at c b g (infix_at b a f k))))))

;; bijectivity_is_transitive
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((f uni) (g uni) (s uni) (sqt uni) (sqtqt uni))
  (=> (p_bijective b a f s sqt)
  (=> (p_bijective c b g sqt sqtqt) (p_bijective c a (fc3 c b a f g) s
  sqtqt))))))

;; bijective_image
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (sort (set1 b) sqt)
  (=> (p_bijective b a f s sqt)
  (and (= (cardinal a s) (cardinal b sqt)) (= sqt (map1 b a f s))))))))

;; get_bijective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (and
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (and
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni))
  (and (sort a e) (and (mem a e s) (= (infix_at b a f e) eqt)))))))
  (= (cardinal a s) (cardinal b sqt)))))))))

;; bijective_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
  (p_bijective b a g s sqt))))))

;; bijective_eq_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (forall ((g uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
  (p_bijective b a g s sqt)))))))

;; bij_equal_card
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (= (cardinal a s) (cardinal b (map1 b a f s))) (p_bijective b a f s
  (map1 b a f s))))))

;; set_bijective_auto
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
  (=>
  (forall ((eqt uni))
  (=> (sort a eqt)
  (=> (mem a eqt s)
  (exists ((e uni)) (and (mem a e s) (= (infix_at a a f e) eqt))))))
  (p_bijective a a f s s))))))

(declare-fun constant_f (ty ty uni) Bool)

(declare-fun fc4 (ty ty) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty)) (sort (infix_mngt b (infix_mngt a b)) (fc4 b a))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((y0 uni) (y1 uni))
  (=> (sort b y0)
  (= (infix_at b a (infix_at (infix_mngt a b) b (fc4 b a) y0) y1) y0)))))

;; constant_f_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni))
  (=> (sort (infix_mngt a b) f)
  (and
  (=> (constant_f b a f)
  (exists ((a1 uni))
  (and (sort b a1) (= f (infix_at (infix_mngt a b) b (fc4 b a) a1)))))
  (=> (exists ((a1 uni)) (= f (infix_at (infix_mngt a b) b (fc4 b a) a1)))
  (constant_f b a f)))))))

;; iterate_empty
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (is_empty a s)
  (=> (commut im1 op1)
  (=> (iterable im1 op1) (= (iterate im1 a op1 s t) (neutral_elt im1 op1))))))))

;; iterate_one
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (= (cardinal a s) 1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s t) (infix_at im1 a t (choose a s))))))))

;; iterate_add
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (x uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (not (mem a x s))
  (= (iterate im1 a op1 (add a x s) f) (infix_at im1 im1
                                       (infix_at (infix_mngt im1 im1) im1 op1
                                       (infix_at im1 a f x))
                                       (iterate im1 a op1 s f)))))))))

;; iterate_add_
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (x uni))
  (=> (commut im1 op1)
  (=> (not (mem a x s))
  (=> (not (is_empty a s))
  (= (iterate im1 a op1 (add a x s) f) (infix_at im1 im1
                                       (infix_at (infix_mngt im1 im1) im1 op1
                                       (infix_at im1 a f x))
                                       (iterate im1 a op1 s f)))))))))

(declare-fun po_closure (ty) uni)

;; po_closure_sort
  (assert
  (forall ((im1 ty)) (sort (infix_mngt im1 (infix_mngt im1 im1))
  (po_closure im1))))

;; po_closure_def
  (assert
  (forall ((im1 ty))
  (forall ((y uni) (y1 uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 (po_closure im1) y)
     y1) (po im1 y y1)))))

;; iterate_remove
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (x uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (inverse_tuple im1 op1 (po_closure im1) (neutral_elt im1 op1))
  (=> (mem a x s)
  (= (iterate im1 a op1 (remove a x s) f) (po im1 (iterate im1 a op1 s f)
                                          (infix_at im1 a f x))))))))))

;; iterate_def_choose
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni))
  (=> (=> (= (cardinal a s) 1) (iterable im1 op1))
  (=> (commut im1 op1)
  (=> (not (is_empty a s))
  (= (iterate im1 a op1 s f) (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 a f (choose a s)))
                             (iterate im1 a op1 (remove a (choose a s) s) f)))))))))

;; choose_any
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (t uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (mem a t s)
  (= (iterate im1 a op1 s f) (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 a f t))
                             (iterate im1 a op1 (remove a t s) f)))))))))

(declare-fun fc5 (ty ty uni uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a im1)
  (fc5 im1 a x x1 x2)))))

;; fc_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (k uni))
  (= (infix_at im1 a (fc5 im1 a op1 f g) k) (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 op1 (infix_at im1 a f k))
                                            (infix_at im1 a g k))))))

;; iterate_comp_iterate
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (f uni) (g uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (assoc im1 op1)
  (= (iterate im1 a op1 s1 (fc5 im1 a op1 f g)) (infix_at im1 im1
                                                (infix_at
                                                (infix_mngt im1 im1) im1 op1
                                                (iterate im1 a op1 s1 f))
                                                (iterate im1 a op1 s1 g)))))))))

(declare-fun fc6 (ty ty uni uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a im1)
  (fc6 im1 a x x1 x2)))))

;; fc_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (k uni))
  (= (infix_at im1 a (fc6 im1 a op1 f g) k) (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 op1 (infix_at im1 a f k))
                                            (infix_at im1 a g k))))))

;; iterate_comp_iterate_com
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (f uni) (g uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1 (iterate im1 a op1 s1 f))
     (iterate im1 a op1 s1 g)) (iterate im1 a op1 s1 (fc6 im1 a op1 f g))))))))

;; iterate_transitivity
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (po1 uni) (s1 uni) (s2 uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
  (= (iterate im1 a op1 (union1 a s1 s2) f) (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 po1
                                            (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 op1 (iterate im1 a op1 s1 f))
                                            (iterate im1 a op1 s2 f)))
                                            (iterate im1 a op1
                                            (inter a s1 s2) f)))))))))

;; iterate_disjoint_transitivity
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (s2 uni) (t uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (= (inter a s1 s2) (empty a))
  (= (iterate im1 a op1 (union1 a s1 s2) t) (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 op1 (iterate im1 a op1 s1 t))
                                            (iterate im1 a op1 s2 t)))))))))

;; iterate_eq
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (g uni))
  (=>
  (forall ((x uni))
  (=> (sort a x)
  (=> (mem a x s) (= (infix_at im1 a f x) (infix_at im1 a g x)))))
  (=> (commut im1 op1)
  (=> (=> (is_empty a s) (iterable im1 op1))
  (= (iterate im1 a op1 s f) (iterate im1 a op1 s g))))))))

(declare-fun fc7 (ty ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b im1) (fc7 im1 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (t uni) (b1 uni))
  (= (infix_at im1 b (fc7 im1 b a f t) b1) (infix_at im1 a t
                                           (infix_at a b f b1))))))

;; iterate_map
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (t uni))
  (=> (=> (is_empty b s) (iterable im1 op1))
  (=> (commut im1 op1)
  (=> (p_injective a b f s)
  (= (iterate im1 a op1 (map1 a b f s) t) (iterate im1 b op1 s
                                          (fc7 im1 b a f t)))))))))

;; iterate_cardone
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (= (cardinal a s) 1)
  (= (iterate im1 a op1 s t) (infix_at im1 a t (element a s)))))))))

;; iterate_cardzero
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (= (cardinal a s) 0) (= (iterate im1 a op1 s t) (neutral_elt im1 op1))))))))

(declare-fun fc8 (ty ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc8 im1 b a x)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 a b) (fc8 im1 b a f) o) (infix_at im1 b
                                                    (infix_at
                                                    (infix_mngt b im1) a f
                                                    (fir b a o)) (sec b a o))))))

;; injec_iterate
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (a1 uni) (s uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 b op1 s (infix_at (infix_mngt b im1) a f a1)) (iterate im1
                                                                (tuple21 a b)
                                                                op1
                                                                (cartesian_product
                                                                b a
                                                                (add a a1
                                                                (empty a)) s)
                                                                (fc8 im1 b a
                                                                f))))))))

(declare-fun fc9 (ty ty ty uni uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a im1)
  (fc9 im1 b a x x1 x2)))))

(declare-fun fc10 (ty ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc10 im1 b a x)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s2 uni) (f uni) (a1 uni))
  (= (infix_at im1 a (fc9 im1 b a op1 s2 f) a1) (iterate im1 b op1 s2
                                                (infix_at (infix_mngt b im1)
                                                a f a1))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 a b) (fc10 im1 b a f) o) (infix_at im1 b
                                                     (infix_at
                                                     (infix_mngt b im1) a f
                                                     (fir b a o))
                                                     (sec b a o))))))

;; iterate_cartesian_product
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s1 (fc9 im1 b a op1 s2 f)) (iterate im1 (tuple21 a b)
                                                   op1
                                                   (cartesian_product b a s1
                                                   s2) (fc10 im1 b a f))))))))

;; iterate_eq_func
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f1 uni) (f2 uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (p_injective im1 a f1 s)
  (=> (p_injective im1 a f2 s)
  (=> (= (map1 im1 a f1 s) (map1 im1 a f2 s))
  (= (iterate im1 a op1 s f1) (iterate im1 a op1 s f2))))))))))

;; int_iterate_def_empty
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (<= j i)
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1)))))))

;; int_iterate_def_plus_one
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (< i j)
  (=> (=> (= (+ i 1) j) (iterable im1 op1))
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (infix_at im1 int f (t2tb3 i)))
                                 (int_iterate im1 op1 f (+ i 1) j))))))))

;; int_iterate_cardone
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (= j (+ i 1))
  (= (int_iterate im1 op1 f i j) (infix_at im1 int f (t2tb3 i)))))))

;; int_iterate_def_plus_one_com
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (< i j)
  (=> (=> (= j (+ i 1)) (iterable im1 op1))
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1 (infix_at im1 int f (t2tb3 i)))
     (int_iterate im1 op1 f (+ i 1) j)) (int_iterate im1 op1 f i j)))))))

;; int_iterate_to_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (=> (<= j i) (iterable im1 op1))
  (=> (commut im1 op1)
  (= (int_iterate im1 op1 f i j) (iterate im1 int op1 (t2tb4 (to_fset i j))
                                 f)))))))

;; int_iterate_right_extension
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (iterable im1 op1)
  (=> (< i j)
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (int_iterate im1 op1 f i (- j 1)))
                                 (infix_at im1 int f (t2tb3 (- j 1))))))))))

;; int_iterate_right_extension_
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (assoc im1 op1)
  (=> (< (+ i 1) j)
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (int_iterate im1 op1 f i (- j 1)))
                                 (infix_at im1 int f (t2tb3 (- j 1))))))))))

;; int_iterate_transitivity
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (k Int) (j Int))
  (=> (iterable im1 op1)
  (=> (iterable im1 op1)
  (=> (op_neutral_left im1 op1 (neutral_elt im1 op1))
  (=> (and (<= i k) (<= k j))
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (int_iterate im1 op1 f i k))
                                 (int_iterate im1 op1 f k j))))))))))

;; int_iterate_transitivity_
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (k Int) (j Int))
  (=> (op_neutral_left im1 op1 (neutral_elt im1 op1))
  (=> (and (< i k) (< k j))
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (int_iterate im1 op1 f i k))
                                 (int_iterate im1 op1 f k j))))))))

(declare-fun fc11 (ty uni uni uni) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt int im1)
  (fc11 im1 x x1 x2)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (k Int))
  (= (infix_at im1 int (fc11 im1 op1 f g) (t2tb3 k)) (infix_at im1 im1
                                                     (infix_at
                                                     (infix_mngt im1 im1) im1
                                                     op1
                                                     (infix_at im1 int f
                                                     (t2tb3 k)))
                                                     (infix_at im1 int g
                                                     (t2tb3 k)))))))

;; int_iterate_comp_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (i Int) (j Int))
  (=> (iterable im1 op1)
  (=> (op_neutral_right im1 op1 (neutral_elt im1 op1))
  (=> (commut im1 op1)
  (= (int_iterate im1 op1 (fc11 im1 op1 f g) i j) (infix_at im1 im1
                                                  (infix_at
                                                  (infix_mngt im1 im1) im1
                                                  op1
                                                  (int_iterate im1 op1 f i j))
                                                  (int_iterate im1 op1 g i j)))))))))

;; int_iterate_attr_no_f
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((op1 uni) (op2 uni) (t1 uni) (t2 uni) (f uni) (i Int) (j Int))
  (=>
  (forall ((x Int))
  (forall ((y uni))
  (=> (sort im1 y)
  (= (infix_at im2 im2
     (infix_at (infix_mngt im2 im2) im2 op2 (infix_at im2 int t2 (t2tb3 x)))
     (infix_at im2 im1 f y)) (infix_at im2 im1 f
                             (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 int t1 (t2tb3 x))) y))))))
  (=> (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
  (=> (iterable im1 op1)
  (=> (iterable im2 op2)
  (=>
  (forall ((i1 Int))
  (= (infix_at im2 im1 f (infix_at im1 int t1 (t2tb3 i1))) (infix_at im2 
                                                           int t2 (t2tb3 i1))))
  (= (int_iterate im2 op2 t2 i j) (infix_at im2 im1 f
                                  (int_iterate im1 op1 t1 i j)))))))))))

(declare-fun fc12 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt int im2) (fc12 im2 im1 x x1)))))

;; fc_def
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((t uni) (f uni) (e Int))
  (= (infix_at im2 int (fc12 im2 im1 t f) (t2tb3 e)) (infix_at im2 im1 f
                                                     (infix_at im1 int t
                                                     (t2tb3 e)))))))

;; int_iterate_attr
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((op1 uni) (op2 uni) (t uni) (f uni) (i Int) (j Int))
  (=>
  (forall ((x Int))
  (forall ((y uni))
  (=> (sort im1 y)
  (= (infix_at im2 im2
     (infix_at (infix_mngt im2 im2) im2 op2
     (infix_at im2 im1 f (infix_at im1 int t (t2tb3 x))))
     (infix_at im2 im1 f y)) (infix_at im2 im1 f
                             (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 int t (t2tb3 x))) y))))))
  (=> (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
  (=> (iterable im1 op1)
  (=> (iterable im2 op2)
  (= (int_iterate im2 op2 (fc12 im2 im1 t f) i j) (infix_at im2 im1 f
                                                  (int_iterate im1 op1 t i j))))))))))

(declare-fun fc13 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt int im2) (fc13 im2 im1 x x1)))))

;; fc_def
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((t uni) (f uni) (e Int))
  (= (infix_at im2 int (fc13 im2 im1 t f) (t2tb3 e)) (infix_at im2 im1 f
                                                     (infix_at im1 int t
                                                     (t2tb3 e)))))))

;; int_iterate_attr_comm
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((op1 uni) (op2 uni) (t uni) (f uni) (i Int) (j Int))
  (=>
  (forall ((x Int))
  (forall ((y uni))
  (=> (sort im1 y)
  (= (infix_at im2 im2
     (infix_at (infix_mngt im2 im2) im2 op2
     (infix_at im2 im1 f (infix_at im1 int t (t2tb3 x))))
     (infix_at im2 im1 f y)) (infix_at im2 im1 f
                             (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 int t (t2tb3 x))) y))))))
  (=> (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
  (=> (iterable im1 op1)
  (=> (iterable im2 op2)
  (= (infix_at im2 im1 f (int_iterate im1 op1 t i j)) (int_iterate im2 op2
                                                      (fc13 im2 im1 t f) i j)))))))))

;; int_iterate_eq
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (infix_at im1 int f (t2tb3 k)) (infix_at im1 int g (t2tb3 k)))))
  (=> (=> (<= j i) (iterable im1 op1))
  (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 g i j)))))))

(declare-fun fc14 (ty uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt int im1)
  (fc14 im1 x x1 x2)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (l Int) (h Int) (a Int))
  (= (infix_at im1 int (fc14 im1 f l h) (t2tb3 a)) (infix_at im1 int f
                                                   (t2tb3
                                                   (+ (- h (+ a 1)) l)))))))

;; int_iterate_left_right
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (l Int) (k Int) (h Int))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (and (<= l k) (<= k h))
  (= (int_iterate im1 op1 f l k) (int_iterate im1 op1 (fc14 im1 f l h)
                                 (+ (- h k) l) h))))))))

;; int_iterate_eq_func
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (i Int) (j Int) (f uni) (g uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (p_injective im1 int f (t2tb4 (to_fset i j)))
  (=> (p_injective im1 int g (t2tb4 (to_fset i j)))
  (=>
  (= (map1 im1 int f (t2tb4 (to_fset i j))) (map1 im1 int g
                                            (t2tb4 (to_fset i j))))
  (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 g i j))))))))))

(declare-fun fc15 (ty (Array Int Int) uni) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x (Array Int Int)) (x1 uni)) (sort (infix_mngt int im1)
  (fc15 im1 x x1)))))

(declare-fun t2tb5 ((Array Int Int)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int Int))) (sort (infix_mngt int int) (t2tb5 x))))

(declare-fun tb2t5 (uni) (Array Int Int))

;; BridgeL
  (assert
  (forall ((i (Array Int Int)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb5 (tb2t5 j)) j) :pattern ((t2tb5 (tb2t5 j))) )))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f (Array Int Int)) (t uni) (b Int))
  (= (infix_at im1 int (fc15 im1 f t) (t2tb3 b)) (infix_at im1 int t
                                                 (infix_at int int (t2tb5 f)
                                                 (t2tb3 b)))))))

;; int_iterate_map
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t uni))
  (=> (=> (<= j i) (iterable im1 op1))
  (=> (commut im1 op1)
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset k l)))
  (= (int_iterate im1 op1 t k l) (int_iterate im1 op1 (fc15 im1 f t) i j))))))))

(declare-fun fc16 (ty uni Int) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 Int)) (sort (infix_mngt int im1) (fc16 im1 x x1)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (k Int) (b Int))
  (= (infix_at im1 int (fc16 im1 f k) (t2tb3 b)) (infix_at im1 int f
                                                 (t2tb3 (+ b k)))))))

;; int_iterate_transl
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int))
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 (fc16 im1 f k) (- i k)
                                 (- j k)))))))

(declare-fun fc17 (ty (Array Int Int) uni) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x (Array Int Int)) (x1 uni)) (sort (infix_mngt int im1)
  (fc17 im1 x x1)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f (Array Int Int)) (t uni) (b Int))
  (= (infix_at im1 int (fc17 im1 f t) (t2tb3 b)) (infix_at im1 int t
                                                 (infix_at int int (t2tb5 f)
                                                 (t2tb3 b)))))))

;; int_iterate_map_auto
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (i Int) (j Int) (f (Array Int Int)) (t uni))
  (=> (=> (<= j i) (iterable im1 op1))
  (=> (commut im1 op1)
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset i j)))
  (= (int_iterate im1 op1 t i j) (int_iterate im1 op1 (fc17 im1 f t) i j))))))))

;; add_im_re
  (assert
  (forall ((i complex) (j complex))
  (and
  (= (infix_pldt i j) (infix_pldt
                      (infix_pldt (t_real_part i) (t_real_part j))
                      (infix_asdt im
                      (infix_pldt (t_im_part i) (t_im_part j)))))
  (and
  (= (t_real_part (infix_pldt i j)) (infix_pldt (t_real_part i)
                                    (t_real_part j)))
  (= (t_im_part (infix_pldt i j)) (infix_pldt (t_im_part i) (t_im_part j)))))))

;; add_real_part
  (assert
  (forall ((i complex) (j complex))
  (= (infix_pldt (t_real_part i) (t_real_part j)) (t_real_part
                                                  (infix_pldt i j)))))

;; add_im_part
  (assert
  (forall ((i complex) (j complex))
  (= (infix_pldt (t_im_part i) (t_im_part j)) (t_im_part (infix_pldt i j)))))

;; add_real_part_rev
  (assert
  (forall ((i complex) (j complex))
  (= (t_real_part (infix_pldt i j)) (infix_pldt (t_real_part i)
                                    (t_real_part j)))))

;; add_im_part_rev
  (assert
  (forall ((i complex) (j complex))
  (= (t_im_part (infix_pldt i j)) (infix_pldt (t_im_part i) (t_im_part j)))))

;; mult_distr_add_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt a (infix_pldt b c)) (infix_pldt (infix_asdt a b)
                                     (infix_asdt a c)))))

;; mult_distr_minus
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt a (infix_mndt b c)) (infix_mndt (infix_asdt a b)
                                     (infix_asdt a c)))))

;; minus_out
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (prefix_mndt a) b) (prefix_mndt (infix_asdt a b)))))

;; mult_distr_add_r_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_pldt (infix_asdt a b) (infix_asdt a c)) (infix_asdt a
                                                    (infix_pldt b c)))))

;; mult_distr_minus_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_mndt (infix_asdt a b) (infix_asdt a c)) (infix_asdt a
                                                    (infix_mndt b c)))))

;; div_distr_add
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= a c_zero))
  (= (infix_sldt (infix_pldt b c) a) (infix_pldt (infix_sldt b a)
                                     (infix_sldt c a))))))

;; div_distr_minus
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= a c_zero))
  (= (infix_sldt (infix_mndt b c) a) (infix_mndt (infix_sldt b a)
                                     (infix_sldt c a))))))

;; div_distr_add_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= a c_zero))
  (= (infix_pldt (infix_sldt b a) (infix_sldt c a)) (infix_sldt
                                                    (infix_pldt b c) a)))))

;; div_distr_minus_rev
  (assert
  (forall ((a complex) (b complex) (c complex))
  (=> (not (= a c_zero))
  (= (infix_mndt (infix_sldt b a) (infix_sldt c a)) (infix_sldt
                                                    (infix_mndt b c) a)))))

;; mult_distr_add_l
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt (infix_pldt b c) a) (infix_pldt (infix_asdt a b)
                                     (infix_asdt a c)))))

;; mult_distr_minus_r
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt a (infix_mndt b c)) (infix_mndt (infix_asdt a b)
                                     (infix_asdt a c)))))

;; mult_distr_minus_ll
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt (infix_pldt (prefix_mndt b) c) a) (infix_pldt
                                                   (infix_asdt
                                                   (prefix_mndt a) b)
                                                   (infix_asdt a c)))))

;; mult_distr_minus_ri
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt (infix_mndt b c) a) (infix_mndt (infix_asdt a b)
                                     (infix_asdt a c)))))

;; minus_distr_op
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_mndt a (infix_pldt b c)) (infix_mndt (infix_mndt a b) c))))

;; mult_distr_minus_l
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt (infix_mndt b c) a) (infix_mndt (infix_asdt a b)
                                     (infix_asdt a c)))))

;; assoc_right
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_pldt a (infix_pldt b c)) (infix_pldt (infix_pldt a b) c))))

;; assoc_right_mult
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_asdt a (infix_asdt b c)) (infix_asdt (infix_asdt a b) c))))

;; minus_elim
  (assert
  (forall ((a complex) (b complex))
  (= (infix_mndt a b) (infix_pldt a (prefix_mndt b)))))

;; minus_eq_t
  (assert
  (forall ((a complex) (b complex) (aqt complex) (bqt complex))
  (=> (= a aqt) (=> (= b bqt) (= (infix_mndt a b) (infix_mndt aqt bqt))))))

;; minus_distr_elim
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_mndt a (infix_pldt b c)) (infix_pldt
                                     (infix_pldt a (prefix_mndt b))
                                     (prefix_mndt c)))))

;; plus_minus_distr_elim
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_pldt a (prefix_mndt (infix_pldt b c))) (infix_pldt
                                                   (infix_pldt a
                                                   (prefix_mndt b))
                                                   (prefix_mndt c)))))

;; def_by_minus
  (assert
  (forall ((x complex) (y complex) (z complex))
  (=> (= x (infix_mndt y z)) (= y (infix_pldt x z)))))

;; switch
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_pldt (infix_pldt a b) c) (infix_pldt (infix_pldt a c) b))))

;; meet_a_c
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt a c) b) d))))

;; meet_a_d
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt a d) b) c))))

;; meet_b_c
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt b c) a) d))))

;; meet_b_d
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt b d) a) c))))

;; meet_c_d
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt c d) a) b))))

;; inv_add
  (assert
  (forall ((a complex) (b complex))
  (= (infix_pldt (infix_pldt a (prefix_mndt a)) b) b)))

;; switch_m
  (assert
  (forall ((a complex) (b complex) (c complex))
  (= (infix_pldt (infix_pldt a b) c) (infix_pldt (infix_pldt a c) b))))

;; meet_a_c_m
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt a c) b) d))))

;; meet_a_d_m
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt a d) b) c))))

;; meet_b_c_m
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt b c) a) d))))

;; meet_b_d_m
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt b d) a) c))))

;; meet_c_d_m
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (= (infix_pldt (infix_pldt (infix_pldt a b) c) d) (infix_pldt
                                                    (infix_pldt
                                                    (infix_pldt c d) a) b))))

;; t_real_part_add
  (assert
  (forall ((a complex) (b complex))
  (= (t_real_part (infix_pldt a b)) (infix_pldt (t_real_part a)
                                    (t_real_part b)))))

;; t_real_part_subs
  (assert
  (forall ((a complex) (b complex))
  (= (t_real_part (infix_mndt a b)) (infix_mndt (t_real_part a)
                                    (t_real_part b)))))

;; t_im_part_add
  (assert
  (forall ((a complex) (b complex))
  (= (t_im_part (infix_pldt a b)) (infix_pldt (t_im_part a) (t_im_part b)))))

;; t_im_part_subs
  (assert
  (forall ((a complex) (b complex))
  (= (t_im_part (infix_mndt a b)) (infix_mndt (t_im_part a) (t_im_part b)))))

;; t_real_part_real
  (assert (forall ((a complex)) (=> (real_ a) (= (t_real_part a) a))))

;; t_real_part_im
  (assert
  (forall ((a complex)) (=> (pure_im_ a) (= (t_real_part a) c_zero))))

;; im_t_im_part_im
  (assert
  (forall ((a complex))
  (=> (pure_im_ a) (= (infix_asdt im (t_im_part a)) a))))

;; t_im_part_im
  (assert
  (forall ((a complex))
  (=> (pure_im_ a) (= (t_im_part a) (infix_asdt (prefix_mndt im) a)))))

;; t_im_part_real
  (assert (forall ((a complex)) (=> (real_ a) (= (t_im_part a) c_zero))))

;; a_div_b_mult_a
  (assert
  (forall ((a complex) (b complex) (c complex) (d complex))
  (=> (not (= b c_zero))
  (=> (not (= c c_zero))
  (=> (= d (infix_sldt c_one b))
  (=> (= a c) (= (infix_asdt (infix_sldt a b) (infix_sldt c_one c)) d)))))))

(declare-fun nonn_part (ty ty uni uni uni) uni)

;; nonn_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (nonn_part im1 a x x1 x2)))))

(declare-fun result2 (ty ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result2 im1 a x x1)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t uni) (e uni))
  (= (= (tb2t2 (infix_at bool a (result2 im1 a op1 t) e)) true)
  (not (neutral im1 op1 (infix_at im1 a t e)))))))

;; nonn_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (= (nonn_part im1 a op1 s t) (filter a (result2 im1 a op1 t) s)))))

;; nonn_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (forall ((e uni))
  (= (mem a e (nonn_part im1 a op1 s t))
  (and (mem a e s) (not (neutral im1 op1 (infix_at im1 a t e)))))))))

(declare-fun n_part (ty ty uni uni uni) uni)

;; n_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a) (n_part im1 a x x1 x2)))))

(declare-fun result3 (ty ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result3 im1 a x x1)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t uni) (e uni))
  (= (= (tb2t2 (infix_at bool a (result3 im1 a op1 t) e)) true) (neutral im1
  op1 (infix_at im1 a t e))))))

;; n_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (= (n_part im1 a op1 s t) (filter a (result3 im1 a op1 t) s)))))

;; n_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (forall ((e uni))
  (= (mem a e (n_part im1 a op1 s t))
  (and (mem a e s) (neutral im1 op1 (infix_at im1 a t e))))))))

;; nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (sort (set1 a) s)
  (=> (commut im1 op1)
  (and (= s (union1 a (nonn_part im1 a op1 s t) (n_part im1 a op1 s t)))
  (= (inter a (nonn_part im1 a op1 s t) (n_part im1 a op1 s t)) (empty a))))))))

;; iterate_neutral
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s) (= (infix_at im1 a t a1) (neutral_elt im1 op1)))))
  (= (iterate im1 a op1 s t) (neutral_elt im1 op1))))))))

;; iterate_nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s t) (iterate im1 a op1 (nonn_part im1 a op1 s t) t)))))))

(declare-fun couple (ty ty ty uni uni) uni)

;; couple_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort im1 (couple im1 b a x x1)))))

;; couple_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni))
  (forall ((a1 uni) (b1 uni))
  (= (couple im1 b a f (Tuple2 a b a1 b1)) (infix_at im1 b
                                           (infix_at (infix_mngt b im1) a f
                                           a1) b1))))))

;; null_product
  (assert
  (forall ((a complex) (b complex))
  (=> (= (infix_asdt a b) c_zero) (or (= a c_zero) (= b c_zero)))))

;; couple_value
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (couple im1 b a f o) (infix_at im1 b
                          (infix_at (infix_mngt b im1) a f (fir b a o))
                          (sec b a o))))))

;; couple_value_dev
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni) (a1 uni) (b1 uni))
  (=> (= o (Tuple2 a b a1 b1))
  (= (couple im1 b a f o) (infix_at im1 b
                          (infix_at (infix_mngt b im1) a f a1) b1))))))

(declare-fun infix_pldt_closure () (Array complex (Array complex complex)))

(declare-fun t2tb6 ((Array complex complex)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array complex complex))) (sort (infix_mngt complex1 complex1)
  (t2tb6 x))))

(declare-fun tb2t6 (uni) (Array complex complex))

;; BridgeL
  (assert
  (forall ((i (Array complex complex)))
  (! (= (tb2t6 (t2tb6 i)) i) :pattern ((t2tb6 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt complex1 complex1) j) (= (t2tb6 (tb2t6 j)) j)) :pattern (
  (t2tb6 (tb2t6 j))) )))

(declare-fun t2tb7 ((Array complex (Array complex complex))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array complex (Array complex complex)))) (sort
  (infix_mngt complex1 (infix_mngt complex1 complex1)) (t2tb7 x))))

(declare-fun tb2t7 (uni) (Array complex (Array complex complex)))

;; BridgeL
  (assert
  (forall ((i (Array complex (Array complex complex))))
  (! (= (tb2t7 (t2tb7 i)) i) :pattern ((t2tb7 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt complex1 (infix_mngt complex1 complex1)) j)
     (= (t2tb7 (tb2t7 j)) j)) :pattern ((t2tb7 (tb2t7 j))) )))

;; infix +._closure_def
  (assert
  (forall ((y complex) (y1 complex))
  (= (tb2t
     (infix_at complex1 complex1
     (infix_at (infix_mngt complex1 complex1) complex1
     (t2tb7 infix_pldt_closure) (t2tb y)) (t2tb y1))) (infix_pldt y y1))))

;; neutral_c_zero
  (assert
  (and (neutral complex1 (t2tb7 infix_pldt_closure) (t2tb c_zero)) (iterable
  complex1 (t2tb7 infix_pldt_closure))))

(declare-fun sum (ty uni uni) complex)

;; sum_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (= (sum a s t) (tb2t (iterate complex1 a (t2tb7 infix_pldt_closure) s t))))))

;; sum_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni)) (=> (is_empty a s) (= (sum a s t) c_zero)))))

;; sum_one
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (=> (= (cardinal a s) 1)
  (= (sum a s t) (tb2t (infix_at complex1 a t (choose a s))))))))

;; sum_add
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (not (mem b x s))
  (= (sum b (add b x s) f) (infix_pldt (tb2t (infix_at complex1 b f x))
                           (sum b s f)))))))

;; sum_plus_one
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni))
  (=> (< 1 (cardinal b s))
  (= (sum b s f) (infix_pldt (tb2t (infix_at complex1 b f (choose b s)))
                 (sum b (remove b (choose b s) s) f)))))))

;; sum_real
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s) (real_ (tb2t (infix_at complex1 a f a1))))))
  (=> (< 0 (cardinal a s)) (real_ (sum a s f)))))))

(declare-fun fc18 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b complex1) (fc18 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t uni) (b1 uni))
  (= (tb2t (infix_at complex1 b (fc18 b a f t) b1)) (tb2t
                                                    (infix_at complex1 a t
                                                    (infix_at a b f b1)))))))

;; map_sum_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (t uni))
  (=> (p_injective a b f s)
  (= (sum a (map1 a b f s) t) (sum b s (fc18 b a f t)))))))

(declare-fun fc19 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b complex1) (fc19 b x x1)))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t (infix_at complex1 b (fc19 b f g) k)) (infix_pldt
                                                 (tb2t
                                                 (infix_at complex1 b f k))
                                                 (tb2t
                                                 (infix_at complex1 b g k)))))))

;; sum_comp
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni))
  (= (sum b s (fc19 b f g)) (infix_pldt (sum b s f) (sum b s g))))))

(declare-fun fc20 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b complex1) (fc20 b x x1)))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t (infix_at complex1 b (fc20 b f g) k)) (infix_pldt
                                                 (tb2t
                                                 (infix_at complex1 b f k))
                                                 (tb2t
                                                 (infix_at complex1 b g k)))))))

;; sum_comp_rev
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni))
  (= (infix_pldt (sum b s f) (sum b s g)) (sum b s (fc20 b f g))))))

(declare-fun infix_mndt_closure () (Array complex (Array complex complex)))

;; infix -._closure_def
  (assert
  (forall ((y complex) (y1 complex))
  (= (tb2t
     (infix_at complex1 complex1
     (infix_at (infix_mngt complex1 complex1) complex1
     (t2tb7 infix_mndt_closure) (t2tb y)) (t2tb y1))) (infix_mndt y y1))))

;; sum_iter_
  (assert
  (and (opposite_n complex1 (t2tb7 infix_pldt_closure)
  (t2tb7 infix_mndt_closure) (t2tb c_zero))
  (and (opposite complex1 (t2tb7 infix_pldt_closure)
  (t2tb7 infix_mndt_closure))
  (and (opposite_com complex1 (t2tb7 infix_pldt_closure)
  (t2tb7 infix_mndt_closure)) (inverse_tuple complex1
  (t2tb7 infix_pldt_closure) (t2tb7 infix_mndt_closure) (t2tb c_zero))))))

;; neutral_zero
  (assert
  (= (tb2t (neutral_elt complex1 (t2tb7 infix_pldt_closure))) c_zero))

;; sum_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=>
  (forall ((x uni))
  (=> (sort a x)
  (=> (mem a x s)
  (= (tb2t (infix_at complex1 a f x)) (tb2t (infix_at complex1 a g x))))))
  (= (sum a s f) (sum a s g))))))

;; sum_eq_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (f uni) (g uni))
  (=> (= s sqt)
  (=>
  (forall ((x uni))
  (=> (sort a x)
  (=> (mem a x s)
  (= (tb2t (infix_at complex1 a f x)) (tb2t (infix_at complex1 a g x))))))
  (= (sum a s f) (sum a sqt g)))))))

;; sum_disjoint_transitivity
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni) (t uni))
  (=> (= (inter a s1 s2) (empty a))
  (= (sum a (union1 a s1 s2) t) (infix_pldt (sum a s1 t) (sum a s2 t)))))))

(declare-fun fc21 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc21 b a x x1)))))

(declare-fun fc22 (ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) complex1) (fc22 b a x)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s2 uni) (f uni) (a1 uni))
  (= (tb2t (infix_at complex1 a (fc21 b a s2 f) a1)) (sum b s2
                                                     (infix_at
                                                     (infix_mngt b complex1)
                                                     a f a1))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (o uni))
  (= (tb2t (infix_at complex1 (tuple21 a b) (fc22 b a f) o)) (tb2t
                                                             (infix_at
                                                             complex1 b
                                                             (infix_at
                                                             (infix_mngt b
                                                             complex1) a f
                                                             (fir b a o))
                                                             (sec b a o)))))))

;; sum_to_cartesian_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (f uni))
  (= (sum a s1 (fc21 b a s2 f)) (sum (tuple21 a b)
                                (cartesian_product b a s1 s2) (fc22 b a f))))))

(declare-fun fc23 (ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) complex1) (fc23 b a x)))))

(declare-fun fc24 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc24 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (o uni))
  (= (tb2t (infix_at complex1 (tuple21 a b) (fc23 b a f) o)) (tb2t
                                                             (infix_at
                                                             complex1 b
                                                             (infix_at
                                                             (infix_mngt b
                                                             complex1) a f
                                                             (fir b a o))
                                                             (sec b a o)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s2 uni) (f uni) (a1 uni))
  (= (tb2t (infix_at complex1 a (fc24 b a s2 f) a1)) (sum b s2
                                                     (infix_at
                                                     (infix_mngt b complex1)
                                                     a f a1))))))

;; sum_from_cartesian_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (f uni))
  (= (sum (tuple21 a b) (cartesian_product b a s1 s2) (fc23 b a f)) (sum a s1
                                                                    (fc24 b a
                                                                    s2 f))))))

(declare-fun ind_sum ((Array Int complex) Int Int) complex)

(declare-fun t2tb8 ((Array Int complex)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int complex))) (sort (infix_mngt int complex1)
  (t2tb8 x))))

(declare-fun tb2t8 (uni) (Array Int complex))

;; BridgeL
  (assert
  (forall ((i (Array Int complex)))
  (! (= (tb2t8 (t2tb8 i)) i) :pattern ((t2tb8 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int complex1) j) (= (t2tb8 (tb2t8 j)) j)) :pattern (
  (t2tb8 (tb2t8 j))) )))

;; ind_sum_def
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (= (ind_sum f i j) (tb2t
                     (int_iterate complex1 (t2tb7 infix_pldt_closure)
                     (t2tb8 f) i j)))))

;; ind_sum_to_int_iterate
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (= (ind_sum f i j) (tb2t
                     (int_iterate complex1 (t2tb7 infix_pldt_closure)
                     (t2tb8 f) i j)))))

;; ind_sum_cardone
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (= j (+ i 1))
  (= (ind_sum f i j) (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 i)))))))

;; ind_sum_right_extension
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_sum f i j) (infix_pldt (ind_sum f i (- j 1))
                     (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 (- j 1)))))))))

;; ind_sum_trans
  (assert
  (forall ((f (Array Int complex)) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (ind_sum f i j) (infix_pldt (ind_sum f i k) (ind_sum f k j))))))

;; ind_sum_plus_one
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_sum f i j) (infix_pldt
                     (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 i)))
                     (ind_sum f (+ i 1) j))))))

;; real_ind_sum
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j)) (real_
  (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k)))))) (real_
  (ind_sum f i j))))))

;; positive_ind_sum
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j)) (infix_lseqdt c_zero
  (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k)))))) (infix_lseqdt 
  c_zero (ind_sum f i j))))))

;; positive_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((k uni))
  (=> (sort a k)
  (=> (mem a k s) (infix_lseqdt c_zero (tb2t (infix_at complex1 a f k))))))
  (infix_lseqdt c_zero (sum a s f))))))

;; ind_sum_eq
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) (tb2t
                                                        (infix_at complex1
                                                        int (t2tb8 g)
                                                        (t2tb3 k))))))
  (= (ind_sum f i j) (ind_sum g i j)))))

(declare-fun fc25 ((Array Int complex) complex Int Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc25 f g i j)) (t2tb3 k))) 
  (ite (and (<= i k) (< k j))
  (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) g))))

;; ind_sum_eq_del_bound
  (assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int))
  (= (ind_sum (fc25 f g i j) i j) (ind_sum f i j))))

(declare-fun fc26 ((Array Int complex) complex Int Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc26 f g i j)) (t2tb3 k))) 
  (ite (and (<= i k) (< k j))
  (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) g))))

;; ind_sum_eq_del_bound_rev
  (assert
  (forall ((f (Array Int complex)) (g complex) (i Int) (j Int))
  (= (ind_sum f i j) (ind_sum (fc26 f g i j) i j))))

;; ind_sum_eq_gen
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i1 Int) (j1 Int)
  (i2 Int) (j2 Int))
  (=> (= i1 i2)
  (=> (= j1 j2)
  (=>
  (forall ((k Int))
  (=> (and (<= i1 k) (< k j1))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) (tb2t
                                                        (infix_at complex1
                                                        int (t2tb8 g)
                                                        (t2tb3 k))))))
  (= (ind_sum f i1 j1) (ind_sum g i2 j2)))))))

;; ind_sum_eq_bound
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
  (=> (= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= 0 k) (< k j))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) (tb2t
                                                        (infix_at complex1
                                                        int (t2tb8 g)
                                                        (t2tb3 k))))))
  (= (ind_sum f 0 i) (ind_sum g 0 j))))))

(declare-fun fc27 ((Array Int complex)
  (Array Int complex)) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc27 f g)) (t2tb3 k))) (infix_pldt
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 k)))
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 g)
                                                                 (t2tb3 k)))))))

;; ind_sum_comp
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
  (= (ind_sum (fc27 f g) i j) (infix_pldt (ind_sum f i j) (ind_sum g i j)))))

(declare-fun fc28 ((Array Int complex)
  (Array Int complex)) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc28 f g)) (t2tb3 k))) (infix_pldt
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 k)))
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 g)
                                                                 (t2tb3 k)))))))

;; ind_sum_comp_rev
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (iqt Int)
  (j Int) (jqt Int))
  (=> (= i iqt)
  (=> (= j jqt)
  (= (infix_pldt (ind_sum f i j) (ind_sum g iqt jqt)) (ind_sum (fc28 f g) i
                                                      j))))))

;; ind_sum_to_iterate
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (= (ind_sum f i j) (tb2t
                     (iterate complex1 int (t2tb7 infix_pldt_closure)
                     (t2tb4 (to_fset i j)) (t2tb8 f))))))

;; ind_sum_to_sum
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (= (ind_sum f i j) (sum int (t2tb4 (to_fset i j)) (t2tb8 f)))))

(declare-fun fc29 ((Array Int Int) (Array Int complex)) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc29 f t)) (t2tb3 b))) (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 t)
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 b)))))))

;; map_ind_sum_eq
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t (Array Int complex)))
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset k l))) (= (ind_sum t k l) (ind_sum (fc29 f t) i j)))))

(declare-fun fc30 (ty uni complex) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 complex)) (sort (infix_mngt a complex1)
  (fc30 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (c complex) (x uni))
  (= (tb2t (infix_at complex1 a (fc30 a f c) x)) (infix_asdt c
                                                 (tb2t
                                                 (infix_at complex1 a f x)))))))

;; sum_scal
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (c complex))
  (= (sum a s (fc30 a f c)) (infix_asdt c (sum a s f))))))

(declare-fun fc31 (ty uni complex) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 complex)) (sort (infix_mngt a complex1)
  (fc31 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (c complex) (x uni))
  (= (tb2t (infix_at complex1 a (fc31 a f c) x)) (infix_asdt
                                                 (tb2t
                                                 (infix_at complex1 a f x))
                                                 c)))))

;; sum_scal_right
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (c complex))
  (= (sum a s (fc31 a f c)) (infix_asdt (sum a s f) c)))))

(declare-fun fc32 (ty uni complex) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 complex)) (sort (infix_mngt a complex1)
  (fc32 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (c complex) (x uni))
  (= (tb2t (infix_at complex1 a (fc32 a f c) x)) (infix_asdt
                                                 (tb2t
                                                 (infix_at complex1 a f x))
                                                 c)))))

;; sum_scal_rev_right
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (c complex))
  (= (infix_asdt (sum a s f) c) (sum a s (fc32 a f c))))))

(declare-fun fc33 (ty uni complex) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 complex)) (sort (infix_mngt a complex1)
  (fc33 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (c complex) (x uni))
  (= (tb2t (infix_at complex1 a (fc33 a f c) x)) (infix_asdt c
                                                 (tb2t
                                                 (infix_at complex1 a f x)))))))

;; sum_scal_rev
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (c complex))
  (= (infix_asdt c (sum a s f)) (sum a s (fc33 a f c))))))

(declare-fun fc34 ((Array Int complex) complex) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc34 f a)) (t2tb3 i))) (infix_asdt
                                                                 a
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 i)))))))

;; ind_sum_scal
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
  (= (ind_sum (fc34 f a) i j) (infix_asdt a (ind_sum f i j)))))

(declare-fun fc35 ((Array Int complex) complex) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc35 f a)) (t2tb3 i))) (infix_asdt
                                                                 a
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 i)))))))

;; ind_sum_scal_rev
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
  (= (infix_asdt a (ind_sum f i j)) (ind_sum (fc35 f a) i j))))

(declare-fun fc36 ((Array Int complex) complex) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc36 f a)) (t2tb3 i))) (infix_asdt
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 i)))
                                                                 a))))

;; scal_ind_sum
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
  (= (ind_sum (fc36 f a) i j) (infix_asdt (ind_sum f i j) a))))

(declare-fun fc37 ((Array Int complex) complex) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc37 f a)) (t2tb3 i))) (infix_asdt
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 i)))
                                                                 a))))

;; scal_ind_sum_rev
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (a complex))
  (= (infix_asdt (ind_sum f i j) a) (ind_sum (fc37 f a) i j))))

(declare-fun fc38 ((Array Int complex) complex) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc38 f a)) (t2tb3 i))) (infix_asdt
                                                                 a
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 i)))))))

;; sum_scal_gen
  (assert
  (forall ((f (Array Int complex)) (s (set Int)))
  (forall ((a complex))
  (= (sum int (t2tb4 s) (t2tb8 (fc38 f a))) (infix_asdt a
                                            (sum int (t2tb4 s) (t2tb8 f)))))))

(declare-fun fc39 ((Array Int complex) complex) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (a complex) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc39 f a)) (t2tb3 i))) (infix_asdt
                                                                 a
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (t2tb3 i)))))))

;; ind_sum_scal_gen
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (forall ((a complex))
  (= (ind_sum (fc39 f a) i j) (infix_asdt a (ind_sum f i j))))))

;; int_int_iterate_def_empty
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= j i)
  (=> (iterable im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (neutral_elt im1 op1)))))))

;; int_int_iterate_def_plus_one
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (< i j)
  (=> (iterable im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (infix_at im1 im1
                                         (infix_at (infix_mngt im1 im1) im1
                                         op1
                                         (int_iterate im1 op1
                                         (infix_at (infix_mngt int im1) 
                                         int f (t2tb3 i)) k l))
                                         (int_int_iterate im1 op1 f (+ i 1) j
                                         k l))))))))

(declare-fun fc40 (ty uni uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc40 im1 x x1 x2 x3)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
  (= (infix_at im1 int (fc40 im1 op1 f k l) (t2tb3 a)) (int_iterate im1 op1
                                                       (infix_at
                                                       (infix_mngt int im1)
                                                       int f (t2tb3 a)) k l)))))

;; int_int_iterate_to_int_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (iterable im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (int_iterate im1 op1
                                         (fc40 im1 op1 f k l) i j)))))))

(declare-fun fc41 (ty uni uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc41 im1 x x1 x2 x3)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
  (= (infix_at im1 int (fc41 im1 op1 f k l) (t2tb3 a)) (int_iterate im1 op1
                                                       (infix_at
                                                       (infix_mngt int im1)
                                                       int f (t2tb3 a)) k l)))))

;; int_iterate_to_int_int_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 (fc41 im1 op1 f k l) i j) (int_int_iterate im1 op1
                                                    f i j k l)))))))

(declare-fun fc42 (ty uni) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 int int) im1) (fc42 im1 x)))))

(declare-fun t2tb9 ((tuple2 Int Int)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple2 Int Int))) (sort (tuple21 int int) (t2tb9 x))))

(declare-fun tb2t9 (uni) (tuple2 Int Int))

;; BridgeL
  (assert
  (forall ((i (tuple2 Int Int)))
  (! (= (tb2t9 (t2tb9 i)) i) :pattern ((t2tb9 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb9 (tb2t9 j)) j) :pattern ((t2tb9 (tb2t9 j))) )))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (o (tuple2 Int Int)))
  (= (infix_at im1 (tuple21 int int) (fc42 im1 f) (t2tb9 o)) (infix_at im1
                                                             int
                                                             (infix_at
                                                             (infix_mngt 
                                                             int im1) 
                                                             int f
                                                             (fir int 
                                                             int (t2tb9 o)))
                                                             (sec int 
                                                             int (t2tb9 o)))))))

(declare-fun t2tb10 ((set (tuple2 Int Int))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple2 Int Int)))) (sort (set1 (tuple21 int int))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (tuple2 Int Int)))

;; BridgeL
  (assert
  (forall ((i (set (tuple2 Int Int))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb10 (tb2t10 j)) j) :pattern ((t2tb10 (tb2t10 j))) )))

;; int_int_iterate_to_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (iterate im1 (tuple21 int int) op1
                                         (cartesian_product int int
                                         (t2tb4 (to_fset i j))
                                         (t2tb4 (to_fset k l))) (fc42 im1 f)))))))))

(declare-fun fc43 (ty ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc43 im1 b a x)))))

(declare-fun fc44 (ty ty ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 b a) im1) (fc44 im1 b a x)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 a b) (fc43 im1 b a f) o) (infix_at im1 b
                                                     (infix_at
                                                     (infix_mngt b im1) a f
                                                     (fir b a o))
                                                     (sec b a o))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 b a) (fc44 im1 b a f) o) (infix_at im1 b
                                                     (infix_at
                                                     (infix_mngt b im1) a f
                                                     (sec a b o))
                                                     (fir a b o))))))

;; iterate_commute
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 (tuple21 a b) op1 (cartesian_product b a s1 s2)
     (fc43 im1 b a f)) (iterate im1 (tuple21 b a) op1
                       (cartesian_product a b s2 s1) (fc44 im1 b a f))))))))

(declare-fun fc45 (ty ty ty uni uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a im1)
  (fc45 im1 b a x x1 x2)))))

(declare-fun fc46 (ty ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a im1) (fc46 im1 b a x x1)))))

(declare-fun fc47 (ty ty ty uni uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt b im1)
  (fc47 im1 b a x x1 x2)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s2 uni) (f uni) (a1 uni))
  (= (infix_at im1 a (fc45 im1 b a op1 s2 f) a1) (iterate im1 b op1 s2
                                                 (infix_at (infix_mngt b im1)
                                                 a f a1))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (a2 uni) (a1 uni))
  (= (infix_at im1 a (fc46 im1 b a f a2) a1) (infix_at im1 b
                                             (infix_at (infix_mngt b im1) a f
                                             a1) a2)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (f uni) (a2 uni))
  (= (infix_at im1 b (fc47 im1 b a op1 s1 f) a2) (iterate im1 a op1 s1
                                                 (fc46 im1 b a f a2))))))

;; iterate_commute_
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s1 (fc45 im1 b a op1 s2 f)) (iterate im1 b op1 s2
                                                    (fc47 im1 b a op1 s1 f))))))))

(declare-fun fc48 (ty uni) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni)) (sort (infix_mngt int (infix_mngt int im1))
  (fc48 im1 x)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (a Int) (b Int))
  (= (infix_at im1 int
     (infix_at (infix_mngt int im1) int (fc48 im1 f) (t2tb3 a)) (t2tb3 b)) 
  (infix_at im1 int (infix_at (infix_mngt int im1) int f (t2tb3 b))
  (t2tb3 a))))))

;; int_int_iterate_commute
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (<= i j)
  (=> (<= k l)
  (= (int_int_iterate im1 op1 f i j k l) (int_int_iterate im1 op1
                                         (fc48 im1 f) k l i j)))))))))

(declare-fun fc49 (ty uni uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc49 im1 x x1 x2 x3)))))

(declare-fun fc50 (ty uni Int) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 Int)) (sort (infix_mngt int im1) (fc50 im1 x x1)))))

(declare-fun fc51 (ty uni uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc51 im1 x x1 x2 x3)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
  (= (infix_at im1 int (fc49 im1 op1 f k l) (t2tb3 a)) (int_iterate im1 op1
                                                       (infix_at
                                                       (infix_mngt int im1)
                                                       int f (t2tb3 a)) k l)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (a Int) (b Int))
  (= (infix_at im1 int (fc50 im1 f a) (t2tb3 b)) (infix_at im1 int
                                                 (infix_at
                                                 (infix_mngt int im1) 
                                                 int f (t2tb3 b)) (t2tb3 a))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (a Int))
  (= (infix_at im1 int (fc51 im1 op1 f i j) (t2tb3 a)) (int_iterate im1 op1
                                                       (fc50 im1 f a) i j)))))

;; int_iterate_commute
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (<= i j)
  (=> (<= k l)
  (= (int_iterate im1 op1 (fc49 im1 op1 f k l) i j) (int_iterate im1 op1
                                                    (fc51 im1 op1 f i j) k l)))))))))

(declare-fun fc52 ((Array Int (Array Int complex)) Int
  Int) (Array Int complex))

(declare-fun fc53 ((Array Int (Array Int complex)) Int) (Array Int complex))

(declare-fun fc54 ((Array Int (Array Int complex)) Int
  Int) (Array Int complex))

(declare-fun t2tb11 ((Array Int (Array Int complex))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int (Array Int complex)))) (sort
  (infix_mngt int (infix_mngt int complex1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (Array Int (Array Int complex)))

;; BridgeL
  (assert
  (forall ((i (Array Int (Array Int complex))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int (infix_mngt int complex1)) j)
     (= (t2tb11 (tb2t11 j)) j)) :pattern ((t2tb11 (tb2t11 j))) )))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int complex))) (k Int) (l Int) (k1 Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc52 f k l)) (t2tb3 k1))) (ind_sum
                                                                    (tb2t8
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    complex1)
                                                                    int
                                                                    (t2tb11
                                                                    f)
                                                                    (t2tb3
                                                                    k1))) k
                                                                    l))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int complex))) (k1 Int) (k2 Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc53 f k1)) (t2tb3 k2))) (tb2t
                                                                   (infix_at
                                                                   complex1
                                                                   int
                                                                   (infix_at
                                                                   (infix_mngt
                                                                   int
                                                                   complex1)
                                                                   int
                                                                   (t2tb11 f)
                                                                   (t2tb3 k2))
                                                                   (t2tb3 k1))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int complex))) (i Int) (j Int) (k1 Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc54 f i j)) (t2tb3 k1))) (ind_sum
                                                                    (fc53 f
                                                                    k1) i j))))

;; ind_sum_commute
  (assert
  (forall ((f (Array Int (Array Int complex))) (i Int) (j Int) (k Int)
  (l Int))
  (=> (<= i j)
  (=> (<= k l) (= (ind_sum (fc52 f k l) i j) (ind_sum (fc54 f i j) k l))))))

(declare-fun fc55 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc55 b a x x1)))))

(declare-fun fc56 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc56 b a x x1)))))

(declare-fun fc57 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b complex1) (fc57 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (sb uni) (a1 uni))
  (= (tb2t (infix_at complex1 a (fc55 b a f sb) a1)) (sum b sb
                                                     (infix_at
                                                     (infix_mngt b complex1)
                                                     a f a1))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (b1 uni) (a1 uni))
  (= (tb2t (infix_at complex1 a (fc56 b a f b1) a1)) (tb2t
                                                     (infix_at complex1 b
                                                     (infix_at
                                                     (infix_mngt b complex1)
                                                     a f a1) b1))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (sa uni) (b1 uni))
  (= (tb2t (infix_at complex1 b (fc57 b a f sa) b1)) (sum a sa
                                                     (fc56 b a f b1))))))

;; sum_commute
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (sa uni) (sb uni))
  (= (sum a sa (fc55 b a f sb)) (sum b sb (fc57 b a f sa))))))

(declare-fun non_c_zero (ty uni uni) uni)

;; non_c_zero_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (non_c_zero a x x1)))))

;; non_c_zero_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (= (non_c_zero a s t) (nonn_part complex1 a (t2tb7 infix_pldt_closure) s t)))))

;; non_c_zero_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (forall ((e uni))
  (= (mem a e (non_c_zero a s t))
  (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero))))))))

;; get_non_c_zero_member
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (e uni))
  (=> (mem a e (non_c_zero a s t))
  (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero)))))))

;; set_non_c_zero_member
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (e uni))
  (=> (mem a e s)
  (=> (not (= (tb2t (infix_at complex1 a t e)) c_zero)) (mem a e
  (non_c_zero a s t)))))))

;; set_non_c_zero_member_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (forall ((e uni))
  (=> (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero)))
  (mem a e (non_c_zero a s t)))))))

;; set_non_c_zero_member_gen_
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (forall ((e uni))
  (=> (and (mem a e s) (not (= (tb2t (infix_at complex1 a t e)) c_zero)))
  (mem a e (non_c_zero a s t)))))))

;; sum_nullity_partition
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni)) (= (sum a s t) (sum a (non_c_zero a s t) t)))))

(declare-fun fc58 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc58 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t uni) (b uni))
  (= (tb2t (infix_at complex1 a (fc58 a f t) b)) (tb2t
                                                 (infix_at complex1 a t
                                                 (infix_at a a f b)))))))

;; non_null_map
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (t uni))
  (= (non_c_zero a (map1 a a f s) t) (map1 a a f
                                     (non_c_zero a s (fc58 a f t)))))))

(declare-fun fc59 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc59 a x x1)))))

(declare-fun fc60 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc60 a x x1)))))

(declare-fun fc61 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc61 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t uni) (b uni))
  (= (tb2t (infix_at complex1 a (fc59 a f t) b)) (tb2t
                                                 (infix_at complex1 a t
                                                 (infix_at a a f b)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t uni) (b uni))
  (= (tb2t (infix_at complex1 a (fc60 a f t) b)) (tb2t
                                                 (infix_at complex1 a t
                                                 (infix_at a a f b)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t uni) (b uni))
  (= (tb2t (infix_at complex1 a (fc61 a f t) b)) (tb2t
                                                 (infix_at complex1 a t
                                                 (infix_at a a f b)))))))

;; map_sum_eq_nonnull
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (t uni))
  (=> (p_bijective a a f (non_c_zero a s (fc59 a f t))
  (non_c_zero a (map1 a a f s) t))
  (= (sum a (non_c_zero a (map1 a a f s) t) t) (sum a
                                               (non_c_zero a s (fc60 a f t))
                                               (fc61 a f t)))))))

;; sum_null_but_one
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (=> (= (cardinal a (non_c_zero a s t)) 1)
  (= (sum a s t) (tb2t
                 (infix_at complex1 a t (element a (non_c_zero a s t)))))))))

;; sum_null
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (=> (= (cardinal a (non_c_zero a s t)) 0) (= (sum a s t) c_zero)))))

;; sum_null_
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) c_zero))))
  (= (sum a s t) c_zero)))))

;; sum_null_forall
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) c_zero))))
  (= (sum a s t) c_zero)))))

;; ind_sum_null
  (assert
  (forall ((t (Array Int complex)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 k))) c_zero)))
  (= (ind_sum t i j) c_zero))))

;; sum_null_but_one_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (elt uni))
  (=> (and (mem a elt s) (not (= (tb2t (infix_at complex1 a t elt)) c_zero)))
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s)
  (=> (not (= a1 elt)) (= (tb2t (infix_at complex1 a t a1)) c_zero)))))
  (= (sum a s t) (tb2t (infix_at complex1 a t elt))))))))

;; sum_null_but_maybe_one_elt
  (assert
  (forall ((a ty))
  (forall ((t uni) (s uni) (elt uni))
  (=> (mem a elt s)
  (=>
  (forall ((k uni))
  (=> (sort a k)
  (=> (mem a k s)
  (=> (not (= k elt)) (= (tb2t (infix_at complex1 a t k)) c_zero)))))
  (= (sum a s t) (tb2t (infix_at complex1 a t elt))))))))

;; sum_null_but_maybe_two_elt
  (assert
  (forall ((a ty))
  (forall ((t uni) (s uni) (elt uni) (eltqt uni))
  (=> (sort a elt)
  (=> (sort a eltqt)
  (=> (mem a elt s)
  (=> (mem a eltqt s)
  (=> (not (= elt eltqt))
  (=>
  (forall ((k uni))
  (=> (sort a k)
  (=> (mem a k s)
  (=> (not (= k elt))
  (=> (not (= k eltqt)) (= (tb2t (infix_at complex1 a t k)) c_zero))))))
  (= (sum a s t) (infix_pldt (tb2t (infix_at complex1 a t elt))
                 (tb2t (infix_at complex1 a t eltqt)))))))))))))

;; ind_sum_null_but_maybe_one_elt
  (assert
  (forall ((t (Array Int complex)) (i Int) (j Int) (ind Int))
  (=> (and (<= i ind) (< ind j))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (=> (not (= k ind))
  (= (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 k))) c_zero))))
  (= (ind_sum t i j) (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 ind))))))))

;; ind_sum_null_but_maybe_two_elt
  (assert
  (forall ((t (Array Int complex)) (i Int) (j Int) (ind Int) (indqt Int))
  (=> (and (<= i ind) (< ind j))
  (=> (and (<= i indqt) (< indqt j))
  (=> (not (= ind indqt))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (=> (not (= k ind))
  (=> (not (= k indqt))
  (= (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 k))) c_zero)))))
  (= (ind_sum t i j) (infix_pldt
                     (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 ind)))
                     (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 indqt)))))))))))

(declare-fun choose_filter (ty uni uni) uni)

;; choose_filter_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort a (choose_filter a x x1)))))

;; choose_filter_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni))
  (=>
  (exists ((e uni)) (and (mem a e s) (= (tb2t2 (infix_at bool a p e)) true)))
  (ite (= (tb2t2 (infix_at bool a p (choose a s))) true)
  (= (choose_filter a s p) (choose a s))
  (= (choose_filter a s p) (choose_filter a (remove a (choose a s) s) p)))))))

;; choose_filter_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni))
  (=>
  (exists ((e uni)) (and (mem a e s) (= (tb2t2 (infix_at bool a p e)) true)))
  (and (= (tb2t2 (infix_at bool a p (choose_filter a s p))) true) (mem a
  (choose_filter a s p) s))))))

(declare-fun my_filter (ty uni uni) uni)

;; my_filter_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (my_filter a x x1)))))

;; my_filter_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni))
  (ite (is_empty a s) (= (my_filter a s p) (empty a))
  (ite (= (tb2t2 (infix_at bool a p (choose a s))) true)
  (= (my_filter a s p) (add a (choose a s)
                       (my_filter a (remove a (choose a s) s) p)))
  (= (my_filter a s p) (my_filter a (remove a (choose a s) s) p)))))))

;; my_filter_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni))
  (and
  (forall ((e uni))
  (=> (mem a e s)
  (= (= (tb2t2 (infix_at bool a p e)) true) (mem a e (my_filter a s p)))))
  (and (forall ((e uni)) (=> (mem a e (my_filter a s p)) (mem a e s)))
  (and (<= 0 (cardinal a (my_filter a s p)))
  (<= (cardinal a (my_filter a s p)) (cardinal a s))))))))

;; in_my_filter
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni) (e uni))
  (=> (mem a e s)
  (=> (= (tb2t2 (infix_at bool a p e)) true) (mem a e (my_filter a s p)))))))

;; not_in_my_filter_set
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni) (e uni))
  (=> (not (mem a e s)) (not (mem a e (my_filter a s p)))))))

;; not_in_my_filter_filter
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni) (e uni))
  (=> (not (= (tb2t2 (infix_at bool a p e)) true))
  (not (mem a e (my_filter a s p)))))))

;; in_my_filter_set
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni) (e uni))
  (=> (mem a e (my_filter a s p)) (mem a e s)))))

;; in_my_filter_filter
  (assert
  (forall ((a ty))
  (forall ((s uni) (p uni) (e uni))
  (=> (mem a e (my_filter a s p)) (= (tb2t2 (infix_at bool a p e)) true)))))

;; my_filter_inter
  (assert
  (forall ((a ty))
  (forall ((s uni) (p1 uni) (p2 uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (=> (= (tb2t2 (infix_at bool a p1 e)) true)
  (not (= (tb2t2 (infix_at bool a p2 e)) true))))))
  (= (inter a (my_filter a s p1) (my_filter a s p2)) (empty a))))))

;; my_filter_union
  (assert
  (forall ((a ty))
  (forall ((s uni) (p1 uni) (p2 uni))
  (=> (sort (set1 a) s)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (=> (not (= (tb2t2 (infix_at bool a p1 e)) true))
  (= (tb2t2 (infix_at bool a p2 e)) true)))))
  (= (union1 a (my_filter a s p1) (my_filter a s p2)) s))))))

(declare-fun fc62 ((Array Int Int) (Array Int complex)) (Array Int complex))

;; fc_def
  (assert
  (forall ((g (Array Int Int)) (f (Array Int complex)) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc62 g f)) (t2tb3 k))) (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 f)
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 g)
                                                                 (t2tb3 k)))))))

(declare-fun t2tb12 ((Array Int Bool)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int Bool))) (sort (infix_mngt int bool) (t2tb12 x))))

(declare-fun tb2t12 (uni) (Array Int Bool))

;; BridgeL
  (assert
  (forall ((i (Array Int Bool)))
  (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int bool) j) (= (t2tb12 (tb2t12 j)) j)) :pattern (
  (t2tb12 (tb2t12 j))) )))

;; ind_sum_map_filter
  (assert
  (forall ((n Int) (nqt Int) (g (Array Int Int)) (f (Array Int complex))
  (p (Array Int Bool)))
  (=> (and (<= 0 nqt) (<= nqt n))
  (=> (p_injective int int (t2tb5 g) (t2tb4 (to_fset 0 nqt)))
  (=>
  (forall ((k Int))
  (=> (and (<= 0 k) (< k n))
  (=> (not (= (tb2t2 (infix_at bool int (t2tb12 p) (t2tb3 k))) true))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) c_zero))))
  (=>
  (forall ((k Int))
  (=> (and (<= 0 k) (< k nqt))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 g) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 g) (t2tb3 k))) n))))
  (=>
  (forall ((k Int))
  (=> (and (<= 0 k) (< k n))
  (= (= (tb2t2 (infix_at bool int (t2tb12 p) (t2tb3 k))) true)
  (exists ((ant Int))
  (and (and (<= 0 ant) (< ant nqt))
  (= k (tb2t3 (infix_at int int (t2tb5 g) (t2tb3 ant)))))))))
  (= (ind_sum f 0 n) (ind_sum (fc62 g f) 0 nqt)))))))))

(declare-fun infix_asdt_closure () (Array complex (Array complex complex)))

;; infix *._closure_def
  (assert
  (forall ((y complex) (y1 complex))
  (= (tb2t
     (infix_at complex1 complex1
     (infix_at (infix_mngt complex1 complex1) complex1
     (t2tb7 infix_asdt_closure) (t2tb y)) (t2tb y1))) (infix_asdt y y1))))

;; neutral_c_one
  (assert
  (and (neutral complex1 (t2tb7 infix_asdt_closure) (t2tb c_one)) (iterable
  complex1 (t2tb7 infix_asdt_closure))))

;; product_iter
  (assert
  (and (op_neutral_left complex1 (t2tb7 infix_asdt_closure) (t2tb c_one))
  (and
  (and (op_neutral_right complex1 (t2tb7 infix_asdt_closure) (t2tb c_one))
  (op_assoc complex1 (t2tb7 infix_asdt_closure)))
  (and (commut complex1 (t2tb7 infix_asdt_closure)) (iterates complex1
  (t2tb7 infix_asdt_closure) (t2tb c_one))))))

(declare-fun product (ty uni uni) complex)

;; product_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (= (product a s t) (tb2t
                     (iterate complex1 a (t2tb7 infix_asdt_closure) s t))))))

;; product_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (tqt uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t (infix_at complex1 a t e)) (tb2t (infix_at complex1 a tqt e))))))
  (= (product a s t) (product a s tqt))))))

;; product_eq_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (t uni) (tqt uni))
  (=> (= s sqt)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t (infix_at complex1 a t e)) (tb2t (infix_at complex1 a tqt e))))))
  (= (product a s t) (product a sqt tqt)))))))

;; product_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni)) (=> (is_empty a s) (= (product a s f) c_one)))))

;; product_iter_
  (assert (iterable complex1 (t2tb7 infix_asdt_closure)))

;; add_product
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (not (mem a x s))
  (= (product a (add a x s) f) (infix_asdt (tb2t (infix_at complex1 a f x))
                               (product a s f)))))))

;; product_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (not (mem a x s))
  (= (product a (add a x s) f) (infix_asdt (product a s f)
                               (tb2t (infix_at complex1 a f x))))))))

;; neutral_one
  (assert (= (tb2t (neutral_elt complex1 (t2tb7 infix_asdt_closure))) 
  c_one))

(declare-fun ind_product ((Array Int complex) Int Int) complex)

;; ind_product_def
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (= (ind_product f i j) (tb2t
                         (int_iterate complex1 (t2tb7 infix_asdt_closure)
                         (t2tb8 f) i j)))))

;; ind_product_eq
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) (tb2t
                                                        (infix_at complex1
                                                        int (t2tb8 g)
                                                        (t2tb3 k))))))
  (= (ind_product f i j) (ind_product g i j)))))

;; ind_product_cardone
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (= j (+ i 1))
  (= (ind_product f i j) (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 i)))))))

;; ind_product_eq_gen
  (assert
  (forall ((f (Array Int complex)) (g (Array Int complex)) (i1 Int) (j1 Int)
  (i2 Int) (j2 Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i1 k) (< k j1))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) (tb2t
                                                        (infix_at complex1
                                                        int (t2tb8 g)
                                                        (t2tb3 k))))))
  (=> (= i1 i2)
  (=> (= j1 j2) (= (ind_product f i1 j1) (ind_product g i2 j2)))))))

;; ind_product_right_extension
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_product f i j) (infix_asdt (ind_product f i (- j 1))
                         (tb2t
                         (infix_at complex1 int (t2tb8 f) (t2tb3 (- j 1)))))))))

;; ind_product_left_extension
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_product f i j) (infix_asdt
                         (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 i)))
                         (ind_product f (+ i 1) j))))))

;; ind_product_to_product
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (= (ind_product f i j) (product int (t2tb4 (to_fset i j)) (t2tb8 f)))))

(declare-fun fc63 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b complex1) (fc63 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t uni) (b1 uni))
  (= (tb2t (infix_at complex1 b (fc63 b a f t) b1)) (tb2t
                                                    (infix_at complex1 a t
                                                    (infix_at a b f b1)))))))

;; map_product_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (t uni))
  (=> (p_injective a b f s)
  (= (product a (map1 a b f s) t) (product b s (fc63 b a f t)))))))

(declare-fun fc64 ((Array Int Int) (Array Int complex)) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int complex)) (b Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc64 f t)) (t2tb3 b))) (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 t)
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 b)))))))

;; map_ind_product_eq
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t (Array Int complex)))
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset k l)))
  (= (ind_product t k l) (ind_product (fc64 f t) i j)))))

;; ind_product_right_extension_comm
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (< i j)
  (= (infix_asdt (ind_product f i (- j 1))
     (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 (- j 1))))) (ind_product f
                                                               i j)))))

(declare-fun t2tb13 ((set complex)) uni)

;; t2tb_sort
  (assert (forall ((x (set complex))) (sort (set1 complex1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (set complex))

;; BridgeL
  (assert
  (forall ((i (set complex)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 complex1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; ind_product_eq_func
  (assert
  (forall ((i Int) (j Int) (f1 (Array Int complex)) (f2 (Array Int complex)))
  (=> (p_injective complex1 int (t2tb8 f1) (t2tb4 (to_fset i j)))
  (=> (p_injective complex1 int (t2tb8 f2) (t2tb4 (to_fset i j)))
  (=>
  (= (tb2t13 (map1 complex1 int (t2tb8 f1) (t2tb4 (to_fset i j)))) (tb2t13
                                                                   (map1
                                                                   complex1
                                                                   int
                                                                   (t2tb8 f2)
                                                                   (t2tb4
                                                                   (to_fset i
                                                                   j)))))
  (= (ind_product f1 i j) (ind_product f2 i j)))))))

;; ind_product_trans
  (assert
  (forall ((f (Array Int complex)) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (ind_product f i j) (infix_asdt (ind_product f i k) (ind_product f k j))))))

;; ind_product_zero_pre
  (assert
  (forall ((f (Array Int complex)) (i Int) (t Int) (j Int))
  (=> (and (<= i t) (< t j))
  (=> (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 t))) c_zero)
  (= (ind_product f i j) c_zero)))))

;; ind_product_zero
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (exists ((t Int))
  (and (and (<= i t) (< t j))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 t))) c_zero)))
  (= (ind_product f i j) c_zero)))))

;; ind_product_zero_elt
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int) (t Int))
  (=> (<= i j)
  (=> (and (<= i t) (< t j))
  (=> (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 t))) c_zero)
  (= (ind_product f i j) c_zero))))))

;; ind_product_const_c_one
  (assert
  (forall ((f (Array Int complex)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((t Int))
  (=> (and (<= i t) (< t j))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 t))) c_one)))
  (= (ind_product f i j) c_one)))))

(declare-fun set2 (ty ty uni uni uni) uni)

;; set_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a b)
  (set2 b a x x1 x2)))))

(declare-sort matrix 1)

(declare-fun matrix1 (ty) ty)

(declare-fun elts (ty uni) uni)

;; elts_sort
  (assert
  (forall ((a ty))
  (forall ((x uni)) (sort (infix_mngt int (infix_mngt int a)) (elts a x)))))

(declare-fun rows (ty uni) Int)

(declare-fun columns (ty uni) Int)

;; matrix'invariant
  (assert
  (forall ((a ty))
  (forall ((self uni))
  (! (and (< 0 (rows a self)) (< 0 (columns a self))) :pattern ((columns a
                                                                self)) :pattern (
  (rows a self)) ))))

(declare-fun valid_index (ty uni Int Int) Bool)

;; valid_index_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int))
  (= (valid_index a a1 r c)
  (and (and (<= 0 r) (< r (rows a a1))) (and (<= 0 c) (< c (columns a a1))))))))

(declare-fun equal_size (ty uni uni) Bool)

;; equal_size_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni))
  (= (equal_size a a1 b)
  (and (= (rows a a1) (rows a b)) (= (columns a a1) (columns a b)))))))

(declare-fun get (ty uni Int Int) uni)

;; get_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort a (get a x x1 x2)))))

(declare-fun get1 ((matrix complex) Int Int) complex)

(declare-fun t2tb14 ((matrix complex)) uni)

;; t2tb_sort
  (assert
  (forall ((x (matrix complex))) (sort (matrix1 complex1) (t2tb14 x))))

(declare-fun tb2t14 (uni) (matrix complex))

;; BridgeL
  (assert
  (forall ((i (matrix complex)))
  (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (matrix1 complex1) j) (= (t2tb14 (tb2t14 j)) j)) :pattern (
  (t2tb14 (tb2t14 j))) )))

;; get_def
  (assert
  (forall ((a (matrix complex)) (r Int) (c Int))
  (= (get1 a r c) (tb2t
                  (infix_at complex1 int
                  (infix_at (infix_mngt int complex1) int
                  (elts complex1 (t2tb14 a)) (t2tb3 r)) (t2tb3 c))))))

;; get_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int))
  (= (get a a1 r c) (infix_at a int
                    (infix_at (infix_mngt int a) int (elts a a1) (t2tb3 r))
                    (t2tb3 c))))))

;; get_spec
  (assert
  (forall ((a (matrix complex)) (r Int) (c Int))
  (= (get1 a r c) (tb2t
                  (infix_at complex1 int
                  (infix_at (infix_mngt int complex1) int
                  (elts complex1 (t2tb14 a)) (t2tb3 r)) (t2tb3 c))))))

;; get_spec
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int))
  (= (get a a1 r c) (infix_at a int
                    (infix_at (infix_mngt int a) int (elts a a1) (t2tb3 r))
                    (t2tb3 c))))))

;; elts_eq
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni)) (=> (= a1 b) (= (elts a a1) (elts a b))))))

;; elts_inst_eq
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni) (i Int) (j Int))
  (=> (= a1 b)
  (=> (and (<= 0 i) (< i (rows a a1)))
  (=> (and (<= 0 j) (< j (columns a a1)))
  (= (infix_at a int (infix_at (infix_mngt int a) int (elts a a1) (t2tb3 i))
     (t2tb3 j)) (infix_at a int
                (infix_at (infix_mngt int a) int (elts a b) (t2tb3 i))
                (t2tb3 j)))))))))

(declare-fun make (ty Int Int uni) uni)

;; make_sort
  (assert
  (forall ((a ty))
  (forall ((x Int) (x1 Int) (x2 uni)) (sort (matrix1 a) (make a x x1 x2)))))

;; make_spec
  (assert
  (forall ((r Int) (c Int) (v complex))
  (=> (and (< 0 r) (< 0 c))
  (and (= (rows complex1 (make complex1 r c (t2tb v))) r)
  (and (= (columns complex1 (make complex1 r c (t2tb v))) c)
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
  (= (get1 (tb2t14 (make complex1 r c (t2tb v))) i j) v))))))))

;; make_spec
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (v uni))
  (=> (sort a v)
  (=> (and (< 0 r) (< 0 c))
  (and (= (rows a (make a r c v)) r)
  (and (= (columns a (make a r c v)) c)
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
  (= (get a (make a r c v) i j) v))))))))))

;; equality
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (= (= m n)
  (and
  (and (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n))))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j) (= (get1 m i j) (get1 n i j))))))))

;; equality
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (sort (matrix1 a) m)
  (=> (sort (matrix1 a) n)
  (= (= m n)
  (and (and (= (rows a m) (rows a n)) (= (columns a m) (columns a n)))
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j)))))))))))

;; make_value
  (assert
  (forall ((r Int) (c Int) (i Int) (j Int) (v complex))
  (=> (and (< 0 r) (< 0 c))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (get1 (tb2t14 (make complex1 r c (t2tb v))) i j) v))))))

;; make_value
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (i Int) (j Int) (v uni))
  (=> (sort a v)
  (=> (and (< 0 r) (< 0 c))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c)) (= (get a (make a r c v) i j) v))))))))

(declare-fun mat_indices (ty uni) (set (tuple2 Int Int)))

;; mat_indices_def
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (= (mat_indices a m) (tb2t10
                       (cartesian_product int int
                       (t2tb4 (to_fset 0 (rows a m)))
                       (t2tb4 (to_fset 0 (columns a m)))))))))

;; mat_indices_spec
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (and
  (forall ((o (tuple2 Int Int)))
  (=> (mem (tuple21 int int) (t2tb9 o) (t2tb10 (mat_indices a m)))
  (and (<= 0 (tb2t3 (fir int int (t2tb9 o))))
  (< (tb2t3 (fir int int (t2tb9 o))) (rows a m)))))
  (and
  (forall ((o (tuple2 Int Int)))
  (=> (mem (tuple21 int int) (t2tb9 o) (t2tb10 (mat_indices a m)))
  (and (<= 0 (tb2t3 (sec int int (t2tb9 o))))
  (< (tb2t3 (sec int int (t2tb9 o))) (columns a m)))))
  (and
  (forall ((o (tuple2 Int Int)))
  (=>
  (and (<= 0 (tb2t3 (fir int int (t2tb9 o))))
  (< (tb2t3 (fir int int (t2tb9 o))) (rows a m)))
  (=>
  (and (<= 0 (tb2t3 (sec int int (t2tb9 o))))
  (< (tb2t3 (sec int int (t2tb9 o))) (columns a m))) (mem (tuple21 int int)
  (t2tb9 o) (t2tb10 (mat_indices a m))))))
  (forall ((i Int) (j Int))
  (= (valid_index a m i j) (mem (tuple21 int int)
  (Tuple2 int int (t2tb3 i) (t2tb3 j)) (t2tb10 (mat_indices a m)))))))))))

(declare-fun set3 (ty uni Int Int uni) uni)

;; set_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int) (x3 uni)) (sort (matrix1 a)
  (set3 a x x1 x2 x3)))))

;; set_spec
  (assert
  (forall ((a (matrix complex)) (r Int) (c Int) (v complex))
  (=> (valid_index complex1 (t2tb14 a) r c)
  (and
  (= (rows complex1 (set3 complex1 (t2tb14 a) r c (t2tb v))) (rows complex1
                                                             (t2tb14 a)))
  (and
  (= (columns complex1 (set3 complex1 (t2tb14 a) r c (t2tb v))) (columns
                                                                complex1
                                                                (t2tb14 a)))
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 a) i j)
  (= (get1 (tb2t14 (set3 complex1 (t2tb14 a) r c (t2tb v))) i j) (ite 
                                                                 (and (= i r)
                                                                 (= j c)) v
                                                                 (get1 a i j)))))
  (and (= (get1 (tb2t14 (set3 complex1 (t2tb14 a) r c (t2tb v))) r c) v)
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (set3 complex1 (t2tb14 a) r c (t2tb v)) i j)
  (=> (not (= i r))
  (= (get1 (tb2t14 (set3 complex1 (t2tb14 a) r c (t2tb v))) i j) (get1 a i j)))))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (set3 complex1 (t2tb14 a) r c (t2tb v)) i j)
  (=> (not (= j c))
  (= (get1 (tb2t14 (set3 complex1 (t2tb14 a) r c (t2tb v))) i j) (get1 a i j)))))))))))))

;; set_spec
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (sort a v)
  (=> (valid_index a a1 r c)
  (and (= (rows a (set3 a a1 r c v)) (rows a a1))
  (and (= (columns a (set3 a a1 r c v)) (columns a a1))
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j)
  (= (get a (set3 a a1 r c v) i j) (ite (and (= i r) (= j c)) v
                                   (get a a1 i j)))))
  (and (= (get a (set3 a a1 r c v) r c) v)
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index a (set3 a a1 r c v) i j)
  (=> (not (= i r)) (= (get a (set3 a a1 r c v) i j) (get a a1 i j)))))
  (forall ((i Int) (j Int))
  (=> (valid_index a (set3 a a1 r c v) i j)
  (=> (not (= j c)) (= (get a (set3 a a1 r c v) i j) (get a a1 i j)))))))))))))))

;; set_valid_index
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows a a1)))
  (=> (and (<= 0 j) (< j (columns a a1))) (valid_index a a1 i j))))))

;; get_valid_index
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int))
  (=> (= (rows a a1) r)
  (=> (= (columns a a1) c)
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j) (and (<= 0 i) (< i r))))
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j) (and (<= 0 j) (< j c))))))))))

;; get_valid_index_params
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (i Int) (j Int))
  (=> (= (rows a a1) r)
  (=> (= (columns a a1) c)
  (=> (valid_index a a1 i j)
  (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))))))))

;; set_values
  (assert
  (forall ((a (matrix complex)) (r Int) (c Int) (v complex))
  (=> (valid_index complex1 (t2tb14 a) r c)
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 a) i j)
  (= (get1 (tb2t14 (set3 complex1 (t2tb14 a) r c (t2tb v))) i j) (ite 
                                                                 (and (= i r)
                                                                 (= j c)) v
                                                                 (get1 a i j))))))))

;; set_values
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (sort a v)
  (=> (valid_index a a1 r c)
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j)
  (= (get a (set3 a a1 r c v) i j) (ite (and (= i r) (= j c)) v
                                   (get a a1 i j))))))))))

;; set_rows
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (valid_index a a1 r c) (= (rows a (set3 a a1 r c v)) (rows a a1))))))

;; set_columns
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (valid_index a a1 r c)
  (= (columns a (set3 a a1 r c v)) (columns a a1))))))

(declare-fun make_func (ty Int Int uni) uni)

;; make_func_sort
  (assert
  (forall ((a ty))
  (forall ((x Int) (x1 Int) (x2 uni)) (sort (matrix1 a)
  (make_func a x x1 x2)))))

;; make_func_spec
  (assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int complex))))
  (=> (< 0 r)
  (=> (< 0 c)
  (and (= (tb2t11 (elts complex1 (make_func complex1 r c (t2tb11 f)))) f)
  (and (= (rows complex1 (make_func complex1 r c (t2tb11 f))) r)
  (and (= (columns complex1 (make_func complex1 r c (t2tb11 f))) c)
  (forall ((i Int) (j Int))
  (= (get1 (tb2t14 (make_func complex1 r c (t2tb11 f))) i j) (tb2t
                                                             (infix_at
                                                             complex1 
                                                             int
                                                             (infix_at
                                                             (infix_mngt 
                                                             int complex1)
                                                             int (t2tb11 f)
                                                             (t2tb3 i))
                                                             (t2tb3 j))))))))))))

;; make_func_spec
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (sort (infix_mngt int (infix_mngt int a)) f)
  (=> (< 0 r)
  (=> (< 0 c)
  (and (= (elts a (make_func a r c f)) f)
  (and (= (rows a (make_func a r c f)) r)
  (and (= (columns a (make_func a r c f)) c)
  (forall ((i Int) (j Int))
  (= (get a (make_func a r c f) i j) (infix_at a int
                                     (infix_at (infix_mngt int a) int f
                                     (t2tb3 i)) (t2tb3 j)))))))))))))

(declare-fun make_f (ty Int Int uni) uni)

;; make_f_sort
  (assert
  (forall ((a ty))
  (forall ((x Int) (x1 Int) (x2 uni)) (sort (matrix1 a) (make_f a x x1 x2)))))

;; make_f_def
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (< 0 r) (=> (< 0 c) (= (make_f a r c f) (make_func a r c f)))))))

;; make_f_spec
  (assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int complex))))
  (=> (< 0 r)
  (=> (< 0 c)
  (and (= (rows complex1 (make_f complex1 r c (t2tb11 f))) r)
  (and (= (columns complex1 (make_f complex1 r c (t2tb11 f))) c)
  (forall ((i Int) (j Int))
  (= (get1 (tb2t14 (make_f complex1 r c (t2tb11 f))) i j) (tb2t
                                                          (infix_at complex1
                                                          int
                                                          (infix_at
                                                          (infix_mngt 
                                                          int complex1) 
                                                          int (t2tb11 f)
                                                          (t2tb3 i))
                                                          (t2tb3 j)))))))))))

;; make_f_spec
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (and (= (rows a (make_f a r c f)) r)
  (and (= (columns a (make_f a r c f)) c)
  (forall ((i Int) (j Int))
  (= (get a (make_f a r c f) i j) (infix_at a int
                                  (infix_at (infix_mngt int a) int f
                                  (t2tb3 i)) (t2tb3 j)))))))))))

;; assert_make
  (assert
  (forall ((r Int) (c Int) (f (Array Int (Array Int complex))) (i Int)
  (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (get1 (tb2t14 (make_f complex1 r c (t2tb11 f))) i j) (tb2t
                                                          (infix_at complex1
                                                          int
                                                          (infix_at
                                                          (infix_mngt 
                                                          int complex1) 
                                                          int (t2tb11 f)
                                                          (t2tb3 i))
                                                          (t2tb3 j))))))))

;; assert_make
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni) (i Int) (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (get a (make_f a r c f) i j) (infix_at a int
                                  (infix_at (infix_mngt int a) int f
                                  (t2tb3 i)) (t2tb3 j))))))))

;; assert_make_r
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (< 0 r) (=> (< 0 c) (= (rows a (make_f a r c f)) r))))))

;; assert_make_c
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (< 0 r) (=> (< 0 c) (= (columns a (make_f a r c f)) c))))))

(declare-fun to_indexes (ty uni) (set (tuple2 Int Int)))

;; to_indexes_def
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (= (to_indexes a m) (tb2t10
                      (cartesian_product int int
                      (t2tb4 (to_fset 0 (rows a m)))
                      (t2tb4 (to_fset 0 (columns a m)))))))))

;; to_indexes_spec
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (= (cardinal (tuple21 int int) (t2tb10 (to_indexes a m))) (* (rows a m) 
  (columns a m))))))

;; set_to_indexes_mem
  (assert
  (forall ((a ty))
  (forall ((m uni) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows a m)))
  (=> (and (<= 0 j) (< j (columns a m))) (mem (tuple21 int int)
  (Tuple2 int int (t2tb3 i) (t2tb3 j)) (t2tb10 (to_indexes a m))))))))

;; get_to_indexes_mem
  (assert
  (forall ((a ty))
  (forall ((m uni) (o (tuple2 Int Int)))
  (=> (mem (tuple21 int int) (t2tb9 o) (t2tb10 (to_indexes a m)))
  (and
  (and (<= 0 (tb2t3 (fir int int (t2tb9 o))))
  (< (tb2t3 (fir int int (t2tb9 o))) (rows a m)))
  (and (<= 0 (tb2t3 (sec int int (t2tb9 o))))
  (< (tb2t3 (sec int int (t2tb9 o))) (columns a m))))))))

;; mat_equality
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j) (= (get1 m i j) (get1 n i j))))
  (infix_eqeq (matrix1 complex1) (t2tb14 m) (t2tb14 n)))))))

;; mat_equality
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (= (rows a m) (rows a n))
  (=> (= (columns a m) (columns a n))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j)))) (infix_eqeq
  (matrix1 a) m n)))))))

(declare-fun square (ty uni) Bool)

;; square_def
  (assert
  (forall ((a ty))
  (forall ((m uni)) (= (square a m) (= (rows a m) (columns a m))))))

;; equal_sym
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (= (infix_eqeq (matrix1 a) m n) (infix_eqeq (matrix1 a) n m)))))

;; equal_rex
  (assert (forall ((a ty)) (forall ((m uni)) (infix_eqeq (matrix1 a) m m))))

;; equal_trans
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni) (o uni))
  (=> (infix_eqeq (matrix1 a) m n)
  (=> (infix_eqeq (matrix1 a) n o) (infix_eqeq (matrix1 a) m o))))))

;; set_equal_mat
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j) (= (get1 m i j) (get1 n i j))))
  (= m n))))))

;; set_equal_mat
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (sort (matrix1 a) m)
  (=> (sort (matrix1 a) n)
  (=> (= (rows a m) (rows a n))
  (=> (= (columns a m) (columns a n))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j)))) (= m n)))))))))

;; set_equal_mat_make
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni) (g uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb3 i)) (t2tb3 j)) 
  (infix_at a int (infix_at (infix_mngt int a) int g (t2tb3 i)) (t2tb3 j))))))
  (= (make_f a r c f) (make_f a r c g))))))))

;; set_equal_mat_make_t
  (assert
  (forall ((a ty))
  (forall ((r Int) (rqt Int) (c Int) (cqt Int) (f uni) (g uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (=> (= r rqt)
  (=> (= c cqt)
  (=>
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb3 i)) (t2tb3 j)) 
  (infix_at a int (infix_at (infix_mngt int a) int g (t2tb3 i)) (t2tb3 j))))))
  (= (make_f a r c f) (make_f a rqt cqt g))))))))))

;; get_equal_mat
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= m n)
  (and (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (and (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j) (= (get1 m i j) (get1 n i j)))))))))

;; get_equal_mat
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (= m n)
  (and (= (rows a m) (rows a n))
  (and (= (columns a m) (columns a n))
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j))))))))))

;; equal_functions
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni) (g uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb3 i)) (t2tb3 j)) 
  (infix_at a int (infix_at (infix_mngt int a) int g (t2tb3 i)) (t2tb3 j)))))
  (= (make_f a r c f) (make_f a r c g))))))))

;; equal_functions_mat
  (assert
  (forall ((f (Array Int (Array Int complex))) (m (matrix complex)))
  (=>
  (forall ((i Int) (j Int))
  (=>
  (and (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (and (<= 0 j) (< j (columns complex1 (t2tb14 m)))))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 f) (t2tb3 i)) (t2tb3 j))) 
  (get1 m i j))))
  (= m (tb2t14
       (make_f complex1 (rows complex1 (t2tb14 m))
       (columns complex1 (t2tb14 m)) (t2tb11 f)))))))

;; equal_functions_mat
  (assert
  (forall ((a ty))
  (forall ((f uni) (m uni))
  (=> (sort (matrix1 a) m)
  (=>
  (forall ((i Int) (j Int))
  (=>
  (and (and (<= 0 i) (< i (rows a m))) (and (<= 0 j) (< j (columns a m))))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb3 i)) (t2tb3 j)) 
  (get a m i j)))) (= m (make_f a (rows a m) (columns a m) f)))))))

(declare-fun null_mat ((matrix complex)) Bool)

;; null_mat_def
  (assert
  (forall ((a (matrix complex)))
  (= (null_mat a)
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 a) i j) (= (get1 a i j) c_zero))))))

;; set_null_mat
  (assert
  (forall ((a (matrix complex)))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 a) i j) (= (get1 a i j) c_zero)))
  (null_mat a))))

;; get_null_mat
  (assert
  (forall ((a (matrix complex)))
  (=> (null_mat a)
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 a) i j) (= (get1 a i j) c_zero))))))

(declare-fun abs1 (Int) Int)

;; abs_def
  (assert
  (forall ((x Int)) (ite (<= 0 x) (= (abs1 x) x) (= (abs1 x) (- x)))))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (<= 0 (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div1 x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div1 (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod1 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div1 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div1 (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod1 1 y) 1))))

;; Mod_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod1 (- 1) y) (- y 1)))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern (
  (div1 (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1
                                                                  (+ (* x y) z)
                                                                  x)) )))

(declare-fun nonn_part1 (ty ty uni uni uni) uni)

;; nonn_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (nonn_part1 im1 a x x1 x2)))))

(declare-fun result4 (ty ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result4 im1 a x x1)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t uni) (e uni))
  (= (= (tb2t2 (infix_at bool a (result4 im1 a op1 t) e)) true)
  (not (neutral im1 op1 (infix_at im1 a t e)))))))

;; nonn_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (= (nonn_part1 im1 a op1 s t) (filter a (result4 im1 a op1 t) s)))))

;; nonn_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (forall ((e uni))
  (= (mem a e (nonn_part1 im1 a op1 s t))
  (and (mem a e s) (not (neutral im1 op1 (infix_at im1 a t e)))))))))

(declare-fun n_part1 (ty ty uni uni uni) uni)

;; n_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (n_part1 im1 a x x1 x2)))))

(declare-fun result5 (ty ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result5 im1 a x x1)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t uni) (e uni))
  (= (= (tb2t2 (infix_at bool a (result5 im1 a op1 t) e)) true) (neutral im1
  op1 (infix_at im1 a t e))))))

;; n_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (= (n_part1 im1 a op1 s t) (filter a (result5 im1 a op1 t) s)))))

;; n_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (forall ((e uni))
  (= (mem a e (n_part1 im1 a op1 s t))
  (and (mem a e s) (neutral im1 op1 (infix_at im1 a t e))))))))

;; nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (sort (set1 a) s)
  (=> (commut im1 op1)
  (and (= s (union1 a (nonn_part1 im1 a op1 s t) (n_part1 im1 a op1 s t)))
  (= (inter a (nonn_part1 im1 a op1 s t) (n_part1 im1 a op1 s t)) (empty a))))))))

;; iterate_neutral
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s) (= (infix_at im1 a t a1) (neutral_elt im1 op1)))))
  (= (iterate im1 a op1 s t) (neutral_elt im1 op1))))))))

;; iterate_nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s t) (iterate im1 a op1 (nonn_part1 im1 a op1 s t) t)))))))

(declare-fun indic (ty uni uni) complex)

;; indic_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni))
  (ite (infix_eqeq a a1 aqt) (= (indic a a1 aqt) c_one)
  (= (indic a a1 aqt) c_zero)))))

;; indic_spec
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni))
  (=> (sort a a1)
  (=> (sort a aqt) (= (indic a a1 aqt) (ite (= a1 aqt) c_one c_zero)))))))

;; get_indic
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni))
  (=> (sort a a1)
  (=> (sort a aqt) (= (indic a a1 aqt) (ite (= a1 aqt) c_one c_zero)))))))

(declare-fun indic_bool (ty uni uni) Bool)

;; indic_bool_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni))
  (ite (infix_eqeq a a1 aqt) (= (indic_bool a a1 aqt) true)
  (= (indic_bool a a1 aqt) false)))))

;; indic_bool_spec
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni))
  (=> (sort a a1)
  (=> (sort a aqt) (= (indic_bool a a1 aqt) (ite (= a1 aqt) true false)))))))

;; indic_comm
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni)) (= (indic a a1 aqt) (indic a aqt a1)))))

;; indic_transl_r
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni) (c uni))
  (=> (= b c) (= (indic a a1 b) (indic a a1 c))))))

;; indic_transl_l
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni) (c uni))
  (=> (= b c) (= (indic a b a1) (indic a c a1))))))

(declare-fun indic_2 (ty ty uni uni uni uni) complex)

;; indic_2_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (ite (and (= (indic_bool a a1 aqt) true) (= (indic_bool b b1 bqt) true))
  (= (indic_2 b a a1 aqt b1 bqt) c_one)
  (= (indic_2 b a a1 aqt b1 bqt) c_zero)))))

;; indic_2_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (and
  (= (indic_2 b a a1 aqt b1 bqt) (infix_asdt (indic a a1 aqt)
                                 (indic b b1 bqt)))
  (= (indic_2 b a a1 aqt b1 bqt) (indic (tuple21 a b) (Tuple2 a b a1 b1)
                                 (Tuple2 a b aqt bqt)))))))

;; indic_2_if
  (assert
  (forall ((a ty) (b ty))
  (forall ((i uni) (k uni) (j uni) (l uni))
  (=> (sort a i)
  (=> (sort a k)
  (=> (sort b j)
  (=> (sort b l)
  (= (indic_2 b a i k j l) (ite (and (= i k) (= j l)) c_one c_zero)))))))))

;; indic_2_comm
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (and (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a aqt a1 b1 bqt))
  (and (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a a1 aqt bqt b1))
  (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a aqt a1 bqt b1)))))))

(declare-fun sum_indic (ty uni uni uni) complex)

(declare-fun result6 (ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (result6 a x x1)))))

;; result_def
  (assert
  (forall ((a ty))
  (forall ((t uni) (i uni) (e uni))
  (= (tb2t (infix_at complex1 a (result6 a t i) e)) (infix_asdt
                                                    (tb2t
                                                    (infix_at complex1 a t e))
                                                    (indic a i e))))))

;; sum_indic_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (i uni))
  (= (sum_indic a s t i) (sum a s (result6 a t i))))))

(declare-fun bool_to_c (Bool) complex)

;; bool_to_c_def
  (assert
  (forall ((a Bool))
  (ite (= a true) (= (bool_to_c a) c_one) (= (bool_to_c a) c_zero))))

(declare-fun ind_sum_indic ((Array Int complex) Int Int Int) complex)

(declare-fun result7 ((Array Int complex) Int) (Array Int complex))

;; result_def
  (assert
  (forall ((t (Array Int complex)) (i Int) (e Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (result7 t i)) (t2tb3 e))) (infix_asdt
                                                                    (tb2t
                                                                    (infix_at
                                                                    complex1
                                                                    int
                                                                    (t2tb8 t)
                                                                    (t2tb3 e)))
                                                                    (indic
                                                                    int
                                                                    (t2tb3 i)
                                                                    (t2tb3 e))))))

;; ind_sum_indic_def
  (assert
  (forall ((t (Array Int complex)) (l Int) (h Int) (i Int))
  (=> (< l h) (= (ind_sum_indic t l h i) (ind_sum (result7 t i) l h)))))

;; ind_sum_indic_spec
  (assert
  (forall ((t (Array Int complex)) (l Int) (h Int) (i Int))
  (=> (< l h)
  (= (ind_sum_indic t l h i) (sum_indic int (t2tb4 (to_fset l h)) (t2tb8 t)
                             (t2tb3 i))))))

;; sum_indic_t
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (i uni))
  (=> (mem a i s) (= (sum_indic a s t i) (tb2t (infix_at complex1 a t i)))))))

(declare-fun fc65 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a complex1) (fc65 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((t uni) (i uni) (e uni))
  (= (tb2t (infix_at complex1 a (fc65 a t i) e)) (infix_asdt
                                                 (tb2t
                                                 (infix_at complex1 a t e))
                                                 (indic a i e))))))

;; sum_indic_ts
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (i uni))
  (=> (mem a i s)
  (= (sum a s (fc65 a t i)) (tb2t (infix_at complex1 a t i)))))))

(declare-fun fc66 ((Array Int complex) Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((t (Array Int complex)) (i Int) (e Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc66 t i)) (t2tb3 e))) (infix_asdt
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 t)
                                                                 (t2tb3 e)))
                                                                 (indic 
                                                                 int
                                                                 (t2tb3 i)
                                                                 (t2tb3 e))))))

;; ind_sum_indic_t
  (assert
  (forall ((t (Array Int complex)) (l Int) (h Int) (i Int))
  (=> (and (<= l i) (< i h))
  (and
  (= (ind_sum_indic t l h i) (tb2t
                             (infix_at complex1 int (t2tb8 t) (t2tb3 i))))
  (= (ind_sum (fc66 t i) l h) (tb2t
                              (infix_at complex1 int (t2tb8 t) (t2tb3 i))))))))

(declare-fun fc67 ((Array Int complex) Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((t (Array Int complex)) (i Int) (e Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc67 t i)) (t2tb3 e))) (infix_asdt
                                                                 (tb2t
                                                                 (infix_at
                                                                 complex1 
                                                                 int
                                                                 (t2tb8 t)
                                                                 (t2tb3 e)))
                                                                 (indic 
                                                                 int
                                                                 (t2tb3 i)
                                                                 (t2tb3 e))))))

;; ind_sum_indic_t_quant
  (assert
  (forall ((t (Array Int complex)) (l Int) (h Int))
  (forall ((i Int))
  (=> (and (<= l i) (< i h))
  (= (ind_sum (fc67 t i) l h) (tb2t
                              (infix_at complex1 int (t2tb8 t) (t2tb3 i))))))))

;; div_plus_one
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i)
  (=> (< 0 j) (and (<= (* (div1 i j) j) i) (< i (* (+ (div1 i j) 1) j)))))))

;; mod_is_inf
  (assert (forall ((i Int) (j Int)) (=> (< 0 j) (< (mod1 i j) j))))

;; zero_add
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a1 0) (= (+ a1 a2) a2))))

;; add_zero
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a2 0) (= (+ a1 a2) a1))))

;; one_mult
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a1 1) (= (* a1 a2) a2))))

;; mult_one
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a2 1) (= (* a1 a2) a1))))

;; add_eq
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (+ a1 b1) (+ a2 b2))))))

;; mult_eq
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (* a1 b1) (* a2 b2))))))

;; add_eq_inv
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (+ a1 b1) (+ b2 a2))))))

;; mult_eq_inv
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (* a1 b1) (* b2 a2))))))

;; bound_eq
  (assert
  (forall ((i Int) (j Int)) (=> (and (<= 0 i) (< i j)) (= i (mod1 i j)))))

;; bound_eq_rev
  (assert
  (forall ((i Int) (j Int)) (=> (and (<= 0 i) (< i j)) (= (mod1 i j) i))))

;; unicity_div_mod
  (assert
  (forall ((i Int) (j Int) (q Int) (r Int))
  (=> (< 0 j)
  (=> (= i (+ (* q j) r))
  (=> (and (<= 0 r) (< r j)) (and (= q (div1 i j)) (= r (mod1 i j))))))))

;; get_div
  (assert
  (forall ((j Int) (q Int) (r Int))
  (=> (< 0 j) (=> (and (<= 0 r) (< r j)) (= (div1 (+ (* q j) r) j) q)))))

;; positive_div
  (assert
  (forall ((i Int) (j Int)) (=> (and (< 0 j) (< j i)) (< 0 (div1 i j)))))

;; div_mod_sim_bound
  (assert
  (forall ((d Int) (m Int) (q Int) (r Int))
  (=> (and (<= 0 d) (< d r))
  (=> (and (<= 0 m) (< m q))
  (and (<= 0 (+ (* d q) m)) (< (+ (* d q) m) (* r q)))))))

;; div_mod_sim_bound_gen_r
  (assert
  (forall ((d Int) (q Int) (r Int))
  (=> (and (<= 0 d) (< d r))
  (forall ((m Int))
  (=> (and (<= 0 m) (< m q))
  (and (<= 0 (+ (* d q) m)) (< (+ (* d q) m) (* r q))))))))

;; unicity_div_gen
  (assert
  (forall ((j Int) (q Int))
  (=> (<= 0 q)
  (=> (< 0 j)
  (and
  (forall ((i Int))
  (=> (<= 0 i)
  (=> (and (<= 0 (- i (* q j))) (< (- i (* q j)) j)) (= q (div1 i j)))))
  (forall ((i Int))
  (=> (<= 0 i)
  (=> (and (<= 0 (- i (* q j))) (< (- i (* q j)) j))
  (= (- i (* j q)) (mod1 i j))))))))))

;; bound_mod
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (and (<= 0 (mod1 i j)) (< (mod1 i j) j))))))

;; mod_eq
  (assert
  (forall ((a Int) (b Int) (d Int)) (=> (= a b) (= (mod1 a d) (mod1 b d)))))

;; e_div_eq
  (assert
  (forall ((a Int) (b Int) (d Int)) (=> (= a b) (= (div1 a d) (div1 b d)))))

;; decomp
  (assert
  (forall ((i Int) (j Int))
  (=> (not (= 0 j)) (= i (+ (* j (div1 i j)) (mod1 i j))))))

;; div_mod_eq
  (assert
  (forall ((i Int) (j Int) (q Int))
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (< 0 q)
  (=> (= (div1 i q) (div1 j q)) (=> (= (mod1 i q) (mod1 j q)) (= i j))))))))

;; mod_zero
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (=> (= (mod1 i j) 0) (= i (* j (div1 i j))))))))

;; div_plus_quotient
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (= (div1 (+ i j) j) (+ (div1 i j) 1))))))

;; div_plus_fact_gen_div
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (< 0 j) (= (div1 (+ i (* k j)) j) (+ (div1 i j) k)))))

;; mod_plus_fact_gen_mod
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (< 0 j) (= (mod1 (+ (* k j) i) j) (mod1 i j)))))

;; mod_plus_fact_gen_mod_left
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (< 0 j) (= (mod1 (+ (* j k) i) j) (mod1 i j)))))

;; bound_div
  (assert
  (forall ((i Int) (q Int) (f Int))
  (=> (<= 0 i)
  (=> (<= 0 q)
  (=> (<= 0 f)
  (=> (< i (* f q))
  (and (<= 0 (div1 i q))
  (and
  (and (<= 0 (* (div1 i q) q))
  (and (<= (* (div1 i q) q) i) (< i (* q (+ (div1 i q) 1)))))
  (< (div1 i q) f)))))))))

;; mod_upper_bound
  (assert
  (forall ((i Int) (q Int)) (=> (< 0 i) (=> (= i q) (= (mod1 i q) 0)))))

;; bound_div_gen
  (assert
  (forall ((q Int) (f Int))
  (=> (< 0 q)
  (=> (<= 0 f)
  (forall ((i Int)) (=> (and (<= 0 i) (< i (* q f))) (< (div1 i q) f)))))))

;; mod_invariant
  (assert
  (forall ((i Int) (q Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 q)
  (=> (< 0 f)
  (= (mod1 (+ (* q (* f (div1 i (* q f)))) (mod1 i (* q f))) q) (mod1
                                                                (mod1 i
                                                                (* q f)) q)))))))

;; mod_inf
  (assert
  (forall ((i Int) (q Int)) (=> (and (<= 0 i) (< i q)) (= (mod1 i q) i))))

;; add_mod
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (+ (mod1 a c) (mod1 b c)) c) (mod1 (+ a b) c)))))

;; add_mod_eq
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int) (n Int))
  (=> (< 0 n)
  (=> (= (mod1 a n) (mod1 c n))
  (=> (= (mod1 b n) (mod1 d n)) (= (mod1 (+ a b) n) (mod1 (+ c d) n)))))))

;; add_mod_left
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (+ (mod1 a c) b) c) (mod1 (+ a b) c)))))

;; simpl_add_mod_left
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (=> (= (mod1 a c) 0) (= (mod1 (+ a b) c) (mod1 b c))))))

;; add_mod_right
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (+ a (mod1 b c)) c) (mod1 (+ a b) c)))))

;; mod_mod_left
  (assert
  (forall ((i Int) (j Int) (f Int))
  (=> (< 0 j) (=> (< 0 f) (= (mod1 (mod1 i (* f j)) j) (mod1 i j))))))

;; mult_mod
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (* (mod1 a c) (mod1 b c)) c) (mod1 (* a b) c)))))

;; mod_mod_mult
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 b) (= (mod1 (* (mod1 a b) (mod1 c b)) b) (mod1 (* a c) b)))))

;; mod_mod_mult_rev
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 b) (= (mod1 (* a c) b) (mod1 (* (mod1 a b) (mod1 c b)) b)))))

;; mod_mod_i
  (assert
  (forall ((i Int) (j Int)) (=> (< 0 j) (= (mod1 (mod1 i j) j) (mod1 i j)))))

;; binary_prod
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i)
  (=> (< 0 j) (= (mod1 (* (mod1 i 2) (mod1 j 2)) 2) (mod1 (* i j) 2))))))

;; mod_minus
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 b) (=> (= (mod1 a b) c) (= (mod1 (- a) b) (mod1 (- c) b))))))

;; mult_mod_left
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (* (mod1 a c) b) c) (mod1 (* a b) c)))))

;; mult_mod_right
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (* a (mod1 b c)) c) (mod1 (* a b) c)))))

;; mod_mod_right
  (assert
  (forall ((i Int) (j Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 j) (=> (< 0 f) (= (mod1 (mod1 i (* j f)) j) (mod1 i j)))))))

;; mod_mod_rev
  (assert
  (forall ((i Int) (j Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 j)
  (=> (< 0 f)
  (and (= (mod1 i j) (mod1 (mod1 i (* j f)) j))
  (= (mod1 i j) (mod1 (mod1 i (* f j)) j))))))))

;; mod_mod_plus
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (= (mod1 i j) (mod1 (mod1 i (+ j j)) j))))))

;; mod_mod_add_left
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (+ (mod1 a c) b) c) (mod1 (+ a b) c)))))

;; mod_mod_add_right
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (+ a (mod1 b c)) c) (mod1 (+ a b) c)))))

;; mod_mod_add_left_rev
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (+ a b) c) (mod1 (+ (mod1 a c) b) c)))))

;; mod_mod_add_right_rev
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod1 (+ a b) c) (mod1 (+ a (mod1 b c)) c)))))

;; mult_assoc
  (assert
  (forall ((i Int) (q Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 q)
  (=> (< 0 f) (= (* q (* f (div1 i (* q f)))) (* (* q f) (div1 i (* q f)))))))))

;; div_div
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (<= 0 i)
  (=> (< 0 j)
  (=> (< 0 k)
  (and (= (div1 (div1 i k) j) (div1 i (* k j)))
  (= (div1 (div1 i k) j) (div1 i (* j k)))))))))

;; compat_order_div
  (assert
  (forall ((i Int) (iqt Int) (j Int))
  (=> (and (<= 0 i) (<= i iqt)) (=> (< 0 j) (<= (div1 i j) (div1 iqt j))))))

;; mod_div
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (<= 0 i)
  (=> (< 0 j) (=> (< 0 k) (= (div1 (mod1 i (* j k)) j) (mod1 (div1 i j) k)))))))

;; inf_mul
  (assert
  (forall ((ia Int) (ib Int) (a Int) (b Int))
  (=> (and (<= 0 ia) (< ia a))
  (=> (and (<= 0 ib) (< ib b))
  (and (< (+ (* a ib) ia) (* a b)) (< (+ (* ib a) ia) (* b a)))))))

;; inf_mul_gen
  (assert
  (forall ((n Int) (v Int) (p Int))
  (=> (and (<= 0 p) (< p v))
  (forall ((k Int)) (=> (and (<= 0 k) (< k n)) (< (+ (* k v) p) (* n v)))))))

;; inf_mul_gen_b
  (assert
  (forall ((n Int) (v Int) (p Int))
  (=> (and (<= 0 p) (< p n))
  (forall ((k Int)) (=> (and (<= 0 k) (< k v)) (< (+ (* p v) k) (* n v)))))))

;; inf_mul_comm
  (assert
  (forall ((i Int) (bi Int) (quot Int) (rest Int))
  (=> (and (<= 0 i) (< i bi))
  (=> (< 0 rest)
  (=> (< 0 quot) (=> (= bi (* quot rest)) (< (mod1 i rest) rest)))))))

;; indic_div_mod
  (assert
  (forall ((i Int) (j Int) (q Int))
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (< 0 q)
  (= (indic int (t2tb3 i) (t2tb3 j)) (infix_asdt
                                     (indic int (t2tb3 (mod1 i q))
                                     (t2tb3 (mod1 j q)))
                                     (indic int (t2tb3 (div1 i q))
                                     (t2tb3 (div1 j q))))))))))

;; indic_div_mod_gen
  (assert
  (forall ((q Int))
  (=> (< 0 q)
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (<= 0 j))
  (= (indic int (t2tb3 i) (t2tb3 j)) (infix_asdt
                                     (indic int (t2tb3 (mod1 i q))
                                     (t2tb3 (mod1 j q)))
                                     (indic int (t2tb3 (div1 i q))
                                     (t2tb3 (div1 j q))))))))))

;; set_inf
  (assert true)

;; set_infeq
  (assert true)

;; bounded_cycle
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int))
  (=> (<= 0 a)
  (=> (< 0 b)
  (=> (and (<= 0 d) (< d b))
  (=> (< 0 c) (= (div1 (+ (* a b) d) (* b c)) (div1 a c))))))))

;; div_mod_minus
  (assert
  (forall ((a Int) (b Int))
  (=> (< 0 b) (=> (and (< 0 a) (< a b)) (= (mod1 (- a) b) (- b (mod1 a b)))))))

;; leq_trans
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= a b) (=> (<= b c) (<= a c)))))

;; leq_trans_add
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int))
  (=> (<= a c) (=> (<= b d) (<= (+ a b) (+ c d))))))

;; leq_trans_mult
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (<= 0 c) (=> (<= a b) (<= (* a c) (* b c))))))

;; leq_trans_mult_right
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (<= 0 c) (=> (<= a b) (<= (* c a) (* c b))))))

;; compat_int_order_mult
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int))
  (=> (and (<= 0 c) (<= c d))
  (=> (and (<= 0 a) (<= a b)) (<= (* c a) (* d b))))))

;; leq_trans_fact
  (assert
  (forall ((a Int) (b Int) (c Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 a) (<= a c))
  (=> (and (<= 0 b) (<= b (* c n))) (<= (+ a b) (* c (+ n 1))))))))

;; leq_trans_facrev
  (assert
  (forall ((a Int) (b Int) (c Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 a) (<= a c))
  (=> (and (<= 0 b) (<= b (* c n))) (<= (+ b a) (* c (+ n 1))))))))

(declare-fun infix_pl_closure () (Array Int (Array Int Int)))

(declare-fun infix_as_closure () (Array Int (Array Int Int)))

(declare-fun t2tb15 ((Array Int (Array Int Int))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int (Array Int Int)))) (sort
  (infix_mngt int (infix_mngt int int)) (t2tb15 x))))

(declare-fun tb2t15 (uni) (Array Int (Array Int Int)))

;; BridgeL
  (assert
  (forall ((i (Array Int (Array Int Int))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb15 (tb2t15 j)) j) :pattern ((t2tb15 (tb2t15 j))) )))

;; infix +_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 infix_pl_closure) (t2tb3 y))
     (t2tb3 y1))) (+ y y1))))

;; infix *_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 infix_as_closure) (t2tb3 y))
     (t2tb3 y1))) (* y y1))))

;; neutrals
  (assert
  (and (= 0 (tb2t3 (neutral_elt int (t2tb15 infix_pl_closure))))
  (and (= 1 (tb2t3 (neutral_elt int (t2tb15 infix_as_closure))))
  (and (iterable int (t2tb15 infix_pl_closure)) (iterable int
  (t2tb15 infix_as_closure))))))

(declare-fun isum (ty uni uni) Int)

;; isum_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (= (isum a s t) (tb2t3 (iterate int a (t2tb15 infix_pl_closure) s t))))))

(declare-fun iproduct (ty uni uni) Int)

;; iproduct_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (= (iproduct a s t) (tb2t3 (iterate int a (t2tb15 infix_as_closure) s t))))))

;; isum_iter
  (assert (iterates int (t2tb15 infix_pl_closure) (t2tb3 0)))

;; isum_iter__
  (assert (iterable int (t2tb15 infix_pl_closure)))

;; isum_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (tqt uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t3 (infix_at int a t e)) (tb2t3 (infix_at int a tqt e))))))
  (= (isum a s t) (isum a s tqt))))))

;; isum_eq_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (t uni) (tqt uni))
  (=> (= s sqt)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t3 (infix_at int a t e)) (tb2t3 (infix_at int a tqt e))))))
  (= (isum a s t) (isum a s tqt)))))))

;; isum_add
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (not (mem b x s))
  (= (isum b (add b x s) f) (+ (tb2t3 (infix_at int b f x)) (isum b s f)))))))

;; iproduct_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (tqt uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t3 (infix_at int a t e)) (tb2t3 (infix_at int a tqt e))))))
  (= (iproduct a s t) (iproduct a s tqt))))))

;; iproduct_eq_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (t uni) (tqt uni))
  (=> (= s sqt)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t3 (infix_at int a t e)) (tb2t3 (infix_at int a tqt e))))))
  (= (iproduct a s t) (iproduct a s tqt)))))))

;; iproduct_add
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (not (mem b x s))
  (= (iproduct b (add b x s) f) (* (tb2t3 (infix_at int b f x)) (iproduct b s
                                                                f)))))))

;; iproduct_from_choose
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni))
  (=> (< 0 (cardinal b s))
  (= (iproduct b s f) (* (tb2t3 (infix_at int b f (choose b s))) (iproduct b
                                                                 (remove b
                                                                 (choose b s)
                                                                 s) f)))))))

(declare-fun fc68 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc68 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; iproduct_map
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (t (Array Int Int)))
  (=> (p_injective int int (t2tb5 f) (t2tb4 s))
  (= (iproduct int (map1 int int (t2tb5 f) (t2tb4 s)) (t2tb5 t)) (iproduct
                                                                 int
                                                                 (t2tb4 s)
                                                                 (t2tb5
                                                                 (fc68 f t)))))))

(declare-fun fc69 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc69 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; iproduct_map_auto
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (t (Array Int Int)))
  (=> (p_bijective int int (t2tb5 f) (t2tb4 s) (t2tb4 s))
  (= (iproduct int (t2tb4 s) (t2tb5 t)) (iproduct int (t2tb4 s)
                                        (t2tb5 (fc69 f t)))))))

;; iproduct_one
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (tb2t3 (infix_at int a f e)) 1))))
  (= (iproduct a s f) 1)))))

;; iproduct_one_but_maybe_one_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (e uni))
  (=> (mem a e s)
  (=>
  (forall ((eqt uni))
  (=> (sort a eqt)
  (=> (mem a eqt s)
  (=> (not (= eqt e)) (= (tb2t3 (infix_at int a f eqt)) 1)))))
  (and (= (iproduct a s f) (tb2t3 (infix_at int a f e)))
  (= (iproduct a s f) (* (tb2t3 (infix_at int a f (choose a s))) (iproduct a
                                                                 (remove a
                                                                 (choose a s)
                                                                 s) f)))))))))

;; mul_assoc
  (assert (forall ((a Int) (b Int) (c Int)) (= (* (* a b) c) (* a (* b c)))))

;; ad_assoc
  (assert (forall ((a Int) (b Int) (c Int)) (= (+ (+ a b) c) (+ a (+ b c)))))

;; ad_assoc_rev
  (assert (forall ((a Int) (b Int) (c Int)) (= (+ a (+ b c)) (+ (+ a b) c))))

;; ad_seq_switch
  (assert
  (forall ((a Int) (b Int) (c Int) (aqt Int) (bqt Int) (cqt Int))
  (=> (= a aqt)
  (=> (= b bqt) (=> (= c cqt) (= (+ aqt (+ bqt cqt)) (+ b (+ c a))))))))

;; mul_comm
  (assert (forall ((a Int) (b Int)) (= (* a b) (* b a))))

;; add_eq_i
  (assert
  (forall ((a Int) (aqt Int) (b Int) (bqt Int))
  (=> (= a aqt) (=> (= b bqt) (= (+ a b) (+ aqt bqt))))))

;; mult_eq_i
  (assert
  (forall ((a Int) (aqt Int) (b Int) (bqt Int))
  (=> (= a aqt) (=> (= b bqt) (= (* a b) (* aqt bqt))))))

;; mul_assoc_rev
  (assert (forall ((a Int) (b Int) (c Int)) (= (* a (* b c)) (* (* a b) c))))

;; mult_add_distr
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int))
  (= (* (+ a b) (+ c d)) (+ (+ (+ (* a c) (* a d)) (* b c)) (* b d)))))

;; mult_add_right
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (* (+ a b) c) (+ (* a c) (* b c)))))

;; mult_add_right_rev
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (+ (* a c) (* b c)) (* (+ a b) c))))

;; mult_add_left
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (* a (+ b c)) (+ (* a b) (* a c)))))

;; mult_add_left_rev
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (+ (* a b) (* a c)) (* a (+ b c)))))

;; mult_add_distr_rev
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int))
  (= (+ (+ (+ (* a c) (* a d)) (* b c)) (* b d)) (* (+ a b) (+ c d)))))

;; mul_assoc_comm
  (assert (forall ((a Int) (b Int) (c Int)) (= (* (* a b) c) (* b (* a c)))))

;; mul_assoc_rev_comm
  (assert (forall ((a Int) (b Int) (c Int)) (= (* a (* b c)) (* (* a c) b))))

;; add_assoc
  (assert (forall ((a Int) (b Int) (c Int)) (= (+ (+ a b) c) (+ a (+ b c)))))

;; add_assoc_rev
  (assert (forall ((a Int) (b Int) (c Int)) (= (+ a (+ b c)) (+ (+ a b) c))))

;; isum_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni)) (=> (is_empty a s) (= (isum a s f) 0)))))

;; iproduct_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni)) (=> (is_empty a s) (= (iproduct a s f) 1)))))

(declare-fun infix_mn_closure () (Array Int (Array Int Int)))

;; infix -_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 infix_mn_closure) (t2tb3 y))
     (t2tb3 y1))) (- y y1))))

;; isum_iter_
  (assert
  (and (opposite_n int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure)
  (t2tb3 0))
  (and (opposite int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure))
  (and (opposite_com int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure))
  (inverse_tuple int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure)
  (t2tb3 0))))))

(declare-fun ind_isum ((Array Int Int) Int Int) Int)

;; ind_isum_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_isum f i j) (tb2t3
                      (int_iterate int (t2tb15 infix_pl_closure) (t2tb5 f) i
                      j)))))

;; ind_isum_empty
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= j i) (= (ind_isum f i j) 0))))

;; ind_isum_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (= j (+ i 1))
  (= (ind_isum f i j) (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i)))))))

;; ind_isum_plus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_isum f i j) (+ (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 
  (ind_isum f (+ i 1) j))))))

;; ind_isum_to_isum
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_isum f i j) (isum int (t2tb4 (to_fset i j)) (t2tb5 f))))))

;; pos_to_strict
  (assert (forall ((a Int)) (=> (<= 1 a) (< 0 a))))

;; pos_by_strict
  (assert (forall ((a Int)) (=> (< 0 a) (<= 1 a))))

(declare-fun fc70 () (Array Int (Array Int Int)))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc70) (t2tb3 y0)) (t2tb3 y1))) y0)))

;; ind_isum_const
  (assert
  (forall ((k Int) (i Int) (j Int))
  (=> (< i j)
  (= (ind_isum
     (tb2t5 (infix_at (infix_mngt int int) int (t2tb15 fc70) (t2tb3 k))) i j) (* k (- j i))))))

;; ind_isum_null
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) 0)))
  (= (ind_isum f i j) 0)))))

;; ind_isum_right_extension
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (= (ind_isum f i (+ j 1)) (+ (ind_isum f i j) (tb2t3
                                                (infix_at int int (t2tb5 f)
                                                (t2tb3 j))))))))

;; ind_isum_re
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_isum f i j) (+ (ind_isum f i (- j 1)) (tb2t3
                                                (infix_at int int (t2tb5 f)
                                                (t2tb3 (- j 1)))))))))

;; ind_isum_re_null
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=> (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 j))) 0)
  (= (ind_isum f i (+ j 1)) (ind_isum f i j))))))

;; ind_isum_null_but_maybe_one_elt
  (assert
  (forall ((l Int) (h Int) (t (Array Int Int)) (e Int))
  (=> (and (<= l e) (< e h))
  (=>
  (forall ((a Int))
  (=> (and (<= l a) (< a h))
  (=> (not (= a e)) (= (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 a))) 0))))
  (= (ind_isum t l h) (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 e))))))))

;; ind_isum_eq
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 g) (t2tb3 k))))))
  (= (ind_isum f i j) (ind_isum g i j)))))

(declare-fun fc71 ((Array Int Int) (Array Int Int)
  (Array Int Bool)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc71 f g p)) (t2tb3 k))) (ite (= 
                                                               (tb2t2
                                                               (infix_at 
                                                               bool int
                                                               (t2tb12 p)
                                                               (t2tb3 k))) true)
                                                               (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 f)
                                                               (t2tb3 k)))
                                                               (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 g)
                                                               (t2tb3 k)))))))

;; ind_isum_to_guard
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t2 (infix_at bool int (t2tb12 p) (t2tb3 k))) true)))
  (= (ind_isum (fc71 f g p) i j) (ind_isum f i j)))))

(declare-fun fc72 ((Array Int Int) (Array Int Int)
  (Array Int Bool)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc72 f g p)) (t2tb3 k))) (ite (= 
                                                               (tb2t2
                                                               (infix_at 
                                                               bool int
                                                               (t2tb12 p)
                                                               (t2tb3 k))) true)
                                                               (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 g)
                                                               (t2tb3 k)))
                                                               (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 f)
                                                               (t2tb3 k)))))))

;; ind_isum_no_guard
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (not (= (tb2t2 (infix_at bool int (t2tb12 p) (t2tb3 k))) true))))
  (= (ind_isum (fc72 f g p) i j) (ind_isum f i j)))))

;; ind_isum_eq_gen
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (i1 Int) (j Int)
  (j1 Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 g) (t2tb3 k))))))
  (=> (= i i1) (=> (= j j1) (= (ind_isum f i j) (ind_isum g i1 j1)))))))

;; ind_isum_func_const
  (assert
  (forall ((k Int) (f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((l Int))
  (=> (and (<= i l) (< l j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 l))) k)))
  (= (ind_isum f i j) (* k (- j i)))))))

;; ind_isum_pos
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))))
  (<= 0 (ind_isum f i j))))))

(declare-fun ind_iproduct ((Array Int Int) Int Int) Int)

;; ind_iproduct_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_iproduct f i j) (tb2t3
                          (int_iterate int (t2tb15 infix_as_closure)
                          (t2tb5 f) i j)))))

;; ind_iproduct_eq
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 g) (t2tb3 k))))))
  (= (ind_iproduct f i j) (ind_iproduct g i j)))))

;; ind_iproduct_eq_gen
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i1 Int) (j1 Int) (i2 Int)
  (j2 Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i1 k) (< k j1))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 g) (t2tb3 k))))))
  (=> (= i1 i2)
  (=> (= j1 j2) (= (ind_iproduct f i1 j1) (ind_iproduct g i2 j2)))))))

;; ind_iproduct_to_iproduct
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_iproduct f i j) (iproduct int (t2tb4 (to_fset i j)) (t2tb5 f)))))

;; ind_iproduct_one_but_maybe_one_elt
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (e Int))
  (=> (and (<= i e) (< e j))
  (=>
  (forall ((eqt Int))
  (=> (and (<= i eqt) (<= eqt j))
  (=> (not (= e eqt)) (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 eqt))) 1))))
  (= (ind_iproduct f i j) (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))))))))

;; mult_one_int
  (assert (forall ((a Int) (b Int)) (=> (= b 1) (= (* a b) a))))

;; one_mult_int
  (assert (forall ((a Int) (b Int)) (=> (= a 1) (= (* a b) b))))

;; mult_zero_int
  (assert (forall ((a Int) (b Int)) (=> (= b 0) (= (* a b) 0))))

;; zero_mult_int
  (assert (forall ((a Int) (b Int)) (=> (= a 0) (= (* a b) 0))))

;; iproduct_to_iterate
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_iproduct f i j) (tb2t3
                          (int_iterate int (t2tb15 infix_as_closure)
                          (t2tb5 f) i j)))))

(declare-fun fc73 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc73 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; ind_isum_map_auto
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t (Array Int Int)))
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset i j))) (= (ind_isum t i j) (ind_isum (fc73 f t) i j)))))

(declare-fun fc74 (Int Int (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc74 i j f)) (t2tb3 k))) (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 f)
                                                               (t2tb3
                                                               (+ (- (- j k) 1) i)))))))

;; ind_isum_rev
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)))
  (= (ind_isum f i j) (ind_isum (fc74 i j f) i j))))

(declare-fun fc75 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc75 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; ind_isum_map
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t (Array Int Int)))
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset k l))) (= (ind_isum t k l) (ind_isum (fc75 f t) i j)))))

(declare-fun fc76 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc76 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; ind_isum_map_auto_bij
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t (Array Int Int)))
  (=>
  (forall ((e Int))
  (=> (and (<= i e) (< e j))
  (and (<= i (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))) j))))
  (=>
  (forall ((e Int) (eqt Int))
  (=> (and (<= i e) (< e j))
  (=> (and (<= i eqt) (< eqt j))
  (=> (not (= e eqt))
  (not
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 f) (t2tb3 eqt)))))))))
  (=>
  (forall ((eqt Int))
  (=> (and (<= i eqt) (< eqt j))
  (exists ((e Int))
  (and (and (<= i e) (< e j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))) eqt)))))
  (= (ind_isum t i j) (ind_isum (fc76 f t) i j)))))))

(declare-fun fc77 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc77 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; ind_isum_map_bij
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t (Array Int Int)))
  (=>
  (forall ((e Int))
  (=> (and (<= i e) (< e j))
  (and (<= k (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))) l))))
  (=>
  (forall ((e Int) (eqt Int))
  (=> (and (<= i e) (< e j))
  (=> (and (<= i eqt) (< eqt j))
  (=> (not (= e eqt))
  (not
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 f) (t2tb3 eqt)))))))))
  (=>
  (forall ((eqt Int))
  (=> (and (<= k eqt) (< eqt l))
  (exists ((e Int))
  (and (and (<= i e) (< e j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 e))) eqt)))))
  (= (ind_isum t k l) (ind_isum (fc77 f t) i j)))))))

;; ind_iproduct_empty
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= j i) (= (ind_iproduct f i j) 1))))

;; ind_iproduct_plus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_iproduct f i j) (* (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 
  (ind_iproduct f (+ i 1) j))))))

;; ind_iproduct_right_extension
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_iproduct f i j) (* (ind_iproduct f i (- j 1)) (tb2t3
                                                        (infix_at int 
                                                        int (t2tb5 f)
                                                        (t2tb3 (- j 1)))))))))

;; ind_iproduct_right_extension_comm
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (* (ind_iproduct f i (- j 1)) (tb2t3
                                   (infix_at int int (t2tb5 f)
                                   (t2tb3 (- j 1))))) (ind_iproduct f i j)))))

;; ind_iproduct_comp
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (h (Array Int Int))
  (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (* (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                       (infix_at int 
                                                       int (t2tb5 g)
                                                       (t2tb3 k)))) (tb2t3
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5 h)
                                                                    (t2tb3 k))))))
  (= (ind_iproduct h i j) (* (ind_iproduct f i j) (ind_iproduct g i j)))))))

;; ind_iproduct_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) 1)))
  (= (ind_iproduct f i j) 1))))

;; positive_iproduct
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))))
  (< 0 (ind_iproduct f i j)))))

;; ind_iproduct_pos
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))))
  (<= 0 (ind_iproduct f i j)))))

;; ind_iproduct_strict_pos
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))))
  (< 0 (ind_iproduct f i j)))))

;; iproduct_strict_pos
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((k uni))
  (=> (sort a k) (=> (mem a k s) (< 0 (tb2t3 (infix_at int a f k))))))
  (< 0 (iproduct a s f))))))

;; ind_iproduct_strict_pos_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))))
  (<= 1 (ind_iproduct f i j)))))

(declare-fun fc78 ((Array Int Int) Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (h Int) (a Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc78 f l h)) (t2tb3 a))) (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 f)
                                                               (t2tb3
                                                               (+ (- h (+ a 1)) l)))))))

;; ind_iproduct_left_right
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int) (h Int))
  (=> (and (<= l k) (<= k h))
  (= (ind_iproduct f l k) (ind_iproduct (fc78 f l h) (+ (- h k) l) h)))))

;; iterable_imult
  (assert (iterable int (t2tb15 infix_as_closure)))

;; int_minus_distr
  (assert (forall ((a Int) (b Int)) (= (- (+ a b)) (+ (- a) (- b)))))

;; int_minus_eq
  (assert (forall ((a Int) (b Int)) (=> (= a b) (= (- a) (- b)))))

(declare-fun fc79 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc79 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; ind_iproduct_map_auto
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t (Array Int Int)))
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset i j)))
  (= (ind_iproduct t i j) (ind_iproduct (fc79 f t) i j)))))

(declare-fun fc80 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc80 f t)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 t)
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 b)))))))

;; ind_iproduct_map
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t (Array Int Int)))
  (=> (p_bijective int int (t2tb5 f) (t2tb4 (to_fset i j))
  (t2tb4 (to_fset k l)))
  (= (ind_iproduct t k l) (ind_iproduct (fc80 f t) i j)))))

;; ind_iproduct_trans
  (assert
  (forall ((f (Array Int Int)) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (ind_iproduct f i j) (* (ind_iproduct f i k) (ind_iproduct f k j))))))

;; ind_iproduct_inf
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))
  (<= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                     (infix_at int int
                                                     (t2tb5 g) (t2tb3 k)))))))
  (<= (ind_iproduct f i j) (ind_iproduct g i j)))))

;; ind_iproduct_sup_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (<= 1 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))))
  (=>
  (exists ((k Int))
  (and (and (<= i k) (< k j))
  (not (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) 1))))
  (< 1 (ind_iproduct f i j)))))))

(declare-fun fc81 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (k Int) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc81 f k)) (t2tb3 b))) (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 f)
                                                             (t2tb3 (+ b k)))))))

;; ind_isum_transl
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (k Int))
  (= (ind_isum f i j) (ind_isum (fc81 f k) (- i k) (- j k)))))

(declare-fun fc82 ((Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc82 f)) (t2tb3 b))) (tb2t3
                                                           (infix_at 
                                                           int int (t2tb5 f)
                                                           (t2tb3 (- b 1)))))))

;; ind_isum_transl_plus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_isum f i j) (ind_isum (fc82 f) (+ i 1) (+ j 1)))))

(declare-fun fc83 ((Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (b Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc83 f)) (t2tb3 b))) (tb2t3
                                                           (infix_at 
                                                           int int (t2tb5 f)
                                                           (t2tb3 (+ b 1)))))))

;; ind_isum_transl_minus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_isum f i j) (ind_isum (fc83 f) (- i 1) (- j 1)))))

(declare-fun fc84 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc84 f a)) (t2tb3 i))) (* a (tb2t3
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb5 f)
                                                                  (t2tb3 i)))))))

;; ind_isum_scal
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (ind_isum (fc84 f a) i j) (* a (ind_isum f i j))))))

(declare-fun fc85 ((Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc85 f)) (t2tb3 i))) (- (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5 f)
                                                              (t2tb3 i)))))))

;; minus_ind_isum
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= i j) (= (- (ind_isum f i j)) (ind_isum (fc85 f) i j)))))

(declare-fun fc86 ((Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc86 f)) (t2tb3 i))) (- (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5 f)
                                                              (t2tb3 i)))))))

;; minus_ind_isum_rev
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= i j) (= (ind_isum (fc86 f) i j) (- (ind_isum f i j))))))

(declare-fun fc87 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc87 f a)) (t2tb3 i))) (* a (tb2t3
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb5 f)
                                                                  (t2tb3 i)))))))

;; ind_isum_scal_rev
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (* a (ind_isum f i j)) (ind_isum (fc87 f a) i j)))))

(declare-fun fc88 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc88 f a)) (t2tb3 i))) (* (tb2t3
                                                                (infix_at 
                                                                int int
                                                                (t2tb5 f)
                                                                (t2tb3 i))) a))))

;; ind_isum_scal_rev_right
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (* (ind_isum f i j) a) (ind_isum (fc88 f a) i j)))))

(declare-fun fc89 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc89 f a)) (t2tb3 i))) (* (tb2t3
                                                                (infix_at 
                                                                int int
                                                                (t2tb5 f)
                                                                (t2tb3 i))) a))))

;; ind_isum_scal_right
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (ind_isum (fc89 f a) i j) (* (ind_isum f i j) a)))))

;; ind_isum_bound
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 g) (t2tb3 k))))))
  (< (ind_isum f i j) (ind_isum g i j))))))

;; comp_trans_equal_strict
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= a b) (=> (< b c) (< a c)))))

;; transitive_inf_leq_int
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (< a b) (=> (<= b c) (< a c)))))

;; transitive_inf_int
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (< a b) (=> (< b c) (< a c)))))

;; compeq_trans_sum
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= b c) (<= (+ a b) (+ a c)))))

;; compeq_trans_sum_zero
  (assert (forall ((a Int) (b Int)) (=> (<= 0 b) (<= a (+ a b)))))

;; comp_trans_sum
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (< b c) (< (+ a b) (+ a c)))))

;; ind_isum_bound_eq
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (<= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) (tb2t3
                                                     (infix_at int int
                                                     (t2tb5 g) (t2tb3 k))))))
  (<= (ind_isum f i j) (ind_isum g i j))))))

(declare-fun fc90 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc90 f a)) (t2tb3 i))) (* a (tb2t3
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb5 f)
                                                                  (t2tb3 i)))))))

;; ind_isum_scal_gen
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (forall ((a Int))
  (=> (and (<= i a) (< a j))
  (= (ind_isum (fc90 f a) i j) (* a (ind_isum f i j)))))))

;; ind_isum_trans
  (assert
  (forall ((f (Array Int Int)) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (ind_isum f i j) (+ (ind_isum f i k) (ind_isum f k j))))))

;; minus_out_int
  (assert (forall ((a Int) (b Int)) (= (* (- a) b) (- (* a b)))))

(declare-fun fc91 (ty uni Int) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int)) (sort (infix_mngt a int) (fc91 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (b Int) (i uni))
  (= (tb2t3 (infix_at int a (fc91 a f b) i)) (mod1
                                             (tb2t3 (infix_at int a f i)) b)))))

;; mod_mod_iproduct
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (b Int))
  (=> (< 0 b)
  (= (mod1 (iproduct a s (fc91 a f b)) b) (mod1 (iproduct a s f) b))))))

;; ind_isum_mod_eq
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int) (n Int))
  (=> (< 0 n)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (mod1 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) n) (mod1
                                                             (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 g)
                                                             (t2tb3 k))) n))))
  (= (mod1 (ind_isum f i j) n) (mod1 (ind_isum g i j) n))))))

(declare-fun power (Int Int) Int)

;; power_def
  (assert
  (forall ((e Int) (i Int))
  (=> (<= 0 i)
  (ite (= i 0) (= (power e i) 1) (= (power e i) (* e (power e (- i 1))))))))

;; Power_zero
  (assert (forall ((i Int)) (= (power i 0) 1)))

;; Power_one
  (assert (forall ((i Int)) (= (power i 1) i)))

;; power_plus_one
  (assert
  (forall ((i Int) (x Int))
  (=> (<= 0 x) (= (power i (+ x 1)) (* (power i x) i)))))

;; power_sum
  (assert
  (forall ((i Int) (x Int) (y Int))
  (=> (<= 0 x)
  (=> (<= 0 y) (= (power i (+ x y)) (* (power i x) (power i y)))))))

;; power_mult
  (assert
  (forall ((i Int) (x Int) (y Int))
  (=> (<= 0 x) (=> (<= 0 y) (= (power i (* x y)) (power (power i x) y))))))

;; Power_sum
  (assert
  (forall ((x Int) (y Int) (i Int))
  (=> (<= 0 x)
  (=> (<= 0 y) (= (power i (+ x y)) (* (power i x) (power i y)))))))

;; Power_mult
  (assert
  (forall ((x Int) (y Int) (i Int))
  (=> (<= 0 x) (=> (<= 0 y) (= (power i (* x y)) (power (power i x) y))))))

(declare-fun fc92 () (Array Int (Array Int Int)))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc92) (t2tb3 y0)) (t2tb3 y1))) y0)))

;; power_to_ind_iproduct
  (assert
  (forall ((e Int) (i Int))
  (=> (<= 0 i)
  (= (power e i) (ind_iproduct
                 (tb2t5
                 (infix_at (infix_mngt int int) int (t2tb15 fc92) (t2tb3 e)))
                 0 i)))))

(declare-fun fc93 () (Array Int (Array Int Int)))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc93) (t2tb3 y0)) (t2tb3 y1))) y0)))

;; power_transl
  (assert
  (forall ((e Int) (k Int) (i Int))
  (=> (<= 0 i)
  (= (power e i) (ind_iproduct
                 (tb2t5
                 (infix_at (infix_mngt int int) int (t2tb15 fc93) (t2tb3 e)))
                 k (+ k i))))))

(declare-fun fc94 () (Array Int (Array Int Int)))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc94) (t2tb3 y0)) (t2tb3 y1))) y0)))

;; ind_iproduct_to_power
  (assert
  (forall ((e Int) (i Int) (j Int))
  (=> (and (<= 0 i) (<= i j))
  (= (ind_iproduct
     (tb2t5 (infix_at (infix_mngt int int) int (t2tb15 fc94) (t2tb3 e))) i j) 
  (power e (- j i))))))

(declare-fun fc95 () (Array Int (Array Int Int)))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc95) (t2tb3 y0)) (t2tb3 y1))) y0)))

;; ind_iproduct_to_power_gen
  (assert
  (forall ((e Int))
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (<= i j))
  (= (ind_iproduct
     (tb2t5 (infix_at (infix_mngt int int) int (t2tb15 fc95) (t2tb3 e))) i j) 
  (power e (- j i)))))))

;; power_sum_rev
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n)
  (=> (<= 0 m) (= (* (power x n) (power x m)) (power x (+ n m)))))))

;; power_eq
  (assert
  (forall ((x Int) (n Int) (m Int)) (=> (= n m) (= (power x n) (power x m)))))

;; power_eq_gen
  (assert
  (forall ((x Int) (y Int) (n Int) (m Int))
  (=> (= n m) (=> (= x y) (= (power x n) (power y m))))))

(declare-fun fc96 () (Array Int Int))

;; fc_def
  (assert
  (forall ((k Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc96) (t2tb3 k))) (power 2 (+ k 1)))))

;; power_2_sum
  (assert
  (forall ((i Int))
  (=> (<= 1 i) (= (ind_isum fc96 0 i) (- (power 2 (+ i 1)) 2)))))

(declare-fun fc97 () (Array Int Int))

;; fc_def
  (assert
  (forall ((k Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc97) (t2tb3 k))) (power 2 (+ k 1)))))

;; power_decomp
  (assert
  (forall ((i Int)) (=> (<= 1 i) (< (ind_isum fc97 0 i) (power 2 (+ i 1))))))

(declare-fun fc98 (Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc98 i)) (t2tb3 k))) (ite (and (<= 1 k)
                                                                (< k (+ i 1)))
                                                           (power 2 (- k 1))
                                                           0))))

;; power_decomp_minus_one
  (assert
  (forall ((i Int))
  (=> (<= 1 i) (< (ind_isum (fc98 i) 1 i) (power 2 (- i 1))))))

(declare-fun power_closure () (Array Int (Array Int Int)))

;; power_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 power_closure) (t2tb3 y))
     (t2tb3 y1))) (power y y1))))

;; power_decomp_
  (assert
  (forall ((i Int))
  (=> (<= 1 i)
  (< (ind_isum
     (tb2t5
     (infix_at (infix_mngt int int) int (t2tb15 power_closure) (t2tb3 2))) 0
     i) (power 2 i)))))

(declare-fun fc99 () (Array Int Int))

;; fc_def
  (assert
  (forall ((k Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc99) (t2tb3 k))) (power 2 (+ k 1)))))

;; power_decomp_one
  (assert
  (forall ((i Int)) (=> (<= 1 i) (< (ind_isum fc99 1 i) (power 2 (+ i 1))))))

;; power_decomp_one_
  (assert
  (forall ((i Int))
  (=> (<= 1 i)
  (< (ind_isum
     (tb2t5
     (infix_at (infix_mngt int int) int (t2tb15 power_closure) (t2tb3 2))) 1
     i) (power 2 i)))))

;; growing_mult
  (assert
  (forall ((n Int) (m Int)) (=> (<= 0 n) (=> (<= 1 m) (<= n (* n m))))))

;; strict_growing_mult
  (assert (forall ((n Int) (m Int)) (=> (< 1 n) (=> (< 1 m) (< n (* n m))))))

;; init_exp
  (assert
  (forall ((k Int))
  (and (= (power k 0) 1) (and (= (power k 1) k) (= (power k 2) (* k k))))))

;; positive_int_exp
  (assert
  (forall ((k Int) (n Int))
  (=> (<= 1 k)
  (=> (<= 0 n)
  (and (<= 1 (power k n))
  (and (< 0 (power k n)) (<= (power k n) (power k (+ n 1)))))))))

;; strict_positive_int_exp
  (assert
  (forall ((k Int) (n Int))
  (=> (< 1 k)
  (=> (< 0 n)
  (and (< 1 (power k n))
  (and (< (power k (- n 1)) (power k n)) (< (power k n) (power k (+ n 1)))))))))

;; power_minus_one
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (and (=> (= (mod1 i 2) 0) (= (power (- 1) i) 1))
  (=> (= (mod1 i 2) 1) (= (power (- 1) i) (- 1)))))))

;; growing_exp
  (assert
  (forall ((k Int) (m Int) (n Int))
  (=> (<= 1 k) (=> (and (<= 0 m) (<= m n)) (<= (power k m) (power k n))))))

;; strict_growing_exp
  (assert
  (forall ((k Int) (m Int) (n Int))
  (=> (< 1 k) (=> (and (<= 0 m) (< m n)) (< (power k m) (power k n))))))

;; unicity_exp
  (assert
  (forall ((k Int) (m Int) (n Int))
  (=> (< 1 k)
  (=> (<= 0 m) (=> (<= 0 n) (= (= (power k m) (power k n)) (= m n)))))))

;; bounded_sum_exp
  (assert
  (forall ((i Int) (j Int) (m Int) (n Int))
  (=> (<= 0 m)
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 m)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (< (+ (* i (power 2 n)) j) (power 2 (+ m n)))))))))

;; power_minus_one
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (and (=> (= (mod1 i 2) 0) (= (power (- 1) i) 1))
  (=> (= (mod1 i 2) 1) (= (power (- 1) i) (- 1)))))))

(declare-fun kth_right (Int Int Int (Array Int Int)) Int)

;; kth_right_def
  (assert
  (forall ((i Int) (k Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((l Int))
  (=> (and (<= (- h k) l) (< l h))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 l))))))
  (= (kth_right i k h f) (mod1 (div1 i (ind_iproduct f (+ (- h k) 1) h))
                         (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 (- h k)))))))))))

;; kth_right_spec
  (assert
  (forall ((i Int) (k Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((l Int))
  (=> (and (<= (- h k) l) (< l h))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 l))))))
  (and (<= 0 (kth_right i k h f))
  (< (kth_right i k h f) (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 (- h k)))))))))))

;; kth_right_eq
  (assert
  (forall ((i Int) (k Int) (h Int) (f (Array Int Int)) (g (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((l Int))
  (=> (and (<= (- h k) l) (<= l h))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 l))))))
  (=>
  (forall ((l Int))
  (=> (and (<= (- h k) l) (<= l h))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 l))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 g) (t2tb3 l))))))
  (= (kth_right i k h f) (kth_right i k h g))))))))

;; kth_right_trans
  (assert
  (forall ((i Int) (k Int) (h Int) (t Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=> (forall ((l Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 l)))))
  (=> (<= 0 h)
  (=> (<= 0 t)
  (= (kth_right (div1 i (ind_iproduct f h (+ h t))) k h f) (kth_right i
                                                           (+ k t) (+ h t) f)))))))))

(declare-fun kth_left (Int Int Int Int (Array Int Int)) Int)

;; kth_left_def
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k (- h l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (< ind h))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 ind))))))
  (= (kth_left i k l h f) (kth_right i (+ (- (- h l) k) 1) h f))))))))

;; kth_left_spec
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k (- h l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (< ind h))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 ind))))))
  (and
  (= (kth_left i k l h f) (mod1 (div1 i (ind_iproduct f (+ l k) h))
                          (tb2t3
                          (infix_at int int (t2tb5 f) (t2tb3 (- (+ l k) 1))))))
  (and (<= 0 (kth_left i k l h f))
  (< (kth_left i k l h f) (tb2t3
                          (infix_at int int (t2tb5 f) (t2tb3 (- (+ l k) 1)))))))))))))

;; kth_left_eq
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int))
  (g (Array Int Int)))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (<= k (- h l)))
  (=> (<= 0 l)
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (< ind h))
  (and
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 ind))) (tb2t3
                                                      (infix_at int int
                                                      (t2tb5 g) (t2tb3 ind))))
  (< 0 (tb2t3 (infix_at int int (t2tb5 g) (t2tb3 ind)))))))
  (= (kth_left i k l h f) (kth_left i k l h g))))))))

;; kth_left_to_mod_div
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k (- h l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (<= ind h))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 ind))))))
  (= (kth_left i k l h f) (mod1 (div1 i (ind_iproduct f (+ l k) h))
                          (tb2t3
                          (infix_at int int (t2tb5 f) (t2tb3 (- (+ l k) 1))))))))))))

;; kth_left_trans
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (< k (- h l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (<= ind h))
  (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 ind))))))
  (= (kth_left i k l h f) (kth_left
                          (div1 i
                          (tb2t3
                          (infix_at int int (t2tb5 f) (t2tb3 (- h 1))))) k l
                          (- h 1) f))))))))

;; div_isum_exponents
  (assert
  (forall ((i Int) (k Int) (n Int) (m Int))
  (=> (<= 0 i)
  (=> (< 0 k)
  (=> (<= 0 n)
  (=> (<= 0 m)
  (and (= (power k (+ n m)) (* (power k n) (power k m)))
  (and (= (power k (+ n 1)) (* (power k n) k))
  (and (= (power k 1) k)
  (and (= (div1 (div1 i (power k n)) (power k m)) (div1 i (power k (+ n m))))
  (= (div1 (div1 i (power k n)) k) (div1 i (power k (+ n 1))))))))))))))

(declare-fun divp (Int Int) Int)

;; divp_def
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (= (divp i j) (* (div1 i j) j))))))

;; divp_spec
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i)
  (=> (< 0 j)
  (and (= i (+ (divp i j) (mod1 i j)))
  (and (and (<= (divp i j) i) (< i (* (+ (divp i j) 1) j)))
  (=> (< j i) (< 0 (divp i j)))))))))

;; kth_right_div_mod
  (assert
  (forall ((i Int) (k Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (= (kth_right i k h f) (div1 (mod1 i (ind_iproduct f (- h k) h))
                         (ind_iproduct f (+ (- h k) 1) h))))))))

;; kth_head
  (assert
  (forall ((i Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 h)
  (=> (forall ((k Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k)))))
  (= (kth_right i 1 h f) (mod1 i
                         (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 (- h 1)))))))))))

(declare-fun weighted_kth_right (Int Int Int (Array Int Int)) Int)

;; weighted_kth_right_def
  (assert
  (forall ((i Int) (k Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (=> (<= 1 k)
  (= (weighted_kth_right i k h f) (* (kth_right i k h f) (ind_iproduct f
                                                         (+ (- h k) 1) h))))))))

;; weighted_kth_right_
  (assert
  (forall ((i Int) (k Int) (h Int) (f (Array Int Int)))
  (=> (<= 1 k)
  (=> (<= 0 i)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (= (mod1 i (ind_iproduct f (- h k) h)) (+ (weighted_kth_right i k h f) 
  (mod1 i (ind_iproduct f (+ (- h k) 1) h)))))))))

(declare-fun fc100 (Int Int (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (h Int) (f (Array Int Int)) (a Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc100 i h f)) (t2tb3 a))) (weighted_kth_right
                                                                i a h f))))

;; kth_right_decomposition
  (assert
  (forall ((i Int) (k Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (= (mod1 i (ind_iproduct f (- h k) h)) (ind_isum (fc100 i h f) 1 (+ k 1))))))))

;; kth_left_div_mod
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (<= l h))
  (=> (and (<= 1 k) (<= k (- h l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (= (kth_left i k l h f) (div1 (mod1 i (ind_iproduct f (- (+ l k) 1) h))
                          (ind_iproduct f (+ l k) h)))))))))

(declare-fun weighted_kth_left (Int Int Int Int (Array Int Int)) Int)

;; weighted_kth_left_def
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= l h)
  (=> (and (<= 1 k) (<= k (- h l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (= (weighted_kth_left i k l h f) (weighted_kth_right i (+ (- (- h l) k) 1)
                                   h f))))))))

;; weighted_kth_left_
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= l h)
  (=> (and (<= 1 k) (<= k (- h l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (= (mod1 i (ind_iproduct f (- (+ l k) 1) h)) (+ (weighted_kth_left i k l h
                                                  f) (mod1 i
                                                     (ind_iproduct f (+ l k)
                                                     h))))))))))

(declare-fun fc101 (Int Int Int (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (l Int) (h Int) (f (Array Int Int)) (a Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc101 i l h f)) (t2tb3 a))) (weighted_kth_left
                                                                  i a l h f))))

;; bounded_kth_left_decomposition
  (assert
  (forall ((i Int) (k Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= l h)
  (=> (and (<= 1 k) (<= k (- h l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k1)))))
  (= (mod1 i (ind_iproduct f (- (+ l k) 1) h)) (ind_isum (fc101 i l h f) k
                                               (+ (- h l) 1)))))))))

(declare-fun fc102 (Int Int Int (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (l Int) (h Int) (f (Array Int Int)) (a Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc102 i l h f)) (t2tb3 a))) (weighted_kth_left
                                                                  i a l h f))))

;; kth_left_decomposition
  (assert
  (forall ((i Int) (l Int) (h Int) (f (Array Int Int)))
  (=> (and (<= 0 i) (< i (ind_iproduct f l h)))
  (=> (< l h)
  (=> (forall ((k Int)) (< 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k)))))
  (= i (ind_isum (fc102 i l h f) 1 (+ (- h l) 1))))))))

(declare-fun identity (Int) (matrix complex))

(declare-fun result8 () (Array Int (Array Int complex)))

;; result_def
  (assert
  (forall ((i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 result8) (t2tb3 i))
     (t2tb3 j))) (ite (= i j) c_one c_zero))))

;; identity_def
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (= (identity n) (tb2t14
                  (make_f complex1 (power 2 n) (power 2 n) (t2tb11 result8)))))))

;; identity_spec
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (and (= (rows complex1 (t2tb14 (identity n))) (power 2 n))
  (and (= (columns complex1 (t2tb14 (identity n))) (power 2 n))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (identity n)) i j)
  (= (get1 (identity n) i j) (ite (= i j) c_one c_zero)))))))))

;; identity_rows
  (assert
  (forall ((n Int))
  (=> (<= 0 n) (= (rows complex1 (t2tb14 (identity n))) (power 2 n)))))

;; identity_columns
  (assert
  (forall ((n Int))
  (=> (<= 0 n) (= (columns complex1 (t2tb14 (identity n))) (power 2 n)))))

;; identity_values
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (get1 (identity n) i j) (ite (= i j) c_one c_zero)))))))

(declare-fun kronecker ((matrix complex) (matrix complex)) (matrix complex))

(declare-fun result9 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; result_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (result9 m n))
     (t2tb3 i)) (t2tb3 j))) (infix_asdt
                            (get1 m (div1 i (rows complex1 (t2tb14 n)))
                            (div1 j (columns complex1 (t2tb14 n))))
                            (get1 n (mod1 i (rows complex1 (t2tb14 n)))
                            (mod1 j (columns complex1 (t2tb14 n))))))))

;; kronecker_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (= (kronecker m n) (tb2t14
                     (make_f complex1
                     (* (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
                     (* (columns complex1 (t2tb14 m)) (columns complex1
                                                      (t2tb14 n)))
                     (t2tb11 (result9 m n)))))))

;; kronecker_spec
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (and
  (= (rows complex1 (t2tb14 (kronecker m n))) (* (rows complex1 (t2tb14 m)) 
  (rows complex1 (t2tb14 n))))
  (and
  (= (columns complex1 (t2tb14 (kronecker m n))) (* (columns complex1
                                                    (t2tb14 m)) (columns
                                                                complex1
                                                                (t2tb14 n))))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (kronecker m n)) i j)
  (= (get1 (kronecker m n) i j) (infix_asdt
                                (get1 m (div1 i (rows complex1 (t2tb14 n)))
                                (div1 j (columns complex1 (t2tb14 n))))
                                (get1 n (mod1 i (rows complex1 (t2tb14 n)))
                                (mod1 j (columns complex1 (t2tb14 n))))))))))))

;; kronecker_eq
  (assert
  (forall ((m1 (matrix complex)) (n1 (matrix complex)) (m2 (matrix complex))
  (n2 (matrix complex)))
  (=> (= m1 m2) (=> (= n1 n2) (= (kronecker m1 n1) (kronecker m2 n2))))))

(declare-fun fc103 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc103 m n)) (t2tb3 i))
     (t2tb3 j))) (infix_asdt
                 (get1 m (div1 i (rows complex1 (t2tb14 n)))
                 (div1 j (columns complex1 (t2tb14 n))))
                 (get1 n (mod1 i (rows complex1 (t2tb14 n)))
                 (mod1 j (columns complex1 (t2tb14 n))))))))

;; get_kronecker
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (= (kronecker m n) (tb2t14
                     (make_f complex1
                     (* (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
                     (* (columns complex1 (t2tb14 m)) (columns complex1
                                                      (t2tb14 n)))
                     (t2tb11 (fc103 m n)))))))

;; kronecker_values
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (kronecker m n)) i j)
  (= (get1 (kronecker m n) i j) (infix_asdt
                                (get1 m (div1 i (rows complex1 (t2tb14 n)))
                                (div1 j (columns complex1 (t2tb14 n))))
                                (get1 n (mod1 i (rows complex1 (t2tb14 n)))
                                (mod1 j (columns complex1 (t2tb14 n)))))))))

;; kronecker_rows
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (= (rows complex1 (t2tb14 (kronecker m n))) (* (rows complex1 (t2tb14 m)) 
  (rows complex1 (t2tb14 n))))))

;; kronecker_columns
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (= (columns complex1 (t2tb14 (kronecker m n))) (* (columns complex1
                                                    (t2tb14 m)) (columns
                                                                complex1
                                                                (t2tb14 n))))))

;; kronecker_values_gen
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (kronecker m n)) i j)
  (= (get1 (kronecker m n) i j) (infix_asdt
                                (get1 m (div1 i (rows complex1 (t2tb14 n)))
                                (div1 j (columns complex1 (t2tb14 n))))
                                (get1 n (mod1 i (rows complex1 (t2tb14 n)))
                                (mod1 j (columns complex1 (t2tb14 n))))))))))

;; kronecker_mod_values
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (kronecker m n)) i j)
  (= (get1 (kronecker m n) i j) (infix_asdt
                                (get1 m
                                (div1
                                (mod1 i
                                (rows complex1 (t2tb14 (kronecker m n))))
                                (rows complex1 (t2tb14 n)))
                                (div1
                                (mod1 j
                                (columns complex1 (t2tb14 (kronecker m n))))
                                (columns complex1 (t2tb14 n))))
                                (get1 n
                                (mod1
                                (mod1 i
                                (rows complex1 (t2tb14 (kronecker m n))))
                                (rows complex1 (t2tb14 n)))
                                (mod1
                                (mod1 j
                                (columns complex1 (t2tb14 (kronecker m n))))
                                (columns complex1 (t2tb14 n)))))))))

;; kronecker_indexes
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int)
  (l Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (=> (valid_index complex1 (t2tb14 n) k l) (valid_index complex1
  (t2tb14 (kronecker m n)) (+ (* i (rows complex1 (t2tb14 n))) k)
  (+ (* j (columns complex1 (t2tb14 n))) l))))))

;; kronecker_indexes_com
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (kronecker m n)) i j)
  (and (valid_index complex1 (t2tb14 m) (div1 i (rows complex1 (t2tb14 n)))
  (div1 j (columns complex1 (t2tb14 n)))) (valid_index complex1 (t2tb14 n)
  (mod1 i (rows complex1 (t2tb14 n)))
  (mod1 j (columns complex1 (t2tb14 n))))))))

;; kronecker_assoc_pre
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex))
  (i Int) (j Int))
  (=>
  (and (<= 0 i)
  (< i (* (* (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n))) (rows
                                                                    complex1
                                                                    (t2tb14
                                                                    o)))))
  (=>
  (and (<= 0 j)
  (< j (* (* (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n))) 
  (columns complex1 (t2tb14 o)))))
  (= (get1 (kronecker (kronecker m n) o) i j) (get1
                                              (kronecker m (kronecker n o)) i
                                              j))))))

(declare-fun kronecker_closure () (Array (matrix complex) (Array (matrix complex) (matrix complex))))

(declare-fun t2tb16 ((Array (matrix complex) (matrix complex))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (matrix complex) (matrix complex)))) (sort
  (infix_mngt (matrix1 complex1) (matrix1 complex1)) (t2tb16 x))))

(declare-fun tb2t16 (uni) (Array (matrix complex) (matrix complex)))

;; BridgeL
  (assert
  (forall ((i (Array (matrix complex) (matrix complex))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt (matrix1 complex1) (matrix1 complex1)) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

(declare-fun t2tb17 ((Array (matrix complex) (Array (matrix complex) (matrix complex)))) uni)

;; t2tb_sort
  (assert
  (forall
  ((x (Array (matrix complex) (Array (matrix complex) (matrix complex)))))
  (sort
  (infix_mngt (matrix1 complex1)
  (infix_mngt (matrix1 complex1) (matrix1 complex1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (Array (matrix complex) (Array (matrix complex) (matrix complex))))

;; BridgeL
  (assert
  (forall
  ((i (Array (matrix complex) (Array (matrix complex) (matrix complex)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (infix_mngt (matrix1 complex1)
     (infix_mngt (matrix1 complex1) (matrix1 complex1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

;; kronecker_closure_def
  (assert
  (forall ((y (matrix complex)) (y1 (matrix complex)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (matrix1 complex1)
     (infix_at (infix_mngt (matrix1 complex1) (matrix1 complex1))
     (matrix1 complex1) (t2tb17 kronecker_closure) (t2tb14 y)) (t2tb14 y1))) 
  (kronecker y y1))))

;; kronecker_assoc
  (assert (op_assoc (matrix1 complex1) (t2tb17 kronecker_closure)))

;; kronecker_assoc_use
  (assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)))
  (= (kronecker a (kronecker b c)) (kronecker (kronecker a b) c))))

;; kronecker_assoc_use_rev
  (assert
  (forall ((a (matrix complex)) (b (matrix complex)) (c (matrix complex)))
  (= (kronecker (kronecker a b) c) (kronecker a (kronecker b c)))))

;; neutral_
  (assert
  (forall ((m (matrix complex)))
  (and (= (kronecker m (tb2t14 (make complex1 1 1 (t2tb c_one)))) m)
  (= (kronecker (tb2t14 (make complex1 1 1 (t2tb c_one))) m) m))))

;; neutral
  (assert
  (and
  (= (tb2t14 (make complex1 1 1 (t2tb c_one))) (tb2t14
                                               (neutral_elt
                                               (matrix1 complex1)
                                               (t2tb17 kronecker_closure))))
  (and (has_neutral (matrix1 complex1) (t2tb17 kronecker_closure)) (iterable
  (matrix1 complex1) (t2tb17 kronecker_closure)))))

;; kronecker_equal
  (assert
  (forall ((m (matrix complex)) (ml (matrix complex)) (n (matrix complex))
  (nl (matrix complex)))
  (=> (infix_eqeq (matrix1 complex1) (t2tb14 m) (t2tb14 ml))
  (=> (infix_eqeq (matrix1 complex1) (t2tb14 n) (t2tb14 nl)) (infix_eqeq
  (matrix1 complex1) (t2tb14 (kronecker m n)) (t2tb14 (kronecker ml nl)))))))

;; kron_id
  (assert
  (forall ((m Int) (n Int))
  (=> (<= 0 m)
  (=> (<= 0 n) (= (kronecker (identity m) (identity n)) (identity (+ m n)))))))

(declare-fun frows ((Array Int (matrix complex)) Int) Int)

(declare-fun t2tb18 ((Array Int (matrix complex))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int (matrix complex)))) (sort
  (infix_mngt int (matrix1 complex1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (Array Int (matrix complex)))

;; BridgeL
  (assert
  (forall ((i (Array Int (matrix complex))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int (matrix1 complex1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; frows_def
  (assert
  (forall ((f (Array Int (matrix complex))) (k Int))
  (= (frows f k) (rows complex1
                 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))))))

;; frows_spec
  (assert
  (forall ((f (Array Int (matrix complex))) (k Int)) (< 0 (frows f k))))

(declare-fun fcolumns ((Array Int (matrix complex)) Int) Int)

;; fcolumns_def
  (assert
  (forall ((f (Array Int (matrix complex))) (k Int))
  (= (fcolumns f k) (columns complex1
                    (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))))))

;; fcolumns_spec
  (assert
  (forall ((f (Array Int (matrix complex))) (k Int)) (< 0 (fcolumns f k))))

(declare-fun fc104 () (Array (matrix complex) (Array Int (matrix complex))))

(declare-fun t2tb19 ((Array (matrix complex) (Array Int (matrix complex)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (matrix complex) (Array Int (matrix complex))))) (sort
  (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1)))
  (t2tb19 x))))

(declare-fun tb2t19 (uni) (Array (matrix complex) (Array Int (matrix complex))))

;; BridgeL
  (assert
  (forall ((i (Array (matrix complex) (Array Int (matrix complex)))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1))) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

;; fc_def
  (assert
  (forall ((y0 (matrix complex)) (y1 Int))
  (= (tb2t14
     (infix_at (matrix1 complex1) int
     (infix_at (infix_mngt int (matrix1 complex1)) (matrix1 complex1)
     (t2tb19 fc104) (t2tb14 y0)) (t2tb3 y1))) y0)))

;; const_fcol
  (assert
  (forall ((m (matrix complex)) (k Int))
  (= (fcolumns
     (tb2t18
     (infix_at (infix_mngt int (matrix1 complex1)) (matrix1 complex1)
     (t2tb19 fc104) (t2tb14 m))) k) (columns complex1 (t2tb14 m)))))

(declare-fun fc105 () (Array (matrix complex) (Array Int (matrix complex))))

;; fc_def
  (assert
  (forall ((y0 (matrix complex)) (y1 Int))
  (= (tb2t14
     (infix_at (matrix1 complex1) int
     (infix_at (infix_mngt int (matrix1 complex1)) (matrix1 complex1)
     (t2tb19 fc105) (t2tb14 y0)) (t2tb3 y1))) y0)))

;; const_frows
  (assert
  (forall ((m (matrix complex)) (k Int))
  (= (frows
     (tb2t18
     (infix_at (infix_mngt int (matrix1 complex1)) (matrix1 complex1)
     (t2tb19 fc105) (t2tb14 m))) k) (rows complex1 (t2tb14 m)))))

(declare-fun binary ((Array Int Int)) Bool)

;; binary_def
  (assert
  (forall ((t (Array Int Int)))
  (= (binary t)
  (forall ((k Int))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))) 2))))))

;; set_binary
  (assert
  (forall ((t (Array Int Int)))
  (=>
  (forall ((k Int))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))) 2))) (binary t))))

;; get_binary
  (assert
  (forall ((t (Array Int Int)))
  (=> (binary t)
  (forall ((k Int))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))) 2))))))

(declare-fun shift (ty uni Int Int) uni)

;; shift_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort a (shift a x x1 x2)))))

;; shift_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (k Int))
  (= (shift a f i k) (infix_at a int f (t2tb3 (+ k i)))))))

;; shift_value
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (k Int))
  (= (shift a f i k) (infix_at a int f (t2tb3 (+ k i)))))))

;; shiftz
  (assert
  (forall ((a ty))
  (forall ((f uni) (k Int)) (= (shift a f 0 k) (infix_at a int f (t2tb3 k))))))

;; shiftz_gen
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (k Int))
  (=> (= i 0) (= (shift a f i k) (infix_at a int f (t2tb3 k)))))))

(declare-fun shift_closure (ty) uni)

;; shift_closure_sort
  (assert
  (forall ((a ty)) (sort
  (infix_mngt (infix_mngt int a) (infix_mngt int (infix_mngt int a)))
  (shift_closure a))))

;; shift_closure_def
  (assert
  (forall ((a ty))
  (forall ((y uni) (y1 Int) (y2 Int))
  (= (infix_at a int
     (infix_at (infix_mngt int a) int
     (infix_at (infix_mngt int (infix_mngt int a)) (infix_mngt int a)
     (shift_closure a) y) (t2tb3 y1)) (t2tb3 y2)) (shift a y y1 y2)))))

;; shiftz_quant
  (assert
  (forall ((a ty))
  (forall ((f uni))
  (=> (sort (infix_mngt int a) f)
  (= (infix_at (infix_mngt int a) int
     (infix_at (infix_mngt int (infix_mngt int a)) (infix_mngt int a)
     (shift_closure a) f) (t2tb3 0)) f)))))

;; shiftz_quant_rev
  (assert
  (forall ((a ty))
  (forall ((f uni))
  (=> (sort (infix_mngt int a) f)
  (= f (infix_at (infix_mngt int a) int
       (infix_at (infix_mngt int (infix_mngt int a)) (infix_mngt int a)
       (shift_closure a) f) (t2tb3 0)))))))

(declare-fun concat_fun (ty uni uni Int Int) uni)

;; concat_fun_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort a
  (concat_fun a x x1 x2 x3)))))

;; concat_fun_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni) (i Int) (k Int))
  (ite (< k i) (= (concat_fun a f g i k) (infix_at a int f (t2tb3 k)))
  (= (concat_fun a f g i k) (infix_at a int g (t2tb3 (- k i))))))))

;; shift_add
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (k Int))
  (= (shift a
     (infix_at (infix_mngt int a) int
     (infix_at (infix_mngt int (infix_mngt int a)) (infix_mngt int a)
     (shift_closure a) f) (t2tb3 j)) i k) (shift a f (+ i j) k)))))

;; concat_fun_value
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni) (i Int) (k Int))
  (= (concat_fun a f g i k) (ite (< k i) (infix_at a int f (t2tb3 k))
                            (infix_at a int g (t2tb3 (- k i))))))))

;; concat_eq
  (assert
  (forall ((a ty))
  (forall ((f1 uni) (g1 uni) (f2 uni) (g2 uni) (i1 Int) (i2 Int) (k Int))
  (=>
  (forall ((l Int))
  (=> (< l i1)
  (= (infix_at a int f1 (t2tb3 l)) (infix_at a int f2 (t2tb3 l)))))
  (=>
  (forall ((l Int))
  (=> (<= 0 l)
  (= (infix_at a int g1 (t2tb3 l)) (infix_at a int g2 (t2tb3 l)))))
  (=> (= i1 i2) (= (concat_fun a f1 g1 i1 k) (concat_fun a f2 g2 i2 k))))))))

(declare-fun mod_func (ty uni Int Int) uni)

;; mod_func_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort a (mod_func a x x1 x2)))))

;; mod_func_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (k Int) (i Int))
  (=> (< 0 k) (= (mod_func a f k i) (infix_at a int f (t2tb3 (mod1 i k))))))))

;; mod_func_inf
  (assert
  (forall ((a ty))
  (forall ((f uni) (k Int) (i Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i k))
  (= (mod_func a f k i) (infix_at a int f (t2tb3 i))))))))

(declare-fun mod_func_closure (ty) uni)

;; mod_func_closure_sort
  (assert
  (forall ((a ty)) (sort
  (infix_mngt (infix_mngt int a) (infix_mngt int (infix_mngt int a)))
  (mod_func_closure a))))

;; mod_func_closure_def
  (assert
  (forall ((a ty))
  (forall ((y uni) (y1 Int) (y2 Int))
  (= (infix_at a int
     (infix_at (infix_mngt int a) int
     (infix_at (infix_mngt int (infix_mngt int a)) (infix_mngt int a)
     (mod_func_closure a) y) (t2tb3 y1)) (t2tb3 y2)) (mod_func a y y1 y2)))))

;; shift_mod
  (assert
  (forall ((a ty))
  (forall ((f uni) (k Int) (i Int))
  (=> (< 0 k)
  (= (mod_func a f k i) (shift a
                        (infix_at (infix_mngt int a) int
                        (infix_at (infix_mngt int (infix_mngt int a))
                        (infix_mngt int a) (mod_func_closure a) f) (t2tb3 k))
                        k i))))))

;; shift_mod_rev
  (assert
  (forall ((a ty))
  (forall ((f uni) (k Int) (i Int))
  (=> (< 0 k)
  (= (shift a
     (infix_at (infix_mngt int a) int
     (infix_at (infix_mngt int (infix_mngt int a)) (infix_mngt int a)
     (mod_func_closure a) f) (t2tb3 k)) k i) (mod_func a f k i))))))

(declare-fun head_bit (Int Int) Int)

;; head_bit_def
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (= (head_bit i k) (div1 i (power 2 (- k 1))))))))

;; head_bit_spec
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (and (<= 0 (head_bit i k)) (<= (head_bit i k) 1))))))

(declare-fun tail_bits (Int Int) Int)

;; tail_bits_def
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (= (tail_bits i k) (mod1 i (power 2 (- k 1))))))))

;; tail_bits_spec
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (and (<= 0 (tail_bits i k)) (<= (tail_bits i k) (power 2 (- k 1))))))))

(declare-fun ht_to_int (Int Int Int) Int)

;; ht_to_int_def
  (assert
  (forall ((hi Int) (ti Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 hi) (< hi 2))
  (=> (and (<= 0 ti) (< ti (power 2 (- k 1))))
  (= (ht_to_int hi ti k) (+ (* hi (power 2 (- k 1))) ti)))))))

;; head_tail_inv
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (= (ht_to_int (head_bit i k) (tail_bits i k) k) i)))))

;; ht_to_int_head
  (assert
  (forall ((i Int) (ti Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (=> (and (<= 0 ti) (< ti (power 2 (- k 1))))
  (= (head_bit (ht_to_int (head_bit i k) ti k) k) (head_bit i k)))))))

;; ht_to_int_tail
  (assert
  (forall ((hi Int) (i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (=> (and (<= 0 hi) (< hi 2))
  (= (tail_bits (ht_to_int hi (tail_bits i k) k) k) (tail_bits i k)))))))

;; concat_fun_bin_i
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (k Int))
  (=> (binary f)
  (=> (binary g)
  (and (<= 0 (tb2t3 (concat_fun int (t2tb5 f) (t2tb5 g) i k)))
  (< (tb2t3 (concat_fun int (t2tb5 f) (t2tb5 g) i k)) 2))))))

;; shift_bin_i
  (assert
  (forall ((f (Array Int Int)) (i Int) (k Int))
  (=> (binary f)
  (and (<= 0 (tb2t3 (shift int (t2tb5 f) i k)))
  (< (tb2t3 (shift int (t2tb5 f) i k)) 2)))))

(declare-fun concat_fun_closure (ty) uni)

;; concat_fun_closure_sort
  (assert
  (forall ((a ty)) (sort
  (infix_mngt (infix_mngt int a)
  (infix_mngt (infix_mngt int a) (infix_mngt int (infix_mngt int a))))
  (concat_fun_closure a))))

;; concat_fun_closure_def
  (assert
  (forall ((a ty))
  (forall ((y uni) (y1 uni) (y2 Int) (y3 Int))
  (= (infix_at a int
     (infix_at (infix_mngt int a) int
     (infix_at (infix_mngt int (infix_mngt int a)) (infix_mngt int a)
     (infix_at
     (infix_mngt (infix_mngt int a) (infix_mngt int (infix_mngt int a)))
     (infix_mngt int a) (concat_fun_closure a) y) y1) (t2tb3 y2)) (t2tb3 y3)) 
  (concat_fun a y y1 y2 y3)))))

(declare-fun t2tb20 ((Array (Array Int Int) (Array Int (Array Int Int)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (Array Int Int) (Array Int (Array Int Int))))) (sort
  (infix_mngt (infix_mngt int int) (infix_mngt int (infix_mngt int int)))
  (t2tb20 x))))

(declare-fun tb2t20 (uni) (Array (Array Int Int) (Array Int (Array Int Int))))

;; BridgeL
  (assert
  (forall ((i (Array (Array Int Int) (Array Int (Array Int Int)))))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb20 (tb2t20 j)) j) :pattern ((t2tb20 (tb2t20 j))) )))

(declare-fun t2tb21 ((Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int))))) uni)

;; t2tb_sort
  (assert
  (forall
  ((x (Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int))))))
  (sort
  (infix_mngt (infix_mngt int int)
  (infix_mngt (infix_mngt int int) (infix_mngt int (infix_mngt int int))))
  (t2tb21 x))))

(declare-fun tb2t21 (uni) (Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int)))))

;; BridgeL
  (assert
  (forall
  ((i (Array (Array Int Int) (Array (Array Int Int) (Array Int (Array Int Int))))))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb21 (tb2t21 j)) j) :pattern ((t2tb21 (tb2t21 j))) )))

;; concat_fun_bin
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int))
  (=> (binary f)
  (=> (binary g) (binary
  (tb2t5
  (infix_at (infix_mngt int int) int
  (infix_at (infix_mngt int (infix_mngt int int)) (infix_mngt int int)
  (infix_at
  (infix_mngt (infix_mngt int int) (infix_mngt int (infix_mngt int int)))
  (infix_mngt int int) (concat_fun_closure int) (t2tb5 f)) (t2tb5 g))
  (t2tb3 i))))))))

;; mod_func_bin
  (assert
  (forall ((f (Array Int Int)) (k Int))
  (=> (< 0 k)
  (=> (binary f) (binary
  (tb2t5
  (infix_at (infix_mngt int int) int
  (infix_at (infix_mngt int (infix_mngt int int)) (infix_mngt int int)
  (mod_func_closure int) (t2tb5 f)) (t2tb3 k))))))))

;; shift_bin
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (=> (binary f) (binary
  (tb2t5
  (infix_at (infix_mngt int int) int
  (infix_at (infix_mngt int (infix_mngt int int)) (infix_mngt int int)
  (shift_closure int) (t2tb5 f)) (t2tb3 i)))))))

(declare-fun fc106 ((Array Int Int) (Array Int Int)) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (x Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc106 f g)) (t2tb3 x))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5 f)
                                                              (infix_at 
                                                              int int
                                                              (t2tb5 g)
                                                              (t2tb3 x)))))))

;; binary_comp
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)))
  (=> (binary f) (binary (fc106 f g)))))

;; set_is_all_binary
  (assert
  (forall ((t (Array Int Int)))
  (=>
  (forall ((k Int))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 t) (t2tb3 k))) 2))) (binary t))))

(declare-fun nary_length (Int Int) Int)

;; nary_length_spec
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (<= 0 i)
  (and
  (=> (< 0 i)
  (and (<= (power n (- (nary_length i n) 1)) i)
  (< i (power n (nary_length i n)))))
  (and (=> (< i n) (= (nary_length i n) 1))
  (and (<= 1 (nary_length i n)) (= i (mod1 i (power n (nary_length i n)))))))))))

(declare-fun binary_length (Int) Int)

;; binary_length_def
  (assert
  (forall ((i Int)) (=> (<= 0 i) (= (binary_length i) (nary_length i 2)))))

;; binary_length_spec
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (and
  (=> (< 0 i)
  (and (<= (power 2 (- (binary_length i) 1)) i)
  (< i (power 2 (binary_length i)))))
  (and (=> (< i 2) (= (binary_length i) 1))
  (and (<= 1 (binary_length i)) (= i (mod1 i (power 2 (binary_length i))))))))))

;; set_binary_length
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i)
  (=> (<= 0 k)
  (=> (=> (< 0 i) (and (<= (power 2 (- k 1)) i) (< i (power 2 k))))
  (=> (=> (< i 2) (= k 1)) (= k (binary_length i))))))))

;; set_binary_length_b
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i) (=> (< 0 k) (=> (< i (power 2 k)) (<= (binary_length i) k))))))

(declare-fun mat_mult_no_bound ((matrix complex)
  (matrix complex)) (matrix complex))

(declare-fun result10 ((matrix complex) (matrix complex) Int
  Int) (Array Int complex))

(declare-fun result11 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

(declare-fun result12 () (Array Int (Array Int complex)))

;; result_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (result10 m n i j)) (t2tb3 k))) 
  (infix_asdt (get1 m i k) (get1 n k j)))))

;; result_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (result11 m n))
     (t2tb3 i)) (t2tb3 j))) (ind_sum (result10 m n i j) 0
                            (columns complex1 (t2tb14 m))))))

;; result_def
  (assert
  (forall ((i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 result12) (t2tb3 i))
     (t2tb3 j))) c_zero)))

;; mat_mult_no_bound_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (ite (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (mat_mult_no_bound m n) (tb2t14
                             (make_f complex1 (rows complex1 (t2tb14 m))
                             (columns complex1 (t2tb14 n))
                             (t2tb11 (result11 m n)))))
  (= (mat_mult_no_bound m n) (tb2t14 (make_f complex1 1 1 (t2tb11 result12)))))))

(declare-fun fc107 ((matrix complex) (matrix complex) Int
  Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc107 m n i j)) (t2tb3 k))) 
  (infix_asdt (get1 m i k) (get1 n k j)))))

;; mat_mult_no_bound_spec
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (and
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 (mat_mult_no_bound m n))) (rows complex1
                                                      (t2tb14 m))))
  (and
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 (mat_mult_no_bound m n))) (columns complex1
                                                         (t2tb14 n))))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (mat_mult_no_bound m n)) i j)
  (= (get1 (mat_mult_no_bound m n) i j) (ind_sum (fc107 m n i j) 0
                                        (columns complex1 (t2tb14 m)))))))))))

(declare-fun mat_mult ((matrix complex) (matrix complex)) (matrix complex))

;; mat_mult_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (mat_mult m n) (mat_mult_no_bound m n)))))

(declare-fun fc108 ((matrix complex) (matrix complex) Int
  Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc108 m n i j)) (t2tb3 k))) 
  (infix_asdt (get1 m i k) (get1 n k j)))))

;; mat_mult_spec
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (and (= (rows complex1 (t2tb14 (mat_mult m n))) (rows complex1 (t2tb14 m)))
  (and
  (= (columns complex1 (t2tb14 (mat_mult m n))) (columns complex1 (t2tb14 n)))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (mat_mult m n)) i j)
  (= (get1 (mat_mult m n) i j) (ind_sum (fc108 m n i j) 0
                               (columns complex1 (t2tb14 m)))))))))))

(declare-fun fc109 ((matrix complex) (matrix complex) Int
  Int) (Array Int complex))

(declare-fun fc110 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc109 m n i j)) (t2tb3 k))) 
  (infix_asdt (get1 m i k) (get1 n k j)))))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc110 m n)) (t2tb3 i))
     (t2tb3 j))) (ind_sum (fc109 m n i j) 0 (columns complex1 (t2tb14 m))))))

;; correct_mat_mult
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (mat_mult m n) (tb2t14
                    (make_f complex1 (rows complex1 (t2tb14 m))
                    (columns complex1 (t2tb14 n)) (t2tb11 (fc110 m n))))))))

(declare-fun fc111 ((matrix complex) (matrix complex) Int
  Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc111 m n i j)) (t2tb3 k))) 
  (infix_asdt (get1 m i k) (get1 n k j)))))

;; mat_mult_values
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (valid_index complex1 (t2tb14 (mat_mult m n)) i j)
  (= (get1 (mat_mult m n) i j) (ind_sum (fc111 m n i j) 0
                               (columns complex1 (t2tb14 m))))))))

;; mat_mult_columns
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 (mat_mult m n))) (columns complex1 (t2tb14 n))))))

;; mat_mult_rows
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 (mat_mult m n))) (rows complex1 (t2tb14 m))))))

(declare-fun fc112 ((matrix complex) (matrix complex) Int
  Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc112 m n i j)) (t2tb3 k))) 
  (infix_asdt (get1 m i k) (get1 n k j)))))

;; mat_mult_values_quant
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (mat_mult m n)) i j)
  (= (get1 (mat_mult m n) i j) (ind_sum (fc112 m n i j) 0
                               (columns complex1 (t2tb14 m)))))))))

(declare-fun int_mat_prod ((Array Int (matrix complex)) Int
  Int) (matrix complex))

;; int_mat_prod_def
  (assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))) 
  (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))))
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))) 
  (columns complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt)))))))
  (ite (= (- j i) 0)
  (= (int_mat_prod f i j) (tb2t14
                          (infix_at (matrix1 complex1) int (t2tb18 f)
                          (t2tb3 i))))
  (= (int_mat_prod f i j) (mat_mult_no_bound (int_mat_prod f i (- j 1))
                          (tb2t14
                          (infix_at (matrix1 complex1) int (t2tb18 f)
                          (t2tb3 j))))))))))

;; int_mat_prod_spec
  (assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))) 
  (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))))
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))) 
  (columns complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt)))))))
  (and
  (= (rows complex1 (t2tb14 (int_mat_prod f i j))) (rows complex1
                                                   (infix_at
                                                   (matrix1 complex1) 
                                                   int (t2tb18 f) (t2tb3 i))))
  (and
  (= (columns complex1 (t2tb14 (int_mat_prod f i j))) (columns complex1
                                                      (infix_at
                                                      (matrix1 complex1) 
                                                      int (t2tb18 f)
                                                      (t2tb3 i))))
  (= (columns complex1 (t2tb14 (int_mat_prod f i j))) (rows complex1
                                                      (infix_at
                                                      (matrix1 complex1) 
                                                      int (t2tb18 f)
                                                      (t2tb3 i))))))))))

;; int_mat_prod_zero
  (assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
  (=>
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 i))) 
  (columns complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 i))))
  (=> (= i j)
  (= (int_mat_prod f i j) (tb2t14
                          (infix_at (matrix1 complex1) int (t2tb18 f)
                          (t2tb3 i))))))))

(declare-fun int_mat_prod_plus_one ((Array Int (matrix complex)) Int
  Int) tuple0)

;; int_mat_prod_plus_one_def
  (assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))) 
  (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))))
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))) 
  (columns complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt)))))))
  (= (int_mat_prod_plus_one f i j) Tuple0)))))

;; int_mat_prod_plus_one_spec
  (assert
  (forall ((f (Array Int (matrix complex))) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))) 
  (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))))
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))) 
  (columns complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt)))))))
  (= (int_mat_prod f i j) (mat_mult (int_mat_prod f i (- j 1))
                          (tb2t14
                          (infix_at (matrix1 complex1) int (t2tb18 f)
                          (t2tb3 j)))))))))

;; int_mat_prod_eq
  (assert
  (forall ((f (Array Int (matrix complex))) (g (Array Int (matrix complex)))
  (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (<= i k) (<= k j))
  (=> (and (<= i kqt) (<= kqt j))
  (and
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))) 
  (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))))
  (= (rows complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))) 
  (columns complex1 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 kqt))))))))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (<= k j))
  (= (tb2t14 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 k))) 
  (tb2t14 (infix_at (matrix1 complex1) int (t2tb18 g) (t2tb3 k))))))
  (= (int_mat_prod f i j) (int_mat_prod g i j)))))))

;; mat_mult_id
  (assert
  (forall ((n Int) (m (matrix complex)))
  (=> (<= 0 n)
  (=> (= (columns complex1 (t2tb14 m)) (power 2 n))
  (= (mat_mult m (identity n)) m)))))

;; id_mat_mult
  (assert
  (forall ((n Int) (m (matrix complex)))
  (=> (<= 0 n)
  (=> (= (rows complex1 (t2tb14 m)) (power 2 n))
  (= (mat_mult (identity n) m) m)))))

;; mat_mult_eq
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (mqt (matrix complex))
  (nqt (matrix complex)))
  (=> (= m mqt)
  (=> (= n nqt)
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (mat_mult m n) (mat_mult mqt nqt)))))))

(declare-fun add_mat ((matrix complex) (matrix complex)) (matrix complex))

(declare-fun result13 ((matrix complex)
  (matrix complex)) (Array Int (Array Int complex)))

;; result_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (result13 m n))
     (t2tb3 i)) (t2tb3 j))) (infix_pldt (get1 m i j) (get1 n i j)))))

;; add_mat_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (add_mat m n) (tb2t14
                   (make_f complex1 (rows complex1 (t2tb14 m))
                   (columns complex1 (t2tb14 m)) (t2tb11 (result13 m n)))))))))

;; add_mat_spec
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (and
  (and
  (= (columns complex1 (t2tb14 (add_mat m n))) (columns complex1 (t2tb14 m)))
  (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n))))
  (and
  (and (= (rows complex1 (t2tb14 (add_mat m n))) (rows complex1 (t2tb14 m)))
  (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n))))
  (forall ((i Int) (j Int))
  (= (get1 (add_mat m n) i j) (infix_pldt (get1 m i j) (get1 n i j))))))))))

;; add_mat_equal
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (mqt (matrix complex))
  (nqt (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= m mqt) (=> (= n nqt) (= (add_mat m n) (add_mat mqt nqt))))))))

;; add_value
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 m))))
  (= (get1 (add_mat m n) i j) (infix_pldt (get1 m i j) (get1 n i j)))))))))))

;; add_values
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (get1 (add_mat m n) i j) (infix_pldt (get1 m i j) (get1 n i j)))))))

;; add_mat_null_left
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (null_mat m) (= (add_mat m n) n))))))

;; add_mat_null_right
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (null_mat n) (= (add_mat m n) m))))))

;; set_equal_columns_elt
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
  (=>
  (and (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 n)) i))
  (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n))))))

;; set_equal_rows_elt
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
  (=>
  (and (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 n)) i))
  (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n))))))

;; add_columns
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 (add_mat m n))) (columns complex1 (t2tb14 m)))))))

;; add_rows
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 (add_mat m n))) (rows complex1 (t2tb14 m)))))))

;; set_equal_dim_elt
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=>
  (and (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 n)) i))
  (=>
  (and (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 n)) j))
  (and (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n))))))))

;; set_dim_add
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=>
  (and (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 n)) i))
  (=>
  (and (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 n)) j))
  (and (= (rows complex1 (t2tb14 (add_mat m n))) i)
  (= (columns complex1 (t2tb14 (add_mat m n))) j))))))

;; add_mat_eq
  (assert
  (forall ((m (matrix complex)) (m1 (matrix complex)) (n (matrix complex))
  (n1 (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= m m1) (=> (= n n1) (= (add_mat m n) (add_mat m1 n1))))))))

;; add_mat_comm
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (add_mat m n) (add_mat n m))))))

;; add_mat_eq_rev
  (assert
  (forall ((m (matrix complex)) (m1 (matrix complex)) (n (matrix complex))
  (n1 (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= m m1) (=> (= n n1) (= (add_mat n m) (add_mat m1 n1))))))))

(declare-fun add_neutral (tuple0) (matrix complex))

;; add_neutral_spec
  (assert
  (forall ((us tuple0))
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (add_neutral us)) i j)
  (= (get1 (add_neutral us) i j) c_zero)))
  (and (< 0 (rows complex1 (t2tb14 (add_neutral us))))
  (< 0 (columns complex1 (t2tb14 (add_neutral us))))))))

;; distr_1_pre
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex))
  (i Int) (j Int))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 o)))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 o))))
  (= (get1 (mat_mult (add_mat m n) o) i j) (get1
                                           (add_mat (mat_mult m o)
                                           (mat_mult n o)) i j)))))))))

;; distr_l
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 o)))
  (= (mat_mult (add_mat m n) o) (add_mat (mat_mult m o) (mat_mult n o))))))))

;; distr_2_pre
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex))
  (i Int) (j Int))
  (=> (= (rows complex1 (t2tb14 n)) (rows complex1 (t2tb14 o)))
  (=> (= (columns complex1 (t2tb14 n)) (columns complex1 (t2tb14 o)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 n))))
  (and (valid_index complex1 (t2tb14 (mat_mult m (add_mat n o))) i j)
  (= (get1 (mat_mult m (add_mat n o)) i j) (get1
                                           (add_mat (mat_mult m n)
                                           (mat_mult m o)) i j))))))))))

;; distr_r
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
  (=> (= (rows complex1 (t2tb14 n)) (rows complex1 (t2tb14 o)))
  (=> (= (columns complex1 (t2tb14 n)) (columns complex1 (t2tb14 o)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (mat_mult m (add_mat n o)) (add_mat (mat_mult m n) (mat_mult m o))))))))

(declare-fun infix_asdtdt (complex (matrix complex)) (matrix complex))

(declare-fun result14 (complex
  (matrix complex)) (Array Int (Array Int complex)))

;; result_def
  (assert
  (forall ((s complex) (m (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (result14 s m))
     (t2tb3 i)) (t2tb3 j))) (infix_asdt s (get1 m i j)))))

;; infix *.._def
  (assert
  (forall ((s complex) (m (matrix complex)))
  (= (infix_asdtdt s m) (tb2t14
                        (make_f complex1 (rows complex1 (t2tb14 m))
                        (columns complex1 (t2tb14 m))
                        (t2tb11 (result14 s m)))))))

;; infix *.._spec
  (assert
  (forall ((s complex) (m (matrix complex)))
  (and
  (= (columns complex1 (t2tb14 (infix_asdtdt s m))) (columns complex1
                                                    (t2tb14 m)))
  (and
  (= (rows complex1 (t2tb14 (infix_asdtdt s m))) (rows complex1 (t2tb14 m)))
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (infix_asdtdt s m)) i j)
  (= (get1 (infix_asdtdt s m) i j) (infix_asdt s (get1 m i j)))))
  (forall ((i Int) (j Int))
  (= (valid_index complex1 (t2tb14 (infix_asdtdt s m)) i j) (valid_index
  complex1 (t2tb14 m) i j))))))))

;; scalar_columns
  (assert
  (forall ((m (matrix complex)) (a complex))
  (= (columns complex1 (t2tb14 (infix_asdtdt a m))) (columns complex1
                                                    (t2tb14 m)))))

;; scalar_values
  (assert
  (forall ((m (matrix complex)) (a complex) (i Int) (j Int))
  (= (get1 (infix_asdtdt a m) i j) (infix_asdt a (get1 m i j)))))

;; scalar_rows
  (assert
  (forall ((m (matrix complex)) (a complex))
  (= (rows complex1 (t2tb14 (infix_asdtdt a m))) (rows complex1 (t2tb14 m)))))

;; scalar_null
  (assert (forall ((m (matrix complex))) (null_mat (infix_asdtdt c_zero m))))

;; scalar_c_one
  (assert (forall ((m (matrix complex))) (= (infix_asdtdt c_one m) m)))

;; scalar_c_one_gen
  (assert
  (forall ((m (matrix complex)) (a complex))
  (=> (= a c_one) (= (infix_asdtdt a m) m))))

;; scalar_null_gen
  (assert
  (forall ((m (matrix complex)) (a complex))
  (=> (= a c_zero) (null_mat (infix_asdtdt a m)))))

;; scalar_plus
  (assert
  (forall ((m (matrix complex)) (a complex) (b complex))
  (= (infix_asdtdt (infix_pldt a b) m) (add_mat (infix_asdtdt a m)
                                       (infix_asdtdt b m)))))

;; scalar_plus_rev
  (assert
  (forall ((m (matrix complex)) (a complex) (b complex))
  (= (add_mat (infix_asdtdt a m) (infix_asdtdt b m)) (infix_asdtdt
                                                     (infix_pldt a b) m))))

;; add_scal
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (infix_asdtdt a (add_mat m n)) (add_mat (infix_asdtdt a m)
                                    (infix_asdtdt a n)))))))

;; add_scal_rev
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (add_mat (infix_asdtdt a m) (infix_asdtdt a n)) (infix_asdtdt a
                                                     (add_mat m n)))))))

(declare-fun fc113 ((matrix complex) (matrix complex) complex Int
  Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int)
  (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc113 m n a i j)) (t2tb3 k))) 
  (infix_asdt (infix_asdt a (get1 m i k)) (get1 n k j)))))

;; mat_mult_scal_values_l
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int)
  (j Int))
  (=> (= (rows complex1 (t2tb14 n)) (columns complex1 (t2tb14 m)))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 n))))
  (= (infix_asdt a (get1 (mat_mult m n) i j)) (ind_sum (fc113 m n a i j) 0
                                              (columns complex1 (t2tb14 m)))))))))

(declare-fun fc114 ((matrix complex) (matrix complex) complex Int
  Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int)
  (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc114 m n a i j)) (t2tb3 k))) 
  (infix_asdt (infix_asdt a (get1 m i k)) (get1 n k j)))))

;; mat_mult_scal_values_r
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (i Int)
  (j Int))
  (=> (= (rows complex1 (t2tb14 n)) (columns complex1 (t2tb14 m)))
  (=> (= (rows complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 n))))
  (= (infix_asdt (get1 (mat_mult m n) i j) a) (ind_sum (fc114 m n a i j) 0
                                              (columns complex1 (t2tb14 m)))))))))))

;; mat_mut_scal
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 n)) (columns complex1 (t2tb14 m)))
  (= (mat_mult m (infix_asdtdt a n)) (infix_asdtdt a (mat_mult m n))))))

;; scal_mat_mut
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 n)) (columns complex1 (t2tb14 m)))
  (= (mat_mult (infix_asdtdt a m) n) (infix_asdtdt a (mat_mult m n))))))

;; mat_mut_scal_rev
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 n)) (columns complex1 (t2tb14 m)))
  (= (infix_asdtdt a (mat_mult m n)) (mat_mult m (infix_asdtdt a n))))))

;; scal_mat_mut_rev
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 n)) (columns complex1 (t2tb14 m)))
  (= (infix_asdtdt a (mat_mult m n)) (mat_mult (infix_asdtdt a m) n)))))

(declare-fun fc115 ((Array Int (Array Int complex)) (Array Int complex) Int
  Int) (Array Int complex))

(declare-fun fc116 ((Array Int (Array Int complex)) (Array Int complex)
  Int) (Array Int complex))

(declare-fun fc117 ((Array Int (Array Int complex)) (Array Int complex) Int
  Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex))
  (k Int) (l Int) (k1 Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc115 f g k l)) (t2tb3 k1))) 
  (infix_asdt
  (ind_sum
  (tb2t8 (infix_at (infix_mngt int complex1) int (t2tb11 f) (t2tb3 k1))) k l)
  (tb2t (infix_at complex1 int (t2tb8 g) (t2tb3 k1)))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex))
  (k1 Int) (k2 Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc116 f g k1)) (t2tb3 k2))) 
  (infix_asdt
  (tb2t
  (infix_at complex1 int
  (infix_at (infix_mngt int complex1) int (t2tb11 f) (t2tb3 k2)) (t2tb3 k1)))
  (tb2t (infix_at complex1 int (t2tb8 g) (t2tb3 k2)))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex))
  (i Int) (j Int) (k1 Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc117 f g i j)) (t2tb3 k1))) 
  (ind_sum (fc116 f g k1) i j))))

;; ind_sum_commute_scal_r
  (assert
  (forall ((f (Array Int (Array Int complex))) (g (Array Int complex))
  (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (<= k l)
  (= (ind_sum (fc115 f g k l) i j) (ind_sum (fc117 f g i j) k l))))))

;; mat_mult_assoc_pre
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex))
  (i Int) (j Int))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 n)) (rows complex1 (t2tb14 o)))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 o))))
  (= (get1 (mat_mult (mat_mult m n) o) i j) (get1 (mat_mult m (mat_mult n o))
                                            i j))))))))

;; mat_mult_assoc
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 n)) (rows complex1 (t2tb14 o)))
  (= (mat_mult (mat_mult m n) o) (mat_mult m (mat_mult n o)))))))

;; mat_mult_assoc_quant
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (forall ((o (matrix complex)))
  (=> (= (columns complex1 (t2tb14 n)) (rows complex1 (t2tb14 o)))
  (= (mat_mult (mat_mult m n) o) (mat_mult m (mat_mult n o))))))))

;; mat_mult_assoc_comm
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 n)) (rows complex1 (t2tb14 o)))
  (= (mat_mult m (mat_mult n o)) (mat_mult (mat_mult m n) o))))))

;; scalar_eq
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= m n) (= (infix_asdtdt a m) (infix_asdtdt a n)))))

;; scalar_eq_gen
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex) (b complex))
  (=> (= m n) (=> (= a b) (= (infix_asdtdt a m) (infix_asdtdt b n))))))

;; scalar_add
  (assert
  (forall ((m (matrix complex)) (a complex) (b complex))
  (= (infix_asdtdt (infix_pldt a b) m) (add_mat (infix_asdtdt a m)
                                       (infix_asdtdt b m)))))

;; scalar_assoc
  (assert
  (forall ((m (matrix complex)) (a complex) (b complex))
  (= (infix_asdtdt a (infix_asdtdt b m)) (infix_asdtdt (infix_asdt a b) m))))

;; scalar_assoc_rev
  (assert
  (forall ((m (matrix complex)) (a complex) (b complex))
  (= (infix_asdtdt (infix_asdt a b) m) (infix_asdtdt a (infix_asdtdt b m)))))

;; scalars_inv
  (assert
  (forall ((m (matrix complex)) (a complex) (b complex) (aqt complex)
  (bqt complex))
  (=> (= a aqt)
  (=> (= b bqt)
  (= (infix_asdtdt aqt (infix_asdtdt bqt m)) (infix_asdtdt b
                                             (infix_asdtdt a m)))))))

;; eq_scalar
  (assert
  (forall ((m (matrix complex)) (a complex) (b complex))
  (=>
  (exists ((i Int) (j Int))
  (and (valid_index complex1 (t2tb14 m) i j) (not (= (get1 m i j) c_zero))))
  (=> (= (infix_asdtdt a m) (infix_asdtdt b m)) (= a b)))))

(declare-fun mat_substr ((matrix complex) (matrix complex)) (matrix complex))

;; mat_substr_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (mat_substr m n) (add_mat m (infix_asdtdt (prefix_mndt c_one) n)))))))

;; mat_substr_spec
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (and
  (= (rows complex1 (t2tb14 (mat_substr m n))) (rows complex1 (t2tb14 m)))
  (and
  (= (columns complex1 (t2tb14 (mat_substr m n))) (columns complex1
                                                  (t2tb14 m)))
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 m))))
  (= (get1 (mat_substr m n) i j) (infix_mndt (get1 m i j) (get1 n i j))))))))))))

;; substr_rows
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (r Int))
  (=>
  (and (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 n)) r))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (rows complex1 (t2tb14 (mat_substr m n))) r)))))

;; substr_columns
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (c Int))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=>
  (and (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (columns complex1 (t2tb14 n)) c))
  (= (columns complex1 (t2tb14 (mat_substr m n))) c)))))

;; substr_value
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int) (j Int))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 m))))
  (= (get1 (mat_substr m n) i j) (infix_mndt (get1 m i j) (get1 n i j)))))))))

;; distr_l_substr
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 o)))
  (= (mat_mult (mat_substr m n) o) (mat_substr (mat_mult m o) (mat_mult n o))))))))

;; distr_r_substr
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (o (matrix complex)))
  (=> (= (rows complex1 (t2tb14 n)) (rows complex1 (t2tb14 o)))
  (=> (= (columns complex1 (t2tb14 n)) (columns complex1 (t2tb14 o)))
  (=> (= (columns complex1 (t2tb14 m)) (rows complex1 (t2tb14 o)))
  (= (mat_mult m (mat_substr n o)) (mat_substr (mat_mult m n) (mat_mult m o))))))))

;; mat_substr_eq
  (assert
  (forall ((m (matrix complex)) (mqt (matrix complex)) (n (matrix complex))
  (nqt (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= m mqt) (=> (= n nqt) (= (mat_substr m n) (mat_substr mqt nqt))))))))

;; substr_decomp
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= m (add_mat n (mat_substr m n)))))))

;; subtr_scal
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (infix_asdtdt a (mat_substr m n)) (mat_substr (infix_asdtdt a m)
                                       (infix_asdtdt a n)))))))

;; subtr_scal_rev
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (a complex))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (mat_substr (infix_asdtdt a m) (infix_asdtdt a n)) (infix_asdtdt a
                                                        (mat_substr m n)))))))

;; get_equal_mat_to_substr
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (=> (= m n)
  (= (mat_substr m n) (tb2t14
                      (make complex1 (rows complex1 (t2tb14 m))
                      (columns complex1 (t2tb14 m)) (t2tb c_zero)))))))))

;; set_inequal_mat_by_substr
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (= (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))
  (=> (= (columns complex1 (t2tb14 m)) (columns complex1 (t2tb14 n)))
  (= (not (= m n))
  (not
  (= (mat_substr m n) (tb2t14
                      (make complex1 (rows complex1 (t2tb14 m))
                      (columns complex1 (t2tb14 m)) (t2tb c_zero))))))))))

(declare-fun constant_size (ty uni uni) Bool)

;; constant_size_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (and
  (=> (constant_size a s f)
  (forall ((e uni))
  (=> (mem a e s)
  (and
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) (rows complex1
                                                         (infix_at
                                                         (matrix1 complex1) a
                                                         f (choose a s))))
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (columns 
                                                            complex1
                                                            (infix_at
                                                            (matrix1
                                                            complex1) a f
                                                            (choose a s))))))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (and
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) (rows complex1
                                                         (infix_at
                                                         (matrix1 complex1) a
                                                         f (choose a s))))
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (columns 
                                                            complex1
                                                            (infix_at
                                                            (matrix1
                                                            complex1) a f
                                                            (choose a s))))))))
  (constant_size a s f))))))

;; set_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) (rows complex1
                                                         (infix_at
                                                         (matrix1 complex1) a
                                                         f eqt))))))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (columns 
                                                            complex1
                                                            (infix_at
                                                            (matrix1
                                                            complex1) a f
                                                            eqt))))))))
  (constant_size a s f))))))

;; set_constant_size_exists
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (exists ((r Int))
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r)))))
  (=>
  (exists ((c Int))
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c)))))
  (constant_size a s f))))))

;; set_constant_size_t
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (constant_size a s f))))))

(declare-fun fc118 (ty uni uni (matrix complex)) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni) (x2 (matrix complex))) (sort
  (infix_mngt a (matrix1 complex1)) (fc118 a x x1 x2)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (p uni) (m (matrix complex)) (j uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc118 a f p m) j)) (ite (= 
                                                                (tb2t2
                                                                (infix_at
                                                                bool a p j)) true)
                                                                (tb2t14
                                                                (infix_at
                                                                (matrix1
                                                                complex1) a f
                                                                j)) m)))))

;; guarded_set_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (p uni) (m (matrix complex)))
  (=> (constant_size a s f)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (tb2t2 (infix_at bool a p e)) true))))
  (constant_size a s (fc118 a f p m)))))))

(declare-fun fc119 (ty uni (matrix complex) Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 (matrix complex)) (x2 Int) (x3 Int)) (sort
  (infix_mngt a (matrix1 complex1)) (fc119 a x x1 x2 x3)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (m (matrix complex)) (i Int) (j Int) (e uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc119 a f m i j) e)) (tb2t14
                                                                  (set3
                                                                  complex1
                                                                  (t2tb14 m)
                                                                  i j
                                                                  (infix_at
                                                                  complex1 a
                                                                  f e)))))))

;; set_constant_size_set
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (m (matrix complex)) (i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j) (constant_size a s
  (fc119 a f m i j))))))

;; get_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (and
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) (rows complex1
                                                         (infix_at
                                                         (matrix1 complex1) a
                                                         f eqt))))))
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (columns 
                                                            complex1
                                                            (infix_at
                                                            (matrix1
                                                            complex1) a f
                                                            eqt)))))))))))

(declare-fun s_rows (ty uni uni) Int)

;; s_rows_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (= (s_rows a s f) (rows complex1
                    (infix_at (matrix1 complex1) a f (choose a s))))))))

;; s_rows_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (and (< 0 (s_rows a s f))
  (and
  (forall ((e uni))
  (=> (mem a e s)
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) (s_rows a s f))))
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) (rows complex1
                                                         (infix_at
                                                         (matrix1 complex1) a
                                                         f eqt))))))))))))

(declare-fun s_columns (ty uni uni) Int)

;; s_columns_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (= (s_columns a s f) (columns complex1
                       (infix_at (matrix1 complex1) a f (choose a s))))))))

;; s_columns_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (and (< 0 (s_columns a s f))
  (and
  (forall ((e uni))
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (s_columns a s f))))
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (columns 
                                                            complex1
                                                            (infix_at
                                                            (matrix1
                                                            complex1) a f
                                                            eqt))))))))))))

;; set_s_rows
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int))
  (=> (constant_size a s f)
  (=> (= (rows complex1 (infix_at (matrix1 complex1) a f (choose a s))) r)
  (= (s_rows a s f) r))))))

;; set_s_rows_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (elt uni))
  (=> (constant_size a s f)
  (=> (mem a elt s)
  (= (s_rows a s f) (rows complex1 (infix_at (matrix1 complex1) a f elt))))))))

;; set_s_columns
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int))
  (=> (constant_size a s f)
  (=> (= (columns complex1 (infix_at (matrix1 complex1) a f (choose a s))) r)
  (= (s_columns a s f) r))))))

;; set_s_columns_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (elt uni))
  (=> (constant_size a s f)
  (=> (mem a elt s)
  (= (s_columns a s f) (columns complex1
                       (infix_at (matrix1 complex1) a f elt))))))))

;; s_rows_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t14 (infix_at (matrix1 complex1) a f e)) (tb2t14
                                                  (infix_at
                                                  (matrix1 complex1) a g e))))))
  (= (s_rows a s f) (s_rows a s g))))))))

;; set_constant_size_give
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (< 0 (cardinal a s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (and (constant_size a s f)
  (and
  (forall ((e uni))
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r)))
  (and
  (forall ((e uni))
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c)))
  (and (= (s_rows a s f) r) (= (s_columns a s f) c)))))))))))

;; s_columns_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t14 (infix_at (matrix1 complex1) a f e)) (tb2t14
                                                  (infix_at
                                                  (matrix1 complex1) a g e))))))
  (= (s_columns a s f) (s_columns a s g))))))))

;; subset_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (f uni))
  (=> (constant_size a s f)
  (=> (not (is_empty a sqt))
  (=> (subset1 a sqt s)
  (and (constant_size a sqt f)
  (and (= (s_rows a sqt f) (s_rows a s f))
  (= (s_columns a sqt f) (s_columns a s f))))))))))

;; set_s_rows_rem
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (and (constant_size a (remove a (choose a s) s) f)
  (= (s_rows a (remove a (choose a s) s) f) (rows complex1
                                            (infix_at (matrix1 complex1) a f
                                            (choose a s))))))))))

;; set_s_columns_rem
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (and (constant_size a (remove a (choose a s) s) f)
  (= (s_columns a (remove a (choose a s) s) f) (columns complex1
                                               (infix_at (matrix1 complex1) a
                                               f (choose a s))))))))))

;; set_s_rows_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=>
  (= (columns complex1 (infix_at (matrix1 complex1) a f x)) (s_columns a s f))
  (=> (= (rows complex1 (infix_at (matrix1 complex1) a f x)) (s_rows a s f))
  (= (s_rows a (add a x s) f) (s_rows a s f)))))))))

;; set_s_columns_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=>
  (= (columns complex1 (infix_at (matrix1 complex1) a f x)) (s_columns a s f))
  (=> (= (rows complex1 (infix_at (matrix1 complex1) a f x)) (s_rows a s f))
  (= (s_columns a (add a x s) f) (s_columns a s f)))))))))

;; set_s_rows_columns_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=>
  (= (columns complex1 (infix_at (matrix1 complex1) a f x)) (s_columns a s f))
  (=> (= (rows complex1 (infix_at (matrix1 complex1) a f x)) (s_rows a s f))
  (and (= (s_columns a (add a x s) f) (s_columns a s f))
  (= (s_rows a (add a x s) f) (s_rows a s f))))))))))

(declare-fun mat_sum (ty uni uni) (matrix complex))

;; mat_sum_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (ite (= (cardinal a s) 1)
  (= (mat_sum a s f) (tb2t14 (infix_at (matrix1 complex1) a f (element a s))))
  (= (mat_sum a s f) (add_mat
                     (tb2t14 (infix_at (matrix1 complex1) a f (choose a s)))
                     (mat_sum a (remove a (choose a s) s) f)))))))))

;; mat_sum_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (and (= (rows complex1 (t2tb14 (mat_sum a s f))) (s_rows a s f))
  (and (= (columns complex1 (t2tb14 (mat_sum a s f))) (s_columns a s f))
  (and
  (forall ((e uni))
  (=> (mem a e s)
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) (s_rows a s f))))
  (forall ((e uni))
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (s_columns a s f))))))))))))

;; columns_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (n Int))
  (=> (not (= (cardinal a s) 0))
  (=> (constant_size a s f)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) n))))
  (= (columns complex1 (t2tb14 (mat_sum a s f))) n)))))))

;; rows_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (n Int))
  (=> (not (= (cardinal a s) 0))
  (=> (constant_size a s f)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) n))))
  (= (rows complex1 (t2tb14 (mat_sum a s f))) n)))))))

;; mat_sum_cardone
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (= (cardinal a s) 1)
  (= (mat_sum a s f) (tb2t14 (infix_at (matrix1 complex1) a f (element a s))))))))

(declare-fun fc120 (ty uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt a complex1)
  (fc120 a x x1 x2)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (e uni))
  (= (tb2t (infix_at complex1 a (fc120 a f i j) e)) (get1
                                                    (tb2t14
                                                    (infix_at
                                                    (matrix1 complex1) a f e))
                                                    i j)))))

;; mat_sum_to_sum_pre
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (i Int) (j Int))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=> (and (<= 0 i) (< i (s_rows a s f)))
  (=> (and (<= 0 j) (< j (s_columns a s f)))
  (= (get1 (mat_sum a s f) i j) (sum a s (fc120 a f i j))))))))))

(declare-fun fc121 (ty uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt a complex1)
  (fc121 a x x1 x2)))))

(declare-fun fc122 (ty uni uni) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (e uni))
  (= (tb2t (infix_at complex1 a (fc121 a f i j) e)) (get1
                                                    (tb2t14
                                                    (infix_at
                                                    (matrix1 complex1) a f e))
                                                    i j)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc122 a s f))
     (t2tb3 i)) (t2tb3 j))) (sum a s (fc121 a f i j))))))

;; mat_sum_to_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (= (mat_sum a s f) (tb2t14
                     (make_f complex1 (s_rows a s f) (s_columns a s f)
                     (t2tb11 (fc122 a s f))))))))))

(declare-fun fc123 (ty uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt a complex1)
  (fc123 a x x1 x2)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (e uni))
  (= (tb2t (infix_at complex1 a (fc123 a f i j) e)) (get1
                                                    (tb2t14
                                                    (infix_at
                                                    (matrix1 complex1) a f e))
                                                    i j)))))

;; mat_sum_value
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (i Int) (j Int))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=> (valid_index complex1 (t2tb14 (mat_sum a s f)) i j)
  (= (get1 (mat_sum a s f) i j) (sum a s (fc123 a f i j)))))))))

;; mat_sum_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=> (= (rows complex1 (infix_at (matrix1 complex1) a f x)) (s_rows a s f))
  (=>
  (= (columns complex1 (infix_at (matrix1 complex1) a f x)) (s_columns a s f))
  (=> (not (mem a x s))
  (= (mat_sum a (add a x s) f) (add_mat
                               (tb2t14 (infix_at (matrix1 complex1) a f x))
                               (mat_sum a s f)))))))))))

;; mat_sum_plus_one
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (= (mat_sum a s f) (add_mat
                     (tb2t14 (infix_at (matrix1 complex1) a f (choose a s)))
                     (mat_sum a (remove a (choose a s) s) f))))))))

(declare-fun fc124 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 complex1))
  (fc124 b x x1)))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t14 (infix_at (matrix1 complex1) b (fc124 b f g) k)) (add_mat
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) b f
                                                              k))
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) b g
                                                              k)))))))

;; mat_sum_comp_pre
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni) (i Int) (j Int))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (and (<= 0 i) (< i (s_rows b s f)))
  (=> (and (<= 0 j) (< j (s_columns b s f)))
  (=> (= (s_rows b s f) (s_rows b s g))
  (=> (= (s_columns b s f) (s_columns b s g))
  (=> (< 0 (cardinal b s))
  (= (get1 (mat_sum b s (fc124 b f g)) i j) (get1
                                            (add_mat (mat_sum b s f)
                                            (mat_sum b s g)) i j))))))))))))

(declare-fun fc125 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 complex1))
  (fc125 b x x1)))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t14 (infix_at (matrix1 complex1) b (fc125 b f g) k)) (add_mat
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) b f
                                                              k))
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) b g
                                                              k)))))))

;; mat_sum_comp
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (= (s_rows b s f) (s_rows b s g))
  (=> (= (s_columns b s f) (s_columns b s g))
  (=> (< 0 (cardinal b s))
  (= (mat_sum b s (fc125 b f g)) (add_mat (mat_sum b s f) (mat_sum b s g)))))))))))

(declare-fun fc126 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 complex1))
  (fc126 b x x1)))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t14 (infix_at (matrix1 complex1) b (fc126 b f g) k)) (add_mat
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) b f
                                                              k))
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) b g
                                                              k)))))))

;; mat_sum_comp_rec
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (= (s_rows b s f) (s_rows b s g))
  (=> (= (s_columns b s f) (s_columns b s g))
  (=> (< 0 (cardinal b s))
  (= (add_mat (mat_sum b s f) (mat_sum b s g)) (mat_sum b s (fc126 b f g)))))))))))

(declare-fun fc127 (ty ty uni uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt a complex1)
  (fc127 b a x x1 x2 x3)))))

(declare-fun fc128 (ty ty uni Int Int uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 Int) (x2 Int) (x3 uni)) (sort (infix_mngt b complex1)
  (fc128 b a x x1 x2 x3)))))

(declare-fun fc129 (ty ty uni uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt a complex1)
  (fc129 b a x x1 x2 x3)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
  (= (tb2t (infix_at complex1 a (fc127 b a sqt f i j) e)) (get1
                                                          (mat_sum b sqt
                                                          (infix_at
                                                          (infix_mngt b
                                                          (matrix1 complex1))
                                                          a f e)) i j)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (i Int) (j Int) (e uni) (e1 uni))
  (= (tb2t (infix_at complex1 b (fc128 b a f i j e) e1)) (get1
                                                         (tb2t14
                                                         (infix_at
                                                         (matrix1 complex1) b
                                                         (infix_at
                                                         (infix_mngt b
                                                         (matrix1 complex1))
                                                         a f e) e1)) i j)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
  (= (tb2t (infix_at complex1 a (fc129 b a sqt f i j) e)) (sum b sqt
                                                          (fc128 b a f i j e))))))

;; mat_sum_to_sum_fun
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (sqt uni) (f uni) (r Int) (c Int) (i Int) (j Int))
  (=> (< 0 (cardinal a s))
  (=> (< 0 (cardinal b sqt))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (forall ((e1 uni))
  (=> (sort b e1)
  (=> (mem a e s)
  (=> (mem b e1 sqt)
  (= (rows complex1
     (infix_at (matrix1 complex1) b
     (infix_at (infix_mngt b (matrix1 complex1)) a f e) e1)) r)))))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (forall ((e1 uni))
  (=> (sort b e1)
  (=> (mem a e s)
  (=> (mem b e1 sqt)
  (= (columns complex1
     (infix_at (matrix1 complex1) b
     (infix_at (infix_mngt b (matrix1 complex1)) a f e) e1)) c)))))))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (sum a s (fc127 b a sqt f i j)) (sum a s (fc129 b a sqt f i j))))))))))))

(declare-fun fc130 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc130 b a x x1)))))

(declare-fun fc131 (ty ty uni Int Int uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 Int) (x2 Int) (x3 uni)) (sort (infix_mngt b complex1)
  (fc131 b a x x1 x2 x3)))))

(declare-fun fc132 (ty ty uni uni Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt a complex1)
  (fc132 b a x x1 x2 x3)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (e uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc130 b a sqt f) e)) (mat_sum b
                                                                  sqt
                                                                  (infix_at
                                                                  (infix_mngt
                                                                  b
                                                                  (matrix1
                                                                  complex1))
                                                                  a f e))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (i Int) (j Int) (e uni) (eqt uni))
  (= (tb2t (infix_at complex1 b (fc131 b a f i j e) eqt)) (get1
                                                          (tb2t14
                                                          (infix_at
                                                          (matrix1 complex1)
                                                          b
                                                          (infix_at
                                                          (infix_mngt b
                                                          (matrix1 complex1))
                                                          a f e) eqt)) i j)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
  (= (tb2t (infix_at complex1 a (fc132 b a sqt f i j) e)) (sum b sqt
                                                          (fc131 b a f i j e))))))

;; mat_sum_to_sum_double_pre
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (sqt uni) (f uni) (r Int) (c Int) (i Int) (j Int))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort b eqt)
  (=> (mem a e s)
  (=> (mem b eqt sqt)
  (= (rows complex1
     (infix_at (matrix1 complex1) b
     (infix_at (infix_mngt b (matrix1 complex1)) a f e) eqt)) r))))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort b eqt)
  (=> (mem a e s)
  (=> (mem b eqt sqt)
  (= (columns complex1
     (infix_at (matrix1 complex1) b
     (infix_at (infix_mngt b (matrix1 complex1)) a f e) eqt)) c))))))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (=> (< 0 (cardinal a s))
  (=> (< 0 (cardinal b sqt))
  (= (get1 (mat_sum a s (fc130 b a sqt f)) i j) (sum a s
                                                (fc132 b a sqt f i j))))))))))))

(declare-fun fc133 (ty uni (matrix complex)) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 (matrix complex))) (sort
  (infix_mngt a (matrix1 complex1)) (fc133 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (n (matrix complex)) (e uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc133 a f n) e)) (mat_mult
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) a f
                                                              e)) n)))))

;; mat_mult_sum_out_l
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (n (matrix complex)))
  (=> (< 0 (cardinal a s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) (rows complex1
                                                            (t2tb14 n))))))
  (=>
  (exists ((r Int))
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r)))))
  (= (mat_mult (mat_sum a s f) n) (mat_sum a s (fc133 a f n)))))))))

(declare-fun mat_sum_dim (ty uni uni Int Int) (matrix complex))

;; mat_sum_dim_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (ite (= (cardinal a s) 0)
  (= (mat_sum_dim a s f r c) (tb2t14 (make complex1 r c (t2tb c_zero))))
  (= (mat_sum_dim a s f r c) (mat_sum a s f))))))))))

;; mat_sum_dim_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (and (=> (< 0 (cardinal a s)) (= (mat_sum_dim a s f r c) (mat_sum a s f)))
  (and
  (=> (= (cardinal a s) 0)
  (= (mat_sum_dim a s f r c) (tb2t14 (make complex1 r c (t2tb c_zero)))))
  (and (= (rows complex1 (t2tb14 (mat_sum_dim a s f r c))) r)
  (= (columns complex1 (t2tb14 (mat_sum_dim a s f r c))) c)))))))))))

;; mat_sum_dim_to_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (< 0 (cardinal a s))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (= (mat_sum_dim a s f r c) (mat_sum a s f))))))))))

;; mat_sum_dim_to_make_zero
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (= (cardinal a s) 0)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (=> (< 0 r)
  (=> (< 0 c)
  (= (mat_sum_dim a s f r c) (tb2t14 (make complex1 r c (t2tb c_zero))))))))))))

;; mat_sum_dim_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni) (r Int) (c Int))
  (=> (<= 0 (cardinal a s))
  (=> (not (mem a x s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e (add a x s))
  (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e (add a x s))
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (=> (< 0 r)
  (=> (< 0 c)
  (= (mat_sum_dim a (add a x s) f r c) (add_mat
                                       (tb2t14
                                       (infix_at (matrix1 complex1) a f x))
                                       (mat_sum_dim a s f r c))))))))))))

(declare-fun fc134 (ty uni complex) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 complex)) (sort (infix_mngt a (matrix1 complex1))
  (fc134 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (a1 complex) (k uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc134 a f a1) k)) (infix_asdtdt
                                                               a1
                                                               (tb2t14
                                                               (infix_at
                                                               (matrix1
                                                               complex1) a f
                                                               k)))))))

;; mat_sum_scalar
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (a1 complex))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (= (mat_sum a s (fc134 a f a1)) (infix_asdtdt a1 (mat_sum a s f))))))))

(declare-fun fc135 (ty uni complex) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 complex)) (sort (infix_mngt a (matrix1 complex1))
  (fc135 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (a1 complex) (k uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc135 a f a1) k)) (infix_asdtdt
                                                               a1
                                                               (tb2t14
                                                               (infix_at
                                                               (matrix1
                                                               complex1) a f
                                                               k)))))))

;; mat_sum_scalar_rev
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (a1 complex))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (= (infix_asdtdt a1 (mat_sum a s f)) (mat_sum a s (fc135 a f a1))))))))

;; real
  (assert (forall ((x complex)) (=> (real_ x) (= x (r_to_c (real_part x))))))

;; pure_im
  (assert
  (forall ((x complex))
  (=> (pure_im_ x) (= x (infix_asdt im (r_to_c (im_part x)))))))

;; im_dec
  (assert (and (= (real_part im) 0.0) (= (im_part im) 1.0)))

;; c_one_dec
  (assert (and (= (real_part c_one) 1.0) (= (im_part c_one) 0.0)))

;; c_zero_dec
  (assert (and (= (real_part c_zero) 0.0) (= (im_part c_zero) 0.0)))

;; ttwo_dec
  (assert
  (and (= (real_part (infix_pldt c_one c_one)) 2.0)
  (= (im_part (infix_pldt c_one c_one)) 0.0)))

(declare-fun i_to_c (Int) complex)

;; i_to_c_def
  (assert (forall ((i Int)) (= (i_to_c i) (r_to_c (from_int1 i)))))

;; i_to_c_spec
  (assert (forall ((i Int)) (real_ (i_to_c i))))

;; i_to_c_zero
  (assert (= (i_to_c 0) c_zero))

;; i_to_c_surj
  (assert
  (forall ((i Int) (j Int))
  (=> (not (= i j)) (not (= (i_to_c i) (i_to_c j))))))

;; i_to_c_eq
  (assert (forall ((i Int) (j Int)) (=> (= i j) (= (i_to_c i) (i_to_c j)))))

;; i_to_c_inf
  (assert
  (forall ((i Int) (j Int)) (=> (< i j) (infix_lsdt (i_to_c i) (i_to_c j)))))

;; i_to_c_nzero
  (assert (forall ((i Int)) (=> (not (= i 0)) (not (= (i_to_c i) c_zero)))))

;; i_to_c_one
  (assert (= (i_to_c 1) c_one))

;; i_to_c_add
  (assert
  (forall ((i Int) (j Int))
  (= (infix_pldt (i_to_c i) (i_to_c j)) (i_to_c (+ i j)))))

;; i_to_c_add_rev
  (assert
  (forall ((i Int) (j Int))
  (= (i_to_c (+ i j)) (infix_pldt (i_to_c i) (i_to_c j)))))

;; i_to_c_ttwo
  (assert (= (i_to_c 2) (infix_pldt c_one c_one)))

;; i_to_c_pos
  (assert (forall ((a Int)) (=> (<= 0 a) (infix_lseqdt c_zero (i_to_c a)))))

;; i_to_c_minus
  (assert (forall ((a Int)) (= (i_to_c (- a)) (prefix_mndt (i_to_c a)))))

;; i_to_c_strict_pos
  (assert (forall ((a Int)) (=> (< 0 a) (infix_lsdt c_zero (i_to_c a)))))

;; i_to_c_mult_pos
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 j) (= (infix_asdt (i_to_c i) (i_to_c j)) (i_to_c (* i j))))))

;; i_to_c_mult
  (assert
  (forall ((i Int) (j Int))
  (= (infix_asdt (i_to_c i) (i_to_c j)) (i_to_c (* i j)))))

;; i_to_c_mult_rev
  (assert
  (forall ((i Int) (j Int))
  (= (i_to_c (* i j)) (infix_asdt (i_to_c i) (i_to_c j)))))

;; i_to_c_mult_assoc
  (assert
  (forall ((x complex) (i Int) (j Int))
  (= (infix_asdt x (i_to_c (* i j))) (infix_asdt (infix_asdt x (i_to_c i))
                                     (i_to_c j)))))

;; i_to_c_mult_assoc_rev
  (assert
  (forall ((x complex) (i Int) (j Int))
  (= (infix_asdt (infix_asdt x (i_to_c i)) (i_to_c j)) (infix_asdt x
                                                       (i_to_c (* i j))))))

;; i_to_c_sub
  (assert
  (forall ((i Int) (j Int))
  (= (infix_mndt (i_to_c i) (i_to_c j)) (i_to_c (- i j)))))

;; i_to_c_opp
  (assert (forall ((i Int)) (= (i_to_c (- i)) (prefix_mndt (i_to_c i)))))

;; i_to_c_div
  (assert
  (forall ((i Int) (j Int))
  (=> (not (= j 0)) (= (infix_sldt (i_to_c (* i j)) (i_to_c j)) (i_to_c i)))))

;; i_to_c_minus_mult
  (assert
  (forall ((i Int) (j Int))
  (= (infix_asdt (i_to_c (- i)) (i_to_c j)) (infix_asdt (i_to_c i)
                                            (i_to_c (- j))))))

;; i_to_c_div_leq_c_one
  (assert
  (forall ((a Int) (b Int))
  (=> (and (<= 0 a) (< a b)) (infix_lseqdt (infix_sldt (i_to_c a) (i_to_c b))
  c_one))))

;; compat_i_to_c_infeq
  (assert
  (forall ((a Int) (b Int))
  (=> (<= a b) (infix_lseqdt (i_to_c a) (i_to_c b)))))

;; compat_i_to_c_inf
  (assert
  (forall ((a Int) (b Int)) (=> (< a b) (infix_lsdt (i_to_c a) (i_to_c b)))))

;; compat_i_to_c_supeq
  (assert
  (forall ((a Int) (b Int))
  (=> (<= b a) (infix_lseqdt (i_to_c b) (i_to_c a)))))

;; compat_i_to_c_sup
  (assert
  (forall ((a Int) (b Int)) (=> (< b a) (infix_gtdt (i_to_c a) (i_to_c b)))))

;; positive_int_squrt
  (assert
  (forall ((i Int)) (=> (< 0 i) (infix_gtdt (square_rt (i_to_c i)) c_zero))))

;; non_null_int_squrt
  (assert
  (forall ((i Int)) (=> (< 0 i) (not (= (square_rt (i_to_c i)) c_zero)))))

;; ind_sum_constant
  (assert
  (forall ((f (Array Int complex)) (valu complex) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) valu)))
  (= (ind_sum f i j) (infix_asdt valu (i_to_c (- j i))))))))

;; ind_sum_constant_from_z
  (assert
  (forall ((f (Array Int complex)) (valu complex) (j Int))
  (=> (<= 0 j)
  (=>
  (forall ((k Int))
  (=> (and (<= 0 k) (< k j))
  (= (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 k))) valu)))
  (= (ind_sum f 0 j) (infix_asdt valu (i_to_c j)))))))

;; sum_constant
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni) (x complex))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) x))))
  (= (sum a s t) (infix_asdt (i_to_c (cardinal a s)) x))))))

;; ind_sum_constant_case
  (assert
  (forall ((n Int) (t (Array Int complex)) (p (Array Int Bool)) (x complex)
  (y complex) (k1 Int))
  (=> (<= 0 n)
  (=> (= (cardinal int (my_filter int (t2tb4 (to_fset 0 n)) (t2tb12 p))) k1)
  (=>
  (forall ((e Int))
  (=> (and (<= 0 e) (< e n))
  (=> (= (tb2t2 (infix_at bool int (t2tb12 p) (t2tb3 e))) true)
  (= (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 e))) x))))
  (=>
  (forall ((e Int))
  (=> (and (<= 0 e) (< e n))
  (=> (not (= (tb2t2 (infix_at bool int (t2tb12 p) (t2tb3 e))) true))
  (= (tb2t (infix_at complex1 int (t2tb8 t) (t2tb3 e))) y))))
  (= (ind_sum t 0 n) (infix_pldt (infix_asdt (i_to_c k1) x)
                     (infix_asdt (i_to_c (- n k1)) y)))))))))

;; sum_const_one
  (assert
  (forall ((a ty))
  (forall ((s uni) (t uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (tb2t (infix_at complex1 a t e)) c_one))))
  (= (sum a s t) (i_to_c (cardinal a s)))))))

(declare-fun fc136 (ty (matrix complex)) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex))) (sort (infix_mngt a (matrix1 complex1))
  (fc136 a x)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex)) (us uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc136 a x) us)) x))))

;; mat_sum_const
  (assert
  (forall ((a ty))
  (forall ((s uni) (x (matrix complex)))
  (=> (< 0 (cardinal a s))
  (= (mat_sum a s (fc136 a x)) (infix_asdtdt (i_to_c (cardinal a s)) x))))))

(declare-fun fc137 (ty (matrix complex)) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex))) (sort (infix_mngt a (matrix1 complex1))
  (fc137 a x)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex)) (us uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc137 a x) us)) x))))

;; mat_sum_quot
  (assert
  (forall ((a ty))
  (forall ((s uni) (x (matrix complex)))
  (=> (< 0 (cardinal a s))
  (= x (infix_asdtdt (infix_sldt c_one (i_to_c (cardinal a s)))
       (mat_sum a s (fc137 a x))))))))

(declare-fun fc138 (ty uni (matrix complex) Int Int) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 (matrix complex)) (x2 Int) (x3 Int)) (sort
  (infix_mngt a (matrix1 complex1)) (fc138 a x x1 x2 x3)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (m (matrix complex)) (i Int) (j Int) (k uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc138 a f m i j) k)) (infix_asdtdt
                                                                  (get1
                                                                  (tb2t14
                                                                  (infix_at
                                                                  (matrix1
                                                                  complex1) a
                                                                  f k)) i j)
                                                                  m)))))

;; mat_sum_scalar_right
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (m (matrix complex)) (i Int) (j Int))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=> (and (<= 0 i) (< i (s_rows a s f)))
  (=> (and (<= 0 j) (< j (s_columns a s f)))
  (= (infix_asdtdt (get1 (mat_sum a s f) i j) m) (mat_sum a s
                                                 (fc138 a f m i j))))))))))

;; mat_sum_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s)
  (= (tb2t14 (infix_at (matrix1 complex1) a f a1)) (tb2t14
                                                   (infix_at
                                                   (matrix1 complex1) a g a1))))))
  (= (mat_sum a s f) (mat_sum a s g))))))))

;; mat_sum_eq_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (f uni) (g uni))
  (=> (< 0 (cardinal a s))
  (=> (= s sqt)
  (=> (constant_size a s f)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s)
  (= (tb2t14 (infix_at (matrix1 complex1) a f a1)) (tb2t14
                                                   (infix_at
                                                   (matrix1 complex1) a g a1))))))
  (= (mat_sum a s f) (mat_sum a sqt g)))))))))

;; mat_sum_eq_gen_int
  (assert
  (forall ((i1 Int) (i2 Int) (o1 Int) (o2 Int)
  (f (Array Int (matrix complex))) (g (Array Int (matrix complex))))
  (=> (< i1 o1)
  (=> (= i1 o1)
  (=> (= i2 o2)
  (=> (constant_size int (t2tb4 (to_fset i1 o1)) (t2tb18 f))
  (=>
  (forall ((a Int))
  (=> (mem int (t2tb3 a) (t2tb4 (to_fset i1 o1)))
  (= (tb2t14 (infix_at (matrix1 complex1) int (t2tb18 f) (t2tb3 a))) 
  (tb2t14 (infix_at (matrix1 complex1) int (t2tb18 g) (t2tb3 a))))))
  (= (mat_sum int (t2tb4 (to_fset i1 o1)) (t2tb18 f)) (mat_sum int
                                                      (t2tb4 (to_fset i2 o2))
                                                      (t2tb18 g))))))))))

;; mat_sum_comp_eq
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni) (h uni))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (constant_size b s h)
  (=>
  (and (= (s_rows b s f) (s_rows b s g)) (= (s_rows b s g) (s_rows b s h)))
  (=>
  (and (= (s_columns b s f) (s_columns b s g))
  (= (s_columns b s g) (s_columns b s h)))
  (=> (< 0 (cardinal b s))
  (=>
  (forall ((e uni))
  (=> (sort b e)
  (forall ((i Int) (j Int))
  (=> (mem b e s)
  (=> (and (<= 0 i) (< i (s_rows b s f)))
  (=> (and (<= 0 j) (< j (s_columns b s f)))
  (= (infix_pldt (get1 (tb2t14 (infix_at (matrix1 complex1) b f e)) i j)
     (get1 (tb2t14 (infix_at (matrix1 complex1) b g e)) i j)) (get1
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) b h
                                                              e)) i j))))))))
  (= (add_mat (mat_sum b s f) (mat_sum b s g)) (mat_sum b s h))))))))))))

;; mat_sum_dim_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t14 (infix_at (matrix1 complex1) a f e)) (tb2t14
                                                  (infix_at
                                                  (matrix1 complex1) a g e))))))
  (= (mat_sum_dim a s f r c) (mat_sum_dim a s g r c))))))))))

(declare-fun fc139 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc139 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc139 b a f t) a1)) (tb2t14
                                                                 (infix_at
                                                                 (matrix1
                                                                 complex1) b
                                                                 f
                                                                 (infix_at b
                                                                 a t a1)))))))

;; constant_size_map
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (t uni))
  (=> (constant_size a s (fc139 b a f t)) (constant_size b (map1 b a t s) f)))))

(declare-fun fc140 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc140 b a x x1)))))

(declare-fun fc141 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc141 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc140 b a f t) a1)) (tb2t14
                                                                 (infix_at
                                                                 (matrix1
                                                                 complex1) b
                                                                 f
                                                                 (infix_at b
                                                                 a t a1)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc141 b a f t) a1)) (tb2t14
                                                                 (infix_at
                                                                 (matrix1
                                                                 complex1) b
                                                                 f
                                                                 (infix_at b
                                                                 a t a1)))))))

;; map_mat_sum
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (t uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s (fc140 b a f t))
  (=> (p_injective b a t s)
  (= (mat_sum b (map1 b a t s) f) (mat_sum a s (fc141 b a f t)))))))))

(declare-fun fc142 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc142 b a x x1)))))

(declare-fun fc143 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc143 b a x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc142 b a f t) a1)) (tb2t14
                                                                 (infix_at
                                                                 (matrix1
                                                                 complex1) b
                                                                 f
                                                                 (infix_at b
                                                                 a t a1)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc143 b a f t) a1)) (tb2t14
                                                                 (infix_at
                                                                 (matrix1
                                                                 complex1) b
                                                                 f
                                                                 (infix_at b
                                                                 a t a1)))))))

;; map_mat_sum_rec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (t uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s (fc142 b a f t))
  (=> (p_injective b a t s)
  (= (mat_sum a s (fc143 b a f t)) (mat_sum b (map1 b a t s) f))))))))

(declare-fun identity1 () (Array (matrix complex) (matrix complex)))

;; identity_def
  (assert
  (forall ((y (matrix complex)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (matrix1 complex1) (t2tb16 identity1)
     (t2tb14 y))) y)))

(declare-fun t2tb22 ((set (matrix complex))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (matrix complex)))) (sort (set1 (matrix1 complex1))
  (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (matrix complex)))

;; BridgeL
  (assert
  (forall ((i (set (matrix complex))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (matrix1 complex1)) j) (= (t2tb22 (tb2t22 j)) j)) :pattern (
  (t2tb22 (tb2t22 j))) )))

;; mat_sum_id
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=> (constant_size (matrix1 complex1) (map1 (matrix1 complex1) a f s)
  (t2tb16 identity1))
  (=> (p_injective (matrix1 complex1) a f s)
  (= (mat_sum (matrix1 complex1) (map1 (matrix1 complex1) a f s)
     (t2tb16 identity1)) (mat_sum a s f)))))))))

(declare-fun nonn_mat_subset (ty uni uni) uni)

;; nonn_mat_subset_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (nonn_mat_subset a x x1)))))

(declare-fun result15 (ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result15 a x x1)))))

;; result_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (e uni))
  (= (= (tb2t2 (infix_at bool a (result15 a f s) e)) true)
  (not (infix_eqeq (matrix1 complex1) (infix_at (matrix1 complex1) a f e)
  (make complex1 (s_rows a s f) (s_columns a s f) (t2tb c_zero))))))))

;; nonn_mat_subset_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (= (nonn_mat_subset a f s) (filter a (result15 a f s) s))))))

;; nonn_mat_subset_spec
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (and (subset1 a (nonn_mat_subset a f s) s)
  (and (forall ((e uni)) (=> (mem a e (nonn_mat_subset a f s)) (mem a e s)))
  (and (constant_size a (nonn_mat_subset a f s) f)
  (and
  (=> (not (= (nonn_mat_subset a f s) (empty a)))
  (= (s_rows a (nonn_mat_subset a f s) f) (s_rows a s f)))
  (=> (not (= (nonn_mat_subset a f s) (empty a)))
  (= (s_columns a (nonn_mat_subset a f s) f) (s_columns a s f)))))))))))

;; mat_subset_elt
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (forall ((e uni)) (=> (mem a e (nonn_mat_subset a f s)) (mem a e s)))))))

;; mat_subset_nonn_elt
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (forall ((e uni))
  (=> (mem a e (nonn_mat_subset a f s))
  (not
  (= (tb2t14 (infix_at (matrix1 complex1) a f e)) (tb2t14
                                                  (make complex1
                                                  (s_rows a s f)
                                                  (s_columns a s f)
                                                  (t2tb c_zero)))))))))))

;; nonn_mat_sum_cardzero
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (= (cardinal a s) 0)
  (=> (< 0 r)
  (=> (< 0 c)
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c))))))))

;; nonn_mat_sum_cardone
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (= (cardinal a s) 1)
  (=> (< 0 r)
  (=> (< 0 c)
  (=> (= (rows complex1 (infix_at (matrix1 complex1) a f (choose a s))) r)
  (=> (= (columns complex1 (infix_at (matrix1 complex1) a f (choose a s))) c)
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c))))))))))

;; mat_sum_null_but_maybe_one_elt
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (e uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (=> (mem a e s)
  (=>
  (forall ((eqt uni))
  (=> (sort a eqt)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (null_mat
  (tb2t14 (infix_at (matrix1 complex1) a f eqt)))))))
  (= (mat_sum a s f) (tb2t14 (infix_at (matrix1 complex1) a f e))))))))))

;; nonn_mat_sum_plus_one
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (< 1 (cardinal a s))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (=>
  (= (mat_sum_dim a (remove a (choose a s) s) f r c) (mat_sum_dim a
                                                     (nonn_mat_subset a f
                                                     (remove a (choose a s)
                                                     s)) f r c))
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c)))))))))))

;; nonn_mat_sum
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c)))))))))

(declare-fun fc144 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc144 c a x x1)))))

(declare-fun fc145 (ty ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((b ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 complex1))
  (fc145 c b x x1)))))

;; fc_def
  (assert
  (forall ((a ty) (c ty))
  (forall ((t1 uni) (f uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc144 c a t1 f) a1)) (tb2t14
                                                                  (infix_at
                                                                  (matrix1
                                                                  complex1) c
                                                                  f
                                                                  (infix_at c
                                                                  a t1 a1)))))))

;; fc_def
  (assert
  (forall ((b ty) (c ty))
  (forall ((t2 uni) (f uni) (a uni))
  (= (tb2t14 (infix_at (matrix1 complex1) b (fc145 c b t2 f) a)) (tb2t14
                                                                 (infix_at
                                                                 (matrix1
                                                                 complex1) c
                                                                 f
                                                                 (infix_at c
                                                                 b t2 a)))))))

;; mat_sum_map_map
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((s1 uni) (s2 uni) (t1 uni) (t2 uni) (f uni))
  (=> (< 0 (cardinal a s1))
  (=> (p_injective c a t1 s1)
  (=> (constant_size a s1 (fc144 c a t1 f))
  (=> (< 0 (cardinal b s2))
  (=> (p_injective c b t2 s2)
  (=> (constant_size b s2 (fc145 c b t2 f))
  (=> (= (map1 c a t1 s1) (map1 c b t2 s2))
  (= (mat_sum c (map1 c a t1 s1) f) (mat_sum c (map1 c b t2 s2) f))))))))))))

;; mat_sum_disjoint_transitivity
  (assert
  (forall ((a ty))
  (forall ((s uni) (s1 uni) (s2 uni) (f uni))
  (=> (constant_size a s f)
  (=> (= (inter a s1 s2) (empty a))
  (=> (= (union1 a s1 s2) s)
  (=> (< 0 (cardinal a s1))
  (=> (< 0 (cardinal a s2))
  (= (add_mat (mat_sum a s1 f) (mat_sum a s2 f)) (mat_sum a s f))))))))))

;; mat_sum_null
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (infix_at (matrix1 complex1) a f e) i j)
  (= (get1 (tb2t14 (infix_at (matrix1 complex1) a f e)) i j) c_zero))))))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (mat_sum a s f)) i j)
  (= (get1 (mat_sum a s f) i j) c_zero)))))))))

;; mat_sum_null_b
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (< 1 (cardinal a s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows complex1 (infix_at (matrix1 complex1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (columns complex1 (infix_at (matrix1 complex1) a f e)) c))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (infix_at (matrix1 complex1) a f e) i j)
  (= (get1 (tb2t14 (infix_at (matrix1 complex1) a f e)) i j) c_zero))))))
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c)) (= (get1 (mat_sum a s f) i j) c_zero)))))))))))

(declare-fun fc146 (ty ty uni uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc146 b a x x1 x2)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (injz uni) (injo uni) (e uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc146 b a f injz injo) e)) 
  (add_mat (tb2t14 (infix_at (matrix1 complex1) b f (infix_at b a injz e)))
  (tb2t14 (infix_at (matrix1 complex1) b f (infix_at b a injo e))))))))

;; map_add_mat_sum_t
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (sqt uni) (f uni) (injz uni) (injo uni))
  (=> (constant_size b sqt f)
  (=> (< 0 (cardinal a s))
  (=> (= (inter b (map1 b a injz s) (map1 b a injo s)) (empty b))
  (=> (= (union1 b (map1 b a injz s) (map1 b a injo s)) sqt)
  (=> (p_injective b a injo s)
  (=> (p_injective b a injz s)
  (= (mat_sum a s (fc146 b a f injz injo)) (mat_sum b sqt f)))))))))))

(declare-fun fc147 (ty uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 complex1))
  (fc147 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni) (e uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc147 a f g) e)) (add_mat
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) a f
                                                              e))
                                                              (tb2t14
                                                              (infix_at
                                                              (matrix1
                                                              complex1) a g
                                                              e)))))))

;; map_add_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (s1 uni) (s2 uni) (sqt uni) (f uni) (g uni) (h uni))
  (=> (constant_size a sqt h)
  (=> (constant_size a s f)
  (=> (constant_size a s g)
  (=>
  (and (= (s_rows a sqt h) (s_rows a s f)) (= (s_rows a s f) (s_rows a s g)))
  (=>
  (and (= (s_columns a sqt h) (s_columns a s f))
  (= (s_columns a s f) (s_columns a s g)))
  (=> (< 0 (cardinal a s))
  (=> (p_injective (matrix1 complex1) a f s)
  (=> (p_injective (matrix1 complex1) a g s)
  (=> (p_injective (matrix1 complex1) a h sqt)
  (=>
  (= (tb2t22 (map1 (matrix1 complex1) a f s)) (tb2t22
                                              (map1 (matrix1 complex1) a h
                                              s1)))
  (=>
  (= (tb2t22 (map1 (matrix1 complex1) a g s)) (tb2t22
                                              (map1 (matrix1 complex1) a h
                                              s2)))
  (=> (= (inter a s1 s2) (empty a))
  (=> (= (union1 a s1 s2) sqt)
  (= (mat_sum a s (fc147 a f g)) (mat_sum a sqt h))))))))))))))))))

(declare-sort bitvec 0)

(declare-fun bitvec1 () ty)

(declare-fun value (bitvec) (Array Int Int))

(declare-fun length (bitvec) Int)

;; bitvec'invariant
  (assert
  (forall ((self bitvec))
  (! (and (<= 0 (length self))
     (and
     (forall ((i Int))
     (=> (and (<= 0 i) (< i (length self)))
     (and (<= 0 (tb2t3 (infix_at int int (t2tb5 (value self)) (t2tb3 i))))
     (< (tb2t3 (infix_at int int (t2tb5 (value self)) (t2tb3 i))) 2))))
     (forall ((i Int))
     (=> (not (and (<= 0 i) (< i (length self))))
     (= (tb2t3 (infix_at int int (t2tb5 (value self)) (t2tb3 i))) 0))))) :pattern (
  (length self)) :pattern ((value self)) )))

(declare-fun bvlength ((Array Int Int) Int) Bool)

;; bvlength_def
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (= (bvlength f i)
  (forall ((k Int))
  (=> (and (<= 0 k) (< k i))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) 2)))))))

;; binary_mult
  (assert
  (forall ((a Int) (b Int)) (= (mod1 (* a b) 2) (* (mod1 a 2) (mod1 b 2)))))

;; getbv_spec
  (assert (forall ((a bitvec)) (binary (value a))))

(declare-fun to_bool (Int) Bool)

;; to_bool_def
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 2))
  (ite (not (= i 0)) (= (to_bool i) true) (= (to_bool i) false)))))

;; getbv_bound
  (assert
  (forall ((bv1 bitvec) (i Int))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) 2))))

;; getbv_eq
  (assert
  (forall ((bvx bitvec) (bvy bitvec) (i Int))
  (=> (= bvx bvy)
  (= (tb2t3 (infix_at int int (t2tb5 (value bvx)) (t2tb3 i))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5
                                                              (value bvy))
                                                              (t2tb3 i)))))))

;; getbv_eq_gen
  (assert
  (forall ((bvx bitvec) (bvy bitvec) (i Int) (j Int))
  (=> (= bvx bvy)
  (=> (= i j)
  (= (tb2t3 (infix_at int int (t2tb5 (value bvx)) (t2tb3 i))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5
                                                              (value bvy))
                                                              (t2tb3 j))))))))

(declare-fun setbv ((Array Int Int) Int Int) (Array Int Int))

;; setbv_def
  (assert
  (forall ((bv1 (Array Int Int)) (i Int) (j Int))
  (forall ((k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (setbv bv1 i j)) (t2tb3 k))) (ite (= k i)
                                                                  j
                                                                  (tb2t3
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb5 bv1)
                                                                  (t2tb3 k))))))))

;; setbv_spec
  (assert
  (forall ((bv1 (Array Int Int)) (i Int) (j Int))
  (and
  (forall ((k Int))
  (=> (not (= k i))
  (= (tb2t3 (infix_at int int (t2tb5 (setbv bv1 i j)) (t2tb3 k))) (tb2t3
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb5 bv1)
                                                                  (t2tb3 k))))))
  (= (tb2t3 (infix_at int int (t2tb5 (setbv bv1 i j)) (t2tb3 i))) j))))

(declare-fun setbv_int ((Array Int Int) (Array Int Int) Int
  Int) (Array Int Int))

;; setbv_int_def
  (assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)) (i Int) (j Int))
  (forall ((k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (setbv_int bv1 bv2 i j)) (t2tb3 k))) 
  (ite (and (< i k) (<= k j))
  (tb2t3 (infix_at int int (t2tb5 bv2) (t2tb3 (- k i))))
  (tb2t3 (infix_at int int (t2tb5 bv1) (t2tb3 k))))))))

;; setbv_int_spec
  (assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)) (i Int) (j Int))
  (and
  (forall ((k Int))
  (=> (and (< i k) (<= k j))
  (= (tb2t3 (infix_at int int (t2tb5 (setbv_int bv1 bv2 i j)) (t2tb3 k))) 
  (tb2t3 (infix_at int int (t2tb5 bv2) (t2tb3 (- k i)))))))
  (and
  (forall ((k Int))
  (=> (<= k i)
  (= (tb2t3 (infix_at int int (t2tb5 (setbv_int bv1 bv2 i j)) (t2tb3 k))) 
  (tb2t3 (infix_at int int (t2tb5 bv1) (t2tb3 k))))))
  (forall ((k Int))
  (=> (< j k)
  (= (tb2t3 (infix_at int int (t2tb5 (setbv_int bv1 bv2 i j)) (t2tb3 k))) 
  (tb2t3 (infix_at int int (t2tb5 bv1) (t2tb3 k))))))))))

;; set_bvlength
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=>
  (forall ((k Int))
  (=> (and (<= 1 k) (< k i))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 k))) 2)))) (bvlength
  (value bv1) i))))

;; null_product_bitvec
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 1)))
  (= (ind_iproduct (value x) 0 n) 1)))))

;; non_null_product_bitvec
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=>
  (not
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 1))))
  (= (ind_iproduct (value x) 0 n) 0)))))

(declare-fun fc148 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((x bitvec) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc148 x)) (t2tb3 i))) (- 1 (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value x))
                                                                 (t2tb3 i)))))))

;; null_product_bitvec_inv
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 0)))
  (= (ind_iproduct (fc148 x) 0 n) 1)))))

(declare-fun fc149 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((x bitvec) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc149 x)) (t2tb3 i))) (- 1 (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value x))
                                                                 (t2tb3 i)))))))

;; non_null_product_bitvec_inv
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=>
  (not
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 0))))
  (= (ind_iproduct (fc149 x) 0 n) 0)))))

;; null_product_bitvec_rev
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=> (= (ind_iproduct (value x) 0 n) 1)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 1)))))))

;; non_null_product_bitvec_rev
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=> (= (ind_iproduct (value x) 0 n) 0)
  (not
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 1))))))))

(declare-fun fc150 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((x bitvec) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc150 x)) (t2tb3 i))) (- 1 (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value x))
                                                                 (t2tb3 i)))))))

;; null_product_bitvec_inv_rev
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=> (= (ind_iproduct (fc150 x) 0 n) 1)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 0)))))))

(declare-fun fc151 (bitvec) (Array Int Int))

(declare-fun fc152 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((x bitvec) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc151 x)) (t2tb3 i))) (- 1 (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value x))
                                                                 (t2tb3 i)))))))

;; fc_def
  (assert
  (forall ((x bitvec) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc152 x)) (t2tb3 i))) (- 1 (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value x))
                                                                 (t2tb3 i)))))))

;; inter
  (assert
  (forall ((x bitvec) (n Int) (k Int))
  (=> (= n (length x))
  (=> (= (ind_iproduct (fc151 x) 0 n) 0)
  (=> (and (<= 0 k) (<= k n))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 0)))
  (= (ind_iproduct (fc152 x) 0 k) 1)))))))

(declare-fun fc153 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((x bitvec) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc153 x)) (t2tb3 i))) (- 1 (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value x))
                                                                 (t2tb3 i)))))))

;; non_null_product_bitvec_inv_rev
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= n (length x))
  (=> (= (ind_iproduct (fc153 x) 0 n) 0)
  (not
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 i))) 0))))))))

;; set_flength
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (=>
  (forall ((k Int))
  (=> (and (<= 0 k) (< k i))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) 2)))) (bvlength f i))))

;; get_bvlength
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (=> (bvlength f i)
  (forall ((k Int))
  (=> (and (<= 0 k) (< k i))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) 2)))))))

;; set_bv_to
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (=> (< 0 i)
  (=>
  (forall ((j Int))
  (=> (and (<= 0 j) (< j i))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 j))))
  (<= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 j))) 1)))) (bvlength f i)))))

;; set_in_range_val
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (< i (length bv1)))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) 2)))))

;; bvlengthm
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (< i (length bv1))) (bvlength (value bv1) i))))

(declare-fun in_range (bitvec Int) Bool)

;; in_range_def
  (assert
  (forall ((bv1 bitvec) (r Int))
  (= (in_range bv1 r) (and (<= 0 r) (< r (length bv1))))))

;; binary_bv
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (in_range bv1 i)
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))))
  (<= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) 1)))))

;; equal_bv
  (assert
  (forall ((m bitvec) (n bitvec))
  (= (= m n)
  (and (= (length m) (length n))
  (forall ((i Int))
  (=> (in_range m i)
  (= (tb2t3 (infix_at int int (t2tb5 (value m)) (t2tb3 i))) (tb2t3
                                                            (infix_at 
                                                            int int
                                                            (t2tb5 (value n))
                                                            (t2tb3 i))))))))))

;; set_equal_bv
  (assert
  (forall ((bv1 bitvec) (bvqt bitvec))
  (=> (= (length bv1) (length bvqt))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (length bv1)))
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5
                                                              (value bvqt))
                                                              (t2tb3 i))))))
  (= bv1 bvqt)))))

;; get_equal_bv
  (assert
  (forall ((bv1 bitvec) (bvqt bitvec))
  (=> (= bv1 bvqt)
  (and (= (length bv1) (length bvqt))
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (length bv1)))
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5
                                                              (value bvqt))
                                                              (t2tb3 i))))))))))

(declare-fun make_bv ((Array Int Int) Int) bitvec)

;; make_bv_spec
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2))))
  (=> (<= 0 s)
  (and (= (length (make_bv f s)) s)
  (and
  (forall ((i Int))
  (=> (and (<= 0 i) (< i s))
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv f s))) (t2tb3 i))) 
  (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))))
  (forall ((i Int))
  (=> (not (and (<= 0 i) (< i s)))
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv f s))) (t2tb3 i))) 0)))))))))

(declare-fun make_bv_m ((Array Int Int) Int) bitvec)

(declare-fun result16 ((Array Int Int)) (Array Int Int))

;; result_def
  (assert
  (forall ((f (Array Int Int)) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (result16 f)) (t2tb3 k))) (mod1
                                                               (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 f)
                                                               (t2tb3 k))) 2))))

;; make_bv_m_def
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s) (= (make_bv_m f s) (make_bv (result16 f) s)))))

;; make_bv_m_spec
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s)
  (and (= (length (make_bv_m f s)) s)
  (and (forall ((i Int)) (bvlength (value (make_bv_m f s)) i))
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (< k s))
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv_m f s))) (t2tb3 k))) 
  (mod1 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 k))) 2))))
  (forall ((k Int))
  (=> (not (and (<= 0 k) (< k s)))
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv_m f s))) (t2tb3 k))) 0)))))))))

(declare-fun bitvec_null () bitvec)

(declare-fun result17 () (Array Int Int))

;; result_def
  (assert
  (forall ((i Int))
  (= (tb2t3 (infix_at int int (t2tb5 result17) (t2tb3 i))) 0)))

;; bitvec_null_def
  (assert (= bitvec_null (make_bv result17 0)))

;; assert_make_bv_no_bound
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 0 i1) (< i1 s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))) 2))))
  (=> (and (<= 1 i) (<= i s))
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv f 0))) (t2tb3 i))) 0)))))

;; make_bv_length
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2))))
  (=> (<= 0 s) (= (length (make_bv f s)) s)))))

;; assert_make_bv
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 0 i1) (< i1 s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))) 2))))
  (=> (<= 0 s)
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv f s))) (t2tb3 i))) 
  (ite (and (<= 0 i) (< i s)) (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i)))
  0))))))

;; assert_make_m
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=> (<= 0 s)
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv_m f s))) (t2tb3 i))) 
  (ite (and (<= 0 i) (< i s))
  (mod1 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2) 0)))))

;; make_bv_eq
  (assert
  (forall ((f (Array Int Int)) (fqt (Array Int Int)) (n Int) (nqt Int))
  (=> (<= 0 n)
  (=> (= n nqt)
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 fqt) (t2tb3 i))))))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2))))
  (= (make_bv f n) (make_bv fqt nqt))))))))

;; assert_make_bv_b
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 0 i1) (< i1 s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))) 2))))
  (=> (and (<= 0 i) (< i s))
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv f s))) (t2tb3 i))) 
  (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))))))

;; assert_make_m_b
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=> (and (<= 0 i) (< i s))
  (=> (<= 0 s)
  (= (tb2t3 (infix_at int int (t2tb5 (value (make_bv_m f s))) (t2tb3 i))) 
  (mod1 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2))))))

;; make_m_bv_length
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=> (<= 0 s) (bvlength (value (make_bv_m f s)) i))))

;; make_m_length
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s) (= (length (make_bv_m f s)) s))))

;; set_equal_bv_make
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s Int))
  (=>
  (forall ((i Int))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2)))
  (=> (<= 0 s)
  (=>
  (forall ((i Int))
  (= (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) (tb2t3
                                                    (infix_at int int
                                                    (t2tb5 g) (t2tb3 i)))))
  (= (make_bv f s) (make_bv g s)))))))

;; set_equal_bv_m_make
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s Int))
  (=> (<= 0 s)
  (=>
  (forall ((i Int))
  (= (mod1 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2) (mod1
                                                             (tb2t3
                                                             (infix_at 
                                                             int int
                                                             (t2tb5 g)
                                                             (t2tb3 i))) 2)))
  (= (make_bv_m f s) (make_bv_m g s))))))

;; make_bv_itself
  (assert
  (forall ((x bitvec) (n Int))
  (=> (= (length x) n) (= (make_bv (value x) n) x))))

(declare-fun head (bitvec) Int)

;; head_def
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1))
  (= (head bv1) (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 0)))))))

;; head_spec
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (and (<= 0 (head bv1)) (<= (head bv1) 1)))))

(declare-fun makes_bv ((Array Int Int) Int) bitvec)

(declare-fun result18 ((Array Int Int)) (Array Int Int))

;; result_def
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (result18 f)) (t2tb3 i))) (ite (let ((q1_ 
                                                                    (tb2t3
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5 f)
                                                                    (t2tb3 i)))))
                                                                    (and
                                                                    (<= 0 q1_)
                                                                    (< q1_ 2)))
                                                               (tb2t3
                                                               (infix_at 
                                                               int int
                                                               (t2tb5 f)
                                                               (t2tb3 i))) 0))))

;; makes_bv_def
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s) (= (makes_bv f s) (make_bv (result18 f) s)))))

;; makes_bv_spec
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s)
  (and (= (length (makes_bv f s)) s)
  (and
  (forall ((i Int))
  (=> (and (<= 0 i) (< i s))
  (=>
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2))
  (= (tb2t3 (infix_at int int (t2tb5 (value (makes_bv f s))) (t2tb3 i))) 
  (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i)))))))
  (and
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 2))))
  (= (makes_bv f s) (make_bv f s)))
  (forall ((i Int))
  (=> (not (and (<= 0 i) (< i s)))
  (= (tb2t3 (infix_at int int (t2tb5 (value (makes_bv f s))) (t2tb3 i))) 0)))))))))

;; assert_makes_bv_c
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 0 i1) (< i1 s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))) 2))))
  (=> (<= 0 s)
  (= (tb2t3 (infix_at int int (t2tb5 (value (makes_bv f s))) (t2tb3 i))) 
  (ite (and (<= 0 i) (< i s)) (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i)))
  0))))))

;; assert_makes_bv_b
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 0 i1) (< i1 s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))) 2))))
  (=> (<= 0 s)
  (=> (and (<= 0 i) (< i s))
  (= (tb2t3 (infix_at int int (t2tb5 (value (makes_bv f s))) (t2tb3 i))) 
  (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i)))))))))

;; assert_makes_bv
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 0 i1) (< i1 s))
  (and (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))))
  (< (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i1))) 2))))
  (=> (<= 0 s)
  (= (tb2t3 (infix_at int int (t2tb5 (value (makes_bv f s))) (t2tb3 i))) 
  (ite (and (and (<= 0 i) (< i s))
       (<= 0 (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i)))))
  (tb2t3 (infix_at int int (t2tb5 f) (t2tb3 i))) 0))))))

;; makes_bv_length
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s) (= (length (makes_bv f s)) s))))

(declare-fun tail (bitvec) bitvec)

(declare-fun result19 (bitvec) (Array Int Int))

;; result_def
  (assert
  (forall ((bv1 bitvec) (i Int))
  (= (tb2t3 (infix_at int int (t2tb5 (result19 bv1)) (t2tb3 i))) (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3
                                                                 (+ i 1)))))))

;; tail_def
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1))
  (= (tail bv1) (make_bv (result19 bv1) (- (length bv1) 1))))))

;; tail_spec
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1))
  (and (= (length (tail bv1)) (- (length bv1) 1))
  (forall ((i Int))
  (=> (in_range (tail bv1) i)
  (= (tb2t3 (infix_at int int (t2tb5 (value (tail bv1))) (t2tb3 i))) 
  (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 (+ i 1)))))))))))

(declare-fun concat_l (bitvec Int) bitvec)

(declare-fun result20 (bitvec Int) (Array Int Int))

;; result_def
  (assert
  (forall ((bv1 bitvec) (i Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (result20 bv1 i)) (t2tb3 k))) (ite (= k 0)
                                                                   i
                                                                   (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   bv1))
                                                                   (t2tb3
                                                                   (- k 1))))))))

;; concat_l_def
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i 1))
  (= (concat_l bv1 i) (make_bv (result20 bv1 i) (+ (length bv1) 1))))))

;; concat_l_spec
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i 1))
  (and (= (length (concat_l bv1 i)) (+ (length bv1) 1))
  (and
  (= (tb2t3 (infix_at int int (t2tb5 (value (concat_l bv1 i))) (t2tb3 0))) i)
  (forall ((j Int))
  (=> (in_range bv1 j)
  (= (tb2t3
     (infix_at int int (t2tb5 (value (concat_l bv1 i))) (t2tb3 (+ j 1)))) 
  (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 j)))))))))))

;; concat_l_value
  (assert
  (forall ((bv1 bitvec) (i Int) (k Int))
  (=> (and (<= 0 i) (< i 2))
  (= (tb2t3 (infix_at int int (t2tb5 (value (concat_l bv1 i))) (t2tb3 k))) 
  (ite (= k 0) i
  (ite (and (< 0 k) (<= k (+ (length bv1) 1)))
  (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 (- k 1)))) 0))))))

;; concat_l_value_b
  (assert
  (forall ((bv1 bitvec) (i Int) (k Int))
  (=> (and (<= 0 k) (< k (+ (length bv1) 1)))
  (=> (and (<= 0 i) (< i 2))
  (= (tb2t3 (infix_at int int (t2tb5 (value (concat_l bv1 i))) (t2tb3 k))) 
  (ite (= k 0) i
  (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 (- k 1))))))))))

;; concat_ht
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (= bv1 (concat_l (tail bv1) (head bv1))))))

;; concat_ht_union
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 2 (length bv1))
  (=> (not (= bv1 (concat_l (tail bv1) 0))) (= bv1 (concat_l (tail bv1) 1))))))

(declare-fun bv_to_int (bitvec) Int)

(declare-fun result21 (bitvec) (Array Int Int))

;; result_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (result21 bv1)) (t2tb3 k))) (ite (in_range
                                                                 bv1 k)
                                                                 (* (tb2t3
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5
                                                                    (value
                                                                    bv1))
                                                                    (t2tb3 k))) 
                                                                 (power 2
                                                                 (- (- 
                                                                 (length bv1) 1) k)))
                                                                 1))))

;; bv_to_int_def
  (assert
  (forall ((bv1 bitvec))
  (= (bv_to_int bv1) (ind_isum (result21 bv1) 0 (length bv1)))))

(declare-fun fc154 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc154 bv1)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 k))) 
  (power 2 (- (- (length bv1) 1) k))))))

;; bv_to_int_spec
  (assert
  (forall ((bv1 bitvec))
  (and (= (bv_to_int bv1) (ind_isum (fc154 bv1) 0 (length bv1)))
  (<= 0 (bv_to_int bv1)))))

;; bv_to_int_eq
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= bv1 bv2) (= (bv_to_int bv1) (bv_to_int bv2)))))

(declare-fun fc155 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc155 bv1)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 k))) 
  (power 2 (- (- (length bv1) 1) k))))))

;; bv_to_int_sum
  (assert
  (forall ((bv1 bitvec))
  (= (bv_to_int bv1) (ind_isum (fc155 bv1) 0 (length bv1)))))

(declare-fun fc156 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc156 bv1)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3
                                                                 (- (- 
                                                                 (length bv1) 1) k)))) 
  (power 2 k)))))

;; bv_to_int_sum_inv
  (assert
  (forall ((bv1 bitvec))
  (= (bv_to_int bv1) (ind_isum (fc156 bv1) 0 (length bv1)))))

(declare-fun fc157 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc157 bv1)) (t2tb3 k))) (* (- (tb2t3
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5
                                                                    (value
                                                                    bv1))
                                                                    (t2tb3 k)))) 
  (power 2 (- (- (length bv1) 1) k))))))

;; bv_to_int_sum_opp
  (assert
  (forall ((bv1 bitvec))
  (= (- (bv_to_int bv1)) (ind_isum (fc157 bv1) 0 (length bv1)))))

;; bv_to_int_onebit
  (assert
  (forall ((bv1 bitvec))
  (=> (= (length bv1) 1)
  (= (bv_to_int bv1) (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 0)))))))

(declare-fun fc158 (bitvec) (Array Int Int))

(declare-fun fc159 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc158 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc159 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3
                                                                 (- (- 
                                                                 (length bv1) 1) l)))) 
  (power 2 l)))))

;; ind_isum_bv_rev
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i (length bv1)))
  (= (ind_isum (fc158 bv1) i (length bv1)) (ind_isum (fc159 bv1) 0
                                           (- (length bv1) i))))))

(declare-fun fc160 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc161 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc160 f n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 l))) 
  (power 2 (- (- n 1) l))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc161 f n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3
                                                                 (- (- n 1) l)))) 
  (power 2 l)))))

;; ind_isum_bin_rev
  (assert
  (forall ((f (Array Int Int)) (n Int) (i Int))
  (=> (and (<= 0 i) (< i n))
  (=> (binary f)
  (= (ind_isum (fc160 f n) i n) (ind_isum (fc161 f n) 0 (- n i)))))))

(declare-fun fc162 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc163 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc162 f n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 l))) 
  (power 2 (- (- n 1) l))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc163 f n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3
                                                                 (- (- n 1) l)))) 
  (power 2 l)))))

;; ind_isum_bin_rev_z
  (assert
  (forall ((f (Array Int Int)) (n Int))
  (=> (<= 0 n)
  (=> (binary f) (= (ind_isum (fc162 f n) 0 n) (ind_isum (fc163 f n) 0 n))))))

(declare-fun fc164 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc164 bv1)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3
                                                                 (- (- 
                                                                 (length bv1) 1) k)))) 
  (power 2 k)))))

;; bv_to_int_sum_rev
  (assert
  (forall ((bv1 bitvec))
  (= (ind_isum (fc164 bv1) 0 (length bv1)) (bv_to_int bv1))))

(declare-fun fc165 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc165 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 l)))))

;; ind_isum_bv_bound_growing
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (< 0 i) (< i (length bv1)))
  (< (ind_isum (fc165 bv1) 0 i) (power 2 i)))))

(declare-fun fc166 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc166 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; ind_isum_bv_bound
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (< i (length bv1)))
  (< (ind_isum (fc166 bv1) i (length bv1)) (power 2 (- (length bv1) i))))))

(declare-fun fc167 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc167 f n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 l))) 
  (power 2 (- (- n 1) l))))))

;; ind_isum_bin_bound
  (assert
  (forall ((f (Array Int Int)) (n Int) (i Int))
  (=> (and (<= 0 i) (< i n))
  (=> (binary f) (< (ind_isum (fc167 f n) i n) (power 2 (- n i)))))))

;; bv_to_int_bound
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (< (bv_to_int bv1) (power 2 (length bv1))))))

(declare-fun is_a_ket ((matrix complex)) Bool)

;; Is_a_ket
  (assert
  (forall ((m (matrix complex)))
  (= (is_a_ket m)
  (and (= (columns complex1 (t2tb14 m)) 1)
  (exists ((s Int))
  (and (<= 0 s) (= (rows complex1 (t2tb14 m)) (power 2 s))))))))

(declare-fun xor_i (Int Int) Int)

;; xor_i_def
  (assert
  (forall ((i Int) (iqt Int))
  (=> (and (<= 0 i) (< i 2))
  (=> (and (<= 0 iqt) (< iqt 2))
  (ite (= i 0) (= (xor_i i iqt) iqt) (= (xor_i i iqt) (- 1 iqt)))))))

;; xor_i_spec
  (assert
  (forall ((i Int) (iqt Int))
  (=> (and (<= 0 i) (< i 2))
  (=> (and (<= 0 iqt) (< iqt 2))
  (and (=> (= i 0) (=> (= iqt 0) (= (xor_i i iqt) 0)))
  (and (=> (= i 0) (=> (= iqt 1) (= (xor_i i iqt) 1)))
  (and (=> (= i 1) (=> (= iqt 0) (= (xor_i i iqt) 1)))
  (=> (= i 1) (=> (= iqt 1) (= (xor_i i iqt) 0))))))))))

(declare-fun is_a_ket_l ((matrix complex) Int) Bool)

;; is_a_ket_l_def
  (assert
  (forall ((m (matrix complex)) (l Int))
  (= (is_a_ket_l m l)
  (and (<= 0 l)
  (and (= (columns complex1 (t2tb14 m)) 1)
  (= (rows complex1 (t2tb14 m)) (power 2 l)))))))

;; ket_l_rows
  (assert
  (forall ((m (matrix complex)) (l Int))
  (=> (is_a_ket_l m l) (= (rows complex1 (t2tb14 m)) (power 2 l)))))

;; ket_l_columns
  (assert
  (forall ((m (matrix complex)))
  (=> (exists ((l Int)) (is_a_ket_l m l))
  (= (columns complex1 (t2tb14 m)) 1))))

(declare-fun ket_length ((matrix complex)) Int)

;; ket_length_def
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m)
  (= (ket_length m) (- (binary_length (rows complex1 (t2tb14 m))) 1)))))

;; ket_length_spec
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m)
  (and (<= 0 (ket_length m))
  (= (rows complex1 (t2tb14 m)) (power 2 (ket_length m)))))))

;; get_ket_rev
  (assert true)

(declare-fun get_ket_bv ((matrix complex) bitvec) complex)

;; get_ket_bv_def
  (assert
  (forall ((x (matrix complex)) (bv1 bitvec))
  (=> (is_a_ket_l x (length bv1))
  (= (get_ket_bv x bv1) (get1 x (bv_to_int bv1) 0)))))

(declare-fun power_ (Int Int) Int)

;; power__def
  (assert
  (forall ((e Int) (i Int))
  (ite (<= 0 i) (= (power_ e i) (power e i)) (= (power_ e i) 0))))

;; power_to_
  (assert
  (forall ((i Int) (x Int)) (=> (<= 0 x) (= (power i x) (power_ i x)))))

;; power_no_
  (assert
  (forall ((i Int) (x Int)) (=> (<= 0 x) (= (power_ i x) (power i x)))))

;; power__plus_one
  (assert
  (forall ((i Int) (x Int))
  (=> (<= 0 x) (= (power_ i (+ x 1)) (* (power_ i x) i)))))

;; power__eq
  (assert
  (forall ((e Int) (eqt Int) (i Int) (iqt Int))
  (=> (= e eqt) (=> (= i iqt) (= (power_ e i) (power_ eqt iqt))))))

;; power__sum
  (assert
  (forall ((i Int) (x Int) (y Int))
  (=> (<= 0 x)
  (=> (<= 0 y) (= (power_ i (+ x y)) (* (power_ i x) (power_ i y)))))))

;; power__sum_rev
  (assert
  (forall ((i Int) (x Int) (y Int))
  (=> (<= 0 x)
  (=> (<= 0 y) (= (* (power_ i x) (power_ i y)) (power_ i (+ x y)))))))

;; power__mult
  (assert
  (forall ((i Int) (x Int) (y Int))
  (=> (<= 0 x) (=> (<= 0 y) (= (power_ i (* x y)) (power_ (power_ i x) y))))))

;; Power_zero_
  (assert (forall ((i Int)) (= (power_ i 0) 1)))

;; Power_one_
  (assert (forall ((i Int)) (= (power_ i 1) i)))

;; Power_sum_
  (assert
  (forall ((x Int) (y Int) (i Int))
  (=> (<= 0 x)
  (=> (<= 0 y) (= (power_ i (+ x y)) (* (power_ i x) (power_ i y)))))))

;; Power_mult_
  (assert
  (forall ((x Int) (y Int) (i Int))
  (=> (<= 0 x) (=> (<= 0 y) (= (power i (* x y)) (power (power i x) y))))))

;; Power_pos_
  (assert (forall ((i Int)) (=> (<= 0 i) (< 0 (power_ i 0)))))

;; Power_pos_gen_
  (assert
  (forall ((i Int) (j Int)) (=> (< 0 i) (=> (<= 0 j) (< 0 (power_ i j))))))

;; power_two_
  (assert (forall ((x Int)) (=> (<= 0 x) (= (power_ x 2) (* x x)))))

;; power_plus_one_two
  (assert
  (forall ((x Int))
  (=> (<= 0 x) (= (power_ 2 (+ x 1)) (+ (power_ 2 x) (power_ 2 x))))))

;; growing_right_power_
  (assert
  (forall ((a Int) (b Int) (i Int))
  (=> (<= 0 i) (=> (and (<= 0 a) (<= a b)) (<= (power_ a i) (power_ b i))))))

;; power_of_one_
  (assert
  (forall ((a Int) (b Int)) (=> (<= 0 b) (=> (= a 1) (= (power_ a b) 1)))))

;; bound_power_
  (assert
  (forall ((i Int) (a Int) (k Int) (n Int))
  (=> (< 0 a)
  (=> (and (< 0 k) (<= k n))
  (=> (and (<= 0 i) (< i (power_ a n)))
  (< (div1 i (power_ a (- n k))) (power_ a k)))))))

;; power_inf
  (assert
  (forall ((a Int) (n Int) (nqt Int))
  (=> (< 1 a) (=> (and (< 0 n) (< n nqt)) (< (power_ a n) (power_ a nqt))))))

;; power_leq
  (assert
  (forall ((a Int) (n Int) (nqt Int))
  (=> (<= 0 a)
  (=> (and (< 0 n) (<= n nqt)) (<= (power_ a n) (power_ a nqt))))))

;; power_rises
  (assert
  (forall ((a Int) (n Int)) (=> (< 1 a) (=> (< 1 n) (< a (power_ a n))))))

;; int_expo_rises
  (assert
  (forall ((a Int) (n Int)) (=> (< 1 a) (=> (<= 1 n) (< n (power_ a n))))))

;; bound_power_2
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 (+ n 1)))) (< (div1 i (power_ 2 n)) 2)))))

(declare-fun polysquare (Int Int Int Int) Int)

;; polysquare_def
  (assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int))
  (=> (< 0 n)
  (=> (<= 0 a2)
  (=> (<= 0 a1)
  (=> (<= 0 a0)
  (= (polysquare n a2 a1 a0) (+ (+ (* a2 (power_ n 2)) (* a1 n)) a0))))))))

;; polysquare_spec
  (assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int))
  (=> (< 0 n)
  (=> (<= 0 a2) (=> (<= 0 a1) (=> (<= 0 a0) (<= 0 (polysquare n a2 a1 a0))))))))

;; polysquare_leq_trans
  (assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int) (b2 Int) (b1 Int) (b0 Int)
  (pa Int) (pb Int) (ps Int))
  (=> (< 0 n)
  (=> (<= 0 a2)
  (=> (<= 0 a1)
  (=> (<= 0 a0)
  (=> (<= 0 b2)
  (=> (<= 0 b1)
  (=> (<= 0 b0)
  (=> (<= pa (polysquare n a2 a1 a0))
  (=> (<= pb (polysquare n b2 b1 b0))
  (=> (<= ps (+ pa pb)) (<= ps (polysquare n (+ a2 b2) (+ a1 b1) (+ a0 b0)))))))))))))))

;; polysquare_leq_trans_sc
  (assert
  (forall ((n Int) (a2 Int) (a1 Int) (a0 Int) (b2 Int) (b1 Int) (b0 Int)
  (pa Int) (sc Int) (ps Int))
  (=> (< 0 n)
  (=> (<= 0 a2)
  (=> (<= 0 a1)
  (=> (<= 0 a0)
  (=> (<= 0 sc)
  (=> (<= (* sc a2) b2)
  (=> (<= (* sc a1) b1)
  (=> (<= (* sc a0) b0)
  (=> (<= pa (polysquare n a2 a1 a0))
  (=> (<= ps (* sc pa)) (<= ps (polysquare n b2 b1 b0))))))))))))))

;; polysquare_update
  (assert
  (forall ((na Int) (nb Int) (a2 Int) (a1 Int) (a0 Int) (pa Int))
  (=> (and (< 0 na) (<= na nb))
  (=> (<= 0 a2)
  (=> (<= 0 a1)
  (=> (<= 0 a0)
  (=> (<= pa (polysquare na a2 a1 a0)) (<= pa (polysquare nb a2 a1 a0)))))))))

;; power__minus_one
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (and (=> (= (mod1 i 2) 1) (= (power_ (- 1) i) (- 1)))
  (=> (= (mod1 i 2) 0) (= (power_ (- 1) i) 1))))))

;; get_ket_add
  (assert
  (forall ((x (matrix complex)) (y (matrix complex)) (i Int))
  (=> (is_a_ket x)
  (=> (is_a_ket y)
  (=> (= (ket_length x) (ket_length y))
  (=> (and (<= 0 i) (< i (power_ 2 (ket_length y))))
  (= (get1 (add_mat x y) i 0) (infix_pldt (get1 x i 0) (get1 y i 0)))))))))

;; get_ket_substr
  (assert
  (forall ((x (matrix complex)) (y (matrix complex)) (i Int))
  (=> (is_a_ket x)
  (=> (is_a_ket y)
  (=> (= (ket_length x) (ket_length y))
  (=> (and (<= 0 i) (< i (power_ 2 (ket_length y))))
  (= (get1 (mat_substr x y) i 0) (infix_mndt (get1 x i 0) (get1 y i 0)))))))))

;; mat_mult_ket_l
  (assert
  (forall ((m (matrix complex)) (k (matrix complex)) (n Int))
  (=> (is_a_ket_l k n)
  (=> (= (rows complex1 (t2tb14 m)) (power 2 n))
  (=> (= (columns complex1 (t2tb14 m)) (power 2 n)) (is_a_ket_l
  (mat_mult m k) n))))))

;; ket_kronecker_values
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
  (=> (is_a_ket m)
  (=> (is_a_ket n)
  (=>
  (and (<= 0 i)
  (< i (* (rows complex1 (t2tb14 m)) (rows complex1 (t2tb14 n)))))
  (= (get1 (kronecker m n) i 0) (infix_asdt
                                (get1 m (div1 i (rows complex1 (t2tb14 n)))
                                0)
                                (get1 n (mod1 i (rows complex1 (t2tb14 n)))
                                0))))))))

;; ket_l_to_ket
  (assert
  (forall ((m (matrix complex)) (l Int))
  (=> (is_a_ket_l m l) (and (is_a_ket m) (= (ket_length m) l)))))

;; ket_l_to_ket_gen
  (assert
  (forall ((m (matrix complex)))
  (=> (exists ((l Int)) (is_a_ket_l m l)) (is_a_ket m))))

;; ket_to_ket_l
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m) (is_a_ket_l m (ket_length m)))))

;; set_ket_valid_index
  (assert
  (forall ((m (matrix complex)) (i Int))
  (=> (is_a_ket m)
  (=> (and (<= 0 i) (< i (power 2 (ket_length m)))) (valid_index complex1
  (t2tb14 m) i 0)))))

;; ket_to_ket_l_l
  (assert
  (forall ((m (matrix complex)) (i Int))
  (=> (is_a_ket m) (=> (= (ket_length m) i) (is_a_ket_l m i)))))

;; set_constant_size_ket
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (is_a_ket (tb2t14 (infix_at (matrix1 complex1) a f e))))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (ket_length (tb2t14 (infix_at (matrix1 complex1) a f e))) (ket_length
                                                               (tb2t14
                                                               (infix_at
                                                               (matrix1
                                                               complex1) a f
                                                               eqt)))))))))
  (constant_size a s f))))))

(declare-fun ket_norm_l ((matrix complex) Int) complex)

(declare-fun result22 ((matrix complex)) (Array Int complex))

;; result_def
  (assert
  (forall ((x (matrix complex)) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (result22 x)) (t2tb3 k))) (infix_asdt
                                                                   (modulus
                                                                   (get1 x k
                                                                   0))
                                                                   (modulus
                                                                   (get1 x k
                                                                   0))))))

;; ket_norm_l_def
  (assert
  (forall ((x (matrix complex)) (n Int))
  (=> (is_a_ket_l x n)
  (= (ket_norm_l x n) (square_rt
                      (sum int (t2tb4 (to_fset 0 (power 2 n)))
                      (t2tb8 (result22 x))))))))

(declare-fun inv_func (ty ty uni uni uni uni) uni)

;; inv_func_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni) (x3 uni)) (sort a
  (inv_func b a x x1 x2 x3)))))

(declare-fun result23 (ty ty uni uni) uni)

;; result_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result23 b a x x1)))))

;; result_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (eqt uni) (e uni))
  (= (tb2t2 (infix_at bool a (result23 b a f eqt) e)) (indic_bool b
                                                      (infix_at b a f e) eqt)))))

;; inv_func_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (eqt uni))
  (=> (p_bijective b a f s sqt)
  (=> (mem b eqt sqt)
  (= (inv_func b a f s sqt eqt) (element a
                                (my_filter a s (result23 b a f eqt)))))))))

;; inv_func_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (eqt uni))
  (=> (sort b eqt)
  (=> (p_bijective b a f s sqt)
  (=> (mem b eqt sqt)
  (and (mem a (inv_func b a f s sqt eqt) s)
  (= (infix_at b a f (inv_func b a f s sqt eqt)) eqt))))))))

;; inv_rec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (e uni))
  (=> (sort a e)
  (=> (p_bijective b a f s sqt)
  (=> (mem a e s) (= (inv_func b a f s sqt (infix_at b a f e)) e)))))))

(declare-fun inv_ (ty ty uni uni uni uni) uni)

;; inv__sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni) (x3 uni)) (sort a
  (inv_ b a x x1 x2 x3)))))

;; inv__def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (e uni))
  (=> (p_bijective b a f s sqt)
  (=> (mem b e sqt) (= (inv_ b a f s sqt e) (inv_func b a f s sqt e)))))))

;; inv__spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (e uni))
  (=> (sort b e)
  (=> (p_bijective b a f s sqt)
  (=> (mem b e sqt)
  (and (mem a (inv_ b a f s sqt e) s)
  (= (infix_at b a f (inv_ b a f s sqt e)) e))))))))

(declare-fun inv__closure (ty ty) uni)

;; inv__closure_sort
  (assert
  (forall ((a ty) (b ty)) (sort
  (infix_mngt (infix_mngt a b)
  (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a))))
  (inv__closure b a))))

;; inv__closure_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((y uni) (y1 uni) (y2 uni) (y3 uni))
  (= (infix_at a b
     (infix_at (infix_mngt b a) (set1 b)
     (infix_at (infix_mngt (set1 b) (infix_mngt b a)) (set1 a)
     (infix_at (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
     (infix_mngt a b) (inv__closure b a) y) y1) y2) y3) (inv_ b a y y1 y2 y3)))))

;; inv_bijective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt) (p_bijective a b
  (infix_at (infix_mngt b a) (set1 b)
  (infix_at (infix_mngt (set1 b) (infix_mngt b a)) (set1 a)
  (infix_at (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
  (infix_mngt a b) (inv__closure b a) f) s) sqt) sqt s)))))

;; set_bijective_inv
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt (map1 b a f s))
  (and (mem a (infix_at a b g eqt) s)
  (= (infix_at b a f (infix_at a b g eqt)) eqt)))))
  (and (p_bijective b a f s (map1 b a f s))
  (= (inv_func b a f s (map1 b a f s) b1) (infix_at a b g b1)))))))))

;; set_bij_inv
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt (map1 b a f s))
  (and (mem a (infix_at a b g eqt) s)
  (= (infix_at b a f (infix_at a b g eqt)) eqt)))))
  (and (p_bijective b a f s (map1 b a f s))
  (and (p_bijective a b g (map1 b a f s) s)
  (forall ((b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (inv_func b a f s (map1 b a f s) b1) (infix_at a b g b1)))))))))))

(declare-fun inv_f (ty ty uni uni uni) uni)

;; inv_f_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt b a)
  (inv_f b a x x1 x2)))))

;; inv_f_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (and
  (forall ((e uni))
  (=> (mem b e sqt) (mem a (infix_at a b (inv_f b a f s sqt) e) s)))
  (and
  (forall ((e uni))
  (=> (sort b e)
  (=> (mem b e sqt)
  (= (infix_at b a f (infix_at a b (inv_f b a f s sqt) e)) e)))) (p_bijective
  a b (inv_f b a f s sqt) sqt s)))))))

;; injective_is_bijective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_injective b a f s)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (=> (= (cardinal a s) (cardinal b sqt)) (p_bijective b a f s sqt)))))))

;; injective_is_bijective_auto
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (sort (set1 a) s)
  (=> (p_injective a a f s)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
  (and (p_bijective a a f s s) (= (map1 a a f s) s))))))))

(declare-fun inv_auto (ty uni uni) uni)

;; inv_auto_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a a) (inv_auto a x x1)))))

;; inv_auto_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (p_injective a a f s)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
  (= (inv_auto a f s) (inv_f a a f s s)))))))

;; inv_auto_spec
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (p_injective a a f s)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
  (and
  (forall ((e uni))
  (=> (mem a e s) (mem a (infix_at a a (inv_auto a f s) e) s)))
  (and
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (infix_at a a f (infix_at a a (inv_auto a f s) e)) e))))
  (p_bijective a a (inv_auto a f s) s s))))))))

(declare-fun fc168 (bitvec) (Array Int Int))

(declare-fun fc169 (bitvec) (Array Int Int))

(declare-fun fc170 (bitvec) (Array Int Int))

(declare-fun fc171 (bitvec Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc168 bv1)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 k))) 
  (power 2 (- (- (length bv1) 1) k))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc169 bv1)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 k))) 
  (power 2 (- (- (length bv1) 1) k))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc170 bv1)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 k))) 
  (power 2 (- (- (length bv1) 1) k))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (i Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc171 bv1 i)) (t2tb3 k))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   bv1))
                                                                   (t2tb3 k))) 
  (power 2 (- (- i 1) k))))))

;; ind_isum_mod_div
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (< i (length bv1)))
  (and
  (= (mod1 (ind_isum (fc168 bv1) 0 (length bv1))
     (power 2 (- (length bv1) i))) (ind_isum (fc169 bv1) i (length bv1)))
  (= (div1 (ind_isum (fc170 bv1) 0 (length bv1))
     (power 2 (- (length bv1) i))) (ind_isum (fc171 bv1 i) 0 i))))))

(declare-fun fc172 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc173 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc172 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power 2 (- (- l 1) k))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc173 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power 2 (- (- l 1) k))))))

;; mod_ind_isum
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
  (=> (and (<= 0 i) (<= i l))
  (=> (binary f)
  (= (mod1 (ind_isum (fc172 f l) 0 l) (power 2 i)) (ind_isum (fc173 f l)
                                                   (- l i) l))))))

(declare-fun fc174 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc175 ((Array Int Int) Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc174 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power 2 (- (- l 1) k))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc175 f i l)) (t2tb3 k))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5 f)
                                                                   (t2tb3
                                                                   (- (+ k l) i)))) 
  (power 2 (- (- i 1) k))))))

;; mod_ind_isum_z
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
  (=> (and (<= 0 i) (<= i l))
  (=> (binary f)
  (= (mod1 (ind_isum (fc174 f l) 0 l) (power 2 i)) (ind_isum (fc175 f i l) 0
                                                   i))))))

(declare-fun fc176 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc177 ((Array Int Int) Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc176 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power 2 (- (- l 1) k))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc177 f i l)) (t2tb3 k))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5 f)
                                                                   (t2tb3 k))) 
  (power 2 (- (- (- l 1) k) i))))))

;; div_ind_isum
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
  (=> (and (<= 0 i) (<= i l))
  (=> (binary f)
  (= (div1 (ind_isum (fc176 f l) 0 l) (power 2 i)) (ind_isum (fc177 f i l) 0
                                                   (- l i)))))))

(declare-fun fc178 (bitvec Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (i Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc178 bv1 i)) (t2tb3 l))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   bv1))
                                                                   (t2tb3 l))) 
  (power 2 (- i l))))))

;; ind_isum_mod
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (< i (length bv1)))
  (= (mod1 (ind_isum (fc178 bv1 i) 0 (+ i 1)) 2) (tb2t3
                                                 (infix_at int int
                                                 (t2tb5 (value bv1))
                                                 (t2tb3 i)))))))

(declare-fun fc179 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc180 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc179 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power_ 2 (- (- l 1) k))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc180 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power_ 2 (- (- l 1) k))))))

;; mod_ind_isum_
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
  (=> (and (<= 0 i) (<= i l))
  (=> (binary f)
  (= (mod1 (ind_isum (fc179 f l) 0 l) (power_ 2 i)) (ind_isum (fc180 f l)
                                                    (- l i) l))))))

(declare-fun fc181 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc182 ((Array Int Int) Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc181 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power_ 2 (- (- l 1) k))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc182 f i l)) (t2tb3 k))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5 f)
                                                                   (t2tb3
                                                                   (- (+ k l) i)))) 
  (power_ 2 (- (- i 1) k))))))

;; mod_ind_isum_z_
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
  (=> (and (<= 0 i) (<= i l))
  (=> (binary f)
  (= (mod1 (ind_isum (fc181 f l) 0 l) (power_ 2 i)) (ind_isum (fc182 f i l) 0
                                                    i))))))

(declare-fun fc183 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc184 ((Array Int Int) Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc183 f l)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power_ 2 (- (- l 1) k))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc184 f i l)) (t2tb3 k))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5 f)
                                                                   (t2tb3 k))) 
  (power_ 2 (- (- (- l 1) k) i))))))

;; div_ind_isum_
  (assert
  (forall ((f (Array Int Int)) (i Int) (l Int))
  (=> (and (<= 0 i) (<= i l))
  (=> (binary f)
  (= (div1 (ind_isum (fc183 f l) 0 l) (power_ 2 i)) (ind_isum (fc184 f i l) 0
                                                    (- l i)))))))

(declare-fun fc185 (bitvec Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (i Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc185 bv1 i)) (t2tb3 l))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   bv1))
                                                                   (t2tb3 l))) 
  (power_ 2 (- i l))))))

;; ind_isum_mod_
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (< i (length bv1)))
  (= (mod1 (ind_isum (fc185 bv1 i) 0 (+ i 1)) 2) (tb2t3
                                                 (infix_at int int
                                                 (t2tb5 (value bv1))
                                                 (t2tb3 i)))))))

(declare-fun fc186 (bitvec) (Array Int Int))

(declare-fun fc187 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc186 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc187 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; bv_to_int_kth_pre
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (- (length bv1) 1)))
  (and
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 k))) (mod1
                                                              (div1
                                                              (ind_isum
                                                              (fc186 bv1) 0
                                                              (length bv1))
                                                              (power 2
                                                              (- (- (length
                                                                    bv1) k) 1)))
                                                              2))
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 k))) (div1
                                                              (mod1
                                                              (ind_isum
                                                              (fc187 bv1) 0
                                                              (length bv1))
                                                              (power 2
                                                              (- (length bv1) k)))
                                                              (power 2
                                                              (- (- (length
                                                                    bv1) k) 1))))))))

(declare-fun int_to_bv (Int Int) bitvec)

(declare-fun result24 (Int Int) (Array Int Int))

;; result_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (result24 i n)) (t2tb3 k))) (ite 
                                                                 (and
                                                                 (<= 0 k)
                                                                 (< k n))
                                                                 (div1
                                                                 (mod1 i
                                                                 (power 2
                                                                 (- n k)))
                                                                 (power 2
                                                                 (- (- n k) 1)))
                                                                 0))))

;; int_to_bv_def
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n) (= (int_to_bv i n) (make_bv (result24 i n) n)))))

(declare-fun fc188 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc188 i n)) (t2tb3 k))) (div1
                                                              (mod1 i
                                                              (power 2
                                                              (- n k)))
                                                              (power 2
                                                              (- (- n k) 1))))))

;; int_to_bv_spec
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (and (= (length (int_to_bv i n)) n)
  (= (int_to_bv i n) (make_bv (fc188 i n) n))))))

(declare-fun fc189 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc189 i n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value
                                                                 (int_to_bv i
                                                                 n)))
                                                                 (t2tb3 l))) 
  (power 2 (- (- n l) 1))))))

;; int_to_bv_sum_pre
  (assert
  (forall ((i Int) (n Int) (k Int))
  (=> (and (<= k n) (<= 0 k))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (mod1 i (power 2 k)) (ind_isum (fc189 i n) (- n k) n))))))

(declare-fun fc190 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc190 i n)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value
                                                                 (int_to_bv i
                                                                 n)))
                                                                 (t2tb3 k))) 
  (power 2 (- (- n 1) k))))))

;; int_to_bv_sum
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (= i (ind_isum (fc190 i n) 0 n))))))

(declare-fun fc191 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc191 i n)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value
                                                                 (int_to_bv i
                                                                 n)))
                                                                 (t2tb3 k))) 
  (power_ 2 (- (- n k) 1))))))

;; int_to_bv_sum_rev
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (= (ind_isum (fc191 i n) 0 n) i)))))

(declare-fun fc192 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc192 i n)) (t2tb3 k))) (mod1
                                                              (div1 i
                                                              (power 2
                                                              (- (- n k) 1)))
                                                              2))))

;; int_to_bv_mod_div
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_to_bv i n) (make_bv (fc192 i n) n))))))

(declare-fun fc193 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc193 i n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value
                                                                 (int_to_bv i
                                                                 n)))
                                                                 (t2tb3 l))) 
  (power 2 (- (- n 1) l))))))

;; mod_isum
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (mod1 i (power 2 k)) (ind_isum (fc193 i n) (- n k) n)))))))

(declare-fun fc194 (Int Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (k Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc194 i k n)) (t2tb3 l))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   (int_to_bv
                                                                   i n)))
                                                                   (t2tb3
                                                                   (+ l (- n k))))) 
  (power 2 (- (- k l) 1))))))

;; mod_isum_z
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (mod1 i (power 2 k)) (ind_isum (fc194 i k n) 0 k)))))))

(declare-fun fc195 (Int Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (k Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc195 i k n)) (t2tb3 l))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   (int_to_bv
                                                                   i n)))
                                                                   (t2tb3 l))) 
  (power 2 (- (- (- n 1) k) l))))))

;; div_isum
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (div1 i (power 2 k)) (ind_isum (fc195 i k n) 0 (- n k))))))))

(declare-fun fc196 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc196 i n)) (t2tb3 k))) (div1
                                                              (mod1 i
                                                              (power 2
                                                              (- n k)))
                                                              (power 2
                                                              (- (- n k) 1))))))

;; int_to_bv_div_mod
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 k) (< k n)) (= (int_to_bv i n) (make_bv (fc196 i n) n)))))))

;; int_to_bv_value
  (assert
  (forall ((i Int) (n Int) (k Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (tb2t3 (infix_at int int (t2tb5 (value (int_to_bv i n))) (t2tb3 k))) 
  (mod1 (div1 i (power 2 (- (- n k) 1))) 2)))))))

;; int_to_bv_value_zero
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (tb2t3 (infix_at int int (t2tb5 (value (int_to_bv i n))) (t2tb3 0))) 
  (ite (< i (power 2 (- n 1))) 0 1))))))

(declare-fun fc197 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc197 i n)) (t2tb3 k))) (mod1
                                                              (div1 i
                                                              (power_ 2
                                                              (- (- n k) 1)))
                                                              2))))

;; int_to_bv_mod_div_
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n)))
  (= (int_to_bv i n) (make_bv (fc197 i n) n))))))

(declare-fun fc198 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc198 i n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value
                                                                 (int_to_bv i
                                                                 n)))
                                                                 (t2tb3 l))) 
  (power_ 2 (- (- n 1) l))))))

;; mod_isum_
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (mod1 i (power_ 2 k)) (ind_isum (fc198 i n) (- n k) n)))))))

(declare-fun fc199 (Int Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (k Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc199 i k n)) (t2tb3 l))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   (int_to_bv
                                                                   i n)))
                                                                   (t2tb3
                                                                   (+ l (- n k))))) 
  (power_ 2 (- (- k l) 1))))))

;; mod_isum_z_
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (mod1 i (power_ 2 k)) (ind_isum (fc199 i k n) 0 k)))))))

(declare-fun fc200 (Int Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (k Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc200 i k n)) (t2tb3 l))) (* (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   (int_to_bv
                                                                   i n)))
                                                                   (t2tb3 l))) 
  (power_ 2 (- (- (- n 1) k) l))))))

;; div_isum_
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (div1 i (power_ 2 k)) (ind_isum (fc200 i k n) 0 (- n k))))))))

(declare-fun fc201 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc201 i n)) (t2tb3 k))) (div1
                                                              (mod1 i
                                                              (power_ 2
                                                              (- n k)))
                                                              (power_ 2
                                                              (- (- n k) 1))))))

;; int_to_bv_div_mod_
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n)))
  (=> (and (<= 0 k) (< k n)) (= (int_to_bv i n) (make_bv (fc201 i n) n)))))))

;; int_to_bv_value_
  (assert
  (forall ((i Int) (n Int) (k Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n)))
  (=> (and (<= 0 k) (< k n))
  (= (tb2t3 (infix_at int int (t2tb5 (value (int_to_bv i n))) (t2tb3 k))) 
  (mod1 (div1 i (power_ 2 (- (- n k) 1))) 2)))))))

;; int_to_bv_value_zero_
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n)))
  (= (tb2t3 (infix_at int int (t2tb5 (value (int_to_bv i n))) (t2tb3 0))) 
  (ite (< i (power_ 2 (- n 1))) 0 1))))))

;; int_to_bv_zero
  (assert
  (forall ((n Int))
  (forall ((k Int))
  (=> (and (<= 0 k) (< k n))
  (= (tb2t3 (infix_at int int (t2tb5 (value (int_to_bv 0 n))) (t2tb3 k))) 0)))))

(declare-fun fc202 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc202 i n)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value
                                                                 (int_to_bv i
                                                                 n)))
                                                                 (t2tb3 k))) 
  (power 2 (- (- n k) 1))))))

;; int_to_sum
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (= i (ind_isum (fc202 i n) 0 n))))))

;; int_to_bv_transl
  (assert
  (forall ((i Int) (k Int) (n Int) (t Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 k) (< k (- n t)))
  (=> (and (< 0 t) (<= t n))
  (= (tb2t3
     (infix_at int int
     (t2tb5 (value (int_to_bv (mod1 i (power_ 2 (- n t))) (- n t))))
     (t2tb3 k))) (tb2t3
                 (infix_at int int (t2tb5 (value (int_to_bv i n)))
                 (t2tb3 (+ k t))))))))))

;; int_to_bv_transl_div
  (assert
  (forall ((i Int) (k Int) (n Int) (nqt Int) (t Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 k) (< k t))
  (=> (= nqt t)
  (=> (and (< 0 t) (<= t n))
  (= (tb2t3
     (infix_at int int
     (t2tb5 (value (int_to_bv (div1 i (power_ 2 (- n t))) nqt))) (t2tb3 k))) 
  (tb2t3 (infix_at int int (t2tb5 (value (int_to_bv i n))) (t2tb3 k))))))))))

(declare-fun fc203 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc203 n i)) (t2tb3 j))) (- 1 (tb2t3
                                                                   (infix_at
                                                                   int 
                                                                   int
                                                                   (t2tb5
                                                                   (value
                                                                   (int_to_bv
                                                                   i n)))
                                                                   (t2tb3 j)))))))

;; product_int_to_bv_inv
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (ind_iproduct (fc203 n i) 0 n) (ite (= i 0) 1 0))))))

(declare-fun bin_to_int ((Array Int Int) Int) Int)

;; bin_to_int_def
  (assert
  (forall ((f (Array Int Int)) (n Int))
  (=> (<= 0 n)
  (=> (binary f) (= (bin_to_int f n) (bv_to_int (make_bv f n)))))))

(declare-fun fc204 ((Array Int Int) Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc204 f n)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5 f)
                                                                 (t2tb3 k))) 
  (power 2 (- (- n 1) k))))))

;; bin_to_int_spec
  (assert
  (forall ((f (Array Int Int)) (n Int))
  (=> (<= 0 n)
  (=> (binary f)
  (and (= (bin_to_int f n) (ind_isum (fc204 f n) 0 n))
  (<= 0 (bin_to_int f n)))))))

(declare-fun int_to_bin (Int Int) (Array Int Int))

;; int_to_bin_def
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_to_bin i n) (value (int_to_bv i n)))))))

(declare-fun fc205 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc205 i n)) (t2tb3 k))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (int_to_bin
                                                                 i n))
                                                                 (t2tb3 k))) 
  (power_ 2 (- (- n 1) k))))))

;; int_to_bin_spec
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (and (= i (ind_isum (fc205 i n) 0 n))
  (and (binary (int_to_bin i n))
  (forall ((k Int))
  (=> (and (<= 0 k) (< k n))
  (= (tb2t3 (infix_at int int (t2tb5 (int_to_bin i n)) (t2tb3 k))) (mod1
                                                                   (div1 i
                                                                   (power_ 2
                                                                   (- (- n k) 1)))
                                                                   2))))))))))

;; int_to_bv_tail
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_to_bv (tail_bits i n) (- n 1)) (tail (int_to_bv i n)))))))

(declare-fun fc206 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc206 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (length bv1) l))))))

;; bound_sum_dec
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 1 i) (<= i (length bv1)))
  (< (ind_isum (fc206 bv1) i (+ (length bv1) 1)) (power 2
                                                 (+ (- (length bv1) i) 1))))))

;; bv_to_int_to_bv
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (= (bv_to_int (int_to_bv i n)) i)))))

;; bv_to_int_to_bv_
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power_ 2 n))) (= (bv_to_int (int_to_bv i n)) i)))))

(declare-fun fc207 (Int Int) (Array Int Int))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc207 i n)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value
                                                                 (int_to_bv i
                                                                 n)))
                                                                 (t2tb3 l))) 
  (power 2 (- (- n 1) l))))))

;; tail_bits_sum
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (<= 0 i)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (tail_bits i n) (ind_isum (fc207 i n) 1 n)))))))

;; int_to_bv_to_int
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (= (int_to_bv (bv_to_int bv1) (length bv1)) bv1))))

;; int_to_bv_to_int_
  (assert
  (forall ((bv1 bitvec) (l Int))
  (=> (<= 0 l) (=> (= (length bv1) l) (= (int_to_bv (bv_to_int bv1) l) bv1)))))

;; concat_to_int
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i 1))
  (= (bv_to_int (concat_l bv1 i)) (+ (bv_to_int bv1) (* i (power 2
                                                          (length bv1))))))))

;; bounded_to_int
  (assert (forall ((bv1 bitvec)) (< (bv_to_int bv1) (power 2 (length bv1)))))

;; int_to_bv_to_int_value
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (<= 1 (length bv1))
  (= (tb2t3
     (infix_at int int
     (t2tb5 (value (int_to_bv (bv_to_int bv1) (length bv1)))) (t2tb3 i))) 
  (ite (and (<= 0 i) (< i (length bv1)))
  (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) 0)))))

;; int_to_bv_to_int_gen
  (assert
  (forall ((bv1 bitvec) (n Int))
  (=> (<= 1 (length bv1))
  (=> (= n (length bv1)) (= (int_to_bv (bv_to_int bv1) n) bv1)))))

(declare-fun fc208 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc208 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; bv_to_int_mod
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (length bv1)))
  (= (mod1 (bv_to_int bv1) (power 2 (- (length bv1) k))) (ind_isum
                                                         (fc208 bv1) k
                                                         (length bv1))))))

(declare-fun fc209 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc209 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; bv_to_int_mod_rev
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (length bv1)))
  (= (ind_isum (fc209 bv1) k (length bv1)) (mod1 (bv_to_int bv1)
                                           (power 2 (- (length bv1) k)))))))

(declare-fun fc210 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc210 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; bv_to_int_mod_gen
  (assert
  (forall ((k Int) (n Int))
  (=> (and (<= 0 k) (< k n))
  (forall ((bv1 bitvec))
  (=> (= (length bv1) n)
  (= (mod1 (bv_to_int bv1) (power 2 (- (length bv1) k))) (ind_isum
                                                         (fc210 bv1) k
                                                         (length bv1))))))))

;; to_int_head_tail
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1))
  (and
  (= (bv_to_int bv1) (+ (bv_to_int (tail bv1)) (* (head bv1) (power 2
                                                             (- (length bv1) 1)))))
  (= (bv_to_int (tail bv1)) (mod1 (bv_to_int bv1)
                            (power 2 (- (length bv1) 1))))))))

;; not_disj
  (assert
  (forall ((a Bool) (b Bool))
  (=> (not (= a true))
  (=> (not (= b true)) (not (or (= a true) (= b true)))))))

(declare-fun my_map (ty ty uni uni) uni)

;; my_map_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b) (my_map b a x x1)))))

;; my_map_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni))
  (ite (= (cardinal a u) 0) (= (my_map b a f u) (empty b))
  (= (my_map b a f u) (add b (infix_at b a f (choose a u))
                      (my_map b a f (remove a (choose a u) u))))))))

;; my_map_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni)) (= (my_map b a f u) (map1 b a f u)))))

;; my_map_to_map
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni)) (= (my_map b a f u) (map1 b a f u)))))

;; map_to_my_map
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni)) (= (map1 b a f u) (my_map b a f u)))))

(declare-fun mapz_pre (Int (set bitvec)) (set bitvec))

(declare-fun result25 () (Array bitvec bitvec))

(declare-fun t2tb23 (bitvec) uni)

;; t2tb_sort
  (assert (forall ((x bitvec)) (sort bitvec1 (t2tb23 x))))

(declare-fun tb2t23 (uni) bitvec)

;; BridgeL
  (assert
  (forall ((i bitvec)) (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort bitvec1 j) (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23
                                                               (tb2t23 j))) )))

(declare-fun t2tb24 ((Array bitvec bitvec)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array bitvec bitvec))) (sort (infix_mngt bitvec1 bitvec1)
  (t2tb24 x))))

(declare-fun tb2t24 (uni) (Array bitvec bitvec))

;; BridgeL
  (assert
  (forall ((i (Array bitvec bitvec)))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt bitvec1 bitvec1) j) (= (t2tb24 (tb2t24 j)) j)) :pattern (
  (t2tb24 (tb2t24 j))) )))

;; result_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 result25) (t2tb23 bv1))) 
  (concat_l bv1 0))))

(declare-fun t2tb25 ((set bitvec)) uni)

;; t2tb_sort
  (assert (forall ((x (set bitvec))) (sort (set1 bitvec1) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set bitvec))

;; BridgeL
  (assert
  (forall ((i (set bitvec)))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 bitvec1) j) (= (t2tb25 (tb2t25 j)) j)) :pattern (
  (t2tb25 (tb2t25 j))) )))

;; mapz_pre_def
  (assert
  (forall ((n Int) (s (set bitvec)))
  (=> (<= 1 n)
  (=>
  (forall ((f bitvec))
  (= (mem bitvec1 (t2tb23 f) (t2tb25 s)) (= (length f) (- n 1))))
  (= (mapz_pre n s) (tb2t25
                    (my_map bitvec1 bitvec1 (t2tb24 result25) (t2tb25 s))))))))

(declare-fun fc211 () (Array Int Int))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc211) (t2tb3 us))) 0)))

;; mapz_pre_spec
  (assert
  (forall ((n Int) (s (set bitvec)))
  (=> (<= 1 n)
  (=>
  (forall ((f bitvec))
  (= (mem bitvec1 (t2tb23 f) (t2tb25 s)) (= (length f) (- n 1))))
  (and (mem bitvec1 (t2tb23 (make_bv fc211 n)) (t2tb25 (mapz_pre n s)))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapz_pre n s)))
  (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 0)))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapz_pre n s)))
  (exists ((bv1 bitvec))
  (and (mem bitvec1 (t2tb23 bv1) (t2tb25 s)) (= e (concat_l bv1 0))))))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapz_pre n s))) (= (length e) n)))
  (forall ((e bitvec))
  (=> (= (length e) n)
  (=> (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 0) (mem
  bitvec1 (t2tb23 e) (t2tb25 (mapz_pre n s))))))))))))))

(declare-fun mapo_pre (Int (set bitvec)) (set bitvec))

(declare-fun result26 () (Array bitvec bitvec))

;; result_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 result26) (t2tb23 bv1))) 
  (concat_l bv1 1))))

;; mapo_pre_def
  (assert
  (forall ((n Int) (s (set bitvec)))
  (=> (<= 1 n)
  (=>
  (forall ((f bitvec))
  (= (mem bitvec1 (t2tb23 f) (t2tb25 s)) (= (length f) (- n 1))))
  (= (mapo_pre n s) (tb2t25
                    (my_map bitvec1 bitvec1 (t2tb24 result26) (t2tb25 s))))))))

(declare-fun fc212 () (Array Int Int))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc212) (t2tb3 us))) 1)))

;; mapo_pre_spec
  (assert
  (forall ((n Int) (s (set bitvec)))
  (=> (<= 1 n)
  (=>
  (forall ((f bitvec))
  (= (mem bitvec1 (t2tb23 f) (t2tb25 s)) (= (length f) (- n 1))))
  (and (mem bitvec1 (t2tb23 (make_bv fc212 n)) (t2tb25 (mapo_pre n s)))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapo_pre n s)))
  (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 1)))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapo_pre n s)))
  (exists ((bv1 bitvec))
  (and (mem bitvec1 (t2tb23 bv1) (t2tb25 s)) (= e (concat_l bv1 1))))))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapo_pre n s))) (= (length e) n)))
  (forall ((e bitvec))
  (=> (= (length e) n)
  (=> (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 1) (mem
  bitvec1 (t2tb23 e) (t2tb25 (mapo_pre n s))))))))))))))

(declare-fun n_bvs (Int) (set bitvec))

;; n_bvs_spec
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (and
  (=> (<= 1 n)
  (forall ((s (set bitvec)))
  (=>
  (forall ((f bitvec))
  (= (mem bitvec1 (t2tb23 f) (t2tb25 s)) (= (length f) (- n 1))))
  (= (n_bvs n) (tb2t25
               (union1 bitvec1 (t2tb25 (mapz_pre n s))
               (t2tb25 (mapo_pre n s))))))))
  (and
  (forall ((f bitvec))
  (=> (mem bitvec1 (t2tb23 f) (t2tb25 (n_bvs n))) (= (length f) n)))
  (and
  (forall ((f bitvec))
  (= (mem bitvec1 (t2tb23 f) (t2tb25 (n_bvs n))) (= (length f) n)))
  (< 0 (cardinal bitvec1 (t2tb25 (n_bvs n))))))))))

;; in_n_bvs
  (assert
  (forall ((x bitvec) (n Int))
  (=> (<= 0 n)
  (=> (= (length x) n) (mem bitvec1 (t2tb23 x) (t2tb25 (n_bvs n)))))))

;; get_in_n_bvs
  (assert
  (forall ((x bitvec) (n Int))
  (=> (<= 0 n)
  (=> (mem bitvec1 (t2tb23 x) (t2tb25 (n_bvs n))) (= (length x) n)))))

(declare-fun mapz (Int) (set bitvec))

;; mapz_def
  (assert
  (forall ((n Int)) (=> (<= 1 n) (= (mapz n) (mapz_pre n (n_bvs (- n 1)))))))

(declare-fun fc213 () (Array bitvec bitvec))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 fc213) (t2tb23 bv1))) 
  (concat_l bv1 0))))

;; mapz_spec
  (assert
  (forall ((n Int))
  (=> (<= 1 n)
  (and
  (= (mapz n) (tb2t25
              (my_map bitvec1 bitvec1 (t2tb24 fc213)
              (t2tb25 (n_bvs (- n 1))))))
  (and (< 0 (cardinal bitvec1 (t2tb25 (mapz n))))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapz n)))
  (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 0)))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapz n)))
  (exists ((bv1 bitvec))
  (and (mem bitvec1 (t2tb23 bv1) (t2tb25 (n_bvs (- n 1))))
  (= e (concat_l bv1 0))))))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapz n))) (= (length e) n)))
  (forall ((e bitvec))
  (=> (= (length e) n)
  (=> (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 0) (mem
  bitvec1 (t2tb23 e) (t2tb25 (mapz n))))))))))))))

(declare-fun mapo (Int) (set bitvec))

;; mapo_def
  (assert
  (forall ((n Int)) (=> (<= 1 n) (= (mapo n) (mapo_pre n (n_bvs (- n 1)))))))

(declare-fun fc214 () (Array bitvec bitvec))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 fc214) (t2tb23 bv1))) 
  (concat_l bv1 1))))

;; mapo_spec
  (assert
  (forall ((n Int))
  (=> (<= 1 n)
  (and
  (= (mapo n) (tb2t25
              (my_map bitvec1 bitvec1 (t2tb24 fc214)
              (t2tb25 (n_bvs (- n 1))))))
  (and (< 0 (cardinal bitvec1 (t2tb25 (mapo n))))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapo n)))
  (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 1)))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapo n)))
  (exists ((bv1 bitvec))
  (and (mem bitvec1 (t2tb23 bv1) (t2tb25 (n_bvs (- n 1))))
  (= e (concat_l bv1 1))))))
  (and
  (forall ((e bitvec))
  (=> (mem bitvec1 (t2tb23 e) (t2tb25 (mapo n))) (= (length e) n)))
  (forall ((e bitvec))
  (=> (= (length e) n)
  (=> (= (tb2t3 (infix_at int int (t2tb5 (value e)) (t2tb3 0))) 1) (mem
  bitvec1 (t2tb23 e) (t2tb25 (mapo n))))))))))))))

;; n_bvs_node
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (and
  (= (tb2t25 (inter bitvec1 (t2tb25 (mapz n)) (t2tb25 (mapo n)))) (tb2t25
                                                                  (empty
                                                                  bitvec1)))
  (= (tb2t25 (union1 bitvec1 (t2tb25 (mapz n)) (t2tb25 (mapo n)))) (n_bvs n))))))

(declare-fun fc215 () (Array Int Int))

(declare-fun fc216 () (Array Int Int))

(declare-fun fc217 () (Array Int Int))

(declare-fun fc218 () (Array Int Int))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc215) (t2tb3 us))) 0)))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc216) (t2tb3 us))) 0)))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc217) (t2tb3 us))) 0)))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc218) (t2tb3 us))) 0)))

(declare-fun t2tb26 ((Array bitvec (matrix complex))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array bitvec (matrix complex)))) (sort
  (infix_mngt bitvec1 (matrix1 complex1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (Array bitvec (matrix complex)))

;; BridgeL
  (assert
  (forall ((i (Array bitvec (matrix complex))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt bitvec1 (matrix1 complex1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; n_bvsz_spec
  (assert
  (and
  (forall ((x bitvec))
  (=> (= (length x) 0) (mem bitvec1 (t2tb23 x) (t2tb25 (n_bvs 0)))))
  (and
  (forall ((x bitvec))
  (=> (mem bitvec1 (t2tb23 x) (t2tb25 (n_bvs 0))) (= x (make_bv fc215 0))))
  (and
  (= (n_bvs 0) (tb2t25
               (add bitvec1 (t2tb23 (make_bv fc216 0)) (empty bitvec1))))
  (and (= (tb2t23 (choose bitvec1 (t2tb25 (n_bvs 0)))) (make_bv fc217 0))
  (forall ((f (Array bitvec (matrix complex))))
  (= (mat_sum bitvec1 (t2tb25 (n_bvs 0)) (t2tb26 f)) (tb2t14
                                                     (infix_at
                                                     (matrix1 complex1)
                                                     bitvec1 (t2tb26 f)
                                                     (t2tb23
                                                     (make_bv fc218 0)))))))))))

(declare-fun fc219 () (Array Int Int))

(declare-fun fc220 () (Array Int Int))

(declare-fun fc221 () (Array Int Int))

(declare-fun fc222 () (Array Int Int))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc219) (t2tb3 us))) 0)))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc220) (t2tb3 us))) 1)))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc221) (t2tb3 us))) 0)))

;; fc_def
  (assert
  (forall ((us Int))
  (= (tb2t3 (infix_at int int (t2tb5 fc222) (t2tb3 us))) 1)))

;; n_bvso_spec
  (assert
  (and
  (forall ((x bitvec))
  (=> (= (length x) 1) (mem bitvec1 (t2tb23 x) (t2tb25 (n_bvs 1)))))
  (and
  (forall ((x bitvec))
  (=> (mem bitvec1 (t2tb23 x) (t2tb25 (n_bvs 1))) (= (length x) 1)))
  (and
  (= (n_bvs 1) (tb2t25
               (add bitvec1 (t2tb23 (make_bv fc219 1))
               (add bitvec1 (t2tb23 (make_bv fc220 1)) (empty bitvec1)))))
  (forall ((f (Array bitvec (matrix complex))))
  (=> (constant_size bitvec1 (t2tb25 (n_bvs 1)) (t2tb26 f))
  (= (mat_sum bitvec1 (t2tb25 (n_bvs 1)) (t2tb26 f)) (add_mat
                                                     (tb2t14
                                                     (infix_at
                                                     (matrix1 complex1)
                                                     bitvec1 (t2tb26 f)
                                                     (t2tb23
                                                     (make_bv fc221 1))))
                                                     (tb2t14
                                                     (infix_at
                                                     (matrix1 complex1)
                                                     bitvec1 (t2tb26 f)
                                                     (t2tb23
                                                     (make_bv fc222 1))))))))))))

(declare-fun fc223 () (Array bitvec bitvec))

(declare-fun fc224 () (Array bitvec bitvec))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 fc223) (t2tb23 bv1))) 
  (concat_l bv1 0))))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 fc224) (t2tb23 bv1))) 
  (concat_l bv1 1))))

;; injective_node
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (and (p_injective bitvec1 bitvec1 (t2tb24 fc223) (t2tb25 (n_bvs n)))
  (p_injective bitvec1 bitvec1 (t2tb24 fc224) (t2tb25 (n_bvs n)))))))

(declare-fun fc225 ((Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

(declare-fun fc226 ((Array bitvec (matrix complex))) (Array bitvec (matrix complex)))

;; fc_def
  (assert
  (forall ((f (Array bitvec (matrix complex))) (bv1 bitvec))
  (= (tb2t14
     (infix_at (matrix1 complex1) bitvec1 (t2tb26 (fc225 f)) (t2tb23 bv1))) 
  (tb2t14
  (infix_at (matrix1 complex1) bitvec1 (t2tb26 f) (t2tb23 (concat_l bv1 0)))))))

;; fc_def
  (assert
  (forall ((f (Array bitvec (matrix complex))) (bv1 bitvec))
  (= (tb2t14
     (infix_at (matrix1 complex1) bitvec1 (t2tb26 (fc226 f)) (t2tb23 bv1))) 
  (tb2t14
  (infix_at (matrix1 complex1) bitvec1 (t2tb26 f) (t2tb23 (concat_l bv1 1)))))))

;; mat_sum_n_bvs_pos
  (assert
  (forall ((n Int) (f (Array bitvec (matrix complex))))
  (=> (< 0 n)
  (=> (constant_size bitvec1 (t2tb25 (n_bvs n)) (t2tb26 f))
  (= (mat_sum bitvec1 (t2tb25 (n_bvs n)) (t2tb26 f)) (add_mat
                                                     (mat_sum bitvec1
                                                     (t2tb25 (n_bvs (- n 1)))
                                                     (t2tb26 (fc225 f)))
                                                     (mat_sum bitvec1
                                                     (t2tb25 (n_bvs (- n 1)))
                                                     (t2tb26 (fc226 f)))))))))

(declare-fun fc227 () (Array Int (Array Int Int)))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc227) (t2tb3 y0))
     (t2tb3 y1))) y0)))

;; mat_sum_n_bvs_null
  (assert
  (forall ((f (Array bitvec (matrix complex))))
  (= (mat_sum bitvec1 (t2tb25 (n_bvs 0)) (t2tb26 f)) (tb2t14
                                                     (infix_at
                                                     (matrix1 complex1)
                                                     bitvec1 (t2tb26 f)
                                                     (t2tb23
                                                     (make_bv
                                                     (tb2t5
                                                     (infix_at
                                                     (infix_mngt int int) 
                                                     int (t2tb15 fc227)
                                                     (t2tb3 0))) 0)))))))

(declare-fun fc228 () (Array Int (Array Int Int)))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t3
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc228) (t2tb3 y0))
     (t2tb3 y1))) y0)))

;; mat_sum_n_bvs_null_eq
  (assert
  (forall ((f (Array bitvec (matrix complex))) (x (matrix complex)))
  (=>
  (= x (tb2t14
       (infix_at (matrix1 complex1) bitvec1 (t2tb26 f)
       (t2tb23
       (make_bv
       (tb2t5 (infix_at (infix_mngt int int) int (t2tb15 fc228) (t2tb3 0)))
       0)))))
  (= (mat_sum bitvec1 (t2tb25 (n_bvs 0)) (t2tb26 f)) x))))

;; get_n_bvs
  (assert
  (forall ((bv1 bitvec)) (mem bitvec1 (t2tb23 bv1)
  (t2tb25 (n_bvs (length bv1))))))

;; get_n_bvs_gen
  (assert
  (forall ((bv1 bitvec) (l Int))
  (=> (= l (length bv1)) (mem bitvec1 (t2tb23 bv1) (t2tb25 (n_bvs l))))))

;; set_n_bvs
  (assert
  (forall ((bv1 bitvec))
  (=> (mem bitvec1 (t2tb23 bv1) (t2tb25 (n_bvs (length bv1))))
  (forall ((i Int))
  (=> (not (and (<= 0 i) (< i (length bv1))))
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) 0))))))

;; int_to_bv_n_bvs
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (mem bitvec1 (t2tb23 (int_to_bv i n))
  (t2tb25 (n_bvs n)))))))

(declare-fun fc229 () (Array bitvec bitvec))

(declare-fun fc230 () (Array bitvec bitvec))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 fc229) (t2tb23 bv1))) 
  (concat_l bv1 0))))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 fc230) (t2tb23 bv1))) 
  (concat_l bv1 1))))

;; n_bvs_def_pos
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (= (n_bvs n) (tb2t25
               (union1 bitvec1
               (map1 bitvec1 bitvec1 (t2tb24 fc229) (t2tb25 (n_bvs (- n 1))))
               (map1 bitvec1 bitvec1 (t2tb24 fc230) (t2tb25 (n_bvs (- n 1))))))))))

(declare-fun bv_to_int_closure () (Array bitvec Int))

(declare-fun t2tb27 ((Array bitvec Int)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array bitvec Int))) (sort (infix_mngt bitvec1 int)
  (t2tb27 x))))

(declare-fun tb2t27 (uni) (Array bitvec Int))

;; BridgeL
  (assert
  (forall ((i (Array bitvec Int)))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb27 (tb2t27 j)) j) :pattern ((t2tb27 (tb2t27 j))) )))

;; bv_to_int_closure_def
  (assert
  (forall ((y bitvec))
  (= (tb2t3 (infix_at int bitvec1 (t2tb27 bv_to_int_closure) (t2tb23 y))) 
  (bv_to_int y))))

;; map_n_bvs
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (= (to_fset 0 (power 2 n)) (tb2t4
                             (map1 int bitvec1 (t2tb27 bv_to_int_closure)
                             (t2tb25 (n_bvs n))))))))

(declare-fun fc231 ((Array Int complex)) (Array bitvec complex))

(declare-fun t2tb28 ((Array bitvec complex)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array bitvec complex))) (sort (infix_mngt bitvec1 complex1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (Array bitvec complex))

;; BridgeL
  (assert
  (forall ((i (Array bitvec complex)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt bitvec1 complex1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; fc_def
  (assert
  (forall ((f (Array Int complex)) (k bitvec))
  (= (tb2t (infix_at complex1 bitvec1 (t2tb28 (fc231 f)) (t2tb23 k))) 
  (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 (bv_to_int k)))))))

;; ind_sum_bv
  (assert
  (forall ((f (Array Int complex)) (n Int))
  (=> (<= 1 n)
  (= (ind_sum f 0 (power_ 2 n)) (sum bitvec1 (t2tb25 (n_bvs n))
                                (t2tb28 (fc231 f)))))))

(declare-fun first_div (bitvec bitvec) Int)

;; first_div_spec
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (=> (not (= bv1 bv2))
  (and
  (forall ((j Int))
  (=> (and (<= 0 j) (< j (first_div bv1 bv2)))
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 j))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5
                                                              (value bv2))
                                                              (t2tb3 j))))))
  (and
  (=> (< (first_div bv1 bv2) (length bv1))
  (not
  (= (tb2t3
     (infix_at int int (t2tb5 (value bv1)) (t2tb3 (first_div bv1 bv2)))) 
  (tb2t3 (infix_at int int (t2tb5 (value bv2)) (t2tb3 (first_div bv1 bv2)))))))
  (and (<= 0 (first_div bv1 bv2)) (< (first_div bv1 bv2) (length bv1)))))))))

(declare-fun fc232 (Int) (Array bitvec bitvec))

;; fc_def
  (assert
  (forall ((i Int) (bv1 bitvec))
  (= (tb2t23 (infix_at bitvec1 bitvec1 (t2tb24 (fc232 i)) (t2tb23 bv1))) 
  (concat_l bv1 i))))

;; injective_concat
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (<= i 1)) (p_injective bitvec1 bitvec1 (t2tb24 (fc232 i))
  (t2tb25 (n_bvs n)))))))

;; inf_first_div
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (=> (not (= bv1 bv2))
  (forall ((j Int))
  (=> (<= 1 j)
  (=>
  (not
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 j))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5
                                                              (value bv2))
                                                              (t2tb3 j)))))
  (<= (first_div bv1 bv2) j))))))))

;; first_div_diff
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (=> (not (= bv1 bv2))
  (not
  (= (tb2t3
     (infix_at int int (t2tb5 (value bv1)) (t2tb3 (first_div bv1 bv2)))) 
  (tb2t3 (infix_at int int (t2tb5 (value bv2)) (t2tb3 (first_div bv1 bv2))))))))))

;; exists_first_div
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (=> (not (= bv1 bv2))
  (exists ((i Int))
  (and (and (<= 0 i) (< i (length bv1))) (= i (first_div bv1 bv2))))))))

;; set_diff_length
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (not (= (length bv1) (length bv2))) (not (= bv1 bv2)))))

;; set_diff_val
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
  (=> (= (length bv1) (length bv2))
  (=> (and (<= 0 i) (< i (length bv1)))
  (=>
  (not
  (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 i))) (tb2t3
                                                              (infix_at 
                                                              int int
                                                              (t2tb5
                                                              (value bv2))
                                                              (t2tb3 i)))))
  (not (= bv1 bv2)))))))

(declare-fun fc233 (bitvec) (Array Int Int))

(declare-fun fc234 (bitvec) (Array Int Int))

(declare-fun fc235 (bitvec) (Array Int Int))

(declare-fun fc236 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc233 bv1)) (t2tb3 l))) (ite (< l 
                                                              (length bv1))
                                                              (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
                                                              (power 2
                                                              (- (- (length
                                                                    bv1) 1) l)))
                                                              0))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc234 bv1)) (t2tb3 l))) (ite (< l 
                                                              (length bv1))
                                                              (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
                                                              (power 2
                                                              (- (- (length
                                                                    bv1) 1) l)))
                                                              0))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc235 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc236 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; kth_decomp
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (length bv1)))
  (and
  (= (bv_to_int bv1) (+ (+ (ind_isum (fc233 bv1) 0 k) (* (tb2t3
                                                         (infix_at int 
                                                         int
                                                         (t2tb5 (value bv1))
                                                         (t2tb3 k))) 
  (power 2 (- (- (length bv1) 1) k)))) (ind_isum (fc234 bv1) (+ k 1)
                                       (length bv1))))
  (= (bv_to_int bv1) (+ (+ (ind_isum (fc235 bv1) 0 k) (* (tb2t3
                                                         (infix_at int 
                                                         int
                                                         (t2tb5 (value bv1))
                                                         (t2tb3 k))) 
  (power 2 (- (- (length bv1) 1) k)))) (ind_isum (fc236 bv1) (+ k 1)
                                       (length bv1))))))))

(declare-fun fc237 (Int Int Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((i Int) (j Int) (n Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc237 i j n)) (t2tb3 k))) (indic
                                                                    int
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5
                                                                    (value
                                                                    (int_to_bv
                                                                    i n)))
                                                                    (t2tb3 k))
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5
                                                                    (value
                                                                    (int_to_bv
                                                                    j n)))
                                                                    (t2tb3 k))))))

;; int_to_bv_prod
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (ind_product (fc237 i j n) 0 n) (indic int (t2tb3 i) (t2tb3 j))))))))

(declare-fun fc238 (Int Int Int) (Array Int complex))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (j Int) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc238 i n j)) (t2tb3 k))) (indic
                                                                    int
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5
                                                                    (value
                                                                    (int_to_bv
                                                                    i n)))
                                                                    (t2tb3 k))
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb5
                                                                    (value
                                                                    (int_to_bv
                                                                    j n)))
                                                                    (t2tb3 k))))))

;; int_to_bv_prod_gen
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (forall ((j Int))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (ind_product (fc238 i n j) 0 n) (indic int (t2tb3 i) (t2tb3 j)))))))))

(declare-fun fc239 (bitvec) (Array Int Int))

(declare-fun fc240 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc239 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc240 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; kth_decomp_bound_zero
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (length bv1)))
  (=> (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 k))) 0)
  (and (<= (ind_isum (fc239 bv1) 0 k) (bv_to_int bv1))
  (< (bv_to_int bv1) (+ (ind_isum (fc240 bv1) 0 k) (power 2
                                                   (- (- (length bv1) k) 1)))))))))

(declare-fun fc241 (bitvec) (Array Int Int))

(declare-fun fc242 (bitvec) (Array Int Int))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc241 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) 1) l))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t3 (infix_at int int (t2tb5 (fc242 bv1)) (t2tb3 l))) (* (tb2t3
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb5
                                                                 (value bv1))
                                                                 (t2tb3 l))) 
  (power 2 (- (- (length bv1) l) 1))))))

;; kth_decomp_bound_one
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (length bv1)))
  (=> (= (tb2t3 (infix_at int int (t2tb5 (value bv1)) (t2tb3 k))) 1)
  (and
  (<= (+ (ind_isum (fc241 bv1) 0 k) (power 2 (- (- (length bv1) k) 1))) 
  (bv_to_int bv1))
  (< (bv_to_int bv1) (+ (ind_isum (fc242 bv1) 0 k) (power 2
                                                   (- (length bv1) k)))))))))

;; bv_to_int_length_2
  (assert
  (forall ((x bitvec))
  (=> (= (length x) 2)
  (and
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 0))) (div1
                                                            (bv_to_int x) 2))
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 1))) (mod1
                                                            (bv_to_int x) 2))))))

;; bv_to_int_length_2_gen
  (assert
  (and
  (forall ((x bitvec))
  (=> (= (length x) 2)
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 0))) (div1
                                                            (bv_to_int x) 2))))
  (forall ((x bitvec))
  (=> (= (length x) 2)
  (= (tb2t3 (infix_at int int (t2tb5 (value x)) (t2tb3 1))) (mod1
                                                            (bv_to_int x) 2))))))

(declare-fun fc243 ((matrix complex)) (Array Int complex))

;; fc_def
  (assert
  (forall ((x (matrix complex)) (k Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (fc243 x)) (t2tb3 k))) (infix_asdt
                                                                (modulus
                                                                (get1 x k 0))
                                                                (modulus
                                                                (get1 x k 0))))))

;; ind_sum_ket_norm_l
  (assert
  (forall ((x (matrix complex)) (n Int))
  (=> (is_a_ket_l x n)
  (= (ket_norm_l x n) (square_rt (ind_sum (fc243 x) 0 (power 2 n)))))))

;; ket_norm_one
  (assert
  (forall ((x (matrix complex)) (n Int))
  (=> (= n 1)
  (=> (is_a_ket_l x n)
  (= (ket_norm_l x n) (square_rt
                      (infix_pldt
                      (infix_asdt (modulus (get1 x 0 0))
                      (modulus (get1 x 0 0)))
                      (infix_asdt (modulus (get1 x 1 0))
                      (modulus (get1 x 1 0))))))))))

;; ket_norm_one_c_one
  (assert
  (forall ((x (matrix complex)) (n Int))
  (=> (= n 1)
  (=> (is_a_ket_l x n)
  (=>
  (= (infix_pldt (infix_asdt (modulus (get1 x 0 0)) (modulus (get1 x 0 0)))
     (infix_asdt (modulus (get1 x 1 0)) (modulus (get1 x 1 0)))) c_one)
  (= (ket_norm_l x n) c_one))))))

;; scalar_ket_norm_l
  (assert
  (forall ((x (matrix complex)) (a complex) (n Int))
  (=> (infix_lseqdt c_zero a)
  (=> (is_a_ket_l x n)
  (= (ket_norm_l (infix_asdtdt a x) n) (infix_asdt a (ket_norm_l x n)))))))

;; zero_ket_norm_l
  (assert
  (forall ((x (matrix complex)) (n Int))
  (=> (is_a_ket_l x n)
  (=> (= (ket_norm_l x n) c_zero)
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i (power 2 n))) (=> (= j 0) (= (get1 x i j) c_zero))))))))

(declare-fun normalized_l ((matrix complex) Int) (matrix complex))

;; normalized_l_def
  (assert
  (forall ((x (matrix complex)) (n Int))
  (=> (is_a_ket_l x n)
  (=>
  (exists ((i Int))
  (and (and (<= 0 i) (< i (power 2 n))) (not (= (get1 x i 0) c_zero))))
  (= (normalized_l x n) (infix_asdtdt (infix_sldt c_one (ket_norm_l x n)) x))))))

;; normalized_l_spec
  (assert
  (forall ((x (matrix complex)) (n Int))
  (=> (is_a_ket_l x n)
  (=>
  (exists ((i Int))
  (and (and (<= 0 i) (< i (power 2 n))) (not (= (get1 x i 0) c_zero))))
  (is_a_ket_l (normalized_l x n) n)))))

(declare-fun make_ket (Int (Array Int complex)) (matrix complex))

(declare-fun result27 ((Array Int complex)) (Array Int (Array Int complex)))

;; result_def
  (assert
  (forall ((f (Array Int complex)) (x Int) (us Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (result27 f)) (t2tb3 x))
     (t2tb3 us))) (tb2t (infix_at complex1 int (t2tb8 f) (t2tb3 x))))))

;; make_ket_def
  (assert
  (forall ((n Int) (f (Array Int complex)))
  (=> (<= 0 n)
  (= (make_ket n f) (tb2t14
                    (make_f complex1 (power 2 n) 1 (t2tb11 (result27 f))))))))

;; make_ket_spec
  (assert
  (forall ((n Int) (f (Array Int complex)))
  (=> (<= 0 n)
  (and (is_a_ket_l (make_ket n f) n)
  (and
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (get1 (make_ket n f) i 0) (tb2t
                               (infix_at complex1 int (t2tb8 f) (t2tb3 i))))))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (make_ket n f)) i j)
  (= (get1 (make_ket n f) i j) (tb2t
                               (infix_at complex1 int (t2tb8 f) (t2tb3 i)))))))))))

;; assert_make_ket
  (assert
  (forall ((r Int) (c Int) (f (Array Int complex)) (i Int))
  (=> (= c 1)
  (=> (and (<= 0 i) (< i (power_ 2 r)))
  (= (get1 (make_ket r f) i 0) (tb2t
                               (infix_at complex1 int (t2tb8 f) (t2tb3 i))))))))

;; assert_make_ket_l
  (assert
  (forall ((l Int) (f (Array Int complex)) (i Int))
  (=> (<= 0 l)
  (= (get1 (make_ket l f) i 0) (tb2t
                               (infix_at complex1 int (t2tb8 f) (t2tb3 i)))))))

;; make_ket_length
  (assert
  (forall ((l Int) (f (Array Int complex)))
  (=> (<= 0 l) (= (ket_length (make_ket l f)) l))))

;; make_ket_rows
  (assert
  (forall ((l Int) (f (Array Int complex)))
  (=> (<= 0 l) (= (rows complex1 (t2tb14 (make_ket l f))) (power_ 2 l)))))

;; make_ket_columns
  (assert
  (forall ((l Int) (f (Array Int complex)))
  (=> (<= 0 l) (= (columns complex1 (t2tb14 (make_ket l f))) 1))))

(declare-fun make_ket_constant (Int complex) (matrix complex))

(declare-fun result28 (complex) (Array Int complex))

;; result_def
  (assert
  (forall ((c complex) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (result28 c)) (t2tb3 i))) c)))

;; make_ket_constant_def
  (assert
  (forall ((n Int) (c complex))
  (=> (<= 0 n) (= (make_ket_constant n c) (make_ket n (result28 c))))))

;; make_ket_constant_spec
  (assert
  (forall ((n Int) (c complex))
  (=> (<= 0 n)
  (and (is_a_ket_l (make_ket_constant n c) n)
  (and
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (get1 (make_ket_constant n c) i 0) c)))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (make_ket_constant n c)) i j)
  (= (get1 (make_ket_constant n c) i j) c))))))))

;; set_equal_ket
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (is_a_ket m)
  (=> (is_a_ket n)
  (=> (= (ket_length m) (ket_length n))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power 2 (ket_length m))))
  (= (get1 m i 0) (get1 n i 0)))) (= m n)))))))

;; set_equal_ket_
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=>
  (exists ((l Int))
  (and (is_a_ket_l m l)
  (and (is_a_ket_l n l)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power 2 l))) (= (get1 m i 0) (get1 n i 0)))))))
  (= m n))))

(declare-fun add_ket ((matrix complex) (matrix complex)) (matrix complex))

;; add_ket_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (is_a_ket m)
  (=> (is_a_ket n)
  (=> (= (ket_length m) (ket_length n)) (= (add_ket m n) (add_mat m n)))))))

;; add_ket_spec
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (is_a_ket m)
  (=> (is_a_ket n)
  (=> (= (ket_length m) (ket_length n))
  (and (is_a_ket (add_ket m n))
  (and (= (ket_length (add_ket m n)) (ket_length m))
  (forall ((i Int))
  (=> (valid_index complex1 (t2tb14 (add_ket m n)) i 0)
  (= (get1 (add_ket m n) i 0) (infix_pldt (get1 m i 0) (get1 n i 0))))))))))))

(declare-fun add_ket_l ((matrix complex) (matrix complex)
  Int) (matrix complex))

(declare-fun result29 ((matrix complex)
  (matrix complex)) (Array Int complex))

;; result_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (i Int))
  (= (tb2t (infix_at complex1 int (t2tb8 (result29 m n)) (t2tb3 i))) 
  (infix_pldt (get1 m i 0) (get1 n i 0)))))

;; add_ket_l_def
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (<= 0 l) (= (add_ket_l m n l) (make_ket l (result29 m n))))))

;; add_ket_l_spec
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (<= 0 l)
  (and (is_a_ket_l (add_ket_l m n l) l)
  (and (= (ket_length (add_ket_l m n l)) l)
  (and
  (forall ((i Int))
  (= (get1 (add_ket_l m n l) i 0) (infix_pldt (get1 m i 0) (get1 n i 0))))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n l) (= (add_ket_l m n l) (add_mat m n))))))))))

;; add_ket_l_to_add_mat
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (<= 0 l)
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n l) (= (add_ket_l m n l) (add_mat m n)))))))

;; null_add_ket_l
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n l) (=> (null_mat m) (= (add_ket_l m n l) n))))))

;; add_ket_l_null
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n l) (=> (null_mat n) (= (add_ket_l m n l) m))))))

(declare-fun add_ket_l_eq ((matrix complex) (matrix complex) (matrix complex)
  (matrix complex) Int) tuple0)

;; add_ket_l_eq_def
  (assert
  (forall ((m (matrix complex)) (mqt (matrix complex)) (n (matrix complex))
  (nqt (matrix complex)) (l Int))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n l)
  (=> (= m mqt) (=> (= n nqt) (= (add_ket_l_eq m mqt n nqt l) Tuple0)))))))

(declare-fun add_ket_l_closure () (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex)))))

(declare-fun t2tb29 ((Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex))))) uni)

;; t2tb_sort
  (assert
  (forall
  ((x (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex))))))
  (sort
  (infix_mngt (matrix1 complex1)
  (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1))))
  (t2tb29 x))))

(declare-fun tb2t29 (uni) (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex)))))

;; BridgeL
  (assert
  (forall
  ((i (Array (matrix complex) (Array (matrix complex) (Array Int (matrix complex))))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (infix_mngt (matrix1 complex1)
     (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1)))) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

;; add_ket_l_closure_def
  (assert
  (forall ((y (matrix complex)) (y1 (matrix complex)) (y2 Int))
  (= (tb2t14
     (infix_at (matrix1 complex1) int
     (infix_at (infix_mngt int (matrix1 complex1)) (matrix1 complex1)
     (infix_at
     (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1)))
     (matrix1 complex1) (t2tb29 add_ket_l_closure) (t2tb14 y)) (t2tb14 y1))
     (t2tb3 y2))) (add_ket_l y y1 y2))))

;; add_ket_l_eq_spec
  (assert
  (forall ((m (matrix complex)) (mqt (matrix complex)) (n (matrix complex))
  (nqt (matrix complex)) (l Int))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n l)
  (=> (= m mqt)
  (=> (= n nqt)
  (= (tb2t18
     (infix_at (infix_mngt int (matrix1 complex1)) (matrix1 complex1)
     (infix_at
     (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1)))
     (matrix1 complex1) (t2tb29 add_ket_l_closure) (t2tb14 m)) (t2tb14 n))) 
  (tb2t18
  (infix_at (infix_mngt int (matrix1 complex1)) (matrix1 complex1)
  (infix_at
  (infix_mngt (matrix1 complex1) (infix_mngt int (matrix1 complex1)))
  (matrix1 complex1) (t2tb29 add_ket_l_closure) (t2tb14 mqt)) (t2tb14 nqt))))))))))

;; add_ket_l_value
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int) (i Int))
  (=> (and (<= 0 i) (< i (power 2 l)))
  (=> (<= 0 l)
  (= (get1 (add_ket_l m n l) i 0) (infix_pldt (get1 m i 0) (get1 n i 0)))))))

;; add_ket_l_length
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (<= 0 l) (= (ket_length (add_ket_l m n l)) l))))

;; add_ket_l_rows
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (<= 0 l) (= (rows complex1 (t2tb14 (add_ket_l m n l))) (power_ 2 l)))))

;; add_ket_l_columns
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (<= 0 l) (= (columns complex1 (t2tb14 (add_ket_l m n l))) 1))))

;; add_ket_l_values
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (<= 0 l)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power_ 2 l)))
  (= (get1 (add_ket_l m n l) i 0) (infix_pldt (get1 m i 0) (get1 n i 0))))))))

;; set_equal_ket_l
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (exists ((l Int)) (and (is_a_ket_l m l) (is_a_ket_l n l)))
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power 2 (ket_length m))))
  (= (get1 m i 0) (get1 n i 0)))) (= m n)))))

;; set_equal_ket_l_
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n l)
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power_ 2 l))) (= (get1 m i 0) (get1 n i 0))))
  (= m n))))))

;; get_ket_length
  (assert
  (forall ((m (matrix complex)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns complex1 (t2tb14 m)) 1)
  (=> (= (rows complex1 (t2tb14 m)) (power 2 n)) (= (ket_length m) n))))))

;; set_ket_length
  (assert
  (forall ((m (matrix complex)) (n Int))
  (=> (<= 0 n)
  (=> (is_a_ket m)
  (=> (= (ket_length m) n) (= (rows complex1 (t2tb14 m)) (power 2 n)))))))

;; scalar_ket
  (assert
  (forall ((x (matrix complex)) (a complex))
  (=> (is_a_ket x) (is_a_ket (infix_asdtdt a x)))))

;; scalar_ket_length
  (assert
  (forall ((m (matrix complex)) (a complex))
  (=> (is_a_ket m) (= (ket_length (infix_asdtdt a m)) (ket_length m)))))

;; scalar_ket_valid_index
  (assert
  (forall ((m (matrix complex)) (a complex) (i Int))
  (=> (valid_index complex1 (t2tb14 m) i 0)
  (=> (is_a_ket m) (valid_index complex1 (t2tb14 (infix_asdtdt a m)) i 0)))))

;; scalar_ket_l
  (assert
  (forall ((x (matrix complex)) (l Int) (a complex))
  (=> (is_a_ket_l x l) (is_a_ket_l (infix_asdtdt a x) l))))

;; scalar_ket_l_values
  (assert
  (forall ((a complex) (x (matrix complex)) (l Int))
  (=> (is_a_ket_l x l)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power_ 2 l)))
  (= (get1 (infix_asdtdt a x) i 0) (infix_asdt a (get1 x i 0))))))))

;; scalar_ket_l_value
  (assert
  (forall ((a complex) (x (matrix complex)) (i Int) (l Int))
  (=> (and (<= 0 i) (< i (power_ 2 l)))
  (=> (is_a_ket_l x l)
  (= (get1 (infix_asdtdt a x) i 0) (infix_asdt a (get1 x i 0)))))))

;; scalar_ket_value
  (assert
  (forall ((x (matrix complex)) (i Int) (a complex))
  (= (get1 (infix_asdtdt a x) i 0) (infix_asdt a (get1 x i 0)))))

;; scalar_ket_value_rev
  (assert
  (forall ((x (matrix complex)) (i Int) (a complex))
  (= (infix_asdt a (get1 x i 0)) (get1 (infix_asdtdt a x) i 0))))

;; add_ket_is_a_ket
  (assert
  (forall ((x (matrix complex)) (y (matrix complex)))
  (=> (is_a_ket x)
  (=> (is_a_ket y)
  (=> (= (ket_length x) (ket_length y)) (is_a_ket (add_mat x y)))))))

;; set_ket_length_gen
  (assert
  (forall ((m (matrix complex)) (n Int))
  (=> (<= 0 n)
  (=> (is_a_ket m)
  (=> (= (power 2 (ket_length m)) n) (= (rows complex1 (t2tb14 m)) n))))))

;; set_is_a_ket
  (assert
  (forall ((m (matrix complex)))
  (=> (= (columns complex1 (t2tb14 m)) 1)
  (=>
  (exists ((s Int))
  (and (<= 0 s) (= (rows complex1 (t2tb14 m)) (power 2 s)))) (is_a_ket m)))))

;; set_is_a_ket_l
  (assert
  (forall ((m (matrix complex)) (l Int))
  (=> (<= 0 l)
  (=> (= (columns complex1 (t2tb14 m)) 1)
  (=> (= (rows complex1 (t2tb14 m)) (power 2 l)) (is_a_ket_l m l))))))

;; set_is_a_ket_p
  (assert
  (forall ((m (matrix complex)) (l Int))
  (=> (<= 0 l)
  (=> (= (columns complex1 (t2tb14 m)) 1)
  (=> (= (rows complex1 (t2tb14 m)) (power 2 l)) (is_a_ket m))))))

;; get_is_a_ket
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m)
  (and (= (columns complex1 (t2tb14 m)) 1)
  (= (rows complex1 (t2tb14 m)) (power 2 (ket_length m)))))))

;; get_ket_columns
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m) (= (columns complex1 (t2tb14 m)) 1))))

;; get_ket_rows
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m) (= (rows complex1 (t2tb14 m)) (power 2 (ket_length m))))))

;; get_ket_rows_gen
  (assert
  (forall ((m (matrix complex)) (i Int))
  (=> (is_a_ket m)
  (=> (= i (power 2 (ket_length m))) (= (rows complex1 (t2tb14 m)) i)))))

;; get_ket_rows_length
  (assert
  (forall ((m (matrix complex)) (l Int))
  (=> (is_a_ket m)
  (=> (= (ket_length m) l) (= (rows complex1 (t2tb14 m)) (power 2 l))))))

;; ket_kronecker
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)))
  (=> (is_a_ket m)
  (=> (is_a_ket n)
  (and (is_a_ket (kronecker m n))
  (= (ket_length (kronecker m n)) (+ (ket_length m) (ket_length n))))))))

;; ket_kronecker_l
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int) (lqt Int))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n lqt) (is_a_ket_l (kronecker m n) (+ l lqt))))))

;; set_ket_kron_l
  (assert
  (forall ((m (matrix complex)) (n (matrix complex)) (l Int) (lqt Int)
  (lqtqt Int))
  (=> (is_a_ket_l m l)
  (=> (is_a_ket_l n lqt)
  (=> (= lqtqt (+ l lqt)) (is_a_ket_l (kronecker m n) lqtqt))))))

(declare-fun ket (Int Int) (matrix complex))

;; ket_def
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 0 n)
  (ite (and (<= 0 i) (< i (power 2 n)))
  (= (ket n i) (tb2t14
               (set3 complex1 (make complex1 (power 2 n) 1 (t2tb c_zero)) i 0
               (t2tb c_one))))
  (= (ket n i) (tb2t14 (make complex1 (power 2 n) 1 (t2tb c_zero))))))))

;; ket_spec
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 0 n)
  (and (is_a_ket (ket n i))
  (and (= (ket_length (ket n i)) n)
  (and (= (columns complex1 (t2tb14 (ket n i))) 1)
  (and (= (rows complex1 (t2tb14 (ket n i))) (power 2 n))
  (and
  (=> (and (<= 0 i) (< i (power 2 n)))
  (forall ((j Int))
  (=> (valid_index complex1 (t2tb14 (ket n i)) j 0)
  (= (get1 (ket n i) j 0) (indic int (t2tb3 j) (t2tb3 i))))))
  (and
  (forall ((j Int))
  (=> (valid_index complex1 (t2tb14 (ket n i)) j 0)
  (=> (not (= i j)) (= (get1 (ket n i) j 0) c_zero))))
  (=> (and (<= 0 i) (< i (power 2 n))) (= (get1 (ket n i) i 0) c_one)))))))))))

;; ket_l
  (assert
  (forall ((n Int) (m Int) (i Int))
  (=> (<= 0 n) (=> (= n m) (is_a_ket_l (ket n i) m)))))

;; ket_ket_length
  (assert
  (forall ((n Int) (m Int) (i Int))
  (=> (<= 0 n) (=> (= n m) (= (ket_length (ket n i)) m)))))

;; ket_length_explicit
  (assert
  (forall ((n Int) (i Int)) (=> (<= 0 n) (= (ket_length (ket n i)) n))))

;; ket_eq
  (assert
  (forall ((n1 Int) (n2 Int) (i1 Int) (i2 Int))
  (=> (<= 0 n1) (=> (= n1 n2) (=> (= i1 i2) (= (ket n1 i1) (ket n2 i2)))))))

;; ket_rows
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (rows complex1 (t2tb14 (ket n i))) (power 2 n))))))

;; ket_columns
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 0 n) (= (columns complex1 (t2tb14 (ket n i))) 1))))

;; ket_value
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (get1 (ket n i) j 0) (ite (= i j) c_one c_zero)))))))

;; g_ket_value
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (get1 (ket n i) j 0) (ite (= i j) c_one c_zero)))))))

(declare-fun conjugate (complex) complex)

;; conjugate_def
  (assert
  (forall ((i complex))
  (= (conjugate i) (infix_mndt (t_real_part i) (infix_asdt im (t_im_part i))))))

;; real_part_conjugate
  (assert
  (forall ((i complex)) (= (t_real_part (conjugate i)) (t_real_part i))))

;; im_part_conjugate
  (assert
  (forall ((i complex))
  (= (t_im_part (conjugate i)) (prefix_mndt (t_im_part i)))))

;; invol_conjugate
  (assert (forall ((i complex)) (= (conjugate (conjugate i)) i)))

;; add_conjugate
  (assert
  (forall ((i complex) (j complex))
  (= (conjugate (infix_pldt i j)) (infix_pldt (conjugate i) (conjugate j)))))

;; add_own_conjugate
  (assert
  (forall ((i complex))
  (= (infix_pldt i (conjugate i)) (infix_asdt (infix_pldt c_one c_one)
                                  (t_real_part i)))))

;; itself_times_conjugate
  (assert
  (forall ((i complex))
  (and (real_ (infix_asdt i (conjugate i)))
  (= (infix_asdt i (conjugate i)) (infix_pldt
                                  (infix_asdt (t_real_part i)
                                  (t_real_part i))
                                  (infix_asdt (t_im_part i) (t_im_part i)))))))

;; conjugate_to_modulus
  (assert
  (forall ((i complex))
  (= (modulus i) (square_rt (infix_asdt i (conjugate i))))))

;; conjugate_times_itself_pos
  (assert
  (forall ((i complex)) (infix_lseqdt c_zero (infix_asdt i (conjugate i)))))

(declare-fun fc244 (ty uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni)) (sort (infix_mngt a complex1) (fc244 a x)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (x uni))
  (= (tb2t (infix_at complex1 a (fc244 a f) x)) (conjugate
                                                (tb2t
                                                (infix_at complex1 a f x)))))))

;; sum_conjugate
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (= (conjugate (sum a s f)) (sum a s (fc244 a f))))))

;; conjugate_module_one
  (assert
  (forall ((i complex)) (=> (= (modulus i) c_one) (= (conjugate i) (inv i)))))

;; conjugate_module_one_rev
  (assert
  (forall ((i complex))
  (=> (not (= i c_zero))
  (=> (= (conjugate i) (inv i)) (= (modulus i) c_one)))))

;; conjugate_real
  (assert (forall ((i complex)) (=> (real_ i) (= (conjugate i) i))))

;; conjugate_real_gen
  (assert (forall ((i complex)) (=> (real_ i) (= (conjugate i) i))))

;; conjugate_one
  (assert (forall ((x complex)) (=> (= x c_one) (= (conjugate x) c_one))))

;; conjugate_c_zero
  (assert (forall ((x complex)) (=> (= x c_zero) (= (conjugate x) c_zero))))

;; conjugate_indic
  (assert
  (forall ((a ty))
  (forall ((i uni) (j uni)) (= (conjugate (indic a i j)) (indic a i j)))))

;; conjugate_indic_rev
  (assert
  (forall ((a ty))
  (forall ((i uni) (j uni)) (= (indic a i j) (conjugate (indic a i j))))))

;; conjugate_indic_gen_int
  (assert
  (forall ((i Int) (j Int))
  (= (conjugate (indic int (t2tb3 i) (t2tb3 j))) (indic int (t2tb3 i)
                                                 (t2tb3 j)))))

;; conjugate_pure_im
  (assert
  (forall ((i complex)) (=> (pure_im_ i) (= (conjugate i) (prefix_mndt i)))))

;; conjugate_im
  (assert (= (conjugate im) (prefix_mndt im)))

;; conjugate_value
  (assert
  (forall ((c complex) (a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (= c (infix_pldt a (infix_asdt im b)))
  (= (conjugate c) (infix_mndt a (infix_asdt im b))))))))

;; conjugate_minus_value
  (assert
  (forall ((c complex) (a complex) (b complex))
  (=> (real_ a)
  (=> (real_ b)
  (=> (= c (infix_mndt a (infix_asdt im b)))
  (= (conjugate c) (infix_pldt a (infix_asdt im b))))))))

;; prod_conjugate
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt a (conjugate b)) (infix_pldt
                                  (infix_pldt
                                  (infix_asdt (t_real_part a)
                                  (t_real_part b))
                                  (infix_asdt (t_im_part a) (t_im_part b)))
                                  (infix_asdt im
                                  (infix_mndt
                                  (infix_asdt (t_real_part b) (t_im_part a))
                                  (infix_asdt (t_im_part b) (t_real_part a))))))))

;; mult_conjugate
  (assert
  (forall ((a complex) (b complex))
  (= (conjugate (infix_asdt a b)) (infix_asdt (conjugate a) (conjugate b)))))

;; conjugate_prod
  (assert
  (forall ((a complex) (b complex))
  (= (infix_asdt (conjugate a) b) (infix_pldt
                                  (infix_pldt
                                  (infix_asdt (t_real_part a)
                                  (t_real_part b))
                                  (infix_asdt (t_im_part a) (t_im_part b)))
                                  (infix_asdt im
                                  (infix_mndt
                                  (infix_asdt (t_real_part a) (t_im_part b))
                                  (infix_asdt (t_real_part b) (t_im_part a))))))))

;; conj_conj_prod
  (assert
  (forall ((a complex) (b complex))
  (= (conjugate (infix_asdt (conjugate a) b)) (infix_asdt a (conjugate b)))))

;; conj_prod_conj
  (assert
  (forall ((a complex) (b complex))
  (= (conjugate (infix_asdt a (conjugate b))) (infix_asdt (conjugate a) b))))

;; itself_prod_conjugate_modulus_one
  (assert
  (forall ((a complex))
  (=> (= (modulus a) c_one) (= (infix_asdt a (conjugate a)) c_one))))

;; conjugate_prod_itself_modulus_one
  (assert
  (forall ((a complex))
  (=> (= (modulus a) c_one) (= (infix_asdt a (conjugate a)) c_one))))

;; modulus_opposite
  (assert
  (forall ((a complex))
  (=> (real_ a)
  (=> (infix_lseqdt c_zero a) (= (modulus a) (modulus (prefix_mndt a)))))))

;; modulus_conjugate
  (assert (forall ((a complex)) (= (modulus a) (modulus (conjugate a)))))

;; modulus_pos
  (assert
  (forall ((a complex))
  (=> (real_ a) (=> (infix_lseqdt c_zero a) (= (modulus a) a)))))

;; modulus_neg
  (assert
  (forall ((a complex))
  (=> (real_ a) (=> (infix_lseqdt a c_zero) (= (modulus a) (prefix_mndt a))))))

;; norm_ket_basis
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (= (ket_norm_l (ket n i) n) c_one)))))

;; get_ket_
  (assert
  (forall ((m (matrix complex)) (i Int) (n Int))
  (=> (= m (ket n i))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (and (is_a_ket m)
  (and (= (ket_length m) n)
  (and (= (columns complex1 (t2tb14 m)) 1)
  (and (= (rows complex1 (t2tb14 m)) (power 2 n))
  (and
  (forall ((j Int))
  (=> (valid_index complex1 (t2tb14 m) j 0)
  (= (get1 m j 0) (indic int (t2tb3 j) (t2tb3 i)))))
  (and
  (forall ((j Int))
  (=> (valid_index complex1 (t2tb14 m) j 0)
  (=> (not (= i j)) (= (get1 m j 0) c_zero)))) (= (get1 m i 0) c_one))))))))))))

;; get_ket_value
  (assert
  (forall ((i Int) (n Int) (j Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (get1 (ket n i) j 0) (indic int (t2tb3 j) (t2tb3 i))))))))

;; get_ket_values
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (forall ((j Int))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (get1 (ket n i) j 0) (indic int (t2tb3 j) (t2tb3 i)))))))))

;; get_ket_value_z
  (assert
  (forall ((i Int) (n Int) (j Int) (z Int))
  (=> (= z 0)
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (get1 (ket n i) j z) (indic int (t2tb3 j) (t2tb3 i)))))))))

;; get__ket_value
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (get1 (ket n i) j 0) (indic int (t2tb3 j) (t2tb3 i))))))))

;; set_ket
  (assert
  (forall ((m (matrix complex)) (i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (= (columns complex1 (t2tb14 m)) 1)
  (=> (= (rows complex1 (t2tb14 m)) (power 2 n))
  (=>
  (forall ((j Int))
  (=> (valid_index complex1 (t2tb14 m) j 0)
  (= (get1 m j 0) (indic int (t2tb3 j) (t2tb3 i))))) (= m (ket n i)))))))))

;; kronecker_kets
  (assert
  (forall ((i1 Int) (i2 Int) (n1 Int) (n2 Int))
  (=> (<= 0 n1)
  (=> (<= 0 n2)
  (=> (and (<= 0 i1) (< i1 (power 2 n1)))
  (=> (and (<= 0 i2) (< i2 (power 2 n2)))
  (= (kronecker (ket n1 i1) (ket n2 i2)) (ket (+ n1 n2)
                                         (+ (* i1 (power 2 n2)) i2)))))))))

;; kronecker_ket_l
  (assert
  (forall ((x (matrix complex)) (y (matrix complex)) (n1 Int) (n2 Int))
  (=> (<= 0 n1)
  (=> (<= 0 n2)
  (=> (is_a_ket_l x n1)
  (=> (is_a_ket_l y n2) (is_a_ket_l (kronecker x y) (+ n1 n2))))))))

;; kronecker_ket_l_sum
  (assert
  (forall ((x (matrix complex)) (y (matrix complex)) (n1 Int) (n2 Int)
  (n3 Int))
  (=> (<= 0 n1)
  (=> (<= 0 n2)
  (=> (is_a_ket_l x n1)
  (=> (is_a_ket_l y n2)
  (=> (= n3 (+ n1 n2)) (is_a_ket_l (kronecker x y) n3))))))))

;; kronecker_kets_bin_to_int
  (assert
  (forall ((f1 (Array Int Int)) (f2 (Array Int Int)) (n1 Int) (n2 Int))
  (=> (binary f1)
  (=> (binary f2)
  (=> (<= 0 n1)
  (=> (<= 0 n2)
  (= (kronecker (ket n1 (bin_to_int f1 n1)) (ket n2 (bin_to_int f2 n2))) 
  (ket (+ n1 n2) (+ (* (bin_to_int f1 n1) (power 2 n2)) (bin_to_int f2 n2))))))))))

(declare-fun ind_basis_mat (Int Int Int Int) (matrix complex))

(declare-fun result30 (Int Int) (Array Int (Array Int complex)))

;; result_def
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (result30 i j))
     (t2tb3 k)) (t2tb3 l))) (indic_2 int int (t2tb3 k) (t2tb3 i) (t2tb3 l)
                            (t2tb3 j)))))

;; ind_basis_mat_def
  (assert
  (forall ((i Int) (j Int) (r Int) (c Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (ind_basis_mat i j r c) (tb2t14
                             (make_f complex1 r c (t2tb11 (result30 i j)))))))))

;; ind_basis_mat_spec
  (assert
  (forall ((i Int) (j Int) (r Int) (c Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (and (= (rows complex1 (t2tb14 (ind_basis_mat i j r c))) r)
  (and (= (columns complex1 (t2tb14 (ind_basis_mat i j r c))) c)
  (and
  (forall ((k Int) (l Int))
  (=> (valid_index complex1 (t2tb14 (ind_basis_mat i j r c)) k l)
  (= (get1 (ind_basis_mat i j r c) k l) (indic_2 int int (t2tb3 k) (t2tb3 i)
                                        (t2tb3 l) (t2tb3 j)))))
  (forall ((o (tuple2 Int Int)))
  (=> (mem (tuple21 int int) (t2tb9 o)
  (t2tb10 (mat_indices complex1 (t2tb14 (ind_basis_mat i j r c)))))
  (=
  (= (get1 (ind_basis_mat i j r c) (tb2t3 (fir int int (t2tb9 o)))
     (tb2t3 (sec int int (t2tb9 o)))) c_one)
  (and (= (tb2t3 (fir int int (t2tb9 o))) i)
  (= (tb2t3 (sec int int (t2tb9 o))) j))))))))))))

;; ind_basis_mat_values
  (assert
  (forall ((i Int) (j Int) (r Int) (c Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (forall ((i1 Int) (j1 Int))
  (=> (and (<= 0 i1) (< i1 r))
  (=> (and (<= 0 j1) (< j1 c))
  (= (get1 (ind_basis_mat i j r c) i1 j1) (indic_2 int int (t2tb3 i)
                                          (t2tb3 i1) (t2tb3 j) (t2tb3 j1))))))))))

;; unic_ind_basis_mat
  (assert
  (forall ((i1 Int) (j1 Int) (i2 Int) (j2 Int) (r Int) (c Int))
  (=> (and (<= 0 i1) (< i1 r))
  (=> (and (<= 0 j1) (< j1 c))
  (=> (and (<= 0 i2) (< i2 r))
  (=> (and (<= 0 j2) (< j2 c))
  (=> (= (ind_basis_mat i1 j1 r c) (ind_basis_mat i2 j2 r c))
  (= (tb2t9 (Tuple2 int int (t2tb3 i1) (t2tb3 j1))) (tb2t9
                                                    (Tuple2 int int
                                                    (t2tb3 i2) (t2tb3 j2)))))))))))

(declare-fun basis_mat (Int Int) (set (matrix complex)))

(declare-fun result31 (Int Int) (Array (tuple2 Int Int) (matrix complex)))

(declare-fun t2tb30 ((Array (tuple2 Int Int) (matrix complex))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (tuple2 Int Int) (matrix complex)))) (sort
  (infix_mngt (tuple21 int int) (matrix1 complex1)) (t2tb30 x))))

(declare-fun tb2t30 (uni) (Array (tuple2 Int Int) (matrix complex)))

;; BridgeL
  (assert
  (forall ((i (Array (tuple2 Int Int) (matrix complex))))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt (tuple21 int int) (matrix1 complex1)) j)
     (= (t2tb30 (tb2t30 j)) j)) :pattern ((t2tb30 (tb2t30 j))) )))

;; result_def
  (assert
  (forall ((r Int) (c Int) (o (tuple2 Int Int)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (tuple21 int int) (t2tb30 (result31 r c))
     (t2tb9 o))) (let ((j (tb2t3 (Tuple2_proj_2 int int (t2tb9 o)))))
                 (let ((i (tb2t3 (Tuple2_proj_1 int int (t2tb9 o)))))
                 (ite (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
                 (ind_basis_mat i j r c)
                 (tb2t14 (make complex1 r c (t2tb c_zero)))))))))

;; basis_mat_def
  (assert
  (forall ((r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (= (basis_mat r c) (tb2t22
                     (map1 (matrix1 complex1) (tuple21 int int)
                     (t2tb30 (result31 r c))
                     (cartesian_product int int (t2tb4 (to_fset 0 r))
                     (t2tb4 (to_fset 0 c))))))))))

(declare-fun fc245 (Int Int) (Array (tuple2 Int Int) (matrix complex)))

(declare-fun fc246 ((matrix complex)) (Array (tuple2 Int Int) Bool))

;; fc_def
  (assert
  (forall ((r Int) (c Int) (o (tuple2 Int Int)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (tuple21 int int) (t2tb30 (fc245 r c))
     (t2tb9 o))) (ind_basis_mat (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o))) r c))))

(declare-fun t2tb31 ((Array (tuple2 Int Int) Bool)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (tuple2 Int Int) Bool))) (sort
  (infix_mngt (tuple21 int int) bool) (t2tb31 x))))

(declare-fun tb2t31 (uni) (Array (tuple2 Int Int) Bool))

;; BridgeL
  (assert
  (forall ((i (Array (tuple2 Int Int) Bool)))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt (tuple21 int int) bool) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (x (tuple2 Int Int)))
  (=
  (= (tb2t2 (infix_at bool (tuple21 int int) (t2tb31 (fc246 m)) (t2tb9 x))) true)
  (= (get1 m (tb2t3 (fir int int (t2tb9 x))) (tb2t3 (sec int int (t2tb9 x)))) 
  c_one))))

;; basis_mat_spec
  (assert
  (forall ((r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (and
  (forall ((m (matrix complex)))
  (= (mem (matrix1 complex1) (t2tb14 m) (t2tb22 (basis_mat r c)))
  (exists ((i Int) (j Int))
  (and (and (<= 0 i) (< i r))
  (and (and (<= 0 j) (< j c)) (= m (ind_basis_mat i j r c)))))))
  (and
  (= (basis_mat r c) (tb2t22
                     (map1 (matrix1 complex1) (tuple21 int int)
                     (t2tb30 (fc245 r c))
                     (cartesian_product int int (t2tb4 (to_fset 0 r))
                     (t2tb4 (to_fset 0 c))))))
  (and (constant_size (matrix1 complex1) (t2tb22 (basis_mat r c))
  (t2tb16 identity1))
  (and
  (= (s_columns (matrix1 complex1) (t2tb22 (basis_mat r c))
     (t2tb16 identity1)) c)
  (and
  (= (s_rows (matrix1 complex1) (t2tb22 (basis_mat r c)) (t2tb16 identity1)) r)
  (forall ((m (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 m) (t2tb22 (basis_mat r c)))
  (= (cardinal (tuple21 int int)
     (my_filter (tuple21 int int) (t2tb10 (mat_indices complex1 (t2tb14 m)))
     (t2tb31 (fc246 m)))) 1))))))))))))

(declare-fun basis_mat_indexes ((matrix complex)) (tuple2 Int Int))

(declare-fun result32 ((matrix complex)) (Array (tuple2 Int Int) Bool))

;; result_def
  (assert
  (forall ((m (matrix complex)) (x (tuple2 Int Int)))
  (=
  (= (tb2t2
     (infix_at bool (tuple21 int int) (t2tb31 (result32 m)) (t2tb9 x))) true)
  (and (mem (tuple21 int int) (t2tb9 x)
  (t2tb10 (mat_indices complex1 (t2tb14 m)))) (infix_eqeq (matrix1 complex1)
  (t2tb14 m)
  (t2tb14
  (ind_basis_mat (tb2t3 (fir int int (t2tb9 x)))
  (tb2t3 (sec int int (t2tb9 x))) (rows complex1 (t2tb14 m))
  (columns complex1 (t2tb14 m)))))))))

;; basis_mat_indexes_def
  (assert
  (forall ((m (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 m)
  (t2tb22
  (basis_mat (rows complex1 (t2tb14 m)) (columns complex1 (t2tb14 m)))))
  (= (basis_mat_indexes m) (tb2t9
                           (element (tuple21 int int)
                           (my_filter (tuple21 int int)
                           (t2tb10 (mat_indices complex1 (t2tb14 m)))
                           (t2tb31 (result32 m)))))))))

(declare-fun fc247 ((matrix complex)) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc247 m)) (t2tb3 i))
     (t2tb3 j))) (indic_2 int int (fir int int (t2tb9 (basis_mat_indexes m)))
                 (t2tb3 i) (sec int int (t2tb9 (basis_mat_indexes m)))
                 (t2tb3 j)))))

;; basis_mat_indexes_spec
  (assert
  (forall ((m (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 m)
  (t2tb22
  (basis_mat (rows complex1 (t2tb14 m)) (columns complex1 (t2tb14 m)))))
  (and
  (= m (ind_basis_mat (tb2t3 (fir int int (t2tb9 (basis_mat_indexes m))))
       (tb2t3 (sec int int (t2tb9 (basis_mat_indexes m))))
       (rows complex1 (t2tb14 m)) (columns complex1 (t2tb14 m))))
  (and
  (= m (tb2t14
       (make_f complex1 (rows complex1 (t2tb14 m))
       (columns complex1 (t2tb14 m)) (t2tb11 (fc247 m)))))
  (and
  (= (get1 m (tb2t3 (fir int int (t2tb9 (basis_mat_indexes m))))
     (tb2t3 (sec int int (t2tb9 (basis_mat_indexes m))))) c_one)
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (=> (= i (tb2t3 (fir int int (t2tb9 (basis_mat_indexes m)))))
  (=> (not (= j (tb2t3 (sec int int (t2tb9 (basis_mat_indexes m))))))
  (= (get1 m i j) c_zero))))) (valid_index complex1 (t2tb14 m)
  (tb2t3 (fir int int (t2tb9 (basis_mat_indexes m))))
  (tb2t3 (sec int int (t2tb9 (basis_mat_indexes m))))))))))))

(declare-fun fc248 ((matrix complex)) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc248 m)) (t2tb3 i))
     (t2tb3 j))) (indic_2 int int (fir int int (t2tb9 (basis_mat_indexes m)))
                 (t2tb3 i) (sec int int (t2tb9 (basis_mat_indexes m)))
                 (t2tb3 j)))))

;; get_basis_mat_indexes
  (assert
  (forall ((m (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 m)
  (t2tb22
  (basis_mat (rows complex1 (t2tb14 m)) (columns complex1 (t2tb14 m)))))
  (and
  (= m (ind_basis_mat (tb2t3 (fir int int (t2tb9 (basis_mat_indexes m))))
       (tb2t3 (sec int int (t2tb9 (basis_mat_indexes m))))
       (rows complex1 (t2tb14 m)) (columns complex1 (t2tb14 m))))
  (and
  (= m (tb2t14
       (make_f complex1 (rows complex1 (t2tb14 m))
       (columns complex1 (t2tb14 m)) (t2tb11 (fc248 m)))))
  (and
  (= (get1 m (tb2t3 (fir int int (t2tb9 (basis_mat_indexes m))))
     (tb2t3 (sec int int (t2tb9 (basis_mat_indexes m))))) c_one)
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (=>
  (not
  (= (basis_mat_indexes m) (tb2t9 (Tuple2 int int (t2tb3 i) (t2tb3 j)))))
  (= (get1 m i j) c_zero))))))))))

(declare-fun fc249 (Int Int) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((i Int) (j Int) (i1 Int) (j1 Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc249 i j)) (t2tb3 i1))
     (t2tb3 j1))) (indic_2 int int (t2tb3 i) (t2tb3 i1) (t2tb3 j) (t2tb3 j1)))))

;; set_basis_mat_indexes
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (=> (mem (matrix1 complex1) (t2tb14 m)
  (t2tb22
  (basis_mat (rows complex1 (t2tb14 m)) (columns complex1 (t2tb14 m)))))
  (=> (= (get1 m i j) c_one)
  (and (= (basis_mat_indexes m) (tb2t9 (Tuple2 int int (t2tb3 i) (t2tb3 j))))
  (and
  (= m (ind_basis_mat i j (rows complex1 (t2tb14 m))
       (columns complex1 (t2tb14 m))))
  (and
  (= m (tb2t14
       (make_f complex1 (rows complex1 (t2tb14 m))
       (columns complex1 (t2tb14 m)) (t2tb11 (fc249 i j)))))
  (forall ((i1 Int) (j1 Int))
  (=> (valid_index complex1 (t2tb14 m) i1 j1)
  (=> (= i1 i) (=> (not (= j1 j)) (= (get1 m i1 j1) c_zero)))))))))))))

(declare-fun basis_projection ((matrix complex) Int Int) (matrix complex))

;; basis_projection_def
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 m))))
  (= (basis_projection m i j) (infix_asdtdt (get1 m i j)
                              (ind_basis_mat i j (rows complex1 (t2tb14 m))
                              (columns complex1 (t2tb14 m)))))))))

(declare-fun fc250 ((matrix complex) Int
  Int) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int) (k Int) (l Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc250 m i j))
     (t2tb3 k)) (t2tb3 l))) (infix_asdt (get1 m i j)
                            (indic_2 int int (t2tb3 k) (t2tb3 i) (t2tb3 l)
                            (t2tb3 j))))))

;; basis_projection_spec
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows complex1 (t2tb14 m))))
  (=> (and (<= 0 j) (< j (columns complex1 (t2tb14 m))))
  (and
  (= (rows complex1 (t2tb14 (basis_projection m i j))) (rows complex1
                                                       (t2tb14 m)))
  (and
  (= (columns complex1 (t2tb14 (basis_projection m i j))) (columns complex1
                                                          (t2tb14 m)))
  (and
  (= (basis_projection m i j) (tb2t14
                              (make_f complex1 (rows complex1 (t2tb14 m))
                              (columns complex1 (t2tb14 m))
                              (t2tb11 (fc250 m i j)))))
  (and (= (get1 (basis_projection m i j) i j) (get1 m i j))
  (and
  (forall ((iqt Int) (jqt Int))
  (=> (valid_index complex1 (t2tb14 (basis_projection m i j)) iqt jqt)
  (=> (not (= iqt i)) (= (get1 (basis_projection m i j) iqt jqt) c_zero))))
  (forall ((iqt Int) (jqt Int))
  (=> (valid_index complex1 (t2tb14 (basis_projection m i j)) iqt jqt)
  (=> (not (= jqt j)) (= (get1 (basis_projection m i j) iqt jqt) c_zero)))))))))))))

;; basis_projection_null
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int) (k Int) (l Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (=> (valid_index complex1 (t2tb14 m) k l)
  (=> (=> (= i k) (not (= j l)))
  (= (get1 (basis_projection m i j) k l) c_zero))))))

(declare-fun basis_projections ((matrix complex)) (set (matrix complex)))

(declare-fun result33 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; result_def
  (assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (tuple21 int int) (t2tb30 (result33 m))
     (t2tb9 o))) (ite (valid_index complex1 (t2tb14 m)
                 (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o))))
                 (basis_projection m (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o)))) m))))

;; basis_projections_def
  (assert
  (forall ((m (matrix complex)))
  (= (basis_projections m) (tb2t22
                           (map1 (matrix1 complex1) (tuple21 int int)
                           (t2tb30 (result33 m))
                           (t2tb10 (to_indexes complex1 (t2tb14 m))))))))

(declare-fun couple_closure (ty ty ty) uni)

;; couple_closure_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty)) (sort
  (infix_mngt (infix_mngt a (infix_mngt b im1))
  (infix_mngt (tuple21 a b) im1)) (couple_closure im1 b a))))

(declare-fun basis_projection_closure () (Array (matrix complex) (Array Int (Array Int (matrix complex)))))

;; couple_closure_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((y uni) (y1 uni))
  (= (infix_at im1 (tuple21 a b)
     (infix_at (infix_mngt (tuple21 a b) im1)
     (infix_mngt a (infix_mngt b im1)) (couple_closure im1 b a) y) y1) 
  (couple im1 b a y y1)))))

(declare-fun t2tb32 ((Array Int (Array Int (matrix complex)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array Int (Array Int (matrix complex))))) (sort
  (infix_mngt int (infix_mngt int (matrix1 complex1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (Array Int (Array Int (matrix complex))))

;; BridgeL
  (assert
  (forall ((i (Array Int (Array Int (matrix complex)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int (infix_mngt int (matrix1 complex1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

(declare-fun t2tb33 ((Array (matrix complex) (Array Int (Array Int (matrix complex))))) uni)

;; t2tb_sort
  (assert
  (forall
  ((x (Array (matrix complex) (Array Int (Array Int (matrix complex))))))
  (sort
  (infix_mngt (matrix1 complex1)
  (infix_mngt int (infix_mngt int (matrix1 complex1)))) (t2tb33 x))))

(declare-fun tb2t33 (uni) (Array (matrix complex) (Array Int (Array Int (matrix complex)))))

;; BridgeL
  (assert
  (forall
  ((i (Array (matrix complex) (Array Int (Array Int (matrix complex))))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (infix_mngt (matrix1 complex1)
     (infix_mngt int (infix_mngt int (matrix1 complex1)))) j)
     (= (t2tb33 (tb2t33 j)) j)) :pattern ((t2tb33 (tb2t33 j))) )))

;; basis_projection_closure_def
  (assert
  (forall ((y (matrix complex)) (y1 Int) (y2 Int))
  (= (tb2t14
     (infix_at (matrix1 complex1) int
     (infix_at (infix_mngt int (matrix1 complex1)) int
     (infix_at (infix_mngt int (infix_mngt int (matrix1 complex1)))
     (matrix1 complex1) (t2tb33 basis_projection_closure) (t2tb14 y))
     (t2tb3 y1)) (t2tb3 y2))) (basis_projection y y1 y2))))

(declare-fun t2tb34 ((Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int
  Int) (matrix complex)))) uni)

;; t2tb_sort
  (assert
  (forall
  ((x (Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int
  Int) (matrix complex))))) (sort
  (infix_mngt (infix_mngt int (infix_mngt int (matrix1 complex1)))
  (infix_mngt (tuple21 int int) (matrix1 complex1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int
  Int) (matrix complex))))

;; BridgeL
  (assert
  (forall
  ((i (Array (Array Int (Array Int (matrix complex))) (Array (tuple2 Int
  Int) (matrix complex)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (infix_mngt (infix_mngt int (infix_mngt int (matrix1 complex1)))
     (infix_mngt (tuple21 int int) (matrix1 complex1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; basis_projections_spec
  (assert
  (forall ((m (matrix complex)))
  (and
  (= (basis_projections m) (tb2t22
                           (map1 (matrix1 complex1) (tuple21 int int)
                           (infix_at
                           (infix_mngt (tuple21 int int) (matrix1 complex1))
                           (infix_mngt int
                           (infix_mngt int (matrix1 complex1)))
                           (couple_closure (matrix1 complex1) int int)
                           (infix_at
                           (infix_mngt int
                           (infix_mngt int (matrix1 complex1)))
                           (matrix1 complex1)
                           (t2tb33 basis_projection_closure) (t2tb14 m)))
                           (t2tb10 (to_indexes complex1 (t2tb14 m))))))
  (and
  (forall ((e (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 e) (t2tb22 (basis_projections m)))
  (= (rows complex1 (t2tb14 e)) (rows complex1 (t2tb14 m)))))
  (and
  (forall ((e (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 e) (t2tb22 (basis_projections m)))
  (= (columns complex1 (t2tb14 e)) (columns complex1 (t2tb14 m)))))
  (constant_size (matrix1 complex1) (t2tb22 (basis_projections m))
  (t2tb16 identity1)))))))

(declare-fun fc251 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (tuple21 int int) (t2tb30 (fc251 m))
     (t2tb9 o))) (ite (valid_index complex1 (t2tb14 m)
                 (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o))))
                 (basis_projection m (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o)))) m))))

;; rewrite_basis_projections
  (assert
  (forall ((m (matrix complex)))
  (= (basis_projections m) (tb2t22
                           (map1 (matrix1 complex1) (tuple21 int int)
                           (t2tb30 (fc251 m))
                           (t2tb10 (to_indexes complex1 (t2tb14 m))))))))

(declare-fun indexes_decomp ((matrix complex)) (matrix complex))

(declare-fun result34 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; result_def
  (assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (tuple21 int int) (t2tb30 (result34 m))
     (t2tb9 o))) (ite (mem (tuple21 int int) (t2tb9 o)
                 (t2tb10 (to_indexes complex1 (t2tb14 m))))
                 (basis_projection m (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o)))) m))))

;; indexes_decomp_def
  (assert
  (forall ((m (matrix complex)))
  (= (indexes_decomp m) (mat_sum (tuple21 int int)
                        (t2tb10 (to_indexes complex1 (t2tb14 m)))
                        (t2tb30 (result34 m))))))

;; indexes_decomp_spec
  (assert
  (forall ((m (matrix complex)))
  (and
  (= (rows complex1 (t2tb14 (indexes_decomp m))) (rows complex1 (t2tb14 m)))
  (= (columns complex1 (t2tb14 (indexes_decomp m))) (columns complex1
                                                    (t2tb14 m))))))

(declare-fun fc252 ((matrix complex)) (Array (tuple2 Int
  Int) (matrix complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (o (tuple2 Int Int)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (tuple21 int int) (t2tb30 (fc252 m))
     (t2tb9 o))) (basis_projection m (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o)))))))

;; rewrite_indexes_decomp
  (assert
  (forall ((m (matrix complex)))
  (= (indexes_decomp m) (mat_sum (tuple21 int int)
                        (t2tb10 (to_indexes complex1 (t2tb14 m)))
                        (t2tb30 (fc252 m))))))

(declare-fun fc253 ((matrix complex) Int Int) (Array (tuple2 Int
  Int) complex))

(declare-fun t2tb35 ((Array (tuple2 Int Int) complex)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (tuple2 Int Int) complex))) (sort
  (infix_mngt (tuple21 int int) complex1) (t2tb35 x))))

(declare-fun tb2t35 (uni) (Array (tuple2 Int Int) complex))

;; BridgeL
  (assert
  (forall ((i (Array (tuple2 Int Int) complex)))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt (tuple21 int int) complex1) j)
     (= (t2tb35 (tb2t35 j)) j)) :pattern ((t2tb35 (tb2t35 j))) )))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int) (o (tuple2 Int Int)))
  (= (tb2t
     (infix_at complex1 (tuple21 int int) (t2tb35 (fc253 m i j)) (t2tb9 o))) 
  (get1
  (basis_projection m (tb2t3 (fir int int (t2tb9 o)))
  (tb2t3 (sec int int (t2tb9 o)))) i j))))

;; indexes_decomp_pre
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (= (get1 m i j) (sum (tuple21 int int)
                  (t2tb10 (to_indexes complex1 (t2tb14 m)))
                  (t2tb35 (fc253 m i j)))))))

(declare-fun fc254 ((matrix complex) Int Int) (Array (tuple2 Int
  Int) complex))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int) (o (tuple2 Int Int)))
  (= (tb2t
     (infix_at complex1 (tuple21 int int) (t2tb35 (fc254 m i j)) (t2tb9 o))) 
  (get1
  (basis_projection m (tb2t3 (fir int int (t2tb9 o)))
  (tb2t3 (sec int int (t2tb9 o)))) i j))))

;; indexes_decomp_pre_gen
  (assert
  (forall ((m (matrix complex)))
  (forall ((i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (= (get1 m i j) (sum (tuple21 int int)
                  (t2tb10 (to_indexes complex1 (t2tb14 m)))
                  (t2tb35 (fc254 m i j))))))))

;; mat_to_indexes_decomp
  (assert (forall ((m (matrix complex))) (= m (indexes_decomp m))))

(declare-fun basis_decomp ((matrix complex)) (matrix complex))

;; basis_decomp_def
  (assert
  (forall ((m (matrix complex)))
  (= (basis_decomp m) (mat_sum (matrix1 complex1)
                      (t2tb22 (basis_projections m)) (t2tb16 identity1)))))

;; basis_decomp_spec
  (assert
  (forall ((m (matrix complex)))
  (and
  (= (rows complex1 (t2tb14 (basis_decomp m))) (rows complex1 (t2tb14 m)))
  (= (columns complex1 (t2tb14 (basis_decomp m))) (columns complex1
                                                  (t2tb14 m))))))

;; indexes_basis_decomp_equal_pre
  (assert
  (forall ((m (matrix complex)) (i Int) (j Int))
  (=> (valid_index complex1 (t2tb14 m) i j)
  (= (get1 (indexes_decomp m) i j) (get1 (basis_decomp m) i j)))))

;; indexes_basis_decomp_equal
  (assert
  (forall ((m (matrix complex))) (= (indexes_decomp m) (basis_decomp m))))

;; mat_to_basis_decomp
  (assert (forall ((m (matrix complex))) (= m (indexes_decomp m))))

(declare-fun fc255 (ty (matrix complex) uni uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex)) (x1 uni) (x2 uni)) (sort
  (infix_mngt a (matrix1 complex1)) (fc255 a x x1 x2)))))

(declare-fun fc256 (ty (matrix complex) uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex)) (x1 uni)) (sort
  (infix_mngt a (matrix1 complex1)) (fc256 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((m (matrix complex)) (s uni) (f uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc255 a m s f) a1)) (ite (mem a
                                                                 a1 s)
                                                                 (mat_mult m
                                                                 (tb2t14
                                                                 (infix_at
                                                                 (matrix1
                                                                 complex1) a
                                                                 f a1))) m)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((m (matrix complex)) (f uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc256 a m f) a1)) (mat_mult m
                                                               (tb2t14
                                                               (infix_at
                                                               (matrix1
                                                               complex1) a f
                                                               a1)))))))

;; product_mat_sum_r_pre
  (assert
  (forall ((a ty))
  (forall ((m (matrix complex)) (sqt uni) (s uni) (f uni))
  (=> (constant_size a s f)
  (=> (= (columns complex1 (t2tb14 m)) (s_rows a s f))
  (=> (subset1 a sqt s)
  (=> (< 0 (cardinal a sqt))
  (and (= (mat_mult m (mat_sum a sqt f)) (mat_sum a sqt (fc255 a m s f)))
  (and (= (mat_mult m (mat_sum a sqt f)) (mat_sum a sqt (fc256 a m f)))
  (and (= (rows complex1 (t2tb14 (mat_sum a sqt f))) (s_rows a s f))
  (and (= (columns complex1 (t2tb14 (mat_sum a sqt f))) (s_columns a s f))
  (and
  (= (rows complex1 (t2tb14 (mat_mult m (mat_sum a sqt f)))) (rows complex1
                                                             (t2tb14 m)))
  (= (columns complex1 (t2tb14 (mat_mult m (mat_sum a sqt f)))) (s_columns a
                                                                s f))))))))))))))

(declare-fun fc257 (ty (matrix complex) uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex)) (x1 uni)) (sort
  (infix_mngt a (matrix1 complex1)) (fc257 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((m (matrix complex)) (f uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc257 a m f) a1)) (mat_mult m
                                                               (tb2t14
                                                               (infix_at
                                                               (matrix1
                                                               complex1) a f
                                                               a1)))))))

;; product_mat_sum_r
  (assert
  (forall ((a ty))
  (forall ((m (matrix complex)) (s uni) (f uni))
  (=> (constant_size a s f)
  (=> (= (columns complex1 (t2tb14 m)) (s_rows a s f))
  (=> (< 0 (cardinal a s))
  (= (mat_mult m (mat_sum a s f)) (mat_sum a s (fc257 a m f)))))))))

(declare-fun fc258 (ty (matrix complex) uni) uni)

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x (matrix complex)) (x1 uni)) (sort
  (infix_mngt a (matrix1 complex1)) (fc258 a x x1)))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((m (matrix complex)) (f uni) (a1 uni))
  (= (tb2t14 (infix_at (matrix1 complex1) a (fc258 a m f) a1)) (mat_mult m
                                                               (tb2t14
                                                               (infix_at
                                                               (matrix1
                                                               complex1) a f
                                                               a1)))))))

;; product_mat_sum_r_rev
  (assert
  (forall ((a ty))
  (forall ((m (matrix complex)) (s uni) (f uni))
  (=> (constant_size a s f)
  (=> (= (columns complex1 (t2tb14 m)) (s_rows a s f))
  (=> (< 0 (cardinal a s))
  (= (mat_sum a s (fc258 a m f)) (mat_mult m (mat_sum a s f)))))))))

;; p_injective_proj
  (assert
  (forall ((m (matrix complex))) (p_injective (matrix1 complex1)
  (tuple21 int int)
  (infix_at (infix_mngt (tuple21 int int) (matrix1 complex1))
  (infix_mngt int (infix_mngt int (matrix1 complex1)))
  (couple_closure (matrix1 complex1) int int)
  (infix_at (infix_mngt int (infix_mngt int (matrix1 complex1)))
  (matrix1 complex1) (t2tb33 basis_projection_closure) (t2tb14 m)))
  (nonn_mat_subset (tuple21 int int)
  (infix_at (infix_mngt (tuple21 int int) (matrix1 complex1))
  (infix_mngt int (infix_mngt int (matrix1 complex1)))
  (couple_closure (matrix1 complex1) int int)
  (infix_at (infix_mngt int (infix_mngt int (matrix1 complex1)))
  (matrix1 complex1) (t2tb33 basis_projection_closure) (t2tb14 m)))
  (t2tb10 (to_indexes complex1 (t2tb14 m)))))))

;; mat_decomp_equal_indexes
  (assert (forall ((m (matrix complex))) (= m (indexes_decomp m))))

(declare-fun ket_basis (Int) (set (matrix complex)))

;; ket_basis_def
  (assert
  (forall ((n Int))
  (=> (<= 0 n) (= (ket_basis n) (basis_mat (power 2 n) 1)))))

(declare-fun fc259 (Int) (Array (tuple2 Int Int) (matrix complex)))

;; fc_def
  (assert
  (forall ((n Int) (o (tuple2 Int Int)))
  (= (tb2t14
     (infix_at (matrix1 complex1) (tuple21 int int) (t2tb30 (fc259 n))
     (t2tb9 o))) (ind_basis_mat (tb2t3 (fir int int (t2tb9 o)))
                 (tb2t3 (sec int int (t2tb9 o))) (power 2 n) 1))))

;; ket_basis_spec
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (and
  (= (ket_basis n) (tb2t22
                   (map1 (matrix1 complex1) (tuple21 int int)
                   (t2tb30 (fc259 n))
                   (cartesian_product int int (t2tb4 (to_fset 0 (power 2 n)))
                   (t2tb4 (to_fset 0 1))))))
  (and (= (ket_basis n) (basis_mat (power 2 n) 1))
  (and
  (forall ((mat (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 mat) (t2tb22 (ket_basis n)))
  (= (rows complex1 (t2tb14 mat)) (power 2 n))))
  (and
  (forall ((mat (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 mat) (t2tb22 (ket_basis n)))
  (= (columns complex1 (t2tb14 mat)) 1)))
  (forall ((mat (matrix complex)))
  (=> (mem (matrix1 complex1) (t2tb14 mat) (t2tb22 (ket_basis n)))
  (and (= (rows complex1 (t2tb14 mat)) (power 2 n))
  (and (= (columns complex1 (t2tb14 mat)) 1)
  (exists ((i Int))
  (and (valid_index complex1 (t2tb14 mat) i 0)
  (= (basis_mat_indexes mat) (tb2t9 (Tuple2 int int (t2tb3 i) (t2tb3 0)))))))))))))))))

(declare-fun fc260 (Int) (Array Int (matrix complex)))

;; fc_def
  (assert
  (forall ((n Int) (i Int))
  (= (tb2t14 (infix_at (matrix1 complex1) int (t2tb18 (fc260 n)) (t2tb3 i))) 
  (ind_basis_mat i 0 (power 2 n) 1))))

;; unary_ket_basis
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (= (ket_basis n) (tb2t22
                   (map1 (matrix1 complex1) int (t2tb18 (fc260 n))
                   (t2tb4 (to_fset 0 (power 2 n)))))))))

;; to_ket_basis
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (mem (matrix1 complex1)
  (t2tb14 (ind_basis_mat i 0 (power 2 n) 1)) (t2tb22 (ket_basis n)))))))

(declare-fun ket_basis_index ((matrix complex) Int) Int)

;; ket_basis_index_def
  (assert
  (forall ((m (matrix complex)) (n Int))
  (=> (<= 0 n)
  (=> (mem (matrix1 complex1) (t2tb14 m) (t2tb22 (ket_basis n)))
  (= (ket_basis_index m n) (tb2t3
                           (fir int int (t2tb9 (basis_mat_indexes m)))))))))

(declare-fun fc261 ((matrix complex) Int) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((m (matrix complex)) (n Int) (i Int) (us Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc261 m n)) (t2tb3 i))
     (t2tb3 us))) (indic int (t2tb3 (ket_basis_index m n)) (t2tb3 i)))))

;; ket_basis_index_spec
  (assert
  (forall ((m (matrix complex)) (n Int))
  (=> (<= 0 n)
  (=> (mem (matrix1 complex1) (t2tb14 m) (t2tb22 (ket_basis n)))
  (and (mem (matrix1 complex1)
  (t2tb14 (ind_basis_mat (ket_basis_index m n) 0 (power 2 n) 1))
  (t2tb22 (ket_basis n)))
  (and
  (= m (tb2t14
       (make_f complex1 (rows complex1 (t2tb14 m)) 1 (t2tb11 (fc261 m n)))))
  (and
  (forall ((i Int))
  (=> (valid_index complex1 (t2tb14 m) i 0)
  (=> (not (= i (ket_basis_index m n))) (= (get1 m i 0) c_zero))))
  (valid_index complex1 (t2tb14 m) (ket_basis_index m n) 0))))))))

(declare-fun fc262 (Int) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((i Int) (i1 Int) (us Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc262 i)) (t2tb3 i1))
     (t2tb3 us))) (indic int (t2tb3 i) (t2tb3 i1)))))

;; set_ket_basis
  (assert
  (forall ((m (matrix complex)) (n Int) (i Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (mem (matrix1 complex1) (t2tb14 m) (t2tb22 (ket_basis n)))
  (=> (= (get1 m i 0) c_one)
  (and (= (ket_basis_index m n) i)
  (and
  (forall ((i1 Int))
  (=> (valid_index complex1 (t2tb14 m) i1 0)
  (=> (not (= i1 i)) (= (get1 m i1 0) c_zero))))
  (and (mem (matrix1 complex1) (t2tb14 m) (t2tb22 (ket_basis n)))
  (= m (tb2t14
       (make_f complex1 (rows complex1 (t2tb14 m))
       (columns complex1 (t2tb14 m)) (t2tb11 (fc262 i))))))))))))))

;; from_ket_basis
  (assert
  (forall ((n Int) (m (matrix complex)))
  (=> (<= 0 n)
  (=> (mem (matrix1 complex1) (t2tb14 m) (t2tb22 (ket_basis n)))
  (exists ((i Int))
  (and (and (<= 0 i) (< i (power 2 n)))
  (= m (ind_basis_mat i 0 (power 2 n) 1))))))))

;; int_to_ket_basis
  (assert
  (forall ((n Int) (i Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (mem (matrix1 complex1)
  (t2tb14 (ket n i)) (t2tb22 (ket_basis n)))))))

(declare-fun is_a_ket_basis_elt ((matrix complex)) Bool)

;; is_a_ket_basis_elt_def
  (assert
  (forall ((m (matrix complex)))
  (= (is_a_ket_basis_elt m)
  (and (is_a_ket m) (mem (matrix1 complex1) (t2tb14 m)
  (t2tb22 (ket_basis (ket_length m))))))))

;; ket_basis_elt_are_kets
  (assert
  (forall ((m (matrix complex))) (=> (is_a_ket_basis_elt m) (is_a_ket m))))

;; get_is_a_ket_basis_elt
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket_basis_elt m)
  (and (is_a_ket m)
  (and (mem (matrix1 complex1) (t2tb14 m)
  (t2tb22 (ket_basis (ket_length m))))
  (and
  (exists ((i Int))
  (and (and (<= 0 i) (< i (power 2 (ket_length m))))
  (= m (ket (ket_length m) i))))
  (and
  (exists ((i Int))
  (and (and (<= 0 i) (< i (power 2 (ket_length m))))
  (and (= (get1 m i 0) c_one)
  (forall ((j Int))
  (=>
  (and (and (<= 0 j) (< j (power 2 (ket_length m))))
  (not (= (get1 m j 0) c_zero))) (= i j))))))
  (forall ((i Int))
  (=>
  (and (and (<= 0 i) (< i (power 2 (ket_length m)))) (= (get1 m i 0) c_one))
  (forall ((j Int))
  (=>
  (and (and (<= 0 j) (< j (power 2 (ket_length m))))
  (not (= (get1 m j 0) c_zero))) (= i j))))))))))))

;; get_is_a_ket_basis_elt_indic
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket_basis_elt m)
  (exists ((i Int))
  (and (and (<= 0 i) (< i (power 2 (ket_length m))))
  (forall ((j Int))
  (=> (and (<= 0 j) (< j (power 2 (ket_length m))))
  (= (get1 m j 0) (indic int (t2tb3 i) (t2tb3 j))))))))))

;; set_is_a_ket_basis_elt
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m)
  (=>
  (exists ((i Int))
  (and (and (<= 0 i) (< i (power 2 (ket_length m))))
  (= m (ket (ket_length m) i)))) (is_a_ket_basis_elt m)))))

(declare-fun fc263 (Int) (Array Int (Array Int complex)))

;; fc_def
  (assert
  (forall ((j Int) (i Int) (us Int))
  (= (tb2t
     (infix_at complex1 int
     (infix_at (infix_mngt int complex1) int (t2tb11 (fc263 j)) (t2tb3 i))
     (t2tb3 us))) (indic int (t2tb3 i) (t2tb3 j)))))

;; set_is_a_ket_basis_elt_exists
  (assert
  (forall ((m (matrix complex)))
  (=> (is_a_ket m)
  (=>
  (exists ((j Int))
  (and (and (<= 0 j) (< j (power 2 (ket_length m))))
  (= m (tb2t14
       (make_f complex1 (power 2 (ket_length m)) 1 (t2tb11 (fc263 j)))))))
  (is_a_ket_basis_elt m)))))

;; ket_func_sets_ket_basis_elts
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (and (is_a_ket_basis_elt (ket n i)) (= (ket_length (ket n i)) n))))))

(declare-fun x () (matrix complex))

(declare-fun y () (matrix complex))

;; H
  (assert (is_a_ket_basis_elt x))

;; H
  (assert (is_a_ket_basis_elt y))

;; H
  (assert (is_a_ket x))

;; H
  (assert (mem (matrix1 complex1) (t2tb14 x)
  (t2tb22 (ket_basis (ket_length x)))))

(declare-fun i () Int)

;; H
  (assert
  (and (and (<= 0 i) (< i (power 2 (ket_length x))))
  (= x (ket (ket_length x) i))))

;; H
  (assert
  (exists ((i1 Int))
  (and (and (<= 0 i1) (< i1 (power 2 (ket_length x))))
  (and (= (get1 x i1 0) c_one)
  (forall ((j Int))
  (=>
  (and (and (<= 0 j) (< j (power 2 (ket_length x))))
  (not (= (get1 x j 0) c_zero))) (= i1 j)))))))

;; H
  (assert
  (forall ((i1 Int))
  (=>
  (and (and (<= 0 i1) (< i1 (power 2 (ket_length x))))
  (= (get1 x i1 0) c_one))
  (forall ((j Int))
  (=>
  (and (and (<= 0 j) (< j (power 2 (ket_length x))))
  (not (= (get1 x j 0) c_zero))) (= i1 j))))))

;; H
  (assert (is_a_ket y))

;; H
  (assert (mem (matrix1 complex1) (t2tb14 y)
  (t2tb22 (ket_basis (ket_length y)))))

(declare-fun i1 () Int)

;; H
  (assert (<= 0 i1))

;; H
  (assert (< i1 (power 2 (ket_length y))))

;; H
  (assert (= y (ket (ket_length y) i1)))

(declare-fun i2 () Int)

;; H
  (assert (<= 0 i2))

;; H
  (assert (< i2 (power 2 (ket_length y))))

;; H
  (assert (= (get1 y i2 0) c_one))

;; H
  (assert
  (forall ((j Int))
  (=>
  (and (and (<= 0 j) (< j (power 2 (ket_length y))))
  (not (= (get1 y j 0) c_zero))) (= i2 j))))

;; H
  (assert
  (forall ((i3 Int))
  (=>
  (and (and (<= 0 i3) (< i3 (power 2 (ket_length y))))
  (= (get1 y i3 0) c_one))
  (forall ((j Int))
  (=>
  (and (and (<= 0 j) (< j (power 2 (ket_length y))))
  (not (= (get1 y j 0) c_zero))) (= i3 j))))))

;; H
  (assert
  (= (rows complex1 (t2tb14 (kronecker x y))) (* (rows complex1 (t2tb14 x)) 
  (rows complex1 (t2tb14 y)))))

;; H
  (assert
  (= (columns complex1 (t2tb14 (kronecker x y))) (* (columns complex1
                                                    (t2tb14 x)) (columns
                                                                complex1
                                                                (t2tb14 y)))))

;; H
  (assert
  (forall ((i3 Int) (j Int))
  (=> (valid_index complex1 (t2tb14 (kronecker x y)) i3 j)
  (= (get1 (kronecker x y) i3 j) (infix_asdt
                                 (get1 x (div1 i3 (rows complex1 (t2tb14 y)))
                                 (div1 j (columns complex1 (t2tb14 y))))
                                 (get1 y (mod1 i3 (rows complex1 (t2tb14 y)))
                                 (mod1 j (columns complex1 (t2tb14 y)))))))))

;; H
  (assert (is_a_ket (kronecker x y)))

;; H
  (assert (<= 0 (+ (* i (power 2 (ket_length y))) i1)))

;; H
  (assert
  (< (+ (* i (power 2 (ket_length y))) i1) (power 2
                                           (ket_length (kronecker x y)))))

(declare-fun i3 () Int)

;; H
  (assert (<= 0 i3))

;; H
  (assert (< i3 (power 2 (ket_length (kronecker x y)))))

(assert
;; G
 ;; File "qdata/../qdata.mlw", line 760, characters 64-89
  (not
  (= (get1 (kronecker x y) i3 0) (get1
                                 (ket (ket_length (kronecker x y))
                                 (+ (* i (power 2 (ket_length y))) i1)) 
                                 i3 0))))
(check-sat)
