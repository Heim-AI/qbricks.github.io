%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witness_sort
  ASSERT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

real: ty;

t : TYPE;

t1: ty;

tzero: t;

tone: t;

prefix_mndt: (t) -> t;

infix_sldt: (t, t) -> t;

infix_asdt: (t, t) -> t;

prefix_mnas: (REAL) -> REAL;

infix_lseqas: (REAL, REAL) -> BOOLEAN;

% Refl
  ASSERT (FORALL (x : REAL): (infix_lseqas(x, x)));

% Trans
  ASSERT
  (FORALL (x : REAL, y : REAL, z : REAL):
  ((infix_lseqas(x, y)) => ((infix_lseqas(y, z)) => (infix_lseqas(x, z)))));

% Comm
  ASSERT (FORALL (x : t, y : t): (infix_asdt(x, y) = infix_asdt(y, x)));

% NonTrivialRing
  ASSERT (NOT (tzero = tone));

inv: (t) -> t;

% div_def
  ASSERT
  (FORALL (x : t, y : t):
  ((NOT (y = tzero)) => (infix_sldt(x, y) = infix_asdt(x, inv(y)))));

% absorbinf_zero
  ASSERT (FORALL (x : t): (infix_asdt(x, tzero) = tzero));

set: (ty) -> ty;

mem: (ty, uni, uni) -> BOOLEAN;

infix_eqeq: (ty, uni, uni) -> BOOLEAN;

% infix ==_spec
  ASSERT
  (FORALL (a : ty):
  (FORALL (s1 : uni, s2 : uni):
  (((infix_eqeq(a, s1, s2))
   => (FORALL (x : uni): ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
  AND ((FORALL (x : uni):
       ((sort(a, x)) => ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
      => (infix_eqeq(a, s1, s2))))));

infix_mngt: (ty, ty) -> ty;

abs: (INT) -> INT;

% abs_def
  ASSERT
  (FORALL (x : INT):
  (IF (0 <= x) THEN (abs(x) = x) ELSE (abs(x) = (- x)) ENDIF));

cpower: (t, INT) -> t;

% Cpower_zero
  ASSERT (FORALL (i : t): (cpower(i, 0) = tone));

% Cpower_plus_one
  ASSERT
  (FORALL (i : t):
  (FORALL (n : INT): (cpower(i, n) = infix_asdt(i, cpower(i, (n - 1))))));

QUERY
% VC_test1
 % File "qdata/../qdata.mlw", line 889, characters 15-20
  FALSE;
