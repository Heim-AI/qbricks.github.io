(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
type t

logic tzero : t

logic prefix_mndt : t -> t

logic ac infix_asdt : t, t -> t

logic prefix_mnas : real -> real

type 'a set

logic mem : 'a, 'a set -> prop

logic infix_eqeq : 'a set, 'a set -> prop

axiom infix_eqeq_spec :
  (forall s1:'a set. forall s2:'a set. (infix_eqeq(s1, s2) ->
  (forall x:'a. (mem(x, s1) -> mem(x, s2)))))

axiom infix_eqeq_spec1 :
  (forall s1:'a set. forall s2:'a set. (infix_eqeq(s1, s2) ->
  (forall x:'a. (mem(x, s2) -> mem(x, s1)))))

axiom infix_eqeq_spec2 :
  (forall s1:'a set. forall s2:'a set.
  ((forall x:'a. (mem(x, s1) <-> mem(x, s2))) -> infix_eqeq(s1, s2)))

logic remove : 'a, 'a set -> 'a set

logic choose : 'a set -> 'a

logic cardinal : 'a set -> int

logic element : 'a set -> 'a

logic to_fset : int, int -> int set

logic rows : (int,(int,'a) farray) farray -> int

axiom rows_spec : (forall m:(int,(int,'a) farray) farray. (0 <  rows(m)))

logic columns : (int,(int,'a) farray) farray -> int

predicate valid_index(a: (int,(int,'a1) farray) farray, r: int, c: int) =
  (((0 <= r) and (r <  rows(a))) and ((0 <= c) and (c <  columns(a))))

logic make : int, int, 'a -> (int,(int,'a) farray) farray

axiom make_spec :
  (forall r:int. forall c:int. forall v:'a. (((0 <= r) and (0 <= c)) ->
  (rows(make(r, c, v)) = r)))

axiom make_spec1 :
  (forall r:int. forall c:int. forall v:'a. (((0 <= r) and (0 <= c)) ->
  (columns(make(r, c, v)) = c)))

axiom make_spec2 :
  (forall r:int. forall c:int. forall v:'a. (((0 <= r) and (0 <= c)) ->
  (forall i:int. forall j:int. ((((0 <= i) and (i <  r)) and ((0 <= j) and
  (j <  c))) -> (((make(r, c, v)[i])[j]) = v)))))

logic infix_asdtdt : t,
  (int,(int,t) farray) farray -> (int,(int,t) farray) farray

axiom infix_asdtdt_spec :
  (forall s:t. forall m:(int,(int,t) farray) farray. (columns(infix_asdtdt(s,
  m)) = columns(m)))

axiom infix_asdtdt_spec1 :
  (forall s:t. forall m:(int,(int,t) farray) farray. (rows(infix_asdtdt(s,
  m)) = rows(m)))

axiom infix_asdtdt_spec2 :
  (forall s:t. forall m:(int,(int,t) farray) farray.
  (forall i:int. forall j:int. (valid_index(infix_asdtdt(s, m), i, j) ->
  (((infix_asdtdt(s, m)[i])[j]) = infix_asdt(s, ((m[i])[j]))))))

axiom infix_asdtdt_spec3 :
  (forall s:t. forall m:(int,(int,t) farray) farray.
  (forall i:int. forall j:int. (valid_index(infix_asdtdt(s, m), i, j) ->
  valid_index(m, i, j))))

axiom infix_asdtdt_spec4 :
  (forall s:t. forall m:(int,(int,t) farray) farray.
  (forall i:int. forall j:int. (valid_index(m, i, j) ->
  valid_index(infix_asdtdt(s, m), i, j))))

logic add_mat : (int,(int,t) farray) farray,
  (int,(int,t) farray) farray -> (int,(int,t) farray) farray

predicate constant_size(s: 'a set,
  f: ('a,(int,(int,t) farray) farray) farray) =
  (forall e:'a. (mem(e, s) -> ((rows((f[e])) = rows((f[choose(s)]))) and
  (columns((f[e])) = columns((f[choose(s)]))))))

logic mat_sum : 'a set,
  ('a,(int,(int,t) farray) farray) farray -> (int,(int,t) farray) farray

axiom mat_sum_def :
  (forall s:'a set. forall f:('a,(int,(int,t) farray) farray) farray.
  (constant_size(s, f) -> ((cardinal(s) = 0) -> (mat_sum(s, f) = make(0, 0,
  tzero)))))

axiom mat_sum_def1 :
  (forall s:'a set. forall f:('a,(int,(int,t) farray) farray) farray.
  (constant_size(s, f) -> ((not (cardinal(s) = 0)) -> ((cardinal(s) = 1) ->
  (mat_sum(s, f) = (f[element(s)]))))))

axiom mat_sum_def2 :
  (forall s:'a set. forall f:('a,(int,(int,t) farray) farray) farray.
  (constant_size(s, f) -> ((not (cardinal(s) = 0)) ->
  ((not (cardinal(s) = 1)) -> (mat_sum(s, f) = add_mat((f[choose(s)]),
  mat_sum(remove(choose(s), s), f)))))))

logic f : (int,(int,(int,t) farray) farray) farray

logic l : int

logic h : int

axiom H : (rows((f[choose(to_fset(l, l))])) = 2)

goal h1 : false
