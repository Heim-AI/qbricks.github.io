%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witness_sort
  ASSERT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

real: ty;

t : TYPE;

t1: ty;

tzero: t;

tone: t;

prefix_mndt: (t) -> t;

infix_asdt: (t, t) -> t;

infix_lseqdt: (t, t) -> BOOLEAN;

infix_gteqdt: (t, t) -> BOOLEAN;

infix_gtdt: (t, t) -> BOOLEAN;

% sup_st
  ASSERT
  (FORALL (x : t, y : t):
  ((infix_gtdt(x, y)) <=> ((infix_gteqdt(x, y)) AND (NOT (x = y)))));

prefix_mnas1: (uni) -> uni;

% prefix -*_sort
  ASSERT (FORALL (x : uni): (sort(real, prefix_mnas1(x))));

inv: (t) -> t;

% Inverse
  ASSERT
  (FORALL (x : t): ((NOT (x = tzero)) => (infix_asdt(x, inv(x)) = tone)));

% zeroLessOne
  ASSERT (infix_lseqdt(tzero, tone));

set: (ty) -> ty;

mem: (ty, uni, uni) -> BOOLEAN;

infix_eqeq: (ty, uni, uni) -> BOOLEAN;

% infix ==_spec
  ASSERT
  (FORALL (a : ty):
  (FORALL (s1 : uni, s2 : uni):
  (((infix_eqeq(a, s1, s2))
   => (FORALL (x : uni): ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
  AND ((FORALL (x : uni):
       ((sort(a, x)) => ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
      => (infix_eqeq(a, s1, s2))))));

infix_mngt: (ty, ty) -> ty;

abs: (INT) -> INT;

% abs_def
  ASSERT
  (FORALL (x : INT):
  (IF (0 <= x) THEN (abs(x) = x) ELSE (abs(x) = (- x)) ENDIF));

cpower: (t, INT) -> t;

% zero_cpower_pos
  ASSERT (FORALL (n : INT): ((0 <= n) => (cpower(tzero, n) = tzero)));

% init_exp
  ASSERT
  (FORALL (k : t):
  ((cpower(k, 0) = tone)
  AND ((cpower(k, 1) = k) AND (cpower(k, 2) = infix_asdt(k, k)))));

% int_exp_pos
  ASSERT
  (FORALL (k : t, n : INT):
  ((infix_lseqdt(tone, k))
  => ((0 <= n)
     => ((infix_gteqdt(cpower(k, n), tone))
        AND ((infix_gtdt(cpower(k, n), tzero)) AND (infix_lseqdt(cpower(k,
            n), cpower(k, (n + 1)))))))));

QUERY
% VC_test1
 % File "qdata/../qdata.mlw", line 889, characters 15-20
  FALSE;
