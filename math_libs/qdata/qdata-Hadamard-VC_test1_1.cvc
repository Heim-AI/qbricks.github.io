%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witness_sort
  ASSERT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

real: ty;

t : TYPE;

t1: ty;

tzero: t;

tone: t;

prefix_mndt: (t) -> t;

infix_sldt: (t, t) -> t;

infix_pldt: (t, t) -> t;

infix_asdt: (t, t) -> t;

prefix_mnas: (REAL) -> REAL;

infix_lseqas: (REAL, REAL) -> BOOLEAN;

% Refl
  ASSERT (FORALL (x : REAL): (infix_lseqas(x, x)));

% Trans
  ASSERT
  (FORALL (x : REAL, y : REAL, z : REAL):
  ((infix_lseqas(x, y)) => ((infix_lseqas(y, z)) => (infix_lseqas(x, z)))));

% Comm
  ASSERT (FORALL (x : t, y : t): (infix_asdt(x, y) = infix_asdt(y, x)));

% NonTrivialRing
  ASSERT (NOT (tzero = tone));

inv: (t) -> t;

% div_def
  ASSERT
  (FORALL (x : t, y : t):
  ((NOT (y = tzero)) => (infix_sldt(x, y) = infix_asdt(x, inv(y)))));

% absorbinf_zero
  ASSERT (FORALL (x : t): (infix_asdt(x, tzero) = tzero));

set: (ty) -> ty;

mem: (ty, uni, uni) -> BOOLEAN;

infix_eqeq: (ty, uni, uni) -> BOOLEAN;

% infix ==_spec
  ASSERT
  (FORALL (a : ty):
  (FORALL (s1 : uni, s2 : uni):
  (((infix_eqeq(a, s1, s2))
   => (FORALL (x : uni): ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
  AND ((FORALL (x : uni):
       ((sort(a, x)) => ((mem(a, x, s1)) <=> (mem(a, x, s2)))))
      => (infix_eqeq(a, s1, s2))))));

infix_mngt: (ty, ty) -> ty;

infix_at: (ty, ty, uni, uni) -> uni;

% infix @_sort
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (x : uni, x1 : uni): (sort(b, infix_at(b, a, x, x1)))));

abs: (INT) -> INT;

% abs_def
  ASSERT
  (FORALL (x : INT):
  (IF (0 <= x) THEN (abs(x) = x) ELSE (abs(x) = (- x)) ENDIF));

cpower: (t, INT) -> t;

% Cpower_zero
  ASSERT (FORALL (i : t): (cpower(i, 0) = tone));

% Cpower_plus_one
  ASSERT
  (FORALL (i : t):
  (FORALL (n : INT): (cpower(i, n) = infix_asdt(i, cpower(i, (n - 1))))));

squarert_two: t;

% squarertTwo
  ASSERT (cpower(squarert_two, 2) = infix_pldt(tone, tone));

% coeffs
  ASSERT (infix_sldt(prefix_mndt(tone), squarert_two) = prefix_mndt(
  infix_sldt(tone, squarert_two)));

rows: (ty, uni) -> INT;

columns: (ty, uni) -> INT;

valid_index: (ty, uni, INT, INT) -> BOOLEAN;

% valid_index_def
  ASSERT
  (FORALL (a : ty):
  (FORALL (a1 : uni, r : INT, c : INT):
  ((valid_index(a, a1, r, c))
  <=> (((0 <= r) AND (r < rows(a, a1)))
      AND ((0 <= c) AND (c < columns(a, a1)))))));

make_f: (ty, INT, INT, uni) -> uni;

% make_f_sort
  ASSERT
  (FORALL (a : ty):
  (FORALL (x : INT, x1 : INT, x2 : uni): (sort(infix_mngt(int, 
  infix_mngt(int, a)), make_f(a, x, x1, x2)))));

infix_asdtdt: (t,
  (ARRAY INT OF (ARRAY INT OF t))) -> (ARRAY INT OF (ARRAY INT OF t));

result: (t,
  (ARRAY INT OF (ARRAY INT OF t))) -> (ARRAY INT OF (ARRAY INT OF t));

t2tb2: (t) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : t): (sort(t1, t2tb2(x))));

tb2t2: (uni) -> t;

% BridgeL
  ASSERT (FORALL (i : t):PATTERN (t2tb2(i)):  (tb2t2(t2tb2(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb2(tb2t2(j))): 
  ((sort(t1, j)) => (t2tb2(tb2t2(j)) = j)));

t2tb3: ((ARRAY INT OF (ARRAY INT OF t))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF (ARRAY INT OF t))): (sort(infix_mngt(int, 
  infix_mngt(int, t1)), t2tb3(x))));

tb2t3: (uni) -> (ARRAY INT OF (ARRAY INT OF t));

% BridgeL
  ASSERT
  (FORALL (i : (ARRAY INT OF (ARRAY INT OF t))):PATTERN (t2tb3(i)):  (tb2t3(
  t2tb3(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb3(tb2t3(j))): 
  ((sort(infix_mngt(int, infix_mngt(int, t1)), j)) => (t2tb3(tb2t3(j)) = j)));

t2tb4: ((ARRAY INT OF t)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x : (ARRAY INT OF t)): (sort(infix_mngt(int, t1), t2tb4(x))));

tb2t4: (uni) -> (ARRAY INT OF t);

% BridgeL
  ASSERT
  (FORALL (i : (ARRAY INT OF t)):PATTERN (t2tb4(i)):  (tb2t4(t2tb4(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb4(tb2t4(j))): 
  ((sort(infix_mngt(int, t1), j)) => (t2tb4(tb2t4(j)) = j)));

t2tb1: (INT) -> uni;

% t2tb_sort
  ASSERT (FORALL (x : INT): (sort(int, t2tb1(x))));

tb2t1: (uni) -> INT;

% BridgeL
  ASSERT (FORALL (i : INT):PATTERN (t2tb1(i)):  (tb2t1(t2tb1(i)) = i));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb1(tb2t1(j))):  (t2tb1(tb2t1(j)) = j));

% result_def
  ASSERT
  (FORALL (s : t, m : (ARRAY INT OF (ARRAY INT OF t)), i : INT, j : INT): (
  tb2t2(infix_at(t1, int, infix_at(infix_mngt(int, t1), int, t2tb3(result(s,
  m)), t2tb1(i)), t2tb1(j))) = infix_asdt(s, tb2t2(infix_at(t1, int, 
  infix_at(infix_mngt(int, t1), int, t2tb3(m), t2tb1(i)), t2tb1(j))))));

% infix *.._def
  ASSERT
  (FORALL (s : t, m : (ARRAY INT OF (ARRAY INT OF t))): (infix_asdtdt(s,
  m) = tb2t3(make_f(t1, rows(t1, t2tb3(m)), columns(t1, t2tb3(m)), t2tb3(
  result(s, m))))));

% infix *.._spec
  ASSERT
  (FORALL (s : t, m : (ARRAY INT OF (ARRAY INT OF t))):
  ((columns(t1, t2tb3(infix_asdtdt(s, m))) = columns(t1, t2tb3(m)))
  AND ((rows(t1, t2tb3(infix_asdtdt(s, m))) = rows(t1, t2tb3(m)))
      AND ((FORALL (i : INT, j : INT):
           ((valid_index(t1, t2tb3(infix_asdtdt(s, m)), i, j)) => (tb2t2(
           infix_at(t1, int, infix_at(infix_mngt(int, t1), int, t2tb3(
           infix_asdtdt(s, m)), t2tb1(i)), t2tb1(j))) = infix_asdt(s, tb2t2(
           infix_at(t1, int, infix_at(infix_mngt(int, t1), int, t2tb3(m), 
           t2tb1(i)), t2tb1(j)))))))
          AND (FORALL (i : INT, j : INT):
              ((valid_index(t1, t2tb3(infix_asdtdt(s, m)), i, j))
              <=> (valid_index(t1, t2tb3(m), i, j))))))));

QUERY
% VC_test1
 % File "qdata/../qdata.mlw", line 889, characters 15-20
  FALSE;
