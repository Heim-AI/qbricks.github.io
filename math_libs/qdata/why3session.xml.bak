<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.4.1" alternative="noBV" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="qdata.mlw"/>
<theory name="Qreg" proved="true">
 <goal name="VC xor_i" expl="VC for xor_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC xor_i.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC xor_i.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.41" steps="135"/></proof>
   </goal>
   <goal name="VC xor_i.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.43" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC xor_i.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC xor_i.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="135"/></proof>
   </goal>
   <goal name="VC xor_i.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC xor_i.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC xor_i.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="133"/></proof>
   </goal>
   <goal name="VC xor_i.2.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="136"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC xor_i.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC xor_i.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="134"/></proof>
   </goal>
   <goal name="VC xor_i.3.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC is_a_ket_l" expl="VC for is_a_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC is_a_ket_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_l_rows" expl="VC for ket_l_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_l_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_l_columns" expl="VC for ket_l_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_l_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_length" expl="VC for ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_length.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="133"/></proof>
  </goal>
  <goal name="VC ket_length.1" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.62"/></proof>
  </goal>
  <goal name="VC ket_length.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_length.2.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="1.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_length.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_length.3.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.68"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_length.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_length.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.59" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_length.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_length.5.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.46" steps="144"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_length.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_length.6.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_rev" expl="VC for get_ket_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.13" steps="129"/></proof>
 </goal>
 <goal name="VC get_ket_add" expl="VC for get_ket_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_add.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_substr" expl="VC for get_ket_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_substr.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_l" expl="VC for mat_mult_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_l.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_kronecker_values" expl="VC for ket_kronecker_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_kronecker_values.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52"/></proof>
  </goal>
  <goal name="VC ket_kronecker_values.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_l_to_ket" expl="VC for ket_l_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_l_to_ket.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="9.66"/></proof>
  </goal>
  <goal name="VC ket_l_to_ket.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_l_to_ket_gen" expl="VC for ket_l_to_ket_gen" proved="true">
 <proof prover="6"><result status="valid" time="0.40" steps="135"/></proof>
 </goal>
 <goal name="VC ket_to_ket_l" expl="VC for ket_to_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_ket_l.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ket_valid_index" expl="VC for set_ket_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_ket_valid_index.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_ket_l_l" expl="VC for ket_to_ket_l_l" proved="true">
 <proof prover="6"><result status="valid" time="0.33" steps="135"/></proof>
 </goal>
 <goal name="VC set_constant_size_ket" expl="VC for set_constant_size_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_constant_size_ket.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_constant_size_ket.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_constant_size_ket.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.69"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_constant_size_ket.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_constant_size_ket.0.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.56"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_norm_l" expl="VC for ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_norm_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="133"/></proof>
  </goal>
  <goal name="VC ket_norm_l.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="positive_sum">
   <goal name="VC ket_norm_l.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_norm_l.1.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_norm_l.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_sum_ket_norm_l" expl="VC for ind_sum_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_sum_ket_norm_l.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_to_sum">
   <goal name="VC ind_sum_ket_norm_l.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_norm_l_def">
    <goal name="VC ind_sum_ket_norm_l.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_norm_one" expl="VC for ket_norm_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_norm_one.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_norm_one_c_one" expl="VC for ket_norm_one_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_norm_one_c_one.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_ket_norm_l" expl="VC for scalar_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_ket_norm_l.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC scalar_ket_norm_l.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
    <goal name="VC scalar_ket_norm_l.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_sum
   (fun (k:int) -&gt; modulus (get (a *.. x) k 0) *. modulus (get (a *.. x) k 0))
   0 (power 2 n))" arg2="((a*.a)*.ind_sum
   (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0))
   0 (power 2 n))">
     <goal name="VC scalar_ket_norm_l.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="square_rt_mult_rev">
      <goal name="VC scalar_ket_norm_l.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq_t">
       <goal name="VC scalar_ket_norm_l.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="square_rt_mult_rev">
        <goal name="VC scalar_ket_norm_l.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="140"/></proof>
        </goal>
        <goal name="VC scalar_ket_norm_l.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="140"/></proof>
        </goal>
        <goal name="VC scalar_ket_norm_l.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="138"/></proof>
        </goal>
        <goal name="VC scalar_ket_norm_l.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="140"/></proof>
        </goal>
        <goal name="VC scalar_ket_norm_l.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="138"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC scalar_ket_norm_l.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
        <goal name="VC scalar_ket_norm_l.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="VC scalar_ket_norm_l.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.30" steps="138"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC scalar_ket_norm_l.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="140"/></proof>
      </goal>
      <goal name="VC scalar_ket_norm_l.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="140"/></proof>
      </goal>
      <goal name="VC scalar_ket_norm_l.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="real_ind_sum">
       <goal name="VC scalar_ket_norm_l.0.0.0.0.3.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="140"/></proof>
       </goal>
       <goal name="VC scalar_ket_norm_l.0.0.0.0.3.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC scalar_ket_norm_l.0.0.0.0.3.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC scalar_ket_norm_l.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="144"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC scalar_ket_norm_l.0.0.0.0.4" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="positive_ind_sum">
       <goal name="VC scalar_ket_norm_l.0.0.0.0.4.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.25" steps="140"/></proof>
       </goal>
       <goal name="VC scalar_ket_norm_l.0.0.0.0.4.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC scalar_ket_norm_l.0.0.0.0.4.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="144"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC scalar_ket_norm_l.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
      <goal name="VC scalar_ket_norm_l.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq">
       <goal name="VC scalar_ket_norm_l.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC scalar_ket_norm_l.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC scalar_ket_norm_l.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_values">
          <goal name="VC scalar_ket_norm_l.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mult_modulus">
           <goal name="VC scalar_ket_norm_l.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.27" steps="144"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scalar_ket_norm_l.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="4.45" steps="624"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC zero_ket_norm_l" expl="VC for zero_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC zero_ket_norm_l.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l" arg2="in" arg3="H3">
   <goal name="VC zero_ket_norm_l.0.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(get x i j &lt;&gt; c_zero)">
    <goal name="VC zero_ket_norm_l.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(c_zero &lt;. modulus (get x i j))">
     <goal name="VC zero_ket_norm_l.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="149"/></proof>
     </goal>
     <goal name="VC zero_ket_norm_l.0.0.0.1" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(c_zero &lt;. (ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
   (power 2 n)))">
      <goal name="VC zero_ket_norm_l.0.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_sum_trans" arg2="(fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)),0,i,(power 2 n)">
       <goal name="VC zero_ket_norm_l.0.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(c_zero &lt;. ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0))
         i (power 2 n))">
         <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="h">
         </transf>
         </goal>
         <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(forall a b. c_zero &lt;=. a -&gt; c_zero &lt;. b -&gt; c_zero &lt;. a+.b)">
          <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.28" steps="159"/></proof>
          </goal>
          <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="h1">
           <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(0&lt;i)">
            <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1.0.0" expl="true case (apply premises)" proved="true">
            <transf name="apply" proved="true" arg1="positive_ind_sum">
             <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.18" steps="155"/></proof>
             </goal>
             <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="2.53"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1.0.1" expl="false case (apply premises)" proved="true">
            <proof prover="4"><result status="valid" time="0.70"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="3.00"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC zero_ket_norm_l.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.17" steps="151"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC zero_ket_norm_l.0.0.0.1.1" expl="true case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(forall x. c_zero &lt;. x -&gt; c_zero &lt;&gt; square_rt x)">
       <goal name="VC zero_ket_norm_l.0.0.0.1.1.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC zero_ket_norm_l.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="1.61"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC zero_ket_norm_l.0.0.0.1.1.1" expl="true case (postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="( square_rt
  (ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
   (power 2 n))
  &lt;&gt; c_zero)">
        <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="2.06"/></proof>
        </goal>
        <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1" expl="true case (postcondition)" proved="true">
        <transf name="assert" proved="true" arg1="false">
         <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(forall x. x= c_zero -&gt; not x = c_zero -&gt; false)">
          <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.17" steps="155"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.1" expl="asserted formula" proved="true">
          <transf name="instantiate" proved="true" arg1="h1" arg2="(square_rt
      (ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
       (power 2 n)))">
           <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.1.0" expl="asserted formula" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.1.0.0" expl="destruct premise" proved="true">
            <transf name="apply" proved="true" arg1="H3">
            </transf>
            </goal>
            <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.1.0.1" expl="asserted formula" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.1.0.1.0" expl="destruct premise" proved="true">
             <proof prover="0"><result status="valid" time="2.67"/></proof>
             </goal>
             <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.0.1.0.1.1" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="0.28" steps="153"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC zero_ket_norm_l.0.0.0.1.1.1.1.1" expl="true case (postcondition)" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="153"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC zero_ket_norm_l.0.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC zero_ket_norm_l.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC normalized_l" expl="VC for normalized_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC normalized_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="145"/></proof>
  </goal>
  <goal name="VC normalized_l.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.57"/></proof>
  </goal>
  <goal name="VC normalized_l.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_ket" expl="VC for make_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="137"/></proof>
  </goal>
  <goal name="VC make_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="139"/></proof>
  </goal>
  <goal name="VC make_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
  </goal>
  <goal name="VC make_ket.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
  </goal>
  <goal name="VC make_ket.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.43"/></proof>
  </goal>
  <goal name="VC make_ket.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.74"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_make_ket" expl="VC for assert_make_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make_ket.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC assert_make_ket.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_def">
    <goal name="VC assert_make_ket.0.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="2.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_make_ket_l" expl="VC for assert_make_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make_ket_l.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC assert_make_ket_l.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_def">
    <goal name="VC assert_make_ket_l.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="get_def">
     <goal name="VC assert_make_ket_l.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="make_ket_def">
      <goal name="VC assert_make_ket_l.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC assert_make_ket_l.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(f i)" arg2="((fun (x:int) (_:int) -&gt; f @ x) i 0)">
        <goal name="VC assert_make_ket_l.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="make_f_def">
         <goal name="VC assert_make_ket_l.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="make_func_spec3">
          <goal name="VC assert_make_ket_l.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="VC assert_make_ket_l.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="138"/></proof>
          </goal>
          <goal name="VC assert_make_ket_l.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.26" steps="136"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC assert_make_ket_l.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.48" steps="138"/></proof>
         </goal>
         <goal name="VC assert_make_ket_l.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="136"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC assert_make_ket_l.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="138"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC assert_make_ket_l.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.18" steps="136"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_ket_length" expl="VC for make_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_ket_length.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC make_ket_length.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="make_ket_def">
    <goal name="VC make_ket_length.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_length_def">
     <goal name="VC make_ket_length.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.78"/></proof>
     </goal>
     <goal name="VC make_ket_length.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="1.86"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC make_ket_length.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="136"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_ket_rows" expl="VC for make_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_ket_rows.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_ket_columns" expl="VC for make_ket_columns" proved="true">
 <proof prover="0"><result status="valid" time="1.31"/></proof>
 </goal>
 <goal name="VC make_ket_constant" expl="VC for make_ket_constant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_ket_constant.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="137"/></proof>
  </goal>
  <goal name="VC make_ket_constant.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="141"/></proof>
  </goal>
  <goal name="VC make_ket_constant.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.22"/></proof>
  </goal>
  <goal name="VC make_ket_constant.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_ket" expl="VC for set_equal_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_ket.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="VC set_equal_ket.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC set_equal_ket.2" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="j" arg2="0">
   <goal name="VC set_equal_ket.2.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(get m i 0 )" arg2="(get_ket m i  )">
    <goal name="VC set_equal_ket.2.0.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.60"/></proof>
    </goal>
    <goal name="VC set_equal_ket.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_equal_ket.2.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="0.45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_equal_ket.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_equal_ket.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_ket_" expl="VC for set_equal_ket_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_ket_.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="VC set_equal_ket_.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC set_equal_ket_.2" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="j" arg2="0">
   <goal name="VC set_equal_ket_.2.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(get m i 0)" arg2="(get_ket m i)">
    <goal name="VC set_equal_ket_.2.0.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.43"/></proof>
    </goal>
    <goal name="VC set_equal_ket_.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_equal_ket_.2.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="0.43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_equal_ket_.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket" expl="VC for add_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC add_ket.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="VC add_ket.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="5.89"/></proof>
  </goal>
  <goal name="VC add_ket.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="VC add_ket.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l" expl="VC for add_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="137"/></proof>
  </goal>
  <goal name="VC add_ket_l.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="141"/></proof>
  </goal>
  <goal name="VC add_ket_l.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
  </goal>
  <goal name="VC add_ket_l.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC add_ket_l.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC add_ket_l.4.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.66"/></proof>
   </goal>
   <goal name="VC add_ket_l.4.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.59"/></proof>
   </goal>
   <goal name="VC add_ket_l.4.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC add_ket_l.4.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC add_ket_l.4.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="add_values">
      <goal name="VC add_ket_l.4.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC add_ket_l.4.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.45"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC add_ket_l.4.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.66"/></proof>
      </goal>
      <goal name="VC add_ket_l.4.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.46"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC add_ket_l.4.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="149"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_to_add_mat" expl="VC for add_ket_l_to_add_mat" proved="true">
 <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
 </goal>
 <goal name="VC null_add_ket_l" expl="VC for null_add_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC null_add_ket_l.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l_def">
   <goal name="VC null_add_ket_l.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket_">
    <goal name="VC null_add_ket_l.0.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="l">
     <goal name="VC null_add_ket_l.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC null_add_ket_l.0.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
      </goal>
      <goal name="VC null_add_ket_l.0.0.0.0.1" proved="true">
      <proof prover="6"><result status="valid" time="0.32" steps="141"/></proof>
      </goal>
      <goal name="VC null_add_ket_l.0.0.0.0.2" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
       <goal name="VC null_add_ket_l.0.0.0.0.2.0" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC null_add_ket_l.0.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="zero_add_t">
         <goal name="VC null_add_ket_l.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_definition" proved="true" >
          <goal name="VC null_add_ket_l.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_def">
           <goal name="VC null_add_ket_l.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_null_mat">
            <goal name="VC null_add_ket_l.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.20" steps="144"/></proof>
            </goal>
            <goal name="VC null_add_ket_l.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.20" steps="144"/></proof>
            </goal>
            <goal name="VC null_add_ket_l.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="5.19" steps="666"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC null_add_ket_l.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="147"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC null_add_ket_l.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_null" expl="VC for add_ket_l_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_null.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_ket_l_def">
   <goal name="VC add_ket_l_null.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket_">
    <goal name="VC add_ket_l_null.0.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="l">
     <goal name="VC add_ket_l_null.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC add_ket_l_null.0.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="143"/></proof>
      </goal>
      <goal name="VC add_ket_l_null.0.0.0.0.1" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="141"/></proof>
      </goal>
      <goal name="VC add_ket_l_null.0.0.0.0.2" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
       <goal name="VC add_ket_l_null.0.0.0.0.2.0" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC add_ket_l_null.0.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="add_zero_t">
         <goal name="VC add_ket_l_null.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_definition" proved="true" >
          <goal name="VC add_ket_l_null.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_def">
           <goal name="VC add_ket_l_null.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_null_mat">
            <goal name="VC add_ket_l_null.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.30" steps="144"/></proof>
            </goal>
            <goal name="VC add_ket_l_null.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.19" steps="144"/></proof>
            </goal>
            <goal name="VC add_ket_l_null.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="1.71"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC add_ket_l_null.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="147"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC add_ket_l_null.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.36" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_eq" expl="VC for add_ket_l_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.27" steps="143"/></proof>
 </goal>
 <goal name="VC add_ket_l_value" expl="VC for add_ket_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_value.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC add_ket_l_value.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="add_ket_l_spec1">
    <goal name="VC add_ket_l_value.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.28" steps="141"/></proof>
    </goal>
    <goal name="VC add_ket_l_value.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_length" expl="VC for add_ket_l_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_length.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC add_ket_l_length.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="add_ket_l_spec2">
    <goal name="VC add_ket_l_length.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_rows" expl="VC for add_ket_l_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_rows.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_columns" expl="VC for add_ket_l_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_columns.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_values" expl="VC for add_ket_l_values" proved="true">
 <proof prover="4"><result status="valid" time="0.56"/></proof>
 </goal>
 <goal name="VC set_equal_ket_l" expl="VC for set_equal_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_ket_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="143"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="145"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="153"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_ket_l_" expl="VC for set_equal_ket_l_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_ket_l_.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="141"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l_.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l_.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l_.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.04"/></proof>
  </goal>
  <goal name="VC set_equal_ket_l_.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_length" expl="VC for get_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_length.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.64"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ket_length" expl="VC for set_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_ket_length.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_ket" expl="VC for scalar_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_ket.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.30"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_ket_length" expl="VC for scalar_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_ket_length.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_ket_valid_index" expl="VC for scalar_ket_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_ket_valid_index.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_ket_l" expl="VC for scalar_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_ket_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="139"/></proof>
  </goal>
  <goal name="VC scalar_ket_l.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.62"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_ket_l_values" expl="VC for scalar_ket_l_values" proved="true">
 <proof prover="6"><result status="valid" time="0.26" steps="143"/></proof>
 </goal>
 <goal name="VC scalar_ket_l_value" expl="VC for scalar_ket_l_value" proved="true">
 <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
 </goal>
 <goal name="VC scalar_ket_value" expl="VC for scalar_ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_ket_value.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_ket_value_rev" expl="VC for scalar_ket_value_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_ket_value_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_is_a_ket" expl="VC for add_ket_is_a_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_is_a_ket.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ket_length_gen" expl="VC for set_ket_length_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_ket_length_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_is_a_ket" expl="VC for set_is_a_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_is_a_ket.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_is_a_ket.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.44"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_is_a_ket_l" expl="VC for set_is_a_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_is_a_ket_l.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_is_a_ket_l.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_is_a_ket_p" expl="VC for set_is_a_ket_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_is_a_ket_p.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_is_a_ket" expl="VC for get_is_a_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_is_a_ket.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
  </goal>
  <goal name="VC get_is_a_ket.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_columns" expl="VC for get_ket_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_rows" expl="VC for get_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_rows_gen" expl="VC for get_ket_rows_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_rows_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_rows_length" expl="VC for get_ket_rows_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_rows_length.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_kronecker" expl="VC for ket_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_kronecker.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="VC ket_kronecker.1" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="kronecker_rows">
   <goal name="VC ket_kronecker.1.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="power_sum">
    <goal name="VC ket_kronecker.1.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq">
     <goal name="VC ket_kronecker.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
     </goal>
     <goal name="VC ket_kronecker.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="143"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_kronecker.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
    </goal>
    <goal name="VC ket_kronecker.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_kronecker.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64"/></proof>
  </goal>
  <goal name="VC ket_kronecker.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_kronecker_l" expl="VC for ket_kronecker_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_kronecker_l.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.60"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ket_kron_l" expl="VC for set_ket_kron_l" proved="true">
 <proof prover="6"><result status="valid" time="0.27" steps="143"/></proof>
 </goal>
</theory>
<theory name="Kronecker_Qbit" proved="true">
 <goal name="VC ket" expl="VC for ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="139"/></proof>
  </goal>
  <goal name="VC ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
  </goal>
  <goal name="VC ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="141"/></proof>
  </goal>
  <goal name="VC ket.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="147"/></proof>
  </goal>
  <goal name="VC ket.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
  </goal>
  <goal name="VC ket.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="140"/></proof>
  </goal>
  <goal name="VC ket.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket.6.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="155"/></proof>
   </goal>
   <goal name="VC ket.6.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="146"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52"/></proof>
  </goal>
  <goal name="VC ket.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="141"/></proof>
  </goal>
  <goal name="VC ket.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="143"/></proof>
  </goal>
  <goal name="VC ket.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket.10.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.48"/></proof>
   </goal>
   <goal name="VC ket.10.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="151"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.51"/></proof>
  </goal>
  <goal name="VC ket.12" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="171"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_ket_zero" expl="VC for scal_ket_zero" proved="true">
 <proof prover="6"><result status="valid" time="0.18" steps="135"/></proof>
 </goal>
 <goal name="VC scal_ket_one" expl="VC for scal_ket_one" proved="true">
 <proof prover="6"><result status="valid" time="0.18" steps="135"/></proof>
 </goal>
 <goal name="VC ket_l" expl="VC for ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_l.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_ket_length" expl="VC for ket_ket_length" proved="true">
 <proof prover="6"><result status="valid" time="0.27" steps="141"/></proof>
 </goal>
 <goal name="VC ket_length_explicit" expl="VC for ket_length_explicit" proved="true">
 <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
 </goal>
 <goal name="VC ket_eq" expl="VC for ket_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="141"/></proof>
 </goal>
 <goal name="VC ket_rows" expl="VC for ket_rows" proved="true">
 <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
 </goal>
 <goal name="VC ket_columns" expl="VC for ket_columns" proved="true">
 <proof prover="6"><result status="valid" time="0.25" steps="139"/></proof>
 </goal>
 <goal name="VC ket_value" expl="VC for ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_value.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ket_value.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_spec2">
    <goal name="VC ket_value.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.28" steps="147"/></proof>
    </goal>
    <goal name="VC ket_value.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="145"/></proof>
    </goal>
    <goal name="VC ket_value.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="145"/></proof>
    </goal>
    <goal name="VC ket_value.0.0.3" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_valid_index">
     <goal name="VC ket_value.0.0.3.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_value.0.0.3.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.18" steps="145"/></proof>
      </goal>
      <goal name="VC ket_value.0.0.3.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.74"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_value.0.0.3.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC g_ket_value" expl="VC for g_ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC g_ket_value.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC norm_ket_basis" expl="VC for norm_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC norm_ket_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
   <goal name="VC norm_ket_basis.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ind_sum_trans" arg2="(fun (k:int) -&gt; modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0)),0,i,(power 2 n)">
    <goal name="VC norm_ket_basis.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="((ind_sum
   (fun (k:int) -&gt; modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0))
   0 (power 2 n)) = c_one)">
     <goal name="VC norm_ket_basis.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC norm_ket_basis.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(ind_sum
      (fun (k:int) -&gt;
        modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0))
      i (power 2 n))" arg2="(c_one +. ind_sum
      (fun (k:int) -&gt;
        modulus (get (ket n i) k 0) *. modulus (get (ket n i) k 0))
      (i+1) (power 2 n))">
       <goal name="VC norm_ket_basis.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_sum_null">
        <goal name="VC norm_ket_basis.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_sum_null">
         <goal name="VC norm_ket_basis.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.30" steps="151"/></proof>
         </goal>
         <goal name="VC norm_ket_basis.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC norm_ket_basis.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.77"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC norm_ket_basis.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="2.17"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC norm_ket_basis.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_sum_plus_one">
        <goal name="VC norm_ket_basis.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="add_eq_t">
         <goal name="VC norm_ket_basis.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC norm_ket_basis.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.63"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC norm_ket_basis.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC norm_ket_basis.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.17" steps="149"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC norm_ket_basis.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.17" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC norm_ket_basis.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="3.04"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC norm_ket_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_" expl="VC for get_ket_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="151"/></proof>
  </goal>
  <goal name="VC get_ket_.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="153"/></proof>
  </goal>
  <goal name="VC get_ket_.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="155"/></proof>
  </goal>
  <goal name="VC get_ket_.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="157"/></proof>
  </goal>
  <goal name="VC get_ket_.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.60"/></proof>
  </goal>
  <goal name="VC get_ket_.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.60"/></proof>
  </goal>
  <goal name="VC get_ket_.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="159"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_value" expl="VC for get_ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_value.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i = j)">
   <goal name="VC get_ket_value.0.0" expl="true case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC get_ket_value.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="4"><result status="valid" time="0.58"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_ket_value.0.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC get_ket_value.0.1.0" expl="false case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="( get (ket n i) j 0 )" arg2="c_zero">
     <goal name="VC get_ket_value.0.1.0.0" expl="false case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.29" steps="155"/></proof>
     </goal>
     <goal name="VC get_ket_value.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC get_ket_value.0.1.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="get_ket_1" arg2="(ket n i),i,n">
       <goal name="VC get_ket_value.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC get_ket_value.0.1.0.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.29" steps="156"/></proof>
        </goal>
        <goal name="VC get_ket_value.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.36" steps="160"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_values" expl="VC for get_ket_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_values.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_value_z" expl="VC for get_ket_value_z" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_value_z.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get__ket_value" expl="VC for get__ket_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get__ket_value.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ket" expl="VC for set_ket" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC set_ket.0" expl="VC for set_ket" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_ket.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="151"/></proof>
   </goal>
   <goal name="VC set_ket.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="163"/></proof>
   </goal>
   <goal name="VC set_ket.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="164"/></proof>
   </goal>
   <goal name="VC set_ket.0.3" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="j" arg2="0">
    <goal name="VC set_ket.0.3.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC set_ket.0.3.0.0" expl="precondition" proved="true">
     <proof prover="4"><result status="valid" time="0.57"/></proof>
     </goal>
     <goal name="VC set_ket.0.3.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="167"/></proof>
     </goal>
     <goal name="VC set_ket.0.3.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_ket.0.3.1" expl="equality hypothesis" proved="true">
    <proof prover="4"><result status="valid" time="0.52"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_ket.0.4" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.32" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_kets" expl="VC for kronecker_kets" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_kets.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC kronecker_kets.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC kronecker_kets.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_spec2">
     <goal name="VC kronecker_kets.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_rows">
      <goal name="VC kronecker_kets.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_rows">
       <goal name="VC kronecker_kets.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_rows">
        <goal name="VC kronecker_kets.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.28" steps="155"/></proof>
        </goal>
        <goal name="VC kronecker_kets.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.19" steps="153"/></proof>
        </goal>
        <goal name="VC kronecker_kets.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC kronecker_kets.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.29" steps="153"/></proof>
         </goal>
         <goal name="VC kronecker_kets.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="((i1 * power 2 n2) &lt;= (power 2 n1 -1) * (power 2 n2) )">
          <goal name="VC kronecker_kets.0.0.0.0.0.0.2.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.31" steps="155"/></proof>
          </goal>
          <goal name="VC kronecker_kets.0.0.0.0.0.0.2.1.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.30" steps="157"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC kronecker_kets.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="153"/></proof>
       </goal>
       <goal name="VC kronecker_kets.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker_kets.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.32" steps="153"/></proof>
      </goal>
      <goal name="VC kronecker_kets.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.17" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kronecker_kets.0.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.52"/></proof>
   </goal>
   <goal name="VC kronecker_kets.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kronecker_kets.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_values">
     <goal name="VC kronecker_kets.0.2.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(div j (columns (ket n2 i2)))" arg2="0">
      <goal name="VC kronecker_kets.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod j (columns (ket n2 i2)))" arg2="0">
       <goal name="VC kronecker_kets.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_value">
        <goal name="VC kronecker_kets.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_value">
         <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="j" arg2="0">
          <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_value">
           <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(i = ((i1 * power 2 n2) + i2))">
            <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
            <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,(power 2 n2),i1,i2">
             <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
             <proof prover="0"><result status="valid" time="0.71"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
            <transf name="replace" proved="true" arg1="(rows (ket n2 i2))" arg2="(power 2 n2)">
             <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.0.1.0" expl="false case (apply premises)" proved="true">
             <transf name="instantiate" proved="true" arg1="decomp" arg2="i,(power 2 n2)">
              <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
              <proof prover="4"><result status="valid" time="0.64"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="6"><result status="valid" time="0.29" steps="159"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.20" steps="155"/></proof>
           </goal>
           <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.43" steps="157"/></proof>
           </goal>
           <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.53"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC kronecker_kets.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="0.65"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC kronecker_kets.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="155"/></proof>
         </goal>
         <goal name="VC kronecker_kets.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.17" steps="155"/></proof>
         </goal>
         <goal name="VC kronecker_kets.0.2.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.62"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC kronecker_kets.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="155"/></proof>
        </goal>
        <goal name="VC kronecker_kets.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="155"/></proof>
        </goal>
        <goal name="VC kronecker_kets.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.62"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC kronecker_kets.0.2.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.61"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker_kets.0.2.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.70"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC kronecker_kets.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.17" steps="155"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_ket_l" expl="VC for kronecker_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_ket_l.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="151"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_ket_l_sum" expl="VC for kronecker_ket_l_sum" proved="true">
 <proof prover="6"><result status="valid" time="0.24" steps="153"/></proof>
 </goal>
 <goal name="VC kronecker_kets_bin_to_int" expl="VC for kronecker_kets_bin_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_kets_bin_to_int.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_int_def">
   <goal name="VC kronecker_kets_bin_to_int.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_int_def">
    <goal name="VC kronecker_kets_bin_to_int.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.99"/></proof>
    </goal>
    <goal name="VC kronecker_kets_bin_to_int.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="149"/></proof>
    </goal>
    <goal name="VC kronecker_kets_bin_to_int.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.31" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kronecker_kets_bin_to_int.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="149"/></proof>
   </goal>
   <goal name="VC kronecker_kets_bin_to_int.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Ket_basis" proved="true">
 <goal name="VC ket_basis" expl="VC for ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
  </goal>
  <goal name="VC ket_basis.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="145"/></proof>
  </goal>
  <goal name="VC ket_basis.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="145"/></proof>
  </goal>
  <goal name="VC ket_basis.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.76"/></proof>
  </goal>
  <goal name="VC ket_basis.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="153"/></proof>
  </goal>
  <goal name="VC ket_basis.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="VC ket_basis.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="VC ket_basis.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_basis.7.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="157"/></proof>
   </goal>
   <goal name="VC ket_basis.7.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="159"/></proof>
   </goal>
   <goal name="VC ket_basis.7.2" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) (power 2 n) 1),(cartesian_product (to_fset 0 (power 2 n)) (to_fset 0 1)),mat
">
    <goal name="VC ket_basis.7.2.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC ket_basis.7.2.0.0" expl="destruct premise" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="VC ket_basis.7.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_basis.7.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H6" arg2="in" arg3="H2">
        <goal name="VC ket_basis.7.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) (power 2 n) 1),(cartesian_product (to_fset 0 (power 2 n)) (to_fset 0 1)),mat">
         <goal name="VC ket_basis.7.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC ket_basis.7.2.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
          <transf name="apply" proved="true" arg1="H2">
          </transf>
          </goal>
          <goal name="VC ket_basis.7.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="VC ket_basis.7.2.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="exists" proved="true" arg1="a">
            <goal name="VC ket_basis.7.2.0.0.0.0.0.0.1.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_basis.7.2.0.0.0.0.0.0.1.0.0.0" proved="true">
             <proof prover="6"><result status="valid" time="0.21" steps="163"/></proof>
             </goal>
             <goal name="VC ket_basis.7.2.0.0.0.0.0.0.1.0.0.1" proved="true">
             <proof prover="6"><result status="valid" time="0.28" steps="165"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_basis.7.2.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC ket_basis.7.2.0.1.0" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(sec a = 0)">
       <goal name="VC ket_basis.7.2.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.75"/></proof>
       </goal>
       <goal name="VC ket_basis.7.2.0.1.0.1" expl="postcondition" proved="true">
       <transf name="exists" proved="true" arg1="(fir a)">
        <goal name="VC ket_basis.7.2.0.1.0.1.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_basis.7.2.0.1.0.1.0.0" proved="true">
         <proof prover="3"><result status="valid" time="1.88"/></proof>
         </goal>
         <goal name="VC ket_basis.7.2.0.1.0.1.0.1" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC ket_basis.7.2.0.1.0.1.0.1.0" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="VC ket_basis.7.2.0.1.0.1.0.1.0.0" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ket_basis.7.2.0.1.0.1.0.1.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="h">
             <goal name="VC ket_basis.7.2.0.1.0.1.0.1.0.0.0.0" proved="true">
             <proof prover="0"><result status="valid" time="2.28"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unary_ket_basis" expl="VC for unary_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unary_ket_basis.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="143"/></proof>
  </goal>
  <goal name="VC unary_ket_basis.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="145"/></proof>
  </goal>
  <goal name="VC unary_ket_basis.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
  </goal>
  <goal name="VC unary_ket_basis.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unary_ket_basis.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
   </goal>
   <goal name="VC unary_ket_basis.3.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unary_ket_basis.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unary_ket_basis.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
   </goal>
   <goal name="VC unary_ket_basis.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unary_ket_basis.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unary_ket_basis.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="143"/></proof>
   </goal>
   <goal name="VC unary_ket_basis.5.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unary_ket_basis.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
  </goal>
  <goal name="VC unary_ket_basis.7" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) (power 2 n) 1),(cartesian_product (to_fset 0 (power 2 n)) (to_fset 0 1)),e
">
   <goal name="VC unary_ket_basis.7.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC unary_ket_basis.7.0.0" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="2.23"/></proof>
    </goal>
    <goal name="VC unary_ket_basis.7.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC unary_ket_basis.7.0.1.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="VC unary_ket_basis.7.0.1.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(fir a)">
       <goal name="VC unary_ket_basis.7.0.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC unary_ket_basis.7.0.1.0.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.29" steps="157"/></proof>
        </goal>
        <goal name="VC unary_ket_basis.7.0.1.0.0.0.1" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0.0" proved="true">
           <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
            <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0.0.0" proved="true">
            <proof prover="0"><result status="valid" time="1.61"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0.1" proved="true">
           <transf name="assert" proved="true" arg1="false">
            <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(not mem (fir a) (to_fset 0 (power 2 n)))">
             <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
             <proof prover="4"><result status="valid" time="0.62"/></proof>
             </goal>
             <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0.1.0.1" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="0.27" steps="158"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC unary_ket_basis.7.0.1.0.0.0.1.0.0.1.1" proved="true">
            <proof prover="6"><result status="valid" time="0.33" steps="153"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unary_ket_basis.8" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (i:int) -&gt;
     if 0 &lt;= i /\ i &lt; power 2 n then ind_basis_mat i 0 (power 2 n) 1
     else make 1 1 c_one),(to_fset 0 (power 2 n)),e">
   <goal name="VC unary_ket_basis.8.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC unary_ket_basis.8.0.0" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="1.97"/></proof>
    </goal>
    <goal name="VC unary_ket_basis.8.0.1" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (i:int) -&gt;
     if 0 &lt;= i /\ i &lt; power 2 n then ind_basis_mat i 0 (power 2 n) 1
     else make 1 1 c_one),((to_fset 0 (power 2 n))),e">
     <goal name="VC unary_ket_basis.8.0.1.0" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC unary_ket_basis.8.0.1.0.0" expl="destruct premise" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC unary_ket_basis.8.0.1.0.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC unary_ket_basis.8.0.1.0.1" expl="precondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC unary_ket_basis.8.0.1.0.1.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_basis_spec6">
        <goal name="VC unary_ket_basis.8.0.1.0.1.0.0" expl="precondition" proved="true">
        <transf name="apply" proved="true" arg1="set_map_mem">
         <goal name="VC unary_ket_basis.8.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC unary_ket_basis.8.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="(a,0)">
           <goal name="VC unary_ket_basis.8.0.1.0.1.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC unary_ket_basis.8.0.1.0.1.0.0.0.0.0.0" proved="true">
            <proof prover="0"><result status="valid" time="2.43"/></proof>
            </goal>
            <goal name="VC unary_ket_basis.8.0.1.0.1.0.0.0.0.0.1" proved="true">
            <proof prover="4"><result status="valid" time="0.69"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC unary_ket_basis.8.0.1.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unary_ket_basis.9" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.72"/></proof>
  </goal>
  <goal name="VC unary_ket_basis.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.81"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC to_ket_basis" expl="VC for to_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC to_ket_basis.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
  </goal>
  <goal name="VC to_ket_basis.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_basis_index" expl="VC for ket_basis_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_index.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="VC ket_basis_index.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57"/></proof>
  </goal>
  <goal name="VC ket_basis_index.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC ket_basis_index.2.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="157"/></proof>
   </goal>
   <goal name="VC ket_basis_index.2.1" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make_c">
    <goal name="VC ket_basis_index.2.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.51"/></proof>
    </goal>
    <goal name="VC ket_basis_index.2.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
    </goal>
    <goal name="VC ket_basis_index.2.1.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.31" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_basis_index.2.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_basis_index.2.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make">
     <goal name="VC ket_basis_index.2.2.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ket_basis_index.2.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.64"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_basis_index.2.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="158"/></proof>
     </goal>
     <goal name="VC ket_basis_index.2.2.0.2" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_basis_index.2.2.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="159"/></proof>
      </goal>
      <goal name="VC ket_basis_index.2.2.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.46"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_index.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC ket_basis_index.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC ket_basis_index.3.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_basis_index.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.39" steps="163"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_basis_index.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.29" steps="162"/></proof>
    </goal>
    <goal name="VC ket_basis_index.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.31" steps="161"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_index.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.42" steps="159"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ket_basis" expl="VC for set_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_ket_basis.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.66"/></proof>
  </goal>
  <goal name="VC set_ket_basis.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC set_ket_basis.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="155"/></proof>
  </goal>
  <goal name="VC set_ket_basis.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="159"/></proof>
  </goal>
  <goal name="VC set_ket_basis.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="161"/></proof>
  </goal>
  <goal name="VC set_ket_basis.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC set_ket_basis.5.0" expl="precondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC set_ket_basis.5.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="indic_2_if">
     <goal name="VC set_ket_basis.5.0.0.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="j" arg2="0">
      <goal name="VC set_ket_basis.5.0.0.0.0" expl="precondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC set_ket_basis.5.0.0.0.0.0" expl="VC for set_ket_basis" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC set_ket_basis.5.0.0.0.0.0.0" expl="precondition" proved="true">
        <proof prover="6"><result status="valid" time="0.30" steps="176"/></proof>
        </goal>
        <goal name="VC set_ket_basis.5.0.0.0.0.0.1" expl="precondition" proved="true">
        <proof prover="6"><result status="valid" time="0.27" steps="176"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_ket_basis.5.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="1.78"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_ket_basis.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.74"/></proof>
  </goal>
  <goal name="VC set_ket_basis.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="VC set_ket_basis.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="161"/></proof>
  </goal>
  <goal name="VC set_ket_basis.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC from_ket_basis" expl="VC for from_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC from_ket_basis.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="145"/></proof>
  </goal>
  <goal name="VC from_ket_basis.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H" arg2="in" arg3="H1">
   <goal name="VC from_ket_basis.1.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (i:int) -&gt; ind_basis_mat i 0 (power 2 n) 1),(to_fset 0 (power 2 n)),m">
    <goal name="VC from_ket_basis.1.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC from_ket_basis.1.0.0.0" expl="destruct premise" proved="true">
     <transf name="apply" proved="true" arg1="H1">
     </transf>
     </goal>
     <goal name="VC from_ket_basis.1.0.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC from_ket_basis.1.0.0.1.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.27"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ket_basis" expl="VC for int_to_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_to_ket_basis.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="147"/></proof>
  </goal>
  <goal name="VC int_to_ket_basis.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_to_ket_basis.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="148"/></proof>
   </goal>
   <goal name="VC int_to_ket_basis.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="148"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_ket_basis.2" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC int_to_ket_basis.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_basis_spec6">
    <goal name="VC int_to_ket_basis.2.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_map_mem">
     <goal name="VC int_to_ket_basis.2.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(i,0)">
      <goal name="VC int_to_ket_basis.2.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC int_to_ket_basis.2.0.0.0.0.0" proved="true">
       <transf name="apply" proved="true" arg1="mem_cartesian_product">
        <goal name="VC int_to_ket_basis.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.35" steps="151"/></proof>
        </goal>
        <goal name="VC int_to_ket_basis.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.42" steps="151"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_ket_basis.2.0.0.0.0.1" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_basis_mat_def">
         <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_mat">
          <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.74"/></proof>
          </goal>
          <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.74"/></proof>
          </goal>
          <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="j" arg2="0">
            <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="get_ket_value">
             <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make">
              <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.69"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.29" steps="153"/></proof>
               </goal>
               <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="0.61"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
             </goal>
             <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.22" steps="151"/></proof>
              </goal>
              <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.2.1" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="0.58"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.64"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.0.2.0.1" expl="equality hypothesis" proved="true">
            <proof prover="4"><result status="valid" time="0.60"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.57"/></proof>
          </goal>
          <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.55"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.57"/></proof>
          </goal>
          <goal name="VC int_to_ket_basis.2.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.55"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_ket_basis.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC is_a_ket_basis_elt" expl="VC for is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC is_a_ket_basis_elt.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
  </goal>
  <goal name="VC is_a_ket_basis_elt.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_basis_elt_are_kets" expl="VC for ket_basis_elt_are_kets" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_elt_are_kets.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_is_a_ket_basis_elt" expl="VC for get_is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_is_a_ket_basis_elt.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_is_a_ket_basis_elt.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC get_is_a_ket_basis_elt.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="147"/></proof>
  </goal>
  <goal name="VC get_is_a_ket_basis_elt.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="from_ket_basis" arg2="(ket_length m),m">
   <goal name="VC get_is_a_ket_basis_elt.2.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC get_is_a_ket_basis_elt.2.0.0" expl="destruct premise" proved="true">
    <proof prover="6"><result status="valid" time="0.39" steps="149"/></proof>
    </goal>
    <goal name="VC get_is_a_ket_basis_elt.2.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC get_is_a_ket_basis_elt.2.0.1.0" expl="destruct premise" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
     </goal>
     <goal name="VC get_is_a_ket_basis_elt.2.0.1.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="i">
       <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.19" steps="153"/></proof>
        </goal>
        <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.1" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="153"/></proof>
        </goal>
        <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_mat">
         <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.64"/></proof>
         </goal>
         <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.65"/></proof>
         </goal>
         <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="j" arg2="0">
           <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_value">
            <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0" expl="apply premises" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Hinst">
              <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ind_basis_mat_def">
               <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make">
                <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="0.65"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.26" steps="157"/></proof>
                 </goal>
                 <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.50"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.18" steps="155"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.18" steps="155"/></proof>
               </goal>
               <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.31" steps="155"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
            </goal>
            <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.50"/></proof>
            </goal>
            <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.3.0" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.33" steps="157"/></proof>
             </goal>
             <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.0.3.1" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.50"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC get_is_a_ket_basis_elt.2.0.1.1.0.0.2.2.0.1" expl="equality hypothesis" proved="true">
           <proof prover="4"><result status="valid" time="0.54"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC get_is_a_ket_basis_elt.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC get_is_a_ket_basis_elt.3.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="i">
    <goal name="VC get_is_a_ket_basis_elt.3.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC get_is_a_ket_basis_elt.3.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="153"/></proof>
     </goal>
     <goal name="VC get_is_a_ket_basis_elt.3.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="153"/></proof>
     </goal>
     <goal name="VC get_is_a_ket_basis_elt.3.0.0.2" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="155"/></proof>
     </goal>
     <goal name="VC get_is_a_ket_basis_elt.3.0.0.3" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="161"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC get_is_a_ket_basis_elt.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_is_a_ket_basis_elt.4.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.49"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_is_a_ket_basis_elt_indic" expl="VC for get_is_a_ket_basis_elt_indic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_is_a_ket_basis_elt_indic.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="143"/></proof>
  </goal>
  <goal name="VC get_is_a_ket_basis_elt_indic.1" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H2">
   <goal name="VC get_is_a_ket_basis_elt_indic.1.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="i">
    <goal name="VC get_is_a_ket_basis_elt_indic.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC get_is_a_ket_basis_elt_indic.1.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.32" steps="159"/></proof>
     </goal>
     <goal name="VC get_is_a_ket_basis_elt_indic.1.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="159"/></proof>
     </goal>
     <goal name="VC get_is_a_ket_basis_elt_indic.1.0.0.2" proved="true">
     <proof prover="0"><result status="valid" time="0.62"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_is_a_ket_basis_elt" expl="VC for set_is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_is_a_ket_basis_elt.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_is_a_ket_basis_elt.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC set_is_a_ket_basis_elt.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="is_a_ket_basis_elt_def">
     <goal name="VC set_is_a_ket_basis_elt.0.0.0.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
      <proof prover="6"><result status="valid" time="0.32" steps="152"/></proof>
      </goal>
      <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1" expl="VC for set_is_a_ket_basis_elt" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_basis_def">
       <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
       <transf name="rewrite" proved="true" arg1="basis_mat_def">
        <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0" expl="VC for set_is_a_ket_basis_elt" proved="true">
        <transf name="apply" proved="true" arg1="set_map_mem">
         <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="(i,0)">
          <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.0" proved="true">
           <transf name="apply" proved="true" arg1="mem_cartesian_product">
            <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.38" steps="154"/></proof>
            </goal>
            <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.26" steps="154"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_mat">
               <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="2.08" steps="154"/></proof>
               </goal>
               <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="1.76" steps="154"/></proof>
               </goal>
               <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="ind_basis_mat_values">
                 <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="j" arg2="0">
                  <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="0.66"/></proof>
                  </goal>
                  <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="6"><result status="valid" time="2.86" steps="156"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.20" steps="154"/></proof>
                 </goal>
                 <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.21" steps="154"/></proof>
                 </goal>
                 <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.3" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="2.71" steps="157"/></proof>
                 </goal>
                 <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.0.2.0.4" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="2.41" steps="157"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.0.0.0.1.0.0.1" proved="true">
              <proof prover="6"><result status="valid" time="0.22" steps="152"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
        </goal>
        <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="152"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC set_is_a_ket_basis_elt.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.30" steps="154"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_is_a_ket_basis_elt_exists" expl="VC for set_is_a_ket_basis_elt_exists" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_is_a_ket_basis_elt_exists.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_is_a_ket_basis_elt">
   <goal name="VC set_is_a_ket_basis_elt_exists.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="151"/></proof>
   </goal>
   <goal name="VC set_is_a_ket_basis_elt_exists.0.1" expl="apply premises" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="j">
     <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="149"/></proof>
      </goal>
      <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.1" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
      </goal>
      <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.62"/></proof>
       </goal>
       <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.95"/></proof>
       </goal>
       <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="j" arg2="0">
         <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_value">
          <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.01"/></proof>
          </goal>
          <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.29" steps="153"/></proof>
          </goal>
          <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.19" steps="151"/></proof>
          </goal>
          <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.0.3" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.0.3.0" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.27" steps="153"/></proof>
           </goal>
           <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.0.3.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.57"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC set_is_a_ket_basis_elt_exists.0.1.0.0.2.2.0.1" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="0.49"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_func_sets_ket_basis_elts" expl="VC for ket_func_sets_ket_basis_elts" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_func_sets_ket_basis_elts.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
  </goal>
  <goal name="VC ket_func_sets_ket_basis_elts.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="159"/></proof>
  </goal>
  <goal name="VC ket_func_sets_ket_basis_elts.2" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="i">
   <goal name="VC ket_func_sets_ket_basis_elts.2.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_func_sets_ket_basis_elts.2.0.0" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="159"/></proof>
    </goal>
    <goal name="VC ket_func_sets_ket_basis_elts.2.0.1" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="159"/></proof>
    </goal>
    <goal name="VC ket_func_sets_ket_basis_elts.2.0.2" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.34" steps="162"/></proof>
     </goal>
     <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="162"/></proof>
     </goal>
     <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="j" arg2="0">
       <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_value">
        <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.33" steps="164"/></proof>
         </goal>
         <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="164"/></proof>
          </goal>
          <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="164"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="162"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="162"/></proof>
        </goal>
        <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="162"/></proof>
         </goal>
         <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="162"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.52"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_func_sets_ket_basis_elts.2.0.2.2.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="0.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_func_sets_ket_basis_elts.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
  </goal>
  <goal name="VC ket_func_sets_ket_basis_elts.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="161"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_is_a_ket_basis_elt" expl="VC for kronecker_is_a_ket_basis_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_is_a_ket_basis_elt.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="145"/></proof>
  </goal>
  <goal name="VC kronecker_is_a_ket_basis_elt.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker_is_a_ket_basis_elt.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_is_a_ket_basis_elt.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker_is_a_ket_basis_elt.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.48" steps="183"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_is_a_ket_basis_elt.3" expl="precondition" proved="true">
  <transf name="destruct" proved="true" arg1="H6">
   <goal name="VC kronecker_is_a_ket_basis_elt.3.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="H11">
    <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0" expl="precondition" proved="true">
    <transf name="exists" proved="true" arg1="(i1 * power 2 (ket_length y) + i)">
     <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="187"/></proof>
      </goal>
      <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.1" proved="true">
      <transf name="replace" proved="true" arg1="(ket_length (kronecker x y))" arg2="(ket_length x+ ket_length y)">
       <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.1.0" proved="true">
       <proof prover="6"><result status="valid" time="0.51" steps="189"/></proof>
       </goal>
       <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.45" steps="189"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker x y)" arg2="(kronecker (ket (ket_length x) i2) (ket (ket_length y) i1))">
       <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_kets">
        <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="ket_eq">
         <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.51"/></proof>
         </goal>
         <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.60"/></proof>
         </goal>
         <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.0.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="190"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.38" steps="192"/></proof>
        </goal>
        <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.45" steps="192"/></proof>
        </goal>
        <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.3" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.3.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="190"/></proof>
         </goal>
         <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.3.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.18" steps="190"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.4" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.4.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="190"/></proof>
         </goal>
         <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.0.4.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.18" steps="190"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC kronecker_is_a_ket_basis_elt.3.0.0.0.2.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.17" steps="190"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_is_a_ket_basis_elt.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker_is_a_ket_basis_elt.4.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="183"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_is_a_ket_basis_elt" expl="VC for ket_is_a_ket_basis_elt" proved="true">
 <proof prover="6"><result status="valid" time="0.43" steps="149"/></proof>
 </goal>
 <goal name="VC ket_basis_non_null_val" expl="VC for ket_basis_non_null_val" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_non_null_val.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ket_basis_non_null_val.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ket_basis_non_null_val.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_def2">
     <goal name="VC ket_basis_non_null_val.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_mat">
      <goal name="VC ket_basis_non_null_val.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="2.51"/></proof>
      </goal>
      <goal name="VC ket_basis_non_null_val.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="2.57"/></proof>
      </goal>
      <goal name="VC ket_basis_non_null_val.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_basis_non_null_val.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="j" arg2="0">
        <goal name="VC ket_basis_non_null_val.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(i = i1)">
         <goal name="VC ket_basis_non_null_val.0.0.0.0.2.0.0.0" expl="true case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="1.88"/></proof>
         </goal>
         <goal name="VC ket_basis_non_null_val.0.0.0.0.2.0.0.1" expl="false case (apply premises)" proved="true">
         <proof prover="4"><result status="valid" time="2.94"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_basis_non_null_val.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.69"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_basis_non_null_val.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="156"/></proof>
     </goal>
     <goal name="VC ket_basis_non_null_val.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="156"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_int" expl="VC for ket_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_int.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
  </goal>
  <goal name="VC ket_to_int.1" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.1.0" expl="loop invariant init" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="159"/></proof>
   </goal>
   <goal name="VC ket_to_int.1.1" expl="loop invariant init" proved="true">
   <proof prover="6"><result status="valid" time="0.36" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.2" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.2.0" expl="loop invariant init" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.3" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.3.0" expl="loop invariant init" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="171"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.4" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.4.0" expl="loop invariant init" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="169"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.5" expl="loop invariant init" proved="true">
  <transf name="split_vc" proved="true" >
  </transf>
  </goal>
  <goal name="VC ket_to_int.6" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.6.0" expl="loop variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.51"/></proof>
   </goal>
   <goal name="VC ket_to_int.6.1" expl="loop variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="177"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.7" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.7.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="177"/></proof>
   </goal>
   <goal name="VC ket_to_int.7.1" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.8" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.8.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.9" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.9.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.10" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.10.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.11" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.11.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.12.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.13" expl="loop variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.13.0" expl="loop variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.55"/></proof>
   </goal>
   <goal name="VC ket_to_int.13.1" expl="loop variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="179"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.14" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.14.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="179"/></proof>
   </goal>
   <goal name="VC ket_to_int.14.1" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="179"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.15" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.15.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="179"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.16" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.16.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="180"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.17" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.17.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="180"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.18" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.18.0" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="180"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.19.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="169"/></proof>
   </goal>
   <goal name="VC ket_to_int.19.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.82"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.20.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="171"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.21" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.21.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int.22" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int.22.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="181"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_int_ket" expl="VC for ket_to_int_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_int_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
  </goal>
  <goal name="VC ket_to_int_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="159"/></proof>
  </goal>
  <goal name="VC ket_to_int_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
  </goal>
  <goal name="VC ket_to_int_ket.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_int_ket.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="159"/></proof>
   </goal>
   <goal name="VC ket_to_int_ket.3.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_int_ket.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC equal_ket_by_int" expl="VC for equal_ket_by_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC equal_ket_by_int.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC equal_ket_by_int.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="VC equal_ket_by_int.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC equal_ket_by_int.0.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
     </goal>
     <goal name="VC equal_ket_by_int.0.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC equal_ket_by_int.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC equal_ket_by_int.0.1.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC equal_ket_by_int.0.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="m" arg2="(ket l (ket_to_int m))">
      <goal name="VC equal_ket_by_int.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="n" arg2="(ket l (ket_to_int n))">
       <goal name="VC equal_ket_by_int.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="155"/></proof>
       </goal>
       <goal name="VC equal_ket_by_int.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="0.51"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC equal_ket_by_int.0.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.51"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_to_ket" expl="VC for bin_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bin_to_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="145"/></proof>
  </goal>
  <goal name="VC bin_to_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="145"/></proof>
  </goal>
  <goal name="VC bin_to_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="149"/></proof>
  </goal>
  <goal name="VC bin_to_ket.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_is_a_ket_basis_elt">
   <goal name="VC bin_to_ket.3.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="157"/></proof>
   </goal>
   <goal name="VC bin_to_ket.3.1" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="(bin_to_int bvx n)">
    <goal name="VC bin_to_ket.3.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bin_to_ket.3.1.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="157"/></proof>
     </goal>
     <goal name="VC bin_to_ket.3.1.0.1" proved="true">
     <transf name="replace" proved="true" arg1="(ket_length result)" arg2="n">
      <goal name="VC bin_to_ket.3.1.0.1.0" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_int_def">
       <goal name="VC bin_to_ket.3.1.0.1.0.0" proved="true">
       <proof prover="0"><result status="valid" time="1.94"/></proof>
       </goal>
       <goal name="VC bin_to_ket.3.1.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
       </goal>
       <goal name="VC bin_to_ket.3.1.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bin_to_ket.3.1.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_to_ket.3.1.0.2" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_to_ket.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC bin_to_ket.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC bin_to_ket.4.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC bin_to_ket.4.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_spec5">
      <goal name="VC bin_to_ket.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="164"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_to_ket.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC bin_to_ket.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="result" arg2="(ket n (bin_to_int bvx n))">
    <goal name="VC bin_to_ket.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_to_int_ket">
     <goal name="VC bin_to_ket.5.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="164"/></proof>
     </goal>
     <goal name="VC bin_to_ket.5.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="164"/></proof>
     </goal>
     <goal name="VC bin_to_ket.5.0.0.2" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC bin_to_ket.5.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="164"/></proof>
      </goal>
      <goal name="VC bin_to_ket.5.0.0.2.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_int_def">
       <goal name="VC bin_to_ket.5.0.0.2.1.0" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.85"/></proof>
       </goal>
       <goal name="VC bin_to_ket.5.0.0.2.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="164"/></proof>
       </goal>
       <goal name="VC bin_to_ket.5.0.0.2.1.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="164"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_to_ket.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="164"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_to_ket.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
  </goal>
  <goal name="VC bin_to_ket.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
  </goal>
  <goal name="VC bin_to_ket.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
  </goal>
  <goal name="VC bin_to_ket.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="164"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_to_ket_l" expl="VC for bin_to_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bin_to_ket_l.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="149"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_to_ket_eq" expl="VC for bin_to_ket_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bin_to_ket_eq.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_ket_def">
   <goal name="VC bin_to_ket_eq.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_ket_def">
    <goal name="VC bin_to_ket_eq.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(bin_to_int bvx1 n1)" arg2="(bin_to_int bvx2 n2)">
     <goal name="VC bin_to_ket_eq.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
     </goal>
     <goal name="VC bin_to_ket_eq.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="bin_to_int_def">
      <goal name="VC bin_to_ket_eq.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_int_def">
       <goal name="VC bin_to_ket_eq.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
        <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
         <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="mult_eq">
             <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
               <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="2.35"/></proof>
               </goal>
               <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="0.51"/></proof>
               </goal>
               <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.65"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="0.74"/></proof>
              </goal>
              <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.60"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length">
               <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
               </goal>
               <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="0.53"/></proof>
               </goal>
               <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.23" steps="153"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="0.74"/></proof>
              </goal>
              <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.19" steps="153"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
          </goal>
          <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
            </goal>
            <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.51"/></proof>
            </goal>
            <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.52"/></proof>
           </goal>
           <goal name="VC bin_to_ket_eq.0.0.0.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC bin_to_ket_eq.0.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
       </goal>
       <goal name="VC bin_to_ket_eq.0.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bin_to_ket_eq.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
      </goal>
      <goal name="VC bin_to_ket_eq.0.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_to_ket_eq.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
    </goal>
    <goal name="VC bin_to_ket_eq.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_to_ket_eq.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
   </goal>
   <goal name="VC bin_to_ket_eq.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_kets_bin_to_ket" expl="VC for kronecker_kets_bin_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_kets_bin_to_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="149"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="151"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="151"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="151"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
  </goal>
  <goal name="VC kronecker_kets_bin_to_ket.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_ket_def">
   <goal name="VC kronecker_kets_bin_to_ket.8.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC kronecker_kets_bin_to_ket.8.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.82"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kronecker_kets_bin_to_ket.8.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="153"/></proof>
   </goal>
   <goal name="VC kronecker_kets_bin_to_ket.8.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="153"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_ket_to_int" expl="VC for kronecker_ket_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_ket_to_int.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="147"/></proof>
  </goal>
  <goal name="VC kronecker_ket_to_int.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="149"/></proof>
  </goal>
  <goal name="VC kronecker_ket_to_int.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.50"/></proof>
  </goal>
  <goal name="VC kronecker_ket_to_int.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC kronecker_ket_to_int.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_to_int_ket">
    <goal name="VC kronecker_ket_to_int.3.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
    </goal>
    <goal name="VC kronecker_ket_to_int.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="153"/></proof>
    </goal>
    <goal name="VC kronecker_ket_to_int.3.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kronecker_ket_to_int.3.0.2.0" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c. 0&lt;= a -&gt; 0&lt;= b -&gt; 0&lt;= c -&gt; 0&lt;= a*b+c)">
      <goal name="VC kronecker_ket_to_int.3.0.2.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC kronecker_ket_to_int.3.0.2.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="157"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker_ket_to_int.3.0.2.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="h">
       <goal name="VC kronecker_ket_to_int.3.0.2.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.28" steps="153"/></proof>
       </goal>
       <goal name="VC kronecker_ket_to_int.3.0.2.0.1.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.28" steps="153"/></proof>
       </goal>
       <goal name="VC kronecker_ket_to_int.3.0.2.0.1.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="153"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC kronecker_ket_to_int.3.0.2.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.30" steps="153"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_ket_to_int" expl="VC for ket_ket_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_ket_to_int.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="143"/></proof>
  </goal>
  <goal name="VC ket_ket_to_int.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="153"/></proof>
  </goal>
  <goal name="VC ket_ket_to_int.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="155"/></proof>
  </goal>
  <goal name="VC ket_ket_to_int.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="164"/></proof>
  </goal>
  <goal name="VC ket_ket_to_int.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
  </goal>
  <goal name="VC ket_ket_to_int.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="168"/></proof>
  </goal>
  <goal name="VC ket_ket_to_int.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="164"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_ket_to_int_values" expl="VC for ket_ket_to_int_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_ket_to_int_values.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
  </goal>
  <goal name="VC ket_ket_to_int_values.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_basis_projection" expl="VC for ket_basis_projection" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_projection.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="151"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="155"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="167"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="170"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.6" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ket_basis_projection.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_value_z">
    <goal name="VC ket_basis_projection.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_basis_mat_def">
     <goal name="VC ket_basis_projection.6.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC ket_basis_projection.6.0.0.0.0" expl="precondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_basis_projection.6.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.01"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_basis_projection.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="2.40" steps="178"/></proof>
      </goal>
      <goal name="VC ket_basis_projection.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="2.43" steps="178"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_basis_projection.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="175"/></proof>
     </goal>
     <goal name="VC ket_basis_projection.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="175"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_basis_projection.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="2.68" steps="177"/></proof>
    </goal>
    <goal name="VC ket_basis_projection.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="175"/></proof>
    </goal>
    <goal name="VC ket_basis_projection.6.0.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="175"/></proof>
    </goal>
    <goal name="VC ket_basis_projection.6.0.4" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="2.51" steps="178"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_projection.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="169"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
  </goal>
  <goal name="VC ket_basis_projection.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="basis_projection_def">
   <goal name="VC ket_basis_projection.9.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="177"/></proof>
   </goal>
   <goal name="VC ket_basis_projection.9.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="177"/></proof>
   </goal>
   <goal name="VC ket_basis_projection.9.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="177"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_basis_projection_columns" expl="VC for ket_basis_projection_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_projection_columns.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_basis_projection_rows" expl="VC for ket_basis_projection_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_projection_rows.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_basis_projections" expl="VC for ket_basis_projections" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_projections.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="2.69"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_basis_projections.6.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="157"/></proof>
   </goal>
   <goal name="VC ket_basis_projections.6.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_projections.7" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ket_basis_projections.7.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_projections_def" arg2="in" arg3="H">
    <goal name="VC ket_basis_projections.7.0.0" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
     if valid_index m (fir o) (sec o) then basis_projection m (fir o) (sec o)
     else m),(to_indexes m),e">
     <goal name="VC ket_basis_projections.7.0.0.0" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC ket_basis_projections.7.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC ket_basis_projections.7.0.0.0.1" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC ket_basis_projections.7.0.0.0.1.0" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="set_map_mem">
        <goal name="VC ket_basis_projections.7.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="(fir a)">
         <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="2.43" steps="168"/></proof>
          </goal>
          <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="Hinst">
             <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0.0" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0.0.0" proved="true">
              <transf name="eliminate_if" proved="true" >
               <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0.0.0.0.0" proved="true">
                <proof prover="6"><result status="valid" time="2.32" steps="172"/></proof>
                </goal>
                <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0.0.0.0.1" proved="true">
                <proof prover="6"><result status="valid" time="0.33" steps="172"/></proof>
                </goal>
                <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0.0.0.0.2" proved="true">
                <proof prover="6"><result status="valid" time="2.67" steps="172"/></proof>
                </goal>
                <goal name="VC ket_basis_projections.7.0.0.0.1.0.0.0.1.0.0.0.0.0.3" proved="true">
                <proof prover="6"><result status="valid" time="0.20" steps="168"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_projections.8" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ket_basis_projections.8.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_projections_def">
    <goal name="VC ket_basis_projections.8.0.0" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (j:int) -&gt;
     if mem j (to_fset 0 (power 2 (ket_length m)))
     then ket_basis_projection m j else m),(to_fset 0 (power 2 (ket_length m))),e">
     <goal name="VC ket_basis_projections.8.0.0.0" expl="precondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC ket_basis_projections.8.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC ket_basis_projections.8.0.0.0.1" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC ket_basis_projections.8.0.0.0.1.0" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="set_map_mem">
        <goal name="VC ket_basis_projections.8.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="(a,0)">
         <goal name="VC ket_basis_projections.8.0.0.0.1.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_basis_projections.8.0.0.0.1.0.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.28" steps="168"/></proof>
          </goal>
          <goal name="VC ket_basis_projections.8.0.0.0.1.0.0.0.1" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC ket_basis_projections.8.0.0.0.1.0.0.0.1.0" proved="true">
           <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
            <goal name="VC ket_basis_projections.8.0.0.0.1.0.0.0.1.0.0" proved="true">
            <proof prover="0"><result status="valid" time="1.08"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_projections.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="157"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="157"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="159"/></proof>
  </goal>
  <goal name="VC ket_basis_projections.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_basis_projections.14.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="163"/></proof>
   </goal>
   <goal name="VC ket_basis_projections.14.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="163"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_projections.15" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC ket_basis_projections.15.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_basis_projections_antec" expl="VC for ket_basis_projections_antec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_basis_projections_antec.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="143"/></proof>
  </goal>
  <goal name="VC ket_basis_projections_antec.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
  </goal>
  <goal name="VC ket_basis_projections_antec.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
  </goal>
  <goal name="VC ket_basis_projections_antec.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
  </goal>
  <goal name="VC ket_basis_projections_antec.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
  </goal>
  <goal name="VC ket_basis_projections_antec.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="152"/></proof>
  </goal>
  <goal name="VC ket_basis_projections_antec.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_basis_projections_antec.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_basis_projections_def" arg2="in" arg3="H">
    <goal name="VC ket_basis_projections_antec.6.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (j:int) -&gt;
     if mem j (to_fset 0 (power 2 (ket_length m)))
     then ket_basis_projection m j else m),(to_fset 0 (power 2 (ket_length m))),e">
     <goal name="VC ket_basis_projections_antec.6.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC ket_basis_projections_antec.6.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC ket_basis_projections_antec.6.0.0.0.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC ket_basis_projections_antec.6.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="exists" proved="true" arg1="a">
        <goal name="VC ket_basis_projections_antec.6.0.0.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_basis_projections_antec.6.0.0.0.1.0.0.0" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="157"/></proof>
         </goal>
         <goal name="VC ket_basis_projections_antec.6.0.0.0.1.0.0.1" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="157"/></proof>
         </goal>
         <goal name="VC ket_basis_projections_antec.6.0.0.0.1.0.0.2" proved="true">
         <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_basis_projections_antec.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_basis_projections_antec.6.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_basis_projections_antec.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_basis_projections_antec.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1" arg2="in" arg3="H">
    <goal name="VC ket_basis_projections_antec.7.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="VC ket_basis_projections_antec.7.0.0.0" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="j">
      <goal name="VC ket_basis_projections_antec.7.0.0.0.0" proved="true">
      <transf name="exists" proved="true" arg1="0">
       <goal name="VC ket_basis_projections_antec.7.0.0.0.0.0" proved="true">
       <proof prover="4"><result status="valid" time="0.58"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_basis_projections_antec.7.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC ket_basis_projections_antec.7.1.0" expl="VC for ket_basis_projections_antec" proved="true">
    <transf name="exists" proved="true" arg1="j">
     <goal name="VC ket_basis_projections_antec.7.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_basis_projections_antec.7.1.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.30" steps="155"/></proof>
      </goal>
      <goal name="VC ket_basis_projections_antec.7.1.0.0.1" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="155"/></proof>
      </goal>
      <goal name="VC ket_basis_projections_antec.7.1.0.0.2" proved="true">
      <proof prover="4"><result status="valid" time="0.63"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum" expl="VC for ket_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_sum.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC ket_sum.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.82"/></proof>
    </goal>
    <goal name="VC ket_sum.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.77"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_sum.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_sum.2.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ket_sum.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC ket_sum.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_def">
      <goal name="VC ket_sum.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
       <goal name="VC ket_sum.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq_gen">
        <goal name="VC ket_sum.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="154"/></proof>
        </goal>
        <goal name="VC ket_sum.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="158"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum.2.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC ket_sum.2.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="2.02" steps="160"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum.2.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="1.99" steps="160"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum.2.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="154"/></proof>
       </goal>
       <goal name="VC ket_sum.2.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.00"/></proof>
       </goal>
       <goal name="VC ket_sum.2.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="156"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_sum.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_is_a_ket">
    <goal name="VC ket_sum.3.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC ket_sum.3.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="VC ket_sum.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC ket_sum.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.38"/></proof>
       </goal>
       <goal name="VC ket_sum.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.13"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum.3.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.17"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum.3.0.1" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(ket_length (f (choose s)))">
     <goal name="VC ket_sum.3.0.1.0" proved="true">
     <proof prover="0"><result status="valid" time="2.38"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_sum.4.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(rows result = power 2 (ket_length (f e)))">
    <goal name="VC ket_sum.4.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.84"/></proof>
    </goal>
    <goal name="VC ket_sum.4.0.1" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.32" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l" expl="VC for ket_sum_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="145"/></proof>
  </goal>
  <goal name="VC ket_sum_l.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_l.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_l.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_sum_l.3.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="154"/></proof>
   </goal>
   <goal name="VC ket_sum_l.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="151"/></proof>
  </goal>
  <goal name="VC ket_sum_l.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_l.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_is_a_ket">
   <goal name="VC ket_sum_l.6.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="162"/></proof>
   </goal>
   <goal name="VC ket_sum_l.6.1" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="VC ket_sum_l.6.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_l.6.1.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
     </goal>
     <goal name="VC ket_sum_l.6.1.0.1" proved="true">
     <proof prover="4"><result status="valid" time="0.67"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l.7" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_length
  (mat_sum (remove (choose s) s)
   (fun (i:a) -&gt; make_ket l (fun (j:int) -&gt; get (f @ i) j 0))))" arg2="l">
   <goal name="VC ket_sum_l.7.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ket_sum_l.7.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.33" steps="164"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l.7.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="get_ket_length">
    <goal name="VC ket_sum_l.7.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_l.7.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="columns_mat_sum">
     <goal name="VC ket_sum_l.7.1.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.29" steps="164"/></proof>
     </goal>
     <goal name="VC ket_sum_l.7.1.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_l.7.1.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.7.1.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.72"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.7.1.1.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.7.1.1.1.1.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.69"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.7.1.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l.7.1.1.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.7.1.1.2.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.28" steps="166"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_l.7.1.2" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="rows_mat_sum">
     <goal name="VC ket_sum_l.7.1.2.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.29" steps="164"/></proof>
     </goal>
     <goal name="VC ket_sum_l.7.1.2.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_l.7.1.2.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.7.1.2.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.70"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.7.1.2.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.7.1.2.1.1.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.70"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.7.1.2.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l.7.1.2.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.7.1.2.2.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.62"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l.8" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H1">
   <goal name="VC ket_sum_l.8.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
   </goal>
   <goal name="VC ket_sum_l.8.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H1">
    <goal name="VC ket_sum_l.8.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
     <goal name="VC ket_sum_l.8.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ket_sum_l.8.1.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ket_sum_l.8.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_let" proved="true" >
        <goal name="VC ket_sum_l.8.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H4">
         <goal name="VC ket_sum_l.8.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_sum_l.8.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_ket_l">
           <goal name="VC ket_sum_l.8.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="exists" proved="true" arg1="l">
            <goal name="VC ket_sum_l.8.1.0.0.0.0.0.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_sum_l.8.1.0.0.0.0.0.0.0.0.0.0" proved="true">
             <proof prover="6"><result status="valid" time="0.27" steps="155"/></proof>
             </goal>
             <goal name="VC ket_sum_l.8.1.0.0.0.0.0.0.0.0.0.1" proved="true">
             <proof prover="6"><result status="valid" time="0.34" steps="155"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.8.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.72"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.8.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_l.8.1.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_plus_one">
     <goal name="VC ket_sum_l.8.1.1.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ket_sum_l.8.1.1.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="VC ket_sum_l.8.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H4">
        <goal name="VC ket_sum_l.8.1.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="add_ket_def">
         <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="add_mat_eq_rev">
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_ket_rows">
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.63"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.21" steps="165"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_ket_columns">
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.27" steps="170"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_equal_ket_l">
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="l">
             <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.2.0.0.0" proved="true">
             <proof prover="6"><result status="valid" time="0.34" steps="169"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="2.54"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_ket_l">
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0" expl="apply premises" proved="true">
           <transf name="exists" proved="true" arg1="l">
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.0" proved="true">
             <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
             </goal>
             <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1" proved="true">
             <transf name="apply" proved="true" arg1="set_is_a_ket_l">
              <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
              </goal>
              <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="columns_mat_sum">
               <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.33" steps="170"/></proof>
               </goal>
               <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1.1" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="set_constant_size">
                <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1.1.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.76"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1.1.1" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1.1.1.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.81"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.1.2" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="2.61"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="rows_mat_sum">
               <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.28" steps="170"/></proof>
               </goal>
               <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2.1" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="set_constant_size">
                <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2.1.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2.1.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.77"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2.1.1" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2.1.1.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.73"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.0.0.1.2.2" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="2.77"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H10">
             <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="goal_comm">
               <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="get_ket_def">
                <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_sum_value">
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="sum_eq">
                  <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="1"><result status="valid" time="1.13"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_constant_size">
                  <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="1.97" steps="185"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="2.13" steps="185"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="2.51" steps="177"/></proof>
                 </goal>
                 <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_valid_index">
                  <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.21" steps="172"/></proof>
                   </goal>
                   <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="(rows
    (mat_sum (remove (choose s) s)
     (fun (i1:a) -&gt; make_ket l (fun (j:int) -&gt; get (f @ i1) j 0))))" arg2="(power_ 2 l)">
                    <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.0" expl="apply premises" proved="true">
                    <proof prover="6"><result status="valid" time="3.19" steps="179"/></proof>
                    </goal>
                    <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
                    <transf name="apply" proved="true" arg1="rows_mat_sum">
                     <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
                     <proof prover="6"><result status="valid" time="0.33" steps="177"/></proof>
                     </goal>
                     <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="set_constant_size">
                      <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
                       <proof prover="6"><result status="valid" time="1.89" steps="185"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
                       <proof prover="6"><result status="valid" time="2.00" steps="185"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="2.33"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.28" steps="172"/></proof>
                   </goal>
                   <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.36" steps="177"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_sum_l.8.1.1.0.0.0.0.0.3.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.34" steps="174"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_l.8.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="set_is_a_ket">
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.33" steps="170"/></proof>
          </goal>
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="l">
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.1.1.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.1.1.0.0" proved="true">
            <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
            </goal>
            <goal name="VC ket_sum_l.8.1.1.0.0.0.0.1.1.0.1" proved="true">
            <proof prover="6"><result status="valid" time="0.33" steps="170"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_l.8.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.29"/></proof>
         </goal>
         <goal name="VC ket_sum_l.8.1.1.0.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_ket_length">
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.3.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="get_ket_length">
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.3.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
           </goal>
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.3.0.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.29" steps="170"/></proof>
           </goal>
           <goal name="VC ket_sum_l.8.1.1.0.0.0.0.3.0.2" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.31" steps="170"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_l.8.1.1.0.0.0.0.3.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.21" steps="165"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.8.1.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="163"/></proof>
     </goal>
     <goal name="VC ket_sum_l.8.1.1.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_l.8.1.1.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.8.1.1.2.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.64"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.8.1.1.2.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l.8.1.1.2.1.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.64"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="154"/></proof>
  </goal>
  <goal name="VC ket_sum_l.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_sum_l.10.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.66"/></proof>
   </goal>
   <goal name="VC ket_sum_l.10.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC ket_sum_l.10.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ket_sum_l.10.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_def">
      <goal name="VC ket_sum_l.10.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_value">
       <goal name="VC ket_sum_l.10.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC ket_sum_l.10.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_l.10.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_l.10.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="( get (make_ket l (fun (j:int) -&gt; get (f @ x) j 0)) i 0)" arg2="( get_ket (make_ket l (fun (j:int) -&gt; get (f @ x) j 0)) i )">
           <goal name="VC ket_sum_l.10.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.49"/></proof>
           </goal>
           <goal name="VC ket_sum_l.10.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_def">
            <goal name="VC ket_sum_l.10.1.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.10.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.83"/></proof>
       </goal>
       <goal name="VC ket_sum_l.10.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.30" steps="160"/></proof>
       </goal>
       <goal name="VC ket_sum_l.10.1.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC ket_sum_l.10.1.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.10.1.0.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.49"/></proof>
         </goal>
         <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows
    (mat_sum s
     (fun (i1:a) -&gt; make_ket l (fun (j:int) -&gt; get (f @ i1) j 0))))" arg2="(power_ 2 l)">
          <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.37"/></proof>
          </goal>
          <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="rows_mat_sum">
           <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="160"/></proof>
           </goal>
           <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="2.85" steps="169"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="2.72" steps="169"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.10.1.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.49"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l.10.1.0.0.0.3.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.10.1.0.0.0.3.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.46" steps="160"/></proof>
         </goal>
         <goal name="VC ket_sum_l.10.1.0.0.0.3.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.63" steps="163"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_l.10.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.45" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l.10.2" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC ket_sum_l.10.2.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ket_sum_l.10.2.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_def">
      <goal name="VC ket_sum_l.10.2.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_value">
       <goal name="VC ket_sum_l.10.2.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC ket_sum_l.10.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_l.10.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_l.10.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="( get (make_ket l (fun (j:int) -&gt; get (f @ x) j 0)) i 0)" arg2="( get_ket (make_ket l (fun (j:int) -&gt; get (f @ x) j 0)) i )">
           <goal name="VC ket_sum_l.10.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.62"/></proof>
           </goal>
           <goal name="VC ket_sum_l.10.2.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_def">
            <goal name="VC ket_sum_l.10.2.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.10.2.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC ket_sum_l.10.2.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_l.10.2.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="2.05" steps="182"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l.10.2.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_l.10.2.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="1.94" steps="182"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.10.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.31" steps="173"/></proof>
       </goal>
       <goal name="VC ket_sum_l.10.2.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC ket_sum_l.10.2.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.10.2.0.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.16"/></proof>
         </goal>
         <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows
    (mat_sum s
     (fun (i1:a) -&gt; make_ket l (fun (j:int) -&gt; get (f @ i1) j 0))))" arg2="(power_ 2 l)">
          <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.24"/></proof>
          </goal>
          <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="rows_mat_sum">
           <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.28" steps="168"/></proof>
           </goal>
           <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="2.35" steps="182"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="2.36" steps="182"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.10.2.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.72"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l.10.2.0.0.0.3.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.10.2.0.0.0.3.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="168"/></proof>
         </goal>
         <goal name="VC ket_sum_l.10.2.0.0.0.3.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.36" steps="174"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_l.10.2.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.49" steps="170"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l.11" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ket_sum_l.11.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.41" steps="180"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l.12" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC ket_sum_l.12.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ket_sum_l.12.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="rows_mat_sum">
     <goal name="VC ket_sum_l.12.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="151"/></proof>
     </goal>
     <goal name="VC ket_sum_l.12.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_l.12.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_l.12.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.58"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.10"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.12.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_l.12.0.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.0.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.57"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.0.0.1.1.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.39"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.12.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l.12.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
      </goal>
      <goal name="VC ket_sum_l.12.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.63"/></proof>
      </goal>
      <goal name="VC ket_sum_l.12.0.0.2.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.30"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l.12.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ket_sum_l.12.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="columns_mat_sum">
     <goal name="VC ket_sum_l.12.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
     </goal>
     <goal name="VC ket_sum_l.12.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_l.12.1.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_l.12.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.1.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.56"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.1.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.44"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.12.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_l.12.1.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.1.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.70"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.1.0.1.1.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.79"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.12.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l.12.1.0.2.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
      </goal>
      <goal name="VC ket_sum_l.12.1.0.2.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.54"/></proof>
      </goal>
      <goal name="VC ket_sum_l.12.1.0.2.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.10"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l.12.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_l.12.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC ket_sum_l.12.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_value">
      <goal name="VC ket_sum_l.12.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_value">
       <goal name="VC ket_sum_l.12.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC ket_sum_l.12.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(get (make_ket l (fun (j1:int) -&gt; get (f @ x) j1 0)) i j)" arg2="(get_ket (make_ket l (fun (j1:int) -&gt; get (f @ x) j1 0)) i )">
           <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
            <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="get_ket_def">
             <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
             <transf name="replace" proved="true" arg1="j" arg2="0">
              <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
              <goal name="VC ket_sum_l.12.2.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="6"><result status="valid" time="0.21" steps="155"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.12.2.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC ket_sum_l.12.2.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.12.2.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l.12.2.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.12.2.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.12.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.2.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.12.2.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC ket_sum_l.12.2.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_sum_l.12.2.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.12.2.0.0.1.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_sum_l.12.2.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.12.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
      </goal>
      <goal name="VC ket_sum_l.12.2.0.0.3" expl="rewrite premises" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="VC ket_sum_l.12.2.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC ket_sum_l.12.2.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.12.2.0.0.3.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
         </goal>
         <goal name="VC ket_sum_l.12.2.0.0.3.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows
    (mat_sum s (fun (i1:a) -&gt; make_ket l (fun (j1:int) -&gt; get (f @ i1) j1 0))))" arg2="(power_ 2 l)">
          <goal name="VC ket_sum_l.12.2.0.0.3.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
          </goal>
          <goal name="VC ket_sum_l.12.2.0.0.3.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="rows_mat_sum">
           <goal name="VC ket_sum_l.12.2.0.0.3.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
           </goal>
           <goal name="VC ket_sum_l.12.2.0.0.3.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
           </goal>
           <goal name="VC ket_sum_l.12.2.0.0.3.0.0.1.1.2" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l.12.2.0.0.3.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.12.2.0.0.3.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
         </goal>
         <goal name="VC ket_sum_l.12.2.0.0.3.0.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.12.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_l.12.2.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(get result i j)" arg2="(get_ket result i )">
     <goal name="VC ket_sum_l.12.2.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H4">
      <goal name="VC ket_sum_l.12.2.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_value">
       <goal name="VC ket_sum_l.12.2.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC ket_sum_l.12.2.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.64"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.12.2.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.04"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.2.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.2.1.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.74"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.12.2.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.52"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.12.2.1.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_l.12.2.2" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(get result i j)" arg2="(get_ket result i)">
     <goal name="VC ket_sum_l.12.2.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H4">
      <goal name="VC ket_sum_l.12.2.2.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_value">
       <goal name="VC ket_sum_l.12.2.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.12"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.2.2.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC ket_sum_l.12.2.2.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.12.2.2.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.38"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l.12.2.2.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.12.2.2.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.37"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l.12.2.2.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="171"/></proof>
       </goal>
       <goal name="VC ket_sum_l.12.2.2.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC ket_sum_l.12.2.2.0.0.3.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_l.12.2.2.0.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.36" steps="176"/></proof>
         </goal>
         <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(rows (mat_sum s f))" arg2="(power_ 2 l)">
          <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.63"/></proof>
          </goal>
          <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="rows_mat_sum">
           <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.26" steps="171"/></proof>
           </goal>
           <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="2.43"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="2.38"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_sum_l.12.2.2.0.0.3.0.1.1.2.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="2.31"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l.12.2.2.0.0.3.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.85"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l.12.2.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.61"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l.12.2.2.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="0.63"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l.13" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="158"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_to_mat_sum" expl="VC for ket_sum_l_to_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_to_mat_sum.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ket_sum_l_to_mat_sum.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_spec5">
    <goal name="VC ket_sum_l_to_mat_sum.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC ket_sum_l_to_mat_sum.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="145"/></proof>
    </goal>
    <goal name="VC ket_sum_l_to_mat_sum.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_rows" expl="VC for ket_sum_l_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_rows.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(power 2 l)" arg2="(power 2 (ket_length (ket_sum_l s f l)))">
   <goal name="VC ket_sum_l_rows.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="147"/></proof>
   </goal>
   <goal name="VC ket_sum_l_rows.0.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ket_sum_l_rows.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_spec">
     <goal name="VC ket_sum_l_rows.0.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
     </goal>
     <goal name="VC ket_sum_l_rows.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="145"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_value" expl="VC for ket_sum_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_value.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ket_sum_l_value.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ket_sum_l_value.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="j" arg2="0">
     <goal name="VC ket_sum_l_value.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(get (ket_sum_l s f l) i 0 )" arg2="(get_ket (ket_sum_l s f l) i )">
      <goal name="VC ket_sum_l_value.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_l_spec3">
       <goal name="VC ket_sum_l_value.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC ket_sum_l_value.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_l_value.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.33" steps="156"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l_value.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.25" steps="152"/></proof>
       </goal>
       <goal name="VC ket_sum_l_value.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="2.55" steps="154"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l_value.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.33" steps="154"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l_value.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="152"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_sum_l_value" expl="VC for get_ket_sum_l_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_sum_l_value.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC get_ket_sum_l_value.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_def">
    <goal name="VC get_ket_sum_l_value.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_value">
     <goal name="VC get_ket_sum_l_value.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="VC get_ket_sum_l_value.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC get_ket_sum_l_value.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.28" steps="154"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC get_ket_sum_l_value.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="150"/></proof>
     </goal>
     <goal name="VC get_ket_sum_l_value.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
     </goal>
     <goal name="VC get_ket_sum_l_value.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_columns" expl="VC for ket_sum_l_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_columns.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ket_sum_l_columns.0.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall x. is_a_ket x -&gt; columns x = 1)">
    <goal name="VC ket_sum_l_columns.0.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.33" steps="147"/></proof>
    </goal>
    <goal name="VC ket_sum_l_columns.0.0.1" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="h">
     <goal name="VC ket_sum_l_columns.0.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_l_spec4">
      <goal name="VC ket_sum_l_columns.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="143"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_null_but_maybe_one_elt" expl="VC for ket_sum_null_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_null_but_maybe_one_elt.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_null_but_maybe_one_elt.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_null_but_maybe_one_elt.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_null_but_maybe_one_elt.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="153"/></proof>
  </goal>
  <goal name="VC ket_sum_null_but_maybe_one_elt.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_def">
   <goal name="VC ket_sum_null_but_maybe_one_elt.4.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="149"/></proof>
   </goal>
   <goal name="VC ket_sum_null_but_maybe_one_elt.4.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="149"/></proof>
   </goal>
   <goal name="VC ket_sum_null_but_maybe_one_elt.4.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.34" steps="153"/></proof>
   </goal>
   <goal name="VC ket_sum_null_but_maybe_one_elt.4.3" expl="rewrite premises" proved="true">
   <transf name="exists" proved="true" arg1="(ket_length ( f (choose s)))">
    <goal name="VC ket_sum_null_but_maybe_one_elt.4.3.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_null_but_maybe_one_elt.4.3.0.0" proved="true">
     <proof prover="3"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_null" expl="VC for ket_sum_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_null.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
  </goal>
  <goal name="VC ket_sum_null.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="145"/></proof>
  </goal>
  <goal name="VC ket_sum_null.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="145"/></proof>
  </goal>
  <goal name="VC ket_sum_null.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68"/></proof>
  </goal>
  <goal name="VC ket_sum_null.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.84"/></proof>
  </goal>
  <goal name="VC ket_sum_null.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC ket_sum_null.5.0" expl="precondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
    <goal name="VC ket_sum_null.5.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(get (make_ket l (fun (y1:int) -&gt; get_ket (f @ e) y1)) i j )" arg2="(get_ket (make_ket l (fun (y1:int) -&gt; get_ket (f @ e) y1)) i  )">
     <goal name="VC ket_sum_null.5.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
      <goal name="VC ket_sum_null.5.0.0.0.0" expl="precondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_null.5.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="0.89"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_null.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.44"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_null.5.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="j" arg2="0">
      <goal name="VC ket_sum_null.5.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.71"/></proof>
      </goal>
      <goal name="VC ket_sum_null.5.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="0.75"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_null.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
   <goal name="VC ket_sum_null.6.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="H2" arg2="j,0">
    <goal name="VC ket_sum_null.6.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ket_sum_null.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_def">
      <goal name="VC ket_sum_null.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
       <goal name="VC ket_sum_null.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_def" arg2="in" arg3="Hinst">
        <goal name="VC ket_sum_null.6.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="VC ket_sum_null.6.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.33"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_null.6.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.66"/></proof>
   </goal>
   <goal name="VC ket_sum_null.6.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.60"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_null_but_maybe_one_elt" expl="VC for ket_sum_l_null_but_maybe_one_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_null_but_maybe_one_elt.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_l_null_but_maybe_one_elt.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_l_null_but_maybe_one_elt.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC ket_sum_l_null_but_maybe_one_elt.2.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.96"/></proof>
   </goal>
   <goal name="VC ket_sum_l_null_but_maybe_one_elt.2.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l_null_but_maybe_one_elt.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
  </goal>
  <goal name="VC ket_sum_l_null_but_maybe_one_elt.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_null_mat">
   <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(get (make_ket l (fun (y1:int) -&gt; get_ket (f @ e&#39;) y1)) i j)" arg2="(get_ket (make_ket l (fun (y1:int) -&gt; get_ket (f @ e&#39;) y1)) i )">
      <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
       <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H6">
         <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.37"/></proof>
         </goal>
         <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.37"/></proof>
         </goal>
         <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.63"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="155"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="j" arg2="0">
         <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="get_ket_def">
         </transf>
         </goal>
         <goal name="VC ket_sum_l_null_but_maybe_one_elt.4.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="0.61"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l_null_but_maybe_one_elt.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
   <goal name="VC ket_sum_l_null_but_maybe_one_elt.5.0" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
    <goal name="VC ket_sum_l_null_but_maybe_one_elt.5.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ket_sum_l_null_but_maybe_one_elt.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_def" arg2="in" arg3="H">
      <goal name="VC ket_sum_l_null_but_maybe_one_elt.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC ket_sum_l_null_but_maybe_one_elt.5.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l_null_but_maybe_one_elt.5.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.32"/></proof>
   </goal>
   <goal name="VC ket_sum_l_null_but_maybe_one_elt.5.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.61"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_ket_l" expl="VC for ket_sum_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_ket_l.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_ket_l_" expl="VC for ket_sum_ket_l_" proved="true">
 <proof prover="6"><result status="valid" time="0.49" steps="147"/></proof>
 </goal>
 <goal name="VC add_ket_l_eq" expl="VC for add_ket_l_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
 </goal>
 <goal name="VC add_ket_l_eq_scal" expl="VC for add_ket_l_eq_scal" proved="true">
 <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
 </goal>
 <goal name="VC add_ket_l_scal" expl="VC for add_ket_l_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_scal.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.09"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_scal_rev" expl="VC for add_ket_l_scal_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_scal_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_scalar" expl="VC for get_ket_scalar" proved="true">
 <proof prover="6"><result status="valid" time="0.31" steps="143"/></proof>
 </goal>
 <goal name="VC scal_add_scal_ket_l" expl="VC for scal_add_scal_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_add_scal_ket_l.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC scal_add_scal_ket_l.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC scal_add_scal_ket_l.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_">
     <goal name="VC scal_add_scal_ket_l.0.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="VC scal_add_scal_ket_l.0.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="148"/></proof>
       </goal>
       <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="148"/></proof>
       </goal>
       <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_ket_value">
        <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0" proved="true">
        <transf name="rewrite" proved="true" arg1="add_ket_l_value">
         <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket_l_value">
          <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_ket_value">
           <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_ket_value">
            <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_ket_value">
             <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0.0.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="scalar_ket_value">
              <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0.0.0.0.0.0" proved="true">
              <proof prover="6"><result status="valid" time="0.56" steps="152"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.22" steps="150"/></proof>
          </goal>
          <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.37" steps="150"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="150"/></proof>
         </goal>
         <goal name="VC scal_add_scal_ket_l.0.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.43" steps="150"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_l_switch" expl="VC for add_ket_l_switch" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_l_switch.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC add_ket_l_switch.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="n">
    <goal name="VC add_ket_l_switch.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC add_ket_l_switch.0.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.46" steps="145"/></proof>
     </goal>
     <goal name="VC add_ket_l_switch.0.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.41" steps="145"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC add_ket_l_switch.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC add_ket_l_switch.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_ket_l_value">
     <goal name="VC add_ket_l_switch.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="add_ket_l_value">
      <goal name="VC add_ket_l_switch.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="VC add_ket_l_switch.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_ket_l_value">
        <goal name="VC add_ket_l_switch.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_ket_l_value">
         <goal name="VC add_ket_l_switch.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket_l_value">
          <goal name="VC add_ket_l_switch.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.35" steps="147"/></proof>
          </goal>
          <goal name="VC add_ket_l_switch.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.65"/></proof>
          </goal>
          <goal name="VC add_ket_l_switch.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.36" steps="147"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC add_ket_l_switch.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.58"/></proof>
         </goal>
         <goal name="VC add_ket_l_switch.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC add_ket_l_switch.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.61"/></proof>
        </goal>
        <goal name="VC add_ket_l_switch.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC add_ket_l_switch.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.62"/></proof>
       </goal>
       <goal name="VC add_ket_l_switch.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC add_ket_l_switch.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.54"/></proof>
      </goal>
      <goal name="VC add_ket_l_switch.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC add_ket_l_switch.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.84"/></proof>
     </goal>
     <goal name="VC add_ket_l_switch.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ket_scal_fact" expl="VC for add_ket_scal_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_ket_scal_fact.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_comp_l" expl="VC for ket_sum_comp_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_comp_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="145"/></proof>
  </goal>
  <goal name="VC ket_sum_comp_l.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="145"/></proof>
  </goal>
  <goal name="VC ket_sum_comp_l.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC ket_sum_comp_l.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_comp_l.2.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_sum_comp_l.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.81"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_comp_l.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_comp_l.2.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_sum_comp_l.2.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.75"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_comp_l.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC ket_sum_comp_l.3.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.73"/></proof>
   </goal>
   <goal name="VC ket_sum_comp_l.3.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="3.46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_comp_l.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="VC ket_sum_comp_l.4.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC ket_sum_comp_l.4.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC ket_sum_comp_l.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="3.25"/></proof>
     </goal>
     <goal name="VC ket_sum_comp_l.4.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.80"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_comp_l.4.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ket_sum_comp_l.4.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="VC ket_sum_comp_l.4.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_comp_l.4.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.57"/></proof>
      </goal>
      <goal name="VC ket_sum_comp_l.4.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.64"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_comp_l.4.1.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="3.58"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_comp_l.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="VC ket_sum_comp_l.5.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC ket_sum_comp_l.5.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="3.22"/></proof>
    </goal>
    <goal name="VC ket_sum_comp_l.5.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.84"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_comp_l.5.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ket_sum_comp_l.5.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="VC ket_sum_comp_l.5.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_comp_l.5.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.17"/></proof>
      </goal>
      <goal name="VC ket_sum_comp_l.5.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.81"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_comp_l.5.1.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="4.28"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_comp_l.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="155"/></proof>
  </goal>
  <goal name="VC ket_sum_comp_l.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_">
   <goal name="VC ket_sum_comp_l.7.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="VC ket_sum_comp_l.7.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_comp_l.7.0.0.0" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ket_sum_comp_l.7.0.0.0.0" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_l_spec2">
       <goal name="VC ket_sum_comp_l.7.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="143"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_comp_l.7.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.42" steps="146"/></proof>
     </goal>
     <goal name="VC ket_sum_comp_l.7.0.0.2" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC ket_sum_comp_l.7.0.0.2.0" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="VC ket_sum_comp_l.7.0.0.2.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
         <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.0" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="sum_comp_rev">
           <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.0.0.0" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.0.0.0.0" proved="true">
            <transf name="apply" proved="true" arg1="sum_eq">
             <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.34" steps="152"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
         </goal>
         <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="147"/></proof>
        </goal>
        <goal name="VC ket_sum_comp_l.7.0.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="147"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_comp_l.7.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
       </goal>
       <goal name="VC ket_sum_comp_l.7.0.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_comp_l.7.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
      </goal>
      <goal name="VC ket_sum_comp_l.7.0.0.2.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_comp_l_rev" expl="VC for ket_sum_comp_l_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_comp_l_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="143"/></proof>
  </goal>
  <goal name="VC ket_sum_comp_l_rev.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC ket_sum_comp_l_rev.1.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_scalar_l" expl="VC for ket_sum_scalar_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_scalar_l.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC ket_sum_scalar_l.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="VC ket_sum_scalar_l.0.0.0" proved="true">
    <proof prover="6"><result status="valid" time="0.43" steps="144"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_scalar_l.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_scalar_l.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="VC ket_sum_scalar_l.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC ket_sum_scalar_l.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
       <goal name="VC ket_sum_scalar_l.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="sum_scal_rev">
        <goal name="VC ket_sum_scalar_l.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="sum_eq">
         <goal name="VC ket_sum_scalar_l.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_sum_scalar_l.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ket_sum_scalar_l.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.59" steps="151"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_scalar_l.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.34" steps="147"/></proof>
       </goal>
       <goal name="VC ket_sum_scalar_l.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.71"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_scalar_l.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.33" steps="147"/></proof>
      </goal>
      <goal name="VC ket_sum_scalar_l.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.71"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_l_ket_sum_scalar" expl="VC for ket_l_ket_sum_scalar" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_l_ket_sum_scalar.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_ket_sum_scalar_l" expl="VC for scal_ket_sum_scalar_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_ket_sum_scalar_l.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_ket_l">
   <goal name="VC scal_ket_sum_scalar_l.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC scal_ket_sum_scalar_l.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC scal_ket_sum_scalar_l.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.31" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_scalar_rev_l" expl="VC for ket_sum_scalar_rev_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_scalar_rev_l.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_scalar_l">
   <goal name="VC ket_sum_scalar_rev_l.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
   </goal>
   <goal name="VC ket_sum_scalar_rev_l.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_eq" expl="VC for ket_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_eq.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC ket_sum_eq.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="VC ket_sum_eq.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_eq.0.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.41" steps="147"/></proof>
     </goal>
     <goal name="VC ket_sum_eq.0.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_eq.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_eq.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
     <goal name="VC ket_sum_eq.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC ket_sum_eq.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="sum_eq_gen">
       <goal name="VC ket_sum_eq.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
       </goal>
       <goal name="VC ket_sum_eq.0.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_sum_eq.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.63"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_eq.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
      </goal>
      <goal name="VC ket_sum_eq.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.52"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_eq.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
     </goal>
     <goal name="VC ket_sum_eq.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.70"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_eq_gen" expl="VC for ket_sum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_eq_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_eq_gen.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_eq_gen.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="151"/></proof>
  </goal>
  <goal name="VC ket_sum_eq_gen.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_eq_by_sum" expl="VC for ket_sum_eq_by_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_eq_by_sum.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC ket_sum_eq_by_sum.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l1">
    <goal name="VC ket_sum_eq_by_sum.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_eq_by_sum.0.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="149"/></proof>
     </goal>
     <goal name="VC ket_sum_eq_by_sum.0.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="149"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_eq_by_sum.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_eq_by_sum.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
     <goal name="VC ket_sum_eq_by_sum.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC ket_sum_eq_by_sum.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="s&#39;" arg2="s">
       <goal name="VC ket_sum_eq_by_sum.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H2">
        <goal name="VC ket_sum_eq_by_sum.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.51"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_eq_by_sum.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_eq_by_sum.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="151"/></proof>
      </goal>
      <goal name="VC ket_sum_eq_by_sum.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.54"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_eq_by_sum.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="151"/></proof>
     </goal>
     <goal name="VC ket_sum_eq_by_sum.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bvs_eq" expl="VC for ket_sum_bvs_eq" proved="true">
 <proof prover="4"><result status="valid" time="0.67"/></proof>
 </goal>
 <goal name="VC ket_sum_scal_bvs_eq" expl="VC for ket_sum_scal_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_scal_bvs_eq.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="VC ket_sum_scal_bvs_eq.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="VC ket_sum_scal_bvs_eq.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="151"/></proof>
    </goal>
    <goal name="VC ket_sum_scal_bvs_eq.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="151"/></proof>
    </goal>
    <goal name="VC ket_sum_scal_bvs_eq.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="151"/></proof>
    </goal>
    <goal name="VC ket_sum_scal_bvs_eq.0.0.3" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.29" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_scal_bvs_eq.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="151"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_sum_bvs_eq" expl="VC for ket_sum_sum_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_sum_bvs_eq.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
   <goal name="VC ket_sum_sum_bvs_eq.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="157"/></proof>
   </goal>
   <goal name="VC ket_sum_sum_bvs_eq.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="157"/></proof>
   </goal>
   <goal name="VC ket_sum_sum_bvs_eq.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
   </goal>
   <goal name="VC ket_sum_sum_bvs_eq.0.3" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC ket_sum_sum_bvs_eq.0.3.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_sum_bvs_eq.0.3.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="VC ket_sum_sum_bvs_eq.0.3.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.28" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_sum_bvs_eq.0.3.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.26" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_sum_bvs_eq.0.3.0.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_sum_bvs_eq.0.3.0.0.3" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.39" steps="163"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_sum_scal_bvs_eq" expl="VC for ket_sum_sum_scal_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_sum_scal_bvs_eq.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="VC ket_sum_sum_scal_bvs_eq.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.3.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.3.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
       </goal>
       <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.3.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
       </goal>
       <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.3.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="161"/></proof>
       </goal>
       <goal name="VC ket_sum_sum_scal_bvs_eq.0.0.3.0.0.3" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.28" steps="165"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_sum_scal_bvs_eq.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="159"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_sum_scal_mult_bvs_eq" expl="VC for ket_sum_sum_scal_mult_bvs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
   <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
    <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
     <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.25" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
         <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
          <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
           <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
           </goal>
           <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
           </goal>
           <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="161"/></proof>
           </goal>
           <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0.0.3" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0.0.3.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.71"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.24" steps="161"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="161"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="159"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_sum_scal_mult_bvs_eq.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="159"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_cardone" expl="VC for ket_sum_l_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_cardone.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket">
   <goal name="VC ket_sum_l_cardone.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="149"/></proof>
   </goal>
   <goal name="VC ket_sum_l_cardone.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="149"/></proof>
   </goal>
   <goal name="VC ket_sum_l_cardone.0.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.60"/></proof>
   </goal>
   <goal name="VC ket_sum_l_cardone.0.3" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.10"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_empty" expl="VC for ket_sum_l_empty" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_empty.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ket_sum_l_empty.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_def2">
    <goal name="VC ket_sum_l_empty.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC ket_sum_l_empty.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="145"/></proof>
    </goal>
    <goal name="VC ket_sum_l_empty.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_cardone_" expl="VC for ket_sum_l_cardone_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_cardone_.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC ket_sum_l_cardone_.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="VC ket_sum_l_cardone_.0.0.0" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="146"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l_cardone_.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_l_cardone_.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
     <goal name="VC ket_sum_l_cardone_.0.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ket_sum_l_cardone_.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
       <goal name="VC ket_sum_l_cardone_.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="sum_one">
        <goal name="VC ket_sum_l_cardone_.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.85"/></proof>
        </goal>
        <goal name="VC ket_sum_l_cardone_.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.39"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l_cardone_.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.33"/></proof>
       </goal>
       <goal name="VC ket_sum_l_cardone_.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.79"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l_cardone_.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.33"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_plus_one" expl="VC for ket_sum_l_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_plus_one.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC ket_sum_l_plus_one.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="l">
    <goal name="VC ket_sum_l_plus_one.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_l_plus_one.0.0.0.0" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ket_sum_l_plus_one.0.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.28" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l_plus_one.0.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.32" steps="149"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l_plus_one.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_l_plus_one.0.1.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC ket_sum_l_plus_one.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC ket_sum_l_plus_one.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="sum_add">
         <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="add_eq_t_rev">
          <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.29" steps="153"/></proof>
          </goal>
          <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="2.36"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="151"/></proof>
        </goal>
        <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.58"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.60"/></proof>
       </goal>
       <goal name="VC ket_sum_l_plus_one.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="151"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_l_plus_one.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="151"/></proof>
      </goal>
      <goal name="VC ket_sum_l_plus_one.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.80"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bitvec_one" expl="VC for ket_sum_bitvec_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_bitvec_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="143"/></proof>
  </goal>
  <goal name="VC ket_sum_bitvec_one.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="143"/></proof>
  </goal>
  <goal name="VC ket_sum_bitvec_one.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_bitvec_one.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="155"/></proof>
  </goal>
  <goal name="VC ket_sum_bitvec_one.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="155"/></proof>
  </goal>
  <goal name="VC ket_sum_bitvec_one.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.23"/></proof>
  </goal>
  <goal name="VC ket_sum_bitvec_one.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(n_bvs 1)" arg2="(add (int_to_bv 1 1) (to_set (int_to_bv 0 1)))">
   <goal name="VC ket_sum_bitvec_one.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_sum_l (add (int_to_bv 1 1) (to_set (int_to_bv 0 1))) f l)" arg2="(ket_sum_l (add (int_to_bv 1 1) (to_set (int_to_bv 0 1)))
  (fun (e:bitvec) -&gt;
    make_ket l
    ((fun (y0:matrix complex) (y1:int) -&gt; get_ket y0 y1) @ (f @ e)))
  l)">
    <goal name="VC ket_sum_bitvec_one.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC ket_sum_bitvec_one.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
      <goal name="VC ket_sum_bitvec_one.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_ket_l">
        <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="l">
         <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.29" steps="159"/></proof>
          </goal>
          <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.0.0.1" proved="true">
          <proof prover="6"><result status="valid" time="0.30" steps="159"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket_l_value">
          <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="add_ket_l_value">
           <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="2.32"/></proof>
           </goal>
           <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.71"/></proof>
           </goal>
           <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.33"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.70"/></proof>
          </goal>
          <goal name="VC ket_sum_bitvec_one.6.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.34"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_bitvec_one.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="157"/></proof>
      </goal>
      <goal name="VC ket_sum_bitvec_one.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
      </goal>
      <goal name="VC ket_sum_bitvec_one.6.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="2.01"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_bitvec_one.6.0.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_sum_bitvec_one.6.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_ket_l">
      <goal name="VC ket_sum_bitvec_one.6.0.1.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="l">
       <goal name="VC ket_sum_bitvec_one.6.0.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ket_sum_bitvec_one.6.0.1.0.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.33" steps="159"/></proof>
        </goal>
        <goal name="VC ket_sum_bitvec_one.6.0.1.0.0.0.1" proved="true">
        <proof prover="6"><result status="valid" time="0.27" steps="159"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_bitvec_one.6.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
         <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="sum_eq">
          <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.77"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.39"/></proof>
         </goal>
         <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.92"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.34"/></proof>
        </goal>
        <goal name="VC ket_sum_bitvec_one.6.0.1.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.93"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_bitvec_one.6.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="VC ket_sum_bitvec_one.6.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_bitvec_one.6.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="e" arg2="(int_to_bv (bv_to_int e) 1)">
      <goal name="VC ket_sum_bitvec_one.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;= (bv_to_int e)  &lt;2)">
       <goal name="VC ket_sum_bitvec_one.6.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.86"/></proof>
       </goal>
       <goal name="VC ket_sum_bitvec_one.6.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(bv_to_int e = 0)">
        <goal name="VC ket_sum_bitvec_one.6.1.0.0.0.1.0" expl="true case (apply premises)" proved="true">
        <proof prover="6"><result status="valid" time="0.35" steps="167"/></proof>
        </goal>
        <goal name="VC ket_sum_bitvec_one.6.1.0.0.0.1.1" expl="false case (apply premises)" proved="true">
        <proof prover="6"><result status="valid" time="0.35" steps="167"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_bitvec_one.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.38" steps="161"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_bitvec_one.6.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_bitvec_one.6.1.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="in_n_bvs">
      <goal name="VC ket_sum_bitvec_one.6.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_bitvec_one.6.1.1.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.78"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bitvec_zero" expl="VC for ket_sum_bitvec_zero" proved="true">
 <proof prover="0"><result status="valid" time="2.45"/></proof>
 </goal>
 <goal name="VC ket_sum_l_valid_index" expl="VC for ket_sum_l_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_valid_index.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="VC ket_sum_l_valid_index.0.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
    <goal name="VC ket_sum_l_valid_index.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
    </goal>
    <goal name="VC ket_sum_l_valid_index.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="149"/></proof>
    </goal>
    <goal name="VC ket_sum_l_valid_index.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l_valid_index.0.1" expl="false case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_ket_valid_index">
    <goal name="VC ket_sum_l_valid_index.0.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.29" steps="153"/></proof>
    </goal>
    <goal name="VC ket_sum_l_valid_index.0.1.1" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(ket_length (ket_sum_l s f l))" arg2="l">
     <goal name="VC ket_sum_l_valid_index.0.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l_valid_index.0.1.1.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="151"/></proof>
      </goal>
      <goal name="VC ket_sum_l_valid_index.0.1.1.0.1" proved="true">
      <proof prover="0"><result status="valid" time="0.60"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l_valid_index.0.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.45" steps="153"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_const" expl="VC for ket_sum_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_const.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="149"/></proof>
  </goal>
  <goal name="VC ket_sum_const.1" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="VC ket_sum_const.1.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
    <goal name="VC ket_sum_const.1.0.0" expl="true case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="VC ket_sum_const.1.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="l">
      <goal name="VC ket_sum_const.1.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_const.1.0.0.0.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.35" steps="149"/></proof>
       </goal>
       <goal name="VC ket_sum_const.1.0.0.0.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.28" steps="149"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_const.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_const.1.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.07"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_const.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.28" steps="147"/></proof>
    </goal>
    <goal name="VC ket_sum_const.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_const.1.1" expl="false case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket_l">
    <goal name="VC ket_sum_const.1.1.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="l">
     <goal name="VC ket_sum_const.1.1.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_const.1.1.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.33" steps="151"/></proof>
      </goal>
      <goal name="VC ket_sum_const.1.1.0.0.1" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="151"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_const.1.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_const.1.1.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC ket_sum_const.1.1.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(i_to_c (cardinal s) *.. x)" arg2="( mat_sum s (fun (_:a) -&gt; x) )">
       <goal name="VC ket_sum_const.1.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="VC ket_sum_const.1.1.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_def">
         <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_def">
          <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mat_sum_value">
           <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="2.00"/></proof>
           </goal>
           <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.30" steps="158"/></proof>
           </goal>
           <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_valid_index">
            <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="156"/></proof>
             </goal>
             <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(rows (mat_sum s (fun (_:a) -&gt; x)))" arg2="(power_ 2 l)">
              <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0.1.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="2.29" steps="158"/></proof>
              </goal>
              <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="rows_mat_sum">
               <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.24" steps="156"/></proof>
               </goal>
               <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.70"/></proof>
               </goal>
               <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="2.15" steps="160"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.22" steps="156"/></proof>
             </goal>
             <goal name="VC ket_sum_const.1.1.1.0.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.45" steps="158"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_const.1.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC ket_sum_const.1.1.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="destruct" proved="true" arg1="H2">
         <goal name="VC ket_sum_const.1.1.1.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="147"/></proof>
         </goal>
         <goal name="VC ket_sum_const.1.1.1.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H2">
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_const.1.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="153"/></proof>
      </goal>
      <goal name="VC ket_sum_const.1.1.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.82"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_const_w" expl="VC for ket_sum_const_w" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_const_w.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_const_w.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
  </goal>
  <goal name="VC ket_sum_const_w.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC ket_sum_const_w.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_assoc">
    <goal name="VC ket_sum_const_w.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
     <goal name="VC ket_sum_const_w.2.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="149"/></proof>
     </goal>
     <goal name="VC ket_sum_const_w.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_ket_sum_l" expl="VC for map_ket_sum_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC map_ket_sum_l.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC map_ket_sum_l.0.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="152"/></proof>
   </goal>
   <goal name="VC map_ket_sum_l.0.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.66"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC map_ket_sum_l.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="149"/></proof>
  </goal>
  <goal name="VC map_ket_sum_l.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_injective">
   <goal name="VC map_ket_sum_l.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC map_ket_sum_l.2.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.62"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC map_ket_sum_l.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="VC map_ket_sum_l.3.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
    <goal name="VC map_ket_sum_l.3.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_empty">
     <goal name="VC map_ket_sum_l.3.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC map_ket_sum_l.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
     </goal>
     <goal name="VC map_ket_sum_l.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_ket_sum_l.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
    </goal>
    <goal name="VC map_ket_sum_l.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_ket_sum_l.3.1" expl="false case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
    <goal name="VC map_ket_sum_l.3.1.0" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
     <goal name="VC map_ket_sum_l.3.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_ket_sum_l.3.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="map_mat_sum">
       <goal name="VC map_ket_sum_l.3.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="mat_sum_eq">
        <goal name="VC map_ket_sum_l.3.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.42" steps="154"/></proof>
        </goal>
        <goal name="VC map_ket_sum_l.3.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC map_ket_sum_l.3.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC map_ket_sum_l.3.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.86"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_ket_sum_l.3.1.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC map_ket_sum_l.3.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.93"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_ket_sum_l.3.1.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC map_ket_sum_l.3.1.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_ket_sum_l.3.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.34" steps="154"/></proof>
       </goal>
       <goal name="VC map_ket_sum_l.3.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC map_ket_sum_l.3.1.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC map_ket_sum_l.3.1.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.83"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_ket_sum_l.3.1.0.0.0.2.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC map_ket_sum_l.3.1.0.0.0.2.1.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.92"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_ket_sum_l.3.1.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="151"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC map_ket_sum_l.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="151"/></proof>
     </goal>
     <goal name="VC map_ket_sum_l.3.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.33" steps="154"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_ket_sum_l.3.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="151"/></proof>
    </goal>
    <goal name="VC map_ket_sum_l.3.1.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.34" steps="154"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_to_n_bvs" expl="VC for ket_sum_l_to_n_bvs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_to_n_bvs.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="155"/></proof>
  </goal>
  <goal name="VC ket_sum_l_to_n_bvs.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_l_to_n_bvs.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="159"/></proof>
  </goal>
  <goal name="VC ket_sum_l_to_n_bvs.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="159"/></proof>
  </goal>
  <goal name="VC ket_sum_l_to_n_bvs.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(to_fset 0 (power_ 2 l))" arg2="(map1 (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs l))">
   <goal name="VC ket_sum_l_to_n_bvs.4.0" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
    <goal name="VC ket_sum_l_to_n_bvs.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l_to_n_bvs.4.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ket_sum_l_to_n_bvs.4.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_map_eq">
     <goal name="VC ket_sum_l_to_n_bvs.4.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l_to_n_bvs.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(int_to_bv b l)">
       <goal name="VC ket_sum_l_to_n_bvs.4.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ket_sum_l_to_n_bvs.4.1.0.0.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.49" steps="166"/></proof>
        </goal>
        <goal name="VC ket_sum_l_to_n_bvs.4.1.0.0.0.0.1" proved="true">
        <proof prover="4"><result status="valid" time="0.73"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l_to_n_bvs.4.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l_to_n_bvs.4.1.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.27"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_to_fset" expl="VC for ket_sum_l_to_fset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_to_fset.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="155"/></proof>
  </goal>
  <goal name="VC ket_sum_l_to_fset.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_l_to_fset.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_l_to_fset.3" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(power_ 2 l)" arg2="(power 2 l)">
   <goal name="VC ket_sum_l_to_fset.3.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H4">
   </transf>
   </goal>
   <goal name="VC ket_sum_l_to_fset.3.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.37" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_l_to_fset.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(n_bvs l)" arg2="(map1 (fun (i:int) -&gt; int_to_bv i l) (to_fset 0 (power_ 2 l)))">
   <goal name="VC ket_sum_l_to_fset.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC ket_sum_l_to_fset.4.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l_to_fset.4.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ket_sum_l_to_fset.4.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_map_eq">
     <goal name="VC ket_sum_l_to_fset.4.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l_to_fset.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(bv_to_int b)">
       <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.0" proved="true">
        <proof prover="0"><result status="valid" time="0.99"/></proof>
        </goal>
        <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0" proved="true">
         <transf name="replace" proved="true" arg1="l" arg2="(length b)">
          <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.0" proved="true">
          <transf name="case" proved="true" arg1="(length b = 0)">
           <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.0.0" expl="true case" proved="true">
           <proof prover="6"><result status="valid" time="0.51" steps="167"/></proof>
           </goal>
           <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.0.1" expl="false case" proved="true">
           <proof prover="6"><result status="valid" time="0.54" steps="167"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="n_bvs_spec2">
             <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="161"/></proof>
             </goal>
             <goal name="VC ket_sum_l_to_fset.4.1.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_l_to_fset.4.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_l_to_fset.4.1.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_l_to_fset.4.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.62" steps="165"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_partition" expl="VC for ket_sum_partition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_partition.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s1 =0)">
   <goal name="VC ket_sum_partition.0.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s2 = 0)">
    <goal name="VC ket_sum_partition.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="VC ket_sum_partition.0.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="VC ket_sum_partition.0.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_partition.0.0.0.0.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.38" steps="163"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.0.0.0.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.50" steps="163"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_partition.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_partition.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.07"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_partition.0.0.1" expl="false case (true case. postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="VC ket_sum_partition.0.0.1.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="VC ket_sum_partition.0.0.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_partition.0.0.1.0.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.35" steps="163"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.0.1.0.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.33" steps="163"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_partition.0.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_partition.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="VC ket_sum_partition.0.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.59"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.68"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.0.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="165"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_partition.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s2 = 0)">
    <goal name="VC ket_sum_partition.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="VC ket_sum_partition.0.1.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="VC ket_sum_partition.0.1.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_partition.0.1.0.0.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.35" steps="163"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.1.0.0.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.37" steps="163"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_partition.0.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_partition.0.1.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="VC ket_sum_partition.0.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.73"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.1.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.59"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.1.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_partition.0.1.1" expl="false case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="VC ket_sum_partition.0.1.1.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="n">
      <goal name="VC ket_sum_partition.0.1.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_partition.0.1.1.0.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.36" steps="163"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.1.1.0.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.33" steps="163"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_partition.0.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_partition.0.1.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_value">
       <goal name="VC ket_sum_partition.0.1.1.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="VC ket_sum_partition.0.1.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
         <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
          <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="s" arg2="(union s1 s2)">
           <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="sum_disjoint_transitivity">
            <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="3.83"/></proof>
            </goal>
            <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
          </goal>
          <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.55"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
         </goal>
         <goal name="VC ket_sum_partition.0.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.60"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_partition.0.1.1.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.30" steps="165"/></proof>
        </goal>
        <goal name="VC ket_sum_partition.0.1.1.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.69"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_partition.0.1.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.63"/></proof>
       </goal>
       <goal name="VC ket_sum_partition.0.1.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.29" steps="165"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_decomp" expl="VC for ket_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_decomp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="163"/></proof>
  </goal>
  <goal name="VC ket_decomp.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="169"/></proof>
  </goal>
  <goal name="VC ket_decomp.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="167"/></proof>
  </goal>
  <goal name="VC ket_decomp.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="3.57"/></proof>
  </goal>
  <goal name="VC ket_decomp.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.09"/></proof>
  </goal>
  <goal name="VC ket_decomp.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_map_mem">
   <goal name="VC ket_decomp.5.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="(e,0)">
    <goal name="VC ket_decomp.5.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_decomp.5.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.92"/></proof>
     </goal>
     <goal name="VC ket_decomp.5.0.0.1" proved="true">
     <proof prover="4"><result status="valid" time="0.74"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp.6" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y0:(int, int)) -&gt; fir y0),couple_set,e">
   <goal name="VC ket_decomp.6.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC ket_decomp.6.0.0" expl="destruct premise" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="VC ket_decomp.6.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC ket_decomp.6.0.1.0" expl="precondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="VC ket_decomp.6.0.1.0.0" expl="precondition" proved="true">
      <proof prover="0"><result status="valid" time="1.12"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp.7" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC ket_decomp.7.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(sec e = sec e&#39;)">
    <goal name="VC ket_decomp.7.0.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.70"/></proof>
    </goal>
    <goal name="VC ket_decomp.7.0.1" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(fir e = fir e&#39;)">
     <goal name="VC ket_decomp.7.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(e =e&#39;)">
      <goal name="VC ket_decomp.7.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="e" arg2="( (fir e), (sec e))">
       <goal name="VC ket_decomp.7.0.1.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.72" steps="185"/></proof>
       </goal>
       <goal name="VC ket_decomp.7.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.61" steps="185"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_decomp.7.0.1.0.1" expl="true case (precondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.44" steps="181"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_decomp.7.0.1.1" expl="false case (precondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="181"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="173"/></proof>
  </goal>
  <goal name="VC ket_decomp.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.06"/></proof>
  </goal>
  <goal name="VC ket_decomp.10" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC ket_decomp.10.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC ket_decomp.10.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_decomp.10.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.89"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_decomp.10.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_decomp.10.0.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="177"/></proof>
  </goal>
  <goal name="VC ket_decomp.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="175"/></proof>
  </goal>
  <goal name="VC ket_decomp.13" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC ket_decomp.13.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_decomp.13.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="4.24"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_decomp.13.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_decomp.13.1.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="4.40"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.21"/></proof>
  </goal>
  <goal name="VC ket_decomp.15" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ket_decomp.15.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="m_p_def">
    <goal name="VC ket_decomp.15.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="indexes_decomp_def">
     <goal name="VC ket_decomp.15.0.0.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="proj_set" arg2="(map1 (fun (y0:(int, int)) -&gt; fir y0) couple_set)">
      <goal name="VC ket_decomp.15.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H4">
       <goal name="VC ket_decomp.15.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="apply" proved="true" arg1="mat_sum_eq_gen">
        <goal name="VC ket_decomp.15.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.09"/></proof>
        </goal>
        <goal name="VC ket_decomp.15.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.30" steps="192"/></proof>
        </goal>
        <goal name="VC ket_decomp.15.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC ket_decomp.15.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_decomp.15.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="4.03"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_decomp.15.0.0.0.0.0.2.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_decomp.15.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="3.80"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_decomp.15.0.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_decomp.15.0.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="basis_projection_def">
             <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(sec a)" arg2="0">
              <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_eq">
               <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ind_basis_mat_def">
                <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(columns m)" arg2="1">
                 <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_equal_mat">
                  <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.17"/></proof>
                  </goal>
                  <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.02"/></proof>
                  </goal>
                  <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="(get (ket n (fir a)) i j)" arg2="(get_ket (ket n (fir a)) i )">
                    <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="assert_make">
                     <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="0.94"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="4"><result status="valid" time="4.21"/></proof>
                     </goal>
                     <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.33"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="0"><result status="valid" time="1.03"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="6"><result status="valid" time="0.58" steps="198"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.43" steps="197"/></proof>
                </goal>
                <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.58" steps="198"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="4"><result status="valid" time="3.87"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.44" steps="197"/></proof>
             </goal>
             <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.42" steps="197"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_decomp.15.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.26" steps="194"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_decomp.15.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.30" steps="192"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp.16" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="m_p" arg2="m" arg3="in" arg4="H">
   <goal name="VC ket_decomp.16.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(to_fset 0 (power 2 n))" arg2="proj_set">
    <goal name="VC ket_decomp.16.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="VC ket_decomp.16.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="181"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_decomp.16.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="181"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_decomp_bv" expl="VC for ket_decomp_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_decomp_bv.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="157"/></proof>
  </goal>
  <goal name="VC ket_decomp_bv.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
  </goal>
  <goal name="VC ket_decomp_bv.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_map_mem">
   <goal name="VC ket_decomp_bv.2.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC ket_decomp_bv.2.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(int_to_bv e n)">
     <goal name="VC ket_decomp_bv.2.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_decomp_bv.2.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.35" steps="166"/></proof>
      </goal>
      <goal name="VC ket_decomp_bv.2.0.0.0.1" proved="true">
      <proof prover="6"><result status="valid" time="0.46" steps="166"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp_bv.3" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (y0:bitvec) -&gt; bv_to_int y0),(n_bvs n),e">
   <goal name="VC ket_decomp_bv.3.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC ket_decomp_bv.3.0.0" expl="destruct premise" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="VC ket_decomp_bv.3.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC ket_decomp_bv.3.0.1.0" expl="precondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="VC ket_decomp_bv.3.0.1.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(e &lt; power 2 n)">
       <goal name="VC ket_decomp_bv.3.0.1.0.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.67"/></proof>
       </goal>
       <goal name="VC ket_decomp_bv.3.0.1.0.0.1" expl="precondition" proved="true">
       <proof prover="0"><result status="valid" time="1.12"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_decomp_bv.4" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_ket_sum_l" arg2="(fun (j:int) -&gt; get m j 0 *.. ket n j),(n_bvs n),(bv_to_int ),n">
   <goal name="VC ket_decomp_bv.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_sum_l (map1 (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))
  (fun (j:int) -&gt; get m j 0 *.. ket n j) n)" arg2="m" arg3="in" arg4="Hinst">
    <goal name="VC ket_decomp_bv.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC ket_decomp_bv.4.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq">
      <goal name="VC ket_decomp_bv.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.26" steps="161"/></proof>
      </goal>
      <goal name="VC ket_decomp_bv.4.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
      </goal>
      <goal name="VC ket_decomp_bv.4.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_decomp_bv.4.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n)
      (fun (a1:bitvec) -&gt; get m (bv_to_int a1) 0 *.. ket n (bv_to_int a1)) n)" arg2="m">
         <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="( ket_sum_l (n_bvs n)
  (fun (a1:bitvec) -&gt; get m (bv_to_int a1) 0 *.. ket n (bv_to_int a1)) n)" arg2="(ket_sum_l (n_bvs n)
    (fun (a1:bitvec) -&gt;
      (fun (j:int) -&gt; get m j 0 *.. ket n j)
      @ ((fun (y0:bitvec) -&gt; bv_to_int y0) @ a1))
    n)">
          <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.23" steps="163"/></proof>
            </goal>
            <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_injective">
             <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.0.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.06"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="ket_sum_eq">
           <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="163"/></proof>
           </goal>
           <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="163"/></proof>
           </goal>
           <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.1.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_decomp_bv.4.0.0.0.2.0.0.1.1.2.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_decomp_bv.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
     </goal>
     <goal name="VC ket_decomp_bv.4.0.0.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_injective">
      <goal name="VC ket_decomp_bv.4.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_decomp_bv.4.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_decomp_bv.4.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.99"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_decomp_bv.4.0.1" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="(ket_sum_l (map1 (fun (y0:bitvec) -&gt; bv_to_int y0) (n_bvs n))
  (fun (j:int) -&gt; get m j 0 *.. ket n j) n)" arg2="(mat_sum (to_fset 0 (power 2 n))
     (fun (j:int) -&gt; get m j 0 *.. ket n j))">
     <goal name="VC ket_decomp_bv.4.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC ket_decomp_bv.4.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ket_decomp">
       <goal name="VC ket_decomp_bv.4.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="161"/></proof>
       </goal>
       <goal name="VC ket_decomp_bv.4.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
       </goal>
       <goal name="VC ket_decomp_bv.4.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="161"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_decomp_bv.4.0.1.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
      <goal name="VC ket_decomp_bv.4.0.1.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq_gen">
       <goal name="VC ket_decomp_bv.4.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.38" steps="169"/></proof>
       </goal>
       <goal name="VC ket_decomp_bv.4.0.1.1.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.33" steps="161"/></proof>
       </goal>
       <goal name="VC ket_decomp_bv.4.0.1.1.0.2" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC ket_decomp_bv.4.0.1.1.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_decomp_bv.4.0.1.1.0.2.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_decomp_bv.4.0.1.1.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.68"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_decomp_bv.4.0.1.1.0.2.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_decomp_bv.4.0.1.1.0.2.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="4.06"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_decomp_bv.4.0.1.1.0.3" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket_l">
          <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="n">
           <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.0.0.0" proved="true">
            <transf name="apply" proved="true" arg1="set_is_a_ket_l">
             <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.25" steps="163"/></proof>
             </goal>
             <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.40" steps="169"/></proof>
             </goal>
             <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="1.09"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.0.0.1" proved="true">
            <proof prover="0"><result status="valid" time="3.15"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ket_decomp_bv.4.0.1.1.0.3.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="3.01"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_decomp_bv.4.0.1.1.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="161"/></proof>
      </goal>
      <goal name="VC ket_decomp_bv.4.0.1.1.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.37" steps="169"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_recomp" expl="VC for ket_recomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_recomp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="153"/></proof>
  </goal>
  <goal name="VC ket_recomp.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.41" steps="155"/></proof>
  </goal>
  <goal name="VC ket_recomp.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="155"/></proof>
  </goal>
  <goal name="VC ket_recomp.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="157"/></proof>
  </goal>
  <goal name="VC ket_recomp.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="159"/></proof>
  </goal>
  <goal name="VC ket_recomp.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="161"/></proof>
  </goal>
  <goal name="VC ket_recomp.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC ket_recomp.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="VC ket_recomp.6.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.07"/></proof>
    </goal>
    <goal name="VC ket_recomp.6.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC ket_recomp.6.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_recomp.6.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="3.59"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_recomp.6.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_recomp.6.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="3.39"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_recomp.6.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_recomp.6.0.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC ket_recomp.6.0.2.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_decomp_quant" expl="VC for ket_decomp_quant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_decomp_quant.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ket_decomp">
   <goal name="VC ket_decomp_quant.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="155"/></proof>
   </goal>
   <goal name="VC ket_decomp_quant.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="153"/></proof>
   </goal>
   <goal name="VC ket_decomp_quant.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="153"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_basis" expl="VC for mat_mult_ket_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_basis.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC mat_mult_ket_basis.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_rows">
    <goal name="VC mat_mult_ket_basis.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC mat_mult_ket_basis.0.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="rows_mat_sum">
      <goal name="VC mat_mult_ket_basis.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.91"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_basis.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_mult_ket_basis.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.57"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_ket_basis.0.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis.0.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.71"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_ket_basis.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_mult_ket_basis.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_ket_basis.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.94"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_ket_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_basis.0.1" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_columns">
    <goal name="VC mat_mult_ket_basis.0.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC mat_mult_ket_basis.0.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="columns_mat_sum">
      <goal name="VC mat_mult_ket_basis.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.03"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_basis.0.1.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_mult_ket_basis.0.1.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis.0.1.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.68"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_ket_basis.0.1.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis.0.1.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="2.82"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_ket_basis.0.1.0.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_mult_ket_basis.0.1.0.0.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_ket_basis.0.1.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.79"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_ket_basis.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.30" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_basis.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_mult_ket_basis.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="VC mat_mult_ket_basis.0.2.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m i k *. get x k j),0,(columns m),(ket_to_int x)
">
      <goal name="VC mat_mult_ket_basis.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
        <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e:int) -&gt; get (get m e (ket_to_int x) *.. ket (ket_length x) e) i j),(to_fset 0 (rows x)),i
">
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="j" arg2="0">
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="scalar_values">
              <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="get_ket_value">
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="3.16"/></proof>
               </goal>
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.40" steps="163"/></proof>
               </goal>
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="3.50"/></proof>
               </goal>
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="2.63"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="3.03"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.03"/></proof>
           </goal>
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="j" arg2="0">
              <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="scalar_values">
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.2.0.0.0.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="2.97"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="0"><result status="valid" time="3.69"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.79"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="3.06"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.98"/></proof>
        </goal>
        <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(s_rows (to_fset 0 (rows x))
    (fun (k:int) -&gt; get m k (ket_to_int x) *.. ket (ket_length x) k))" arg2="(columns m)">
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.86"/></proof>
         </goal>
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_s_rows">
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.91"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="scalar_columns">
              <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="scalar_columns">
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="2.99"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_rows">
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H2">
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="H1">
              <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ket_rows">
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.37" steps="162"/></proof>
               </goal>
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.34" steps="162"/></proof>
               </goal>
               <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="(rows x)" arg2="(power 2 (ket_length x))">
                <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.0" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.0.0" proved="true">
                  <transf name="instantiate" proved="true" arg1="to_fset_spec1" arg2="0,(power 2 (ket_length x))">
                   <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.0.0.0" proved="true">
                   <transf name="instantiate" proved="true" arg1="to_fset_spec2" arg2="0,(power 2 (ket_length x))">
                    <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.0.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="Hinst">
                     <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="1.04"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.1" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.1.0" proved="true">
                  <transf name="instantiate" proved="true" arg1="to_fset_spec1" arg2="0,(power 2 (ket_length x))">
                   <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.1.0.0" proved="true">
                   <transf name="apply" proved="true" arg1="Hinst">
                    <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="0.95"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.3.1.1.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                <proof prover="6"><result status="valid" time="0.40" steps="162"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(s_columns (to_fset 0 (rows x))
    (fun (k:int) -&gt; get m k (ket_to_int x) *.. ket (ket_length x) k))" arg2="1
">
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.33" steps="162"/></proof>
          </goal>
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.0.1" proved="true">
          <proof prover="0"><result status="valid" time="3.07"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_s_columns">
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.61"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="2.82"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_columns">
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.0.4.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.35" steps="162"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_ket_basis.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.55"/></proof>
       </goal>
       <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="x" arg2="(ket (ket_length x) (ket_to_int x))">
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="j" arg2="0">
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_value">
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.0.0.0" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.36" steps="168"/></proof>
            </goal>
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.37" steps="168"/></proof>
            </goal>
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.45" steps="167"/></proof>
            </goal>
            <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="2.86"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="2.73"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_mult_ket_basis.0.2.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.49" steps="168"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_basis.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="159"/></proof>
     </goal>
     <goal name="VC mat_mult_ket_basis.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_mult_diag" expl="VC for ket_mult_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_mult_diag.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis">
   <goal name="VC ket_mult_diag.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="mat_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m k (ket_to_int x) *.. ket (ket_length x) k),(to_fset 0 (rows x)),(ket_to_int x)">
    <goal name="VC ket_mult_diag.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC ket_mult_diag.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC ket_mult_diag.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.84"/></proof>
     </goal>
     <goal name="VC ket_mult_diag.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_mult_diag.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_mult_diag.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_mult_diag.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="3.90"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_mult_diag.0.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_mult_diag.0.0.0.2.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_mult_diag.0.0.0.2.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.90"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_mult_diag.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.67"/></proof>
     </goal>
     <goal name="VC ket_mult_diag.0.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="3.20"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_mult_diag.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="159"/></proof>
   </goal>
   <goal name="VC ket_mult_diag.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.44" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_basis_bv" expl="VC for mat_mult_ket_basis_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_basis_bv.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_fset">
   <goal name="VC mat_mult_ket_basis_bv.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis">
    <goal name="VC mat_mult_ket_basis_bv.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
     <goal name="VC mat_mult_ket_basis_bv.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_eq_gen">
      <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.87"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.38"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.64"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.2.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.2.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="2.90"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_ket_l">
         <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="n">
          <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.0.0.0" proved="true">
           <proof prover="4"><result status="valid" time="0.77"/></proof>
           </goal>
           <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.0.0.1" proved="true">
           <proof prover="4"><result status="valid" time="0.71"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
          <transf name="eliminate_definition" proved="true" >
           <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_def">
            <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
             <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="3.74"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_mult_ket_basis_bv.0.0.0.0.3.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.49" steps="172"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_basis_bv.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.37" steps="161"/></proof>
     </goal>
     <goal name="VC mat_mult_ket_basis_bv.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.66"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_ket_basis_bv.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="159"/></proof>
    </goal>
    <goal name="VC mat_mult_ket_basis_bv.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="159"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_basis_bv.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.38" steps="161"/></proof>
   </goal>
   <goal name="VC mat_mult_ket_basis_bv.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.41" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_basis_bv_gen" expl="VC for mat_mult_ket_basis_bv_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_basis_bv_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="159"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_basis_bv_gen.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_basis_bv_gen.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="161"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_basis_bv_gen.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="161"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_basis_bv_gen.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_bv" expl="VC for mat_mult_ket_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_bv.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="161"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_bv.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="163"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_bv.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.49" steps="165"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_bv.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_mult m x)" arg2="(mat_mult m (ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) -&gt; get x (bv_to_int bvx) 0 *.. ket n (bv_to_int bvx)) n))">
   <goal name="VC mat_mult_ket_bv.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
    <goal name="VC mat_mult_ket_bv.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="product_mat_sum_r">
     <goal name="VC mat_mult_ket_bv.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
      <goal name="VC mat_mult_ket_bv.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq">
       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.41" steps="163"/></proof>
       </goal>
       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="3.11"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_mult_columns">
            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_mult_columns">
             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.68"/></proof>
             </goal>
             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="2.72"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="2.87"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket_l">
          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="n">
           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.0.0.0" proved="true">
            <proof prover="6"><result status="valid" time="0.42" steps="165"/></proof>
            </goal>
            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.0.0.1" proved="true">
            <proof prover="6"><result status="valid" time="0.42" steps="165"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(mat_mult m
   (make_ket n
    (fun (j:int) -&gt; get (get x (bv_to_int a) 0 *.. ket n (bv_to_int a)) j 0)))" arg2="(make_ket n
     (fun (j:int) -&gt;
       get (get_ket x (bv_to_int a) *.. mat_mult m (ket n (bv_to_int a))) j 0))">
            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="set_equal_ket_l">
             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="exists" proved="true" arg1="n">
              <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.0.0.0" proved="true">
               <proof prover="6"><result status="valid" time="0.40" steps="169"/></proof>
               </goal>
               <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.0.0.1" proved="true">
               <proof prover="6"><result status="valid" time="0.38" steps="169"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0" expl="apply premises" proved="true">
              <transf name="eliminate_definition" proved="true" >
               <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="get_ket_def">
                <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
                 <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="scalar_values">
                   <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="goal_comm">
                    <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="mat_mut_scal_rev">
                     <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="mat_mult_values">
                      <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="mat_mult_values">
                       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="ind_sum_eq">
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="apply" proved="true" arg1="mult_eq_t">
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="6"><result status="valid" time="0.26" steps="180"/></proof>
                           </goal>
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="get_ket_rev">
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="get_ket_rev">
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="2.91"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_ket_rows">
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                        <proof prover="6"><result status="valid" time="0.44" steps="178"/></proof>
                        </goal>
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                        <proof prover="6"><result status="valid" time="0.44" steps="178"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="set_valid_index">
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                         <proof prover="6"><result status="valid" time="0.29" steps="176"/></proof>
                         </goal>
                         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0" expl="apply premises" proved="true">
                          <transf name="replace" proved="true" arg1="(ket_length
     (mat_mult m
      (make_ket n
       (fun (j:int) -&gt;
         get (get x (bv_to_int a) 0 *.. ket n (bv_to_int a)) j 0))))" arg2="n" arg3="in" arg4="H">
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                           <proof prover="6"><result status="valid" time="0.34" steps="176"/></proof>
                           </goal>
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
                           <transf name="apply" proved="true" arg1="get_ket_length">
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.0" expl="apply premises" proved="true">
                            <proof prover="6"><result status="valid" time="0.40" steps="178"/></proof>
                            </goal>
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="mat_mult_columns">
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.0" expl="apply premises" proved="true">
                             <proof prover="6"><result status="valid" time="0.44" steps="178"/></proof>
                             </goal>
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1" expl="rewrite premises" proved="true">
                             <transf name="rewrite" proved="true" arg1="make_ket_rows">
                              <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.0" expl="rewrite premises" proved="true">
                              <proof prover="6"><result status="valid" time="0.48" steps="178"/></proof>
                              </goal>
                              <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.1" expl="rewrite premises" proved="true">
                              <proof prover="6"><result status="valid" time="0.52" steps="178"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.0" expl="apply premises" proved="true">
                             <proof prover="6"><result status="valid" time="0.35" steps="176"/></proof>
                             </goal>
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1" expl="rewrite premises" proved="true">
                             <transf name="rewrite" proved="true" arg1="make_ket_rows">
                              <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.0" expl="rewrite premises" proved="true">
                              <proof prover="6"><result status="valid" time="0.49" steps="178"/></proof>
                              </goal>
                              <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.1" expl="rewrite premises" proved="true">
                              <proof prover="6"><result status="valid" time="0.40" steps="178"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="make_ket_rows">
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                           <proof prover="6"><result status="valid" time="0.46" steps="178"/></proof>
                           </goal>
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
                           <proof prover="6"><result status="valid" time="0.39" steps="178"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                         <proof prover="6"><result status="valid" time="0.27" steps="176"/></proof>
                         </goal>
                         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
                         <proof prover="6"><result status="valid" time="0.38" steps="178"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="scalar_rows">
                       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="6"><result status="valid" time="0.51" steps="178"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="set_valid_index">
                       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                        <proof prover="6"><result status="valid" time="0.27" steps="176"/></proof>
                        </goal>
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0" expl="apply premises" proved="true">
                         <transf name="replace" proved="true" arg1="(ket_length
     (mat_mult m
      (make_ket n
       (fun (j:int) -&gt;
         get (get x (bv_to_int a) 0 *.. ket n (bv_to_int a)) j 0))))" arg2="n" arg3="in" arg4="H">
                          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                          <proof prover="6"><result status="valid" time="0.27" steps="176"/></proof>
                          </goal>
                          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
                          <transf name="apply" proved="true" arg1="get_ket_length">
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.0" expl="apply premises" proved="true">
                           <proof prover="6"><result status="valid" time="0.50" steps="178"/></proof>
                           </goal>
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="mat_mult_columns">
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.0" expl="apply premises" proved="true">
                            <proof prover="6"><result status="valid" time="0.44" steps="178"/></proof>
                            </goal>
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1" expl="rewrite premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="make_ket_rows">
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.0" expl="rewrite premises" proved="true">
                             <proof prover="6"><result status="valid" time="0.43" steps="178"/></proof>
                             </goal>
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.1.1.1" expl="rewrite premises" proved="true">
                             <proof prover="6"><result status="valid" time="0.41" steps="178"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.0" expl="apply premises" proved="true">
                            <proof prover="6"><result status="valid" time="0.30" steps="176"/></proof>
                            </goal>
                            <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1" expl="rewrite premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="make_ket_rows">
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.0" expl="rewrite premises" proved="true">
                             <proof prover="6"><result status="valid" time="0.41" steps="178"/></proof>
                             </goal>
                             <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.0.1.2.1.1" expl="rewrite premises" proved="true">
                             <proof prover="6"><result status="valid" time="0.41" steps="178"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="scalar_rows">
                          <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                          <proof prover="6"><result status="valid" time="0.42" steps="178"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                        <proof prover="6"><result status="valid" time="0.31" steps="176"/></proof>
                        </goal>
                        <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
                        <proof prover="6"><result status="valid" time="0.46" steps="178"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="6"><result status="valid" time="0.53" steps="178"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_mult_ket_bv.3.0.0.0.0.2.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.42" steps="178"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_ket_bv.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.46" steps="163"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_bv.3.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.39" steps="163"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_bv.3.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC mat_mult_ket_bv.3.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_mult_ket_bv.3.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.74"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_ket_bv.3.0.0.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_mult_ket_bv.3.0.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.94"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_bv.3.0.0.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC mat_mult_ket_bv.3.0.0.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="VC mat_mult_ket_bv.3.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_ket_bv.3.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_mult_ket_bv.3.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_mult_ket_bv.3.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.80"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_ket_bv.3.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_mult_ket_bv.3.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.74"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_ket_bv.3.0.0.2.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_ket_bv.3.0.0.2.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_ket_rows">
         <goal name="VC mat_mult_ket_bv.3.0.0.2.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.34" steps="163"/></proof>
         </goal>
         <goal name="VC mat_mult_ket_bv.3.0.0.2.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.42" steps="163"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_bv.3.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.36" steps="163"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_ket_bv.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.42" steps="163"/></proof>
    </goal>
    <goal name="VC mat_mult_ket_bv.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.35" steps="163"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_bv.3.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="3.06"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_bv_gen" expl="VC for mat_mult_ket_bv_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_bv_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_bv_gen.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="163"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_bv_gen.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="163"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_bv_gen.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_sum_l" expl="VC for mat_mult_ket_sum_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_sum_l.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_mult_ket_sum_l.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_mult_ket_sum_l.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.88"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_sum_l.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_mult_ket_sum_l.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="2.98"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_mult_ket_sum_l.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC mat_mult_ket_sum_l.1.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC mat_mult_ket_sum_l.1.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
    </goal>
    <goal name="VC mat_mult_ket_sum_l.1.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="4.04"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_mult_ket_sum_l.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="161"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_sum_l.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l s f l)" arg2="(mat_sum s f)">
   <goal name="VC mat_mult_ket_sum_l.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC mat_mult_ket_sum_l.3.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mat_mult_ket_sum_l.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_spec1">
      <goal name="VC mat_mult_ket_sum_l.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC mat_mult_ket_sum_l.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.83"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_sum_l.3.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.30" steps="159"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_sum_l.3.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_mult_ket_sum_l.3.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_ket_sum_l.3.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.78"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_sum_l.3.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC mat_mult_ket_sum_l.3.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_spec1">
     <goal name="VC mat_mult_ket_sum_l.3.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_sum_l.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.81"/></proof>
     </goal>
     <goal name="VC mat_mult_ket_sum_l.3.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
     </goal>
     <goal name="VC mat_mult_ket_sum_l.3.1.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_mult_ket_sum_l.3.1.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.35" steps="163"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC fun_inversion_pre" expl="VC for fun_inversion_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC fun_inversion_pre.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_valid_index">
   <goal name="VC fun_inversion_pre.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.1.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="( mem (f j) (to_fset 0 n))">
     <goal name="VC fun_inversion_pre.1.0.0.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.73"/></proof>
     </goal>
     <goal name="VC fun_inversion_pre.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.43" steps="173"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.1.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="( mem (f j) (to_fset 0 n))">
     <goal name="VC fun_inversion_pre.1.0.1.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.74"/></proof>
     </goal>
     <goal name="VC fun_inversion_pre.1.0.1.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.36" steps="173"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.1.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
    </goal>
    <goal name="VC fun_inversion_pre.1.1.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.29" steps="169"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.59"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_valid_index">
   <goal name="VC fun_inversion_pre.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.4.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.62"/></proof>
    </goal>
    <goal name="VC fun_inversion_pre.4.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.75"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.4.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
    </goal>
    <goal name="VC fun_inversion_pre.4.1.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.33" steps="169"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="175"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="175"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.65"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.8" expl="assertion" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC fun_inversion_pre.8.0" expl="assertion" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC fun_inversion_pre.8.0.0" expl="VC for fun_inversion_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.8.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_rows">
      <goal name="VC fun_inversion_pre.8.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="set_rows">
       <goal name="VC fun_inversion_pre.8.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="4"><result status="valid" time="0.65"/></proof>
       </goal>
       <goal name="VC fun_inversion_pre.8.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.0" proved="true">
          <transf name="assert" proved="true" arg1="( mem (f e) (to_fset 0 n))">
           <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="4"><result status="valid" time="4.22"/></proof>
           </goal>
           <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.0.1" proved="true">
           <proof prover="6"><result status="valid" time="0.42" steps="176"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.1" proved="true">
          <transf name="rewrite" proved="true" arg1="make_spec2">
           <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.1.0" proved="true">
           <transf name="assert" proved="true" arg1="( mem (f e) (to_fset 0 n))">
            <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
            <proof prover="4"><result status="valid" time="3.69"/></proof>
            </goal>
            <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.1.0.1" proved="true">
            <proof prover="6"><result status="valid" time="0.36" steps="176"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC fun_inversion_pre.8.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="3.48"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC fun_inversion_pre.8.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.8.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.31" steps="167"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.8.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.44" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC fun_inversion_pre.8.0.0.1" expl="assertion" proved="true">
     <proof prover="4"><result status="valid" time="0.60"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.9" expl="assertion" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC fun_inversion_pre.9.0" expl="assertion" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC fun_inversion_pre.9.0.0" expl="VC for fun_inversion_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.9.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_columns">
      <goal name="VC fun_inversion_pre.9.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="set_columns">
       <goal name="VC fun_inversion_pre.9.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="1"><result status="valid" time="0.93"/></proof>
       </goal>
       <goal name="VC fun_inversion_pre.9.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="( mem (f e) s&#39;)">
          <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="4"><result status="valid" time="0.73"/></proof>
          </goal>
          <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.76"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="( mem (f e) (to_fset 0 n))">
          <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
          <proof prover="4"><result status="valid" time="0.72"/></proof>
          </goal>
          <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_spec2">
            <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.40" steps="171"/></proof>
            </goal>
            <goal name="VC fun_inversion_pre.9.0.0.0.0.1.0.1.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.69"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC fun_inversion_pre.9.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.9.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="167"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.9.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.41" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC fun_inversion_pre.9.0.0.1" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="0.85"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.10" expl="assertion" proved="true">
  <transf name="compute_hyp_specified" proved="true" >
   <goal name="VC fun_inversion_pre.10.0" expl="assertion" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC fun_inversion_pre.10.0.0" expl="VC for fun_inversion_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.10.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_rows">
      <goal name="VC fun_inversion_pre.10.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="set_rows">
       <goal name="VC fun_inversion_pre.10.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC fun_inversion_pre.10.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="rewrite" proved="true" arg1="make_spec2">
         <goal name="VC fun_inversion_pre.10.0.0.0.0.0.0.0" expl="assertion" proved="true">
         <proof prover="6"><result status="valid" time="0.35" steps="167"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.10.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.68"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC fun_inversion_pre.10.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC fun_inversion_pre.10.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.10.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.42" steps="169"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.10.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC fun_inversion_pre.10.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_spec2">
           <goal name="VC fun_inversion_pre.10.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.45" steps="169"/></proof>
           </goal>
           <goal name="VC fun_inversion_pre.10.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.64"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC fun_inversion_pre.10.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.10.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.32" steps="167"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.10.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.37" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC fun_inversion_pre.10.0.0.1" expl="assertion" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC fun_inversion_pre.10.0.0.1.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="make_spec2">
       <goal name="VC fun_inversion_pre.10.0.0.1.0.0" expl="assertion" proved="true">
       <proof prover="6"><result status="valid" time="0.36" steps="167"/></proof>
       </goal>
       <goal name="VC fun_inversion_pre.10.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.75"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.11" expl="assertion" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC fun_inversion_pre.11.0" expl="assertion" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC fun_inversion_pre.11.0.0" expl="VC for fun_inversion_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.11.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_columns">
      <goal name="VC fun_inversion_pre.11.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="set_columns">
       <goal name="VC fun_inversion_pre.11.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="1"><result status="valid" time="1.09"/></proof>
       </goal>
       <goal name="VC fun_inversion_pre.11.0.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC fun_inversion_pre.11.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC fun_inversion_pre.11.0.0.0.0.1.0.0" proved="true">
         <proof prover="6"><result status="valid" time="0.35" steps="169"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.11.0.0.0.0.1.0.1" proved="true">
         <proof prover="0"><result status="valid" time="1.09"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC fun_inversion_pre.11.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.11.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.30" steps="167"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.11.0.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.42" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC fun_inversion_pre.11.0.0.1" expl="assertion" proved="true">
     <proof prover="1"><result status="valid" time="1.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.12" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.71"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.13" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.88"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.14" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.15" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.16" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.16.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.16.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.16.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.87"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.16.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.16.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.16.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.82"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.17" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H15">
   <goal name="VC fun_inversion_pre.17.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.74"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.18" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H11">
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.19" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H18">
   <goal name="VC fun_inversion_pre.19.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.20" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H11">
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.21" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H21">
   <goal name="VC fun_inversion_pre.21.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.72"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.22" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H15">
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.23" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H24">
   <goal name="VC fun_inversion_pre.23.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.76"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.24" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.24.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.24.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.24.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.83"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.24.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.24.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.24.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="1.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.25" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.67"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.26" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="179"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.27" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.27.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.27.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.27.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.27.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.27.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.27.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.84"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.28" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.64"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.29" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="185"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.30" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.30.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.30.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.30.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.86"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.30.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.30.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.30.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.90"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.31" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.71"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.32" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.51" steps="198"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.33" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.33.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.33.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.33.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.93"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.33.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.33.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.33.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="1.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.34" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.35" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.43" steps="206"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.36" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.37" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.37.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.37.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.37.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.40"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.37.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.37.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.37.1.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.34"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.38" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H14">
   <goal name="VC fun_inversion_pre.38.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H60">
    <goal name="VC fun_inversion_pre.38.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC fun_inversion_pre.38.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="VC fun_inversion_pre.38.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H53">
      </transf>
      </goal>
      <goal name="VC fun_inversion_pre.38.0.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.38.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC fun_inversion_pre.38.0.0.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.38.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="1.30"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.38.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC fun_inversion_pre.38.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_spec2">
           <goal name="VC fun_inversion_pre.38.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.40" steps="209"/></proof>
           </goal>
           <goal name="VC fun_inversion_pre.38.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.92"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.38.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.85"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.39" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H14">
   <goal name="VC fun_inversion_pre.39.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H60">
    <goal name="VC fun_inversion_pre.39.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC fun_inversion_pre.39.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="VC fun_inversion_pre.39.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H54">
      </transf>
      </goal>
      <goal name="VC fun_inversion_pre.39.0.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.39.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC fun_inversion_pre.39.0.0.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.39.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.88"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.39.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC fun_inversion_pre.39.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_spec1">
           <goal name="VC fun_inversion_pre.39.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.41" steps="211"/></proof>
           </goal>
           <goal name="VC fun_inversion_pre.39.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.79"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.39.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.99"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.40" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="211"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.41" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.83"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.42" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.42.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.42.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.42.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.43"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.42.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.42.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.42.1.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.59"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.43" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC fun_inversion_pre.43.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H10">
    <goal name="VC fun_inversion_pre.43.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H41">
     <goal name="VC fun_inversion_pre.43.0.0.0" expl="precondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="VC fun_inversion_pre.43.0.0.0.0" expl="VC for fun_inversion_pre" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC fun_inversion_pre.43.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="4"><result status="valid" time="0.87"/></proof>
       </goal>
       <goal name="VC fun_inversion_pre.43.0.0.0.0.1" expl="precondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC fun_inversion_pre.43.0.0.0.0.1.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="make_spec2">
         <goal name="VC fun_inversion_pre.43.0.0.0.0.1.0.0" expl="precondition" proved="true">
         <proof prover="6"><result status="valid" time="0.32" steps="211"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.43.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.82"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.44" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H10">
   <goal name="VC fun_inversion_pre.44.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H38">
    <goal name="VC fun_inversion_pre.44.0.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.78"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.45" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="213"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.46" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.47"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.47" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.10"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.48" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.94"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.49" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="get_surjective" arg2="f,s,s&#39;">
   <goal name="VC fun_inversion_pre.49.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC fun_inversion_pre.49.0.0" expl="destruct premise" proved="true">
    <proof prover="6"><result status="valid" time="0.55" steps="216"/></proof>
    </goal>
    <goal name="VC fun_inversion_pre.49.0.1" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC fun_inversion_pre.49.0.1.0" expl="precondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="e&#39;">
      <goal name="VC fun_inversion_pre.49.0.1.0.0" expl="precondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC fun_inversion_pre.49.0.1.0.0.0" expl="destruct premise" proved="true">
       <proof prover="6"><result status="valid" time="0.52" steps="216"/></proof>
       </goal>
       <goal name="VC fun_inversion_pre.49.0.1.0.0.1" expl="precondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC fun_inversion_pre.49.0.1.0.0.1.0" expl="precondition" proved="true">
        <transf name="exists" proved="true" arg1="e">
         <goal name="VC fun_inversion_pre.49.0.1.0.0.1.0.0" proved="true">
         <proof prover="4"><result status="valid" time="1.19"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.50" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC fun_inversion_pre.50.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.40" steps="211"/></proof>
   </goal>
   <goal name="VC fun_inversion_pre.50.1" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.97"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.51" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="211"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.52" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.87"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.53" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="213"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.54" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.58" steps="220"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.55" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.55" steps="222"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.56" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.56.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.56.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.56.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.36"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.56.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC fun_inversion_pre.56.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC fun_inversion_pre.56.1.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.29"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.57" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.94"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.58" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC fun_inversion_pre.58.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.58.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.58.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.58.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC fun_inversion_pre.58.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.58.1.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="1.45"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.59" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.83"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.60" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC fun_inversion_pre.60.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H45">
    <goal name="VC fun_inversion_pre.60.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H76">
     <goal name="VC fun_inversion_pre.60.0.0.0" expl="precondition" proved="true">
     <proof prover="4"><result status="valid" time="0.97"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.61" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC fun_inversion_pre.61.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H45">
    <goal name="VC fun_inversion_pre.61.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H73">
     <goal name="VC fun_inversion_pre.61.0.0.0" expl="precondition" proved="true">
     <proof prover="4"><result status="valid" time="1.10"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.62" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="227"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.63" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (remove (choose s) s)
  (fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))" arg2="(mat_sum (remove (choose s) s)
  (fun (j:int) -&gt; (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one))">
   <goal name="VC fun_inversion_pre.63.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H17">
    <goal name="VC fun_inversion_pre.63.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC fun_inversion_pre.63.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="1.00"/></proof>
     </goal>
     <goal name="VC fun_inversion_pre.63.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC fun_inversion_pre.63.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC fun_inversion_pre.63.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC fun_inversion_pre.63.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_rows">
         <goal name="VC fun_inversion_pre.63.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_rows">
          <goal name="VC fun_inversion_pre.63.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="4.64"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC fun_inversion_pre.63.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC fun_inversion_pre.63.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC fun_inversion_pre.63.0.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_columns">
         <goal name="VC fun_inversion_pre.63.0.0.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_columns">
          <goal name="VC fun_inversion_pre.63.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="4.74"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC fun_inversion_pre.63.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC fun_inversion_pre.63.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.63.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a)" arg2="(inv_func f s s&#39; a)">
          <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.41" steps="225"/></proof>
          </goal>
          <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(forall a b. mem a s -&gt; mem b s -&gt; f a = f b -&gt; a = b)">
           <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="instantiate" proved="true" arg1="get_injective" arg2="f,s">
             <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(a = b -&gt; f a = f b)">
              <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
              <proof prover="6"><result status="valid" time="0.33" steps="233"/></proof>
              </goal>
              <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
              <proof prover="4"><result status="valid" time="0.86"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="h">
            <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.68" steps="234"/></proof>
            </goal>
            <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.66" steps="234"/></proof>
            </goal>
            <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.0.1.1.2" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.27"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a)" arg2="(inv_func f s s&#39; a)">
          <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.59" steps="234"/></proof>
          </goal>
          <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(f ( inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a) = f (inv_func f s s&#39; a))">
           <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.65" steps="234"/></proof>
           </goal>
           <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
           <transf name="case" proved="true" arg1="(inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a
  &lt;&gt; inv_func f s s&#39; a)">
            <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0" expl="true case (equality hypothesis)" proved="true">
            <transf name="assert" proved="true" arg1="( (f @ inv_func f (remove (choose s) s) (remove (f @ choose s) s&#39;) a)
  &lt;&gt; (f @ inv_func f s s&#39; a))">
             <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
             <transf name="instantiate" proved="true" arg1="get_injective" arg2="f,s">
              <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="Hinst">
               <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.66" steps="238"/></proof>
               </goal>
               <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.66" steps="239"/></proof>
               </goal>
               <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.57" steps="239"/></proof>
               </goal>
               <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.28" steps="229"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.0.1" expl="true case (equality hypothesis)" proved="true">
             <proof prover="6"><result status="valid" time="0.28" steps="229"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC fun_inversion_pre.63.0.0.2.0.0.0.1.1.1.1" expl="false case (equality hypothesis)" proved="true">
            <proof prover="6"><result status="valid" time="0.32" steps="229"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.63.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="VC fun_inversion_pre.63.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.93"/></proof>
    </goal>
    <goal name="VC fun_inversion_pre.63.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC fun_inversion_pre.63.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC fun_inversion_pre.63.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.63.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC fun_inversion_pre.63.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC fun_inversion_pre.63.1.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.63.1.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.36"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.63.1.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.24"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.64" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H55">
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.65" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.09"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.66" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H65">
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.67" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="227"/></proof>
  </goal>
  <goal name="VC fun_inversion_pre.68" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum s (fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))" arg2="(mat_sum (add (choose s ) (remove (choose s) s))(fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))">
   <goal name="VC fun_inversion_pre.68.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_add">
    <goal name="VC fun_inversion_pre.68.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.68.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H8">
      <goal name="VC fun_inversion_pre.68.0.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(add (f @ choose s) (remove (f @ choose s) s&#39;))" arg2="s&#39;" arg3="in" arg4="H37">
       <goal name="VC fun_inversion_pre.68.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H37">
        <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="apply" proved="true" arg1="add_mat_eq">
         <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H20">
          <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H46">
           <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H77">
            <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="1.06"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H19">
          <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H45">
           <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H73">
            <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="1.11"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.87" steps="236"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.68.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC fun_inversion_pre.68.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="1.05"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.68.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="1.22"/></proof>
    </goal>
    <goal name="VC fun_inversion_pre.68.0.2" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="H55">
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.68.0.3" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H54">
     <goal name="VC fun_inversion_pre.68.0.3.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H85">
      <goal name="VC fun_inversion_pre.68.0.3.0.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.68.0.3.0.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="1.13"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.68.0.4" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H53">
     <goal name="VC fun_inversion_pre.68.0.4.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H81">
      <goal name="VC fun_inversion_pre.68.0.4.0.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.68.0.4.0.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="1.32"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.68.0.5" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="229"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.68.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s">
    <goal name="VC fun_inversion_pre.68.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.68.1.1" expl="equality hypothesis" proved="true">
    <proof prover="4"><result status="valid" time="1.13"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC fun_inversion_pre.69" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 1)">
   <goal name="VC fun_inversion_pre.69.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
    <goal name="VC fun_inversion_pre.69.0.0" expl="true case (postcondition)" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC fun_inversion_pre.69.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
      <goal name="VC fun_inversion_pre.69.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC fun_inversion_pre.69.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="VC fun_inversion_pre.69.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(f (element s) = element s&#39;)">
         <goal name="VC fun_inversion_pre.69.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(cardinal s&#39; = 1)">
          <goal name="VC fun_inversion_pre.69.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.52" steps="165"/></proof>
          </goal>
          <goal name="VC fun_inversion_pre.69.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem (f @ element s) s&#39;)">
           <goal name="VC fun_inversion_pre.69.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="5.12"/></proof>
           </goal>
           <goal name="VC fun_inversion_pre.69.0.0.0.0.0.0.0.1.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.42" steps="169"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.69.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="165"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC fun_inversion_pre.69.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(inv_func f s s&#39; (element s&#39;) = element s)">
         <goal name="VC fun_inversion_pre.69.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(mem (inv_func f s s&#39; (element s&#39;)) s)">
          <goal name="VC fun_inversion_pre.69.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem (element s&#39;) s&#39;)">
           <goal name="VC fun_inversion_pre.69.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="4"><result status="valid" time="0.91"/></proof>
           </goal>
           <goal name="VC fun_inversion_pre.69.0.0.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.45" steps="167"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC fun_inversion_pre.69.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.40" steps="167"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.69.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC fun_inversion_pre.69.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.36" steps="165"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC fun_inversion_pre.69.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="163"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC fun_inversion_pre.69.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC fun_inversion_pre.69.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.39" steps="163"/></proof>
    </goal>
    <goal name="VC fun_inversion_pre.69.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC fun_inversion_pre.69.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC fun_inversion_pre.69.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="( mat_sum s (fun (j:int) -&gt; (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one))" arg2="(mat_sum s
  (fun (j:int) -&gt;
    if mem j s then (a @ j) *.. set (make n 1 c_zero) (f @ j) 0 c_one
    else make n 1 c_zero))">
       <goal name="VC fun_inversion_pre.69.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC fun_inversion_pre.69.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_eq">
         <goal name="VC fun_inversion_pre.69.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="1.31"/></proof>
         </goal>
         <goal name="VC fun_inversion_pre.69.1.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H64">
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.69.1.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="1.78"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC fun_inversion_pre.69.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="mat_sum_eq">
        <goal name="VC fun_inversion_pre.69.1.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.28" steps="231"/></proof>
        </goal>
        <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_rows">
            <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_rows">
             <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="5.96"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_columns">
            <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_columns">
             <goal name="VC fun_inversion_pre.69.1.1.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="5.55"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC fun_inversion_pre.69.1.1.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="1.32"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_fun_inversion" expl="VC for ket_fun_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_fun_inversion.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="164"/></proof>
  </goal>
  <goal name="VC ket_fun_inversion.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
  </goal>
  <goal name="VC ket_fun_inversion.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="166"/></proof>
  </goal>
  <goal name="VC ket_fun_inversion.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.58" steps="168"/></proof>
  </goal>
  <goal name="VC ket_fun_inversion.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="168"/></proof>
  </goal>
  <goal name="VC ket_fun_inversion.5" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (to_fset 0 pow_2_n)
    (fun (j:int) -&gt;
      (a @ inv_ f (to_fset 0 pow_2_n) (to_fset 0 pow_2_n) j)
      *.. ket (ket_length m) j))" arg2="(mat_sum (to_fset 0 pow_2_n)
  (fun (j:int) -&gt; (a @ j) *.. set (make pow_2_n 1 c_zero) (f @ j) 0 c_one))">
   <goal name="VC ket_fun_inversion.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum (to_fset 0 pow_2_n)
    (fun (j:int) -&gt; (a @ j) *.. set (make pow_2_n 1 c_zero) (f @ j) 0 c_one))" arg2="(mat_sum (to_fset 0 pow_2_n)
    (fun (j:int) -&gt; (a @ j) *.. ket (ket_length m) (f @ j)))">
    <goal name="VC ket_fun_inversion.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H7">
    </transf>
    </goal>
    <goal name="VC ket_fun_inversion.5.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC ket_fun_inversion.5.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="166"/></proof>
     </goal>
     <goal name="VC ket_fun_inversion.5.0.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_fun_inversion.5.0.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_fun_inversion.5.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_rows">
         <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_rows">
          <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="set_rows">
           <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="set_rows">
            <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.23" steps="170"/></proof>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (f e&#39;) (to_fset 0 pow_2_n))">
             <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
             <proof prover="4"><result status="valid" time="0.80"/></proof>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="set_valid_index">
              <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.0.0" proved="true">
               <proof prover="6"><result status="valid" time="0.59" steps="174"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.0.1" proved="true">
               <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.0.1.0" proved="true">
                <proof prover="6"><result status="valid" time="0.51" steps="174"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="6"><result status="valid" time="0.38" steps="174"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.1.0" proved="true">
               <proof prover="6"><result status="valid" time="0.23" steps="172"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.0.1.1.1.1" proved="true">
               <proof prover="6"><result status="valid" time="0.48" steps="174"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="assert" proved="true" arg1="(mem (f e) (to_fset 0 pow_2_n))">
            <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="4"><result status="valid" time="1.13"/></proof>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_valid_index">
             <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.0.0" proved="true">
              <proof prover="6"><result status="valid" time="0.40" steps="174"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.0.1" proved="true">
              <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
               <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.0.1.0" proved="true">
               <proof prover="6"><result status="valid" time="0.40" steps="174"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="6"><result status="valid" time="0.54" steps="174"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.1.0" proved="true">
              <proof prover="6"><result status="valid" time="0.23" steps="172"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.1.0.0.0.0.0.1.1.1.1" proved="true">
              <proof prover="6"><result status="valid" time="0.38" steps="174"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_fun_inversion.5.0.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_fun_inversion.5.0.1.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_columns">
         <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_columns">
          <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="set_columns">
           <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="set_columns">
            <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.24" steps="170"/></proof>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_valid_index">
             <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f e&#39;) (to_fset 0 pow_2_n))">
               <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="4"><result status="valid" time="0.77"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.39" steps="174"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
               <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
               <transf name="assert" proved="true" arg1="(mem (f e&#39;) (to_fset 0 pow_2_n))">
                <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
                <proof prover="4"><result status="valid" time="0.92"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.39" steps="174"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="6"><result status="valid" time="0.41" steps="172"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.22" steps="170"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.36" steps="172"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_valid_index">
            <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f e) (to_fset 0 pow_2_n))">
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
              <proof prover="4"><result status="valid" time="0.74"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.40" steps="174"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f e) (to_fset 0 pow_2_n))">
               <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
               <proof prover="4"><result status="valid" time="1.15"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.36" steps="174"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="6"><result status="valid" time="0.52" steps="172"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="170"/></proof>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.1.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.65" steps="172"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_fun_inversion.5.0.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_fun_inversion.5.0.1.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_fun_inversion.5.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq">
        <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_mat">
         <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="set_rows">
          <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ket_rows">
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (ket_length m))" arg2="pow_2_n">
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.58" steps="170"/></proof>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.38" steps="168"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.51" steps="170"/></proof>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (ket_length m))" arg2="pow_2_n">
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
             <proof prover="4"><result status="valid" time="1.21"/></proof>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.39" steps="171"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.23" steps="168"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="set_valid_index">
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <proof prover="4"><result status="valid" time="0.93"/></proof>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.58" steps="172"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
              <proof prover="4"><result status="valid" time="1.08"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.42" steps="172"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="6"><result status="valid" time="0.39" steps="170"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.39" steps="168"/></proof>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.53" steps="170"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="set_columns">
          <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ket_columns">
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.63" steps="170"/></proof>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.39" steps="170"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="4"><result status="valid" time="0.96"/></proof>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_valid_index">
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.0" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
              <proof prover="6"><result status="valid" time="0.23" steps="170"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.0.1" proved="true">
              <proof prover="6"><result status="valid" time="0.46" steps="172"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.1" proved="true">
             <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.1.0" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.1.0.0" expl="asserted formula" proved="true">
               <proof prover="6"><result status="valid" time="0.25" steps="170"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.1.0.1" proved="true">
               <proof prover="6"><result status="valid" time="0.73" steps="172"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="6"><result status="valid" time="0.56" steps="172"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.1.0" proved="true">
             <proof prover="6"><result status="valid" time="0.23" steps="170"/></proof>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.1.1.1.1.1" proved="true">
             <proof prover="6"><result status="valid" time="0.67" steps="172"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="j" arg2="0">
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_ket_value">
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="set_values">
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.61" steps="174"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_value">
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.71" steps="174"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.37" steps="172"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.0" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.36" steps="174"/></proof>
                 </goal>
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1" expl="rewrite premises" proved="true">
                 <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="destruct" proved="true" arg1="Hinst2">
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0" expl="destruct premise" proved="true">
                    <transf name="rewrite" proved="true" arg1="set_spec7">
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.0" expl="destruct premise" proved="true">
                     <proof prover="6"><result status="valid" time="0.42" steps="175"/></proof>
                     </goal>
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 (pow_2_n)))">
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.1.0" expl="asserted formula" proved="true">
                      <proof prover="4"><result status="valid" time="0.78"/></proof>
                      </goal>
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <proof prover="0"><result status="valid" time="1.39"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="destruct" proved="true" arg1="Hinst2">
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0" expl="destruct premise" proved="true">
                     <transf name="rewrite" proved="true" arg1="set_spec6">
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.0" expl="destruct premise" proved="true">
                      <proof prover="6"><result status="valid" time="0.58" steps="175"/></proof>
                      </goal>
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                      <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 (pow_2_n)))">
                       <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
                       <proof prover="4"><result status="valid" time="1.01"/></proof>
                       </goal>
                       <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.22"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="instantiate" proved="true" arg1="Hinst2" arg2="i,0">
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.2.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.49" steps="177"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.24" steps="172"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="set_valid_index">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="assert" proved="true" arg1="( mem (f a) (to_fset 0 pow_2_n))">
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <proof prover="4"><result status="valid" time="0.73"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.52" steps="174"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="destruct" proved="true" arg1="Hinst2">
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.0" expl="destruct premise" proved="true">
                   <proof prover="0"><result status="valid" time="5.29"/></proof>
                   </goal>
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                   <transf name="destruct" proved="true" arg1="Hinst2">
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0" expl="destruct premise" proved="true">
                    <transf name="rewrite" proved="true" arg1="set_spec4">
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.0" expl="destruct premise" proved="true">
                     <proof prover="6"><result status="valid" time="0.38" steps="173"/></proof>
                     </goal>
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="set_valid_index">
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                      <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                       <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="6.06"/></proof>
                       </goal>
                       <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
                       <proof prover="6"><result status="valid" time="0.40" steps="173"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.43" steps="173"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                    <transf name="instantiate" proved="true" arg1="Hinst2" arg2="i,0">
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                     <transf name="assert" proved="true" arg1="( mem (f a) (to_fset 0 pow_2_n))">
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
                      <proof prover="4"><result status="valid" time="1.09"/></proof>
                      </goal>
                      <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.44" steps="176"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="6"><result status="valid" time="0.49" steps="172"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.1" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.1.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.24" steps="170"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.1.1.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.42" steps="172"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.0" expl="asserted formula" proved="true">
              <proof prover="4"><result status="valid" time="0.83"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="set_valid_index">
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.0" proved="true">
                <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="6"><result status="valid" time="0.28" steps="172"/></proof>
                 </goal>
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.0.1" proved="true">
                 <proof prover="6"><result status="valid" time="0.47" steps="174"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1" proved="true">
                <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0" proved="true">
                 <transf name="replace" proved="true" arg1="(pow_2_n )" arg2="(rows (set (make pow_2_n 1 c_zero) (f @ a) 0 c_one))">
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.0" proved="true">
                  <proof prover="6"><result status="valid" time="0.38" steps="174"/></proof>
                  </goal>
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1" expl="equality hypothesis" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0" expl="equality hypothesis" proved="true">
                   <transf name="rewrite" proved="true" arg1="set_spec5">
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_spec2">
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.0.0" expl="equality hypothesis" proved="true">
                     <proof prover="6"><result status="valid" time="0.29" steps="172"/></proof>
                     </goal>
                     <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="6"><result status="valid" time="0.23" steps="172"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.33"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="6"><result status="valid" time="0.53" steps="174"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.1.0" proved="true">
                <proof prover="6"><result status="valid" time="0.36" steps="172"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.0.2.1.1.1" proved="true">
                <proof prover="6"><result status="valid" time="0.58" steps="174"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.57" steps="172"/></proof>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.41"/></proof>
            </goal>
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.0" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.40" steps="172"/></proof>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1" expl="rewrite premises" proved="true">
             <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0" expl="rewrite premises" proved="true">
               <transf name="destruct" proved="true" arg1="Hinst2">
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.0" expl="destruct premise" proved="true">
                <proof prover="0"><result status="valid" time="5.45"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1" expl="rewrite premises" proved="true">
                <transf name="destruct" proved="true" arg1="Hinst2">
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0" expl="destruct premise" proved="true">
                 <transf name="rewrite" proved="true" arg1="set_spec4">
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.0" expl="destruct premise" proved="true">
                  <proof prover="6"><result status="valid" time="0.58" steps="173"/></proof>
                  </goal>
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="set_valid_index">
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.0.0" proved="true">
                    <proof prover="3"><result status="valid" time="0.39"/></proof>
                    </goal>
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.0.1" proved="true">
                    <proof prover="0"><result status="valid" time="5.94"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.1.0" proved="true">
                    <proof prover="6"><result status="valid" time="0.24" steps="170"/></proof>
                    </goal>
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.0.1.1.1" proved="true">
                    <proof prover="6"><result status="valid" time="0.40" steps="173"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.1" expl="rewrite premises" proved="true">
                 <transf name="instantiate" proved="true" arg1="Hinst2" arg2="i,0">
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.0.3.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.41" steps="174"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
           <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="(set (make pow_2_n 1 c_zero) (f @ a) 0 c_one),pow_2_n,1">
            <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0" expl="destruct premise" proved="true">
             <transf name="rewrite" proved="true" arg1="set_rows">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.0" expl="destruct premise" proved="true">
              <proof prover="6"><result status="valid" time="0.39" steps="172"/></proof>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1" expl="rewrite premises" proved="true">
              <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.0" expl="asserted formula" proved="true">
               <proof prover="4"><result status="valid" time="0.73"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="set_valid_index">
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.0" proved="true">
                 <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
                  <proof prover="6"><result status="valid" time="0.23" steps="172"/></proof>
                  </goal>
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.0.1" proved="true">
                  <proof prover="6"><result status="valid" time="0.47" steps="174"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1" proved="true">
                 <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.0" proved="true">
                  <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.0.0" expl="asserted formula" proved="true">
                   <proof prover="6"><result status="valid" time="0.21" steps="172"/></proof>
                   </goal>
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.0.1" proved="true">
                   <proof prover="6"><result status="valid" time="0.47" steps="174"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
                  <proof prover="6"><result status="valid" time="0.47" steps="174"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.1.0" proved="true">
                 <proof prover="6"><result status="valid" time="0.22" steps="172"/></proof>
                 </goal>
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.0.1.1.1.1" proved="true">
                 <proof prover="6"><result status="valid" time="0.40" steps="174"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
             <transf name="destruct" proved="true" arg1="Hinst">
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0" expl="destruct premise" proved="true">
              <transf name="rewrite" proved="true" arg1="set_columns">
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.0" expl="destruct premise" proved="true">
               <proof prover="6"><result status="valid" time="0.38" steps="172"/></proof>
               </goal>
               <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1" expl="rewrite premises" proved="true">
               <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
                <proof prover="4"><result status="valid" time="0.89"/></proof>
                </goal>
                <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="set_valid_index">
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.0" proved="true">
                  <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="6"><result status="valid" time="0.30" steps="172"/></proof>
                   </goal>
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.0.1" proved="true">
                   <proof prover="6"><result status="valid" time="0.43" steps="174"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1" proved="true">
                  <transf name="replace" proved="true" arg1="(rows (make pow_2_n 1 c_zero))" arg2="pow_2_n">
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.0" proved="true">
                   <transf name="assert" proved="true" arg1="(mem (f a) (to_fset 0 pow_2_n))">
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.0.0" expl="asserted formula" proved="true">
                    <proof prover="6"><result status="valid" time="0.29" steps="172"/></proof>
                    </goal>
                    <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.0.1" proved="true">
                    <proof prover="6"><result status="valid" time="0.45" steps="174"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.0.1.1" expl="equality hypothesis" proved="true">
                   <proof prover="6"><result status="valid" time="0.47" steps="174"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.1.0" proved="true">
                  <proof prover="6"><result status="valid" time="0.26" steps="172"/></proof>
                  </goal>
                  <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.0.1.1.1.1" proved="true">
                  <proof prover="6"><result status="valid" time="0.45" steps="174"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_fun_inversion.5.0.1.2.0.0.0.2.0.1.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="4"><result status="valid" time="0.82"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_fun_inversion.5.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC ket_fun_inversion.5.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC ket_fun_inversion.5.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="166"/></proof>
     </goal>
     <goal name="VC ket_fun_inversion.5.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_fun_inversion.5.1.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_fun_inversion.5.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_fun_inversion.5.1.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.92"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_fun_inversion.5.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_fun_inversion.5.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_fun_inversion.5.1.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.91"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_fun_inversion.5.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_fun_inversion.5.1.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_fun_inversion.5.1.0.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="VC ket_fun_inversion.5.1.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.64"/></proof>
        </goal>
        <goal name="VC ket_fun_inversion.5.1.0.2.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="1.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_partition_filter" expl="VC for ket_sum_partition_filter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_partition_filter.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
  </goal>
  <goal name="VC ket_sum_partition_filter.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="VC ket_sum_partition_filter.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_partition_filter.1.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.45" steps="165"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_partition_filter.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_sum_partition_filter.1.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.44" steps="165"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_partition_filter.2" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ket_sum_partition_filter.2.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_empty1">
    <goal name="VC ket_sum_partition_filter.2.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_partition_filter.2.0.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(mem e ( (my_filter s p1)))">
      <goal name="VC ket_sum_partition_filter.2.0.0.0.0" expl="true case (apply premises)" proved="true">
      <transf name="case" proved="true" arg1="(mem e ( (my_filter s p2)))">
       <goal name="VC ket_sum_partition_filter.2.0.0.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="assert" proved="true" arg1="(p1 e &amp;&amp; p2 e)">
        <goal name="VC ket_sum_partition_filter.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_partition_filter.2.0.0.0.0.0.0.0" proved="true">
         <proof prover="6"><result status="valid" time="0.38" steps="169"/></proof>
         </goal>
         <goal name="VC ket_sum_partition_filter.2.0.0.0.0.0.0.1" proved="true">
         <proof prover="6"><result status="valid" time="0.36" steps="171"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_partition_filter.2.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
        <proof prover="6"><result status="valid" time="0.37" steps="173"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_partition_filter.2.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
       <proof prover="6"><result status="valid" time="0.37" steps="169"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_partition_filter.2.0.0.0.1" expl="false case (apply premises)" proved="true">
      <proof prover="6"><result status="valid" time="0.37" steps="167"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_partition_filter.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="163"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Ket_basis_concat" proved="true">
 <goal name="VC hpart_ket" expl="VC for hpart_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC hpart_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="157"/></proof>
  </goal>
  <goal name="VC hpart_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="159"/></proof>
  </goal>
  <goal name="VC hpart_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="160"/></proof>
  </goal>
  <goal name="VC hpart_ket.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="160"/></proof>
  </goal>
  <goal name="VC hpart_ket.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="168"/></proof>
  </goal>
  <goal name="VC hpart_ket.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.55" steps="170"/></proof>
  </goal>
  <goal name="VC hpart_ket.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="172"/></proof>
  </goal>
  <goal name="VC hpart_ket.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="2.63"/></proof>
  </goal>
  <goal name="VC hpart_ket.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.43" steps="180"/></proof>
  </goal>
  <goal name="VC hpart_ket.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="178"/></proof>
  </goal>
  <goal name="VC hpart_ket.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="178"/></proof>
  </goal>
  <goal name="VC hpart_ket.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="178"/></proof>
  </goal>
  <goal name="VC hpart_ket.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="178"/></proof>
  </goal>
  <goal name="VC hpart_ket.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="178"/></proof>
  </goal>
  <goal name="VC hpart_ket.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="184"/></proof>
  </goal>
  <goal name="VC hpart_ket.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="182"/></proof>
  </goal>
  <goal name="VC hpart_ket.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="182"/></proof>
  </goal>
  <goal name="VC hpart_ket.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="182"/></proof>
  </goal>
  <goal name="VC hpart_ket.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="182"/></proof>
  </goal>
  <goal name="VC hpart_ket.19" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="182"/></proof>
  </goal>
  <goal name="VC hpart_ket.20" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.42" steps="186"/></proof>
  </goal>
  <goal name="VC hpart_ket.21" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="184"/></proof>
  </goal>
  <goal name="VC hpart_ket.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="184"/></proof>
  </goal>
  <goal name="VC hpart_ket.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="184"/></proof>
  </goal>
  <goal name="VC hpart_ket.24" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="184"/></proof>
  </goal>
  <goal name="VC hpart_ket.25" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="194"/></proof>
  </goal>
  <goal name="VC hpart_ket.26" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
  </goal>
  <goal name="VC hpart_ket.27" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC hpart_ket_rows" expl="VC for hpart_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC hpart_ket_rows.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.83"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC hpart_ket_l" expl="VC for hpart_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC hpart_ket_l.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.58"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart_ket" expl="VC for tpart_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC tpart_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="159"/></proof>
  </goal>
  <goal name="VC tpart_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="160"/></proof>
  </goal>
  <goal name="VC tpart_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="160"/></proof>
  </goal>
  <goal name="VC tpart_ket.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="168"/></proof>
  </goal>
  <goal name="VC tpart_ket.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="170"/></proof>
  </goal>
  <goal name="VC tpart_ket.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.45" steps="174"/></proof>
  </goal>
  <goal name="VC tpart_ket.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="172"/></proof>
  </goal>
  <goal name="VC tpart_ket.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="172"/></proof>
  </goal>
  <goal name="VC tpart_ket.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="172"/></proof>
  </goal>
  <goal name="VC tpart_ket.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.61" steps="174"/></proof>
  </goal>
  <goal name="VC tpart_ket.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="172"/></proof>
  </goal>
  <goal name="VC tpart_ket.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="173"/></proof>
  </goal>
  <goal name="VC tpart_ket.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="178"/></proof>
  </goal>
  <goal name="VC tpart_ket.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.50" steps="176"/></proof>
  </goal>
  <goal name="VC tpart_ket.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="176"/></proof>
  </goal>
  <goal name="VC tpart_ket.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="176"/></proof>
  </goal>
  <goal name="VC tpart_ket.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.74" steps="178"/></proof>
  </goal>
  <goal name="VC tpart_ket.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="176"/></proof>
  </goal>
  <goal name="VC tpart_ket.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="177"/></proof>
  </goal>
  <goal name="VC tpart_ket.19" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.54" steps="180"/></proof>
  </goal>
  <goal name="VC tpart_ket.20" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.42" steps="178"/></proof>
  </goal>
  <goal name="VC tpart_ket.21" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.41" steps="178"/></proof>
  </goal>
  <goal name="VC tpart_ket.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.41" steps="178"/></proof>
  </goal>
  <goal name="VC tpart_ket.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.75" steps="180"/></proof>
  </goal>
  <goal name="VC tpart_ket.24" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="178"/></proof>
  </goal>
  <goal name="VC tpart_ket.25" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="188"/></proof>
  </goal>
  <goal name="VC tpart_ket.26" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="188"/></proof>
  </goal>
  <goal name="VC tpart_ket.27" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="188"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart_ket_l" expl="VC for tpart_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC tpart_ket_l.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC tpart_ket_rows" expl="VC for tpart_ket_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC tpart_ket_rows.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_ket" expl="VC for concat_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="155"/></proof>
  </goal>
  <goal name="VC concat_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="165"/></proof>
  </goal>
  <goal name="VC concat_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="167"/></proof>
  </goal>
  <goal name="VC concat_ket.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="167"/></proof>
  </goal>
  <goal name="VC concat_ket.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="177"/></proof>
  </goal>
  <goal name="VC concat_ket.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="177"/></proof>
  </goal>
  <goal name="VC concat_ket.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="179"/></proof>
  </goal>
  <goal name="VC concat_ket.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.50" steps="182"/></proof>
  </goal>
  <goal name="VC concat_ket.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="181"/></proof>
  </goal>
  <goal name="VC concat_ket.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.41" steps="181"/></proof>
  </goal>
  <goal name="VC concat_ket.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="183"/></proof>
  </goal>
  <goal name="VC concat_ket.11" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.70" steps="185"/></proof>
  </goal>
  <goal name="VC concat_ket.12" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.63" steps="187"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC concat_ht_part_ket" expl="VC for concat_ht_part_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC concat_ht_part_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="157"/></proof>
  </goal>
  <goal name="VC concat_ht_part_ket.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_ht_part_ket.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
   </goal>
   <goal name="VC concat_ht_part_ket.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_ht_part_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="163"/></proof>
  </goal>
  <goal name="VC concat_ht_part_ket.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC concat_ht_part_ket.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.40" steps="163"/></proof>
   </goal>
   <goal name="VC concat_ht_part_ket.3.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="163"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC concat_ht_part_ket.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="169"/></proof>
  </goal>
  <goal name="VC concat_ht_part_ket.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="169"/></proof>
  </goal>
  <goal name="VC concat_ht_part_ket.6" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="equal_ket_by_int" arg2="(kronecker (hpart_ket m i) (tpart_ket m i)),m,(ket_length m)">
   <goal name="VC concat_ht_part_ket.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC concat_ht_part_ket.6.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.50" steps="177"/></proof>
    </goal>
    <goal name="VC concat_ht_part_ket.6.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.72" steps="177"/></proof>
    </goal>
    <goal name="VC concat_ht_part_ket.6.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.45" steps="175"/></proof>
    </goal>
    <goal name="VC concat_ht_part_ket.6.0.3" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="175"/></proof>
    </goal>
    <goal name="VC concat_ht_part_ket.6.0.4" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC concat_ht_part_ket.6.0.4.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC concat_ht_part_ket.6.0.4.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H6">
       <goal name="VC concat_ht_part_ket.6.0.4.0.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="decomp" arg2="(ket_to_int m),(power 2 (ket_length m - i))">
        <goal name="VC concat_ht_part_ket.6.0.4.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.46" steps="180"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_ht_decomp" expl="VC for ket_ht_decomp" proved="true">
 <proof prover="6"><result status="valid" time="0.44" steps="174"/></proof>
 </goal>
 <goal name="VC ket_ht_decomp_quant" expl="VC for ket_ht_decomp_quant" proved="true">
 <proof prover="6"><result status="valid" time="0.40" steps="161"/></proof>
 </goal>
 <goal name="VC ht_decomp" expl="VC for ht_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ht_decomp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="157"/></proof>
  </goal>
  <goal name="VC ht_decomp.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="160"/></proof>
  </goal>
  <goal name="VC ht_decomp.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="160"/></proof>
  </goal>
  <goal name="VC ht_decomp.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="160"/></proof>
  </goal>
  <goal name="VC ht_decomp.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (to_fset 0 (power 2 (ket_length m)))
    (fun (j:int) -&gt;
      get m j 0
      *.. kronecker (hpart_ket (ket (ket_length m) j) i)
          (tpart_ket (ket (ket_length m) j) i)))" arg2="(mat_sum (to_fset 0 (power 2 (ket_length m)))
    (fun (j:int) -&gt; get m j 0 *.. ket (ket_length m) j))">
   <goal name="VC ht_decomp.4.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
   <goal name="VC ht_decomp.4.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="VC ht_decomp.4.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.05"/></proof>
    </goal>
    <goal name="VC ht_decomp.4.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC ht_decomp.4.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ht_decomp.4.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="6.16"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ht_decomp.4.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ht_decomp.4.1.1.1.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="7.20"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ht_decomp.4.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ht_decomp.4.1.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ht_decomp.4.1.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="VC ht_decomp.4.1.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.09"/></proof>
       </goal>
       <goal name="VC ht_decomp.4.1.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.86"/></proof>
       </goal>
       <goal name="VC ht_decomp.4.1.2.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ht_decomp.4.1.2.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.84"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sqrt_two" proved="true">
 <goal name="VC not_null_powers_squarert_two" expl="VC for not_null_powers_squarert_two" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="129"/></proof>
 </goal>
 <goal name="VC pos_coeff" expl="VC for pos_coeff" proved="true">
 <proof prover="6"><result status="valid" time="0.18" steps="127"/></proof>
 </goal>
 <goal name="VC real_pos_coeff" expl="VC for real_pos_coeff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_pos_coeff.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="127"/></proof>
  </goal>
  <goal name="VC real_pos_coeff.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="129"/></proof>
  </goal>
  <goal name="VC real_pos_coeff.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC real_pos_coeff.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="127"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="coeffs" proved="true">
 <proof prover="6"><result status="valid" time="0.20" steps="129"/></proof>
 </goal>
 <goal name="VC minus_one_power_values" expl="VC for minus_one_power_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_one_power_values.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.72"/></proof>
  </goal>
  <goal name="VC minus_one_power_values.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
  </goal>
  <goal name="VC minus_one_power_values.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
  </goal>
  <goal name="VC minus_one_power_values.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC minus_one_power_values.3.0" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC minus_one_power_values.3.0.0" expl="variant decrease" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="139"/></proof>
    </goal>
    <goal name="VC minus_one_power_values.3.0.1" expl="variant decrease" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC minus_one_power_values.3.1" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC minus_one_power_values.3.1.0" expl="variant decrease" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
    </goal>
    <goal name="VC minus_one_power_values.3.1.1" expl="variant decrease" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC minus_one_power_values.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC minus_one_power_values.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="139"/></proof>
   </goal>
   <goal name="VC minus_one_power_values.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC minus_one_power_values.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC minus_one_power_values.5.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC minus_one_power_values.5.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC minus_one_power_values.5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC minus_one_power_values.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC minus_one_power_values.6.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC minus_one_power_values.6.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC minus_one_power_values.6.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.36"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC factors_mop" expl="VC for factors_mop" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC factors_mop.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="137"/></proof>
  </goal>
  <goal name="VC factors_mop.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="138"/></proof>
  </goal>
  <goal name="VC factors_mop.2" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(even i)">
   <goal name="VC factors_mop.2.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(even (i+j))">
    <goal name="VC factors_mop.2.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="2.05"/></proof>
    </goal>
    <goal name="VC factors_mop.2.0.1" expl="true case (assertion)" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC factors_mop.2.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(odd (i+j))">
    <goal name="VC factors_mop.2.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(odd i)">
     <goal name="VC factors_mop.2.1.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="142"/></proof>
     </goal>
     <goal name="VC factors_mop.2.1.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.43"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC factors_mop.2.1.1" expl="false case (assertion)" proved="true">
    <proof prover="0"><result status="valid" time="0.35"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC factors_mop.3" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(even i)">
   <goal name="VC factors_mop.3.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(odd (i+j))">
    <goal name="VC factors_mop.3.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="1.80"/></proof>
    </goal>
    <goal name="VC factors_mop.3.0.1" expl="true case (assertion)" proved="true">
    <proof prover="4"><result status="valid" time="0.31"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC factors_mop.3.1" expl="false case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(even (i+j))">
    <goal name="VC factors_mop.3.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(exists i1 j1. i = 2*i1+1 /\ j = 2*j1+1)">
     <goal name="VC factors_mop.3.1.0.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="(div i 2)">
      <goal name="VC factors_mop.3.1.0.0.0" proved="true">
      <transf name="exists" proved="true" arg1="(div j 2)">
       <goal name="VC factors_mop.3.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC factors_mop.3.1.0.0.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="142"/></proof>
        </goal>
        <goal name="VC factors_mop.3.1.0.0.0.0.1" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="142"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC factors_mop.3.1.0.1" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="148"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC factors_mop.3.1.1" expl="false case (assertion)" proved="true">
    <proof prover="4"><result status="valid" time="0.31"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC factors_mop.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC factors_mop_rev" expl="VC for factors_mop_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="135"/></proof>
 </goal>
 <goal name="VC pow_inv_sqrt_2" expl="VC for pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_sqrt_2.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC pow_inv_sqrt_2.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pos_coeff_def" arg2="in" arg3="result_def">
    <goal name="VC pow_inv_sqrt_2.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC pow_inv_sqrt_2.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="cpower_div">
      <goal name="VC pow_inv_sqrt_2.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="div_eq">
       <goal name="VC pow_inv_sqrt_2.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
       </goal>
       <goal name="VC pow_inv_sqrt_2.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.30"/></proof>
       </goal>
       <goal name="VC pow_inv_sqrt_2.3.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pow_inv_sqrt_2.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="145"/></proof>
      </goal>
      <goal name="VC pow_inv_sqrt_2.3.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_sqrt_2_add" expl="VC for pow_inv_sqrt_2_add" proved="true">
 <proof prover="0"><result status="valid" time="0.40"/></proof>
 </goal>
 <goal name="VC pow_inv_2" expl="VC for pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="131"/></proof>
  </goal>
  <goal name="VC pow_inv_2.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="VC pow_inv_2.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="VC pow_inv_2.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC pow_inv_2.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="11.77"/></proof>
  </goal>
  <goal name="VC pow_inv_2.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_leq_c_one" expl="VC for pow_inv_2_leq_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_leq_c_one.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.94"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_inf_c_one" expl="VC for pow_inv_2_inf_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_inf_c_one.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.94"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_pow_inv_2" expl="VC for cpower_pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_pow_inv_2.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
   <goal name="VC cpower_pow_inv_2.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
    <goal name="VC cpower_pow_inv_2.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="cpower_div">
     <goal name="VC cpower_pow_inv_2.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="div_eq">
      <goal name="VC cpower_pow_inv_2.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.42" steps="135"/></proof>
      </goal>
      <goal name="VC cpower_pow_inv_2.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
       <goal name="VC cpower_pow_inv_2.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="power_no_">
        <goal name="VC cpower_pow_inv_2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="i_to_c_eq">
         <goal name="VC cpower_pow_inv_2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.34" steps="135"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cpower_pow_inv_2.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cpower_pow_inv_2.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cpower_pow_inv_2.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.26"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cpower_pow_inv_2.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
     </goal>
     <goal name="VC cpower_pow_inv_2.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.31"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cpower_pow_inv_2.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_pow_inv_2.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_pow_inv_sqrt_2" expl="VC for cpower_pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_pow_inv_sqrt_2.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2_def">
   <goal name="VC cpower_pow_inv_sqrt_2.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2_def">
    <goal name="VC cpower_pow_inv_sqrt_2.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="135"/></proof>
    </goal>
    <goal name="VC cpower_pow_inv_sqrt_2.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cpower_pow_inv_sqrt_2.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_2_pow_inv_sqrt_2" expl="VC for cpower_2_pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_2_pow_inv_sqrt_2.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_subst" expl="VC for pow_inv_2_subst" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_subst.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
   <goal name="VC pow_inv_2_subst.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(i_to_c (power 2 i))" arg2="(cpower ttwo i)">
    <goal name="VC pow_inv_2_subst.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="135"/></proof>
    </goal>
    <goal name="VC pow_inv_2_subst.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="4"><result status="valid" time="0.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pow_inv_2_subst.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_" expl="VC for pow_inv_2_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_sqrt_2_2_add" expl="VC for pow_inv_sqrt_2_2_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_sqrt_2_2_add.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_cpower" expl="VC for pow_inv_2_cpower" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_cpower.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_scal" expl="VC for pow_inv_2_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_scal.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_from_int" expl="VC for pow_inv_2_from_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_from_int.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_sq_rt" expl="VC for pow_inv_2_sq_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_sq_rt.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
   <goal name="VC pow_inv_2_sq_rt.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2_def">
    <goal name="VC pow_inv_2_sq_rt.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC pow_inv_2_sq_rt.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pos_coeff_def">
      <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="cpower_div">
       <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="cpower_squarert_two">
        <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(cpower c_one n)" arg2="c_one">
         <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="induction_arg_ty_lex" proved="true" arg1="n">
          <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="4"><result status="valid" time="3.23"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="154"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="152"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="152"/></proof>
       </goal>
       <goal name="VC pow_inv_2_sq_rt.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="154"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pow_inv_2_sq_rt.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pow_inv_2_sq_rt.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.43" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_sqrt_2_double" expl="VC for pow_inv_sqrt_2_double" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_sqrt_2_double.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.65" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pos_pow_inv_2" expl="VC for pos_pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pos_pow_inv_2.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pos_pow_inv_sqrt_2" expl="VC for pos_pow_inv_sqrt_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pos_pow_inv_sqrt_2.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_sqrt_2_def">
   <goal name="VC pos_pow_inv_sqrt_2.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="5.24"/></proof>
   </goal>
   <goal name="VC pos_pow_inv_sqrt_2.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_pos_pow_inv_2" expl="VC for strict_pos_pow_inv_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_pos_pow_inv_2.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_add" expl="VC for pow_inv_2_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_add.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
   <goal name="VC pow_inv_2_add.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
    <goal name="VC pow_inv_2_add.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
     <goal name="VC pow_inv_2_add.0.0.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c d. c_zero &lt;&gt; b -&gt; c_zero &lt;&gt; d -&gt; (a/.b) *. (c/.d) = (a*.c) /. (b*.d))">
      <goal name="VC pow_inv_2_add.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pow_inv_2_add.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.43" steps="149"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pow_inv_2_add.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="VC pow_inv_2_add.0.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="div_eq">
        <goal name="VC pow_inv_2_add.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="145"/></proof>
        </goal>
        <goal name="VC pow_inv_2_add.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="power_sum">
         <goal name="VC pow_inv_2_add.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="i_to_c_mult">
          <goal name="VC pow_inv_2_add.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.31" steps="143"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pow_inv_2_add.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
         </goal>
         <goal name="VC pow_inv_2_add.0.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="143"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pow_inv_2_add.0.0.0.0.1.0.2" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.42"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pow_inv_2_add.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.39"/></proof>
       </goal>
       <goal name="VC pow_inv_2_add.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.40"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pow_inv_2_add.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pow_inv_2_add.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="143"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pow_inv_2_add.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_plus_one" expl="VC for pow_inv_2_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_plus_one.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_plus_one_rev" expl="VC for pow_inv_2_plus_one_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_plus_one_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_with_" expl="VC for pow_inv_2_with_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_with_.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_to_one" expl="VC for pow_inv_2_to_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_to_one.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_one" expl="VC for pow_inv_2_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_one.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_2_to_one_gen" expl="VC for pow_inv_2_to_one_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_2_to_one_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_to_pow_2" expl="VC for pow_inv_to_pow_2" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_to_pow_2.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
   <goal name="VC pow_inv_to_pow_2.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pow_inv_2_def">
    <goal name="VC pow_inv_to_pow_2.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(c_one /. i_to_c (power 2 (k - l)))" arg2="((c_one *. i_to_c (power 2 l)) /. (i_to_c (power 2 (k - l)) *. i_to_c (power 2 l)))">
     <goal name="VC pow_inv_to_pow_2.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="i_to_c_mult">
      <goal name="VC pow_inv_to_pow_2.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="power_sum_rev">
       <goal name="VC pow_inv_to_pow_2.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="4"><result status="valid" time="0.43"/></proof>
       </goal>
       <goal name="VC pow_inv_to_pow_2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="145"/></proof>
       </goal>
       <goal name="VC pow_inv_to_pow_2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="145"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pow_inv_to_pow_2.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="0.46"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pow_inv_to_pow_2.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pow_inv_to_pow_2.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_pow_inv_sqrt_2" expl="VC for inv_pow_inv_sqrt_2" proved="true">
 <proof prover="0"><result status="valid" time="3.46"/></proof>
 </goal>
 <goal name="VC pow_inv_sqrt_2_values" expl="VC for pow_inv_sqrt_2_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pow_inv_sqrt_2_values.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="3.08"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2_values.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="3.49"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2_values.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC pow_inv_sqrt_2_values.2.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
   </goal>
   <goal name="VC pow_inv_sqrt_2_values.2.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pow_inv_sqrt_2_values.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2_values.4" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.68" steps="153"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2_values.5" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.76" steps="155"/></proof>
  </goal>
  <goal name="VC pow_inv_sqrt_2_values.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC pow_inv_sqrt_2_values.6.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="VC pow_inv_sqrt_2_values.6.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC neg_pow_inv_sqrt_2_values" expl="VC for neg_pow_inv_sqrt_2_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC neg_pow_inv_sqrt_2_values.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="3.82"/></proof>
  </goal>
  <goal name="VC neg_pow_inv_sqrt_2_values.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(neg_pow_inv_sqrt_2 i )" arg2="(neg_pow_inv_sqrt_2 ((i-1)+1))">
   <goal name="VC neg_pow_inv_sqrt_2_values.1.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="neg_pow_inv_sqrt_2_def">
    <goal name="VC neg_pow_inv_sqrt_2_values.1.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="cpower_plus_one">
     <goal name="VC neg_pow_inv_sqrt_2_values.1.0.0.0" expl="assertion" proved="true">
     <proof prover="6"><result status="valid" time="0.34" steps="149"/></proof>
     </goal>
     <goal name="VC neg_pow_inv_sqrt_2_values.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="149"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC neg_pow_inv_sqrt_2_values.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC neg_pow_inv_sqrt_2_values.1.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC neg_pow_inv_sqrt_2_values.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC neg_pow_inv_sqrt_2_values.2.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="149"/></proof>
   </goal>
   <goal name="VC neg_pow_inv_sqrt_2_values.2.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC neg_pow_inv_sqrt_2_values.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
  </goal>
  <goal name="VC neg_pow_inv_sqrt_2_values.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC neg_pow_inv_sqrt_2_values.4.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC neg_pow_inv_sqrt_2_values.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC neg_pow_inv_sqrt_2_values.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="5.20"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC neg_pow_inv_sqrt_2_values.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC neg_pow_inv_sqrt_2_values.4.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="5.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ppos_neg_coeff_values" expl="VC for ppos_neg_coeff_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ppos_neg_coeff_values.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.61"/></proof>
  </goal>
  <goal name="VC ppos_neg_coeff_values.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.02"/></proof>
  </goal>
  <goal name="VC ppos_neg_coeff_values.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow_inv_sqrt_2_neg" expl="VC for pow_inv_sqrt_2_neg" proved="true">
 <proof prover="6"><result status="valid" time="0.12" steps="143"/></proof>
 </goal>
</theory>
<theory name="Oper_mat" proved="true">
 <goal name="VC pow_2dim_kets" expl="VC for pow_2dim_kets" proved="true">
 <proof prover="0"><result status="valid" time="1.63"/></proof>
 </goal>
 <goal name="VC get_pow2dim" expl="VC for get_pow2dim" proved="true">
 <proof prover="4"><result status="valid" time="0.57"/></proof>
 </goal>
 <goal name="VC set_pow2dim" expl="VC for set_pow2dim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_pow2dim.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_pow2dim_elt" expl="VC for get_pow2dim_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_pow2dim_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.41" steps="143"/></proof>
  </goal>
  <goal name="VC get_pow2dim_elt.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_pow2dim_elt" expl="VC for set_pow2dim_elt" proved="true">
 <proof prover="4"><result status="valid" time="0.61"/></proof>
 </goal>
 <goal name="VC mat_size" expl="VC for mat_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_size.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="137"/></proof>
  </goal>
  <goal name="VC mat_size.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_square" expl="VC for get_square" proved="true">
 <proof prover="6"><result status="valid" time="0.22" steps="139"/></proof>
 </goal>
 <goal name="VC set_square" expl="VC for set_square" proved="true">
 <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
 </goal>
 <goal name="VC set_square_elt" expl="VC for set_square_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_square_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="141"/></proof>
  </goal>
  <goal name="VC set_square_elt.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_square_elt" expl="VC for get_square_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_square_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="141"/></proof>
  </goal>
  <goal name="VC get_square_elt.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pow2dim_square_dec" expl="VC for pow2dim_square_dec" proved="true">
 <proof prover="0"><result status="valid" time="1.42"/></proof>
 </goal>
 <goal name="VC dec_pow2dim_square" expl="VC for dec_pow2dim_square" proved="true">
 <proof prover="0"><result status="valid" time="1.39"/></proof>
 </goal>
 <goal name="VC ln_size" expl="VC for ln_size" proved="true">
 <proof prover="0"><result status="valid" time="0.78"/></proof>
 </goal>
 <goal name="VC set_ln_size_lnc" expl="VC for set_ln_size_lnc" proved="true">
 <proof prover="6"><result status="valid" time="0.26" steps="141"/></proof>
 </goal>
 <goal name="VC set_ln_size_lnr" expl="VC for set_ln_size_lnr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_ln_size_lnr.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ln_size_columns" expl="VC for set_ln_size_columns" proved="true">
 <proof prover="4"><result status="valid" time="0.80"/></proof>
 </goal>
 <goal name="VC set_ln_size_rows" expl="VC for set_ln_size_rows" proved="true">
 <proof prover="4"><result status="valid" time="0.71"/></proof>
 </goal>
 <goal name="VC set_pow2dim_square" expl="VC for set_pow2dim_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_pow2dim_square.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_pow2dim_square_elt" expl="VC for set_pow2dim_square_elt" proved="true">
 <proof prover="4"><result status="valid" time="0.78"/></proof>
 </goal>
 <goal name="VC get_pow2dim_square_elt" expl="VC for get_pow2dim_square_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_pow2dim_square_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="141"/></proof>
  </goal>
  <goal name="VC get_pow2dim_square_elt.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_mat_sum" proved="true">
 <goal name="VC mat_sum_comp" expl="VC for mat_sum_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_comp.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.78"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="163"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_equal">
   <goal name="VC mat_sum_comp.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_comp.2.0.0" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(bitvec, bitvec)) -&gt; concat (fir o) (sec o)),(cartesian_product (n_bvs y) (n_bvs x)),e
">
     <goal name="VC mat_sum_comp.2.0.0.0" expl="apply premises" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC mat_sum_comp.2.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="0"><result status="valid" time="2.91"/></proof>
      </goal>
      <goal name="VC mat_sum_comp.2.0.0.0.1" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC mat_sum_comp.2.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(length e = x+y)">
        <goal name="VC mat_sum_comp.2.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(length e = length (fir a) + length (sec a))">
         <goal name="VC mat_sum_comp.2.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="2.70"/></proof>
         </goal>
         <goal name="VC mat_sum_comp.2.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="h1">
          <goal name="VC mat_sum_comp.2.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="(x+y)" arg2="(y+x)">
           <goal name="VC mat_sum_comp.2.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="add_eq">
            <goal name="VC mat_sum_comp.2.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.75"/></proof>
            </goal>
            <goal name="VC mat_sum_comp.2.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.78"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_comp.2.0.0.0.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_comp.2.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.38" steps="167"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_comp.2.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_map_mem">
     <goal name="VC mat_sum_comp.2.1.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(hpart e y, tpart e y)">
      <goal name="VC mat_sum_comp.2.1.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_comp.2.1.0.0.0.0" proved="true">
       <proof prover="0"><result status="valid" time="3.26"/></proof>
       </goal>
       <goal name="VC mat_sum_comp.2.1.0.0.0.1" proved="true">
       <proof prover="4"><result status="valid" time="0.83"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="159"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="161"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="167"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.49" steps="174"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.58" steps="174"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="166"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="166"/></proof>
  </goal>
  <goal name="VC mat_sum_comp.12" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_sum (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    mat_sum (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx)))" arg2="(mat_sum (n_bvs y) (fun (a:bitvec) -&gt; mat_sum (n_bvs x) (f @ a)))">
   <goal name="VC mat_sum_comp.12.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC mat_sum_comp.12.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_mat_sum" arg2="(fun bv -&gt;  f    (hpart bv y)  (tpart bv y)),(cartesian_product (n_bvs y) (n_bvs x)),(fun o -&gt;  concat  (fir o) (sec o))">
     <goal name="VC mat_sum_comp.12.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H9" arg2="in" arg3="Hinst">
      <goal name="VC mat_sum_comp.12.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
       <goal name="VC mat_sum_comp.12.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC mat_sum_comp.12.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_eq">
         <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="1.05"/></proof>
         </goal>
         <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H13">
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="H13">
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.29" steps="169"/></proof>
              </goal>
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="eliminate_definition" proved="true" >
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="3.39"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="0.76"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.81"/></proof>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.66"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H12">
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="H12">
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.27" steps="169"/></proof>
              </goal>
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="0.78"/></proof>
              </goal>
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="0.78"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.72"/></proof>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.78"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="1.88"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_comp.12.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.93"/></proof>
        </goal>
        <goal name="VC mat_sum_comp.12.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H13">
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H13">
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="3.31"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.52" steps="174"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.91"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.0.0.0.2.0" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.46" steps="174"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H12">
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H12">
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.28" steps="169"/></proof>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="1"><result status="valid" time="1.66"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.41" steps="174"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.47"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.2" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.2.1.0.0.2.0" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.55" steps="174"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_comp.12.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="set_injective">
         <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(fir e = fir e&#39;)">
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0" expl="true case (apply premises)" proved="true">
            <transf name="case" proved="true" arg1="(sec e &lt;&gt; sec e&#39;)">
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="case" proved="true" arg1="(exists i. 0 &lt;= i &lt; x /\ getbv (sec e) i &lt;&gt; getbv (sec e&#39;) i )">
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
              <transf name="destruct" proved="true" arg1="h">
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
               <transf name="assert" proved="true" arg1="( getbv (concat (fir e) (sec e) ) (i + y) &lt;&gt; getbv (concat (fir e&#39;) (sec e&#39;) ) (i + y) )">
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="rewrite" proved="true" arg1="concat_value">
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value">
                  <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="eliminate_if" proved="true" >
                   <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                    <proof prover="4"><result status="valid" time="0.80"/></proof>
                    </goal>
                    <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
                    <proof prover="4"><result status="valid" time="0.74"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
                <proof prover="6"><result status="valid" time="0.26" steps="183"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
              <transf name="assert" proved="true" arg1="(sec e = sec e&#39;)">
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="set_equal_bv">
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.78"/></proof>
                </goal>
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.69"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
               <proof prover="6"><result status="valid" time="0.26" steps="175"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
             <transf name="assert" proved="true" arg1="(e= e&#39;)">
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.1.0" expl="asserted formula" proved="true">
              <transf name="replace" proved="true" arg1="e" arg2="(fir e, sec e)">
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
               <transf name="replace" proved="true" arg1="e&#39;" arg2="(fir e&#39;, sec e&#39;)">
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <proof prover="6"><result status="valid" time="0.28" steps="175"/></proof>
                </goal>
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="6"><result status="valid" time="0.63" steps="180"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
               <proof prover="6"><result status="valid" time="0.45" steps="180"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
              <proof prover="6"><result status="valid" time="0.29" steps="175"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1" expl="false case (apply premises)" proved="true">
            <transf name="assert" proved="true" arg1="(exists i . 0 &lt;= i &lt; length (concat (fir e) (sec e) )/\ getbv (concat (fir e) (sec e) ) i &lt;&gt; getbv (concat (fir e&#39;) (sec e&#39;) ) i)">
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0" expl="asserted formula" proved="true">
             <transf name="case" proved="true" arg1="(exists i . 0 &lt;= i &lt; length  (fir e) /\ getbv  (fir e)   i &lt;&gt; getbv  (fir e&#39;) i)">
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0" expl="asserted formula (true case)" proved="true">
              <transf name="destruct" proved="true" arg1="h1">
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="asserted formula (true case)" proved="true">
               <transf name="exists" proved="true" arg1="i">
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.0" proved="true">
                 <proof prover="6"><result status="valid" time="0.30" steps="179"/></proof>
                 </goal>
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.1" proved="true">
                 <proof prover="3"><result status="valid" time="8.39"/></proof>
                 </goal>
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value">
                  <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0" proved="true">
                  <transf name="rewrite" proved="true" arg1="concat_value">
                   <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0" proved="true">
                   <transf name="eliminate_if" proved="true" >
                    <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0.0" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0.0.0" proved="true">
                     <proof prover="6"><result status="valid" time="0.26" steps="179"/></proof>
                     </goal>
                     <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.0.0.0.2.0.0.0.1" proved="true">
                     <proof prover="3"><result status="valid" time="6.80"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1" expl="asserted formula (false case)" proved="true">
              <transf name="assert" proved="true" arg1="(fir e = fir e&#39;)">
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="set_equal_bv">
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(length (fir e))" arg2="y">
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.75"/></proof>
                 </goal>
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
                 <transf name="apply" proved="true" arg1="goal_comm">
                  <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="3"><result status="valid" time="0.38"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.46" steps="182"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="asserted formula (false case)" proved="true">
               <proof prover="6"><result status="valid" time="0.29" steps="173"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_comp.12.0.0.0.0.0.3.0.0.0.1.1" expl="false case (apply premises)" proved="true">
             <proof prover="6"><result status="valid" time="0.25" steps="181"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.12.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="VC mat_sum_comp.12.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.31" steps="165"/></proof>
    </goal>
    <goal name="VC mat_sum_comp.12.1.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp.12.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp.12.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp.12.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(rows (mat_sum (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ e) @ bvx)))" arg2="(power 2 l)">
        <goal name="VC mat_sum_comp.12.1.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="rows_mat_sum">
          <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
          </goal>
          <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="1.10"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="1.03"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_comp.12.1.1.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.41" steps="175"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_comp.12.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="VC mat_sum_comp.12.1.1.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.32" steps="169"/></proof>
         </goal>
         <goal name="VC mat_sum_comp.12.1.1.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_comp.12.1.1.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_comp.12.1.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.84"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_comp.12.1.1.0.0.0.1.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_comp.12.1.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="1.16"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_comp.12.1.1.0.0.0.1.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.40" steps="175"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.12.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp.12.1.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp.12.1.1.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="columns_mat_sum">
        <goal name="VC mat_sum_comp.12.1.1.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.29" steps="169"/></proof>
        </goal>
        <goal name="VC mat_sum_comp.12.1.1.1.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_comp.12.1.1.1.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_comp.12.1.1.1.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.97"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_comp.12.1.1.1.0.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_comp.12.1.1.1.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="1.15"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_comp.12.1.1.1.0.0.2" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.23" steps="171"/></proof>
            </goal>
            <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.89"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0.1.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0.1.1.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="1.07"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_comp.12.1.1.1.0.0.2.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.85"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp.12.1.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.85"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_comp_rev" expl="VC for mat_sum_comp_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_comp_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_rev.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_rev.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="157"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_rev.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.39" steps="163"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_rev.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="163"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_rev.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC mat_sum_comp_rev.5.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bin_comp_l" expl="VC for ket_sum_bin_comp_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_bin_comp_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_l.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_l.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_l.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_l.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC ket_sum_bin_comp_l.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_bin_comp_l.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC ket_sum_bin_comp_l.5.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="2.51"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_sum_bin_comp_l.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
   <goal name="VC ket_sum_bin_comp_l.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum (n_bvs y)
  (fun (i:bitvec) -&gt;
    make_ket l
    (fun (j:int) -&gt;
      get
      ((fun (bvy:bitvec) -&gt;
         (scal @ bvy)
         *.. ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
       @ i)
      j 0)))" arg2="(mat_sum (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    mat_sum (n_bvs x)
    (fun (bvx:bitvec) -&gt;
      ((fun (bvy1:bitvec) (bvx1:bitvec) -&gt;
         (scal @ bvy1)
         *.. make_ket l (fun (j:int) -&gt; get ((f @ bvy1) @ bvx1) j 0))
       @ bvy)
      @ bvx)))">
    <goal name="VC ket_sum_bin_comp_l.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC ket_sum_bin_comp_l.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_l_to_mat_sum">
      <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mat_sum_eq">
       <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.45" steps="161"/></proof>
       </goal>
       <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.76"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.78"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket_l">
          <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="l">
           <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.0.0.0" proved="true">
            <proof prover="6"><result status="valid" time="0.37" steps="163"/></proof>
            </goal>
            <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.0.0.1" proved="true">
            <proof prover="6"><result status="valid" time="0.44" steps="163"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_ket_value">
            <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
             <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
              <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.62" steps="167"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.30" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_sum_bin_comp_l.6.0.0.0.0.2.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.41" steps="165"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_bin_comp_l.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.28" steps="159"/></proof>
      </goal>
      <goal name="VC ket_sum_bin_comp_l.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.59" steps="161"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_bin_comp_l.6.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC ket_sum_bin_comp_l.6.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.55" steps="161"/></proof>
     </goal>
     <goal name="VC ket_sum_bin_comp_l.6.0.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC ket_sum_bin_comp_l.6.0.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ket_sum_bin_comp_l.6.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ket_sum_bin_comp_l.6.0.1.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.90"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_bin_comp_l.6.0.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_bin_comp_l.6.0.1.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_sum_bin_comp_l.6.0.1.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.88"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_bin_comp_l.6.0.1.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_ket_l">
        <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="l">
         <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.46" steps="163"/></proof>
          </goal>
          <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1" proved="true">
          <transf name="apply" proved="true" arg1="set_is_a_ket_l">
           <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.27" steps="161"/></proof>
           </goal>
           <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.47" steps="163"/></proof>
            </goal>
            <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.84"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1.1.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1.1.1.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="1.12"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.1.2" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="3.41"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="rows_mat_sum">
            <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.50" steps="163"/></proof>
            </goal>
            <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.1.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.81"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.1.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.1.1.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.79"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.2" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.0.0.1.2.2.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.82"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
          <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_values">
            <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="eliminate_definition" proved="true" >
             <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="get_ket_def">
              <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sum_value">
               <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ket_sum_l_value">
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="sum_scal_rev">
                  <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="sum_eq">
                   <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="scalar_values">
                      <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="get_ket_rev">
                       <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="get_ket_rev">
                        <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="3.21"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.32" steps="170"/></proof>
                </goal>
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.34" steps="170"/></proof>
                 </goal>
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                 <proof prover="4"><result status="valid" time="3.66"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.32" steps="170"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="set_constant_size">
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="4.90"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="4.13"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.41" steps="172"/></proof>
               </goal>
               <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="set_valid_index">
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.24" steps="170"/></proof>
                 </goal>
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(rows
    (mat_sum (n_bvs x)
     (fun (bvx:bitvec) -&gt;
       (scal @ a) *.. make_ket l (fun (j:int) -&gt; get ((f @ a) @ bvx) j 0))))" arg2="(power 2 l)">
                  <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.0" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="3.20"/></proof>
                  </goal>
                  <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="rows_mat_sum">
                   <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.45" steps="172"/></proof>
                   </goal>
                   <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_constant_size">
                    <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.0.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.12"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.1.1.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.62"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.2.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.0.1.1.2.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="2.54"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.45" steps="170"/></proof>
                 </goal>
                 <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.38" steps="172"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_bin_comp_l.6.0.1.2.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.33" steps="165"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_bin_comp_l.6.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="159"/></proof>
   </goal>
   <goal name="VC ket_sum_bin_comp_l.6.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.40" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bin_comp" expl="VC for ket_sum_bin_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_bin_comp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.49" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)" arg2="(ket_sum_l (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    ((fun (bv:bitvec) -&gt; c_one) @ bvy)
    *.. ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)">
   <goal name="VC ket_sum_bin_comp.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC ket_sum_bin_comp.3.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq">
     <goal name="VC ket_sum_bin_comp.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.50" steps="159"/></proof>
     </goal>
     <goal name="VC ket_sum_bin_comp.3.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.37" steps="159"/></proof>
     </goal>
     <goal name="VC ket_sum_bin_comp.3.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.90"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_bin_comp.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="VC ket_sum_bin_comp.3.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.34" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_bin_comp.3.1.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_bin_comp.3.1.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="3.35"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bin_comp_rev" expl="VC for ket_sum_bin_comp_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_bin_comp_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_rev.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_rev.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_rev.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs y)
    (fun (bvy:bitvec) -&gt;
      ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
    l)" arg2="( ket_sum_l (n_bvs y)
  (fun (bvy:bitvec) -&gt;
    ((fun (bv:bitvec) -&gt; c_one) @ bvy)
    *.. ket_sum_l (n_bvs x) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)">
   <goal name="VC ket_sum_bin_comp_rev.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC ket_sum_bin_comp_rev.3.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq">
     <goal name="VC ket_sum_bin_comp_rev.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="159"/></proof>
     </goal>
     <goal name="VC ket_sum_bin_comp_rev.3.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="159"/></proof>
     </goal>
     <goal name="VC ket_sum_bin_comp_rev.3.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="2.64"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_bin_comp_rev.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="VC ket_sum_bin_comp_rev.3.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.36" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_bin_comp_rev.3.1.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.36" steps="159"/></proof>
    </goal>
    <goal name="VC ket_sum_bin_comp_rev.3.1.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="3.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bin_comp_rev_" expl="VC for ket_sum_bin_comp_rev_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_bin_comp_rev_.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_rev_.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_rev_.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_bin_comp_rev_.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(x+y)" arg2="(y+x)">
   <goal name="VC ket_sum_bin_comp_rev_.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
   <goal name="VC ket_sum_bin_comp_rev_.3.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="159"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_bv_to_ints" expl="VC for ket_sum_bv_to_ints" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_bv_to_ints.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_to_fset">
   <goal name="VC ket_sum_bv_to_ints.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="VC ket_sum_bv_to_ints.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.28" steps="153"/></proof>
    </goal>
    <goal name="VC ket_sum_bv_to_ints.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.68"/></proof>
    </goal>
    <goal name="VC ket_sum_bv_to_ints.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="153"/></proof>
    </goal>
    <goal name="VC ket_sum_bv_to_ints.0.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ket_sum_bv_to_ints.0.0.3.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ket_sum_bv_to_ints.0.0.3.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="1.02"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_bv_to_ints.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="153"/></proof>
   </goal>
   <goal name="VC ket_sum_bv_to_ints.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.34" steps="153"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_sum_rev" expl="VC for ket_sum_sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_sum_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="157"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_rev.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="158"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_rev.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="158"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_rev.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="159"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_rev.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="159"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_rev.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="160"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_rev.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs l1) (fun (x:bitvec) -&gt; ket_sum_l (n_bvs l2) (f @ x) l) l)" arg2="(ket_sum_l (n_bvs l1)
  (fun (bvy:bitvec) -&gt;
    ket_sum_l (n_bvs l2) (fun (bvx:bitvec) -&gt; (f @ bvy) @ bvx) l)
  l)">
   <goal name="VC ket_sum_sum_rev.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC ket_sum_sum_rev.6.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="3.68"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_sum_rev.6.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="VC ket_sum_sum_rev.6.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.32" steps="161"/></proof>
    </goal>
    <goal name="VC ket_sum_sum_rev.6.1.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.31" steps="161"/></proof>
    </goal>
    <goal name="VC ket_sum_sum_rev.6.1.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.91"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bin_ket_proj" proved="true">
 <goal name="VC bin_proj" expl="VC for bin_proj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bin_proj.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="161"/></proof>
  </goal>
  <goal name="VC bin_proj.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="167"/></proof>
  </goal>
  <goal name="VC bin_proj.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="167"/></proof>
  </goal>
  <goal name="VC bin_proj.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="169"/></proof>
  </goal>
  <goal name="VC bin_proj.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="169"/></proof>
  </goal>
  <goal name="VC bin_proj.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bin_proj.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="169"/></proof>
   </goal>
   <goal name="VC bin_proj.5.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.34" steps="169"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_proj.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="165"/></proof>
  </goal>
  <goal name="VC bin_proj.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="167"/></proof>
  </goal>
  <goal name="VC bin_proj.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.41" steps="167"/></proof>
  </goal>
  <goal name="VC bin_proj.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.58" steps="177"/></proof>
  </goal>
  <goal name="VC bin_proj.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="177"/></proof>
  </goal>
  <goal name="VC bin_proj.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="183"/></proof>
  </goal>
  <goal name="VC bin_proj.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="183"/></proof>
  </goal>
  <goal name="VC bin_proj.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bin_proj.13.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.34" steps="183"/></proof>
   </goal>
   <goal name="VC bin_proj.13.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.32" steps="183"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_proj.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="167"/></proof>
  </goal>
  <goal name="VC bin_proj.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="167"/></proof>
  </goal>
  <goal name="VC bin_proj.16" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC bin_proj.16.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC bin_proj.16.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bin_proj.16.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="4.14"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_proj.16.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC bin_proj.16.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bin_proj.16.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="3.75"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_proj.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="172"/></proof>
  </goal>
  <goal name="VC bin_proj.18" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC bin_proj.18.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC bin_proj.18.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC bin_proj.18.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC bin_proj.18.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bin_proj.18.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.78"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_proj.18.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC bin_proj.18.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bin_proj.18.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.54"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_proj.18.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bin_proj.18.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_rows">
      <goal name="VC bin_proj.18.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.47" steps="178"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_proj.19" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC bin_proj.19.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC bin_proj.19.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC bin_proj.19.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC bin_proj.19.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bin_proj.19.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.54"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_proj.19.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC bin_proj.19.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bin_proj.19.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="3.42"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_proj.19.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bin_proj.19.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_columns">
      <goal name="VC bin_proj.19.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.47" steps="180"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_proj.20" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC bin_proj.20.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC bin_proj.20.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC bin_proj.20.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.32" steps="185"/></proof>
     </goal>
     <goal name="VC bin_proj.20.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC bin_proj.20.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC bin_proj.20.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC bin_proj.20.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="3.20"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bin_proj.20.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC bin_proj.20.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC bin_proj.20.0.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="3.42"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_proj.20.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.07"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_proj.21" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(mat_sum (to_fset 0 (power 2 (ket_length x)))
  (fun (j:int) -&gt;
    ((fun (j1:int) -&gt;
       if (0 &lt;= j1 /\ j1 &lt; power 2 (ket_length x)) /\
          (int_to_bin j1 (ket_length x) @ k) = i
       then get x j1 0 else c_zero)
     @ j)
    *.. ket (ket_length x) j))">
   <goal name="VC bin_proj.21.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H13">
    <goal name="VC bin_proj.21.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC bin_proj.21.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC bin_proj.21.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bin_proj.21.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="4"><result status="valid" time="0.75"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bin_proj.21.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.60"/></proof>
      </goal>
      <goal name="VC bin_proj.21.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.60"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bin_proj.21.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC bin_proj.21.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC bin_proj.21.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.34" steps="184"/></proof>
     </goal>
     <goal name="VC bin_proj.21.1.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC bin_proj.21.1.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC bin_proj.21.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC bin_proj.21.1.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.79"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bin_proj.21.1.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC bin_proj.21.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC bin_proj.21.1.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.75"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bin_proj.21.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC bin_proj.21.1.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bin_proj.21.1.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.54" steps="191"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bin_proj.22" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.49" steps="184"/></proof>
  </goal>
  <goal name="VC bin_proj.23" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.48" steps="186"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC proj_decomp" expl="VC for proj_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC proj_decomp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="157"/></proof>
  </goal>
  <goal name="VC proj_decomp.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC proj_decomp.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="157"/></proof>
   </goal>
   <goal name="VC proj_decomp.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC proj_decomp.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC proj_decomp.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="157"/></proof>
   </goal>
   <goal name="VC proj_decomp.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC proj_decomp.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="167"/></proof>
  </goal>
  <goal name="VC proj_decomp.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC proj_decomp.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="167"/></proof>
   </goal>
   <goal name="VC proj_decomp.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="167"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC proj_decomp.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC proj_decomp.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="167"/></proof>
   </goal>
   <goal name="VC proj_decomp.5.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="167"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC proj_decomp.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="177"/></proof>
  </goal>
  <goal name="VC proj_decomp.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="178"/></proof>
  </goal>
  <goal name="VC proj_decomp.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="185"/></proof>
  </goal>
  <goal name="VC proj_decomp.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="187"/></proof>
  </goal>
  <goal name="VC proj_decomp.10" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC proj_decomp.10.0" expl="precondition" proved="true">
   <transf name="case" proved="true" arg1="(int_to_bin i (ket_length x) k = 0)">
    <goal name="VC proj_decomp.10.0.0" expl="true case (precondition)" proved="true">
    <transf name="replace" proved="true" arg1="j" arg2="0">
     <goal name="VC proj_decomp.10.0.0.0" expl="true case (precondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="H10">
      <goal name="VC proj_decomp.10.0.0.0.0" expl="true case (precondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H16">
       <goal name="VC proj_decomp.10.0.0.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.41" steps="194"/></proof>
       </goal>
       <goal name="VC proj_decomp.10.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.71"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC proj_decomp.10.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.71"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC proj_decomp.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="0.76"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC proj_decomp.10.0.1" expl="false case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(int_to_bin i (ket_length x) k = 1)">
     <goal name="VC proj_decomp.10.0.1.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.84"/></proof>
     </goal>
     <goal name="VC proj_decomp.10.0.1.1" expl="false case (precondition)" proved="true">
     <transf name="replace" proved="true" arg1="j" arg2="0">
      <goal name="VC proj_decomp.10.0.1.1.0" expl="false case (precondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H10">
       <goal name="VC proj_decomp.10.0.1.1.0.0" expl="false case (precondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H16">
        <goal name="VC proj_decomp.10.0.1.1.0.0.0" expl="false case (precondition)" proved="true">
        <proof prover="6"><result status="valid" time="0.40" steps="195"/></proof>
        </goal>
        <goal name="VC proj_decomp.10.0.1.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.66"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC proj_decomp.10.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.71"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC proj_decomp.10.0.1.1.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.71"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC proj_decomp.11" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="185"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Bv_to_ket" proved="true">
 <goal name="VC ket_to_bv" expl="VC for ket_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_bv.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="155"/></proof>
  </goal>
  <goal name="VC ket_to_bv.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
  </goal>
  <goal name="VC ket_to_bv.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
  </goal>
  <goal name="VC ket_to_bv.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ket_to_bv.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="165"/></proof>
   </goal>
   <goal name="VC ket_to_bv.3.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.34" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_to_bv.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.48" steps="169"/></proof>
  </goal>
  <goal name="VC ket_to_bv.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="167"/></proof>
  </goal>
  <goal name="VC ket_to_bv.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="167"/></proof>
  </goal>
  <goal name="VC ket_to_bv.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.48" steps="173"/></proof>
  </goal>
  <goal name="VC ket_to_bv.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="173"/></proof>
  </goal>
  <goal name="VC ket_to_bv.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="173"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_bv_length" expl="VC for ket_to_bv_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_bv_length.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_ket" expl="VC for bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="157"/></proof>
  </goal>
  <goal name="VC bv_to_ket.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_to_ket.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="158"/></proof>
   </goal>
   <goal name="VC bv_to_ket.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.37" steps="160"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="160"/></proof>
  </goal>
  <goal name="VC bv_to_ket.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="165"/></proof>
  </goal>
  <goal name="VC bv_to_ket.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="169"/></proof>
  </goal>
  <goal name="VC bv_to_ket.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_to_ket.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.39" steps="167"/></proof>
   </goal>
   <goal name="VC bv_to_ket.5.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.52" steps="170"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bv_to_ket.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="173"/></proof>
  </goal>
  <goal name="VC bv_to_ket.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.58" steps="174"/></proof>
  </goal>
  <goal name="VC bv_to_ket.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.50" steps="175"/></proof>
  </goal>
  <goal name="VC bv_to_ket.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.54" steps="177"/></proof>
  </goal>
  <goal name="VC bv_to_ket.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="175"/></proof>
  </goal>
  <goal name="VC bv_to_ket.11" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="175"/></proof>
  </goal>
  <goal name="VC bv_to_ket.12" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bin_to_ket_def">
   <goal name="VC bv_to_ket.12.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_int_def">
    <goal name="VC bv_to_ket.12.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(make_bv (getbv bv) (length bv))" arg2="bv">
     <goal name="VC bv_to_ket.12.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="175"/></proof>
     </goal>
     <goal name="VC bv_to_ket.12.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_bv">
      <goal name="VC bv_to_ket.12.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.55" steps="179"/></proof>
      </goal>
      <goal name="VC bv_to_ket.12.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.42" steps="183"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bv_to_ket.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.37" steps="179"/></proof>
    </goal>
    <goal name="VC bv_to_ket.12.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.55" steps="179"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bv_to_ket.12.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.61" steps="179"/></proof>
   </goal>
   <goal name="VC bv_to_ket.12.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.51" steps="179"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_bv_ket_length" expl="VC for ket_to_bv_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_bv_ket_length.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC is_a_ket_l_bv_to_ket" expl="VC for is_a_ket_l_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC is_a_ket_l_bv_to_ket.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_to_ket_to_bv_to_ket" expl="VC for bin_to_ket_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bin_to_ket_to_bv_to_ket.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC bin_to_ket_to_bv_to_ket.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_ket_def">
    <goal name="VC bin_to_ket_to_bv_to_ket.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
     <goal name="VC bin_to_ket_to_bv_to_ket.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_eq">
      <goal name="VC bin_to_ket_to_bv_to_ket.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.34" steps="160"/></proof>
      </goal>
      <goal name="VC bin_to_ket_to_bv_to_ket.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.39"/></proof>
      </goal>
      <goal name="VC bin_to_ket_to_bv_to_ket.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.43" steps="162"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bin_to_ket_to_bv_to_ket.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.33" steps="160"/></proof>
    </goal>
    <goal name="VC bin_to_ket_to_bv_to_ket.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.42" steps="160"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bin_to_ket_to_bv_to_ket_abs" expl="VC for bin_to_ket_to_bv_to_ket_abs" proved="true">
 <proof prover="6"><result status="valid" time="0.42" steps="159"/></proof>
 </goal>
 <goal name="VC ket_to_int_to_bv_to_ket" expl="VC for ket_to_int_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_int_to_bv_to_ket.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_bv_ket" expl="VC for ket_to_bv_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_bv_ket.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_ket_length" expl="VC for bv_to_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_ket_length.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.74"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_bv_to_ket_length" expl="VC for get_ket_bv_to_ket_length" proved="true">
 <proof prover="0"><result status="valid" time="2.94"/></proof>
 </goal>
 <goal name="VC is_a_ket_l_bvs" expl="VC for is_a_ket_l_bvs" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC is_a_ket_l_bvs.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.45" steps="157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC is_a_ket_l_scal_bvs" expl="VC for is_a_ket_l_scal_bvs" proved="true">
 <proof prover="6"><result status="valid" time="0.51" steps="157"/></proof>
 </goal>
 <goal name="VC ket_to_bv_concat" expl="VC for ket_to_bv_concat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_bv_concat.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.45" steps="195"/></proof>
  </goal>
  <goal name="VC ket_to_bv_concat.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="195"/></proof>
  </goal>
  <goal name="VC ket_to_bv_concat.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.80"/></proof>
  </goal>
  <goal name="VC ket_to_bv_concat.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="195"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_ket_concat_rev" expl="VC for bv_to_ket_concat_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_ket_concat_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_ket_to_bv" expl="VC for bv_to_ket_to_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_ket_to_bv.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_bv_to_ket" expl="VC for ket_to_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_bv_to_ket.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC ket_to_bv_to_ket.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ket_to_bv_to_ket.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket_spec2">
     <goal name="VC ket_to_bv_to_ket.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_to_bv_spec1">
      <goal name="VC ket_to_bv_to_ket.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.43" steps="155"/></proof>
      </goal>
      <goal name="VC ket_to_bv_to_ket.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_to_bv_to_ket.0.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.74"/></proof>
   </goal>
   <goal name="VC ket_to_bv_to_ket.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_to_bv_to_ket.0.2.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.57"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_to_ket_eq" expl="VC for bv_to_ket_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_to_ket_eq.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.87"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_decomp_" expl="VC for ket_decomp_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_decomp_.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="157"/></proof>
  </goal>
  <goal name="VC ket_decomp_.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
  </goal>
  <goal name="VC ket_decomp_.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
  </goal>
  <goal name="VC ket_decomp_.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) -&gt; get_ket m (bv_to_int bvx) *.. bv_to_ket bvx) n)" arg2="(ket_sum_l (n_bvs n)
    (fun (bvx:bitvec) -&gt; get m (bv_to_int bvx) 0 *.. ket n (bv_to_int bvx)) n)">
   <goal name="VC ket_decomp_.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
   <goal name="VC ket_decomp_.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="VC ket_decomp_.3.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
    </goal>
    <goal name="VC ket_decomp_.3.1.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="159"/></proof>
    </goal>
    <goal name="VC ket_decomp_.3.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_decomp_.3.1.2.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.90"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_to_bv_kronecker" expl="VC for ket_to_bv_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_to_bv_kronecker.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_decomp_bv_ket" expl="VC for ket_decomp_bv_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_decomp_bv_ket.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="157"/></proof>
  </goal>
  <goal name="VC ket_decomp_bv_ket.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="157"/></proof>
  </goal>
  <goal name="VC ket_decomp_bv_ket.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.49" steps="157"/></proof>
  </goal>
  <goal name="VC ket_decomp_bv_ket.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC ket_decomp_bv_ket.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="VC ket_decomp_bv_ket.3.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.39" steps="159"/></proof>
    </goal>
    <goal name="VC ket_decomp_bv_ket.3.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="159"/></proof>
    </goal>
    <goal name="VC ket_decomp_bv_ket.3.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_decomp_bv_ket.3.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ket_decomp_bv_ket.3.0.2.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n)
      (fun (bvx:bitvec) -&gt; get m (bv_to_int bvx) 0 *.. ket n (bv_to_int bvx))
      n)" arg2="m">
       <goal name="VC ket_decomp_bv_ket.3.0.2.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="VC ket_decomp_bv_ket.3.0.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_def">
         <goal name="VC ket_decomp_bv_ket.3.0.2.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_decomp_bv_ket.3.0.2.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC ket_decomp_bv_ket.3.0.2.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H1">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_zero" expl="VC for ket_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_zero.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.56" steps="155"/></proof>
  </goal>
  <goal name="VC ket_zero.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.01"/></proof>
  </goal>
  <goal name="VC ket_zero.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="VC ket_zero.2.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="2.73"/></proof>
   </goal>
   <goal name="VC ket_zero.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ket_zero.2.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_to_bv_def">
     <goal name="VC ket_zero.2.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="int_to_bv_def">
      <goal name="VC ket_zero.2.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
       <goal name="VC ket_zero.2.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="VC ket_zero.2.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ket_zero.2.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC ket_zero.2.1.0.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ket_zero.2.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.82"/></proof>
           </goal>
           <goal name="VC ket_zero.2.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="163"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_zero.2.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.62"/></proof>
        </goal>
        <goal name="VC ket_zero.2.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.78"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_zero.2.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ket_zero.2.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC ket_zero.2.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_zero.2.1.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.37" steps="167"/></proof>
          </goal>
          <goal name="VC ket_zero.2.1.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
          </goal>
          <goal name="VC ket_zero.2.1.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.90"/></proof>
          </goal>
          <goal name="VC ket_zero.2.1.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.24" steps="165"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_zero.2.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.74"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_zero.2.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.36" steps="163"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_zero.2.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="161"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ket_zero.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_to_bv_def">
   <goal name="VC ket_zero.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="3.70"/></proof>
   </goal>
   <goal name="VC ket_zero.3.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="163"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC uniform_ket_norm_l" expl="VC for uniform_ket_norm_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC uniform_ket_norm_l.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_sum_ket_norm_l">
   <goal name="VC uniform_ket_norm_l.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; modulus (get x k 0) *. modulus (get x k 0)) 0
  (power 2 n))" arg2="(ind_sum (fun (k:int) -&gt; pow_inv_2 n) 0
  (power 2 n))">
    <goal name="VC uniform_ket_norm_l.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; pow_inv_2 n) 0 (power 2 n))" arg2="c_one">
     <goal name="VC uniform_ket_norm_l.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="165"/></proof>
     </goal>
     <goal name="VC uniform_ket_norm_l.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="c_one" arg2="(pow_inv_2 n *. i_to_c (power 2 n))">
      <goal name="VC uniform_ket_norm_l.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_constant_from_z">
       <goal name="VC uniform_ket_norm_l.0.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.82" steps="167"/></proof>
       </goal>
       <goal name="VC uniform_ket_norm_l.0.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC uniform_ket_norm_l.0.0.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC uniform_ket_norm_l.0.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="3.60"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC uniform_ket_norm_l.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_sum_eq">
     <goal name="VC uniform_ket_norm_l.0.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC uniform_ket_norm_l.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(modulus(get x k 0))" arg2="(pow_inv_sqrt_2 n)">
        <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.49" steps="171"/></proof>
        </goal>
        <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="H2">
         <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_values">
          <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="mult_modulus">
           <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="modulus_real_pos">
            <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="mult_one_t">
             <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="get_ket_rev">
              <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
               <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e:bitvec) -&gt; get_ket ((f @ e) *.. bv_to_ket e) k),(n_bvs n),(int_to_bv k n)">
                 <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="Hinst">
                  <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="get_ket_scalar">
                    <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="mult_modulus">
                     <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="one_mult_t">
                      <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="0.69"/></proof>
                      </goal>
                      <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.68" steps="172"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.78" steps="171"/></proof>
                  </goal>
                  <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="get_ket_scalar">
                     <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="mult_zero_t">
                      <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="rewrite premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.24" steps="173"/></proof>
                      </goal>
                      <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="eliminate_definition" proved="true" >
                       <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
                        <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="get__ket_value">
                         <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                         <transf name="case" proved="true" arg1="(k1 = bv_to_int k)">
                          <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0" expl="true case (rewrite premises)" proved="true">
                          <transf name="assert" proved="true" arg1="(int_to_bv k1 n = int_to_bv (bv_to_int k) n)">
                           <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
                           <proof prover="6"><result status="valid" time="0.38" steps="184"/></proof>
                           </goal>
                           <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1" expl="true case (rewrite premises)" proved="true">
                           <transf name="replace" proved="true" arg1="n" arg2="(length k)" arg3="in" arg4="h">
                            <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1.0" expl="true case (rewrite premises)" proved="true">
                            <transf name="rewrite" proved="true" arg1="int_to_bv_to_int" arg2="in" arg3="h">
                             <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1.0.0" expl="true case (rewrite premises)" proved="true">
                             <proof prover="6"><result status="valid" time="0.67" steps="189"/></proof>
                             </goal>
                             <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                             <transf name="replace" proved="true" arg1="(length k)" arg2="n">
                              <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                              <proof prover="6"><result status="valid" time="0.65" steps="188"/></proof>
                              </goal>
                              <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
                              <proof prover="6"><result status="valid" time="0.46" steps="188"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                            <proof prover="6"><result status="valid" time="0.49" steps="188"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.0.1" expl="false case (rewrite premises)" proved="true">
                          <proof prover="6"><result status="valid" time="0.55" steps="187"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="6"><result status="valid" time="0.66" steps="185"/></proof>
                         </goal>
                         <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                         <proof prover="6"><result status="valid" time="0.59" steps="184"/></proof>
                         </goal>
                         <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
                         <transf name="replace" proved="true" arg1="(length k)" arg2="n">
                          <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.3.0" expl="rewrite premises" proved="true">
                          <proof prover="6"><result status="valid" time="0.26" steps="182"/></proof>
                          </goal>
                          <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.0.0.0.2.0.0.0.1.0.0.3.1" expl="equality hypothesis" proved="true">
                          <proof prover="6"><result status="valid" time="0.48" steps="185"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.57" steps="171"/></proof>
               </goal>
               <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.61" steps="171"/></proof>
            </goal>
            <goal name="VC uniform_ket_norm_l.0.0.1.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.67" steps="171"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC uniform_ket_norm_l.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_l_diag" expl="VC for ket_sum_l_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_l_diag.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="163"/></proof>
  </goal>
  <goal name="VC ket_sum_l_diag.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="165"/></proof>
  </goal>
  <goal name="VC ket_sum_l_diag.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="175"/></proof>
  </goal>
  <goal name="VC ket_sum_l_diag.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC ket_sum_l_diag.3.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC ket_sum_l_diag.3.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun e -&gt; get_ket ((f @ e) *.. bv_to_ket e) i),(n_bvs l),(int_to_bv i l)
">
     <goal name="VC ket_sum_l_diag.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="VC ket_sum_l_diag.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC ket_sum_l_diag.3.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_ket_value">
        <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_bv_to_ket_length">
         <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0.0.0" expl="VC for ket_sum_l_diag" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="6"><result status="valid" time="0.53" steps="186"/></proof>
           </goal>
           <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
           <proof prover="6"><result status="valid" time="0.53" steps="186"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0.1.0" proved="true">
          <proof prover="6"><result status="valid" time="0.26" steps="179"/></proof>
          </goal>
          <goal name="VC ket_sum_l_diag.3.0.0.0.0.0.0.1.1" proved="true">
          <proof prover="0"><result status="valid" time="4.42"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_l_diag.3.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.48" steps="183"/></proof>
       </goal>
       <goal name="VC ket_sum_l_diag.3.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_ket_value">
         <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_bv_to_ket_length">
          <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.0.0.0" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.67" steps="190"/></proof>
            </goal>
            <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.49" steps="190"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="183"/></proof>
           </goal>
           <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(length k)" arg2="l">
            <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.1.1.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="3.67"/></proof>
            </goal>
            <goal name="VC ket_sum_l_diag.3.0.0.0.0.2.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.48" steps="188"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_l_diag.3.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="4.26"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_of_scalars" expl="VC for ket_sum_of_scalars" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_of_scalars.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="165"/></proof>
  </goal>
  <goal name="VC ket_sum_of_scalars.1" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs n) (fun (x:bitvec) -&gt; (f @ x) *.. bv_to_ket x) n)" arg2="(ket_sum_l_diag f n)">
   <goal name="VC ket_sum_of_scalars.1.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.64"/></proof>
   </goal>
   <goal name="VC ket_sum_of_scalars.1.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_diag_def">
    <goal name="VC ket_sum_of_scalars.1.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC ket_sum_of_scalars.1.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="169"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_sum" expl="VC for get_ket_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="167"/></proof>
  </goal>
  <goal name="VC get_ket_sum.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC get_ket_sum.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_ket_def">
    <goal name="VC get_ket_sum.1.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H">
     <goal name="VC get_ket_sum.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="3.40"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ket_scalar_zero" expl="VC for get_ket_scalar_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_ket_scalar_zero.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="163"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ket_sum_sum_complex" expl="VC for ket_sum_sum_complex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ket_sum_sum_complex.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.45" steps="169"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.88"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="171"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="176"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.48" steps="176"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="173"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="173"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.17"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="175"/></proof>
  </goal>
  <goal name="VC ket_sum_sum_complex.9" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ket_sum_sum_complex.9.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ket_sum_sum_complex.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_def2">
     <goal name="VC ket_sum_sum_complex.9.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_ket_l">
      <goal name="VC ket_sum_sum_complex.9.0.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="l">
       <goal name="VC ket_sum_sum_complex.9.0.0.0.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.45" steps="166"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ket_sum_sum_complex.9.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
        <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="sum_null_">
         <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
          <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.47" steps="171"/></proof>
          </goal>
          <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="169"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_ket_value">
            <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.1.0.0.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="zero_mult_t">
             <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.27" steps="171"/></proof>
             </goal>
             <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.47" steps="173"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="169"/></proof>
        </goal>
        <goal name="VC ket_sum_sum_complex.9.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.82"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_sum_complex.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
     </goal>
     <goal name="VC ket_sum_sum_complex.9.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="165"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ket_sum_sum_complex.9.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC ket_sum_sum_complex.9.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC ket_sum_sum_complex.9.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ket_sum_sum_complex.9.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_ket_l">
       <goal name="VC ket_sum_sum_complex.9.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="l">
        <goal name="VC ket_sum_sum_complex.9.1.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ket_sum_sum_complex.9.1.0.0.0.0.0.0" proved="true">
         <proof prover="6"><result status="valid" time="0.54" steps="167"/></proof>
         </goal>
         <goal name="VC ket_sum_sum_complex.9.1.0.0.0.0.0.1" proved="true">
         <proof prover="6"><result status="valid" time="0.68" steps="167"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
         <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
          <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="sum_eq">
            <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="6.70"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="169"/></proof>
          </goal>
          <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.70"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
         </goal>
         <goal name="VC ket_sum_sum_complex.9.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.67"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ket_sum_sum_complex.9.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.29" steps="165"/></proof>
     </goal>
     <goal name="VC ket_sum_sum_complex.9.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.38" steps="165"/></proof>
     </goal>
     <goal name="VC ket_sum_sum_complex.9.1.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ket_sum_sum_complex.9.1.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.46" steps="167"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ket_sum_sum_complex.9.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ket_sum_sum_complex.9.1.1.0" expl="postcondition" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC ket_sum_sum_complex.9.1.1.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(add (choose sx) (remove (choose sx) sx))" arg2="sx" arg3="in" arg4="H">
       <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H4">
         <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="ket_sum_comp_l_rev">
           <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
            <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.30" steps="171"/></proof>
            </goal>
            <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.31" steps="171"/></proof>
            </goal>
            <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.28" steps="171"/></proof>
            </goal>
            <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_ket_l">
               <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <transf name="exists" proved="true" arg1="l">
                <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.0.0" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.0.0.0" proved="true">
                 <proof prover="6"><result status="valid" time="0.59" steps="176"/></proof>
                 </goal>
                 <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.0.0.1" proved="true">
                 <proof prover="4"><result status="valid" time="0.86"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="add_ket_l_value">
                 <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                  <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                   <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                    <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="assert" proved="true" arg1="(forall a b c. a*.c+.b*.c = (a+.b)*.c)">
                     <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                     <proof prover="6"><result status="valid" time="1.58" steps="180"/></proof>
                     </goal>
                     <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="h">
                      <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="mult_eq_t">
                       <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="goal_comm">
                        <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="sum_plus_one">
                         <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="assert" proved="true" arg1="(forall a b. a+.b = b+.a)">
                           <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                           <proof prover="6"><result status="valid" time="0.43" steps="177"/></proof>
                           </goal>
                           <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                           <transf name="apply" proved="true" arg1="h">
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="6"><result status="valid" time="0.25" steps="177"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                       <proof prover="6"><result status="valid" time="0.48" steps="177"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.77"/></proof>
                 </goal>
                 <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.0.3.0.0.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.24" steps="177"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ket_sum_sum_complex.9.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.25" steps="171"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ket_sum_sum_complex.9.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="0.90"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_basis_bv_value" expl="VC for mat_mult_ket_basis_bv_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_basis_bv_value.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="183"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_basis_bv_value.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.50" steps="185"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_basis_bv_value.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC mat_mult_ket_basis_bv_value.2.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC mat_mult_ket_basis_bv_value.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
     <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e:bitvec) -&gt;
    get_ket
    (get m (bv_to_int e) (ket_to_int (bv_to_ket x))
     *.. ket (ket_length (bv_to_ket x)) (bv_to_int e))i),(n_bvs (ket_length (bv_to_ket x))),(int_to_bv i (length x))">
       <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_ket_value">
          <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="mult_one_t">
           <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="0"><result status="valid" time="1.04"/></proof>
           </goal>
           <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.96"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.10"/></proof>
        </goal>
        <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_ket_value">
           <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="mult_zero_t">
            <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="3.90"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.55" steps="196"/></proof>
     </goal>
     <goal name="VC mat_mult_ket_basis_bv_value.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="4.25"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_basis_bv_value_gen" expl="VC for mat_mult_ket_basis_bv_value_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_basis_bv_value_gen.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="mat_mult_ket_basis_bv_value" arg2="m,x,i,l">
   <goal name="VC mat_mult_ket_basis_bv_value_gen.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC mat_mult_ket_basis_bv_value_gen.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="173"/></proof>
    </goal>
    <goal name="VC mat_mult_ket_basis_bv_value_gen.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.41" steps="173"/></proof>
    </goal>
    <goal name="VC mat_mult_ket_basis_bv_value_gen.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="173"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_ket_injec_eq_left" expl="VC for mat_mult_ket_injec_eq_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_ket_injec_eq_left.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="169"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_injec_eq_left.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="169"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_injec_eq_left.2" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(ket l i)" arg2="(bv_to_ket (int_to_bv i l))">
   <goal name="VC mat_mult_ket_injec_eq_left.2.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(get_ket (mat_mult m (bv_to_ket (int_to_bv i l))) j &lt;&gt; get_ket (mat_mult n (bv_to_ket (int_to_bv i l))) j)">
    <goal name="VC mat_mult_ket_injec_eq_left.2.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC mat_mult_ket_injec_eq_left.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC mat_mult_ket_injec_eq_left.2.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="4"><result status="valid" time="0.82"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_injec_eq_left.2.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.87"/></proof>
      </goal>
      <goal name="VC mat_mult_ket_injec_eq_left.2.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.67"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_ket_injec_eq_left.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.68"/></proof>
     </goal>
     <goal name="VC mat_mult_ket_injec_eq_left.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.66"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_ket_injec_eq_left.2.0.1" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="175"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_injec_eq_left.2.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="1.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_mult_ket_injec_eq_left.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="169"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_injec_eq_left.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="170"/></proof>
  </goal>
  <goal name="VC mat_mult_ket_injec_eq_left.5" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(get m i j &lt;&gt; get n i j)">
   <goal name="VC mat_mult_ket_injec_eq_left.5.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(get_ket (mat_mult m (bv_to_ket(int_to_bv j l))) i &lt;&gt; get_ket (mat_mult n (bv_to_ket (int_to_bv j l))) i)">
    <goal name="VC mat_mult_ket_injec_eq_left.5.0.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.71"/></proof>
    </goal>
    <goal name="VC mat_mult_ket_injec_eq_left.5.0.1" expl="true case (precondition)" proved="true">
    <proof prover="4"><result status="valid" time="0.89"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_ket_injec_eq_left.5.1" expl="false case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="175"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_mult_ket_injec_eq_left.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="171"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
