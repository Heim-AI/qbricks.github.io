(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
type t

logic tone : t

logic power : int, int -> int

axiom power_def :
  (forall e:int. forall i:int. ((0 <= i) -> ((i = 0) -> (power(e, i) = 1))))

axiom power_def1 :
  (forall e:int. forall i:int. ((0 <= i) -> ((not (i = 0)) -> (power(e,
  i) = (e * power(e, (i - 1)))))))

type d_frac

logic value : d_frac -> t

logic dyadic : int, int -> d_frac

logic ac add : d_frac, d_frac -> d_frac

logic div_two : d_frac -> d_frac

axiom div_two_den :
  (forall k:int. forall n:int. ((0 <= n) -> (div_two(dyadic(k,
  n)) = dyadic(k, (n + 1)))))

axiom value_zero : (value(dyadic(0, 0)) = tone)

axiom Dyadic_inv :
  (forall k:int. forall n:int. ((0 <= n) -> (add(dyadic(k, n), dyadic((-k),
  n)) = dyadic(0, 0))))

axiom Dyadic_add :
  (forall k:int. forall kqt:int. forall n:int. ((0 <= n) -> (add(dyadic(k,
  n), dyadic(kqt, n)) = dyadic((k + kqt), n))))

axiom Dyadic_cyclic :
  (forall k:int. forall n:int. ((0 <= n) -> (dyadic(k,
  n) = dyadic((k + power(2, n)), n))))

goal h : (dyadic(1, 1) = dyadic(1, 2))
