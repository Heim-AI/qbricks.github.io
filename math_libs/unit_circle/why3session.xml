<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.4.1" alternative="noBV" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="unit_circle.mlw"/>
<theory name="Angle">
 <goal name="VC real_ang_meas" expl="VC for real_ang_meas">
 <transf name="split_vc" >
  <goal name="VC real_ang_meas.0" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="3.68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_angle_meas" expl="VC for set_equal_angle_meas">
 <transf name="split_vc" >
  <goal name="VC set_equal_angle_meas.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_equal_angle_meas" expl="VC for get_equal_angle_meas">
 <transf name="split_vc" >
  <goal name="VC get_equal_angle_meas.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meas_real_to_ang" expl="VC for meas_real_to_ang">
 <transf name="split_vc" >
  <goal name="VC meas_real_to_ang.0" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="4.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meas_real_to_ang_rev" expl="VC for meas_real_to_ang_rev">
 <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="139"/></proof>
 </goal>
 <goal name="VC ang_add_rev" expl="VC for ang_add_rev">
 <transf name="split_vc" >
  <goal name="VC ang_add_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_zero" expl="VC for real_to_ang_zero">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_zero.0" expl="assertion">
  <transf name="replace" arg1="o" arg2="(real_to_ang (ang_meas o))">
   <goal name="VC real_to_ang_zero.0.0" expl="assertion">
   <transf name="rewrite" arg1="Real_To_Ang_add">
    <goal name="VC real_to_ang_zero.0.0.0" expl="assertion">
    <proof prover="0" obsolete="true"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="VC real_to_ang_zero.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.48" steps="139"/></proof>
    </goal>
    <goal name="VC real_to_ang_zero.0.0.2" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.48" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_to_ang_zero.0.1" expl="equality hypothesis">
   <transf name="apply" arg1="get_equal_angle_meas">
    <goal name="VC real_to_ang_zero.0.1.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.51" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_to_ang_zero.1" expl="assertion">
  <proof prover="6" obsolete="true"><result status="valid" time="0.51" steps="139"/></proof>
  </goal>
  <goal name="VC real_to_ang_zero.2" expl="assertion">
  <transf name="split_vc" >
   <goal name="VC real_to_ang_zero.2.0" expl="assertion">
   <proof prover="6" obsolete="true"><result status="valid" time="0.51" steps="139"/></proof>
   </goal>
   <goal name="VC real_to_ang_zero.2.1" expl="assertion">
   <transf name="replace" arg1="ang_zero" arg2="(ang_add ang_zero (real_to_ang c_zero))">
    <goal name="VC real_to_ang_zero.2.1.0" expl="assertion">
    <proof prover="6" obsolete="true"><result status="valid" time="0.53" steps="139"/></proof>
    </goal>
    <goal name="VC real_to_ang_zero.2.1.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.64" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_to_ang_zero.3" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp" expl="VC for ang_exp">
 <transf name="split_vc" >
  <goal name="VC ang_exp.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.63" steps="145"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_angle_exp" expl="VC for set_equal_angle_exp">
 <transf name="split_vc" >
  <goal name="VC set_equal_angle_exp.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC set_equal_angle_exp.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_exp_def">
    <goal name="VC set_equal_angle_exp.0.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="1.36" steps="153"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_equal_angle_exp" expl="VC for get_equal_angle_exp">
 <transf name="split_vc" >
  <goal name="VC get_equal_angle_exp.0" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="3.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC meas_value_plus_one" expl="VC for meas_value_plus_one">
 <transf name="split_vc" >
  <goal name="VC meas_value_plus_one.0" expl="postcondition">
  <transf name="replace" arg1="(two_pi_i *. (ang_meas (real_to_ang phi) +. c_one))" arg2="((two_pi_i *. (ang_meas (real_to_ang phi))) +.  (two_pi_i *. c_one))">
   <goal name="VC meas_value_plus_one.0.0" expl="postcondition">
   <transf name="rewrite" arg1="exp_sum">
    <goal name="VC meas_value_plus_one.0.0.0" expl="postcondition">
    <transf name="apply" arg1="goal_comm">
     <goal name="VC meas_value_plus_one.0.0.0.0" expl="apply premises">
     <transf name="rewrite" arg1="mult_one_t">
      <goal name="VC meas_value_plus_one.0.0.0.0.0" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="141"/></proof>
      </goal>
      <goal name="VC meas_value_plus_one.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="143"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC meas_value_plus_one.0.1" expl="equality hypothesis">
   <proof prover="0" obsolete="true"><result status="valid" time="0.26"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_pi_over_four" expl="VC for ang_exp_pi_over_four">
 <transf name="split_vc" >
  <goal name="VC ang_exp_pi_over_four.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_exp_pi_over_four.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_exp_def">
    <goal name="VC ang_exp_pi_over_four.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(two_pi_i *. ang_meas (real_to_ang (c_one /.(i_to_c 8))))" arg2="(im*.pi/.(i_to_c 4))">
     <goal name="VC ang_exp_pi_over_four.0.0.0.0" expl="postcondition">
     <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="149"/></proof>
     </goal>
     <goal name="VC ang_exp_pi_over_four.0.0.0.1" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="3.59"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_pi_over_two" expl="VC for ang_exp_pi_over_two">
 <transf name="split_vc" >
  <goal name="VC ang_exp_pi_over_two.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_exp_pi_over_two.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_exp_def">
    <goal name="VC ang_exp_pi_over_two.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(two_pi_i *. ang_meas (real_to_ang (c_one /.(i_to_c 4))))" arg2="(im*.pi/.(i_to_c 2))">
     <goal name="VC ang_exp_pi_over_two.0.0.0.0" expl="postcondition">
     <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="151"/></proof>
     </goal>
     <goal name="VC ang_exp_pi_over_two.0.0.0.1" expl="equality hypothesis">
     <transf name="rewrite" arg1="two_pi_i_def">
      <goal name="VC ang_exp_pi_over_two.0.0.0.1.0" expl="equality hypothesis">
      <transf name="replace" arg1="(ang_meas (real_to_ang (c_one /. i_to_c 4)))" arg2="(c_one /. i_to_c 4)">
       <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.0" expl="equality hypothesis">
       <transf name="replace" arg1="(i_to_c 4)" arg2="(ttwo *. i_to_c 2)">
        <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.0.0" expl="equality hypothesis">
        <proof prover="1" obsolete="true"><result status="valid" time="0.32"/></proof>
        </goal>
        <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.0.1" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="1.41" steps="153"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="meas_value">
        <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.0" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="1.17" steps="153"/></proof>
        </goal>
        <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1" expl="apply premises">
        <transf name="split_vc" >
         <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.0">
         <proof prover="6" obsolete="true"><result status="valid" time="1.20" steps="153"/></proof>
         </goal>
         <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1">
         <transf name="assert" arg1="(c_one &lt;. i_to_c 4)">
          <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1.0" expl="asserted formula">
          <proof prover="6" obsolete="true"><result status="valid" time="1.13" steps="153"/></proof>
          </goal>
          <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1.1">
          <transf name="assert" arg1="((c_one /. i_to_c 4) &lt;. c_one /. c_one)">
           <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1.1.0" expl="asserted formula">
           <transf name="apply" arg1="inv_inf">
            <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1.1.0.0" expl="apply premises">
            <proof prover="6" obsolete="true"><result status="valid" time="1.14" steps="155"/></proof>
            </goal>
            <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1.1.0.1" expl="apply premises">
            <proof prover="6" obsolete="true"><result status="valid" time="1.12" steps="155"/></proof>
            </goal>
            <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1.1.0.2" expl="apply premises">
            <proof prover="6" obsolete="true"><result status="valid" time="1.15" steps="154"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ang_exp_pi_over_two.0.0.0.1.0.1.1.1.1.1">
           <proof prover="0" obsolete="true"><result status="valid" time="2.49"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_pi" expl="VC for ang_exp_pi">
 <transf name="eliminate_definition" >
  <goal name="VC ang_exp_pi.0" expl="VC for ang_exp_pi">
  <transf name="rewrite" arg1="ang_exp_def">
   <goal name="VC ang_exp_pi.0.0" expl="VC for ang_exp_pi">
   <transf name="replace" arg1="(two_pi_i *. ang_meas (real_to_ang (c_one /. i_to_c 2)))" arg2="(im *. pi)">
    <goal name="VC ang_exp_pi.0.0.0" expl="VC for ang_exp_pi">
    <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="153"/></proof>
    </goal>
    <goal name="VC ang_exp_pi.0.0.1" expl="equality hypothesis">
    <transf name="replace" arg1="(ang_meas (real_to_ang (c_one /. i_to_c 2)))" arg2="(c_one /. ttwo)">
     <goal name="VC ang_exp_pi.0.0.1.0" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="4.48"/></proof>
     </goal>
     <goal name="VC ang_exp_pi.0.0.1.1" expl="equality hypothesis">
     <transf name="replace" arg1="ttwo" arg2="(i_to_c 2)">
      <goal name="VC ang_exp_pi.0.0.1.1.0" expl="equality hypothesis">
      <transf name="apply" arg1="meas_value">
       <goal name="VC ang_exp_pi.0.0.1.1.0.0" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="1.20" steps="155"/></proof>
       </goal>
       <goal name="VC ang_exp_pi.0.0.1.1.0.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC ang_exp_pi.0.0.1.1.0.1.0">
        <proof prover="6" obsolete="true"><result status="valid" time="1.21" steps="155"/></proof>
        </goal>
        <goal name="VC ang_exp_pi.0.0.1.1.0.1.1">
        <transf name="assert" arg1="((c_one /. i_to_c 2) &lt;. c_one /. c_one)">
         <goal name="VC ang_exp_pi.0.0.1.1.0.1.1.0" expl="asserted formula">
         <transf name="apply" arg1="inv_inf">
          <goal name="VC ang_exp_pi.0.0.1.1.0.1.1.0.0" expl="apply premises">
          <proof prover="6" obsolete="true"><result status="valid" time="1.17" steps="155"/></proof>
          </goal>
          <goal name="VC ang_exp_pi.0.0.1.1.0.1.1.0.1" expl="apply premises">
          <proof prover="6" obsolete="true"><result status="valid" time="1.16" steps="155"/></proof>
          </goal>
          <goal name="VC ang_exp_pi.0.0.1.1.0.1.1.0.2" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.34"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ang_exp_pi.0.0.1.1.0.1.1.1">
         <proof prover="0" obsolete="true"><result status="valid" time="3.11"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_exp_pi.0.0.1.1.1" expl="equality hypothesis">
      <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="153"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_c_one" expl="VC for real_to_ang_c_one">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_c_one.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.55" steps="147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ang_meas_eq" expl="VC for set_ang_meas_eq">
 <transf name="split_vc" >
  <goal name="VC set_ang_meas_eq.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="149"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ang_meas_eq" expl="VC for get_ang_meas_eq">
 <transf name="split_vc" >
  <goal name="VC get_ang_meas_eq.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.56" steps="151"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_zero" expl="VC for ang_exp_zero">
 <transf name="split_vc" >
  <goal name="VC ang_exp_zero.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_exp_zero.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_exp_def">
    <goal name="VC ang_exp_zero.0.0.0" expl="postcondition">
    <proof prover="1" obsolete="true"><result status="valid" time="0.34"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_two_pi" expl="VC for ang_exp_two_pi">
 <transf name="split_vc" >
  <goal name="VC ang_exp_two_pi.0" expl="postcondition">
  <transf name="replace" arg1="(i_to_c 1)" arg2="c_one">
   <goal name="VC ang_exp_two_pi.0.0" expl="postcondition">
   <transf name="rewrite" arg1="real_to_ang_c_one">
    <goal name="VC ang_exp_two_pi.0.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_exp_two_pi.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_c_one" expl="VC for ang_exp_c_one">
 <transf name="split_vc" >
  <goal name="VC ang_exp_c_one.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="150"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_meas_add_inf_c_one" expl="VC for ang_meas_add_inf_c_one">
 <transf name="split_vc" >
  <goal name="VC ang_meas_add_inf_c_one.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ang_exp_eq" expl="VC for set_ang_exp_eq">
 <transf name="split_vc" >
  <goal name="VC set_ang_exp_eq.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.11" steps="153"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ang_exp_meas_eq" expl="VC for get_ang_exp_meas_eq">
 <transf name="split_vc" >
  <goal name="VC get_ang_exp_meas_eq.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC get_ang_exp_meas_eq.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.57" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_ang_exp_eq" expl="VC for get_ang_exp_eq">
 <transf name="split_vc" >
  <goal name="VC get_ang_exp_eq.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.56" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_meas_zero" expl="VC for ang_meas_zero">
 <transf name="split_vc" >
  <goal name="VC ang_meas_zero.0" expl="postcondition">
  <transf name="replace" arg1="ang_zero" arg2="(real_to_ang c_zero)">
   <goal name="VC ang_meas_zero.0.0" expl="postcondition">
   <transf name="apply" arg1="meas_value">
    <goal name="VC ang_meas_zero.0.0.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.57" steps="153"/></proof>
    </goal>
    <goal name="VC ang_meas_zero.0.0.1" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC ang_meas_zero.0.0.1.0">
     <proof prover="6" obsolete="true"><result status="valid" time="0.57" steps="153"/></proof>
     </goal>
     <goal name="VC ang_meas_zero.0.0.1.1">
     <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="153"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_meas_zero.0.1" expl="equality hypothesis">
   <transf name="apply" arg1="get_ang_meas_eq">
    <goal name="VC ang_meas_zero.0.1.0" expl="apply premises">
    <transf name="assert" arg1="(real_to_ang c_zero = ang_zero)">
     <goal name="VC ang_meas_zero.0.1.0.0" expl="asserted formula">
     <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="151"/></proof>
     </goal>
     <goal name="VC ang_meas_zero.0.1.0.1" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="151"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_add_one" expl="VC for real_to_ang_add_one">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_add_one.0" expl="postcondition">
  <transf name="replace" arg1="( real_to_ang (x +. c_one))" arg2="(ang_add ( real_to_ang x) (real_to_ang c_one))">
   <goal name="VC real_to_ang_add_one.0.0" expl="postcondition">
   <transf name="replace" arg1="(real_to_ang c_one)" arg2="ang_zero">
    <goal name="VC real_to_ang_add_one.0.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="0.75" steps="157"/></proof>
    </goal>
    <goal name="VC real_to_ang_add_one.0.0.1" expl="equality hypothesis">
    <transf name="apply" arg1="get_ang_meas_eq">
     <goal name="VC real_to_ang_add_one.0.0.1.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="155"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_to_ang_add_one.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="0.58" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_add_b" expl="VC for ang_exp_add_b">
 <transf name="split_vc" >
  <goal name="VC ang_exp_add_b.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_exp_add_b.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_exp_def">
    <goal name="VC ang_exp_add_b.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ang_meas_add_inf_c_one">
     <goal name="VC ang_exp_add_b.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="mult_distr_add_r">
      <goal name="VC ang_exp_add_b.0.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="exp_sum">
       <goal name="VC ang_exp_add_b.0.0.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="mult_eq_t">
        <goal name="VC ang_exp_add_b.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="1.37" steps="167"/></proof>
        </goal>
        <goal name="VC ang_exp_add_b.0.0.0.0.0.0.1" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="1.36" steps="167"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_exp_add_b.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="165"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_add_b_rev" expl="VC for ang_exp_add_b_rev">
 <proof prover="6" obsolete="true"><result status="valid" time="0.64" steps="157"/></proof>
 </goal>
 <goal name="VC real_to_ang_add" expl="VC for real_to_ang_add">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_add.0" expl="postcondition">
  <transf name="rewrite" arg1="Real_To_Ang_add">
   <goal name="VC real_to_ang_add.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="157"/></proof>
   </goal>
   <goal name="VC real_to_ang_add.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="157"/></proof>
   </goal>
   <goal name="VC real_to_ang_add.0.2" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_add_rev" expl="VC for real_to_ang_add_rev">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_add_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="159"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_inv_add" expl="VC for ang_inv_add">
 <transf name="split_vc" >
  <goal name="VC ang_inv_add.0" expl="postcondition">
  <transf name="replace" arg1="(ang_add o o&#39;)" arg2="(ang_add (real_to_ang(ang_meas o)) (real_to_ang(ang_meas o&#39;)) )">
   <goal name="VC ang_inv_add.0.0" expl="postcondition">
   <transf name="rewrite" arg1="real_to_ang_add_rev">
    <goal name="VC ang_inv_add.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Real_To_Ang_inv">
     <goal name="VC ang_inv_add.0.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(ang_inv o)" arg2="(ang_inv (real_to_ang (ang_meas o)))">
      <goal name="VC ang_inv_add.0.0.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(ang_inv o&#39;)" arg2="(ang_inv (real_to_ang (ang_meas o&#39;)))">
       <goal name="VC ang_inv_add.0.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="Real_To_Ang_inv">
        <goal name="VC ang_inv_add.0.0.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="Real_To_Ang_inv">
         <goal name="VC ang_inv_add.0.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="real_to_ang_add_rev">
          <goal name="VC ang_inv_add.0.0.0.0.0.0.0.0.0" expl="postcondition">
          <proof prover="0" obsolete="true"><result status="valid" time="0.29"/></proof>
          </goal>
          <goal name="VC ang_inv_add.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.55" steps="155"/></proof>
          </goal>
          <goal name="VC ang_inv_add.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.54" steps="155"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ang_inv_add.0.0.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.56" steps="155"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_inv_add.0.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.56" steps="155"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_inv_add.0.0.0.0.0.1" expl="equality hypothesis">
       <proof prover="0" obsolete="true"><result status="valid" time="0.29"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_inv_add.0.0.0.0.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.29"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_inv_add.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.56" steps="155"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_inv_add.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.75" steps="155"/></proof>
    </goal>
    <goal name="VC ang_inv_add.0.0.2" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.92" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_inv_add.0.1" expl="equality hypothesis">
   <proof prover="0" obsolete="true"><result status="valid" time="0.48"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_inv_add_rev" expl="VC for ang_inv_add_rev">
 <transf name="split_vc" >
  <goal name="VC ang_inv_add_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.66" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_add_pre" expl="VC for ang_exp_add_pre">
 <transf name="split_vc" >
  <goal name="VC ang_exp_add_pre.0" expl="assertion">
  <transf name="rewrite" arg1="real_to_ang_add_rev">
   <goal name="VC ang_exp_add_pre.0.0" expl="assertion">
   <transf name="replace" arg1="(c_one +. ((ang_meas o +. ang_meas o&#39;) -. c_one))" arg2="( ((ang_meas o +. ang_meas o&#39;) ))">
    <goal name="VC ang_exp_add_pre.0.0.0" expl="assertion">
    <proof prover="0" obsolete="true"><result status="valid" time="0.40"/></proof>
    </goal>
    <goal name="VC ang_exp_add_pre.0.0.1" expl="equality hypothesis">
    <transf name="assert" arg1="(forall a b. a+.(b-.a) = b )">
     <goal name="VC ang_exp_add_pre.0.0.1.0" expl="asserted formula">
     <transf name="split_vc" >
      <goal name="VC ang_exp_add_pre.0.0.1.0.0" expl="asserted formula">
      <transf name="replace" arg1="(b-.a)" arg2="(b+. (-.a))">
       <goal name="VC ang_exp_add_pre.0.0.1.0.0.0" expl="asserted formula">
       <transf name="replace" arg1="(a +. (b +. (-. a)))" arg2="((b +. (-. a))+.a)">
        <goal name="VC ang_exp_add_pre.0.0.1.0.0.0.0" expl="asserted formula">
        <proof prover="4" obsolete="true"><result status="valid" time="0.92"/></proof>
        </goal>
        <goal name="VC ang_exp_add_pre.0.0.1.0.0.0.1" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="157"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_exp_add_pre.0.0.1.0.0.1" expl="equality hypothesis">
       <proof prover="6" obsolete="true"><result status="valid" time="0.77" steps="159"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_exp_add_pre.0.0.1.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.65" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_exp_add_pre.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.60" steps="159"/></proof>
   </goal>
   <goal name="VC ang_exp_add_pre.0.2" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="159"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_exp_add_pre.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.66" steps="169"/></proof>
  </goal>
  <goal name="VC ang_exp_add_pre.2" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="VC ang_exp_add_pre.3" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.47" steps="171"/></proof>
  </goal>
  <goal name="VC ang_exp_add_pre.4" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC ang_exp_add_pre.4.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="1.56" steps="173"/></proof>
   </goal>
   <goal name="VC ang_exp_add_pre.4.1" expl="postcondition">
   <transf name="assert" arg1="((ang_meas o&#39; +. ang_meas o) &lt;.ttwo)">
    <goal name="VC ang_exp_add_pre.4.1.0" expl="asserted formula">
    <proof prover="6" obsolete="true"><result status="valid" time="1.53" steps="173"/></proof>
    </goal>
    <goal name="VC ang_exp_add_pre.4.1.1" expl="postcondition">
    <transf name="replace" arg1="(ang_meas o&#39; +. ang_meas o)" arg2="(tt+. c_one )" arg3="in" arg4="h">
     <goal name="VC ang_exp_add_pre.4.1.1.0" expl="postcondition">
     <transf name="replace" arg1="c_one" arg2="(ttwo +. (-.c_one))">
      <goal name="VC ang_exp_add_pre.4.1.1.0.0" expl="postcondition">
      <transf name="replace" arg1="tt" arg2="(tt+.c_one +. (-.c_one))">
       <goal name="VC ang_exp_add_pre.4.1.1.0.0.0" expl="postcondition">
       <proof prover="1" obsolete="true"><result status="valid" time="0.34"/></proof>
       </goal>
       <goal name="VC ang_exp_add_pre.4.1.1.0.0.1" expl="equality hypothesis">
       <proof prover="6" obsolete="true"><result status="valid" time="1.73" steps="175"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_exp_add_pre.4.1.1.0.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="6.81"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_exp_add_pre.4.1.1.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="3.22" steps="175"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_exp_add_pre.5" expl="postcondition">
  <transf name="rewrite" arg1="H11">
   <goal name="VC ang_exp_add_pre.5.0" expl="postcondition">
   <transf name="replace" arg1="(real_to_ang c_one)" arg2="ang_zero">
    <goal name="VC ang_exp_add_pre.5.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H6">
     <goal name="VC ang_exp_add_pre.5.0.0.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="VC ang_exp_add_pre.5.0.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="0.11" steps="175"/></proof>
      </goal>
      <goal name="VC ang_exp_add_pre.5.0.0.0.1" expl="postcondition">
      <transf name="rewrite" arg1="ang_exp_add_b_rev">
       <goal name="VC ang_exp_add_pre.5.0.0.0.1.0" expl="postcondition">
       <transf name="eliminate_definition" >
        <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0" expl="postcondition">
        <transf name="replace" arg1="(ang_add (real_to_ang tt) ang_zero)" arg2="(real_to_ang tt)">
         <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="ang_exp_def">
          <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="meas_value">
           <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0" expl="postcondition">
           <transf name="replace" arg1="tt" arg2="(((ang_meas o&#39; +. ang_meas o) +.(-. c_one)))">
            <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0" expl="postcondition">
            <transf name="rewrite" arg1="mult_distr_add_r">
             <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0" expl="postcondition">
             <transf name="rewrite" arg1="mult_distr_add_r">
              <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0" expl="postcondition">
              <transf name="rewrite" arg1="exp_sum">
               <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
               <transf name="rewrite" arg1="mult_one_t">
                <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                <transf name="rewrite" arg1="exp_sum">
                 <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
                 <transf name="apply" arg1="mult_eq_t_rev">
                  <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
                  <proof prover="6" obsolete="true"><result status="valid" time="7.14" steps="189"/></proof>
                  </goal>
                  <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
                  <proof prover="6" obsolete="true"><result status="valid" time="5.68" steps="189"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                <transf name="replace" arg1="(two_pi_i *. (-. c_one))" arg2="(-. two_pi_i )">
                 <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
                 <transf name="rewrite" arg1="exp_inv">
                  <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises">
                  <proof prover="0" obsolete="true"><result status="valid" time="3.69"/></proof>
                  </goal>
                  <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises">
                  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="187"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis">
                 <proof prover="1" obsolete="true"><result status="valid" time="0.34"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis">
            <proof prover="6" obsolete="true"><result status="valid" time="5.54" steps="189"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
           <proof prover="6" obsolete="true"><result status="valid" time="5.32" steps="189"/></proof>
           </goal>
           <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
           <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="187"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ang_exp_add_pre.5.0.0.0.1.0.0.1" expl="equality hypothesis">
         <proof prover="6" obsolete="true"><result status="valid" time="5.05" steps="189"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_exp_add_pre.5.0.0.0.1.1" expl="rewrite premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.42"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_exp_add_pre.5.0.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.11" steps="175"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_exp_add_pre.6" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC ang_exp_add_pre.6.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="178"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_add" expl="VC for ang_exp_add">
 <transf name="split_vc" >
  <goal name="VC ang_exp_add.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="163"/></proof>
  </goal>
  <goal name="VC ang_exp_add.1" expl="precondition">
  <transf name="replace" arg1="(ang_meas o&#39; +. ang_meas o)" arg2="(ang_meas o +. ang_meas o&#39;)">
   <goal name="VC ang_exp_add.1.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="167"/></proof>
   </goal>
   <goal name="VC ang_exp_add.1.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_exp_add.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="167"/></proof>
  </goal>
  <goal name="VC ang_exp_add.3" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC ang_exp_add.4" expl="precondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC ang_exp_add.5" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="161"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_meas_add" expl="VC for ang_meas_add">
 <transf name="split_vc" >
  <goal name="VC ang_meas_add.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_meas_add.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="1.57" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_add_rev" expl="VC for ang_exp_add_rev">
 <transf name="split_vc" >
  <goal name="VC ang_exp_add_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_int_pre" expl="VC for real_to_ang_int_pre">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_int_pre.0" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="157"/></proof>
  </goal>
  <goal name="VC real_to_ang_int_pre.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="157"/></proof>
  </goal>
  <goal name="VC real_to_ang_int_pre.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="161"/></proof>
  </goal>
  <goal name="VC real_to_ang_int_pre.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="163"/></proof>
  </goal>
  <goal name="VC real_to_ang_int_pre.4" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC real_to_ang_int_pre.4.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.11" steps="157"/></proof>
   </goal>
   <goal name="VC real_to_ang_int_pre.4.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC real_to_ang_int_pre.4.1.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC real_to_ang_int_pre.4.1.0.0" expl="postcondition">
     <transf name="replace" arg1="(real_to_ang (i_to_c k))" arg2="(ang_add (real_to_ang c_one) (real_to_ang (i_to_c (k-1))))">
      <goal name="VC real_to_ang_int_pre.4.1.0.0.0" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="valid" time="0.97"/></proof>
      </goal>
      <goal name="VC real_to_ang_int_pre.4.1.0.0.1" expl="equality hypothesis">
      <transf name="rewrite" arg1="real_to_ang_add_rev">
       <goal name="VC real_to_ang_int_pre.4.1.0.0.1.0" expl="equality hypothesis">
       <transf name="replace" arg1="(i_to_c k)" arg2="( i_to_c 1 +. (i_to_c (k-1)) )">
        <goal name="VC real_to_ang_int_pre.4.1.0.0.1.0.0" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="161"/></proof>
        </goal>
        <goal name="VC real_to_ang_int_pre.4.1.0.0.1.0.1" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="1.20" steps="163"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC real_to_ang_int_pre.4.1.0.0.1.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="1.21" steps="163"/></proof>
       </goal>
       <goal name="VC real_to_ang_int_pre.4.1.0.0.1.2" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.84" steps="163"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_int" expl="VC for real_to_ang_int">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_int.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="155"/></proof>
  </goal>
  <goal name="VC real_to_ang_int.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.40" steps="155"/></proof>
  </goal>
  <goal name="VC real_to_ang_int.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.90"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_int_" expl="VC for real_to_ang_int_">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_int_.0" expl="postcondition">
  <transf name="apply" arg1="get_ang_exp_eq">
   <goal name="VC real_to_ang_int_.0.0" expl="apply premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.75" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_value_add" expl="VC for real_to_ang_value_add">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_value_add.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.43" steps="159"/></proof>
  </goal>
  <goal name="VC real_to_ang_value_add.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.72" steps="161"/></proof>
  </goal>
  <goal name="VC real_to_ang_value_add.2" expl="postcondition">
  <transf name="rewrite" arg1="real_to_ang_add">
   <goal name="VC real_to_ang_value_add.2.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC real_to_ang_value_add.2.0.0" expl="postcondition">
    <transf name="rewrite" arg1="mult_one_t">
     <goal name="VC real_to_ang_value_add.2.0.0.0" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="1.30"/></proof>
     </goal>
     <goal name="VC real_to_ang_value_add.2.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="real_to_ang_int">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_to_ang_value_add.2.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.92" steps="163"/></proof>
   </goal>
   <goal name="VC real_to_ang_value_add.2.2" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_value" expl="VC for real_to_ang_value">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_value.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.20" steps="155"/></proof>
  </goal>
  <goal name="VC real_to_ang_value.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="161"/></proof>
  </goal>
  <goal name="VC real_to_ang_value.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="171"/></proof>
  </goal>
  <goal name="VC real_to_ang_value.3" expl="postcondition">
  <transf name="replace" arg1="phi" arg2="(dec_part phi +. i_to_c (int_part_int phi))">
   <goal name="VC real_to_ang_value.3.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC real_to_ang_value.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="mult_distr_add_r">
     <goal name="VC real_to_ang_value.3.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="exp_sum">
      <goal name="VC real_to_ang_value.3.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="goal_comm">
       <goal name="VC real_to_ang_value.3.0.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="mult_one_t">
        <goal name="VC real_to_ang_value.3.0.0.0.0.0.0" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="173"/></proof>
        </goal>
        <goal name="VC real_to_ang_value.3.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="4" obsolete="true"><result status="valid" time="2.57"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_to_ang_value.3.1" expl="equality hypothesis">
   <transf name="rewrite" arg1="dec_part_def">
    <goal name="VC real_to_ang_value.3.1.0" expl="equality hypothesis">
    <transf name="rewrite" arg1="int_part_int_def">
     <goal name="VC real_to_ang_value.3.1.0.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="int_part_def">
      <goal name="VC real_to_ang_value.3.1.0.0.0" expl="equality hypothesis">
      <proof prover="6" obsolete="true"><result status="valid" time="1.22" steps="175"/></proof>
      </goal>
      <goal name="VC real_to_ang_value.3.1.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="173"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC real_to_ang_value.3.1.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="173"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_value.3.1.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="173"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="ang_exp_zero_">
 <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="153"/></proof>
 </goal>
 <goal name="VC ang_mult_int_" expl="VC for ang_mult_int_">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_.0" expl="variant decrease">
  <transf name="split_vc" >
   <goal name="VC ang_mult_int_.0.0" expl="variant decrease">
   <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="157"/></proof>
   </goal>
   <goal name="VC ang_mult_int_.0.1" expl="variant decrease">
   <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_mult_int_.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="157"/></proof>
  </goal>
  <goal name="VC ang_mult_int_.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC ang_mult_int_.2.0" expl="postcondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.35"/></proof>
   </goal>
   <goal name="VC ang_mult_int_.2.1" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC ang_mult_int_.2.1.0" expl="postcondition">
    <transf name="replace" arg1="( ang_add (real_to_ang (ang_meas theta *. i_to_c (i - 1))) theta)" arg2="( ang_add (real_to_ang (ang_meas theta *. i_to_c (i - 1))) (real_to_ang (ang_meas theta)))">
     <goal name="VC ang_mult_int_.2.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="real_to_ang_add_rev">
      <goal name="VC ang_mult_int_.2.1.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(i_to_c i)" arg2="(i_to_c (i-1) +. c_one )">
       <goal name="VC ang_mult_int_.2.1.0.0.0.0" expl="postcondition">
       <proof prover="4" obsolete="true"><result status="valid" time="3.16"/></proof>
       </goal>
       <goal name="VC ang_mult_int_.2.1.0.0.0.1" expl="equality hypothesis">
       <proof prover="6" obsolete="true"><result status="valid" time="0.82" steps="161"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_mult_int_.2.1.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.81" steps="161"/></proof>
      </goal>
      <goal name="VC ang_mult_int_.2.1.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.62" steps="161"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_mult_int_.2.1.0.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.66" steps="161"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int" expl="VC for ang_mult_int">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC ang_mult_int.0.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_mult_int.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC ang_mult_int.1.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_to_real_to_ang" expl="VC for ang_mult_int_to_real_to_ang">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_to_real_to_ang.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_mult_int_to_real_to_ang.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC ang_mult_int_to_real_to_ang.0.0.0" expl="postcondition">
    <transf name="case" arg1="(0&lt;=i)">
     <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.0" expl="true case (postcondition)">
     <proof prover="0" obsolete="true"><result status="valid" time="3.66"/></proof>
     </goal>
     <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.1" expl="false case (postcondition)">
     <transf name="rewrite" arg1="ang_mult_int_def">
      <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.1.0" expl="false case (postcondition)">
      <transf name="rewrite" arg1="ang_mult_int__spec">
       <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.1.0.0" expl="false case (postcondition)">
       <transf name="rewrite" arg1="Real_To_Ang_inv">
        <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.1.0.0.0" expl="false case (postcondition)">
        <proof prover="0" obsolete="true"><result status="valid" time="3.28"/></proof>
        </goal>
        <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.1.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="1.35" steps="167"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.1.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="165"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_mult_int_to_real_to_ang.0.0.0.1.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="165"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_plus_one_pos" expl="VC for ang_mult_int_plus_one_pos">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_plus_one_pos.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_mult_int_plus_one_pos.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC ang_mult_int_plus_one_pos.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ang_mult_int_def1">
     <goal name="VC ang_mult_int_plus_one_pos.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="ang_mult_int__def">
      <goal name="VC ang_mult_int_plus_one_pos.0.0.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="1.51" steps="167"/></proof>
      </goal>
      <goal name="VC ang_mult_int_plus_one_pos.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="165"/></proof>
      </goal>
      <goal name="VC ang_mult_int_plus_one_pos.0.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="165"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_mult_int_plus_one_pos.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.28" steps="165"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_inv" expl="VC for ang_mult_int_inv">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_inv.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_mult_int_inv.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC ang_mult_int_inv.0.0.0" expl="postcondition">
    <transf name="apply" arg1="goal_comm">
     <goal name="VC ang_mult_int_inv.0.0.0.0" expl="apply premises">
     <transf name="rewrite" arg1="ang_mult_int_def1">
      <goal name="VC ang_mult_int_inv.0.0.0.0.0" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.72" steps="167"/></proof>
      </goal>
      <goal name="VC ang_mult_int_inv.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="165"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_eq" expl="VC for real_to_ang_eq">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_eq.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC real_to_ang_eq.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_angle_by_exp" expl="VC for set_equal_angle_by_exp">
 <transf name="split_vc" >
  <goal name="VC set_equal_angle_by_exp.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.57" steps="157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_int_dec_part" expl="VC for real_to_ang_int_dec_part">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_int_dec_part.0" expl="postcondition">
  <transf name="replace" arg1="(real_to_ang x)" arg2="(real_to_ang (dec_part x +. i_to_c (int_part_int x)))">
   <goal name="VC real_to_ang_int_dec_part.0.0" expl="postcondition">
   <transf name="rewrite" arg1="real_to_ang_add">
    <goal name="VC real_to_ang_int_dec_part.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(real_to_ang (i_to_c (int_part_int x)))" arg2="ang_zero">
     <goal name="VC real_to_ang_int_dec_part.0.0.0.0" expl="postcondition">
     <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="157"/></proof>
     </goal>
     <goal name="VC real_to_ang_int_dec_part.0.0.0.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="157"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_int_dec_part.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.60" steps="157"/></proof>
    </goal>
    <goal name="VC real_to_ang_int_dec_part.0.0.2" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.63" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_to_ang_int_dec_part.0.1" expl="equality hypothesis">
   <transf name="replace" arg1="(dec_part x +. i_to_c (int_part_int x))" arg2="x">
    <goal name="VC real_to_ang_int_dec_part.0.1.0" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.10" steps="155"/></proof>
    </goal>
    <goal name="VC real_to_ang_int_dec_part.0.1.1" expl="equality hypothesis">
    <transf name="split_all_full" >
     <goal name="VC real_to_ang_int_dec_part.0.1.1.0" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="157"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_exp_by_ang" expl="VC for set_equal_exp_by_ang">
 <transf name="split_vc" >
  <goal name="VC set_equal_exp_by_ang.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="155"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang" expl="VC for int_to_ang">
 <transf name="split_vc" >
  <goal name="VC int_to_ang.0" expl="assertion">
  <transf name="instantiate" arg1="decomp" arg2="k,(power_ 2 n)">
   <goal name="VC int_to_ang.0.0" expl="assertion">
   <transf name="replace" arg1="(i_to_c k /. i_to_c (power_ 2 n))" arg2="(i_to_c (mod k (power_ 2 n)) /. i_to_c (power_ 2 n)+. (i_to_c (power_ 2 n * div k (power_ 2 n))/. i_to_c (power_ 2 n)))">
    <goal name="VC int_to_ang.0.0.0" expl="assertion">
    <transf name="apply" arg1="add_eq_t">
     <goal name="VC int_to_ang.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC int_to_ang.0.0.0.1" expl="apply premises">
     <transf name="rewrite" arg1="i_to_c_mult_rev">
      <goal name="VC int_to_ang.0.0.0.1.0" expl="apply premises">
      <transf name="replace" arg1="((i_to_c (power_ 2 n) *. i_to_c (div k (power_ 2 n))) /. i_to_c (power_ 2 n))" arg2="((i_to_c (power_ 2 n) *. i_to_c (div k (power_ 2 n))) /. (i_to_c (power_ 2 n) *. c_one))
">
       <goal name="VC int_to_ang.0.0.0.1.0.0" expl="apply premises">
       <transf name="rewrite" arg1="mult_div_comm">
        <goal name="VC int_to_ang.0.0.0.1.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="one_mult_t">
         <goal name="VC int_to_ang.0.0.0.1.0.0.0.0" expl="apply premises">
         <proof prover="1" obsolete="true"><result status="valid" time="0.40"/></proof>
         </goal>
         <goal name="VC int_to_ang.0.0.0.1.0.0.0.1" expl="rewrite premises">
         <transf name="assert" arg1="(forall a. a&lt;&gt; c_zero -&gt; a/.a = c_one)">
          <goal name="VC int_to_ang.0.0.0.1.0.0.0.1.0" expl="asserted formula">
          <transf name="split_vc" >
           <goal name="VC int_to_ang.0.0.0.1.0.0.0.1.0.0" expl="asserted formula">
           <transf name="replace" arg1="(a/.a)" arg2="(a*. (c_one/.a))">
            <goal name="VC int_to_ang.0.0.0.1.0.0.0.1.0.0.0" expl="asserted formula">
            <proof prover="6" obsolete="true"><result status="valid" time="0.65" steps="160"/></proof>
            </goal>
            <goal name="VC int_to_ang.0.0.0.1.0.0.0.1.0.0.1" expl="equality hypothesis">
            <proof prover="6" obsolete="true"><result status="valid" time="0.63" steps="160"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_ang.0.0.0.1.0.0.0.1.1" expl="rewrite premises">
          <transf name="apply" arg1="h">
           <goal name="VC int_to_ang.0.0.0.1.0.0.0.1.1.0" expl="apply premises">
           <proof prover="1" obsolete="true"><result status="valid" time="5.27"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_ang.0.0.0.1.0.0.1" expl="rewrite premises">
        <proof prover="1" obsolete="true"><result status="valid" time="5.63"/></proof>
        </goal>
        <goal name="VC int_to_ang.0.0.0.1.0.0.2" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="155"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_ang.0.0.0.1.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="div_eq">
        <goal name="VC int_to_ang.0.0.0.1.0.1.0" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="155"/></proof>
        </goal>
        <goal name="VC int_to_ang.0.0.0.1.0.1.1" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.70" steps="158"/></proof>
        </goal>
        <goal name="VC int_to_ang.0.0.0.1.0.1.2" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="4.58"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_ang.0.0.1" expl="equality hypothesis">
    <transf name="replace" arg1="(i_to_c k /. i_to_c (power_ 2 n))" arg2="(i_to_c ((power_ 2 n * div k (power_ 2 n)) + mod k (power_ 2 n)) /. i_to_c (power_ 2 n))
">
     <goal name="VC int_to_ang.0.0.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_add_rev">
      <goal name="VC int_to_ang.0.0.1.0.0" expl="equality hypothesis">
      <transf name="assert" arg1="(forall a b c. c &lt;&gt; c_zero -&gt; (a+.b)/.c= (b/.c)+.(a/.c))">
       <goal name="VC int_to_ang.0.0.1.0.0.0" expl="asserted formula">
       <transf name="split_vc" >
        <goal name="VC int_to_ang.0.0.1.0.0.0.0" expl="asserted formula">
        <proof prover="6" obsolete="true"><result status="valid" time="0.64" steps="160"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_ang.0.0.1.0.0.1" expl="equality hypothesis">
       <transf name="apply" arg1="h">
        <goal name="VC int_to_ang.0.0.1.0.0.1.0" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="5.51"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_ang.0.0.1.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="159"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_ang.1" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC int_to_ang.2" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="VC int_to_ang.3" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC int_to_ang.3.0" expl="postcondition">
   <transf name="rewrite" arg1="H3" arg2="in" arg3="result_def">
    <goal name="VC int_to_ang.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="result_def">
     <goal name="VC int_to_ang.3.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="real_to_ang_add">
      <goal name="VC int_to_ang.3.0.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(real_to_ang (i_to_c (div k (power_ 2 n))))" arg2="ang_zero">
       <goal name="VC int_to_ang.3.0.0.0.0.0" expl="postcondition">
       <proof prover="6" obsolete="true"><result status="valid" time="1.99" steps="177"/></proof>
       </goal>
       <goal name="VC int_to_ang.3.0.0.0.0.1" expl="equality hypothesis">
       <proof prover="6" obsolete="true"><result status="valid" time="2.03" steps="177"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_ang.3.0.0.0.1" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="4.21"/></proof>
      </goal>
      <goal name="VC int_to_ang.3.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="2.18" steps="177"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_ang.4" expl="postcondition">
  <transf name="rewrite" arg1="H2">
   <goal name="VC int_to_ang.4.0" expl="postcondition">
   <transf name="rewrite" arg1="meas_value">
    <goal name="VC int_to_ang.4.0.0" expl="postcondition">
    <transf name="rewrite" arg1="bound_eq_rev">
     <goal name="VC int_to_ang.4.0.0.0" expl="postcondition">
     <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="169"/></proof>
     </goal>
     <goal name="VC int_to_ang.4.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="169"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_ang.4.0.1" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.36"/></proof>
    </goal>
    <goal name="VC int_to_ang.4.0.2" expl="rewrite premises">
    <transf name="split_vc" >
     <goal name="VC int_to_ang.4.0.2.0" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.76" steps="171"/></proof>
     </goal>
     <goal name="VC int_to_ang.4.0.2.1" expl="rewrite premises">
     <transf name="replace" arg1="c_one" arg2="(i_to_c (power_ 2 n) /.i_to_c (power_ 2 n))">
      <goal name="VC int_to_ang.4.0.2.1.0" expl="rewrite premises">
      <transf name="rewrite" arg1="(/.)_def">
       <goal name="VC int_to_ang.4.0.2.1.0.0" expl="rewrite premises">
       <transf name="rewrite" arg1="(/.)_def">
        <goal name="VC int_to_ang.4.0.2.1.0.0.0" expl="rewrite premises">
        <transf name="assert" arg1="(forall a b c. c_zero &lt;. c -&gt; a&lt;. b -&gt; a*.c &lt;. b*.c)">
         <goal name="VC int_to_ang.4.0.2.1.0.0.0.0" expl="asserted formula">
         <transf name="split_vc" >
          <goal name="VC int_to_ang.4.0.2.1.0.0.0.0.0" expl="asserted formula">
          <proof prover="6" obsolete="true"><result status="valid" time="0.85" steps="175"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_ang.4.0.2.1.0.0.0.1" expl="rewrite premises">
         <transf name="apply" arg1="h">
          <goal name="VC int_to_ang.4.0.2.1.0.0.0.1.0" expl="apply premises">
          <transf name="replace" arg1="(inv1 (i_to_c (power_ 2 n)))" arg2="(c_one /. (i_to_c (power_ 2 n)))">
           <goal name="VC int_to_ang.4.0.2.1.0.0.0.1.0.0" expl="apply premises">
           <proof prover="6" obsolete="true"><result status="valid" time="1.00" steps="171"/></proof>
           </goal>
           <goal name="VC int_to_ang.4.0.2.1.0.0.0.1.0.1" expl="equality hypothesis">
           <proof prover="4" obsolete="true"><result status="valid" time="0.87"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_ang.4.0.2.1.0.0.0.1.1" expl="apply premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.77" steps="171"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_ang.4.0.2.1.0.0.1" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.36"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_ang.4.0.2.1.0.1" expl="rewrite premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.41"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_ang.4.0.2.1.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_inv" expl="VC for real_to_ang_inv">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_inv.0" expl="postcondition">
  <transf name="rewrite" arg1="Real_To_Ang_inv">
   <goal name="VC real_to_ang_inv.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="155"/></proof>
   </goal>
   <goal name="VC real_to_ang_inv.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_inv_rev" expl="VC for real_to_ang_inv_rev">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_inv_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.73" steps="157"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC involutive_ang_inv" expl="VC for involutive_ang_inv">
 <transf name="split_vc" >
  <goal name="VC involutive_ang_inv.0" expl="postcondition">
  <transf name="replace" arg1="o" arg2="(real_to_ang (ang_meas o))">
   <goal name="VC involutive_ang_inv.0.0" expl="postcondition">
   <transf name="rewrite" arg1="real_to_ang_inv_rev">
    <goal name="VC involutive_ang_inv.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="real_to_ang_inv_rev">
     <goal name="VC involutive_ang_inv.0.0.0.0" expl="postcondition">
     <proof prover="6" obsolete="true"><result status="valid" time="0.60" steps="155"/></proof>
     </goal>
     <goal name="VC involutive_ang_inv.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="155"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC involutive_ang_inv.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.58" steps="155"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC involutive_ang_inv.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="0.58" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Real_To_Ang_inv_add">
 <transf name="split_vc" >
  <goal name="Real_To_Ang_inv_add.0">
  <transf name="rewrite" arg1="Real_To_Ang_add">
   <goal name="Real_To_Ang_inv_add.0.0">
   <transf name="replace" arg1="(phi +. (-. phi))" arg2="c_zero">
    <goal name="Real_To_Ang_inv_add.0.0.0">
    <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="155"/></proof>
    </goal>
    <goal name="Real_To_Ang_inv_add.0.0.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.59" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Real_To_Ang_inv_add.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.11" steps="155"/></proof>
   </goal>
   <goal name="Real_To_Ang_inv_add.0.2" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.60" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Real_To_Ang_up">
 <transf name="split_vc" >
  <goal name="Real_To_Ang_up.0">
  <proof prover="0" obsolete="true"><result status="valid" time="0.32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_To_Ang_cyclic_pos" expl="VC for real_To_Ang_cyclic_pos">
 <transf name="split_vc" >
  <goal name="VC real_To_Ang_cyclic_pos.0" expl="variant decrease">
  <transf name="split_vc" >
   <goal name="VC real_To_Ang_cyclic_pos.0.0" expl="variant decrease">
   <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="159"/></proof>
   </goal>
   <goal name="VC real_To_Ang_cyclic_pos.0.1" expl="variant decrease">
   <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="159"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_To_Ang_cyclic_pos.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="159"/></proof>
  </goal>
  <goal name="VC real_To_Ang_cyclic_pos.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="159"/></proof>
  </goal>
  <goal name="VC real_To_Ang_cyclic_pos.3" expl="postcondition">
  <transf name="replace" arg1="(i_to_c k +. phi)" arg2="(i_to_c (k-1) +. phi +. c_one)">
   <goal name="VC real_To_Ang_cyclic_pos.3.0" expl="postcondition">
   <transf name="destruct" arg1="H">
    <goal name="VC real_To_Ang_cyclic_pos.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H">
     <goal name="VC real_To_Ang_cyclic_pos.3.0.0.0" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="3.25"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_To_Ang_cyclic_pos.3.0.1" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="161"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_To_Ang_cyclic_pos.3.1" expl="equality hypothesis">
   <transf name="replace" arg1="(i_to_c k)" arg2="(i_to_c (k-1+1))">
    <goal name="VC real_To_Ang_cyclic_pos.3.1.0" expl="equality hypothesis">
    <transf name="rewrite" arg1="i_to_c_add_rev">
     <goal name="VC real_To_Ang_cyclic_pos.3.1.0.0" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="157"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_To_Ang_cyclic_pos.3.1.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_To_Ang_cyclic_neg" expl="VC for real_To_Ang_cyclic_neg">
 <transf name="split_vc" >
  <goal name="VC real_To_Ang_cyclic_neg.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="159"/></proof>
  </goal>
  <goal name="VC real_To_Ang_cyclic_neg.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="159"/></proof>
  </goal>
  <goal name="VC real_To_Ang_cyclic_neg.2" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.66" steps="161"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_equiv" expl="VC for real_to_ang_equiv">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_equiv.0" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC real_to_ang_equiv.0.0" expl="postcondition">
   <transf name="case" arg1="(0&lt;=k)">
    <goal name="VC real_to_ang_equiv.0.0.0" expl="true case (postcondition)">
    <transf name="instantiate" arg1="real_To_Ang_cyclic_pos" arg2="x,k">
     <goal name="VC real_to_ang_equiv.0.0.0.0" expl="true case (postcondition)">
     <transf name="rewrite" arg1="Hinst">
      <goal name="VC real_to_ang_equiv.0.0.0.0.0" expl="true case (postcondition)">
      <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="161"/></proof>
      </goal>
      <goal name="VC real_to_ang_equiv.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="161"/></proof>
      </goal>
      <goal name="VC real_to_ang_equiv.0.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="161"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_equiv.0.0.1" expl="false case (postcondition)">
    <transf name="replace" arg1="(real_to_ang x)" arg2="(ang_inv (real_to_ang (-.x)))">
     <goal name="VC real_to_ang_equiv.0.0.1.0" expl="false case (postcondition)">
     <transf name="replace" arg1="(real_to_ang x&#39;)" arg2="(ang_inv (real_to_ang (-.x&#39;)))">
      <goal name="VC real_to_ang_equiv.0.0.1.0.0" expl="false case (postcondition)">
      <transf name="replace" arg1="(-. x&#39;)" arg2="(-. x-. i_to_c k)">
       <goal name="VC real_to_ang_equiv.0.0.1.0.0.0" expl="false case (postcondition)">
       <transf name="replace" arg1="((-. x) -. i_to_c k)" arg2="((-. x) +. i_to_c(-k))">
        <goal name="VC real_to_ang_equiv.0.0.1.0.0.0.0" expl="false case (postcondition)">
        <transf name="instantiate" arg1="real_To_Ang_cyclic_pos" arg2="(-.x),(-k)">
         <goal name="VC real_to_ang_equiv.0.0.1.0.0.0.0.0" expl="false case (postcondition)">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC real_to_ang_equiv.0.0.1.0.0.0.0.0.0" expl="false case (postcondition)">
          <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="159"/></proof>
          </goal>
          <goal name="VC real_to_ang_equiv.0.0.1.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.64" steps="161"/></proof>
          </goal>
          <goal name="VC real_to_ang_equiv.0.0.1.0.0.0.0.0.2" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="159"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC real_to_ang_equiv.0.0.1.0.0.0.1" expl="equality hypothesis">
        <proof prover="4" obsolete="true"><result status="valid" time="1.05"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC real_to_ang_equiv.0.0.1.0.0.1" expl="equality hypothesis">
       <proof prover="1" obsolete="true"><result status="valid" time="0.36"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC real_to_ang_equiv.0.0.1.0.1" expl="equality hypothesis">
      <transf name="rewrite" arg1="real_to_ang_inv">
       <goal name="VC real_to_ang_equiv.0.0.1.0.1.0" expl="equality hypothesis">
       <transf name="assert" arg1="(forall o. ang_inv (ang_inv o) = o)">
        <goal name="VC real_to_ang_equiv.0.0.1.0.1.0.0" expl="asserted formula">
        <transf name="split_vc" >
         <goal name="VC real_to_ang_equiv.0.0.1.0.1.0.0.0" expl="asserted formula">
         <transf name="replace" arg1="o" arg2="(real_to_ang (ang_meas o))">
          <goal name="VC real_to_ang_equiv.0.0.1.0.1.0.0.0.0" expl="asserted formula">
          <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="161"/></proof>
          </goal>
          <goal name="VC real_to_ang_equiv.0.0.1.0.1.0.0.0.1" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="161"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC real_to_ang_equiv.0.0.1.0.1.0.1" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="0.62" steps="161"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC real_to_ang_equiv.0.0.1.0.1.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.61" steps="161"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC real_to_ang_equiv.0.0.1.1" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="0.35"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Real_zero_n">
 <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="153"/></proof>
 </goal>
 <goal name="VC real_ang_mult_pos" expl="VC for real_ang_mult_pos">
 <transf name="split_vc" >
  <goal name="VC real_ang_mult_pos.0" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.12" steps="159"/></proof>
  </goal>
  <goal name="VC real_ang_mult_pos.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="159"/></proof>
  </goal>
  <goal name="VC real_ang_mult_pos.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="159"/></proof>
  </goal>
  <goal name="VC real_ang_mult_pos.3" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC real_ang_mult_pos.3.0" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC real_ang_mult_pos.3.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC real_ang_mult_pos.3.0.0.0" expl="postcondition">
     <transf name="eliminate_definition" >
      <goal name="VC real_ang_mult_pos.3.0.0.0.0" expl="postcondition">
      <transf name="split_all_full" >
       <goal name="VC real_ang_mult_pos.3.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="ang_mult_int_def1">
        <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0" expl="postcondition">
        <transf name="case" arg1="(i= 0)">
         <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.0" expl="true case (postcondition)">
         <proof prover="1" obsolete="true"><result status="valid" time="0.46"/></proof>
         </goal>
         <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.1" expl="false case (postcondition)">
         <transf name="rewrite" arg1="ang_mult_int__def">
          <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.1.0" expl="false case (postcondition)">
          <transf name="replace" arg1="(ang_mult_int (real_to_ang phi) (i - 1))" arg2="(ang_mult_int_ (real_to_ang phi) (i - 1))" arg3="in" arg4="H">
           <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.1.0.0" expl="false case (postcondition)">
           <transf name="rewrite" arg1="H">
            <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.1.0.0.0" expl="false case (postcondition)">
            <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="169"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.1.0.1" expl="equality hypothesis">
           <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="169"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.1.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="169"/></proof>
          </goal>
          <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.0.1.2" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="169"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC real_ang_mult_pos.3.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="169"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_ang_mult_pos.3.1" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="VC real_ang_mult_pos.3.1.0" expl="postcondition">
    <transf name="eliminate_definition" >
     <goal name="VC real_ang_mult_pos.3.1.0.0" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="VC real_ang_mult_pos.3.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="ang_mult_int_def1">
       <goal name="VC real_ang_mult_pos.3.1.0.0.0.0" expl="postcondition">
       <transf name="case" arg1="(i= 0)">
        <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.0" expl="true case (postcondition)">
        <proof prover="1" obsolete="true"><result status="valid" time="0.48"/></proof>
        </goal>
        <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1" expl="false case (postcondition)">
        <transf name="rewrite" arg1="ang_mult_int__def">
         <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0" expl="false case (postcondition)">
         <transf name="replace" arg1="(ang_mult_int_ (real_to_ang phi) (i - 1))" arg2="(ang_mult_int (real_to_ang phi) (i - 1))">
          <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0" expl="false case (postcondition)">
          <transf name="rewrite" arg1="H">
           <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0" expl="false case (postcondition)">
           <transf name="rewrite" arg1="Real_To_Ang_add">
            <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0" expl="false case (postcondition)">
            <transf name="apply" arg1="real_to_ang_eq">
             <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
             <proof prover="6" obsolete="true"><result status="valid" time="2.39" steps="173"/></proof>
             </goal>
             <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises">
             <transf name="replace" arg1="(i_to_c i)" arg2="(i_to_c (i-1+1))">
              <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0" expl="apply premises">
              <transf name="rewrite" arg1="i_to_c_add_rev">
               <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0.0" expl="apply premises">
               <transf name="apply" arg1="goal_comm">
                <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises">
                <transf name="assert" arg1="(forall a b c. a*. (b+.c) = a*. b +. a*.c)">
                 <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0.0.0.0" expl="asserted formula">
                 <proof prover="6" obsolete="true"><result status="valid" time="3.30" steps="173"/></proof>
                 </goal>
                 <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises">
                 <transf name="rewrite" arg1="h">
                  <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0.0.0.1.0" expl="apply premises">
                  <transf name="apply" arg1="add_eq_t">
                   <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0.0.0.1.0.0" expl="apply premises">
                   <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="171"/></proof>
                   </goal>
                   <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.0.0.0.1.0.1" expl="apply premises">
                   <proof prover="6" obsolete="true"><result status="valid" time="1.52" steps="173"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.0.1.1" expl="equality hypothesis">
              <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="171"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
            <proof prover="6" obsolete="true"><result status="valid" time="1.68" steps="173"/></proof>
            </goal>
            <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.0.2" expl="rewrite premises">
            <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="171"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.0.1" expl="rewrite premises">
           <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="171"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.0.1" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="1.43" steps="173"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.1" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="171"/></proof>
         </goal>
         <goal name="VC real_ang_mult_pos.3.1.0.0.0.0.1.2" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="171"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC real_ang_mult_pos.3.1.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="169"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_ang_mult" expl="VC for real_ang_mult">
 <proof prover="0" obsolete="true"><result status="valid" time="0.38"/></proof>
 </goal>
 <goal name="VC real_to_ang_down_cucles" expl="VC for real_to_ang_down_cucles">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_down_cucles.0" expl="postcondition">
  <transf name="instantiate" arg1="real_To_Ang_cyclic_pos" arg2="(phi -. x),1">
   <goal name="VC real_to_ang_down_cucles.0.0" expl="postcondition">
   <transf name="replace" arg1="(phi -. x)" arg2="(phi +. (-.x))">
    <goal name="VC real_to_ang_down_cucles.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="real_to_ang_add">
     <goal name="VC real_to_ang_down_cucles.0.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(real_to_ang (-. x))" arg2="ang_zero">
      <goal name="VC real_to_ang_down_cucles.0.0.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="0.63" steps="160"/></proof>
      </goal>
      <goal name="VC real_to_ang_down_cucles.0.0.0.0.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.34"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC real_to_ang_down_cucles.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.13" steps="157"/></proof>
     </goal>
     <goal name="VC real_to_ang_down_cucles.0.0.0.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.82" steps="160"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_down_cucles.0.0.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.86" steps="160"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_to_real_to_ang" expl="VC for int_to_ang_to_real_to_ang">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_to_real_to_ang.0" expl="postcondition">
  <transf name="rewrite" arg1="H">
   <goal name="VC int_to_ang_to_real_to_ang.0.0" expl="postcondition">
   <transf name="rewrite" arg1="int_to_ang_def">
    <goal name="VC int_to_ang_to_real_to_ang.0.0.0" expl="postcondition">
    <proof prover="1" obsolete="true"><result status="valid" time="0.51"/></proof>
    </goal>
    <goal name="VC int_to_ang_to_real_to_ang.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="175"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_to_int_to_ang" expl="VC for real_to_ang_to_int_to_ang">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_to_int_to_ang.0" expl="postcondition">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="VC real_to_ang_to_int_to_ang.0.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.45"/></proof>
   </goal>
   <goal name="VC real_to_ang_to_int_to_ang.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_to_int_to_ang_add" expl="VC for real_to_ang_to_int_to_ang_add">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_to_int_to_ang_add.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_to_real_to_ang_gen" expl="VC for int_to_ang_to_real_to_ang_gen">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_to_real_to_ang_gen.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.24" steps="177"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Int_To_Ang_inv">
 <transf name="split_vc" >
  <goal name="Int_To_Ang_inv.0">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="Int_To_Ang_inv.0.0">
   <transf name="rewrite" arg1="int_to_ang_def">
    <goal name="Int_To_Ang_inv.0.0.0">
    <transf name="replace" arg1="(i_to_c (- k) /. i_to_c (power 2 n))" arg2="(-.(i_to_c k /. i_to_c (power 2 n)))">
     <goal name="Int_To_Ang_inv.0.0.0.0">
     <proof prover="0" obsolete="true"><result status="valid" time="0.46"/></proof>
     </goal>
     <goal name="Int_To_Ang_inv.0.0.0.1" expl="equality hypothesis">
     <proof prover="0" obsolete="true"><result status="valid" time="0.37"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="Int_To_Ang_inv.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="173"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Int_To_Ang_inv.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Int_To_Ang_inv_add">
 <transf name="split_vc" >
  <goal name="Int_To_Ang_inv_add.0">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="Int_To_Ang_inv_add.0.0">
   <transf name="rewrite" arg1="int_to_ang_def">
    <goal name="Int_To_Ang_inv_add.0.0.0">
    <transf name="rewrite" arg1="real_to_ang_add_rev">
     <goal name="Int_To_Ang_inv_add.0.0.0.0">
     <proof prover="0" obsolete="true"><result status="valid" time="0.42"/></proof>
     </goal>
     <goal name="Int_To_Ang_inv_add.0.0.0.1" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.42"/></proof>
     </goal>
     <goal name="Int_To_Ang_inv_add.0.0.0.2" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.42"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="Int_To_Ang_inv_add.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="173"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Int_To_Ang_inv_add.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Int_To_Ang_add">
 <transf name="split_vc" >
  <goal name="Int_To_Ang_add.0">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="Int_To_Ang_add.0.0">
   <transf name="rewrite" arg1="int_to_ang_def">
    <goal name="Int_To_Ang_add.0.0.0">
    <transf name="rewrite" arg1="int_to_ang_def">
     <goal name="Int_To_Ang_add.0.0.0.0">
     <transf name="replace" arg1="(i_to_c (k + k&#39;) /. i_to_c (power_ 2 n))" arg2="((i_to_c k /. i_to_c (power_ 2 n)) +. (i_to_c k&#39; /. i_to_c (power_ 2 n)))
">
      <goal name="Int_To_Ang_add.0.0.0.0.0">
      <proof prover="0" obsolete="true"><result status="valid" time="0.44"/></proof>
      </goal>
      <goal name="Int_To_Ang_add.0.0.0.0.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="1.72"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="Int_To_Ang_add.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="173"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="Int_To_Ang_add.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="173"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Int_To_Ang_add.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Int_To_Ang_up">
 <transf name="split_vc" >
  <goal name="Int_To_Ang_up.0">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="Int_To_Ang_up.0.0">
   <transf name="rewrite" arg1="int_to_ang_def">
    <goal name="Int_To_Ang_up.0.0.0">
    <transf name="apply" arg1="real_to_ang_eq">
     <goal name="Int_To_Ang_up.0.0.0.0" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.42"/></proof>
     </goal>
     <goal name="Int_To_Ang_up.0.0.0.1" expl="apply premises">
     <transf name="replace" arg1="(i_to_c (power_ 2 (n + 1)))" arg2="(ttwo *. i_to_c (power_ 2 n))">
      <goal name="Int_To_Ang_up.0.0.0.1.0" expl="apply premises">
      <proof prover="1" obsolete="true"><result status="valid" time="0.52"/></proof>
      </goal>
      <goal name="Int_To_Ang_up.0.0.0.1.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.45"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="Int_To_Ang_up.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="173"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Int_To_Ang_up.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Int_To_Ang_cyclic">
 <transf name="split_vc" >
  <goal name="Int_To_Ang_cyclic.0">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="Int_To_Ang_cyclic.0.0">
   <transf name="rewrite" arg1="int_to_ang_def">
    <goal name="Int_To_Ang_cyclic.0.0.0">
    <transf name="replace" arg1="(i_to_c (k + power_ 2 n) /. i_to_c (power_ 2 n))" arg2="((i_to_c k /. i_to_c (power_ 2 n)) +. c_one)">
     <goal name="Int_To_Ang_cyclic.0.0.0.0">
     <proof prover="0" obsolete="true"><result status="valid" time="0.46"/></proof>
     </goal>
     <goal name="Int_To_Ang_cyclic.0.0.0.1" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_add_rev">
      <goal name="Int_To_Ang_cyclic.0.0.0.1.0" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="0.61"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="Int_To_Ang_cyclic.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="173"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Int_To_Ang_cyclic.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Zero_n">
 <transf name="split_vc" >
  <goal name="Zero_n.0">
  <proof prover="1" obsolete="true"><result status="valid" time="0.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_minus_one" expl="VC for ang_minus_one">
 <transf name="split_vc" >
  <goal name="VC ang_minus_one.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="171"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ang_minus_one_by_int" expl="VC for set_ang_minus_one_by_int">
 <transf name="split_vc" >
  <goal name="VC set_ang_minus_one_by_int.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.36" steps="175"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_minus_one_from_real" expl="VC for ang_minus_one_from_real">
 <transf name="split_vc" >
  <goal name="VC ang_minus_one_from_real.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.11" steps="173"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_minus_one" expl="VC for ang_exp_minus_one">
 <transf name="split_vc" >
  <goal name="VC ang_exp_minus_one.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.39" steps="173"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_ang_zero_by_int" expl="VC for set_ang_zero_by_int">
 <transf name="split_vc" >
  <goal name="VC set_ang_zero_by_int.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.85" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_minus_one_twice" expl="VC for ang_minus_one_twice">
 <transf name="split_vc" >
  <goal name="VC ang_minus_one_twice.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_two" expl="VC for div_two">
 <transf name="split_vc" >
  <goal name="VC div_two.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="180"/></proof>
  </goal>
  <goal name="VC div_two.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.74" steps="184"/></proof>
  </goal>
  <goal name="VC div_two.2" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC div_two.2.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC div_two.2.0.0" expl="postcondition">
    <transf name="rewrite" arg1="meas_value">
     <goal name="VC div_two.2.0.0.0" expl="postcondition">
     <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="202"/></proof>
     </goal>
     <goal name="VC div_two.2.0.0.1" expl="rewrite premises">
     <proof prover="1" obsolete="true"><result status="valid" time="0.57"/></proof>
     </goal>
     <goal name="VC div_two.2.0.0.2" expl="rewrite premises">
     <transf name="split_vc" >
      <goal name="VC div_two.2.0.0.2.0" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="0.46"/></proof>
      </goal>
      <goal name="VC div_two.2.0.0.2.1" expl="rewrite premises">
      <transf name="assert" arg1="((ang_meas d /. ttwo) +. (ang_meas d /. ttwo) &lt;. c_one)">
       <goal name="VC div_two.2.0.0.2.1.0" expl="asserted formula">
       <proof prover="1" obsolete="true"><result status="valid" time="0.47"/></proof>
       </goal>
       <goal name="VC div_two.2.0.0.2.1.1" expl="rewrite premises">
       <transf name="assert" arg1="(ang_meas d /. ttwo &lt;=. ((ang_meas d /. ttwo) +. (ang_meas d /. ttwo)))">
        <goal name="VC div_two.2.0.0.2.1.1.0" expl="asserted formula">
        <transf name="assert" arg1="(c_zero +. ang_meas d /. ttwo &lt;=. ((ang_meas d /. ttwo) +. (ang_meas d /. ttwo)))">
         <goal name="VC div_two.2.0.0.2.1.1.0.0" expl="asserted formula">
         <transf name="apply" arg1="compat_order_add">
          <goal name="VC div_two.2.0.0.2.1.1.0.0.0" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.47"/></proof>
          </goal>
          <goal name="VC div_two.2.0.0.2.1.1.0.0.1" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="3.95"/></proof>
          </goal>
          <goal name="VC div_two.2.0.0.2.1.1.0.0.2" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.47"/></proof>
          </goal>
          <goal name="VC div_two.2.0.0.2.1.1.0.0.3" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.73"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_two.2.0.0.2.1.1.0.1" expl="asserted formula">
         <proof prover="0" obsolete="true"><result status="valid" time="3.90"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC div_two.2.0.0.2.1.1.1" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="4.29"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC div_two.3" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Div_two">
 <transf name="split_vc" >
  <goal name="Div_two.0">
  <transf name="eliminate_definition" >
   <goal name="Div_two.0.0">
   <transf name="rewrite" arg1="div_two_def">
    <goal name="Div_two.0.0.0">
    <transf name="rewrite" arg1="real_to_ang_add_rev">
     <goal name="Div_two.0.0.0.0">
     <proof prover="0" obsolete="true"><result status="valid" time="4.02"/></proof>
     </goal>
     <goal name="Div_two.0.0.0.1" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="4.22"/></proof>
     </goal>
     <goal name="Div_two.0.0.0.2" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="3.83"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="div_two_int_to_ang">
 <transf name="split_vc" >
  <goal name="div_two_int_to_ang.0">
  <transf name="apply" arg1="get_equal_angle_meas">
   <goal name="div_two_int_to_ang.0.0" expl="apply premises">
   <transf name="split_all_full" >
    <goal name="div_two_int_to_ang.0.0.0" expl="apply premises">
    <transf name="rewrite" arg1="div_two_spec1">
     <goal name="div_two_int_to_ang.0.0.0.0" expl="apply premises">
     <transf name="rewrite" arg1="int_to_ang_spec">
      <goal name="div_two_int_to_ang.0.0.0.0.0" expl="apply premises">
      <transf name="rewrite" arg1="int_to_ang_spec">
       <goal name="div_two_int_to_ang.0.0.0.0.0.0" expl="apply premises">
       <transf name="replace" arg1="(i_to_c k /. i_to_c (power_ 2 (n + 1)))" arg2="((i_to_c k /. i_to_c (power_ 2 n)) *. (c_one /. i_to_c (power_ 2 1)))
">
        <goal name="div_two_int_to_ang.0.0.0.0.0.0.0" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="1.81" steps="184"/></proof>
        </goal>
        <goal name="div_two_int_to_ang.0.0.0.0.0.0.1" expl="equality hypothesis">
        <transf name="rewrite" arg1="mult_div_comm_rev">
         <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.0" expl="equality hypothesis">
         <transf name="apply" arg1="div_eq">
          <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.0.0" expl="apply premises">
          <proof prover="6" obsolete="true"><result status="valid" time="1.90" steps="184"/></proof>
          </goal>
          <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.0.1" expl="apply premises">
          <transf name="rewrite" arg1="power__plus_one">
           <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.0.1.0" expl="apply premises">
           <transf name="rewrite" arg1="i_to_c_mult">
            <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises">
            <proof prover="6" obsolete="true"><result status="valid" time="1.87" steps="184"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.0.1.1" expl="rewrite premises">
           <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="182"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.0.2" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.83"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.1" expl="rewrite premises">
         <proof prover="1" obsolete="true"><result status="valid" time="0.86"/></proof>
         </goal>
         <goal name="div_two_int_to_ang.0.0.0.0.0.0.1.2" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="div_two_int_to_ang.0.0.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="182"/></proof>
       </goal>
       <goal name="div_two_int_to_ang.0.0.0.0.0.2" expl="rewrite premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.46"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="div_two_int_to_ang.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
      </goal>
      <goal name="div_two_int_to_ang.0.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="182"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_mult" expl="VC for ang_exp_mult">
 <transf name="split_vc" >
  <goal name="VC ang_exp_mult.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.65" steps="178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_modulus" expl="VC for ang_exp_modulus">
 <transf name="split_vc" >
  <goal name="VC ang_exp_modulus.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_exp_modulus.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_exp_def">
    <goal name="VC ang_exp_modulus.0.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="3.48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_not_one" expl="VC for ang_exp_not_one">
 <transf name="split_vc" >
  <goal name="VC ang_exp_not_one.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.48"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_not_by_modulus" expl="VC for ang_exp_not_by_modulus">
 <transf name="split_vc" >
  <goal name="VC ang_exp_not_by_modulus.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC k_int_to_ang" expl="VC for k_int_to_ang">
 <transf name="split_vc" >
  <goal name="VC k_int_to_ang.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="K_int_to_angplus_one">
 <transf name="split_vc" >
  <goal name="K_int_to_angplus_one.0">
  <transf name="rewrite" arg1="k_int_to_ang_def">
   <goal name="K_int_to_angplus_one.0.0">
   <transf name="rewrite" arg1="k_int_to_ang_def">
    <goal name="K_int_to_angplus_one.0.0.0">
    <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
    </goal>
    <goal name="K_int_to_angplus_one.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="178"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="K_int_to_angplus_one.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="178"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC phase_inv_pre" expl="VC for phase_inv_pre">
 <transf name="split_vc" >
  <goal name="VC phase_inv_pre.0" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="180"/></proof>
  </goal>
  <goal name="VC phase_inv_pre.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="180"/></proof>
  </goal>
  <goal name="VC phase_inv_pre.2" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC phase_inv_pre.2.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC phase_inv_pre.2.0.0" expl="postcondition">
    <transf name="case" arg1="(i = 0)">
     <goal name="VC phase_inv_pre.2.0.0.0" expl="true case (postcondition)">
     <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="184"/></proof>
     </goal>
     <goal name="VC phase_inv_pre.2.0.0.1" expl="false case (postcondition)">
     <transf name="assert" arg1="(mod (i-1) 2 = 1)">
      <goal name="VC phase_inv_pre.2.0.0.1.0" expl="asserted formula">
      <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="184"/></proof>
      </goal>
      <goal name="VC phase_inv_pre.2.0.0.1.1" expl="false case (postcondition)">
      <transf name="eliminate_let" >
       <goal name="VC phase_inv_pre.2.0.0.1.1.0" expl="false case (postcondition)">
       <transf name="rewrite" arg1="H1">
        <goal name="VC phase_inv_pre.2.0.0.1.1.0.0" expl="false case (postcondition)">
        <transf name="rewrite" arg1="H2">
         <goal name="VC phase_inv_pre.2.0.0.1.1.0.0.0" expl="false case (postcondition)">
         <transf name="replace" arg1="d" arg2="(real_to_ang (ang_meas d))">
          <goal name="VC phase_inv_pre.2.0.0.1.1.0.0.0.0" expl="false case (postcondition)">
          <transf name="rewrite" arg1="Real_To_Ang_inv">
           <goal name="VC phase_inv_pre.2.0.0.1.1.0.0.0.0.0" expl="false case (postcondition)">
           <proof prover="0" obsolete="true"><result status="valid" time="0.72"/></proof>
           </goal>
           <goal name="VC phase_inv_pre.2.0.0.1.1.0.0.0.0.1" expl="rewrite premises">
           <proof prover="6" obsolete="true"><result status="valid" time="1.98" steps="191"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC phase_inv_pre.2.0.0.1.1.0.0.0.1" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="1.94" steps="191"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC phase_inv_pre.2.0.0.1.1.0.0.1" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="188"/></proof>
         </goal>
         <goal name="VC phase_inv_pre.2.0.0.1.1.0.0.2" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="188"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC phase_inv_pre.2.0.0.1.1.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="188"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC phase_inv_pre.3" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="188"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC phase_inv_" expl="VC for phase_inv_">
 <transf name="split_vc" >
  <goal name="VC phase_inv_.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="178"/></proof>
  </goal>
  <goal name="VC phase_inv_.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="178"/></proof>
  </goal>
  <goal name="VC phase_inv_.2" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="178"/></proof>
  </goal>
  <goal name="VC phase_inv_.3" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Even_phase_inv">
 <transf name="split_vc" >
  <goal name="Even_phase_inv.0">
  <proof prover="6" obsolete="true"><result status="valid" time="1.95" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Odd_phase_inv">
 <transf name="split_vc" >
  <goal name="Odd_phase_inv.0">
  <proof prover="6" obsolete="true"><result status="valid" time="1.61" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Gen_phase_inv">
 <transf name="split_vc" >
  <goal name="Gen_phase_inv.0">
  <transf name="case" arg1="(mod i 2 = 0)">
   <goal name="Gen_phase_inv.0.0" expl="true case">
   <transf name="split_all_full" >
    <goal name="Gen_phase_inv.0.0.0" expl="true case">
    <transf name="rewrite" arg1="power__minus_one">
     <goal name="Gen_phase_inv.0.0.0.0" expl="true case">
     <proof prover="6" obsolete="true"><result status="valid" time="2.41" steps="184"/></proof>
     </goal>
     <goal name="Gen_phase_inv.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="182"/></proof>
     </goal>
     <goal name="Gen_phase_inv.0.0.0.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="Gen_phase_inv.0.1" expl="false case">
   <proof prover="0" obsolete="true"><result status="valid" time="0.88"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Gen_phase_inv_neg">
 <transf name="split_vc" >
  <goal name="Gen_phase_inv_neg.0">
  <transf name="case" arg1="(mod i 2 = 0)">
   <goal name="Gen_phase_inv_neg.0.0" expl="true case">
   <transf name="split_all_full" >
    <goal name="Gen_phase_inv_neg.0.0.0" expl="true case">
    <transf name="rewrite" arg1="power__minus_one">
     <goal name="Gen_phase_inv_neg.0.0.0.0" expl="true case">
     <proof prover="6" obsolete="true"><result status="valid" time="3.04" steps="184"/></proof>
     </goal>
     <goal name="Gen_phase_inv_neg.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="182"/></proof>
     </goal>
     <goal name="Gen_phase_inv_neg.0.0.0.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.38" steps="182"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="Gen_phase_inv_neg.0.1" expl="false case">
   <transf name="split_all_full" >
    <goal name="Gen_phase_inv_neg.0.1.0" expl="false case">
    <transf name="rewrite" arg1="power__minus_one1">
     <goal name="Gen_phase_inv_neg.0.1.0.0" expl="false case">
     <proof prover="0" obsolete="true"><result status="valid" time="0.91"/></proof>
     </goal>
     <goal name="Gen_phase_inv_neg.0.1.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.42" steps="182"/></proof>
     </goal>
     <goal name="Gen_phase_inv_neg.0.1.0.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.30" steps="182"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Ang_exp_inv">
 <transf name="split_vc" >
  <goal name="Ang_exp_inv.0">
  <transf name="replace" arg1="(ang_inv o)" arg2="(ang_inv (real_to_ang (ang_meas o)))">
   <goal name="Ang_exp_inv.0.0">
   <transf name="rewrite" arg1="Real_To_Ang_inv">
    <goal name="Ang_exp_inv.0.0.0">
    <transf name="case" arg1="(ang_meas o = c_zero)">
     <goal name="Ang_exp_inv.0.0.0.0" expl="true case">
     <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
     </goal>
     <goal name="Ang_exp_inv.0.0.0.1" expl="false case">
     <transf name="replace" arg1="(ang_exp (real_to_ang (-. ang_meas o)))" arg2="(ang_exp (real_to_ang (c_one -. ang_meas o)))">
      <goal name="Ang_exp_inv.0.0.0.1.0" expl="false case">
      <transf name="eliminate_definition" >
       <goal name="Ang_exp_inv.0.0.0.1.0.0" expl="false case">
       <transf name="rewrite" arg1="ang_exp_def">
        <goal name="Ang_exp_inv.0.0.0.1.0.0.0" expl="false case">
        <transf name="rewrite" arg1="meas_value">
         <goal name="Ang_exp_inv.0.0.0.1.0.0.0.0" expl="false case">
         <transf name="replace" arg1="(exp (two_pi_i *. (c_one -. ang_meas o)))" arg2="(exp (-. (two_pi_i *.  ang_meas o)))">
          <goal name="Ang_exp_inv.0.0.0.1.0.0.0.0.0" expl="false case">
          <proof prover="4" obsolete="true"><result status="valid" time="0.96"/></proof>
          </goal>
          <goal name="Ang_exp_inv.0.0.0.1.0.0.0.0.1" expl="equality hypothesis">
          <transf name="replace" arg1="(c_one -. ang_meas o)" arg2="(c_one +. (-. ang_meas o))">
           <goal name="Ang_exp_inv.0.0.0.1.0.0.0.0.1.0" expl="equality hypothesis">
           <transf name="rewrite" arg1="mult_distr_add_r">
            <goal name="Ang_exp_inv.0.0.0.1.0.0.0.0.1.0.0" expl="equality hypothesis">
            <transf name="rewrite" arg1="exp_sum">
             <goal name="Ang_exp_inv.0.0.0.1.0.0.0.0.1.0.0.0" expl="equality hypothesis">
             <proof prover="1" obsolete="true"><result status="valid" time="0.75"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="Ang_exp_inv.0.0.0.1.0.0.0.0.1.1" expl="equality hypothesis">
           <proof prover="0" obsolete="true"><result status="valid" time="7.06"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="Ang_exp_inv.0.0.0.1.0.0.0.1" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="6.58"/></proof>
         </goal>
         <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.0">
          <proof prover="0" obsolete="true"><result status="valid" time="3.82"/></proof>
          </goal>
          <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1">
          <transf name="assert" arg1="( c_zero &lt;. ang_meas o )">
           <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.0" expl="asserted formula">
           <transf name="rewrite" arg1="(&lt;.)_def">
            <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.0.0">
            <transf name="split_vc" >
             <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.0.0.0">
             <proof prover="0" obsolete="true"><result status="valid" time="3.52"/></proof>
             </goal>
             <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.0.0.1">
             <proof prover="0" obsolete="true"><result status="valid" time="3.95"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.1">
           <transf name="assert" arg1="((-. ang_meas o)   &lt;. c_zero )">
            <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.1.0" expl="asserted formula">
            <proof prover="0" obsolete="true"><result status="valid" time="4.19"/></proof>
            </goal>
            <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.1.1">
            <transf name="assert" arg1="((-. ang_meas o) +. c_one  &lt;. c_zero +. c_one)">
             <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.1.1.0" expl="asserted formula">
             <proof prover="1" obsolete="true"><result status="valid" time="0.52"/></proof>
             </goal>
             <goal name="Ang_exp_inv.0.0.0.1.0.0.0.2.1.1.1.1">
             <proof prover="1" obsolete="true"><result status="valid" time="0.51"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="Ang_exp_inv.0.0.0.1.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.43"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="Ang_exp_inv.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="1.90" steps="178"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Ang_exp_inv.0.1" expl="equality hypothesis">
   <proof prover="0" obsolete="true"><result status="valid" time="0.48"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_inv_to_conjugate" expl="VC for ang_inv_to_conjugate">
 <transf name="split_vc" >
  <goal name="VC ang_inv_to_conjugate.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_inv_to_conjugate.0.0" expl="postcondition">
   <transf name="rewrite" arg1="conjugate_module_one">
    <goal name="VC ang_inv_to_conjugate.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="Ang_exp_inv">
     <goal name="VC ang_inv_to_conjugate.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="(/.)_def">
      <goal name="VC ang_inv_to_conjugate.0.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="one_mult_t">
       <goal name="VC ang_inv_to_conjugate.0.0.0.0.0.0" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="194"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_inv_to_conjugate.0.0.0.0.1" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="4.19"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_inv_to_conjugate.0.0.1" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="5.01"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC exp_minus" expl="VC for exp_minus">
 <transf name="split_vc" >
  <goal name="VC exp_minus.0" expl="postcondition">
  <transf name="replace" arg1="(im *. (-. x))" arg2="(-. (im*.x))">
   <goal name="VC exp_minus.0.0" expl="postcondition">
   <transf name="rewrite" arg1="exp_inv">
    <goal name="VC exp_minus.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="conjugate_module_one">
     <goal name="VC exp_minus.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="(/.)_def">
      <goal name="VC exp_minus.0.0.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="3.60" steps="180"/></proof>
      </goal>
      <goal name="VC exp_minus.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="2.78" steps="180"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC exp_minus.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.98" steps="180"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC exp_minus.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="2.13" steps="180"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC exp_minus.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="2.05" steps="180"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_to_ang_inv" expl="VC for conjugate_to_ang_inv">
 <transf name="split_vc" >
  <goal name="VC conjugate_to_ang_inv.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.47" steps="178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC conjugate_inv_elim" expl="VC for conjugate_inv_elim">
 <transf name="split_vc" >
  <goal name="VC conjugate_inv_elim.0" expl="postcondition">
  <transf name="rewrite" arg1="ang_inv_to_conjugate">
   <goal name="VC conjugate_inv_elim.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="2.44" steps="178"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_neg_conjugate" expl="VC for ang_exp_neg_conjugate">
 <transf name="split_vc" >
  <goal name="VC ang_exp_neg_conjugate.0" expl="postcondition">
  <transf name="rewrite" arg1="real_to_ang_inv">
   <goal name="VC ang_exp_neg_conjugate.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_inv_to_conjugate">
    <goal name="VC ang_exp_neg_conjugate.0.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="0.36" steps="178"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_exp_neg_conjugate.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="178"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_exp_neg_conjugate_rev" expl="VC for ang_exp_neg_conjugate_rev">
 <proof prover="6" obsolete="true"><result status="valid" time="1.60" steps="180"/></proof>
 </goal>
 <goal name="VC ang_mult_int_in" expl="VC for ang_mult_int_in">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_in.0" expl="postcondition">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="VC ang_mult_int_in.0.0" expl="postcondition">
   <transf name="rewrite" arg1="real_ang_mult">
    <goal name="VC ang_mult_int_in.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="int_to_ang_def">
     <goal name="VC ang_mult_int_in.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="real_to_ang_eq">
      <goal name="VC ang_mult_int_in.0.0.0.0.0" expl="apply premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.41"/></proof>
      </goal>
      <goal name="VC ang_mult_int_in.0.0.0.0.1" expl="apply premises">
      <proof prover="4" obsolete="true"><result status="valid" time="1.80"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_mult_int_in.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="178"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_mult_int_in.0.0.1" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.45"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_mult_int_in.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="178"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_out" expl="VC for ang_mult_int_out">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_out.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.94" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_cycles" expl="VC for int_to_ang_cycles">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_cycles.0" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.20" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.30" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_eq" expl="VC for int_to_ang_eq">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_eq.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.37" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_cycles_neg" expl="VC for int_to_ang_cycles_neg">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_cycles_neg.0" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_neg.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_neg.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_neg.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_cycles_gen" expl="VC for int_to_ang_cycles_gen">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_cycles_gen.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_gen.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.33" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_gen.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.31" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_gen.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_gen.4" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_cycles_zero" expl="VC for int_to_ang_cycles_zero">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_cycles_zero.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_zero.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.77" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_zero.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_zero.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="183"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_zero.4" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.97" steps="186"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_cycles_zero_mult" expl="VC for int_to_ang_cycles_zero_mult">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_cycles_zero_mult.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_zero_mult.1" expl="assertion">
  <transf name="replace" arg1="(power_ 2 n&#39;)" arg2="(0 + (power_ 2 (n&#39; - n) * power_ 2 n))">
   <goal name="VC int_to_ang_cycles_zero_mult.1.0" expl="assertion">
   <transf name="instantiate" arg1="int_to_ang_cycles" arg2="0,n,(power_ 2 (n&#39; - n))">
    <goal name="VC int_to_ang_cycles_zero_mult.1.0.0" expl="assertion">
    <transf name="rewrite" arg1="ang_mult_int_out">
     <goal name="VC int_to_ang_cycles_zero_mult.1.0.0.0" expl="assertion">
     <transf name="rewrite" arg1="Hinst">
      <goal name="VC int_to_ang_cycles_zero_mult.1.0.0.0.0" expl="assertion">
      <proof prover="1" obsolete="true"><result status="valid" time="0.49"/></proof>
      </goal>
      <goal name="VC int_to_ang_cycles_zero_mult.1.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="182"/></proof>
      </goal>
      <goal name="VC int_to_ang_cycles_zero_mult.1.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="2.38" steps="184"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_ang_cycles_zero_mult.1.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.30" steps="182"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_ang_cycles_zero_mult.1.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="2.27" steps="184"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_ang_cycles_zero_mult.2" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.57" steps="186"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_cycles_zero_mult_" expl="VC for int_to_ang_cycles_zero_mult_">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_cycles_zero_mult_.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.27" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_cycles_zero_mult_.1" expl="assertion">
  <transf name="rewrite" arg1="int_to_ang_cycles_zero_mult">
   <goal name="VC int_to_ang_cycles_zero_mult_.1.0" expl="assertion">
   <proof prover="6" obsolete="true"><result status="valid" time="1.90" steps="184"/></proof>
   </goal>
   <goal name="VC int_to_ang_cycles_zero_mult_.1.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="182"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_ang_cycles_zero_mult_.2" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.90" steps="186"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_up" expl="VC for int_to_ang_up">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_up.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_up.1" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_up.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.27" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_up.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_up.4" expl="postcondition">
  <transf name="rewrite" arg1="int_to_ang_def">
   <goal name="VC int_to_ang_up.4.0" expl="postcondition">
   <transf name="rewrite" arg1="int_to_ang_def">
    <goal name="VC int_to_ang_up.4.0.0" expl="postcondition">
    <transf name="apply" arg1="real_to_ang_eq">
     <goal name="VC int_to_ang_up.4.0.0.0" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.48"/></proof>
     </goal>
     <goal name="VC int_to_ang_up.4.0.0.1" expl="apply premises">
     <transf name="rewrite" arg1="power__sum">
      <goal name="VC int_to_ang_up.4.0.0.1.0" expl="apply premises">
      <transf name="rewrite" arg1="i_to_c_mult_rev">
       <goal name="VC int_to_ang_up.4.0.0.1.0.0" expl="apply premises">
       <transf name="rewrite" arg1="i_to_c_mult_rev">
        <goal name="VC int_to_ang_up.4.0.0.1.0.0.0" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="0.55"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_ang_up.4.0.0.1.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="180"/></proof>
      </goal>
      <goal name="VC int_to_ang_up.4.0.0.1.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="180"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_ang_up.4.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="180"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_ang_up.4.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="180"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_mod" expl="VC for int_to_ang_mod">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_mod.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.91" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_mod.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.83" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_mod.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.00" steps="182"/></proof>
  </goal>
  <goal name="VC int_to_ang_mod.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="180"/></proof>
  </goal>
  <goal name="VC int_to_ang_mod.4" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_equiv" expl="VC for int_to_ang_equiv">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_equiv.0" expl="postcondition">
  <transf name="instantiate" arg1="decomp" arg2="k2,(power 2 n1)">
   <goal name="VC int_to_ang_equiv.0.0" expl="postcondition">
   <transf name="rewrite" arg1="Hinst">
    <goal name="VC int_to_ang_equiv.0.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.44"/></proof>
    </goal>
    <goal name="VC int_to_ang_equiv.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="2.39" steps="184"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_red" expl="VC for int_to_ang_red">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_red.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="3.45" steps="184"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_bin_rev" expl="VC for int_to_ang_bin_rev">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_bin_rev.0" expl="postcondition">
  <transf name="rewrite" arg1="int_to_ang_mod">
   <goal name="VC int_to_ang_bin_rev.0.0" expl="postcondition">
   <transf name="apply" arg1="goal_comm">
    <goal name="VC int_to_ang_bin_rev.0.0.0" expl="apply premises">
    <transf name="rewrite" arg1="int_to_ang_mod">
     <goal name="VC int_to_ang_bin_rev.0.0.0.0" expl="apply premises">
     <transf name="rewrite" arg1="H">
      <goal name="VC int_to_ang_bin_rev.0.0.0.0.0" expl="apply premises">
      <proof prover="0" obsolete="true"><result status="valid" time="1.50"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_ang_bin_rev.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.37" steps="182"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_ang_bin_rev.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_bin_rev_" expl="VC for int_to_ang_bin_rev_">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_bin_rev_.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.57" steps="184"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_add_rev" expl="VC for int_to_ang_add_rev">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_add_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.55" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_ind_isum_plus_one" expl="VC for int_to_ang_ind_isum_plus_one">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_ind_isum_plus_one.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_ind_isum_plus_one_rev" expl="VC for int_to_ang_ind_isum_plus_one_rev">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_ind_isum_plus_one_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.97" steps="182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_ind_isum_right_extension" expl="VC for int_to_ang_ind_isum_right_extension">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_ind_isum_right_extension.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_ind_isum_right_extension_rev" expl="VC for int_to_ang_ind_isum_right_extension_rev">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_ind_isum_right_extension_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.55" steps="182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_int_to_ang_ind_isum_plus_one" expl="VC for minus_int_to_ang_ind_isum_plus_one">
 <transf name="split_vc" >
  <goal name="VC minus_int_to_ang_ind_isum_plus_one.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_int_to_ang_ind_isum_plus_one_rev" expl="VC for minus_int_to_ang_ind_isum_plus_one_rev">
 <transf name="split_vc" >
  <goal name="VC minus_int_to_ang_ind_isum_plus_one_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.92" steps="182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_int_to_ang_ind_isum_right_extension" expl="VC for minus_int_to_ang_ind_isum_right_extension">
 <transf name="split_vc" >
  <goal name="VC minus_int_to_ang_ind_isum_right_extension.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_int_to_ang_ind_isum_right_extension_rev" expl="VC for minus_int_to_ang_ind_isum_right_extension_rev">
 <transf name="split_vc" >
  <goal name="VC minus_int_to_ang_ind_isum_right_extension_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.55" steps="182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_simpl" expl="VC for int_to_ang_simpl">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_simpl.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.96" steps="182"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_add_eq" expl="VC for ang_add_eq">
 <transf name="split_vc" >
  <goal name="VC ang_add_eq.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_add_comm" expl="VC for ang_add_comm">
 <transf name="split_vc" >
  <goal name="VC ang_add_comm.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="176"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_add_eq_comm" expl="VC for ang_add_eq_comm">
 <transf name="split_vc" >
  <goal name="VC ang_add_eq_comm.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="181"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_zero" expl="VC for ang_mult_int_zero">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_zero.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="2.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_div" expl="VC for ang_div">
 <transf name="split_vc" >
  <goal name="VC ang_div.0" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="0.55"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_zero_add" expl="VC for ang_zero_add">
 <transf name="split_vc" >
  <goal name="VC ang_zero_add.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.90" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_rev" expl="VC for int_to_ang_rev">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_rev.0" expl="assertion">
  <proof prover="1" obsolete="true"><result status="valid" time="0.61"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev.2" expl="assertion">
  <transf name="replace" arg1="(int_to_ang 0 1)" arg2="(int_to_ang 0 n)">
   <goal name="VC int_to_ang_rev.2.0" expl="assertion">
   <transf name="apply" arg1="int_to_ang_equiv">
    <goal name="VC int_to_ang_rev.2.0.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="186"/></proof>
    </goal>
    <goal name="VC int_to_ang_rev.2.0.1" expl="apply premises">
    <transf name="instantiate" arg1="unicity_div_mod" arg2="(((- k) * l) * power_ 2 m),(power_ 2 n),(div ((- k) * l) 2),0">
     <goal name="VC int_to_ang_rev.2.0.1.0" expl="apply premises">
     <transf name="replace" arg1="(mod 0 (power_ 2 n))" arg2="0">
      <goal name="VC int_to_ang_rev.2.0.1.0.0" expl="apply premises">
      <transf name="split_all_full" >
       <goal name="VC int_to_ang_rev.2.0.1.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="Hinst">
        <goal name="VC int_to_ang_rev.2.0.1.0.0.0.0" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="186"/></proof>
        </goal>
        <goal name="VC int_to_ang_rev.2.0.1.0.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="1.68" steps="188"/></proof>
        </goal>
        <goal name="VC int_to_ang_rev.2.0.1.0.0.0.2" expl="rewrite premises">
        <transf name="instantiate" arg1="unicity_div_mod1" arg2="(((- k) * l) ),2,(div ((- k) * l) 2),0">
         <goal name="VC int_to_ang_rev.2.0.1.0.0.0.2.0" expl="rewrite premises">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC int_to_ang_rev.2.0.1.0.0.0.2.0.0" expl="rewrite premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.47"/></proof>
          </goal>
          <goal name="VC int_to_ang_rev.2.0.1.0.0.0.2.0.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="186"/></proof>
          </goal>
          <goal name="VC int_to_ang_rev.2.0.1.0.0.0.2.0.2" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="186"/></proof>
          </goal>
          <goal name="VC int_to_ang_rev.2.0.1.0.0.0.2.0.3" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="186"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_to_ang_rev.2.0.1.0.0.0.3" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="2.08" steps="188"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_ang_rev.2.0.1.0.1" expl="equality hypothesis">
      <proof prover="6" obsolete="true"><result status="valid" time="1.74" steps="189"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_ang_rev.2.0.2" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="186"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_ang_rev.2.1" expl="equality hypothesis">
   <proof prover="1" obsolete="true"><result status="valid" time="0.51"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_ang_rev.3" expl="assertion">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="188"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev.4" expl="assertion">
  <proof prover="4" obsolete="true"><result status="valid" time="1.49"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev.5" expl="assertion">
  <transf name="split_vc" >
   <goal name="VC int_to_ang_rev.5.0" expl="assertion">
   <transf name="replace" arg1="(int_to_ang (-1) 1)" arg2="(int_to_ang (power_ 2 m) n)">
    <goal name="VC int_to_ang_rev.5.0.0" expl="assertion">
    <transf name="apply" arg1="int_to_ang_equiv">
     <goal name="VC int_to_ang_rev.5.0.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="186"/></proof>
     </goal>
     <goal name="VC int_to_ang_rev.5.0.0.1" expl="apply premises">
     <transf name="instantiate" arg1="unicity_div_mod" arg2="(((- k) * l) * power_ 2 m),(power_ 2 n),(div ((- k) * l) 2),(power_ 2 m)">
      <goal name="VC int_to_ang_rev.5.0.0.1.0" expl="apply premises">
      <transf name="replace" arg1="(mod (((- k) * l) * power_ 2 m) (power_ 2 n))" arg2="(power_ 2m)">
       <goal name="VC int_to_ang_rev.5.0.0.1.0.0" expl="apply premises">
       <transf name="instantiate" arg1="unicity_div_mod" arg2="( power_ 2 m),(power_ 2 n),0,(power_ 2 m)">
        <goal name="VC int_to_ang_rev.5.0.0.1.0.0.0" expl="apply premises">
        <transf name="split_all_full" >
         <goal name="VC int_to_ang_rev.5.0.0.1.0.0.0.0" expl="apply premises">
         <transf name="apply" arg1="Hinst">
          <goal name="VC int_to_ang_rev.5.0.0.1.0.0.0.0.0" expl="apply premises">
          <proof prover="6" obsolete="true"><result status="valid" time="1.70" steps="188"/></proof>
          </goal>
          <goal name="VC int_to_ang_rev.5.0.0.1.0.0.0.0.1" expl="apply premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="186"/></proof>
          </goal>
          <goal name="VC int_to_ang_rev.5.0.0.1.0.0.0.0.2" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="0.47"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_ang_rev.5.0.0.1.0.1" expl="equality hypothesis">
       <proof prover="0" obsolete="true"><result status="valid" time="0.46"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_ang_rev.5.0.0.2" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="186"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_ang_rev.5.0.1" expl="equality hypothesis">
    <transf name="rewrite" arg1="int_to_ang_def">
     <goal name="VC int_to_ang_rev.5.0.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="int_to_ang_def">
      <goal name="VC int_to_ang_rev.5.0.1.0.0" expl="equality hypothesis">
      <transf name="replace" arg1="(i_to_c (power_ 2 m) /. i_to_c (power_ 2 n))" arg2="(c_one /. i_to_c (power_ 2 1))">
       <goal name="VC int_to_ang_rev.5.0.1.0.0.0" expl="equality hypothesis">
       <transf name="apply" arg1="real_to_ang_equiv">
        <goal name="VC int_to_ang_rev.5.0.1.0.0.0.0" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="0.51"/></proof>
        </goal>
        <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1" expl="apply premises">
        <transf name="exists" arg1="1">
         <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0">
         <transf name="replace" arg1="(i_to_c 1)" arg2="(i_to_c 2/. i_to_c (power_ 2 1))">
          <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.0">
          <transf name="replace" arg1="((i_to_c (- 1) /. i_to_c (power_ 2 1))
     +. (i_to_c 2 /. i_to_c (power_ 2 1)))" arg2="(i_to_c (-1+2)/.i_to_c(power_ 2 1))">
           <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.0.0">
           <proof prover="6" obsolete="true"><result status="valid" time="0.20" steps="186"/></proof>
           </goal>
           <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.0.1" expl="equality hypothesis">
           <transf name="assert" arg1="( i_to_c (power_ 2 1) &lt;&gt; c_zero)">
            <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.0.1.0" expl="asserted formula">
            <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="186"/></proof>
            </goal>
            <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.0.1.1" expl="equality hypothesis">
            <transf name="replace" arg1="(i_to_c ((- 1) + 2))" arg2="(i_to_c (-1) +. i_to_c 2)">
             <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.0.1.1.0" expl="equality hypothesis">
             <proof prover="6" obsolete="true"><result status="valid" time="2.32" steps="190"/></proof>
             </goal>
             <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.0.1.1.1" expl="equality hypothesis">
             <proof prover="6" obsolete="true"><result status="valid" time="2.17" steps="190"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_ang_rev.5.0.1.0.0.0.1.0.1" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="2.52" steps="188"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_to_ang_rev.5.0.1.0.0.1" expl="equality hypothesis">
       <transf name="rewrite" arg1="H2">
        <goal name="VC int_to_ang_rev.5.0.1.0.0.1.0" expl="equality hypothesis">
        <transf name="rewrite" arg1="power__sum">
         <goal name="VC int_to_ang_rev.5.0.1.0.0.1.0.0" expl="equality hypothesis">
         <transf name="rewrite" arg1="i_to_c_mult_rev">
          <goal name="VC int_to_ang_rev.5.0.1.0.0.1.0.0.0" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="2.76" steps="188"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_ang_rev.5.0.1.0.0.1.0.1" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="186"/></proof>
         </goal>
         <goal name="VC int_to_ang_rev.5.0.1.0.0.1.0.2" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="186"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_ang_rev.5.0.1.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="186"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_to_ang_rev.5.0.1.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="186"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_ang_rev.5.1" expl="assertion">
   <proof prover="2" obsolete="true"><result status="valid" time="2.36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_to_ang_rev.6" expl="assertion">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="190"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev.7" expl="assertion">
  <proof prover="0" obsolete="true"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev.8" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC int_to_ang_rev.8.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="190"/></proof>
   </goal>
   <goal name="VC int_to_ang_rev.8.1" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="193"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_rev_" expl="VC for int_to_ang_rev_">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_rev_.0" expl="assertion">
  <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev_.1" expl="assertion">
  <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev_.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev_.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev_.4" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="184"/></proof>
  </goal>
  <goal name="VC int_to_ang_rev_.5" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="186"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_add_zero_d" expl="VC for ang_add_zero_d">
 <transf name="split_vc" >
  <goal name="VC ang_add_zero_d.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.54" steps="180"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_distr_minus" expl="VC for real_to_ang_distr_minus">
 <transf name="split_vc" >
  <goal name="VC real_to_ang_distr_minus.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC real_to_ang_distr_minus.0.0" expl="postcondition">
   <transf name="rewrite" arg1="real_ang_mult">
    <goal name="VC real_to_ang_distr_minus.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="real_to_ang_add_rev">
     <goal name="VC real_to_ang_distr_minus.0.0.0.0" expl="postcondition">
     <transf name="apply" arg1="real_to_ang_eq">
      <goal name="VC real_to_ang_distr_minus.0.0.0.0.0" expl="apply premises">
      <proof prover="0" obsolete="true"><result status="valid" time="4.05"/></proof>
      </goal>
      <goal name="VC real_to_ang_distr_minus.0.0.0.0.1" expl="apply premises">
      <transf name="assert" arg1="(forall a b c. (a-. b) *. c = a*. c +. (-. b*.c))">
       <goal name="VC real_to_ang_distr_minus.0.0.0.0.1.0" expl="asserted formula">
       <proof prover="0" obsolete="true"><result status="valid" time="3.40"/></proof>
       </goal>
       <goal name="VC real_to_ang_distr_minus.0.0.0.0.1.1" expl="apply premises">
       <transf name="rewrite" arg1="h">
        <goal name="VC real_to_ang_distr_minus.0.0.0.0.1.1.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="6.33"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC real_to_ang_distr_minus.0.0.0.1" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="4.49"/></proof>
     </goal>
     <goal name="VC real_to_ang_distr_minus.0.0.0.2" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="5.51"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_distr_minus.0.0.1" expl="rewrite premises">
    <proof prover="0" obsolete="true"><result status="valid" time="5.56"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_exp_pos" expl="VC for ang_mult_int_exp_pos">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_exp_pos.0" expl="assertion">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="180"/></proof>
  </goal>
  <goal name="VC ang_mult_int_exp_pos.1" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="181"/></proof>
  </goal>
  <goal name="VC ang_mult_int_exp_pos.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="181"/></proof>
  </goal>
  <goal name="VC ang_mult_int_exp_pos.3" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC ang_mult_int_exp_pos.3.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC ang_mult_int_exp_pos.3.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="VC ang_mult_int_exp_pos.3.1.0" expl="postcondition">
    <transf name="eliminate_let" >
     <goal name="VC ang_mult_int_exp_pos.3.1.0.0" expl="postcondition">
     <transf name="replace" arg1="( cpower (ang_exp o) i)" arg2="( cpower (ang_exp o) (i-1+1))">
      <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cpower_plus_one">
       <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0" expl="postcondition">
       <transf name="replace" arg1="(cpower (ang_exp o) (i - 1))" arg2="(ang_exp (ang_mult_int o (i - 1)))">
        <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="ang_exp_add_rev">
         <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0" expl="postcondition">
         <transf name="apply" arg1="set_ang_exp_eq">
          <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="eliminate_definition" >
           <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="split_all_full" >
            <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="ang_mult_int_def1">
             <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="rewrite" arg1="ang_mult_int_def1">
              <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="1" obsolete="true"><result status="valid" time="0.70"/></proof>
              </goal>
              <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="200"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
             <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="200"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.0.1" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="182"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_mult_int_exp_pos.3.1.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="184"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_mult_int_exp_pos.3.1.0.0.1" expl="equality hypothesis">
      <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="182"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_exp" expl="VC for ang_mult_int_exp">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_exp.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="178"/></proof>
  </goal>
  <goal name="VC ang_mult_int_exp.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.14" steps="178"/></proof>
  </goal>
  <goal name="VC ang_mult_int_exp.2" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_mult_int_exp.2.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
    <goal name="VC ang_mult_int_exp.2.0.0" expl="postcondition">
    <transf name="rewrite" arg1="real_to_ang_value">
     <goal name="VC ang_mult_int_exp.2.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="ang_exp_def">
      <goal name="VC ang_mult_int_exp.2.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cpower_to_exp">
       <goal name="VC ang_mult_int_exp.2.0.0.0.0.0" expl="postcondition">
       <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="194"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_mult_int_exp.2.0.0.1" expl="rewrite premises">
     <proof prover="1" obsolete="true"><result status="valid" time="0.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_exp_rev" expl="VC for ang_mult_int_exp_rev">
 <proof prover="6" obsolete="true"><result status="valid" time="2.18" steps="178"/></proof>
 </goal>
 <goal name="VC cpower_ang_exp_real" expl="VC for cpower_ang_exp_real">
 <transf name="split_vc" >
  <goal name="VC cpower_ang_exp_real.0" expl="postcondition">
  <transf name="rewrite" arg1="ang_mult_int_exp_rev">
   <goal name="VC cpower_ang_exp_real.0.0" expl="postcondition">
   <transf name="apply" arg1="set_ang_exp_eq">
    <goal name="VC cpower_ang_exp_real.0.0.0" expl="apply premises">
    <transf name="rewrite" arg1="real_ang_mult">
     <goal name="VC cpower_ang_exp_real.0.0.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="178"/></proof>
     </goal>
     <goal name="VC cpower_ang_exp_real.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="178"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_add" expl="VC for ang_mult_int_add">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_add.0" expl="postcondition">
  <transf name="assert" arg1="(ang_exp (ang_mult_int o (i + i&#39;)) = ang_exp (ang_add (ang_mult_int o i) (ang_mult_int o i&#39;)))">
   <goal name="VC ang_mult_int_add.0.0" expl="asserted formula">
   <transf name="rewrite" arg1="ang_mult_int_exp">
    <goal name="VC ang_mult_int_add.0.0.0" expl="asserted formula">
    <transf name="rewrite" arg1="ang_exp_add">
     <goal name="VC ang_mult_int_add.0.0.0.0" expl="asserted formula">
     <transf name="rewrite" arg1="cpower_sum">
      <goal name="VC ang_mult_int_add.0.0.0.0.0" expl="asserted formula">
      <transf name="apply" arg1="mult_eq_t">
       <goal name="VC ang_mult_int_add.0.0.0.0.0.0" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.08" steps="178"/></proof>
       </goal>
       <goal name="VC ang_mult_int_add.0.0.0.0.0.1" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.25" steps="178"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_mult_int_add.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="2.47" steps="180"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_mult_int_add.0.1" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="2.52" steps="180"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_plus_one" expl="VC for ang_mult_int_plus_one">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_plus_one.0" expl="postcondition">
  <transf name="case" arg1="(0&lt;=i)">
   <goal name="VC ang_mult_int_plus_one.0.0" expl="true case (postcondition)">
   <transf name="apply" arg1="goal_comm">
    <goal name="VC ang_mult_int_plus_one.0.0.0" expl="apply premises">
    <transf name="rewrite" arg1="ang_mult_int_plus_one_pos">
     <goal name="VC ang_mult_int_plus_one.0.0.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="178"/></proof>
     </goal>
     <goal name="VC ang_mult_int_plus_one.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.15" steps="178"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_mult_int_plus_one.0.1" expl="false case (postcondition)">
   <proof prover="4" obsolete="true"><result status="valid" time="7.89"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_plus_one_rev" expl="VC for ang_mult_int_plus_one_rev">
 <proof prover="6" obsolete="true"><result status="valid" time="3.53" steps="178"/></proof>
 </goal>
 <goal name="VC ang_mult_int_double" expl="VC for ang_mult_int_double">
 <proof prover="6" obsolete="true"><result status="valid" time="3.19" steps="178"/></proof>
 </goal>
 <goal name="VC ang_mult_int_inv_one" expl="VC for ang_mult_int_inv_one">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_inv_one.0" expl="postcondition">
  <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
   <goal name="VC ang_mult_int_inv_one.0.0" expl="postcondition">
   <transf name="replace" arg1="((ang_meas o *. i_to_c (- 1)))" arg2="(-.ang_meas o )">
    <goal name="VC ang_mult_int_inv_one.0.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
    </goal>
    <goal name="VC ang_mult_int_inv_one.0.0.1" expl="equality hypothesis">
    <proof prover="0" obsolete="true"><result status="valid" time="0.52"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_one" expl="VC for ang_mult_int_one">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_one.0" expl="postcondition">
  <transf name="apply" arg1="get_equal_angle_exp">
   <goal name="VC ang_mult_int_one.0.0" expl="apply premises">
   <transf name="rewrite" arg1="ang_mult_int_exp">
    <goal name="VC ang_mult_int_one.0.0.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="1.51" steps="180"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_inv_rev" expl="VC for ang_mult_int_inv_rev">
 <proof prover="6" obsolete="true"><result status="valid" time="1.51" steps="178"/></proof>
 </goal>
 <goal name="VC ang_mult_int_comp" expl="VC for ang_mult_int_comp">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_comp.0" expl="postcondition">
  <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
   <goal name="VC ang_mult_int_comp.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
    <goal name="VC ang_mult_int_comp.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
     <goal name="VC ang_mult_int_comp.0.0.0.0" expl="postcondition">
     <proof prover="4" obsolete="true"><result status="valid" time="1.70"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_comp_rev" expl="VC for ang_mult_int_comp_rev">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_comp_rev.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.91" steps="178"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ang_mult_int_pos" expl="VC for add_ang_mult_int_pos">
 <transf name="split_vc" >
  <goal name="VC add_ang_mult_int_pos.0" expl="assertion">
  <proof prover="6" obsolete="true"><result status="valid" time="0.17" steps="180"/></proof>
  </goal>
  <goal name="VC add_ang_mult_int_pos.1" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.18" steps="181"/></proof>
  </goal>
  <goal name="VC add_ang_mult_int_pos.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="181"/></proof>
  </goal>
  <goal name="VC add_ang_mult_int_pos.3" expl="postcondition">
  <transf name="destruct" arg1="H">
   <goal name="VC add_ang_mult_int_pos.3.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.48"/></proof>
   </goal>
   <goal name="VC add_ang_mult_int_pos.3.1" expl="postcondition">
   <transf name="assert" arg1="(forall o1 o2 o3 o4. ang_add(ang_add o1 o2) (ang_add o3 o4) = ang_add(ang_add o1 o3) (ang_add o2 o4))">
    <goal name="VC add_ang_mult_int_pos.3.1.0" expl="asserted formula">
    <transf name="split_vc" >
     <goal name="VC add_ang_mult_int_pos.3.1.0.0" expl="asserted formula">
     <proof prover="6" obsolete="true"><result status="valid" time="0.16" steps="182"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC add_ang_mult_int_pos.3.1.1" expl="postcondition">
    <transf name="instantiate" arg1="ang_mult_int_plus_one_pos" arg2="o,i">
     <goal name="VC add_ang_mult_int_pos.3.1.1.0" expl="postcondition">
     <transf name="instantiate" arg1="ang_mult_int_plus_one_pos" arg2="o&#39;,i">
      <goal name="VC add_ang_mult_int_pos.3.1.1.0.0" expl="postcondition">
      <transf name="rewrite" arg1="Hinst1">
       <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="Hinst">
        <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="h">
         <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.0.0.0" expl="postcondition">
         <transf name="apply" arg1="goal_comm">
          <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="ang_mult_int_plus_one_pos">
           <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.0.0.0.0.0" expl="apply premises">
           <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="186"/></proof>
           </goal>
           <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.0.0.0.0.1" expl="rewrite premises">
           <proof prover="6" obsolete="true"><result status="valid" time="0.27" steps="186"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="186"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC add_ang_mult_int_pos.3.1.1.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.20" steps="186"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_ang_mult_int" expl="VC for add_ang_mult_int">
 <transf name="split_vc" >
  <goal name="VC add_ang_mult_int.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.20" steps="178"/></proof>
  </goal>
  <goal name="VC add_ang_mult_int.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="178"/></proof>
  </goal>
  <goal name="VC add_ang_mult_int.2" expl="postcondition">
  <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
   <goal name="VC add_ang_mult_int.2.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
    <goal name="VC add_ang_mult_int.2.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
     <goal name="VC add_ang_mult_int.2.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="real_to_ang_add_rev">
      <goal name="VC add_ang_mult_int.2.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="get_ang_exp_eq">
       <goal name="VC add_ang_mult_int.2.0.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="real_to_ang_add">
        <goal name="VC add_ang_mult_int.2.0.0.0.0.0.0" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.53"/></proof>
        </goal>
        <goal name="VC add_ang_mult_int.2.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="2.95" steps="180"/></proof>
        </goal>
        <goal name="VC add_ang_mult_int.2.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="3.65" steps="180"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC add_ang_mult_int.2.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="2.92" steps="180"/></proof>
      </goal>
      <goal name="VC add_ang_mult_int.2.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.96" steps="180"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_substr_inv" expl="VC for ang_substr_inv">
 <transf name="split_vc" >
  <goal name="VC ang_substr_inv.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC ang_substr_inv.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_substr_def">
    <goal name="VC ang_substr_inv.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
     <goal name="VC ang_substr_inv.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Real_To_Ang_inv">
      <goal name="VC ang_substr_inv.0.0.0.0.0" expl="postcondition">
      <transf name="replace" arg1="(-. (ang_meas o&#39; *. i_to_c (- 1)))" arg2="(ang_meas o&#39;)">
       <goal name="VC ang_substr_inv.0.0.0.0.0.0" expl="postcondition">
       <proof prover="0" obsolete="true"><result status="valid" time="3.77"/></proof>
       </goal>
       <goal name="VC ang_substr_inv.0.0.0.0.0.1" expl="equality hypothesis">
       <proof prover="4" obsolete="true"><result status="valid" time="4.11"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_substr_inv.0.0.0.0.1" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="3.12"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_mult_int_distr" expl="VC for ang_mult_int_distr">
 <proof prover="6" obsolete="true"><result status="valid" time="1.53" steps="178"/></proof>
 </goal>
 <goal name="VC ang_mult_int_distr_rev" expl="VC for ang_mult_int_distr_rev">
 <transf name="split_vc" >
  <goal name="VC ang_mult_int_distr_rev.0" expl="postcondition">
  <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
   <goal name="VC ang_mult_int_distr_rev.0.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
    <goal name="VC ang_mult_int_distr_rev.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ang_mult_int_to_real_to_ang">
     <goal name="VC ang_mult_int_distr_rev.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="real_to_ang_add_rev">
      <goal name="VC ang_mult_int_distr_rev.0.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="i_to_c_add_rev">
       <goal name="VC ang_mult_int_distr_rev.0.0.0.0.0.0" expl="postcondition">
       <proof prover="6" obsolete="true"><result status="valid" time="3.21" steps="178"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_mult_int_distr_rev.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.59" steps="178"/></proof>
      </goal>
      <goal name="VC ang_mult_int_distr_rev.0.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.59" steps="178"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_add_assoc" expl="VC for ang_add_assoc">
 <proof prover="6" obsolete="true"><result status="valid" time="0.19" steps="176"/></proof>
 </goal>
 <goal name="VC ang_add_assoc_rev" expl="VC for ang_add_assoc_rev">
 <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="176"/></proof>
 </goal>
 <goal name="VC ang_add_own_inv" expl="VC for ang_add_own_inv">
 <proof prover="4" obsolete="true"><result status="valid" time="0.65"/></proof>
 </goal>
 <goal name="VC ang_exp_inv" expl="VC for ang_exp_inv">
 <transf name="split_vc" >
  <goal name="VC ang_exp_inv.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.90" steps="178"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Ang_sum">
 <goal name="VC ang_sum" expl="VC for ang_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="188"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sumto_int_iterate" expl="VC for ang_sumto_int_iterate" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sumto_int_iterate.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="2.03" steps="190"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_plus_one" expl="VC for ang_sum_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_plus_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="188"/></proof>
  </goal>
  <goal name="VC ang_sum_plus_one.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="189"/></proof>
  </goal>
  <goal name="VC ang_sum_plus_one.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ang_sumto_int_iterate">
   <goal name="VC ang_sum_plus_one.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sumto_int_iterate">
    <goal name="VC ang_sum_plus_one.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC ang_sum_plus_one.2.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_plus_one.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.33" steps="190"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_sum_plus_one.2.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_cardone" expl="VC for ang_sum_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_cardone.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="188"/></proof>
  </goal>
  <goal name="VC ang_sum_cardone.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.68"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="6.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_cardone_p" expl="VC for ang_sum_cardone_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_cardone_p.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_cardone_p.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="1.83" steps="194"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_neutral" expl="VC for ang_sum_neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_neutral.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_neutral.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_neutral.2" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_neutral.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_neutral.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="1.82" steps="201"/></proof>
  </goal>
  <goal name="VC ang_sum_neutral.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_def_plus_one_com" expl="VC for ang_sum_def_plus_one_com" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_def_plus_one_com.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="188"/></proof>
  </goal>
  <goal name="VC ang_sum_def_plus_one_com.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="189"/></proof>
  </goal>
  <goal name="VC ang_sum_def_plus_one_com.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="1.82" steps="192"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_right_extension" expl="VC for ang_sum_right_extension" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_right_extension.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_right_extension.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_right_extension.2" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_right_extension.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_right_extension.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ang_sum_right_extension.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_plus_one">
    <goal name="VC ang_sum_right_extension.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ang_add_eq">
     <goal name="VC ang_sum_right_extension.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.66"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     </goal>
     <goal name="VC ang_sum_right_extension.4.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.65"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_right_extension.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="190"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_sum_right_extension.4.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_transitivity" expl="VC for ang_sum_transitivity" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_transitivity.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.97"/></proof>
  </goal>
  <goal name="VC ang_sum_transitivity.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_transitivity.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ang_sumto_int_iterate">
   <goal name="VC ang_sum_transitivity.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sumto_int_iterate">
    <goal name="VC ang_sum_transitivity.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC ang_sum_transitivity.2.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ang_sum_transitivity.2.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="1.77" steps="194"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_transitivity.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="192"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_sum_transitivity.2.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_eq" expl="VC for ang_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_eq.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.61"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC ang_sum_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_eq.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_int_to_ang" expl="VC for ang_sum_int_to_ang" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_int_to_ang.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC vang_sum_eq" expl="VC for vang_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC vang_sum_eq.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC vang_sum_scal_eq" expl="VC for vang_sum_scal_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC vang_sum_scal_eq.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_inv" expl="VC for ang_sum_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_inv.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_inv.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="191"/></proof>
  </goal>
  <goal name="VC ang_sum_inv.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="193"/></proof>
  </goal>
  <goal name="VC ang_sum_inv.3" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="197"/></proof>
  </goal>
  <goal name="VC ang_sum_inv.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ang_sum_inv.4.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.68"/></proof>
   </goal>
   <goal name="VC ang_sum_inv.4.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC ang_sum_inv.4.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="5.79"/></proof>
    </goal>
    <goal name="VC ang_sum_inv.4.1.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="VC ang_sum_inv.4.1.1.0" expl="postcondition" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC ang_sum_inv.4.1.1.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ang_sum_inv.4.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H3">
        <goal name="VC ang_sum_inv.4.1.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H2">
         <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="ang_inv_add">
          <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="H">
            <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="apply" proved="true" arg1="ang_add_eq">
             <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.25" steps="196"/></proof>
             </goal>
             <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="ang_sum_eq">
              <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.24" steps="196"/></proof>
              </goal>
              <goal name="VC ang_sum_inv.4.1.1.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.80"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_plus_one_p" expl="VC for ang_sum_plus_one_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_plus_one_p.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC ang_sum_plus_one_p.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC ang_sum_plus_one_p.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_plus_one">
     <goal name="VC ang_sum_plus_one_p.0.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ang_add_eq">
      <goal name="VC ang_sum_plus_one_p.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
      </goal>
      <goal name="VC ang_sum_plus_one_p.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC ang_sum_plus_one_p.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ang_sum_eq">
        <goal name="VC ang_sum_plus_one_p.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
        </goal>
        <goal name="VC ang_sum_plus_one_p.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.70"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_plus_one_p.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="194"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC vang_sum_plus_one_p" expl="VC for vang_sum_plus_one_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC vang_sum_plus_one_p.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC vang_sum_plus_one_p.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_plus_one">
    <goal name="VC vang_sum_plus_one_p.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC vang_sum_plus_one_p.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC vang_sum_plus_one_p.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ang_exp_add">
        <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mult_eq_t">
         <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.30" steps="194"/></proof>
         </goal>
         <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(ang_sum g (i + 1) j)" arg2="(ang_sum f (i + 1) j)">
          <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.29" steps="194"/></proof>
          </goal>
          <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="ang_sum_eq">
           <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.30" steps="194"/></proof>
           </goal>
           <goal name="VC vang_sum_plus_one_p.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.71"/></proof>
           <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC vang_sum_plus_one_p.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC vang_sum_plus_one_rev" expl="VC for vang_sum_plus_one_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC vang_sum_plus_one_rev.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ang_sum_plus_one">
   <goal name="VC vang_sum_plus_one_rev.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_exp_add">
    <goal name="VC vang_sum_plus_one_rev.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq_t">
     <goal name="VC vang_sum_plus_one_rev.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
     </goal>
     <goal name="VC vang_sum_plus_one_rev.0.0.0.1" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC vang_sum_plus_one_rev.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(ang_sum g (i + 1) j)" arg2="(ang_sum f (i + 1) m)">
       <goal name="VC vang_sum_plus_one_rev.0.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="194"/></proof>
       </goal>
       <goal name="VC vang_sum_plus_one_rev.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC vang_sum_plus_one_rev.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ang_sum_eq">
         <goal name="VC vang_sum_plus_one_rev.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="194"/></proof>
         </goal>
         <goal name="VC vang_sum_plus_one_rev.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.67"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC vang_sum_plus_one_rev.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_right_extension_p" expl="VC for ang_sum_right_extension_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_right_extension_p.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC ang_sum_right_extension_p.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_right_extension">
    <goal name="VC ang_sum_right_extension_p.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="ang_add_eq">
     <goal name="VC ang_sum_right_extension_p.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC ang_sum_right_extension_p.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC ang_sum_right_extension_p.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ang_sum_eq">
        <goal name="VC ang_sum_right_extension_p.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="194"/></proof>
        </goal>
        <goal name="VC ang_sum_right_extension_p.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.67"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_right_extension_p.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_right_extension_p.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="194"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC vang_sum_right_extension_p" expl="VC for vang_sum_right_extension_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC vang_sum_right_extension_p.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC vang_sum_right_extension_p.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_right_extension">
    <goal name="VC vang_sum_right_extension_p.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_exp_add">
     <goal name="VC vang_sum_right_extension_p.0.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="mult_eq_t">
      <goal name="VC vang_sum_right_extension_p.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC vang_sum_right_extension_p.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC vang_sum_right_extension_p.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ang_sum g i (j-1))" arg2="(ang_sum f i (j - 1) )">
         <goal name="VC vang_sum_right_extension_p.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC vang_sum_right_extension_p.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ang_sum_eq">
          <goal name="VC vang_sum_right_extension_p.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
          </goal>
          <goal name="VC vang_sum_right_extension_p.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.67"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC vang_sum_right_extension_p.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC vang_sum_right_extension_p.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC vang_sum_right_extension_rev" expl="VC for vang_sum_right_extension_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC vang_sum_right_extension_rev.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="j" arg2="(m+1)">
   <goal name="VC vang_sum_right_extension_rev.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_right_extension">
    <goal name="VC vang_sum_right_extension_rev.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_exp_add">
     <goal name="VC vang_sum_right_extension_rev.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mult_eq_t">
      <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="((m + 1) - 1)" arg2="m">
        <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ang_sum g i m)" arg2="(ang_sum f i m)">
         <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
         </goal>
         <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ang_sum_eq">
          <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
          </goal>
          <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.69"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC vang_sum_right_extension_rev.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC vang_sum_right_extension_rev.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="194"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC vang_sum_right_extension_rev.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC vang_sum_right_extension_rev.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="194"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_cardzero" expl="VC for ang_sum_cardzero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_cardzero.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="6.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_eq_gen" expl="VC for ang_sum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_eq_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_eq_gen.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="1.87" steps="199"/></proof>
  </goal>
  <goal name="VC ang_sum_eq_gen.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_sum_eq_vl" expl="VC for ang_sum_sum_eq_vl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_sum_eq_vl.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ang_sum_eq_gen">
   <goal name="VC ang_sum_sum_eq_vl.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
   </goal>
   <goal name="VC ang_sum_sum_eq_vl.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
   </goal>
   <goal name="VC ang_sum_sum_eq_vl.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
   </goal>
   <goal name="VC ang_sum_sum_eq_vl.0.3" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC ang_sum_sum_eq_vl.0.3.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ang_sum_sum_eq_vl.0.3.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ang_sum_eq_gen">
      <goal name="VC ang_sum_sum_eq_vl.0.3.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="200"/></proof>
      </goal>
      <goal name="VC ang_sum_sum_eq_vl.0.3.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.26" steps="200"/></proof>
      </goal>
      <goal name="VC ang_sum_sum_eq_vl.0.3.0.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="200"/></proof>
      </goal>
      <goal name="VC ang_sum_sum_eq_vl.0.3.0.0.3" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.77"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_minus" expl="VC for ang_sum_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_minus.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.6" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ang_sum_minus.6.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
   </goal>
   <goal name="VC ang_sum_minus.6.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_sum_minus.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="196"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.9" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ang_sum_minus.9.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="198"/></proof>
   </goal>
   <goal name="VC ang_sum_minus.9.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="198"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_sum_minus.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="198"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="198"/></proof>
  </goal>
  <goal name="VC ang_sum_minus.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ang_sum_minus.12.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.07"/></proof>
   </goal>
   <goal name="VC ang_sum_minus.12.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ang_sum_minus.12.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
     <goal name="VC ang_sum_minus.12.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC ang_sum_minus.12.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC ang_sum_minus.12.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(- ((f @ i) + ind_isum f (i + 1) j))" arg2="((- (f @ i)) + -( ind_isum f (i + 1) j))">
        <goal name="VC ang_sum_minus.12.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="int_to_ang_add_rev">
         <goal name="VC ang_sum_minus.12.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC ang_sum_minus.12.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="200"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_sum_minus.12.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="200"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_minus.12.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="200"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC multiple_control_as_ang_sum" expl="VC for multiple_control_as_ang_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC multiple_control_as_ang_sum.0" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC multiple_control_as_ang_sum.0.0" expl="VC for multiple_control_as_ang_sum" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC multiple_control_as_ang_sum.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.72"/></proof>
    </goal>
    <goal name="VC multiple_control_as_ang_sum.0.0.1" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_iproduct (getbv x) 0 n)" arg2="0">
     <goal name="VC multiple_control_as_ang_sum.0.0.1.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="1.99" steps="198"/></proof>
     </goal>
     <goal name="VC multiple_control_as_ang_sum.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.72"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC multiple_control_as_ang_sum_rev" expl="VC for multiple_control_as_ang_sum_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC multiple_control_as_ang_sum_rev.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_map" expl="VC for ang_sum_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_map.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_map.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.98"/></proof>
  </goal>
  <goal name="VC ang_sum_map.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="193"/></proof>
  </goal>
  <goal name="VC ang_sum_map.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ang_sum_map.3.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ang_sum_map.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_def">
     <goal name="VC ang_sum_map.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ang_sum_def">
      <goal name="VC ang_sum_map.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC ang_sum_map.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.31" steps="204"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_map.3.0.0.1" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="(cardinal (to_fset k l) = cardinal (to_fset i j) )">
      <goal name="VC ang_sum_map.3.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="1"><result status="valid" time="0.94"/></proof>
      </goal>
      <goal name="VC ang_sum_map.3.0.0.1.1" expl="rewrite premises" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;cardinal (to_fset k l))">
       <goal name="VC ang_sum_map.3.0.0.1.1.0" expl="asserted formula" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="1"><result status="valid" time="0.96"/></proof>
       </goal>
       <goal name="VC ang_sum_map.3.0.0.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.84"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_break" expl="VC for ang_sum_break" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_break.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="196"/></proof>
  </goal>
  <goal name="VC ang_sum_break.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="196"/></proof>
  </goal>
  <goal name="VC ang_sum_break.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_break_zero_l" expl="VC for ang_sum_break_zero_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_break_zero_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_break_zero_l.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_break_zero_lg" expl="VC for ang_sum_break_zero_lg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_break_zero_lg.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_break_zero_lg.1" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ang_sum f y j)" arg2="(ang_sum g y j)">
   <goal name="VC ang_sum_break_zero_lg.1.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ang_sum_break_zero_l">
    <goal name="VC ang_sum_break_zero_lg.1.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="192"/></proof>
    </goal>
    <goal name="VC ang_sum_break_zero_lg.1.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ang_sum_break_zero_lg.1.0.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(g k)" arg2="(f k)">
      <goal name="VC ang_sum_break_zero_lg.1.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.64"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
      <goal name="VC ang_sum_break_zero_lg.1.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="0.65"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_sum_break_zero_lg.1.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ang_sum_eq">
    <goal name="VC ang_sum_break_zero_lg.1.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="192"/></proof>
    </goal>
    <goal name="VC ang_sum_break_zero_lg.1.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ang_sum_break_zero_lg.1.1.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(g k)" arg2="(f k)">
      <goal name="VC ang_sum_break_zero_lg.1.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="196"/></proof>
      </goal>
      <goal name="VC ang_sum_break_zero_lg.1.1.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="0.79"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_break_zero_lg_params" expl="VC for ang_sum_break_zero_lg_params" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_break_zero_lg_params.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ang_sum_break_zero_l" arg2="(fun (k:int) -&gt; (((g @ x) @ z) @ a) @ k),i,j,a">
   <goal name="VC ang_sum_break_zero_lg_params.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ang_sum (fun (k:int) -&gt; (((g @ x) @ z) @ a) @ k) i j)" arg2="(ang_sum (fun (k:int) -&gt; (((g @ x) @ z) @ a) @ k) a j)">
    <goal name="VC ang_sum_break_zero_lg_params.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ang_sum_eq">
     <goal name="VC ang_sum_break_zero_lg_params.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="198"/></proof>
     </goal>
     <goal name="VC ang_sum_break_zero_lg_params.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="2.04" steps="205"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_break_zero_lg_params.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.92"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_break_zero_l_params" expl="VC for ang_sum_break_zero_l_params" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_break_zero_l_params.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ang_sum ((f @ x) @ y) l j)" arg2="(ang_sum ((f @ x) @ y) i j)">
   <goal name="VC ang_sum_break_zero_l_params.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC ang_sum_break_zero_l_params.0.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_break_param" expl="VC for ang_sum_break_param" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_break_param.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="1.87" steps="194"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_neutral_param_r" expl="VC for ang_sum_neutral_param_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_neutral_param_r.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_neutral_param_l" expl="VC for ang_sum_neutral_param_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_neutral_param_l.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.83"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_transl" expl="VC for ang_sum_transl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_transl.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_transl.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_transl.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_transl.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_transl.4" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_transl.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_transl.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ang_sum_transl.6.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC ang_sum_transl.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ang_sum_transl.6.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC ang_sum_transl.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC ang_sum_transl.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC ang_sum_transl.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ang_sum_transl.6.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ang_add_eq">
         <goal name="VC ang_sum_transl.6.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.28" steps="196"/></proof>
         </goal>
         <goal name="VC ang_sum_transl.6.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ang_sum_eq_gen">
          <goal name="VC ang_sum_transl.6.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.29" steps="196"/></proof>
          </goal>
          <goal name="VC ang_sum_transl.6.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="196"/></proof>
          </goal>
          <goal name="VC ang_sum_transl.6.1.0.0.0.0.0.1.2" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="196"/></proof>
          </goal>
          <goal name="VC ang_sum_transl.6.1.0.0.0.0.0.1.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ang_sum_transl.6.1.0.0.0.0.0.1.3.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.13"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_transl_one" expl="VC for ang_sum_transl_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_transl_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="188"/></proof>
  </goal>
  <goal name="VC ang_sum_transl_one.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC ang_sum_transl_one.1.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ang_sum_eq_gen">
    <goal name="VC ang_sum_transl_one.1.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.42" steps="190"/></proof>
    </goal>
    <goal name="VC ang_sum_transl_one.1.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.62" steps="190"/></proof>
    </goal>
    <goal name="VC ang_sum_transl_one.1.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.39" steps="190"/></proof>
    </goal>
    <goal name="VC ang_sum_transl_one.1.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.21"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_to_ind_isum" expl="VC for ang_sum_to_ind_isum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_to_ind_isum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_to_ind_isum.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.47" steps="192"/></proof>
  </goal>
  <goal name="VC ang_sum_to_ind_isum.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.48" steps="194"/></proof>
  </goal>
  <goal name="VC ang_sum_to_ind_isum.3" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.42" steps="196"/></proof>
  </goal>
  <goal name="VC ang_sum_to_ind_isum.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="196"/></proof>
  </goal>
  <goal name="VC ang_sum_to_ind_isum.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="196"/></proof>
  </goal>
  <goal name="VC ang_sum_to_ind_isum.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ang_sum_to_ind_isum.6.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(j = i+1)">
    <goal name="VC ang_sum_to_ind_isum.6.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="2"><result status="valid" time="1.48"/></proof>
    </goal>
    <goal name="VC ang_sum_to_ind_isum.6.0.1" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_plus_one">
     <goal name="VC ang_sum_to_ind_isum.6.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ang_sum_to_ind_isum.6.0.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="VC ang_sum_to_ind_isum.6.0.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC ang_sum_to_ind_isum.6.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ang_sum_to_ind_isum.6.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="6"><result status="valid" time="0.46" steps="192"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_to_ind_isum.6.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.41" steps="192"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_sum_to_ind_isum.6.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(j = i+1)">
    <goal name="VC ang_sum_to_ind_isum.6.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="1.38"/></proof>
    </goal>
    <goal name="VC ang_sum_to_ind_isum.6.1.1" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_plus_one">
     <goal name="VC ang_sum_to_ind_isum.6.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ang_sum_to_ind_isum.6.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="VC ang_sum_to_ind_isum.6.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC ang_sum_to_ind_isum.6.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ang_sum_to_ind_isum.6.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="6"><result status="valid" time="3.29" steps="200"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_to_ind_isum.6.1.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.39" steps="198"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_to_d_sum" expl="VC for ind_isum_to_d_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_to_d_sum.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ang_sum_to_ind_isum">
   <goal name="VC ind_isum_to_d_sum.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.46" steps="190"/></proof>
   </goal>
   <goal name="VC ind_isum_to_d_sum.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="190"/></proof>
   </goal>
   <goal name="VC ind_isum_to_d_sum.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_int_decomp" expl="VC for ang_sum_int_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_int_decomp.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ang_sum_to_ind_isum" arg2="(fun (x:int) -&gt; (((bvx @ x) * power_ 2 ((n - x) - 1)) * k) ),n,0,n">
   <goal name="VC ang_sum_int_decomp.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bin_to_int_def">
    <goal name="VC ang_sum_int_decomp.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
     <goal name="VC ang_sum_int_decomp.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ang_sum  (fun (x:int) -&gt; int_to_ang (((bvx @ x) * power_ 2 ((n - x) - 1)) * k) n) 0 n)" arg2="(ang_sum  (fun (k1:int) -&gt;
    int_to_ang
    ((fun (x:int) -&gt; ((bvx @ x) * power_ 2 ((n - x) - 1)) * k) @ k1) n)
  0 n)">
      <goal name="VC ang_sum_int_decomp.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="int_to_ang_eq">
        <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(length (make_bv bvx n))" arg2="n">
         <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_scal_rev_right">
          <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_isum_eq">
           <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="mult_eq">
              <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="mult_eq">
               <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.33" steps="196"/></proof>
                </goal>
                <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="0.74"/></proof>
                </goal>
                <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.25" steps="196"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="0.80"/></proof>
               <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.29" steps="196"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.32" steps="192"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.30" steps="192"/></proof>
          </goal>
          <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.86"/></proof>
          </goal>
          <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_sum_int_decomp.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_sum_int_decomp.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
       </goal>
       <goal name="VC ang_sum_int_decomp.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ang_sum_int_decomp.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ang_sum_eq">
       <goal name="VC ang_sum_int_decomp.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="192"/></proof>
       </goal>
       <goal name="VC ang_sum_int_decomp.0.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ang_sum_int_decomp.0.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_int_decomp.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
    </goal>
    <goal name="VC ang_sum_int_decomp.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.31" steps="192"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_int_decomp_gen" expl="VC for ang_sum_int_decomp_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_int_decomp_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ang_sum_int_decomp">
   <goal name="VC ang_sum_int_decomp_gen.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="190"/></proof>
   </goal>
   <goal name="VC ang_sum_int_decomp_gen.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int" expl="VC for ang_sum_bv_to_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(bv_to_int x)" arg2="(bin_to_int (getbv x) n)">
   <goal name="VC ang_sum_bv_to_int.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ang_sum_int_decomp_gen">
    <goal name="VC ang_sum_bv_to_int.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.30" steps="190"/></proof>
    </goal>
    <goal name="VC ang_sum_bv_to_int.0.0.1" expl="apply premises" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="1"><result status="valid" time="0.86"/></proof>
    <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_sum_bv_to_int.0.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ang_sum_bv_to_int.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="bin_to_int_def">
     <goal name="VC ang_sum_bv_to_int.0.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="bv_to_int_eq">
      <goal name="VC ang_sum_bv_to_int.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_bv">
       <goal name="VC ang_sum_bv_to_int.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.84"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC ang_sum_bv_to_int.0.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.88"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_bv_to_int.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="190"/></proof>
     </goal>
     <goal name="VC ang_sum_bv_to_int.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="1"><result status="valid" time="1.07"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int_" expl="VC for ang_sum_bv_to_int_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int_.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ang_sum
  (fun (i:int) -&gt; int_to_ang (((getbv x @ i) * power_ 2 ((n - i) - 1)) * k) n)
  0 n)" arg2="(ang_sum
  (fun (i:int) -&gt; int_to_ang (((getbv x @ i) * power_ 2 ((n - i) - 1)) * k) n)
  0 n)">
   <goal name="VC ang_sum_bv_to_int_.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_bv_to_int">
    <goal name="VC ang_sum_bv_to_int_.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.28" steps="190"/></proof>
    </goal>
    <goal name="VC ang_sum_bv_to_int_.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="190"/></proof>
    </goal>
    <goal name="VC ang_sum_bv_to_int_.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="190"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ang_sum_bv_to_int_.0.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="ang_sum_eq">
    <goal name="VC ang_sum_bv_to_int_.0.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.28" steps="190"/></proof>
    </goal>
    <goal name="VC ang_sum_bv_to_int_.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ang_sum_bv_to_int_.0.1.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_sum_bv_to_int_mult" expl="VC for ang_sum_sum_bv_to_int_mult">
 <transf name="split_vc" >
  <goal name="VC ang_sum_sum_bv_to_int_mult.0" expl="assertion" proved="true">
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="apply" proved="true" arg1="ang_sum_eq">
   <goal name="VC ang_sum_sum_bv_to_int_mult.0.0" expl="apply premises" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="6"><result status="valid" time="0.23" steps="192"/></proof>
   </goal>
   <goal name="VC ang_sum_sum_bv_to_int_mult.0.1" expl="apply premises" proved="true">
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="6"><result status="timeout" time="5.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" arg1="ang_sum_break_zero_lg" arg2="(fun (k1:int) -&gt;
    int_to_ang
    (((getbv y @ k1) * (getbv x @ k))
     * power_ 2 (((n - k1) - 1) + ((n - k) - 1)))
    n),(fun (k1:int) -&gt;
    int_to_ang
    (((getbv y @ k1) * (getbv x @ k))
     * power_ 2 (((n - k1) - 1) + ((n - k) - 1)))
    n),0,(n-k-1),n">
      <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0" expl="apply premises">
      <proof prover="1"><result status="timeout" time="5.00"/></proof>
      </goal>
     </transf>
     <transf name="instantiate" proved="true" arg1="ang_sum_break_zero_lg" arg2="(fun (k1:int) -&gt;
    int_to_ang
    (((getbv y @ k1) * (getbv x @ k))
     * power_ 2 (((n - k1) - 1) + ((n - k) - 1)))
    n),(fun (k1:int) -&gt;
    int_to_ang
    (((getbv y @ k1) * (getbv x @ k))
     * power_ 2 (((n - k1) - 1) + ((n - k) - 1)))
    n),0,n,(n-k-1)">
      <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(ang_sum
  (fun (k1:int) -&gt;
    int_to_ang
    (((getbv y @ k1) * (getbv x @ k))
     * power_ 2 (((n - k1) - 1) + ((n - k) - 1)))
    n)
  ((n - k) - 1) n)" arg2="(ang_sum
    (fun (k1:int) -&gt;
      int_to_ang
      (((getbv y @ k1) * (getbv x @ k))
       * power_ 2 (((n - k1) - 1) + ((n - k) - 1)))
      n)
    0 n)">
       <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(ang_sum
  (fun (k1:int) -&gt;
    int_to_ang
    (((getbv y @ k1) * (getbv x @ k))
     * power_ 2 (((n - k1) - 1) + ((n - k) - 1)))
    n)
  0 n)" arg2="(ang_sum
  (fun (k1:int) -&gt;
    int_to_ang
    (((getbv y @ k1 * power_ 2 (n-k1-1)) *( (getbv x @ k) * power_ 2 (n-k-1))))
    n)
  0 n)">
        <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ang_sum_bv_to_int_">
         <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.36"/></proof>
         </goal>
         <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.60"/></proof>
         </goal>
         <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.35"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="timeout" time="5.00"/></proof>
        <transf name="apply" proved="true" arg1="ang_sum_eq">
         <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.34"/></proof>
         </goal>
         <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="timeout" time="5.00"/></proof>
          <transf name="split_vc" proved="true" >
           <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="timeout" time="5.00"/></proof>
           <proof prover="1"><result status="timeout" time="5.00"/></proof>
           <proof prover="3"><result status="timeout" time="5.00"/></proof>
           <proof prover="6"><result status="timeout" time="5.00"/></proof>
           <transf name="rewrite" proved="true" arg1="power__sum">
            <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.35"/></proof>
            </goal>
            <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.54"/></proof>
            </goal>
            <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.55"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="timeout" time="5.00"/></proof>
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="0.70"/></proof>
        </goal>
        <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.1.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.1.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.1.2.0.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="timeout" time="5.00"/></proof>
          <proof prover="1"><result status="timeout" time="5.00"/></proof>
          <proof prover="4"><result status="timeout" time="5.00"/></proof>
          <proof prover="6"><result status="valid" time="3.04" steps="203"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_sum_sum_bv_to_int_mult.0.1.0.0.0.1.3" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ang_sum_sum_bv_to_int_mult.1" expl="postcondition">
  <proof prover="6"><result status="timeout" time="5.00"/></proof>
  <transf name="rewrite" arg1="H">
   <goal name="VC ang_sum_sum_bv_to_int_mult.1.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_sum_bv_to_int_">
    <goal name="VC ang_sum_sum_bv_to_int_mult.1.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.60"/></proof>
    </goal>
    <goal name="VC ang_sum_sum_bv_to_int_mult.1.0.1" expl="rewrite premises">
    <proof prover="0"><result status="timeout" time="5.00"/></proof>
    <proof prover="1"><result status="timeout" time="5.00"/></proof>
    <proof prover="6"><undone/></proof>
    </goal>
    <goal name="VC ang_sum_sum_bv_to_int_mult.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="1"><result status="valid" time="0.59"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_sum_bv_to_int_mult_gen" expl="VC for ang_sum_sum_bv_to_int_mult_gen">
 <transf name="split_vc" >
  <goal name="VC ang_sum_sum_bv_to_int_mult_gen.0" expl="postcondition">
  <proof prover="6"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_int_decomp_gen_rev" expl="VC for ang_sum_int_decomp_gen_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_int_decomp_gen_rev.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ang_sum_int_decomp">
   <goal name="VC ang_sum_int_decomp_gen_rev.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.32" steps="190"/></proof>
   </goal>
   <goal name="VC ang_sum_int_decomp_gen_rev.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.39" steps="190"/></proof>
   </goal>
   <goal name="VC ang_sum_int_decomp_gen_rev.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.49" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_ang_mult_int_e" expl="VC for sum_ang_mult_int_e" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_ang_mult_int_e.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="190"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int_e.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int_e.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="190"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int_e.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="192"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int_e.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_ang_mult_int_e.4.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
   </goal>
   <goal name="VC sum_ang_mult_int_e.4.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="196"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_ang_mult_int_e.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="196"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int_e.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC sum_ang_mult_int_e.6.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC sum_ang_mult_int_e.6.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.92"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sum_ang_mult_int_e.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC sum_ang_mult_int_e.6.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC sum_ang_mult_int_e.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC sum_ang_mult_int_e.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC sum_ang_mult_int_e.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC sum_ang_mult_int_e.6.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H">
         <goal name="VC sum_ang_mult_int_e.6.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_sum" expl="VC for real_to_ang_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_to_ang_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="190"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC real_to_ang_sum.1.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="190"/></proof>
   </goal>
   <goal name="VC real_to_ang_sum.1.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_to_ang_sum.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="190"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.73"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC real_to_ang_sum.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_cardone">
    <goal name="VC real_to_ang_sum.5.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC real_to_ang_sum.5.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_sum.5.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="192"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_to_ang_sum.5.1" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_sum_plus_one">
    <goal name="VC real_to_ang_sum.5.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC real_to_ang_sum.5.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC real_to_ang_sum.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC real_to_ang_sum.5.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC real_to_ang_sum.5.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="Real_To_Ang_add">
         <goal name="VC real_to_ang_sum.5.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="194"/></proof>
         </goal>
         <goal name="VC real_to_ang_sum.5.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.67"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
         </goal>
         <goal name="VC real_to_ang_sum.5.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="real_ind_sum">
          <goal name="VC real_to_ang_sum.5.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
          </goal>
          <goal name="VC real_to_ang_sum.5.1.0.0.0.0.0.2.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC real_to_ang_sum.5.1.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.78"/></proof>
           <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_sum.5.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_sum_int" expl="VC for real_to_ang_sum_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_to_ang_sum_int.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.82"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC real_to_ang_sum_int.3.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="192"/></proof>
   </goal>
   <goal name="VC real_to_ang_sum_int.3.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC real_to_ang_sum_int.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="192"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="193"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.6" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="1"><result status="valid" time="1.09"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="194"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="196"/></proof>
  </goal>
  <goal name="VC real_to_ang_sum_int.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC real_to_ang_sum_int.9.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC real_to_ang_sum_int.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC real_to_ang_sum_int.9.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC real_to_ang_sum_int.9.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="196"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC real_to_ang_sum_int.9.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC real_to_ang_sum_int.9.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC real_to_ang_sum_int.9.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC real_to_ang_sum_int.9.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
         <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="Real_To_Ang_add">
          <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="real_to_ang_eq">
           <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <proof prover="1"><result status="valid" time="1.02"/></proof>
           <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
           </goal>
           <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
            <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mult_distr_add_r">
             <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1"><result status="valid" time="1.00"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
          <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.84"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC real_to_ang_sum_int.9.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="198"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_sum_int_gen" expl="VC for real_to_ang_sum_int_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_to_ang_sum_int_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="real_to_ang_sum_int">
   <goal name="VC real_to_ang_sum_int_gen.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="190"/></proof>
   </goal>
   <goal name="VC real_to_ang_sum_int_gen.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="190"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_to_ang_bv_inversion" expl="VC for real_to_ang_bv_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_to_ang_bv_inversion.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="192"/></proof>
  </goal>
  <goal name="VC real_to_ang_bv_inversion.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="194"/></proof>
  </goal>
  <goal name="VC real_to_ang_bv_inversion.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="194"/></proof>
  </goal>
  <goal name="VC real_to_ang_bv_inversion.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC real_to_ang_bv_inversion.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(real_to_ang
    (x
     *. i_to_c
        (ind_isum (fun (k:int) -&gt; (getbv y @ k) * power 2 k) 0 (length y))))" arg2="(ang_sum
  (fun (i:int) -&gt;
    real_to_ang
    (x *. i_to_c ((fun (i1:int) -&gt; (getbv y @ i1) * power_ 2 i1) @ i)))
  0 ft)">
    <goal name="VC real_to_ang_bv_inversion.3.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ang_sum_eq">
     <goal name="VC real_to_ang_bv_inversion.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="196"/></proof>
     </goal>
     <goal name="VC real_to_ang_bv_inversion.3.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC real_to_ang_bv_inversion.3.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC real_to_ang_bv_inversion.3.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.79"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC real_to_ang_bv_inversion.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC real_to_ang_bv_inversion.3.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="real_to_ang_eq">
       <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.78"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="mult_eq_t">
        <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.28" steps="196"/></proof>
        </goal>
        <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="i_to_c_eq">
         <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq">
          <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="mult_eq">
             <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.28" steps="200"/></proof>
             </goal>
             <goal name="VC real_to_ang_bv_inversion.3.0.1.0.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.68"/></proof>
             <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_ang_mult_int" expl="VC for sum_ang_mult_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_ang_mult_int.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="190"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="192"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="190"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="192"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_ang_mult_int.4.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="198"/></proof>
   </goal>
   <goal name="VC sum_ang_mult_int.4.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="198"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sum_ang_mult_int.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="198"/></proof>
  </goal>
  <goal name="VC sum_ang_mult_int.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sum_ang_mult_int.6.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC sum_ang_mult_int.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC sum_ang_mult_int.6.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H4">
     <goal name="VC sum_ang_mult_int.6.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sum_ang_mult_int.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC sum_ang_mult_int.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC sum_ang_mult_int.6.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="6"><result status="valid" time="0.27" steps="200"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int_inversion_pre" expl="VC for ang_sum_bv_to_int_inversion_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int_inversion_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_bv_to_int_inversion_pre.1" expl="postcondition" proved="true">
  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H1">
   <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ang_sum
    (fun (i:int) -&gt;
      real_to_ang ((theta *. i_to_c (power_ 2 i)) *. i_to_c (getbv x @ i)))
    0 n)" arg2="(ang_sum
    (fun (i:int) -&gt;
      real_to_ang ((theta *. i_to_c (power_ 2 i * (getbv x @ i))) ))
    0 n)">
    <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="real_to_ang_eq">
      <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="1"><result status="valid" time="0.86"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
      <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq_t">
       <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
       </goal>
       <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_inversion_sum_inc">
        <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="i_to_c_eq">
         <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.73"/></proof>
            <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.24" steps="192"/></proof>
          </goal>
          <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ang_sum_eq">
     <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
     </goal>
     <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ang_sum_bv_to_int_inversion_pre.1.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.72"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int_inversion" expl="VC for ang_sum_bv_to_int_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int_inversion.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ang_sum_bv_to_int_inversion_pre">
   <goal name="VC ang_sum_bv_to_int_inversion.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="192"/></proof>
   </goal>
   <goal name="VC ang_sum_bv_to_int_inversion.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
   </goal>
   <goal name="VC ang_sum_bv_to_int_inversion.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int_opp_pre" expl="VC for ang_sum_bv_to_int_opp_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int_opp_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_bv_to_int_opp_pre.1" expl="postcondition" proved="true">
  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H1">
   <goal name="VC ang_sum_bv_to_int_opp_pre.1.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ang_sum
    (fun (i:int) -&gt;
      real_to_ang
      ((theta *. i_to_c (power_ 2 ((n - i) - 1))) *. i_to_c (- (getbv x @ i))))
    0 n)" arg2="(ang_sum
   (fun (i:int) -&gt;
     real_to_ang (theta *. i_to_c (power_ 2 ((n - i) - 1) * (- (getbv x @ i)))))
   0 n)">
    <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="real_to_ang_eq">
      <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.69"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
      <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq_t">
       <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
       </goal>
       <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_sum_opp">
        <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="i_to_c_eq">
         <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
          <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(power 2 ((length x - 1) - k))" arg2="(power_ 2 ((n - k) - 1))">
             <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="196"/></proof>
             </goal>
             <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="0.72"/></proof>
             <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
          </goal>
          <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ang_sum_eq">
     <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="192"/></proof>
     </goal>
     <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ang_sum_bv_to_int_opp_pre.1.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.84"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int_opp" expl="VC for ang_sum_bv_to_int_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int_opp.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ang_sum_bv_to_int_opp_pre">
   <goal name="VC ang_sum_bv_to_int_opp.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
   </goal>
   <goal name="VC ang_sum_bv_to_int_opp.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
   </goal>
   <goal name="VC ang_sum_bv_to_int_opp.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int_mult_pre" expl="VC for ang_sum_bv_to_int_mult_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int_mult_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="190"/></proof>
  </goal>
  <goal name="VC ang_sum_bv_to_int_mult_pre.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
   <goal name="VC ang_sum_bv_to_int_mult_pre.1.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="H1" arg2="theta">
    <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(length x)" arg2="n">
     <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
      <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(ang_sum
    (fun (i:int) -&gt;
      real_to_ang
      ((theta *. i_to_c (power_ 2 ((n - i) - 1))) *. i_to_c (getbv x @ i)))
    0 n)" arg2="( ang_sum
  (fun (i:int) -&gt;
    real_to_ang (theta *. i_to_c (power_ 2 ((n - i) - 1) * (getbv x @ i))))
  0 n)">
       <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="real_to_ang_eq">
         <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.81"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
         </goal>
         <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="mult_eq_t">
          <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="i_to_c_eq">
           <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ind_isum_eq">
            <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.84"/></proof>
             <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.30" steps="194"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="ang_sum_eq">
        <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.28" steps="194"/></proof>
        </goal>
        <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.86"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="6.00"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ang_sum_bv_to_int_mult_pre.1.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="194"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ang_sum_bv_to_int_mult" expl="VC for ang_sum_bv_to_int_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_sum_bv_to_int_mult.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="ang_sum_bv_to_int_mult_pre">
   <goal name="VC ang_sum_bv_to_int_mult.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="192"/></proof>
   </goal>
   <goal name="VC ang_sum_bv_to_int_mult.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="192"/></proof>
   </goal>
   <goal name="VC ang_sum_bv_to_int_mult.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion" expl="VC for rewrite_ang_sum_sum_to_bv_and_inversion" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="196"/></proof>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="196"/></proof>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="192"/></proof>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="193"/></proof>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="((-(getbv x @ k) * power_ 2 ((n - k) - 1)) * ((getbv z @ a) * power_ 2 a))" arg2="(- getbv x k * getbv z a * power_ 2 (n-k+a-1))
">
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.0" expl="precondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="assert" proved="true" arg1="(forall a b c d. (a*b) * (c*d) = (a*c) * (b*d))">
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.43"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.0.1" expl="precondition" proved="true">
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="6"><result status="valid" time="2.06" steps="207"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1" expl="equality hypothesis" proved="true">
    <transf name="assert" arg1="(forall a b c d. (a*b) * (c*d) = (a*c) * (b*d))">
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1.0" expl="asserted formula">
     </goal>
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1.1" expl="equality hypothesis">
     </goal>
    </transf>
    <transf name="replace" proved="true" arg1="(((n - k) + a) - 1)" arg2="(n-k-1+a)">
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="Power_sum_">
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1.0.0" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="205"/></proof>
      </goal>
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.28" steps="205"/></proof>
      </goal>
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="205"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.4.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.32" steps="205"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="((-(getbv x @ k) * power_ 2 ((n - k) - 1)) * ((getbv z @ a) * power_ 2 a))" arg2="(- getbv x k * getbv z a * power_ 2 (n-k+a-1))
">
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(power_ 2 (((n - k) + a) - 1))" arg2="(power 2 (((n - k) + a) - 1))">
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="int_to_ang_eq">
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq">
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.31" steps="205"/></proof>
       </goal>
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.76"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="205"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.70"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.1" expl="equality hypothesis" proved="true">
    <transf name="replace" proved="true" arg1="(((n - k) + a) - 1)" arg2="(n-k-1+a)">
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="Power_sum_">
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.1.0.0" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.31" steps="205"/></proof>
      </goal>
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.31" steps="205"/></proof>
      </goal>
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.31" steps="205"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.5.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.33" steps="205"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="ang_sum_eq">
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.32" steps="192"/></proof>
   </goal>
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H2">
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ang_sum_eq">
        <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.36" steps="196"/></proof>
        </goal>
        <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="int_to_ang_def">
           <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="real_to_ang_eq">
            <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.11"/></proof>
            </goal>
            <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="5.48"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.23" steps="200"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.24" steps="196"/></proof>
       </goal>
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="196"/></proof>
       </goal>
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.6.1.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="196"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="ang_sum_eq">
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="194"/></proof>
    </goal>
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="((i_to_c (power_ 2 k * (getbv y @ k)) *. i_to_c (- bv_to_int x))
     /. i_to_c (power_ 2 n))" arg2="(((i_to_c (power_ 2 k * (getbv y @ k)) /. i_to_c (power_ 2 n)) *. i_to_c (- bv_to_int x))
    )">
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ang_sum_eq">
         <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.36" steps="198"/></proof>
         </goal>
         <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="real_to_ang_eq">
            <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.25"/></proof>
            </goal>
            <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.88"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="198"/></proof>
        </goal>
        <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.87"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.8.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.82"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="196"/></proof>
  </goal>
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((i_to_c (bv_to_int x) *. i_to_c (bv_to_int (bv_inversion y)))
     /. i_to_c (power_ 2 n))" arg2="(((i_to_c (bv_to_int x)  /. i_to_c (power_ 2 n)) *. i_to_c (bv_to_int (bv_inversion y)))
    )">
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((i_to_c (- bv_to_int x) *. i_to_c (bv_to_int (bv_inversion y)))
     /. i_to_c (power_ 2 n))" arg2="(((i_to_c (- bv_to_int x)  /. i_to_c (power_ 2 n))*. i_to_c (bv_to_int (bv_inversion y)))
    )">
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ang_sum_eq">
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.24" steps="196"/></proof>
       </goal>
       <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="real_to_ang_eq">
          <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.87"/></proof>
          </goal>
          <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="12.13"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="196"/></proof>
      </goal>
      <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="0.79"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.86"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion.10.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.96"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen" expl="VC for rewrite_ang_sum_sum_to_bv_and_inversion_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="rewrite_ang_sum_sum_to_bv_and_inversion">
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="real_to_ang_eq">
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.90"/></proof>
    </goal>
    <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen.0.0.1" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="1.10"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="192"/></proof>
   </goal>
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="192"/></proof>
   </goal>
   <goal name="VC rewrite_ang_sum_sum_to_bv_and_inversion_gen.0.3" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_by_sum_mult_break" expl="VC for int_to_ang_by_sum_mult_break" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_to_ang_by_sum_mult_break.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
  </goal>
  <goal name="VC int_to_ang_by_sum_mult_break.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
  </goal>
  <goal name="VC int_to_ang_by_sum_mult_break.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="192"/></proof>
  </goal>
  <goal name="VC int_to_ang_by_sum_mult_break.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_isum_to_d_sum">
   <goal name="VC int_to_ang_by_sum_mult_break.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ang_sum
  (fun (k:int) -&gt;
    int_to_ang
    ((fun (j:int) -&gt;
       ind_isum
       (fun (i:int) -&gt;
         ((getbv x @ i) * (getbv y @ j)) * power_ 2 (((n - i) - 1) + j))
       j n)
     @ k)
    n)
  0 n)" arg2="(ang_inv (ang_sum
  (fun (j:int) -&gt;
    ang_sum
    (fun (i:int) -&gt;
      int_to_ang
      (((- (getbv x @ i)) * (getbv y @ j)) * power_ 2 (((n - i) - 1) + j)) n)
    j n)
  0 n))">
    <goal name="VC int_to_ang_by_sum_mult_break.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Real_To_Ang_inv">
      <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="int_to_ang_to_real_to_ang_gen" arg2="(bv_to_int x * bv_to_int (bv_inversion y)),n,(i_to_c (bv_to_int x) *. i_to_c (bv_to_int (bv_inversion y)))">
        <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="real_to_ang_eq">
          <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="real_mult">
           <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <proof prover="1"><result status="valid" time="0.86"/></proof>
           <proof prover="6" obsolete="true"><result status="timeout" time="6.00"/></proof>
           </goal>
           <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <proof prover="4"><result status="valid" time="0.82"/></proof>
           <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(forall x x&#39;. -. x= x&#39; -&gt;  x*. pow_inv_2 n = -. (x&#39;/. i_to_c (power_ 2 n)))">
           <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="replace" proved="true" arg1="(-. (x&#39; /. i_to_c (power_ 2 n)))" arg2="( (-.x&#39; /. i_to_c (power_ 2 n)))">
             <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <proof prover="1"><result status="valid" time="0.90"/></proof>
             </goal>
             <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="1"><result status="valid" time="0.89"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="h">
            <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="i_to_c_minus">
             <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="minus_out">
              <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.35" steps="194"/></proof>
         </goal>
         <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="1"><result status="valid" time="1.01"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_to_ang_by_sum_mult_break.3.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.82"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_to_ang_by_sum_mult_break.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_sum_inv">
     <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ang_sum_eq">
      <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
      </goal>
      <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ang_sum_inv">
         <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(ang_sum
    (fun (k1:int) -&gt;
      ang_inv
      (int_to_ang
       (((- (getbv x @ k1)) * (getbv y @ k)) * power_ 2 (((n - k1) - 1) + k))
       n))
    k n)" arg2="(ang_sum
    (fun (k1:int) -&gt;
            (int_to_ang
       ((( (getbv x @ k1)) * (getbv y @ k)) * power_ 2 (((n - k1) - 1) + k))
       n))
    k n)">
           <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="ind_isum_to_d_sum">
            <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ang_sum_eq">
             <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.26" steps="198"/></proof>
             </goal>
             <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.27" steps="198"/></proof>
            </goal>
            <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.28" steps="198"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="ang_sum_eq">
            <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.25" steps="198"/></proof>
            </goal>
            <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="int_to_ang_def">
               <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="Real_To_Ang_inv">
                <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="int_to_ang_def">
                 <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="real_to_ang_eq">
                  <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="1"><result status="valid" time="0.94"/></proof>
                  </goal>
                  <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <transf name="assert" proved="true" arg1="(forall a b . b&lt;&gt; c_zero -&gt; -.(a/.b) = (-.a)/.b)">
                   <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                   <proof prover="0"><result status="valid" time="0.63"/></proof>
                   <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
                   </goal>
                   <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="h">
                    <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="div_eq">
                     <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="0.67"/></proof>
                     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
                     </goal>
                     <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                     <proof prover="6"><result status="valid" time="0.23" steps="202"/></proof>
                     </goal>
                     <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                     <proof prover="1"><result status="valid" time="0.80"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                    <proof prover="1"><result status="valid" time="0.82"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.22" steps="202"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="1"><result status="valid" time="0.98"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC int_to_ang_by_sum_mult_break.3.0.1.0.1.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.23" steps="202"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_to_ang_by_sum_mult_break.3.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="194"/></proof>
   </goal>
   <goal name="VC int_to_ang_by_sum_mult_break.3.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="194"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_by_sum_mult_break_gen" expl="VC for int_to_ang_by_sum_mult_break_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_to_ang_by_sum_mult_break_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="int_to_ang_by_sum_mult_break">
   <goal name="VC int_to_ang_by_sum_mult_break_gen.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="192"/></proof>
   </goal>
   <goal name="VC int_to_ang_by_sum_mult_break_gen.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="192"/></proof>
   </goal>
   <goal name="VC int_to_ang_by_sum_mult_break_gen.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="192"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_to_ang_by_sum_mult_break_neg" expl="VC for int_to_ang_by_sum_mult_break_neg">
 <transf name="split_vc" >
  <goal name="VC int_to_ang_by_sum_mult_break_neg.0" expl="postcondition">
  <proof prover="6"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_check_zero" expl="VC for bv_check_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bv_check_zero.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
  </goal>
  <goal name="VC bv_check_zero.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.66"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bv_check_zero.2" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC bv_check_zero.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="194"/></proof>
   </goal>
   <goal name="VC bv_check_zero.2.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="1"><result status="valid" time="0.91"/></proof>
   <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC bv_check_zero.2.2" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <transf name="eliminate_let" proved="true" >
    <goal name="VC bv_check_zero.2.2.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="VC bv_check_zero.2.2.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC bv_check_zero.2.2.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="eliminate_if" >
       <goal name="VC bv_check_zero.2.2.0.0.0.0" expl="VC for bv_check_zero">
       <transf name="split_vc" >
        <goal name="VC bv_check_zero.2.2.0.0.0.0.0" expl="postcondition">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
        <goal name="VC bv_check_zero.2.2.0.0.0.0.1" expl="postcondition">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC bv_check_zero.2.2.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC bv_check_zero.2.2.0.0.0.0.0" expl="VC for bv_check_zero" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC bv_check_zero.2.2.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="1"><result status="valid" time="0.40"/></proof>
         </goal>
         <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <transf name="case" proved="true" arg1="(j = 0)">
          <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.0" expl="true case (postcondition)" proved="true">
          <proof prover="1"><result status="valid" time="0.50"/></proof>
          </goal>
          <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1" expl="false case (postcondition)" proved="true">
          <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <transf name="assert" proved="true" arg1="(getbv x j = 0)">
           <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="1"><result status="valid" time="1.07"/></proof>
           </goal>
           <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1.1" expl="false case (postcondition)" proved="true">
           <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <transf name="assert" proved="true" arg1="(getbv x j = 1)">
            <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
            <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
            <transf name="replace" proved="true" arg1="(getbv x j)" arg2="(getbv (tpart x 1) (j-1))">
             <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="H3">
              <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="1"><result status="valid" time="0.74"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="1"><result status="valid" time="1.08"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC bv_check_zero.2.2.0.0.0.0.0.1.1.1.1" expl="false case (postcondition)" proved="true">
            <proof prover="1"><result status="valid" time="0.40"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_check_zero.2.2.0.0.0.0.0.2" expl="postcondition" proved="true">
         <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <transf name="assert" proved="true" arg1="(0 &lt;= j+1 /\ j+1 &lt; length x -&gt; (getbv x @ (j+1)) &lt;&gt; 1)">
          <goal name="VC bv_check_zero.2.2.0.0.0.0.0.2.0" expl="asserted formula" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC bv_check_zero.2.2.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="1.98" steps="210"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC bv_check_zero.2.2.0.0.0.0.0.2.1" expl="postcondition" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1"><result status="valid" time="1.04"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
         </transf>
         <transf name="case" arg1="(j=0)">
          <goal name="VC bv_check_zero.2.2.0.0.0.0.0.2.0" expl="true case (postcondition)">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
          <goal name="VC bv_check_zero.2.2.0.0.0.0.0.2.1" expl="false case (postcondition)">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_check_zero.2.2.0.0.0.0.0.3" expl="postcondition" proved="true">
         <proof prover="1"><result status="valid" time="0.41"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bv_check_zero.2.2.0.1" expl="postcondition" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="eliminate_if" proved="true" >
      <goal name="VC bv_check_zero.2.2.0.1.0" expl="VC for bv_check_zero" proved="true">
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="split_vc" proved="true" >
       <goal name="VC bv_check_zero.2.2.0.1.0.0" expl="postcondition" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <transf name="assert" proved="true" arg1="(not (forall j:int. 0 &lt;= j /\ j &lt; length x -&gt; (getbv x @ j) = 1))">
        <goal name="VC bv_check_zero.2.2.0.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <transf name="assert" proved="true" arg1="( ( 0 &lt;= 0 /\ 0 &lt; length x /\ (getbv x @ 0) = 1))">
         <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="196"/></proof>
          </goal>
          <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1"><result status="valid" time="0.82"/></proof>
          <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
          <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0.2" expl="asserted formula" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1"><result status="valid" time="0.87"/></proof>
          <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_check_zero.2.2.0.1.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="198"/></proof>
         </goal>
        </transf>
        <transf name="assert" proved="true" arg1="( ( 0 &lt;= 0 /\ 0 &lt; length x /\ (getbv x @ 0) &lt;&gt; 1))">
         <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="196"/></proof>
          </goal>
          <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1"><result status="valid" time="0.82"/></proof>
          <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
          <goal name="VC bv_check_zero.2.2.0.1.0.0.0.0.2" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="196"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bv_check_zero.2.2.0.1.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.68"/></proof>
         <proof prover="6"><result status="valid" time="1.85" steps="198"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bv_check_zero.2.2.0.1.0.0.1" expl="postcondition" proved="true">
        <proof prover="0"><result status="valid" time="0.66"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bv_check_zero.2.2.0.1.0.1" expl="postcondition" proved="true">
       <proof prover="6"><result status="valid" time="0.25" steps="202"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_check_zero_int" expl="VC for bv_check_zero_int">
 <transf name="split_vc" >
  <goal name="VC bv_check_zero_int.0" expl="postcondition">
  <proof prover="6"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_check_zero_plus_one" expl="VC for bv_check_zero_plus_one">
 <transf name="split_vc" >
  <goal name="VC bv_check_zero_plus_one.0" expl="postcondition">
  <proof prover="6"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bv_check_zero_two" expl="VC for bv_check_zero_two">
 <transf name="split_vc" >
  <goal name="VC bv_check_zero_two.0" expl="postcondition">
  <proof prover="6"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Real_to_complex_trig">
 <goal name="VC complex_as_a_vector" expl="VC for complex_as_a_vector">
 <transf name="split_vc" >
  <goal name="VC complex_as_a_vector.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="194"/></proof>
  </goal>
  <goal name="VC complex_as_a_vector.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.26" steps="194"/></proof>
  </goal>
  <goal name="VC complex_as_a_vector.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="1.18"/></proof>
  </goal>
  <goal name="VC complex_as_a_vector.3" expl="postcondition">
  <transf name="rewrite" arg1="ind_sum_ket_norm_l">
   <goal name="VC complex_as_a_vector.3.0" expl="postcondition">
   <transf name="rewrite" arg1="ind_sum_plus_one">
    <goal name="VC complex_as_a_vector.3.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ind_sum_cardone">
     <goal name="VC complex_as_a_vector.3.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC complex_as_a_vector.3.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H1">
       <goal name="VC complex_as_a_vector.3.0.0.0.0.0" expl="postcondition">
       <transf name="compute_specified" >
        <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="H1">
         <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="compute_specified" >
          <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="mult_modulus_rev">
           <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="rewrite" arg1="mult_modulus_rev">
            <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="rewrite" arg1="modulus_real_pos">
             <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
             <transf name="rewrite" arg1="modulus_real_pos">
              <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <proof prover="6" obsolete="true"><result status="valid" time="2.03" steps="204"/></proof>
              </goal>
              <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="6" obsolete="true"><result status="valid" time="1.70" steps="204"/></proof>
              </goal>
              <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
              <proof prover="6" obsolete="true"><result status="valid" time="1.70" steps="204"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
             <proof prover="6" obsolete="true"><result status="valid" time="1.87" steps="204"/></proof>
             </goal>
             <goal name="VC complex_as_a_vector.3.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
             <proof prover="6" obsolete="true"><result status="valid" time="2.12" steps="204"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC complex_as_a_vector.3.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.74" steps="204"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC complex_as_a_vector.3.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="1.82" steps="204"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC complex_as_a_vector.3.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.20" steps="202"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin" expl="VC for sin">
 <transf name="split_vc" >
  <goal name="VC sin.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.26" steps="198"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos" expl="VC for cos">
 <transf name="split_vc" >
  <goal name="VC cos.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.21" steps="198"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="euler_real_r">
 <transf name="split_vc" >
  <goal name="euler_real_r.0">
  <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="euler_im_r">
 <transf name="split_vc" >
  <goal name="euler_im_r.0">
  <proof prover="0" obsolete="true"><result status="valid" time="0.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cos_zero">
 <proof prover="4" obsolete="true"><result status="valid" time="3.08"/></proof>
 </goal>
 <goal name="cos_half_pi">
 <transf name="rewrite" arg1="cos_def">
  <goal name="cos_half_pi.0">
  <transf name="replace" arg1="(im *. (pi /. i_to_c 2))" arg2="((im *. pi) /. i_to_c 2)">
   <goal name="cos_half_pi.0.0">
   <proof prover="0" obsolete="true"><result status="valid" time="1.78"/></proof>
   </goal>
   <goal name="cos_half_pi.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="1.72" steps="198"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="cos_half_pi.1" expl="rewrite premises">
  <proof prover="6" obsolete="true"><result status="valid" time="1.62" steps="198"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="cos_quarter_pi">
 <transf name="split_vc" >
  <goal name="cos_quarter_pi.0">
  <transf name="split_vc" >
   <goal name="cos_quarter_pi.0.0">
   <transf name="rewrite" arg1="cos_def">
    <goal name="cos_quarter_pi.0.0.0">
    <transf name="replace" arg1="(im *. (pi /. i_to_c 4))" arg2="((im *. pi) /. i_to_c 4)">
     <goal name="cos_quarter_pi.0.0.0.0">
     <transf name="rewrite" arg1="Exp_quarter_pi">
      <goal name="cos_quarter_pi.0.0.0.0.0">
      <transf name="assert" arg1="(t_real_part  ((squarert_two /. ttwo) +. (im *. (squarert_two /. ttwo))) = (squarert_two /. ttwo))">
       <goal name="cos_quarter_pi.0.0.0.0.0.0" expl="asserted formula">
       <proof prover="6" obsolete="true"><result status="valid" time="1.77" steps="200"/></proof>
       </goal>
       <goal name="cos_quarter_pi.0.0.0.0.0.1">
       <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="200"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="cos_quarter_pi.0.0.0.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="200"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="cos_quarter_pi.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="1.79" steps="200"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cos_pi">
 <transf name="rewrite" arg1="euler_real_r">
  <goal name="cos_pi.0">
  <proof prover="0" obsolete="true"><result status="valid" time="0.72"/></proof>
  </goal>
  <goal name="cos_pi.1" expl="rewrite premises">
  <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="200"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sin_zero">
 <proof prover="4" obsolete="true"><result status="valid" time="3.17"/></proof>
 </goal>
 <goal name="sin_half_pi">
 <transf name="rewrite" arg1="sin_def">
  <goal name="sin_half_pi.0">
  <transf name="replace" arg1="(im *. (pi /. i_to_c 2))" arg2="((im *. pi) /. i_to_c 2)">
   <goal name="sin_half_pi.0.0">
   <proof prover="0" obsolete="true"><result status="valid" time="1.94"/></proof>
   </goal>
   <goal name="sin_half_pi.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="1.86" steps="206"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sin_half_pi.1" expl="rewrite premises">
  <proof prover="6" obsolete="true"><result status="valid" time="2.18" steps="206"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_ang_exp" expl="VC for sin_ang_exp">
 <transf name="split_vc" >
  <goal name="VC sin_ang_exp.0" expl="postcondition">
  <transf name="rewrite" arg1="sin_def">
   <goal name="VC sin_ang_exp.0.0" expl="postcondition">
   <transf name="eliminate_definition" >
    <goal name="VC sin_ang_exp.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="real_to_ang_value">
     <goal name="VC sin_ang_exp.0.0.0.0" expl="postcondition">
     <proof prover="6" obsolete="true"><result status="valid" time="0.39" steps="220"/></proof>
     </goal>
     <goal name="VC sin_ang_exp.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.37" steps="220"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sin_ang_exp.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="2.17" steps="210"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_ang_exp" expl="VC for cos_ang_exp">
 <transf name="split_vc" >
  <goal name="VC cos_ang_exp.0" expl="postcondition">
  <transf name="rewrite" arg1="cos_def">
   <goal name="VC cos_ang_exp.0.0" expl="postcondition">
   <transf name="rewrite" arg1="real_to_ang_value">
    <goal name="VC cos_ang_exp.0.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="208"/></proof>
    </goal>
    <goal name="VC cos_ang_exp.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="208"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_ang_exp.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="2.03" steps="210"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_ang_exp_" expl="VC for sin_ang_exp_">
 <transf name="split_vc" >
  <goal name="VC sin_ang_exp_.0" expl="postcondition">
  <transf name="rewrite" arg1="sin_def">
   <goal name="VC sin_ang_exp_.0.0" expl="postcondition">
   <transf name="eliminate_definition" >
    <goal name="VC sin_ang_exp_.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="real_to_ang_value">
     <goal name="VC sin_ang_exp_.0.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(two_pi_i *. (x /. (ttwo *. pi)))" arg2="(im*.x)">
      <goal name="VC sin_ang_exp_.0.0.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="0.40" steps="220"/></proof>
      </goal>
      <goal name="VC sin_ang_exp_.0.0.0.0.1" expl="equality hypothesis">
      <transf name="rewrite" arg1="two_pi_i_def">
       <goal name="VC sin_ang_exp_.0.0.0.0.1.0" expl="equality hypothesis">
       <transf name="replace" arg1="((im *. pi) *. ttwo)" arg2="((ttwo *. pi) *. im)">
        <goal name="VC sin_ang_exp_.0.0.0.0.1.0.0" expl="equality hypothesis">
        <proof prover="1" obsolete="true"><result status="valid" time="0.86"/></proof>
        </goal>
        <goal name="VC sin_ang_exp_.0.0.0.0.1.0.1" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="0.36" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sin_ang_exp_.0.0.0.1" expl="rewrite premises">
     <transf name="replace" arg1="(exp (im *. x))" arg2="(ang_exp (real_to_ang (x /. (ttwo *. pi))))">
      <goal name="VC sin_ang_exp_.0.0.0.1.0" expl="rewrite premises">
      <transf name="apply" arg1="real_div">
       <goal name="VC sin_ang_exp_.0.0.0.1.0.0" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.33" steps="220"/></proof>
       </goal>
       <goal name="VC sin_ang_exp_.0.0.0.1.0.1" expl="apply premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.72"/></proof>
       </goal>
       <goal name="VC sin_ang_exp_.0.0.0.1.0.2" expl="apply premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.63"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sin_ang_exp_.0.0.0.1.1" expl="equality hypothesis">
      <transf name="rewrite" arg1="real_to_ang_value">
       <goal name="VC sin_ang_exp_.0.0.0.1.1.0" expl="equality hypothesis">
       <transf name="replace" arg1="(two_pi_i *. (x /. (ttwo *. pi)))" arg2="(im*.x)">
        <goal name="VC sin_ang_exp_.0.0.0.1.1.0.0" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
        </goal>
        <goal name="VC sin_ang_exp_.0.0.0.1.1.0.1" expl="equality hypothesis">
        <transf name="rewrite" arg1="two_pi_i_def">
         <goal name="VC sin_ang_exp_.0.0.0.1.1.0.1.0" expl="equality hypothesis">
         <transf name="replace" arg1="((im *. pi) *. ttwo)" arg2="((ttwo *. pi) *. im)">
          <goal name="VC sin_ang_exp_.0.0.0.1.1.0.1.0.0" expl="equality hypothesis">
          <proof prover="1" obsolete="true"><result status="valid" time="0.76"/></proof>
          </goal>
          <goal name="VC sin_ang_exp_.0.0.0.1.1.0.1.0.1" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="0.32" steps="220"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sin_ang_exp_.0.0.0.1.1.1" expl="rewrite premises">
       <transf name="apply" arg1="real_div">
        <goal name="VC sin_ang_exp_.0.0.0.1.1.1.0" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.33" steps="220"/></proof>
        </goal>
        <goal name="VC sin_ang_exp_.0.0.0.1.1.1.1" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="0.66"/></proof>
        </goal>
        <goal name="VC sin_ang_exp_.0.0.0.1.1.1.2" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="0.84"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sin_ang_exp_.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_ang_exp_" expl="VC for cos_ang_exp_">
 <transf name="split_vc" >
  <goal name="VC cos_ang_exp_.0" expl="postcondition">
  <transf name="rewrite" arg1="cos_def">
   <goal name="VC cos_ang_exp_.0.0" expl="postcondition">
   <transf name="eliminate_definition" >
    <goal name="VC cos_ang_exp_.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="real_to_ang_value">
     <goal name="VC cos_ang_exp_.0.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(two_pi_i *. (x /. (ttwo *. pi)))" arg2="(im*.x)">
      <goal name="VC cos_ang_exp_.0.0.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
      </goal>
      <goal name="VC cos_ang_exp_.0.0.0.0.1" expl="equality hypothesis">
      <transf name="rewrite" arg1="two_pi_i_def">
       <goal name="VC cos_ang_exp_.0.0.0.0.1.0" expl="equality hypothesis">
       <transf name="replace" arg1="((im *. pi) *. ttwo)" arg2="((ttwo *. pi) *. im)">
        <goal name="VC cos_ang_exp_.0.0.0.0.1.0.0" expl="equality hypothesis">
        <proof prover="1" obsolete="true"><result status="valid" time="0.71"/></proof>
        </goal>
        <goal name="VC cos_ang_exp_.0.0.0.0.1.0.1" expl="equality hypothesis">
        <proof prover="6" obsolete="true"><result status="valid" time="0.35" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cos_ang_exp_.0.0.0.1" expl="rewrite premises">
     <transf name="apply" arg1="real_div">
      <goal name="VC cos_ang_exp_.0.0.0.1.0" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
      </goal>
      <goal name="VC cos_ang_exp_.0.0.0.1.1" expl="apply premises">
      <proof prover="1" obsolete="true"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC cos_ang_exp_.0.0.0.1.2" expl="apply premises">
      <proof prover="1" obsolete="true"><result status="valid" time="0.74"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_ang_exp_.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_sin_square_add" expl="VC for cos_sin_square_add">
 <transf name="split_vc" >
  <goal name="VC cos_sin_square_add.0" expl="precondition">
  <transf name="assert" arg1="(c_zero &lt;. ttwo*.pi)">
   <goal name="VC cos_sin_square_add.0.0" expl="asserted formula">
   <proof prover="0" obsolete="true"><result status="valid" time="0.53"/></proof>
   </goal>
   <goal name="VC cos_sin_square_add.0.1" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="2.90" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cos_sin_square_add.1" expl="precondition">
  <transf name="apply" arg1="real_div">
   <goal name="VC cos_sin_square_add.1.0" expl="apply premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="210"/></proof>
   </goal>
   <goal name="VC cos_sin_square_add.1.1" expl="apply premises">
   <proof prover="1" obsolete="true"><result status="valid" time="0.74"/></proof>
   </goal>
   <goal name="VC cos_sin_square_add.1.2" expl="apply premises">
   <proof prover="6" obsolete="true"><result status="valid" time="2.11" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cos_sin_square_add.2" expl="postcondition">
  <transf name="rewrite" arg1="cos_def">
   <goal name="VC cos_sin_square_add.2.0" expl="postcondition">
   <transf name="rewrite" arg1="sin_def">
    <goal name="VC cos_sin_square_add.2.0.0" expl="postcondition">
    <transf name="eliminate_definition" >
     <goal name="VC cos_sin_square_add.2.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="modulus_def" arg2="in" arg3="H">
      <goal name="VC cos_sin_square_add.2.0.0.0.0" expl="postcondition">
      <transf name="assert" arg1="(c_one = ((t_real_part (ang_exp (real_to_ang (x /. (ttwo *. pi))))
    *. t_real_part (ang_exp (real_to_ang (x /. (ttwo *. pi)))))
   +. (t_im_part (ang_exp (real_to_ang (x /. (ttwo *. pi))))
       *. t_im_part (ang_exp (real_to_ang (x /. (ttwo *. pi)))))))">
       <goal name="VC cos_sin_square_add.2.0.0.0.0.0" expl="asserted formula">
       <proof prover="4" obsolete="true"><result status="valid" time="1.45"/></proof>
       </goal>
       <goal name="VC cos_sin_square_add.2.0.0.0.0.1" expl="postcondition">
       <transf name="rewrite" arg1="h">
        <goal name="VC cos_sin_square_add.2.0.0.0.0.1.0" expl="postcondition">
        <transf name="apply" arg1="add_eq_t">
         <goal name="VC cos_sin_square_add.2.0.0.0.0.1.0.0" expl="apply premises">
         <transf name="rewrite" arg1="cpower_two">
          <goal name="VC cos_sin_square_add.2.0.0.0.0.1.0.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="3.62"/></proof>
          </goal>
          <goal name="VC cos_sin_square_add.2.0.0.0.0.1.0.0.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.35" steps="226"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cos_sin_square_add.2.0.0.0.0.1.0.1" expl="apply premises">
         <transf name="rewrite" arg1="cpower_two">
          <goal name="VC cos_sin_square_add.2.0.0.0.0.1.0.1.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="4.23"/></proof>
          </goal>
          <goal name="VC cos_sin_square_add.2.0.0.0.0.1.0.1.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.35" steps="226"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cos_sin_square_add.2.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_sin_square_add.2.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC c_one_minus_sin_square" expl="VC for c_one_minus_sin_square">
 <transf name="split_vc" >
  <goal name="VC c_one_minus_sin_square.0" expl="postcondition">
  <transf name="assert" arg1="(forall a b c. a+.b = c-&gt; c-.b=a)">
   <goal name="VC c_one_minus_sin_square.0.0" expl="asserted formula">
   <transf name="split_vc" >
    <goal name="VC c_one_minus_sin_square.0.0.0" expl="asserted formula">
    <proof prover="4" obsolete="true"><result status="valid" time="3.88"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC c_one_minus_sin_square.0.1" expl="postcondition">
   <transf name="apply" arg1="h">
    <goal name="VC c_one_minus_sin_square.0.1.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="1.99" steps="210"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC c_one_minus_cos_square" expl="VC for c_one_minus_cos_square">
 <transf name="split_vc" >
  <goal name="VC c_one_minus_cos_square.0" expl="postcondition">
  <transf name="assert" arg1="(forall a b c. a+.b = c-&gt; c-.b=a)">
   <goal name="VC c_one_minus_cos_square.0.0" expl="asserted formula">
   <transf name="split_vc" >
    <goal name="VC c_one_minus_cos_square.0.0.0" expl="asserted formula">
    <proof prover="4" obsolete="true"><result status="valid" time="4.56"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC c_one_minus_cos_square.0.1" expl="postcondition">
   <transf name="apply" arg1="h">
    <goal name="VC c_one_minus_cos_square.0.1.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="2.28" steps="210"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC euler_real" expl="VC for euler_real">
 <transf name="split_vc" >
  <goal name="VC euler_real.0" expl="postcondition">
  <transf name="rewrite" arg1="euler_real_r">
   <goal name="VC euler_real.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="2.31" steps="210"/></proof>
   </goal>
   <goal name="VC euler_real.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC euler_im" expl="VC for euler_im">
 <transf name="split_vc" >
  <goal name="VC euler_im.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.13" steps="210"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Trigo_form">
 <goal name="VC cos_add" expl="VC for cos_add">
 <transf name="split_vc" >
  <goal name="VC cos_add.0" expl="postcondition">
  <transf name="rewrite" arg1="cos_def">
   <goal name="VC cos_add.0.0" expl="postcondition">
   <transf name="replace" arg1="(exp (im *. (x +. x&#39;)))" arg2="((exp (im *. (x )))*. (exp (im *. (x&#39;))))">
    <goal name="VC cos_add.0.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.51"/></proof>
    </goal>
    <goal name="VC cos_add.0.0.1" expl="equality hypothesis">
    <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_add.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.80" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_add" expl="VC for sin_add">
 <transf name="split_vc" >
  <goal name="VC sin_add.0" expl="postcondition">
  <transf name="rewrite" arg1="sin_def">
   <goal name="VC sin_add.0.0" expl="postcondition">
   <transf name="replace" arg1="(exp (im *. (x +. x&#39;)))" arg2="((exp (im *. (x )))*. (exp (im *. (x&#39;))))">
    <goal name="VC sin_add.0.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.55"/></proof>
    </goal>
    <goal name="VC sin_add.0.0.1" expl="equality hypothesis">
    <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sin_add.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.86" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_two_x" expl="VC for cos_two_x">
 <transf name="split_vc" >
  <goal name="VC cos_two_x.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.27" steps="208"/></proof>
  </goal>
  <goal name="VC cos_two_x.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="208"/></proof>
  </goal>
  <goal name="VC cos_two_x.2" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_two_x" expl="VC for sin_two_x">
 <transf name="split_vc" >
  <goal name="VC sin_two_x.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.29" steps="210"/></proof>
  </goal>
  <goal name="VC sin_two_x.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.29" steps="210"/></proof>
  </goal>
  <goal name="VC sin_two_x.2" expl="postcondition">
  <transf name="replace" arg1="(ttwo *. x)" arg2="(x+.x)">
   <goal name="VC sin_two_x.2.0" expl="postcondition">
   <transf name="rewrite" arg1="H">
    <goal name="VC sin_two_x.2.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="3.04" steps="214"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sin_two_x.2.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="2.98" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_minus" expl="VC for cos_minus">
 <transf name="split_vc" >
  <goal name="VC cos_minus.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="208"/></proof>
  </goal>
  <goal name="VC cos_minus.1" expl="postcondition">
  <transf name="rewrite" arg1="cos_ang_exp_">
   <goal name="VC cos_minus.1.0" expl="postcondition">
   <transf name="rewrite" arg1="cos_ang_exp_">
    <goal name="VC cos_minus.1.0.0" expl="postcondition">
    <transf name="replace" arg1="(real_to_ang ((-. x) /. (ttwo *. pi)))" arg2="(real_to_ang (-.(x /. (ttwo *. pi))))">
     <goal name="VC cos_minus.1.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="real_to_ang_inv">
      <goal name="VC cos_minus.1.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="ang_inv_to_conjugate">
       <goal name="VC cos_minus.1.0.0.0.0.0" expl="postcondition">
       <proof prover="6" obsolete="true"><result status="valid" time="2.43" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cos_minus.1.0.0.0.1" expl="rewrite premises">
      <transf name="apply" arg1="real_div">
       <goal name="VC cos_minus.1.0.0.0.1.0" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="210"/></proof>
       </goal>
       <goal name="VC cos_minus.1.0.0.0.1.1" expl="apply premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.77"/></proof>
       </goal>
       <goal name="VC cos_minus.1.0.0.0.1.2" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.38" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cos_minus.1.0.0.1" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="0.80"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cos_minus.1.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="210"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_minus.1.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_minus" expl="VC for sin_minus">
 <transf name="split_vc" >
  <goal name="VC sin_minus.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="208"/></proof>
  </goal>
  <goal name="VC sin_minus.1" expl="postcondition">
  <transf name="rewrite" arg1="sin_ang_exp_">
   <goal name="VC sin_minus.1.0" expl="postcondition">
   <transf name="rewrite" arg1="sin_ang_exp_">
    <goal name="VC sin_minus.1.0.0" expl="postcondition">
    <transf name="replace" arg1="(real_to_ang ((-. x) /. (ttwo *. pi)))" arg2="(real_to_ang (-.(x /. (ttwo *. pi))))">
     <goal name="VC sin_minus.1.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="real_to_ang_inv">
      <goal name="VC sin_minus.1.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="ang_inv_to_conjugate">
       <goal name="VC sin_minus.1.0.0.0.0.0" expl="postcondition">
       <proof prover="6" obsolete="true"><result status="valid" time="2.05" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sin_minus.1.0.0.0.1" expl="rewrite premises">
      <transf name="apply" arg1="real_div">
       <goal name="VC sin_minus.1.0.0.0.1.0" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="210"/></proof>
       </goal>
       <goal name="VC sin_minus.1.0.0.0.1.1" expl="apply premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.68"/></proof>
       </goal>
       <goal name="VC sin_minus.1.0.0.0.1.2" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="1.92" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sin_minus.1.0.0.1" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="0.70"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sin_minus.1.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="210"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sin_minus.1.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC symetries_vert" expl="VC for symetries_vert">
 <transf name="split_vc" >
  <goal name="VC symetries_vert.0" expl="postcondition">
  <transf name="rewrite" arg1="sin_add">
   <goal name="VC symetries_vert.0.0" expl="postcondition">
   <transf name="replace" arg1="((pi /. ttwo) -. x)" arg2="((pi /. ttwo) +. -. x)">
    <goal name="VC symetries_vert.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="sin_add">
     <goal name="VC symetries_vert.0.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(cos (-. x))" arg2="(cos x)">
      <goal name="VC symetries_vert.0.0.0.0.0" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="valid" time="0.57"/></proof>
      </goal>
      <goal name="VC symetries_vert.0.0.0.0.1" expl="equality hypothesis">
      <transf name="rewrite" arg1="cos_def">
       <goal name="VC symetries_vert.0.0.0.0.1.0" expl="equality hypothesis">
       <proof prover="4" obsolete="true"><result status="valid" time="1.16"/></proof>
       </goal>
       <goal name="VC symetries_vert.0.0.0.0.1.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="1.83" steps="210"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC symetries_vert.0.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="2.19" steps="210"/></proof>
     </goal>
     <goal name="VC symetries_vert.0.0.0.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.80" steps="210"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC symetries_vert.0.0.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="1.86" steps="210"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC symetries_vert.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="210"/></proof>
   </goal>
   <goal name="VC symetries_vert.0.2" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC symetries_vert.1" expl="postcondition">
  <transf name="rewrite" arg1="cos_add">
   <goal name="VC symetries_vert.1.0" expl="postcondition">
   <transf name="eliminate_definition" >
    <goal name="VC symetries_vert.1.0.0" expl="postcondition">
    <transf name="rewrite" arg1="(-.)_def">
     <goal name="VC symetries_vert.1.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="(-.)_def">
      <goal name="VC symetries_vert.1.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cos_add">
       <goal name="VC symetries_vert.1.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="cos_minus">
        <goal name="VC symetries_vert.1.0.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="cos_half_pi">
         <goal name="VC symetries_vert.1.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="sin_minus">
          <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="sin_half_pi">
           <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="rewrite" arg1="zero_add_t">
            <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="rewrite" arg1="(-.)_def">
             <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
             <transf name="rewrite" arg1="zero_add_t">
              <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <proof prover="1" obsolete="true"><result status="valid" time="0.68"/></proof>
              </goal>
              <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="1" obsolete="true"><result status="valid" time="0.69"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
            <proof prover="1" obsolete="true"><result status="valid" time="0.66"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC symetries_vert.1.0.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="0.41" steps="222"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC symetries_vert.1.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.38" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC symetries_vert.1.0.0.0.0.1" expl="rewrite premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.70"/></proof>
       </goal>
       <goal name="VC symetries_vert.1.0.0.0.0.2" expl="rewrite premises">
       <proof prover="0" obsolete="true"><result status="valid" time="3.35"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC symetries_vert.1.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.91" steps="212"/></proof>
   </goal>
   <goal name="VC symetries_vert.1.2" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="210"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pi_minus" expl="VC for pi_minus">
 <transf name="split_vc" >
  <goal name="VC pi_minus.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="208"/></proof>
  </goal>
  <goal name="VC pi_minus.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.65" steps="212"/></proof>
  </goal>
  <goal name="VC pi_minus.2" expl="postcondition">
  <transf name="replace" arg1="(pi -. x)" arg2="((pi /. ttwo) +. ((pi /. ttwo) -. x))">
   <goal name="VC pi_minus.2.0" expl="postcondition">
   <transf name="rewrite" arg1="H1">
    <goal name="VC pi_minus.2.0.0" expl="postcondition">
    <transf name="assert" arg1="(forall a b. a-. (a-.b) = b)">
     <goal name="VC pi_minus.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pi_minus.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="h">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pi_minus.2.0.0.1" expl="postcondition">
     <proof prover="1" obsolete="true"><result status="valid" time="0.73"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pi_minus.2.1" expl="equality hypothesis">
   <transf name="eliminate_definition" >
    <goal name="VC pi_minus.2.1.0" expl="equality hypothesis">
    <transf name="rewrite" arg1="(-.)_def">
     <goal name="VC pi_minus.2.1.0.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="(-.)_def">
      <goal name="VC pi_minus.2.1.0.0.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="add_assoc_rev">
       <goal name="VC pi_minus.2.1.0.0.0.0" expl="equality hypothesis">
       <transf name="apply" arg1="add_eq_t">
        <goal name="VC pi_minus.2.1.0.0.0.0.0" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="0.67"/></proof>
        </goal>
        <goal name="VC pi_minus.2.1.0.0.0.0.1" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.38" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pi_minus.3" expl="postcondition">
  <transf name="replace" arg1="(pi -. x)" arg2="((pi /. ttwo) +. ((pi /. ttwo) -. x))">
   <goal name="VC pi_minus.3.0" expl="postcondition">
   <transf name="rewrite" arg1="H1">
    <goal name="VC pi_minus.3.0.0" expl="postcondition">
    <transf name="assert" arg1="(forall a b. a-. (a-.b) = b)">
     <goal name="VC pi_minus.3.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pi_minus.3.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="h">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pi_minus.3.0.0.1" expl="postcondition">
     <proof prover="1" obsolete="true"><result status="valid" time="0.70"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pi_minus.3.1" expl="equality hypothesis">
   <transf name="eliminate_definition" >
    <goal name="VC pi_minus.3.1.0" expl="equality hypothesis">
    <transf name="rewrite" arg1="(-.)_def">
     <goal name="VC pi_minus.3.1.0.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="(-.)_def">
      <goal name="VC pi_minus.3.1.0.0.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="add_assoc_rev">
       <goal name="VC pi_minus.3.1.0.0.0.0" expl="equality hypothesis">
       <transf name="apply" arg1="add_eq_t">
        <goal name="VC pi_minus.3.1.0.0.0.0.0" expl="apply premises">
        <proof prover="1" obsolete="true"><result status="valid" time="0.69"/></proof>
        </goal>
        <goal name="VC pi_minus.3.1.0.0.0.0.1" expl="apply premises">
        <proof prover="6" obsolete="true"><result status="valid" time="0.38" steps="228"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_plus_pi_pos" expl="VC for sin_plus_pi_pos">
 <transf name="split_vc" >
  <goal name="VC sin_plus_pi_pos.0" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="212"/></proof>
  </goal>
  <goal name="VC sin_plus_pi_pos.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.29" steps="212"/></proof>
  </goal>
  <goal name="VC sin_plus_pi_pos.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
  </goal>
  <goal name="VC sin_plus_pi_pos.3" expl="postcondition">
  <transf name="destruct" arg1="H1">
   <goal name="VC sin_plus_pi_pos.3.0" expl="postcondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.72"/></proof>
   </goal>
   <goal name="VC sin_plus_pi_pos.3.1" expl="postcondition">
   <transf name="replace" arg1="(pi *. (x +. i_to_c k))" arg2="(pi *. (x +. i_to_c (k-&#39;&#39;1))+. pi)">
    <goal name="VC sin_plus_pi_pos.3.1.0" expl="postcondition">
    <transf name="eliminate_let" >
     <goal name="VC sin_plus_pi_pos.3.1.0.0" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="VC sin_plus_pi_pos.3.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="sin_add">
       <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="cos_pi">
        <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="H1">
         <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="add_zero_t">
          <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="assert" arg1="(forall a. -.a *. (-. c_one) =a)">
           <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.0.0.0" expl="asserted formula">
           <transf name="split_vc" >
            <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0" expl="asserted formula">
            <transf name="rewrite" arg1="minus_out">
             <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula">
             <proof prover="4" obsolete="true"><result status="valid" time="3.59"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.0.0.1" expl="postcondition">
           <proof prover="6" obsolete="true"><result status="valid" time="2.06" steps="216"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.0.1" expl="rewrite premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.78"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC sin_plus_pi_pos.3.1.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.61"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sin_plus_pi_pos.3.1.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.14" steps="216"/></proof>
       </goal>
       <goal name="VC sin_plus_pi_pos.3.1.0.0.0.2" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sin_plus_pi_pos.3.1.1" expl="equality hypothesis">
    <transf name="replace" arg1="(i_to_c k)" arg2="(i_to_c (k-&#39;&#39;1+&#39;1))">
     <goal name="VC sin_plus_pi_pos.3.1.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_add_rev">
      <goal name="VC sin_plus_pi_pos.3.1.1.0.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="mult_distr_add_r">
       <goal name="VC sin_plus_pi_pos.3.1.1.0.0.0" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC sin_plus_pi_pos.3.1.1.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="mult_distr_add_r">
         <goal name="VC sin_plus_pi_pos.3.1.1.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="mult_distr_add_r">
          <goal name="VC sin_plus_pi_pos.3.1.1.0.0.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="add_assoc_rev">
           <goal name="VC sin_plus_pi_pos.3.1.1.0.0.0.0.0.0.0" expl="apply premises">
           <proof prover="1" obsolete="true"><result status="valid" time="0.69"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sin_plus_pi_pos.3.1.1.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="212"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sin_plus_pi_pos.4" expl="postcondition">
  <transf name="destruct" arg1="H2">
   <goal name="VC sin_plus_pi_pos.4.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="2.01" steps="217"/></proof>
   </goal>
   <goal name="VC sin_plus_pi_pos.4.1" expl="postcondition">
   <transf name="replace" arg1="(pi *. (x +. i_to_c k))" arg2="(pi *. (x +. i_to_c (k-&#39;&#39;1))+. pi)">
    <goal name="VC sin_plus_pi_pos.4.1.0" expl="postcondition">
    <transf name="eliminate_let" >
     <goal name="VC sin_plus_pi_pos.4.1.0.0" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="VC sin_plus_pi_pos.4.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="sin_add">
       <goal name="VC sin_plus_pi_pos.4.1.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="cos_pi">
        <goal name="VC sin_plus_pi_pos.4.1.0.0.0.0.0" expl="postcondition">
        <proof prover="1" obsolete="true"><result status="valid" time="1.55"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sin_plus_pi_pos.4.1.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="1.96" steps="217"/></proof>
       </goal>
       <goal name="VC sin_plus_pi_pos.4.1.0.0.0.2" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sin_plus_pi_pos.4.1.1" expl="equality hypothesis">
    <transf name="replace" arg1="(i_to_c k)" arg2="(i_to_c (k-&#39;&#39;1+&#39;1))">
     <goal name="VC sin_plus_pi_pos.4.1.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_add_rev">
      <goal name="VC sin_plus_pi_pos.4.1.1.0.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="mult_distr_add_r">
       <goal name="VC sin_plus_pi_pos.4.1.1.0.0.0" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC sin_plus_pi_pos.4.1.1.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="mult_distr_add_r">
         <goal name="VC sin_plus_pi_pos.4.1.1.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="mult_distr_add_r">
          <goal name="VC sin_plus_pi_pos.4.1.1.0.0.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="add_assoc_rev">
           <goal name="VC sin_plus_pi_pos.4.1.1.0.0.0.0.0.0.0" expl="apply premises">
           <proof prover="1" obsolete="true"><result status="valid" time="0.73"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sin_plus_pi_pos.4.1.1.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_plus_pi" expl="VC for sin_plus_pi">
 <transf name="split_vc" >
  <goal name="VC sin_plus_pi.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="210"/></proof>
  </goal>
  <goal name="VC sin_plus_pi.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="210"/></proof>
  </goal>
  <goal name="VC sin_plus_pi.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.93" steps="214"/></proof>
  </goal>
  <goal name="VC sin_plus_pi.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="214"/></proof>
  </goal>
  <goal name="VC sin_plus_pi.4" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC sin_plus_pi.4.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="214"/></proof>
   </goal>
   <goal name="VC sin_plus_pi.4.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC sin_plus_pi.4.1.0" expl="postcondition">
    <transf name="replace" arg1="((x +. i_to_c k) +. i_to_c (-&#39; k))" arg2="x" arg3="in" arg4="H2">
     <goal name="VC sin_plus_pi.4.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="H2">
      <goal name="VC sin_plus_pi.4.1.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="214"/></proof>
      </goal>
      <goal name="VC sin_plus_pi.4.1.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.98" steps="217"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC sin_plus_pi.4.1.0.1" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_minus">
      <goal name="VC sin_plus_pi.4.1.0.1.0" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="4.35"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sin_plus_pi.5" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC sin_plus_pi.5.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="214"/></proof>
   </goal>
   <goal name="VC sin_plus_pi.5.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC sin_plus_pi.5.1.0" expl="postcondition">
    <transf name="replace" arg1="((x +. i_to_c k) +. i_to_c (-&#39; k))" arg2="x" arg3="in" arg4="H2">
     <goal name="VC sin_plus_pi.5.1.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
     </goal>
     <goal name="VC sin_plus_pi.5.1.0.1" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_minus">
      <goal name="VC sin_plus_pi.5.1.0.1.0" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="4.72"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_plus_pi_pos" expl="VC for cos_plus_pi_pos">
 <transf name="split_vc" >
  <goal name="VC cos_plus_pi_pos.0" expl="variant decrease">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="212"/></proof>
  </goal>
  <goal name="VC cos_plus_pi_pos.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.26" steps="212"/></proof>
  </goal>
  <goal name="VC cos_plus_pi_pos.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.26" steps="212"/></proof>
  </goal>
  <goal name="VC cos_plus_pi_pos.3" expl="postcondition">
  <transf name="destruct" arg1="H1">
   <goal name="VC cos_plus_pi_pos.3.0" expl="postcondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.86"/></proof>
   </goal>
   <goal name="VC cos_plus_pi_pos.3.1" expl="postcondition">
   <transf name="replace" arg1="(pi *. (x +. i_to_c k))" arg2="(pi *. (x +. i_to_c (k-&#39;&#39;1))+. pi)">
    <goal name="VC cos_plus_pi_pos.3.1.0" expl="postcondition">
    <transf name="eliminate_let" >
     <goal name="VC cos_plus_pi_pos.3.1.0.0" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="VC cos_plus_pi_pos.3.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cos_add">
       <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="H1">
        <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="sin_plus_pi">
         <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="cos_pi">
          <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="replace" arg1="(sin pi)" arg2="c_zero">
           <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="eliminate_definition" >
            <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="rewrite" arg1="(-.)_def">
             <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
             <transf name="rewrite" arg1="add_zero_t">
              <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <transf name="assert" arg1="(forall x. -. x *. (-. c_one) = x)">
               <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula">
               <transf name="split_vc" >
                <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula">
                <transf name="rewrite" arg1="minus_out">
                 <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula">
                 <proof prover="4" obsolete="true"><result status="valid" time="3.31"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
               <proof prover="0" obsolete="true"><result status="valid" time="3.45"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="0" obsolete="true"><result status="valid" time="4.82"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.0.0.1" expl="equality hypothesis">
           <proof prover="1" obsolete="true"><result status="valid" time="0.79"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
         </goal>
         <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.0.2" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.68"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cos_plus_pi_pos.3.1.0.0.0.0.1" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cos_plus_pi_pos.3.1.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.02" steps="216"/></proof>
       </goal>
       <goal name="VC cos_plus_pi_pos.3.1.0.0.0.2" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cos_plus_pi_pos.3.1.1" expl="equality hypothesis">
    <transf name="replace" arg1="(i_to_c k)" arg2="(i_to_c (k-&#39;&#39;1+&#39;1))">
     <goal name="VC cos_plus_pi_pos.3.1.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_add_rev">
      <goal name="VC cos_plus_pi_pos.3.1.1.0.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="mult_distr_add_r">
       <goal name="VC cos_plus_pi_pos.3.1.1.0.0.0" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC cos_plus_pi_pos.3.1.1.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="mult_distr_add_r">
         <goal name="VC cos_plus_pi_pos.3.1.1.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="mult_distr_add_r">
          <goal name="VC cos_plus_pi_pos.3.1.1.0.0.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="add_assoc_rev">
           <goal name="VC cos_plus_pi_pos.3.1.1.0.0.0.0.0.0.0" expl="apply premises">
           <proof prover="1" obsolete="true"><result status="valid" time="0.85"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cos_plus_pi_pos.3.1.1.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.26" steps="212"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cos_plus_pi_pos.4" expl="postcondition">
  <transf name="destruct" arg1="H2">
   <goal name="VC cos_plus_pi_pos.4.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="2.00" steps="217"/></proof>
   </goal>
   <goal name="VC cos_plus_pi_pos.4.1" expl="postcondition">
   <transf name="replace" arg1="(pi *. (x +. i_to_c k))" arg2="(pi *. (x +. i_to_c (k-&#39;&#39;1))+. pi)">
    <goal name="VC cos_plus_pi_pos.4.1.0" expl="postcondition">
    <transf name="eliminate_let" >
     <goal name="VC cos_plus_pi_pos.4.1.0.0" expl="postcondition">
     <transf name="split_all_full" >
      <goal name="VC cos_plus_pi_pos.4.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="cos_add">
       <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="H3">
        <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="sin_plus_pi1">
         <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="cos_pi">
          <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="eliminate_definition" >
           <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="rewrite" arg1="(-.)_def">
            <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="rewrite" arg1="add_zero_t">
             <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
             <proof prover="0" obsolete="true"><result status="valid" time="3.43"/></proof>
             </goal>
             <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
             <transf name="rewrite" arg1="mult_zero_t">
              <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
              <proof prover="0" obsolete="true"><result status="valid" time="3.62"/></proof>
              </goal>
              <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
              <proof prover="1" obsolete="true"><result status="valid" time="0.98"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.1" expl="rewrite premises">
         <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
         </goal>
         <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.0.2" expl="rewrite premises">
         <proof prover="0" obsolete="true"><result status="valid" time="0.68"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cos_plus_pi_pos.4.1.0.0.0.0.1" expl="rewrite premises">
        <proof prover="0" obsolete="true"><result status="valid" time="0.68"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cos_plus_pi_pos.4.1.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.00" steps="217"/></proof>
       </goal>
       <goal name="VC cos_plus_pi_pos.4.1.0.0.0.2" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="0.26" steps="212"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cos_plus_pi_pos.4.1.1" expl="equality hypothesis">
    <transf name="replace" arg1="(i_to_c k)" arg2="(i_to_c (k-&#39;&#39;1+&#39;1))">
     <goal name="VC cos_plus_pi_pos.4.1.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_add_rev">
      <goal name="VC cos_plus_pi_pos.4.1.1.0.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="mult_distr_add_r">
       <goal name="VC cos_plus_pi_pos.4.1.1.0.0.0" expl="equality hypothesis">
       <transf name="apply" arg1="goal_comm">
        <goal name="VC cos_plus_pi_pos.4.1.1.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="mult_distr_add_r">
         <goal name="VC cos_plus_pi_pos.4.1.1.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="mult_distr_add_r">
          <goal name="VC cos_plus_pi_pos.4.1.1.0.0.0.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="add_assoc_rev">
           <goal name="VC cos_plus_pi_pos.4.1.1.0.0.0.0.0.0.0" expl="apply premises">
           <proof prover="1" obsolete="true"><result status="valid" time="0.86"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cos_plus_pi_pos.4.1.1.1" expl="equality hypothesis">
     <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_plus_pi" expl="VC for cos_plus_pi">
 <transf name="split_vc" >
  <goal name="VC cos_plus_pi.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="210"/></proof>
  </goal>
  <goal name="VC cos_plus_pi.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="210"/></proof>
  </goal>
  <goal name="VC cos_plus_pi.2" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.83" steps="214"/></proof>
  </goal>
  <goal name="VC cos_plus_pi.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="214"/></proof>
  </goal>
  <goal name="VC cos_plus_pi.4" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC cos_plus_pi.4.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="214"/></proof>
   </goal>
   <goal name="VC cos_plus_pi.4.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cos_plus_pi.4.1.0" expl="postcondition">
    <transf name="replace" arg1="((x +. i_to_c k) +. i_to_c (-&#39; k))" arg2="x" arg3="in" arg4="H2">
     <goal name="VC cos_plus_pi.4.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="H2">
      <goal name="VC cos_plus_pi.4.1.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="214"/></proof>
      </goal>
      <goal name="VC cos_plus_pi.4.1.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.85" steps="217"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cos_plus_pi.4.1.0.1" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_minus">
      <goal name="VC cos_plus_pi.4.1.0.1.0" expl="equality hypothesis">
      <transf name="assert" arg1="(forall x y. x+.y +. -.y = x)">
       <goal name="VC cos_plus_pi.4.1.0.1.0.0" expl="asserted formula">
       <transf name="split_vc" >
        <goal name="VC cos_plus_pi.4.1.0.1.0.0.0" expl="asserted formula">
        <proof prover="4" obsolete="true"><result status="valid" time="4.74"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cos_plus_pi.4.1.0.1.0.1" expl="equality hypothesis">
       <proof prover="6" obsolete="true"><result status="valid" time="1.97" steps="218"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cos_plus_pi.5" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC cos_plus_pi.5.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="214"/></proof>
   </goal>
   <goal name="VC cos_plus_pi.5.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cos_plus_pi.5.1.0" expl="postcondition">
    <transf name="replace" arg1="((x +. i_to_c k) +. i_to_c (-&#39; k))" arg2="x" arg3="in" arg4="H2">
     <goal name="VC cos_plus_pi.5.1.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.74"/></proof>
     </goal>
     <goal name="VC cos_plus_pi.5.1.0.1" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_minus">
      <goal name="VC cos_plus_pi.5.1.0.1.0" expl="equality hypothesis">
      <transf name="assert" arg1="(forall x y. x+.y +. -.y = x)">
       <goal name="VC cos_plus_pi.5.1.0.1.0.0" expl="asserted formula">
       <transf name="split_vc" >
        <goal name="VC cos_plus_pi.5.1.0.1.0.0.0" expl="asserted formula">
        <proof prover="2" obsolete="true"><result status="valid" time="14.37"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cos_plus_pi.5.1.0.1.0.1" expl="equality hypothesis">
       <proof prover="6" obsolete="true"><result status="valid" time="2.17" steps="219"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_sin_plus_pi" expl="VC for mod_sin_plus_pi">
 <transf name="split_vc" >
  <goal name="VC mod_sin_plus_pi.0" expl="postcondition">
  <transf name="case" arg1="(even k)">
   <goal name="VC mod_sin_plus_pi.0.0" expl="true case (postcondition)">
   <proof prover="6" obsolete="true"><result status="valid" time="2.03" steps="212"/></proof>
   </goal>
   <goal name="VC mod_sin_plus_pi.0.1" expl="false case (postcondition)">
   <transf name="split_all_full" >
    <goal name="VC mod_sin_plus_pi.0.1.0" expl="false case (postcondition)">
    <transf name="rewrite" arg1="sin_plus_pi">
     <goal name="VC mod_sin_plus_pi.0.1.0.0" expl="false case (postcondition)">
     <proof prover="6" obsolete="true"><result status="valid" time="1.88" steps="212"/></proof>
     </goal>
     <goal name="VC mod_sin_plus_pi.0.1.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="210"/></proof>
     </goal>
     <goal name="VC mod_sin_plus_pi.0.1.0.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="2.57" steps="212"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_cos_plus_pi" expl="VC for mod_cos_plus_pi">
 <transf name="split_vc" >
  <goal name="VC mod_cos_plus_pi.0" expl="postcondition">
  <transf name="case" arg1="(even k)">
   <goal name="VC mod_cos_plus_pi.0.0" expl="true case (postcondition)">
   <proof prover="6" obsolete="true"><result status="valid" time="2.12" steps="212"/></proof>
   </goal>
   <goal name="VC mod_cos_plus_pi.0.1" expl="false case (postcondition)">
   <proof prover="0" obsolete="true"><result status="valid" time="0.68"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_mod_two_pi" expl="VC for sin_mod_two_pi">
 <transf name="split_vc" >
  <goal name="VC sin_mod_two_pi.0" expl="postcondition">
  <transf name="replace" arg1="(two_pi_i *. x)" arg2="(two_pi_i *. (dec_part x +. i_to_c ( int_part_int x)))">
   <goal name="VC sin_mod_two_pi.0.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="0.61"/></proof>
   </goal>
   <goal name="VC sin_mod_two_pi.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="2.75" steps="210"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_mod_two_pi" expl="VC for cos_mod_two_pi">
 <transf name="split_vc" >
  <goal name="VC cos_mod_two_pi.0" expl="postcondition">
  <transf name="replace" arg1="(two_pi_i *. x)" arg2="(two_pi_i *. (dec_part x +. i_to_c ( int_part_int x)))">
   <goal name="VC cos_mod_two_pi.0.0" expl="postcondition">
   <transf name="replace" arg1="((ttwo *. pi) *. x)" arg2="(pi *. (ttwo *. dec_part x +. i_to_c (2*&#39; int_part_int x)) )">
    <goal name="VC cos_mod_two_pi.0.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC cos_mod_two_pi.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="cos_plus_pi1">
      <goal name="VC cos_mod_two_pi.0.0.0.0.0" expl="postcondition">
      <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="208"/></proof>
      </goal>
      <goal name="VC cos_mod_two_pi.0.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.85" steps="210"/></proof>
      </goal>
      <goal name="VC cos_mod_two_pi.0.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.87" steps="210"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cos_mod_two_pi.0.0.1" expl="equality hypothesis">
    <transf name="rewrite" arg1="i_to_c_mult_rev">
     <goal name="VC cos_mod_two_pi.0.0.1.0" expl="equality hypothesis">
     <transf name="replace" arg1="(i_to_c 2)" arg2="ttwo">
      <goal name="VC cos_mod_two_pi.0.0.1.0.0" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="0.70"/></proof>
      </goal>
      <goal name="VC cos_mod_two_pi.0.0.1.0.1" expl="equality hypothesis">
      <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="208"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_mod_two_pi.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="2.60" steps="210"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_modulus_c_one_minus" expl="VC for square_modulus_c_one_minus">
 <transf name="split_vc" >
  <goal name="VC square_modulus_c_one_minus.0" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC square_modulus_c_one_minus.0.0" expl="postcondition">
   <transf name="rewrite" arg1="modulus_def">
    <goal name="VC square_modulus_c_one_minus.0.0.0" expl="postcondition">
    <transf name="replace" arg1="(t_real_part (c_one -. ang_exp (real_to_ang phi)))" arg2="(c_one -. cos (ttwo *.(pi*.phi)))">
     <goal name="VC square_modulus_c_one_minus.0.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(t_im_part (c_one -. ang_exp (real_to_ang phi)))" arg2="(-. sin (ttwo *. (pi*.phi)))">
      <goal name="VC square_modulus_c_one_minus.0.0.0.0.0" expl="postcondition">
      <transf name="assert" arg1="(forall x. real_ x -&gt; (-. x) *.  (-. x) = cpower x 2)">
       <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.0" expl="asserted formula">
       <proof prover="0" obsolete="true"><result status="valid" time="3.56"/></proof>
       </goal>
       <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1" expl="postcondition">
       <transf name="rewrite" arg1="h">
        <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0" expl="postcondition">
        <transf name="assert" arg1="(forall x. c_zero &lt;=. x -&gt; cpower (square_rt x) 2 = x)">
         <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.0" expl="asserted formula">
         <proof prover="0" obsolete="true"><result status="valid" time="3.43"/></proof>
         </goal>
         <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1" expl="postcondition">
         <transf name="rewrite" arg1="h">
          <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0" expl="postcondition">
          <transf name="rewrite" arg1="triang_n">
           <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0" expl="postcondition">
           <transf name="assert" arg1="(forall a b c d. a+. b-.c+.d = b+.d+.a-.c)">
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.0" expl="asserted formula">
            <transf name="split_vc" >
             <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.0.0" expl="asserted formula">
             <transf name="rewrite" arg1="(-.)_def">
              <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="asserted formula">
              <transf name="rewrite" arg1="(-.)_def">
               <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.0.0.0.0" expl="asserted formula">
               <proof prover="6" obsolete="true"><result status="valid" time="0.33" steps="220"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1" expl="postcondition">
            <transf name="rewrite" arg1="h">
             <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0" expl="postcondition">
             <transf name="replace" arg1="((cos (ttwo *. (pi *. phi)) *. cos (ttwo *. (pi *. phi)))
     +. cpower (sin (ttwo *. (pi *. phi))) 2)" arg2="c_one">
              <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0" expl="postcondition">
              <transf name="replace" arg1="(c_one +. (c_one *. c_one))" arg2="ttwo">
               <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0" expl="postcondition">
               <transf name="replace" arg1="(ttwo -. ((ttwo *. c_one) *. cos (ttwo *. (pi *. phi))))" arg2="(ttwo *. (c_one -.  cos (ttwo *. (pi *. phi))))">
                <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0" expl="postcondition">
                <transf name="replace" arg1="(c_one -. cos (ttwo *. (pi *. phi)))" arg2="(ttwo *. cpower (sin (pi*.phi))2)">
                 <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.0" expl="postcondition">
                 <transf name="replace" arg1="(ttwo *. (ttwo *. cpower (sin (pi *. phi)) 2))" arg2="(ttwo *. ttwo *. cpower (sin (pi *. phi)) 2)">
                  <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.0.0" expl="postcondition">
                  <transf name="apply" arg1="mult_eq_t">
                   <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises">
                   <proof prover="0" obsolete="true"><result status="valid" time="3.33"/></proof>
                   </goal>
                   <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.0.0.1" expl="apply premises">
                   <proof prover="4" obsolete="true"><result status="valid" time="1.59"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.0.1" expl="equality hypothesis">
                  <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1" expl="equality hypothesis">
                 <transf name="rewrite" arg1="cos_two_x">
                  <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0" expl="equality hypothesis">
                  <transf name="assert" arg1="(forall a b c. a = b+.c -&gt; a-.(b-.c) = ttwo *.c)">
                   <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0" expl="asserted formula">
                   <transf name="split_vc" >
                    <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0" expl="asserted formula">
                    <transf name="rewrite" arg1="(-.)_def">
                     <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0" expl="asserted formula">
                     <transf name="rewrite" arg1="(-.)_def">
                      <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0" expl="asserted formula">
                      <transf name="replace" arg1="(ttwo *. c)" arg2="(c+. c)">
                       <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula">
                       <transf name="rewrite" arg1="H">
                        <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula">
                        <transf name="assert" arg1="(forall a b c. a +. (-. (b+.c)) = a+. -. b -.c)">
                         <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula">
                         <proof prover="0" obsolete="true"><result status="valid" time="3.29"/></proof>
                         </goal>
                         <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="asserted formula">
                         <transf name="rewrite" arg1="h1">
                          <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.1.0" expl="asserted formula">
                          <transf name="replace" arg1="((b +. c) +. (-. b))" arg2="c">
                           <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="asserted formula">
                           <proof prover="1" obsolete="true"><result status="valid" time="0.68"/></proof>
                           </goal>
                           <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis">
                           <proof prover="4" obsolete="true"><result status="valid" time="4.16"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis">
                       <proof prover="0" obsolete="true"><result status="valid" time="3.33"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.0.1" expl="equality hypothesis">
                   <proof prover="4" obsolete="true"><result status="valid" time="1.65"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.0.1.1" expl="rewrite premises">
                  <proof prover="1" obsolete="true"><result status="valid" time="0.67"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.1" expl="equality hypothesis">
                <transf name="rewrite" arg1="(-.)_def">
                 <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.1.0" expl="equality hypothesis">
                 <transf name="rewrite" arg1="(-.)_def">
                  <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.1.0.0" expl="equality hypothesis">
                  <transf name="rewrite" arg1="mult_distr_add_r">
                   <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.1.0.0.0" expl="equality hypothesis">
                   <transf name="apply" arg1="add_eq_t">
                    <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises">
                    <proof prover="0" obsolete="true"><result status="valid" time="3.33"/></proof>
                    </goal>
                    <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.0.1.0.0.0.1" expl="apply premises">
                    <proof prover="1" obsolete="true"><result status="valid" time="0.73"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.0.1" expl="equality hypothesis">
               <proof prover="0" obsolete="true"><result status="valid" time="4.09"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.1" expl="equality hypothesis">
              <transf name="rewrite" arg1="cpower_two_rev">
               <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.1.0" expl="equality hypothesis">
               <transf name="rewrite" arg1="cos_sin_square_add">
                <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.1.0.0" expl="equality hypothesis">
                <proof prover="6" obsolete="true"><result status="valid" time="0.35" steps="220"/></proof>
                </goal>
                <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.1.0.1" expl="rewrite premises">
                <transf name="apply" arg1="real_mult">
                 <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.1.0.1.0" expl="apply premises">
                 <proof prover="0" obsolete="true"><result status="valid" time="3.32"/></proof>
                 </goal>
                 <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.0.0.1.0.1.0.1.1" expl="apply premises">
                 <proof prover="1" obsolete="true"><result status="valid" time="0.83"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1" expl="rewrite premises">
          <transf name="apply" arg1="add_pos">
           <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0" expl="apply premises">
           <transf name="rewrite" arg1="cpower_two_rev">
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0" expl="apply premises">
            <transf name="assert" arg1="(forall x. real_ x -&gt; c_zero &lt;=. cpower x 2)">
             <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.0" expl="asserted formula">
             <proof prover="0" obsolete="true"><result status="valid" time="3.82"/></proof>
             </goal>
             <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1" expl="apply premises">
             <transf name="apply" arg1="h">
              <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0" expl="apply premises">
              <transf name="rewrite" arg1="(-.)_def">
               <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0" expl="apply premises">
               <transf name="apply" arg1="real_add">
                <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.0" expl="apply premises">
                <proof prover="0" obsolete="true"><result status="valid" time="3.43"/></proof>
                </goal>
                <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.1" expl="apply premises">
                <transf name="assert" arg1="(forall x. real_ x -&gt; real_ (-.x))">
                 <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.1.0" expl="asserted formula">
                 <proof prover="0" obsolete="true"><result status="valid" time="4.24"/></proof>
                 </goal>
                 <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.1.1" expl="apply premises">
                 <transf name="apply" arg1="h">
                  <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.1.1.0" expl="apply premises">
                  <transf name="apply" arg1="cos_spec">
                   <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.1.1.0.0" expl="apply premises">
                   <transf name="apply" arg1="real_mult">
                    <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.1.1.0.0.0" expl="apply premises">
                    <proof prover="0" obsolete="true"><result status="valid" time="4.20"/></proof>
                    </goal>
                    <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.0.0.1.0.0.1.1.0.0.1" expl="apply premises">
                    <proof prover="1" obsolete="true"><result status="valid" time="0.64"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.1" expl="apply premises">
           <transf name="assert" arg1="(forall x. real_ x -&gt; c_zero &lt;=. cpower x 2)">
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.1.0" expl="asserted formula">
            <proof prover="0" obsolete="true"><result status="valid" time="4.35"/></proof>
            </goal>
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.1.1" expl="apply premises">
            <transf name="apply" arg1="h">
             <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.1.1.0" expl="apply premises">
             <transf name="apply" arg1="sin_spec">
              <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.1.1.0.0" expl="apply premises">
              <transf name="apply" arg1="real_mult">
               <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.1.1.0.0.0" expl="apply premises">
               <proof prover="0" obsolete="true"><result status="valid" time="4.55"/></proof>
               </goal>
               <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.0.1.1.1.1.0.0.1" expl="apply premises">
               <proof prover="1" obsolete="true"><result status="valid" time="0.71"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.1" expl="rewrite premises">
        <transf name="apply" arg1="sin_spec">
         <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.1.0" expl="apply premises">
         <transf name="apply" arg1="real_mult">
          <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.1.0.0" expl="apply premises">
          <proof prover="0" obsolete="true"><result status="valid" time="4.07"/></proof>
          </goal>
          <goal name="VC square_modulus_c_one_minus.0.0.0.0.0.1.1.0.1" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.67"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC square_modulus_c_one_minus.0.0.0.0.1" expl="equality hypothesis">
      <transf name="rewrite" arg1="(-.)_def">
       <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="t_im_part_add">
        <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0" expl="equality hypothesis">
        <transf name="rewrite" arg1="zero_add_t">
         <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0" expl="equality hypothesis">
         <transf name="rewrite" arg1="ang_exp_def">
          <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0" expl="equality hypothesis">
          <transf name="rewrite" arg1="real_to_ang_int_dec_part">
           <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.0" expl="equality hypothesis">
           <transf name="rewrite" arg1="meas_value">
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.0.0" expl="equality hypothesis">
            <transf name="rewrite" arg1="mult_assoc_rev">
             <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.0.0.0" expl="equality hypothesis">
             <transf name="rewrite" arg1="sin_mod_two_pi">
              <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="equality hypothesis">
              <proof prover="1" obsolete="true"><result status="valid" time="0.86"/></proof>
              </goal>
              <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises">
            <proof prover="0" obsolete="true"><result status="valid" time="4.18"/></proof>
            </goal>
            <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises">
            <proof prover="0" obsolete="true"><result status="valid" time="4.53"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
           <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC square_modulus_c_one_minus.0.0.0.0.1.0.0.1" expl="rewrite premises">
         <proof prover="1" obsolete="true"><result status="valid" time="0.92"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC square_modulus_c_one_minus.0.0.0.1" expl="equality hypothesis">
     <transf name="replace" arg1="(ttwo *. (pi *. phi))" arg2="(ttwo *. pi *. phi)">
      <goal name="VC square_modulus_c_one_minus.0.0.0.1.0" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="0.83"/></proof>
      </goal>
      <goal name="VC square_modulus_c_one_minus.0.0.0.1.1" expl="equality hypothesis">
      <proof prover="6" obsolete="true"><result status="valid" time="0.35" steps="220"/></proof>
      </goal>
     </transf>
     <transf name="rewrite" arg1="t_real_part_subs">
      <goal name="VC square_modulus_c_one_minus.0.0.0.1.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="(-.)_def">
       <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="(-.)_def">
        <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0" expl="equality hypothesis">
        <transf name="apply" arg1="add_eq_t">
         <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.0" expl="apply premises">
         <proof prover="1" obsolete="true"><result status="valid" time="0.83"/></proof>
         </goal>
         <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1" expl="apply premises">
         <transf name="replace" arg1="(ttwo *. (pi *. phi))" arg2="(ttwo *. pi *. phi)">
          <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0" expl="apply premises">
          <transf name="rewrite" arg1="cos_ang_exp_">
           <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0" expl="apply premises">
           <transf name="replace" arg1="(((ttwo *. pi) *. phi) /. (ttwo *. pi))" arg2="phi">
            <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises">
            <proof prover="6" obsolete="true"><result status="valid" time="0.55" steps="220"/></proof>
            </goal>
            <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0.1" expl="equality hypothesis">
            <transf name="assert" arg1="(forall a b. b&lt;&gt; c_zero -&gt; (b*.a)/.b = a)">
             <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0.1.0" expl="asserted formula">
             <transf name="split_vc" >
              <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0.1.0.0" expl="asserted formula">
              <transf name="replace" arg1="(b*.a)" arg2="(a*.b)">
               <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0.1.0.0.0" expl="asserted formula">
               <proof prover="0" obsolete="true"><result status="valid" time="4.59"/></proof>
               </goal>
               <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0.1.0.0.1" expl="equality hypothesis">
               <proof prover="6" obsolete="true"><result status="valid" time="0.35" steps="222"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.0.1.1" expl="equality hypothesis">
             <proof prover="1" obsolete="true"><result status="valid" time="0.70"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.1" expl="rewrite premises">
           <transf name="apply" arg1="real_mult">
            <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.1.0" expl="apply premises">
            <proof prover="1" obsolete="true"><result status="valid" time="0.77"/></proof>
            </goal>
            <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.0.1.1" expl="apply premises">
            <proof prover="6" obsolete="true"><result status="valid" time="0.33" steps="220"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC square_modulus_c_one_minus.0.0.0.1.0.0.0.1.1" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_null_sine" expl="VC for non_null_sine">
 <transf name="split_vc" >
  <goal name="VC non_null_sine.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="210"/></proof>
  </goal>
  <goal name="VC non_null_sine.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="5.03" steps="216"/></proof>
  </goal>
  <goal name="VC non_null_sine.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC non_null_sine.2.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="3.55" steps="218"/></proof>
   </goal>
   <goal name="VC non_null_sine.2.1" expl="precondition">
   <transf name="replace" arg1="c_zero" arg2="(c_zero *. (c_one/.pi))">
    <goal name="VC non_null_sine.2.1.0" expl="precondition">
    <transf name="replace" arg1="(x/.pi)" arg2="(x*. (c_one/.pi))">
     <goal name="VC non_null_sine.2.1.0.0" expl="precondition">
     <transf name="apply" arg1="compat_inf_mult">
      <goal name="VC non_null_sine.2.1.0.0.0" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.30" steps="216"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.1.0.0.1" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="4.54" steps="218"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.1.0.0.2" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="4.73" steps="218"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.1.0.0.3" expl="apply premises">
      <proof prover="1" obsolete="true"><result status="valid" time="0.95"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.1.0.0.4" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="3.37" steps="218"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_sine.2.1.0.1" expl="equality hypothesis">
     <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_sine.2.1.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="3.44" steps="218"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_sine.2.2" expl="precondition">
   <transf name="replace" arg1="(x/.pi)" arg2="(x*. (c_one/.pi))">
    <goal name="VC non_null_sine.2.2.0" expl="precondition">
    <transf name="replace" arg1="(c_one /.ttwo)" arg2="((pi/.ttwo) *. (c_one/.pi))">
     <goal name="VC non_null_sine.2.2.0.0" expl="precondition">
     <transf name="apply" arg1="compat_order_mult">
      <goal name="VC non_null_sine.2.2.0.0.0" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="216"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.2.0.0.1" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="3.50" steps="218"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.2.0.0.2" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="3.59" steps="218"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.2.0.0.3" expl="apply premises">
      <proof prover="1" obsolete="true"><result status="valid" time="0.97"/></proof>
      </goal>
      <goal name="VC non_null_sine.2.2.0.0.4" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="4.66" steps="218"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_sine.2.2.0.1" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="1.22"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_sine.2.2.1" expl="equality hypothesis">
    <proof prover="0" obsolete="true"><result status="valid" time="0.56"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_sine.3" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="4.10" steps="216"/></proof>
  </goal>
  <goal name="VC non_null_sine.4" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="5.26" steps="220"/></proof>
  </goal>
  <goal name="VC non_null_sine.5" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC non_null_sine.5.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="3.75" steps="222"/></proof>
   </goal>
   <goal name="VC non_null_sine.5.1" expl="precondition">
   <transf name="assert" arg1="(x/.pi &lt;. c_one)">
    <goal name="VC non_null_sine.5.1.0" expl="asserted formula">
    <transf name="replace" arg1="c_one" arg2="(pi *. (c_one /.pi))">
     <goal name="VC non_null_sine.5.1.0.0" expl="asserted formula">
     <transf name="replace" arg1="(x/.pi)" arg2="(x*. (c_one/.pi))">
      <goal name="VC non_null_sine.5.1.0.0.0" expl="asserted formula">
      <proof prover="6" obsolete="true"><result status="valid" time="6.95" steps="222"/></proof>
      </goal>
      <goal name="VC non_null_sine.5.1.0.0.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.53"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_sine.5.1.0.1" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="0.70"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_sine.5.1.1" expl="precondition">
    <proof prover="6" obsolete="true"><result status="valid" time="3.02" steps="224"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_sine.5.2" expl="precondition">
   <transf name="assert" arg1="((c_one /. ttwo) &lt;. x/.pi)">
    <goal name="VC non_null_sine.5.2.0" expl="asserted formula">
    <transf name="replace" arg1="(c_one /. ttwo)" arg2="((pi/.ttwo)*. (c_one/.pi))">
     <goal name="VC non_null_sine.5.2.0.0" expl="asserted formula">
     <transf name="replace" arg1="(x /.pi)" arg2="(x*. (c_one/.pi))">
      <goal name="VC non_null_sine.5.2.0.0.0" expl="asserted formula">
      <proof prover="2" obsolete="true"><result status="valid" time="9.87"/></proof>
      </goal>
      <goal name="VC non_null_sine.5.2.0.0.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.89"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_sine.5.2.0.1" expl="equality hypothesis">
     <proof prover="1" obsolete="true"><result status="valid" time="1.17"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_null_sine.5.2.1" expl="precondition">
    <transf name="assert" arg1="(-.(x/.pi) &lt;.  -. (c_one/.ttwo))">
     <goal name="VC non_null_sine.5.2.1.0" expl="asserted formula">
     <proof prover="6" obsolete="true"><result status="valid" time="3.96" steps="224"/></proof>
     </goal>
     <goal name="VC non_null_sine.5.2.1.1" expl="precondition">
     <transf name="eliminate_definition" >
      <goal name="VC non_null_sine.5.2.1.1.0" expl="precondition">
      <transf name="rewrite" arg1="(-.)_def">
       <goal name="VC non_null_sine.5.2.1.1.0.0" expl="precondition">
       <transf name="replace" arg1="(c_one /. ttwo)" arg2="(c_one+. (-. (c_one /.ttwo)))">
        <goal name="VC non_null_sine.5.2.1.1.0.0.0" expl="precondition">
        <proof prover="4" obsolete="true"><result status="valid" time="1.01"/></proof>
        </goal>
        <goal name="VC non_null_sine.5.2.1.1.0.0.1" expl="equality hypothesis">
        <transf name="replace" arg1="(c_one +. (-. (c_one /. ttwo)))" arg2="((ttwo/.ttwo) +. (-. (c_one /. ttwo)))">
         <goal name="VC non_null_sine.5.2.1.1.0.0.1.0" expl="equality hypothesis">
         <transf name="assert" arg1="(forall a b c. b&lt;&gt; c_zero -&gt; (a/.b)+.(c/.b) = (a+.c)/.b)">
          <goal name="VC non_null_sine.5.2.1.1.0.0.1.0.0" expl="asserted formula">
          <transf name="split_vc" >
           <goal name="VC non_null_sine.5.2.1.1.0.0.1.0.0.0" expl="asserted formula">
           <proof prover="0" obsolete="true"><result status="valid" time="4.50"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC non_null_sine.5.2.1.1.0.0.1.0.1" expl="equality hypothesis">
          <transf name="replace" arg1="(-. (c_one /. ttwo))" arg2="( (-.c_one /. ttwo))">
           <goal name="VC non_null_sine.5.2.1.1.0.0.1.0.1.0" expl="equality hypothesis">
           <transf name="rewrite" arg1="h">
            <goal name="VC non_null_sine.5.2.1.1.0.0.1.0.1.0.0" expl="equality hypothesis">
            <proof prover="1" obsolete="true"><result status="valid" time="0.79"/></proof>
            </goal>
            <goal name="VC non_null_sine.5.2.1.1.0.0.1.0.1.0.1" expl="rewrite premises">
            <proof prover="6" obsolete="true"><result status="valid" time="0.67" steps="236"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC non_null_sine.5.2.1.1.0.0.1.0.1.1" expl="equality hypothesis">
           <proof prover="0" obsolete="true"><result status="valid" time="3.51"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC non_null_sine.5.2.1.1.0.0.1.1" expl="equality hypothesis">
         <proof prover="0" obsolete="true"><result status="valid" time="3.68"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_null_sine.6" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC non_null_sine.6.0" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC non_null_sine.6.0.0" expl="postcondition">
    <transf name="replace" arg1="(pi *. (c_one -. (x /. pi)))" arg2="(pi -. x)" arg3="in" arg4="H">
     <goal name="VC non_null_sine.6.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(sin (pi *. c_zero))" arg2="c_zero" arg3="in" arg4="H">
      <goal name="VC non_null_sine.6.0.0.0.0" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="valid" time="0.70"/></proof>
      </goal>
      <goal name="VC non_null_sine.6.0.0.0.1" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="0.77"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_sine.6.0.0.1" expl="equality hypothesis">
     <transf name="eliminate_definition" >
      <goal name="VC non_null_sine.6.0.0.1.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="(-.)_def">
       <goal name="VC non_null_sine.6.0.0.1.0.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="mult_distr_add_r">
        <goal name="VC non_null_sine.6.0.0.1.0.0.0" expl="equality hypothesis">
        <transf name="rewrite" arg1="(-.)_def">
         <goal name="VC non_null_sine.6.0.0.1.0.0.0.0" expl="equality hypothesis">
         <transf name="apply" arg1="add_eq_t">
          <goal name="VC non_null_sine.6.0.0.1.0.0.0.0.0" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="0.71"/></proof>
          </goal>
          <goal name="VC non_null_sine.6.0.0.1.0.0.0.0.1" expl="apply premises">
          <transf name="rewrite" arg1="minus_out_right">
           <goal name="VC non_null_sine.6.0.0.1.0.0.0.0.1.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="4.40"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_null_sine.6.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC non_null_sine.6.1.0" expl="postcondition">
    <transf name="replace" arg1="(pi *. (c_one -. (x /. pi)))" arg2="(pi -. x)" arg3="in" arg4="H">
     <goal name="VC non_null_sine.6.1.0.0" expl="postcondition">
     <transf name="replace" arg1="(sin (pi *. c_zero))" arg2="c_zero" arg3="in" arg4="H">
      <goal name="VC non_null_sine.6.1.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H3" arg2="in" arg3="H">
       <goal name="VC non_null_sine.6.1.0.0.0.0" expl="postcondition">
       <proof prover="6" obsolete="true"><result status="valid" time="0.22" steps="222"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC non_null_sine.6.1.0.0.1" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="0.74"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_null_sine.6.1.0.1" expl="equality hypothesis">
     <transf name="eliminate_definition" >
      <goal name="VC non_null_sine.6.1.0.1.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="(-.)_def">
       <goal name="VC non_null_sine.6.1.0.1.0.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="mult_distr_add_r">
        <goal name="VC non_null_sine.6.1.0.1.0.0.0" expl="equality hypothesis">
        <transf name="rewrite" arg1="(-.)_def">
         <goal name="VC non_null_sine.6.1.0.1.0.0.0.0" expl="equality hypothesis">
         <transf name="apply" arg1="add_eq_t">
          <goal name="VC non_null_sine.6.1.0.1.0.0.0.0.0" expl="apply premises">
          <proof prover="1" obsolete="true"><result status="valid" time="1.02"/></proof>
          </goal>
          <goal name="VC non_null_sine.6.1.0.1.0.0.0.0.1" expl="apply premises">
          <transf name="rewrite" arg1="minus_out_right">
           <goal name="VC non_null_sine.6.1.0.1.0.0.0.0.1.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="4.26"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bounded_by_sine_one" expl="VC for bounded_by_sine_one">
 <transf name="split_vc" >
  <goal name="VC bounded_by_sine_one.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.38" steps="218"/></proof>
  </goal>
  <goal name="VC bounded_by_sine_one.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC bounded_by_sine_one.1.0" expl="precondition">
   <proof prover="1" obsolete="true"><result status="valid" time="0.76"/></proof>
   </goal>
   <goal name="VC bounded_by_sine_one.1.1" expl="precondition">
   <transf name="replace" arg1="(c_one /. ttwo)" arg2="((c_one /. i_to_c (power_ 2 (k +&#39; 1))) *. i_to_c (power_ 2 k))">
    <goal name="VC bounded_by_sine_one.1.1.0" expl="precondition">
    <proof prover="6" obsolete="true"><result status="valid" time="2.68" steps="220"/></proof>
    </goal>
    <goal name="VC bounded_by_sine_one.1.1.1" expl="equality hypothesis">
    <transf name="rewrite" arg1="power__sum">
     <goal name="VC bounded_by_sine_one.1.1.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="i_to_c_mult_rev">
      <goal name="VC bounded_by_sine_one.1.1.1.0.0" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="3.12"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bounded_by_sine_one.1.1.1.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="218"/></proof>
     </goal>
     <goal name="VC bounded_by_sine_one.1.1.1.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="218"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bounded_by_sine_one.2" expl="postcondition">
  <transf name="case" arg1="(c_zero &lt;=. x-.c_one)">
   <goal name="VC bounded_by_sine_one.2.0" expl="true case (postcondition)">
   <transf name="rewrite" arg1="mult_modulus_real">
    <goal name="VC bounded_by_sine_one.2.0.0" expl="true case (postcondition)">
    <transf name="rewrite" arg1="mult_modulus_real">
     <goal name="VC bounded_by_sine_one.2.0.0.0" expl="true case (postcondition)">
     <transf name="rewrite" arg1="modulus_real_pos" arg2="in" arg3="H">
      <goal name="VC bounded_by_sine_one.2.0.0.0.0" expl="true case (postcondition)">
      <transf name="rewrite" arg1="modulus_real_pos">
       <goal name="VC bounded_by_sine_one.2.0.0.0.0.0" expl="true case (postcondition)">
       <transf name="replace" arg1="(modulus (sin ((pi *. i_to_c (power_ 2 k)) *. x)))" arg2="(modulus (sin (pi *. ((x -. c_one) *. i_to_c (power_ 2 k)))))">
        <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.0" expl="true case (postcondition)">
        <transf name="replace" arg1="((ttwo *. (x -. c_one)) *. i_to_c (power_ 2 k))" arg2="(ttwo *. ((x -. c_one) *. i_to_c (power_ 2 k)))">
         <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.0.0" expl="true case (postcondition)">
         <transf name="apply" proved="true" arg1="H">
         </transf>
         </goal>
         <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1" expl="equality hypothesis">
        <transf name="replace" arg1="(pi *. ((x -. c_one) *. i_to_c (power_ 2 k)))" arg2="( pi *. ((i_to_c (power_ 2 k) *. x) +. i_to_c (-&#39; power_ 2 k)))">
         <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.0" expl="equality hypothesis">
         <transf name="rewrite" arg1="mod_sin_plus_pi">
          <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.0.0" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="220"/></proof>
          </goal>
          <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.0.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="3.58" steps="222"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1" expl="equality hypothesis">
         <transf name="eliminate_definition" >
          <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1.0" expl="equality hypothesis">
          <transf name="rewrite" arg1="(-.)_def">
           <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1.0.0" expl="equality hypothesis">
           <transf name="rewrite" arg1="mult_distr_add_r">
            <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1.0.0.0" expl="equality hypothesis">
            <transf name="rewrite" arg1="mult_distr_add_l">
             <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1.0.0.0.0" expl="equality hypothesis">
             <transf name="rewrite" arg1="mult_distr_add_r">
              <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1.0.0.0.0.0" expl="equality hypothesis">
              <transf name="apply" arg1="add_eq_t">
               <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises">
               <proof prover="6" obsolete="true"><result status="valid" time="0.60" steps="232"/></proof>
               </goal>
               <goal name="VC bounded_by_sine_one.2.0.0.0.0.0.1.1.0.0.0.0.0.1" expl="apply premises">
               <proof prover="4" obsolete="true"><result status="valid" time="4.97"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC bounded_by_sine_one.2.0.0.0.0.1" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="3.35" steps="222"/></proof>
       </goal>
       <goal name="VC bounded_by_sine_one.2.0.0.0.0.2" expl="rewrite premises">
       <proof prover="6" obsolete="true"><result status="valid" time="3.43" steps="222"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bounded_by_sine_one.2.0.0.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="2.94" steps="222"/></proof>
      </goal>
      <goal name="VC bounded_by_sine_one.2.0.0.0.2" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="220"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bounded_by_sine_one.2.0.0.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="2.78" steps="222"/></proof>
     </goal>
     <goal name="VC bounded_by_sine_one.2.0.0.2" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="220"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bounded_by_sine_one.2.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="220"/></proof>
    </goal>
    <goal name="VC bounded_by_sine_one.2.0.2" expl="rewrite premises">
    <proof prover="1" obsolete="true"><result status="valid" time="0.77"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bounded_by_sine_one.2.1" expl="false case (postcondition)">
   <transf name="replace" arg1="(modulus ((ttwo *. (x -. c_one)) *. i_to_c (power_ 2 k)))" arg2="(ttwo *. (modulus (x -. c_one) *. i_to_c (power_ 2 k)))">
    <goal name="VC bounded_by_sine_one.2.1.0" expl="false case (postcondition)">
    <transf name="replace" arg1="(modulus (sin ((pi *. i_to_c (power_ 2 k)) *. x)))" arg2="(modulus (sin (pi *. (modulus (x -. c_one) *. i_to_c (power_ 2 k)))))">
     <goal name="VC bounded_by_sine_one.2.1.0.0" expl="false case (postcondition)">
     <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="220"/></proof>
     </goal>
     <goal name="VC bounded_by_sine_one.2.1.0.1" expl="equality hypothesis">
     <transf name="replace" arg1="(modulus (x -. c_one))" arg2="(c_one -. x)">
      <goal name="VC bounded_by_sine_one.2.1.0.1.0" expl="equality hypothesis">
      <transf name="replace" arg1="((c_one -. x) *. i_to_c (power_ 2 k))" arg2="( (-. x *. i_to_c (power_ 2 k)) +. i_to_c (power_ 2 k))">
       <goal name="VC bounded_by_sine_one.2.1.0.1.0.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="mod_sin_plus_pi">
        <goal name="VC bounded_by_sine_one.2.1.0.1.0.0.0" expl="equality hypothesis">
        <transf name="replace" arg1="(pi *. ((-. x) *. i_to_c (power_ 2 k)))" arg2="(-.((pi *. i_to_c (power_ 2 k)) *. x) )">
         <goal name="VC bounded_by_sine_one.2.1.0.1.0.0.0.0" expl="equality hypothesis">
         <transf name="rewrite" arg1="sin_minus">
          <goal name="VC bounded_by_sine_one.2.1.0.1.0.0.0.0.0" expl="equality hypothesis">
          <proof prover="6" obsolete="true"><result status="valid" time="2.77" steps="222"/></proof>
          </goal>
          <goal name="VC bounded_by_sine_one.2.1.0.1.0.0.0.0.1" expl="rewrite premises">
          <proof prover="6" obsolete="true"><result status="valid" time="2.45" steps="222"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC bounded_by_sine_one.2.1.0.1.0.0.0.1" expl="equality hypothesis">
         <proof prover="6" obsolete="true"><result status="valid" time="2.77" steps="222"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bounded_by_sine_one.2.1.0.1.0.0.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="2.30" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC bounded_by_sine_one.2.1.0.1.0.1" expl="equality hypothesis">
       <transf name="eliminate_definition" >
        <goal name="VC bounded_by_sine_one.2.1.0.1.0.1.0" expl="equality hypothesis">
        <transf name="rewrite" arg1="(-.)_def">
         <goal name="VC bounded_by_sine_one.2.1.0.1.0.1.0.0" expl="equality hypothesis">
         <transf name="rewrite" arg1="mult_distr_add_l">
          <goal name="VC bounded_by_sine_one.2.1.0.1.0.1.0.0.0" expl="equality hypothesis">
          <transf name="apply" arg1="add_eq_t_rev">
           <goal name="VC bounded_by_sine_one.2.1.0.1.0.1.0.0.0.0" expl="apply premises">
           <proof prover="1" obsolete="true"><result status="valid" time="0.75"/></proof>
           </goal>
           <goal name="VC bounded_by_sine_one.2.1.0.1.0.1.0.0.0.1" expl="apply premises">
           <proof prover="6" obsolete="true"><result status="valid" time="0.36" steps="232"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC bounded_by_sine_one.2.1.0.1.1" expl="equality hypothesis">
      <proof prover="4" obsolete="true"><result status="valid" time="2.35"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC bounded_by_sine_one.2.1.1" expl="equality hypothesis">
    <transf name="rewrite" arg1="modulus_real_neg">
     <goal name="VC bounded_by_sine_one.2.1.1.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="modulus_real_neg">
      <goal name="VC bounded_by_sine_one.2.1.1.0.0" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.69"/></proof>
      </goal>
      <goal name="VC bounded_by_sine_one.2.1.1.0.1" expl="rewrite premises">
      <proof prover="6" obsolete="true"><result status="valid" time="2.23" steps="222"/></proof>
      </goal>
      <goal name="VC bounded_by_sine_one.2.1.1.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="0.72"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bounded_by_sine_one.2.1.1.1" expl="rewrite premises">
     <proof prover="6" obsolete="true"><result status="valid" time="2.51" steps="222"/></proof>
     </goal>
     <goal name="VC bounded_by_sine_one.2.1.1.2" expl="rewrite premises">
     <transf name="assert" arg1="(forall x y. x&lt;=. c_zero  -&gt; c_zero &lt;=. y -&gt; x*.y &lt;=. c_zero )">
      <goal name="VC bounded_by_sine_one.2.1.1.2.0" expl="asserted formula">
      <transf name="split_vc" >
       <goal name="VC bounded_by_sine_one.2.1.1.2.0.0" expl="asserted formula">
       <proof prover="0" obsolete="true"><result status="valid" time="0.96"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC bounded_by_sine_one.2.1.1.2.1" expl="rewrite premises">
      <transf name="apply" arg1="h">
       <goal name="VC bounded_by_sine_one.2.1.1.2.1.0" expl="apply premises">
       <transf name="assert" arg1="(forall x y. y&lt;=. c_zero  -&gt; c_zero &lt;=. x -&gt; x*.y &lt;=. c_zero )">
        <goal name="VC bounded_by_sine_one.2.1.1.2.1.0.0" expl="asserted formula">
        <transf name="split_vc" >
         <goal name="VC bounded_by_sine_one.2.1.1.2.1.0.0.0" expl="asserted formula">
         <proof prover="0" obsolete="true"><result status="valid" time="0.89"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC bounded_by_sine_one.2.1.1.2.1.0.1" expl="apply premises">
        <transf name="apply" arg1="h">
         <goal name="VC bounded_by_sine_one.2.1.1.2.1.0.1.0" expl="apply premises">
         <proof prover="1" obsolete="true"><result status="valid" time="0.88"/></proof>
         </goal>
         <goal name="VC bounded_by_sine_one.2.1.1.2.1.0.1.1" expl="apply premises">
         <proof prover="6" obsolete="true"><result status="valid" time="2.61" steps="222"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC bounded_by_sine_one.2.1.1.2.1.1" expl="apply premises">
       <proof prover="1" obsolete="true"><result status="valid" time="0.74"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_c_zero_sin" expl="VC for non_c_zero_sin">
 <transf name="split_vc" >
  <goal name="VC non_c_zero_sin.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC non_c_zero_sin.0.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="210"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_c_zero_sin.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC non_c_zero_sin.1.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="216"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_c_zero_sin.2" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC non_c_zero_sin.2.0" expl="precondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.30" steps="224"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_c_zero_sin.3" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC non_c_zero_sin.3.0" expl="postcondition">
   <transf name="replace" arg1="(dec_part x +. i_to_c (int_part_int x))" arg2="x" arg3="in" arg4="H">
    <goal name="VC non_c_zero_sin.3.0.0" expl="postcondition">
    <transf name="assert" arg1="(modulus (sin (pi *. x))&lt;&gt; c_zero)">
     <goal name="VC non_c_zero_sin.3.0.0.0" expl="asserted formula">
     <transf name="rewrite" arg1="H">
      <goal name="VC non_c_zero_sin.3.0.0.0.0" expl="asserted formula">
      <transf name="assert" arg1="((sin (pi *. dec_part x)) &lt;&gt; c_zero)">
       <goal name="VC non_c_zero_sin.3.0.0.0.0.0" expl="asserted formula">
       <transf name="assert" arg1="(c_zero &lt;.  sin (pi *. dec_part x))">
        <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0" expl="asserted formula">
        <transf name="apply" arg1="non_null_sine">
         <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0" expl="apply premises">
         <transf name="split_vc" >
          <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.0" expl="apply premises">
          <proof prover="6" obsolete="true"><result status="valid" time="2.25" steps="228"/></proof>
          </goal>
          <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1" expl="apply premises">
          <transf name="assert" arg1="((pi *. dec_part x) *. (c_one/.pi)&lt;. pi*. (c_one/.pi))">
           <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0" expl="asserted formula">
           <transf name="assert" arg1="(forall a b. b&lt;&gt; c_zero -&gt; (b*.a)*.(c_one/.b)=a)">
            <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0.0" expl="asserted formula">
            <transf name="split_vc" >
             <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula">
             <transf name="replace" arg1="(b*.a)" arg2="(a*.b)">
              <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula">
              <proof prover="0" obsolete="true"><result status="valid" time="0.62"/></proof>
              </goal>
              <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis">
              <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="228"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0.1" expl="asserted formula">
            <transf name="rewrite" arg1="h1">
             <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0.1.0" expl="asserted formula">
             <proof prover="1" obsolete="true"><result status="valid" time="0.87"/></proof>
             </goal>
             <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.0.1.1" expl="rewrite premises">
             <proof prover="6" obsolete="true"><result status="valid" time="3.20" steps="228"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1" expl="apply premises">
           <transf name="assert" arg1="(forall a b c.c_zero &lt;. c -&gt; a*.c &lt;. b*.c -&gt; a &lt;.b)">
            <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1.0" expl="asserted formula">
            <transf name="split_vc" >
             <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1.0.0" expl="asserted formula">
             <transf name="replace" arg1="a" arg2="(a*.c *. (c_one/.c))">
              <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1.0.0.0" expl="asserted formula">
              <transf name="replace" arg1="b" arg2="(b*.c *. (c_one/.c))">
               <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1.0.0.0.0" expl="asserted formula">
               <proof prover="6" obsolete="true"><result status="valid" time="2.75" steps="234"/></proof>
               </goal>
               <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1.0.0.0.1" expl="equality hypothesis">
               <proof prover="0" obsolete="true"><result status="valid" time="0.81"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1.0.0.1" expl="equality hypothesis">
              <proof prover="0" obsolete="true"><result status="valid" time="0.79"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC non_c_zero_sin.3.0.0.0.0.0.0.0.1.1.1" expl="apply premises">
            <proof prover="6" obsolete="true"><result status="valid" time="2.51" steps="230"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC non_c_zero_sin.3.0.0.0.0.0.1" expl="asserted formula">
        <proof prover="6" obsolete="true"><result status="valid" time="2.56" steps="230"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC non_c_zero_sin.3.0.0.0.0.1" expl="asserted formula">
       <proof prover="6" obsolete="true"><result status="valid" time="2.03" steps="230"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC non_c_zero_sin.3.0.0.1" expl="postcondition">
     <proof prover="1" obsolete="true"><result status="valid" time="0.77"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC non_c_zero_sin.3.0.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="2.16" steps="228"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_c_zero_sin_bounded_mod" expl="VC for non_c_zero_sin_bounded_mod">
 </goal>
 <goal name="VC non_ang_zero_bounded_mod" expl="VC for non_ang_zero_bounded_mod">
 </goal>
 <goal name="VC non_ang_zero_int_to_ang" expl="VC for non_ang_zero_int_to_ang">
 </goal>
 <goal name="VC modulus_ang_exp" expl="VC for modulus_ang_exp">
 <transf name="split_vc" >
  <goal name="VC modulus_ang_exp.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.79" steps="208"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Rotations">
 <goal name="VC sin_pos" expl="VC for sin_pos">
 <transf name="split_vc" >
  <goal name="VC sin_pos.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="210"/></proof>
  </goal>
  <goal name="VC sin_pos.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC sin_pos.1.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sin_pos_leq">
 <transf name="split_vc" >
  <goal name="sin_pos_leq.0">
  <transf name="case" arg1="(x = c_zero)">
   <goal name="sin_pos_leq.0.0" expl="true case">
   <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
   </goal>
   <goal name="sin_pos_leq.0.1" expl="false case">
   <transf name="case" arg1="(x = pi)">
    <goal name="sin_pos_leq.0.1.0" expl="false case (true case)">
    <proof prover="1" obsolete="true"><result status="valid" time="0.72"/></proof>
    </goal>
    <goal name="sin_pos_leq.0.1.1" expl="false case">
    <proof prover="2" obsolete="true"><result status="valid" time="1.46"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="sin_quarter_pi">
 <transf name="rewrite" arg1="sin_def">
  <goal name="sin_quarter_pi.0">
  <transf name="replace" arg1="(exp (im *. (pi /. i_to_c 4)))" arg2="(( squarert_two /. ttwo) +. (im *. ( squarert_two /. ttwo)))">
   <goal name="sin_quarter_pi.0.0">
   <proof prover="6" obsolete="true"><result status="valid" time="1.95" steps="208"/></proof>
   </goal>
   <goal name="sin_quarter_pi.0.1" expl="equality hypothesis">
   <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sin_quarter_pi.1" expl="rewrite premises">
  <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="208"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sin_pi">
 <transf name="split_vc" >
  <goal name="sin_pi.0">
  <proof prover="1" obsolete="true"><result status="valid" time="0.68"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_inv" expl="VC for cos_inv">
 <transf name="split_vc" >
  <goal name="VC cos_inv.0" expl="postcondition">
  <transf name="rewrite" arg1="cos_def">
   <goal name="VC cos_inv.0.0" expl="postcondition">
   <transf name="rewrite" arg1="exp_minus">
    <goal name="VC cos_inv.0.0.0" expl="postcondition">
    <proof prover="1" obsolete="true"><result status="valid" time="0.69"/></proof>
    </goal>
    <goal name="VC cos_inv.0.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="212"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_inv.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_inv" expl="VC for sin_inv">
 <transf name="split_vc" >
  <goal name="VC sin_inv.0" expl="postcondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.95" steps="214"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_ang_mult_plus_one" expl="VC for cos_ang_mult_plus_one">
 <transf name="split_vc" >
  <goal name="VC cos_ang_mult_plus_one.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="2.00" steps="216"/></proof>
  </goal>
  <goal name="VC cos_ang_mult_plus_one.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="216"/></proof>
  </goal>
  <goal name="VC cos_ang_mult_plus_one.2" expl="postcondition">
  <transf name="replace" arg1="(x *. i_to_c i)" arg2="(x *. i_to_c (i-1) +. x)">
   <goal name="VC cos_ang_mult_plus_one.2.0" expl="postcondition">
   <transf name="apply" arg1="cos_add">
    <goal name="VC cos_ang_mult_plus_one.2.0.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="2.37" steps="218"/></proof>
    </goal>
    <goal name="VC cos_ang_mult_plus_one.2.0.1" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="216"/></proof>
    </goal>
   </transf>
   <transf name="rewrite" arg1="cos_add">
    <goal name="VC cos_ang_mult_plus_one.2.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="216"/></proof>
    </goal>
    <goal name="VC cos_ang_mult_plus_one.2.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="2.40" steps="218"/></proof>
    </goal>
    <goal name="VC cos_ang_mult_plus_one.2.0.2" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cos_ang_mult_plus_one.2.1" expl="equality hypothesis">
   <transf name="replace" arg1="(i_to_c i)" arg2="(i_to_c (i-1+1))">
    <goal name="VC cos_ang_mult_plus_one.2.1.0" expl="equality hypothesis">
    <transf name="rewrite" arg1="i_to_c_add_rev">
     <goal name="VC cos_ang_mult_plus_one.2.1.0.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="mult_distr_add_r">
      <goal name="VC cos_ang_mult_plus_one.2.1.0.0.0" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="0.65"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cos_ang_mult_plus_one.2.1.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.23" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_ang_mult_minus_one" expl="VC for cos_ang_mult_minus_one">
 <transf name="split_vc" >
  <goal name="VC cos_ang_mult_minus_one.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.91" steps="216"/></proof>
  </goal>
  <goal name="VC cos_ang_mult_minus_one.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.95" steps="218"/></proof>
  </goal>
  <goal name="VC cos_ang_mult_minus_one.2" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC cos_ang_mult_minus_one.2.0" expl="postcondition">
   <transf name="rewrite" arg1="(-)_def">
    <goal name="VC cos_ang_mult_minus_one.2.0.0" expl="postcondition">
    <transf name="rewrite" arg1="i_to_c_add_rev">
     <goal name="VC cos_ang_mult_minus_one.2.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="mult_distr_add_r">
      <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="i_to_c_minus">
       <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="minus_out_right">
        <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(x *. i_to_c 1)" arg2="x">
         <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H">
          <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="(-.)_def">
           <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="apply" arg1="add_eq_t">
            <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <proof prover="0" obsolete="true"><result status="valid" time="3.65"/></proof>
            </goal>
            <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
            <transf name="rewrite" arg1="sin_minus">
             <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises">
             <transf name="rewrite" arg1="minus_out_right">
              <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
              <proof prover="0" obsolete="true"><result status="valid" time="3.51"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
             <proof prover="6" obsolete="true"><result status="valid" time="0.39" steps="228"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cos_ang_mult_minus_one.2.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="1" obsolete="true"><result status="valid" time="0.68"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_ang_mult_plus_one" expl="VC for sin_ang_mult_plus_one">
 <transf name="split_vc" >
  <goal name="VC sin_ang_mult_plus_one.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.94" steps="216"/></proof>
  </goal>
  <goal name="VC sin_ang_mult_plus_one.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="0.24" steps="216"/></proof>
  </goal>
  <goal name="VC sin_ang_mult_plus_one.2" expl="postcondition">
  <transf name="replace" arg1="(x *. i_to_c i)" arg2="(x *. i_to_c (i-1) +. x)">
   <goal name="VC sin_ang_mult_plus_one.2.0" expl="postcondition">
   <transf name="rewrite" arg1="sin_add">
    <goal name="VC sin_ang_mult_plus_one.2.0.0" expl="postcondition">
    <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="216"/></proof>
    </goal>
    <goal name="VC sin_ang_mult_plus_one.2.0.1" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="2.71" steps="218"/></proof>
    </goal>
    <goal name="VC sin_ang_mult_plus_one.2.0.2" expl="rewrite premises">
    <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sin_ang_mult_plus_one.2.1" expl="equality hypothesis">
   <transf name="replace" arg1="(i_to_c i)" arg2="(i_to_c (i-1+1))">
    <goal name="VC sin_ang_mult_plus_one.2.1.0" expl="equality hypothesis">
    <transf name="rewrite" arg1="i_to_c_add_rev">
     <goal name="VC sin_ang_mult_plus_one.2.1.0.0" expl="equality hypothesis">
     <transf name="rewrite" arg1="mult_distr_add_r">
      <goal name="VC sin_ang_mult_plus_one.2.1.0.0.0" expl="equality hypothesis">
      <proof prover="1" obsolete="true"><result status="valid" time="0.71"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sin_ang_mult_plus_one.2.1.1" expl="equality hypothesis">
    <proof prover="6" obsolete="true"><result status="valid" time="0.27" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_ang_mult_minus_one" expl="VC for sin_ang_mult_minus_one">
 <transf name="split_vc" >
  <goal name="VC sin_ang_mult_minus_one.0" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.98" steps="216"/></proof>
  </goal>
  <goal name="VC sin_ang_mult_minus_one.1" expl="precondition">
  <proof prover="6" obsolete="true"><result status="valid" time="1.94" steps="218"/></proof>
  </goal>
  <goal name="VC sin_ang_mult_minus_one.2" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC sin_ang_mult_minus_one.2.0" expl="postcondition">
   <transf name="rewrite" arg1="(-)_def">
    <goal name="VC sin_ang_mult_minus_one.2.0.0" expl="postcondition">
    <transf name="rewrite" arg1="i_to_c_add_rev">
     <goal name="VC sin_ang_mult_minus_one.2.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="mult_distr_add_r">
      <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="i_to_c_minus">
       <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="minus_out_right">
        <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(x *. i_to_c 1)" arg2="x">
         <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H">
          <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="(-.)_def">
           <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="apply" arg1="add_eq_t">
            <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
            <proof prover="0" obsolete="true"><result status="valid" time="3.48"/></proof>
            </goal>
            <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
            <transf name="rewrite" arg1="sin_minus">
             <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises">
             <transf name="rewrite" arg1="minus_out_right">
              <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
              <proof prover="6" obsolete="true"><result status="valid" time="0.35" steps="228"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
             <proof prover="6" obsolete="true"><result status="valid" time="0.37" steps="228"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sin_ang_mult_minus_one.2.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="1" obsolete="true"><result status="valid" time="0.66"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cos_ang_mult_inv" expl="VC for cos_ang_mult_inv">
 <transf name="split_vc" >
  <goal name="VC cos_ang_mult_inv.0" expl="postcondition">
  <transf name="rewrite" arg1="i_to_c_minus">
   <goal name="VC cos_ang_mult_inv.0.0" expl="postcondition">
   <transf name="rewrite" arg1="minus_out_right">
    <goal name="VC cos_ang_mult_inv.0.0.0" expl="postcondition">
    <transf name="apply" arg1="cos_minus">
     <goal name="VC cos_ang_mult_inv.0.0.0.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="2.41" steps="214"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sin_ang_mult_inv" expl="VC for sin_ang_mult_inv">
 <transf name="split_vc" >
  <goal name="VC sin_ang_mult_inv.0" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.59"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_one_over_pow_n" expl="VC for modulus_one_over_pow_n">
 <transf name="split_vc" >
  <goal name="VC modulus_one_over_pow_n.0" expl="postcondition">
  <transf name="rewrite" arg1="modulus_real_pos">
   <goal name="VC modulus_one_over_pow_n.0.0" expl="postcondition">
   <transf name="rewrite" arg1="modulus_real_pos">
    <goal name="VC modulus_one_over_pow_n.0.0.0" expl="postcondition">
    <transf name="assert" arg1="(forall a b c. c_zero &lt;&gt; c -&gt; a/. c+. b/. c = (a+.b)/.c)">
     <goal name="VC modulus_one_over_pow_n.0.0.0.0" expl="asserted formula">
     <proof prover="6" obsolete="true"><result status="valid" time="1.98" steps="220"/></proof>
     </goal>
     <goal name="VC modulus_one_over_pow_n.0.0.0.1" expl="postcondition">
     <transf name="rewrite" arg1="h">
      <goal name="VC modulus_one_over_pow_n.0.0.0.1.0" expl="postcondition">
      <transf name="assert" arg1="(forall a. a&lt;&gt; c_zero -&gt; a/.a= c_one)">
       <goal name="VC modulus_one_over_pow_n.0.0.0.1.0.0" expl="asserted formula">
       <transf name="split_vc" >
        <goal name="VC modulus_one_over_pow_n.0.0.0.1.0.0.0" expl="asserted formula">
        <proof prover="2" obsolete="true"><result status="valid" time="5.41"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC modulus_one_over_pow_n.0.0.0.1.0.1" expl="postcondition">
       <transf name="apply" arg1="h">
        <goal name="VC modulus_one_over_pow_n.0.0.0.1.0.1.0" expl="apply premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.59"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC modulus_one_over_pow_n.0.0.0.1.1" expl="rewrite premises">
      <transf name="assert" arg1="(forall a b. c_zero &lt;=. a -&gt; c_zero &lt;. b -&gt; c_zero &lt;. a +.b)">
       <goal name="VC modulus_one_over_pow_n.0.0.0.1.1.0" expl="asserted formula">
       <proof prover="6" obsolete="true"><result status="valid" time="1.98" steps="222"/></proof>
       </goal>
       <goal name="VC modulus_one_over_pow_n.0.0.0.1.1.1" expl="rewrite premises">
       <transf name="assert" arg1="(c_zero &lt;. (square_rt (i_to_c k) +. square_rt (i_to_c (power_ 2 n - k))))">
        <goal name="VC modulus_one_over_pow_n.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="h">
        </transf>
        </goal>
        <goal name="VC modulus_one_over_pow_n.0.0.0.1.1.1.1" expl="rewrite premises">
        <proof prover="6" obsolete="true"><result status="valid" time="2.05" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_one_over_pow_n.0.0.1" expl="rewrite premises">
    <transf name="apply" arg1="real_div">
     <goal name="VC modulus_one_over_pow_n.0.0.1.0" expl="apply premises">
     <proof prover="6" obsolete="true"><result status="valid" time="1.87" steps="218"/></proof>
     </goal>
     <goal name="VC modulus_one_over_pow_n.0.0.1.1" expl="apply premises">
     <transf name="assert" arg1="(forall a b. c_zero &lt;=. a -&gt; c_zero &lt;. b -&gt; c_zero &lt;. a +.b)">
      <goal name="VC modulus_one_over_pow_n.0.0.1.1.0" expl="asserted formula">
      <proof prover="6" obsolete="true"><result status="valid" time="2.05" steps="222"/></proof>
      </goal>
      <goal name="VC modulus_one_over_pow_n.0.0.1.1.1" expl="apply premises">
      <transf name="assert" arg1="(c_zero &lt;. (square_rt (i_to_c k) +. square_rt (i_to_c (power_ 2 n - k))))">
       <goal name="VC modulus_one_over_pow_n.0.0.1.1.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
       <goal name="VC modulus_one_over_pow_n.0.0.1.1.1.1" expl="apply premises">
       <proof prover="6" obsolete="true"><result status="valid" time="2.04" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC modulus_one_over_pow_n.0.0.1.2" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.58"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_one_over_pow_n.0.0.2" expl="rewrite premises">
    <transf name="assert" arg1="(forall a b. c_zero &lt;=. a -&gt; c_zero &lt;. b -&gt; c_zero &lt;. a +.b)">
     <goal name="VC modulus_one_over_pow_n.0.0.2.0" expl="asserted formula">
     <proof prover="6" obsolete="true"><result status="valid" time="2.07" steps="222"/></proof>
     </goal>
     <goal name="VC modulus_one_over_pow_n.0.0.2.1" expl="rewrite premises">
     <transf name="assert" arg1="(c_zero &lt;. (square_rt (i_to_c k) +. square_rt (i_to_c (power_ 2 n - k))))">
      <goal name="VC modulus_one_over_pow_n.0.0.2.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="h">
      </transf>
      </goal>
      <goal name="VC modulus_one_over_pow_n.0.0.2.1.1" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.54"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC modulus_one_over_pow_n.0.1" expl="rewrite premises">
   <transf name="apply" arg1="real_div">
    <goal name="VC modulus_one_over_pow_n.0.1.0" expl="apply premises">
    <proof prover="6" obsolete="true"><result status="valid" time="1.84" steps="218"/></proof>
    </goal>
    <goal name="VC modulus_one_over_pow_n.0.1.1" expl="apply premises">
    <transf name="assert" arg1="(forall a b. c_zero &lt;=. a -&gt; c_zero &lt;. b -&gt; c_zero &lt;. a +.b)">
     <goal name="VC modulus_one_over_pow_n.0.1.1.0" expl="asserted formula">
     <proof prover="6" obsolete="true"><result status="valid" time="2.02" steps="222"/></proof>
     </goal>
     <goal name="VC modulus_one_over_pow_n.0.1.1.1" expl="apply premises">
     <transf name="assert" arg1="(c_zero &lt;. (square_rt (i_to_c k) +. square_rt (i_to_c (power_ 2 n - k))))">
      <goal name="VC modulus_one_over_pow_n.0.1.1.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="h">
      </transf>
      </goal>
      <goal name="VC modulus_one_over_pow_n.0.1.1.1.1" expl="apply premises">
      <proof prover="6" obsolete="true"><result status="valid" time="1.96" steps="220"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_one_over_pow_n.0.1.2" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="valid" time="0.64"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modulus_one_over_pow_n.0.2" expl="rewrite premises">
   <transf name="assert" arg1="(forall a b. c_zero &lt;=. a -&gt; c_zero &lt;. b -&gt; c_zero &lt;. a +.b)">
    <goal name="VC modulus_one_over_pow_n.0.2.0" expl="asserted formula">
    <proof prover="6" obsolete="true"><result status="valid" time="2.14" steps="222"/></proof>
    </goal>
    <goal name="VC modulus_one_over_pow_n.0.2.1" expl="rewrite premises">
    <transf name="assert" arg1="(c_zero &lt;. (square_rt (i_to_c k) +. square_rt (i_to_c (power_ 2 n - k))))">
     <goal name="VC modulus_one_over_pow_n.0.2.1.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
     <goal name="VC modulus_one_over_pow_n.0.2.1.1" expl="rewrite premises">
     <proof prover="0" obsolete="true"><result status="valid" time="0.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_cos" expl="VC for get_cos">
 <transf name="split_vc" >
  <goal name="VC get_cos.0" expl="postcondition">
  <transf name="rewrite" arg1="cos_def">
   <goal name="VC get_cos.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="3.42" steps="222"/></proof>
   </goal>
   <goal name="VC get_cos.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.26" steps="220"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_sin" expl="VC for get_sin">
 <transf name="split_vc" >
  <goal name="VC get_sin.0" expl="postcondition">
  <transf name="rewrite" arg1="sin_def">
   <goal name="VC get_sin.0.0" expl="postcondition">
   <proof prover="6" obsolete="true"><result status="valid" time="3.38" steps="222"/></proof>
   </goal>
   <goal name="VC get_sin.0.1" expl="rewrite premises">
   <proof prover="6" obsolete="true"><result status="valid" time="0.25" steps="220"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unic_ang_meas" expl="VC for unic_ang_meas">
 </goal>
</theory>
</file>
</why3session>
