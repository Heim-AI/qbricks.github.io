<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.1" alternative="noBV" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="complex.mlw"/>
<theory name="Assert_equal" proved="true">
 <goal name="VC assert_equal" expl="VC for assert_equal" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="VC goal_comm" expl="VC for goal_comm" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="False" proved="true">
 <goal name="VC set_false" expl="VC for set_false" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
<theory name="Pairs" proved="true">
 <goal name="VC get_fir" expl="VC for get_fir" proved="true">
 <proof prover="0"><result status="valid" time="0.01"/></proof>
 </goal>
 <goal name="VC get_sec" expl="VC for get_sec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_sec.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="P_real" proved="true">
 <goal name="VC infix /*" expl="VC for infix /*" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infix /*.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infix =*" expl="VC for infix =*" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infix =*.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC infix =*.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
   <goal name="VC infix =*.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC infix &lt;&gt;*" expl="VC for infix &lt;&gt;*" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infix &lt;&gt;*.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC infix &lt;&gt;*.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
   <goal name="VC infix &lt;&gt;*.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Zero" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="6"/></proof>
 </goal>
 <goal name="Add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Add.0" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="One" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="8"/></proof>
 </goal>
 <goal name="Sub" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Sub.0" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul_pos" expl="VC for mul_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mul_pos.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="32"/></proof>
  </goal>
  <goal name="VC mul_pos.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
  <goal name="VC mul_pos.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mul_pos.2.0" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
   </goal>
   <goal name="VC mul_pos.2.1" expl="variant decrease" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mul_pos.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
  <goal name="VC mul_pos.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul" expl="VC for mul" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mul.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
  <goal name="VC mul.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
  <goal name="VC mul.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mul.2.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
   <goal name="VC mul.2.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="10"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mul_rev" expl="VC for mul_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mul_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="neg.0" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="injective" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="injective.0" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Monotonic" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Monotonic.0" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC r_zeroLessOne" expl="VC for r_zeroLessOne" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC r_zeroLessOne.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="8"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC r_compatOrderAdd" expl="VC for r_compatOrderAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC r_compatOrderAdd.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC r_compatOrderMult" expl="VC for r_compatOrderMult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC r_compatOrderMult.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_order" expl="VC for inv_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_order.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="50"/></proof>
   </goal>
   <goal name="VC inv_order.0.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="52"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order.1.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.01"/></proof>
   </goal>
   <goal name="VC inv_order.1.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order.2.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="68"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order.4.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order.5.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="25"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_strict_order" expl="VC for inv_strict_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_strict_order.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_strict_order.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="59"/></proof>
   </goal>
   <goal name="VC inv_strict_order.0.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="61"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_strict_order.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_strict_order.1.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.02"/></proof>
   </goal>
   <goal name="VC inv_strict_order.1.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="74"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_strict_order.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_strict_order.2.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.18" steps="172"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Complex">
 <goal name="VC teq" expl="VC for teq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC teq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="0"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infix /." expl="VC for infix /." proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="VC invol_neg" expl="VC for invol_neg" proved="true">
 <proof prover="2"><result status="valid" time="0.02"/></proof>
 </goal>
 <goal name="VC injective_neg" expl="VC for injective_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injective_neg.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC find_opposite" expl="VC for find_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC find_opposite.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_as_mult_inv" expl="VC for div_as_mult_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_as_mult_inv.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_opposite" expl="VC for add_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_opposite.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC opposite" expl="VC for opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC opposite.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_num" expl="VC for mult_num" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_num.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_rev" expl="VC for div_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_div_num" expl="VC for mult_div_num" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
 </goal>
 <goal name="VC mult_denom" expl="VC for mult_denom" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_denom.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_simpl" expl="VC for mult_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_simpl.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
  <goal name="VC mult_simpl.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
  <goal name="VC mult_simpl.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="2.58"/></proof>
  </goal>
  <goal name="VC mult_simpl.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.81" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC dic_simpl" expl="VC for dic_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC dic_simpl.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="2.21" steps="92"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_with_c_one" expl="VC for simpl_with_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC simpl_with_c_one.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19" steps="51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_op" expl="VC for add_op" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_op.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_eq_t" expl="VC for mult_eq_t" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
 </goal>
 <goal name="VC mult_eq_t_rev" expl="VC for mult_eq_t_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
 </goal>
 <goal name="VC mult_comm" expl="VC for mult_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_comm.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_assoc" expl="VC for mult_assoc" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="11"/></proof>
 </goal>
 <goal name="VC mult_abc_to_acb" expl="VC for mult_abc_to_acb" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="11"/></proof>
 </goal>
 <goal name="VC zero_mult_t" expl="VC for zero_mult_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC zero_mult_t.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_zero_t" expl="VC for mult_zero_t" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
 </goal>
 <goal name="VC mult_one_t" expl="VC for mult_one_t" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
 </goal>
 <goal name="VC add_eq_t" expl="VC for add_eq_t" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
 </goal>
 <goal name="VC add_eq_t_rev" expl="VC for add_eq_t_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="15"/></proof>
 </goal>
 <goal name="VC substr_eq_t" expl="VC for substr_eq_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC substr_eq_t.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="r_to_c_add_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
 </goal>
 <goal name="r_to_c_mult_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="19"/></proof>
 </goal>
 <goal name="r_to_c_sub" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_sub.0" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Real_part_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Real_part_opposite.0" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Im_part_opposite" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Im_part_opposite.0" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="130"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unic_decomp" expl="VC for unic_decomp" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="20"/></proof>
 </goal>
 <goal name="VC r_to_c_real" expl="VC for r_to_c_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC r_to_c_real.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_r_to_c" expl="VC for real_r_to_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_r_to_c.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="58"/></proof>
  </goal>
  <goal name="VC real_r_to_c.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC r_to_c_pure_im" expl="VC for r_to_c_pure_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC r_to_c_pure_im.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="144"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC decomp_mult" expl="VC for decomp_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_mult.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC decomp_mult.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.87"/></proof>
  </goal>
  <goal name="VC decomp_mult.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC decomp_mult.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_real_part" expl="VC for t_real_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_real_part.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_real_part_inv" expl="VC for t_real_part_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_real_part_inv.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_im_part" expl="VC for t_im_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_im_part.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_im_part_inv" expl="VC for t_im_part_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_im_part_inv.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC decomp_mult_as_reals" expl="VC for decomp_mult_as_reals" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_mult_as_reals.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.86" steps="21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC decomp_mult_real_part" expl="VC for decomp_mult_real_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_mult_real_part.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.53" steps="21"/></proof>
  </goal>
  <goal name="VC decomp_mult_real_part.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC decomp_mult_im_part" expl="VC for decomp_mult_im_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_mult_im_part.0" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(r_to_c ((real_part a ** real_part b) -* (im_part a ** im_part b)))" arg2="((r_to_c (real_part a) *. r_to_c (real_part b))
      -. (r_to_c (im_part a) *. r_to_c (im_part b)))">
   <goal name="VC decomp_mult_im_part.0.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(r_to_c ((real_part a ** im_part b) +* (real_part b ** im_part a)))" arg2="(((r_to_c (real_part a) *. r_to_c (im_part b))
             +. (r_to_c (real_part b) *. r_to_c (im_part a))))">
    <goal name="VC decomp_mult_im_part.0.0.0" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
    </goal>
    <goal name="VC decomp_mult_im_part.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.14" steps="21"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC decomp_mult_im_part.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.25" steps="21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC decomp_mult_im_part.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_mult_real" expl="VC for t_mult_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_mult_real.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.24" steps="116"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_mult_im" expl="VC for t_mult_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_mult_im.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC t_mult_im.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="t_im_part_def">
    <goal name="VC t_mult_im.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="decomp_mult_im_part">
     <goal name="VC t_mult_im.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="r_to_c_add_rev">
      <goal name="VC t_mult_im.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="add_eq_t">
       <goal name="VC t_mult_im.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.01" steps="24"/></proof>
       </goal>
       <goal name="VC t_mult_im.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="r_to_c_mult_rev">
        <goal name="VC t_mult_im.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="24"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_real_real" expl="VC for mult_real_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_real_real.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC mult_real_real.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mult_real_real.1.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.12" steps="29"/></proof>
   </goal>
   <goal name="VC mult_real_real.1.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.24" steps="29"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_real_real.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="VC mult_real_real.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC complex_squared" expl="VC for complex_squared" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC complex_squared.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="decomp_mult_as_reals">
   <goal name="VC complex_squared.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="add_eq_t">
    <goal name="VC complex_squared.0.0.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
    </goal>
    <goal name="VC complex_squared.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.03"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC complex_squared.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.36" steps="23"/></proof>
  </goal>
  <goal name="VC complex_squared.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC complex_real_squared" expl="VC for complex_real_squared" proved="true">
 <proof prover="1"><result status="valid" time="0.29" steps="27"/></proof>
 </goal>
 <goal name="VC decomp_div" expl="VC for decomp_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_div.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
  <goal name="VC decomp_div.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC decomp_div_real" expl="VC for decomp_div_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_div_real.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
  <goal name="VC decomp_div_real.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC complex_prod_fact" expl="VC for complex_prod_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC complex_prod_fact.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_zero_prod_pre" expl="VC for non_zero_prod_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_zero_prod_pre.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="23"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="25"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.3" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.4" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.6" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="99"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.8" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.10" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="3.95" steps="187"/></proof>
  </goal>
  <goal name="VC non_zero_prod_pre.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_prod_pre.11.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
   </goal>
   <goal name="VC non_zero_prod_pre.11.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.11.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.18" steps="118"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.11.2" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.11.2.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.18" steps="118"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_zero_prod_pre.12" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_prod_pre.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.12.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="2.28" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.12.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.12.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="1.50" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_zero_prod_pre.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_prod_pre.13.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.13.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="48"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.13.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.13.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_zero_prod_pre.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_prod_pre.14.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.14.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="50"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.14.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.14.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="50"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.14.2" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.14.2.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="50"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_zero_prod_pre.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_prod_pre.15.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.15.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="53"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.15.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.15.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_zero_prod_pre.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_prod_pre.16.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.16.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="54"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.16.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.16.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="54"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC non_zero_prod_pre.17" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC non_zero_prod_pre.17.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.17.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="2.84" steps="128"/></proof>
    </goal>
    <goal name="VC non_zero_prod_pre.17.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC non_zero_prod_pre.17.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC non_zero_prod_pre.17.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="3.14" steps="128"/></proof>
    </goal>
    <goal name="VC non_zero_prod_pre.17.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_zero_prod" expl="VC for non_zero_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_zero_prod.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="169"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_c_one" expl="VC for minus_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_c_one.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC minus_c_one.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((-. c_one) *. a)" arg2="(-. (c_one *. a))">
    <goal name="VC minus_c_one.0.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="22"/></proof>
    </goal>
    <goal name="VC minus_c_one.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(((-. c_one) *. a) -. (-. (c_one *. a)) = c_zero)">
     <goal name="VC minus_c_one.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.89" steps="286"/></proof>
     </goal>
     <goal name="VC minus_c_one.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="24"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_neg_l" expl="VC for mult_neg_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_neg_l.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_neg_r" expl="VC for mult_neg_r" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="19"/></proof>
 </goal>
 <goal name="VC neg_neg_out" expl="VC for neg_neg_out" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC neg_neg_out.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_neg_l" expl="VC for div_neg_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_neg_l.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC eq_to_real" expl="VC for eq_to_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC eq_to_real.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC eq_by_real" expl="VC for eq_by_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC eq_by_real.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_neg_r" expl="VC for div_neg_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_neg_r.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(a /. (-. b))" arg2="(a*. (-. c_one/.b))">
   <goal name="VC div_neg_r.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.06"/></proof>
   </goal>
   <goal name="VC div_neg_r.0.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="2.96"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="invadd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="invadd.0" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC noc_zeroAdd" expl="VC for noc_zeroAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC noc_zeroAdd.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC noc_zeroAdd.0.0" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="21"/></proof>
   </goal>
   <goal name="VC noc_zeroAdd.0.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="21"/></proof>
   </goal>
   <goal name="VC noc_zeroAdd.0.2" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="2.03" steps="247"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC noc_zeroAdd.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="3.82" steps="248"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Absorbing_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Absorbing_zero.0" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="Absorbing_zero.1" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_part_add" expl="VC for real_part_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_part_add.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_im_rev" expl="VC for mult_im_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_im_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="17"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC im_im_elim" expl="VC for im_im_elim" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="19"/></proof>
 </goal>
 <goal name="VC im_im_fact" expl="VC for im_im_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC im_im_fact.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_minus_fact" expl="VC for minus_minus_fact" proved="true">
 <proof prover="1"><result status="valid" time="4.02" steps="111"/></proof>
 </goal>
 <goal name="VC minus_minus_add" expl="VC for minus_minus_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_minus_add.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_minus_add_rev" expl="VC for minus_minus_add_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_minus_add_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_out_left" expl="VC for minus_out_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_out_left.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_out_right" expl="VC for minus_out_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_out_right.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_in_left" expl="VC for minus_in_left" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
 </goal>
 <goal name="VC minus_in_right" expl="VC for minus_in_right" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
 </goal>
 <goal name="VC minus_add_out_left" expl="VC for minus_add_out_left" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="19"/></proof>
 </goal>
 <goal name="VC minus_as_add_opp" expl="VC for minus_as_add_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_as_add_opp.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_add_out_right" expl="VC for minus_add_out_right" proved="true">
 <proof prover="1"><result status="valid" time="0.17" steps="19"/></proof>
 </goal>
 <goal name="VC minus_add_in" expl="VC for minus_add_in" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="19"/></proof>
 </goal>
 <goal name="VC minus_add_out" expl="VC for minus_add_out" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
 </goal>
 <goal name="VC minus_eq" expl="VC for minus_eq" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="19"/></proof>
 </goal>
 <goal name="VC im_out_right" expl="VC for im_out_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC im_out_right.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="17"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC im_out_left" expl="VC for im_out_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC im_out_left.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="17"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC im_part_add" expl="VC for im_part_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC im_part_add.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_real_part" expl="VC for injective_real_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injective_real_part.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_im_part" expl="VC for injective_im_part" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injective_im_part.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC minus_distr_four" expl="VC for minus_distr_four" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC minus_distr_four.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC complex_decomp" expl="VC for complex_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC complex_decomp.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_frac" expl="VC for simpl_frac" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC simpl_frac.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_frac_" expl="VC for simpl_frac_" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
 </goal>
 <goal name="VC fact_frac" expl="VC for fact_frac" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC fact_frac.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC fact_frac_rev" expl="VC for fact_frac_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="21"/></proof>
 </goal>
 <goal name="VC mult_sym" expl="VC for mult_sym" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="17"/></proof>
 </goal>
 <goal name="VC inv_mult" expl="VC for inv_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_mult.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_div" expl="VC for div_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_div.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_div_rev" expl="VC for div_div_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_div_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC involutive_inv" expl="VC for involutive_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC involutive_inv.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.17"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC twice" expl="VC for twice" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC twice.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC twice_half" expl="VC for twice_half" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC twice_half.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC half_plus_half" expl="VC for half_plus_half" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC half_plus_half.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC decomp_inv_real" expl="VC for decomp_inv_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_inv_real.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC decomp_inv_real.0.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC decomp_inv_real.0.1" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC decomp_inv_real.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="VC decomp_inv_real.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="29"/></proof>
  </goal>
  <goal name="VC decomp_inv_real.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC decomp_inv_real.3.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC decomp_inv_real.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC decomp_inv_real.4.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="2.75"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_div_comm" expl="VC for mult_div_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_div_comm.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.09"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_div_comm_rev" expl="VC for mult_div_comm_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_div_comm_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_left_real" expl="VC for leq_left_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_left_real.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_right_real" expl="VC for leq_right_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_right_real.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_left_real" expl="VC for inf_left_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_left_real.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_right_real" expl="VC for inf_right_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_right_real.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.86"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_from_real" expl="VC for inf_from_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_from_real.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC inf_from_real.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC inf_from_real.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="(&lt;.)_def">
     <goal name="VC inf_from_real.0.0.0.0" expl="VC for inf_from_real" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC inf_from_real.0.0.0.0.0" expl="VC for inf_from_real" proved="true">
      <transf name="rewrite" proved="true" arg1="(&lt;=.)_def">
       <goal name="VC inf_from_real.0.0.0.0.0.0" expl="VC for inf_from_real" proved="true">
       <proof prover="1"><result status="valid" time="0.03" steps="32"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC inf_from_real.0.0.0.0.1" expl="VC for inf_from_real" proved="true">
      <transf name="assert" proved="true" arg1="(a &lt;&gt; b)">
       <goal name="VC inf_from_real.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="case" proved="true" arg1="(a = b)">
        <goal name="VC inf_from_real.0.0.0.0.1.0.0" expl="true case (asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(real_part a = real_part b)">
         <goal name="VC inf_from_real.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.00" steps="30"/></proof>
         </goal>
         <goal name="VC inf_from_real.0.0.0.0.1.0.0.1" expl="true case (asserted formula)" proved="true">
         <proof prover="4"><result status="valid" time="0.02"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC inf_from_real.0.0.0.0.1.0.1" expl="false case (asserted formula)" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC inf_from_real.0.0.0.0.1.1" expl="VC for inf_from_real" proved="true">
       <proof prover="1"><result status="valid" time="0.01" steps="32"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_to_real" expl="VC for inf_to_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_to_real.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_left_not_real_a" expl="VC for leq_left_not_real_a" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_left_not_real_a.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_left_not_real_b" expl="VC for leq_left_not_real_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_left_not_real_b.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="PartialOrder.Refl" proved="true">
 <proof prover="0"><result status="valid" time="0.58"/></proof>
 </goal>
 <goal name="PartialOrder.Trans" proved="true">
 <proof prover="2"><result status="valid" time="0.18"/></proof>
 </goal>
 <goal name="PartialOrder.Antisymm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Antisymm.0" proved="true">
  <proof prover="0"><result status="valid" time="1.15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Supeq.Refl" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="21"/></proof>
 </goal>
 <goal name="Supeq.Trans" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="25"/></proof>
 </goal>
 <goal name="Supeq.Antisymm" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="25"/></proof>
 </goal>
 <goal name="Inf.Trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="Trans.0" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="Trans.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Inf.Asymm" proved="true">
 <proof prover="2"><result status="valid" time="0.05"/></proof>
 </goal>
 <goal name="Infeq.Trans" proved="true">
 <proof prover="2"><result status="valid" time="0.16"/></proof>
 </goal>
 <goal name="Infeq.Asymm" proved="true">
 <proof prover="2"><result status="valid" time="0.17"/></proof>
 </goal>
 <goal name="r_to_c_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="r_to_c_inf.0" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="r_to_c_inf.0.0" proved="true">
   <transf name="rewrite" proved="true" arg1="(&lt;=.)_def" arg2="in" arg3="H">
    <goal name="r_to_c_inf.0.0.0" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="r_to_c_inf.0.0.0.0" proved="true">
     <transf name="replace" proved="true" arg1="(real_part (r_to_c i))" arg2="i" arg3="in" arg4="H">
      <goal name="r_to_c_inf.0.0.0.0.0" proved="true">
      <transf name="replace" proved="true" arg1="(real_part (r_to_c j))" arg2="j" arg3="in" arg4="H">
       <goal name="r_to_c_inf.0.0.0.0.0.0" proved="true">
       <proof prover="1"><result status="valid" time="0.01" steps="28"/></proof>
       </goal>
       <goal name="r_to_c_inf.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="2.15"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="r_to_c_inf.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="3.17"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="r_to_c_inf.0.0.0.1" proved="true">
     <transf name="replace" proved="true" arg1="i" arg2="j">
      <goal name="r_to_c_inf.0.0.0.1.0" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="26"/></proof>
      </goal>
      <goal name="r_to_c_inf.0.0.0.1.1" expl="equality hypothesis" proved="true">
      <transf name="assert" proved="true" arg1="(real_part (r_to_c i) = i = real_part (r_to_c j) = j)">
       <goal name="r_to_c_inf.0.0.0.1.1.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="r_to_c_inf.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
        <proof prover="4"><result status="valid" time="1.70"/></proof>
        </goal>
        <goal name="r_to_c_inf.0.0.0.1.1.0.1" expl="asserted formula" proved="true">
        <proof prover="4"><result status="valid" time="0.04"/></proof>
        </goal>
        <goal name="r_to_c_inf.0.0.0.1.1.0.2" expl="asserted formula" proved="true">
        <proof prover="4"><result status="valid" time="1.90"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="r_to_c_inf.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="r_to_c_inf.1" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="r_to_c_inf.1.0" proved="true">
   <transf name="rewrite" proved="true" arg1="(&lt;=.)_def">
    <goal name="r_to_c_inf.1.0.0" proved="true">
    <transf name="assert" proved="true" arg1="( real_ (r_to_c i) /\
  real_ (r_to_c j) /\ real_part (r_to_c i) &lt;=* real_part (r_to_c j))">
     <goal name="r_to_c_inf.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="r_to_c_inf.1.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="26"/></proof>
      </goal>
      <goal name="r_to_c_inf.1.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="26"/></proof>
      </goal>
      <goal name="r_to_c_inf.1.0.0.0.2" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(real_part (r_to_c j))" arg2="j">
       <goal name="r_to_c_inf.1.0.0.0.2.0" expl="asserted formula" proved="true">
       <transf name="replace" proved="true" arg1="(real_part (r_to_c i))" arg2="i">
        <goal name="r_to_c_inf.1.0.0.0.2.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.03" steps="24"/></proof>
        </goal>
        <goal name="r_to_c_inf.1.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="1.34"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="r_to_c_inf.1.0.0.0.2.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="1.34"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="r_to_c_inf.1.0.0.1" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC reali_is_its_real_part" expl="VC for reali_is_its_real_part" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="23"/></proof>
 </goal>
 <goal name="VC inf_from_r" expl="VC for inf_from_r" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="27"/></proof>
 </goal>
 <goal name="VC strict_inf_from_r" expl="VC for strict_inf_from_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_inf_from_r.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_inv_t" expl="VC for positive_inv_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_inv_t.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
  <goal name="VC positive_inv_t.1" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="positive_inv">
   <goal name="VC positive_inv_t.1.0" expl="apply premises" proved="true">
   <transf name="assert" proved="true" arg1="( 0.0 &lt;=* real_part x)">
    <goal name="VC positive_inv_t.1.0.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.07"/></proof>
    </goal>
    <goal name="VC positive_inv_t.1.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.04"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC positive_inv_t.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="inf_from_real">
   <goal name="VC positive_inv_t.2.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="27"/></proof>
   </goal>
   <goal name="VC positive_inv_t.2.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.03"/></proof>
   </goal>
   <goal name="VC positive_inv_t.2.2" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="5.87"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="real_pi" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="23"/></proof>
 </goal>
 <goal name="pi_sup_one" proved="true">
 <proof prover="2"><result status="valid" time="0.52"/></proof>
 </goal>
 <goal name="pi_sup_zero" proved="true">
 <proof prover="2"><result status="valid" time="0.72"/></proof>
 </goal>
 <goal name="VC compat_order_mult" expl="VC for compat_order_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_mult.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC compat_order_mult.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="37"/></proof>
  </goal>
  <goal name="VC compat_order_mult.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="45"/></proof>
  </goal>
  <goal name="VC compat_order_mult.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="45"/></proof>
  </goal>
  <goal name="VC compat_order_mult.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC compat_order_mult.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC compat_order_mult.6" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(real_part y ** real_part z)" arg2="( real_part (y *. z))">
   <goal name="VC compat_order_mult.6.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(real_part x ** real_part z)" arg2="( real_part (x *. z))">
    <goal name="VC compat_order_mult.6.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="55"/></proof>
    </goal>
    <goal name="VC compat_order_mult.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="55"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC compat_order_mult.6.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC compat_order_mult.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="55"/></proof>
  </goal>
  <goal name="VC compat_order_mult.8" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.23" steps="58"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_add" expl="VC for compat_order_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_add.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_add.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_add.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="43"/></proof>
  </goal>
  <goal name="VC compat_order_add.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="43"/></proof>
  </goal>
  <goal name="VC compat_order_add.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC compat_order_add.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="53"/></proof>
  </goal>
  <goal name="VC compat_order_add.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC compat_order_add.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_add_left" expl="VC for compat_order_add_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_add_left.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_add_left.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_add_left.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_add_left.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_add_left.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_add_booth" expl="VC for compat_order_add_booth" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_add_booth.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.4" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="highfailure" time="0.56"/></proof>
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_add_booth.8" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_substr" expl="VC for compat_order_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_substr.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_substr.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_substr.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC compat_order_substr.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC compat_order_substr.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inf_mult" expl="VC for compat_inf_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_mult.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(x = c_zero)">
   <goal name="VC compat_inf_mult.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="0"><result status="valid" time="2.60"/></proof>
   </goal>
   <goal name="VC compat_inf_mult.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(y = c_zero)">
    <goal name="VC compat_inf_mult.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="2.41"/></proof>
    </goal>
    <goal name="VC compat_inf_mult.0.1.1" expl="false case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="((x *. z) &lt;=. (y *. z))">
     <goal name="VC compat_inf_mult.0.1.1.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="43"/></proof>
     </goal>
     <goal name="VC compat_inf_mult.0.1.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="((x *. z) &lt;&gt; (y *. z))">
      <goal name="VC compat_inf_mult.0.1.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.04"/></proof>
      </goal>
      <goal name="VC compat_inf_mult.0.1.1.1.1" expl="false case (postcondition)" proved="true">
      <proof prover="2"><result status="valid" time="0.09"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC transitive_infeq" expl="VC for transitive_infeq" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="33"/></proof>
 </goal>
 <goal name="VC transitive_infeq_inf" expl="VC for transitive_infeq_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC transitive_infeq_inf.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC transitive_inf_infeq" expl="VC for transitive_inf_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC transitive_inf_infeq.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC transitive_inf" expl="VC for transitive_inf" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="33"/></proof>
 </goal>
 <goal name="VC pi_sup_ttwo" expl="VC for pi_sup_ttwo" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pi_sup_ttwo.0" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="ttwo" arg2="(r_to_c 2.0)">
   <goal name="VC pi_sup_ttwo.0.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="( r_to_c 2.0 &lt;=. r_to_c 3.0)">
    <goal name="VC pi_sup_ttwo.0.0.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="29"/></proof>
    </goal>
    <goal name="VC pi_sup_ttwo.0.0.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.98"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pi_sup_ttwo.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="29"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pi_sup_ttwo.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="VC pi_sup_ttwo.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC transitive_leq_inv_r" expl="VC for transitive_leq_inv_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC transitive_leq_inv_r.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="43"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="43"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="45"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="47"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.5" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(c_one /. c)" arg2="(r_to_c (1.0/* real_part c ))">
   <goal name="VC transitive_leq_inv_r.5.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(0.0 &lt;=*  (1.0 /* real_part c))">
    <goal name="VC transitive_leq_inv_r.5.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(0.0 &lt;=*  ( real_part c))">
     <goal name="VC transitive_leq_inv_r.5.0.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.03"/></proof>
     </goal>
     <goal name="VC transitive_leq_inv_r.5.0.0.1" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(0.0 &lt;*  ( real_part c))">
      <goal name="VC transitive_leq_inv_r.5.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(1.0 &lt;=*  ( real_part c))">
       <goal name="VC transitive_leq_inv_r.5.0.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.03"/></proof>
       </goal>
       <goal name="VC transitive_leq_inv_r.5.0.0.1.0.1" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.04"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC transitive_leq_inv_r.5.0.0.1.1" expl="asserted formula" proved="true">
      <proof prover="4"><result status="valid" time="0.03"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC transitive_leq_inv_r.5.0.1" expl="precondition" proved="true">
    <proof prover="1"><result status="valid" time="0.06" steps="51"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC transitive_leq_inv_r.5.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC transitive_leq_inv_r.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="47"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="45"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC transitive_leq_inv_r.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC transitive_leq_inv_r.9.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="47"/></proof>
   </goal>
   <goal name="VC transitive_leq_inv_r.9.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inf_mult_left" expl="VC for compat_inf_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_mult_left.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((z *. x) &lt;=. (z *. y))">
   <goal name="VC compat_inf_mult_left.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_left.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((z *. x) &lt;&gt; (z *. y))">
    <goal name="VC compat_inf_mult_left.0.1.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.14"/></proof>
    </goal>
    <goal name="VC compat_inf_mult_left.0.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inf_mult_both" expl="VC for compat_inf_mult_both" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_mult_both.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="compat_inf_mult_left">
   <goal name="VC compat_inf_mult_both.0.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.0.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.0.2" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.0.3" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.0.4" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC compat_inf_mult_both.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="compat_inf_mult">
   <goal name="VC compat_inf_mult_both.1.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.1.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.1.2" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="47"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.1.3" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.1.4" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC compat_inf_mult_both.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((z *. x) &lt;=. (t *. y))">
   <goal name="VC compat_inf_mult_both.2.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="47"/></proof>
   </goal>
   <goal name="VC compat_inf_mult_both.2.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((z *. x) &lt;&gt; (t *. y))">
    <goal name="VC compat_inf_mult_both.2.1.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.03" steps="49"/></proof>
    </goal>
    <goal name="VC compat_inf_mult_both.2.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.03" steps="49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inf_add" expl="VC for compat_inf_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_add.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((x +. z) &lt;=. (y +. z))">
   <goal name="VC compat_inf_add.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
   </goal>
   <goal name="VC compat_inf_add.0.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="((x +. z) = (y +. z))">
    <goal name="VC compat_inf_add.0.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.49"/></proof>
    </goal>
    <goal name="VC compat_inf_add.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.90"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inf_add_left" expl="VC for compat_inf_add_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_add_left.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((z+. x) &lt;=. (z +. y))">
   <goal name="VC compat_inf_add_left.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(((x +. z) &lt;=. (y +. z)))">
    <goal name="VC compat_inf_add_left.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="compat_order_add">
     <goal name="VC compat_inf_add_left.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
     <proof prover="2"><result status="valid" time="2.58"/></proof>
     </goal>
     <goal name="VC compat_inf_add_left.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.03"/></proof>
     </goal>
     <goal name="VC compat_inf_add_left.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.03"/></proof>
     </goal>
     <goal name="VC compat_inf_add_left.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.03"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC compat_inf_add_left.0.0.1" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.08"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC compat_inf_add_left.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="2.28"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inf_add_both" expl="VC for compat_inf_add_both" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_add_both.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC compat_inf_add_both.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inf_substr" expl="VC for compat_inf_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_substr.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC compat_inf_substr.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC compat_inf_substr.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC compat_inf_substr.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97"/></proof>
  </goal>
  <goal name="VC compat_inf_substr.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_inv" expl="VC for real_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_inv.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC real_inv.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="35"/></proof>
  </goal>
  <goal name="VC real_inv.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.31" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_mult_rev" expl="VC for compat_order_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_mult_rev.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(c_zero &lt;. t_real_part z)">
   <goal name="VC compat_order_mult_rev.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.23"/></proof>
   </goal>
   <goal name="VC compat_order_mult_rev.0.1" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC compat_order_mult_rev.1" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(0.0 &lt;* real_part (c_one /. z))">
   <goal name="VC compat_order_mult_rev.1.0" expl="asserted formula" proved="true">
   <transf name="replace" proved="true" arg1="(real_part (c_one /. z))" arg2="(1.0 /* real_part z)">
    <goal name="VC compat_order_mult_rev.1.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="positive_inv">
     <goal name="VC compat_order_mult_rev.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.06"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC compat_order_mult_rev.1.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.03"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC compat_order_mult_rev.1.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC compat_order_mult_rev.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="VC compat_order_mult_rev.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="VC compat_order_mult_rev.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.12"/></proof>
  </goal>
  <goal name="VC compat_order_mult_rev.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="49"/></proof>
  </goal>
  <goal name="VC compat_order_mult_rev.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC compat_order_mult_rev.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC compat_order_mult_rev.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_mult_left" expl="VC for compat_order_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_mult_left.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(z *. x)" arg2="(x *. z)">
   <goal name="VC compat_order_mult_left.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(z *. y)" arg2="(y *. z)">
    <goal name="VC compat_order_mult_left.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="compat_order_mult">
     <goal name="VC compat_order_mult_left.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
     </goal>
     <goal name="VC compat_order_mult_left.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
     </goal>
     <goal name="VC compat_order_mult_left.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
     </goal>
     <goal name="VC compat_order_mult_left.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
     </goal>
     <goal name="VC compat_order_mult_left.0.0.0.4" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC compat_order_mult_left.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC compat_order_mult_left.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_compat_order_mult" expl="VC for strict_compat_order_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_compat_order_mult.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="41"/></proof>
  </goal>
  <goal name="VC strict_compat_order_mult.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="VC strict_compat_order_mult.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="VC strict_compat_order_mult.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="VC strict_compat_order_mult.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="VC strict_compat_order_mult.5" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(real_part x = real_part y)">
   <goal name="VC strict_compat_order_mult.5.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC strict_compat_order_mult.5.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC strict_compat_order_mult.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13" steps="44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_compat_order_mult_left" expl="VC for strict_compat_order_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_compat_order_mult_left.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC complete_order_real" expl="VC for complete_order_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC complete_order_real.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(y &lt;=. x)">
   <goal name="VC complete_order_real.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.06"/></proof>
   </goal>
   <goal name="VC complete_order_real.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.87"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC complete_order_real_" expl="VC for complete_order_real_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC complete_order_real_.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_mult_both" expl="VC for compat_order_mult_both" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_mult_both.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="45"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="VC compat_order_mult_both.12" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_to_non_sup_eq" expl="VC for inf_to_non_sup_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_to_non_sup_eq.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sup_eq_to_non_inf" expl="VC for sup_eq_to_non_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sup_eq_to_non_inf.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sup_to_inf" expl="VC for sup_to_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sup_to_inf.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_to_sup" expl="VC for inf_to_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_to_sup.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sup_to_non_inf_eq" expl="VC for sup_to_non_inf_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sup_to_non_inf_eq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_eq_to_non_sup" expl="VC for inf_eq_to_non_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_eq_to_non_sup.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_inf_eq_to_sup" expl="VC for non_inf_eq_to_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_inf_eq_to_sup.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC non_sup_toinf_eq" expl="VC for non_sup_toinf_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC non_sup_toinf_eq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_mult" expl="VC for real_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_mult.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_add" expl="VC for real_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_add.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_substr" expl="VC for real_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_substr.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_pos" expl="VC for inv_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_pos.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(0.0 &lt;* real_part x)">
   <goal name="VC inv_pos.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="1.17"/></proof>
   </goal>
   <goal name="VC inv_pos.0.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(real_part (c_one/. x))" arg2="(1.0 /* real_part x)">
    <goal name="VC inv_pos.0.1.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
    </goal>
    <goal name="VC inv_pos.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="0.04"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_pos.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC lower_over_cons" expl="VC for lower_over_cons" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC lower_over_cons.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="6.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC eq_to_leq_t" expl="VC for eq_to_leq_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC eq_to_leq_t.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_minus" expl="VC for real_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_minus.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_r_to_c_infeq" expl="VC for compat_r_to_c_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_r_to_c_infeq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_r_to_c_inf" expl="VC for compat_r_to_c_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_r_to_c_inf.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_r_to_c_supeq" expl="VC for compat_r_to_c_supeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_r_to_c_supeq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_r_to_c_sup" expl="VC for compat_r_to_c_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_r_to_c_sup.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unic_inv" expl="VC for unic_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unic_inv.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unic_inv.0.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.32"/></proof>
   </goal>
   <goal name="VC unic_inv.0.1" expl="assertion" proved="true">
   <proof prover="1"><result status="valid" time="0.21" steps="37"/></proof>
   </goal>
   <goal name="VC unic_inv.0.2" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="4.72"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unic_inv.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_eq_def" expl="VC for inf_eq_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_eq_def.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inf_eq_def.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.70"/></proof>
   </goal>
   <goal name="VC inf_eq_def.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.03"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_minus" expl="VC for inf_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_minus.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.97"/></proof>
  </goal>
  <goal name="VC inf_minus.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
  <goal name="VC inf_minus.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
  </goal>
  <goal name="VC inf_minus.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC absorbing_zero" expl="VC for absorbing_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC absorbing_zero.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="35"/></proof>
  </goal>
  <goal name="VC absorbing_zero.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_zero_inv" expl="VC for inf_zero_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_zero_inv.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.44"/></proof>
  </goal>
  <goal name="VC inf_zero_inv.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
  <goal name="VC inf_zero_inv.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC inf_zero_inv.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="VC inf_zero_inv.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_pos" expl="VC for mult_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_pos.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.74"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_leq_mult_div" expl="VC for simpl_leq_mult_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC simpl_leq_mult_div.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="37"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_div.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_div.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="real_mult">
   <goal name="VC simpl_leq_mult_div.2.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
   </goal>
   <goal name="VC simpl_leq_mult_div.2.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC simpl_leq_mult_div.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="41"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_div.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_div.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13" steps="45"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_div.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_leq_c_one_leq" expl="VC for mult_leq_c_one_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_leq_c_one_leq.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_leq_c_one_leq_gen" expl="VC for mult_leq_c_one_leq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_leq_c_one_leq_gen.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_leq_c_one" expl="VC for mult_leq_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_leq_c_one.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mult_leq_c_one.0.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_leq_c_one.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mult_leq_c_one.1.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_leq_c_one.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="45"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="47"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="49"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="51"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mult_leq_c_one.6.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.09"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_leq_c_one_expl" expl="VC for mult_leq_c_one_expl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_leq_c_one_expl.0" expl="postcondition" proved="true">
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="apply" arg1="mult_leq_c_one">
   <goal name="VC mult_leq_c_one_expl.0.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
   </goal>
   <goal name="VC mult_leq_c_one_expl.0.1" expl="apply premises">
   <proof prover="0" obsolete="true"><result status="highfailure" time="3.01"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC mult_leq_c_one_expl.0.2" expl="apply premises">
   <proof prover="0" obsolete="true"><result status="highfailure" time="3.01"/></proof>
   <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  <transf name="case" proved="true" arg1="(b = c_zero)">
   <goal name="VC mult_leq_c_one_expl.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="2"><result status="valid" time="0.23"/></proof>
   </goal>
   <goal name="VC mult_leq_c_one_expl.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <transf name="apply" arg1="mult_leq_c_one">
    <goal name="VC mult_leq_c_one_expl.0.1.0" expl="apply premises" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
    </goal>
    <goal name="VC mult_leq_c_one_expl.0.1.1" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="highfailure" time="2.91"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    </goal>
    <goal name="VC mult_leq_c_one_expl.0.1.2" expl="apply premises">
    <proof prover="0" obsolete="true"><result status="highfailure" time="3.49"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    </goal>
   </transf>
   <transf name="case" proved="true" arg1="(b &lt;. c_zero)">
    <goal name="VC mult_leq_c_one_expl.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="assert" proved="true" arg1="(a*.b &lt;=. c_zero)">
     <goal name="VC mult_leq_c_one_expl.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0" obsolete="true"><result status="highfailure" time="2.37"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="assert" proved="true" arg1="( c_zero&lt;=. a *. (-.b))">
      <goal name="VC mult_leq_c_one_expl.0.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.18"/></proof>
      </goal>
      <goal name="VC mult_leq_c_one_expl.0.1.0.0.1" expl="asserted formula" proved="true">
      <proof prover="0" obsolete="true"><result status="highfailure" time="1.64"/></proof>
      <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="replace" proved="true" arg1="(a *. (-. b))" arg2="(-. (a*.b))" arg3="in" arg4="h1">
       <goal name="VC mult_leq_c_one_expl.0.1.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.25"/></proof>
       </goal>
       <goal name="VC mult_leq_c_one_expl.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="0.04"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mult_leq_c_one_expl.0.1.0.1" expl="false case (true case. postcondition)" proved="true">
     <proof prover="0"><result status="valid" time="0.06"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2"><result status="valid" time="0.24"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mult_leq_c_one_expl.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="replace" proved="true" arg1="c_one" arg2="(d*. (c_one /.d))">
     <goal name="VC mult_leq_c_one_expl.0.1.1.0" expl="false case (postcondition)" proved="true">
     <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="apply" proved="true" arg1="compat_order_mult_both">
      <goal name="VC mult_leq_c_one_expl.0.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.04"/></proof>
      <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="2"><result status="valid" time="0.14"/></proof>
      <proof prover="3"><result status="valid" time="0.02"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="split_vc" proved="true" >
       <goal name="VC mult_leq_c_one_expl.0.1.1.0.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.03"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC mult_leq_c_one_expl.0.1.1.0.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.04"/></proof>
       <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mult_leq_c_one_expl.0.1.1.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mult_leq_c_one_expl.0.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="5" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="rewrite" proved="true" arg1="(/.)_def">
      <goal name="VC mult_leq_c_one_expl.0.1.1.1.0" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="0.05"/></proof>
      </goal>
      <goal name="VC mult_leq_c_one_expl.0.1.1.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.05"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   <transf name="replace" arg1="c_one" arg2="(d*. (c_one /.d))">
    <goal name="VC mult_leq_c_one_expl.0.1.0" expl="false case (postcondition)">
    <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="apply" arg1="compat_order_mult_both">
     <goal name="VC mult_leq_c_one_expl.0.1.0.0" expl="apply premises">
     <proof prover="0" obsolete="true"><result status="highfailure" time="3.37"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="split_vc" >
      <goal name="VC mult_leq_c_one_expl.0.1.0.0.0">
      <proof prover="0" obsolete="true"><result status="highfailure" time="2.77"/></proof>
      <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
      <goal name="VC mult_leq_c_one_expl.0.1.0.0.1" proved="true">
      <proof prover="0"><result status="valid" time="0.04"/></proof>
      <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mult_leq_c_one_expl.0.1.0.1" expl="apply premises" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mult_leq_c_one_expl.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="5.28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_leq_c_one_rev" expl="VC for mult_leq_c_one_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_leq_c_one_rev.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="37"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one_rev.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="37"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one_rev.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one_rev.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="41"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one_rev.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.68"/></proof>
  </goal>
  <goal name="VC mult_leq_c_one_rev.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_leq_mult" expl="VC for simpl_leq_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC simpl_leq_mult.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_leq_mult_inv" expl="VC for simpl_leq_mult_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC simpl_leq_mult_inv.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_inv.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_inv.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC simpl_leq_mult_inv.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_to_div_leq" expl="VC for mult_to_div_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_to_div_leq.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="37"/></proof>
  </goal>
  <goal name="VC mult_to_div_leq.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC mult_to_div_leq.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="real_mult">
   <goal name="VC mult_to_div_leq.2.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
   </goal>
   <goal name="VC mult_to_div_leq.2.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_to_div_leq.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="41"/></proof>
  </goal>
  <goal name="VC mult_to_div_leq.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="VC mult_to_div_leq.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="45"/></proof>
  </goal>
  <goal name="VC mult_to_div_leq.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_div" expl="VC for mult_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_div.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
  <goal name="VC mult_div.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="35"/></proof>
  </goal>
  <goal name="VC mult_div.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="37"/></proof>
  </goal>
  <goal name="VC mult_div.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_mult_pos" expl="VC for strict_mult_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_mult_pos.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC rewrite_supeq" expl="VC for rewrite_supeq" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
 </goal>
 <goal name="VC rewrite_sup" expl="VC for rewrite_sup" proved="true">
 <proof prover="1"><result status="valid" time="0.04" steps="33"/></proof>
 </goal>
 <goal name="VC inv_order_complex" expl="VC for inv_order_complex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_order_complex.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="1.71"/></proof>
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   </goal>
   <goal name="VC inv_order_complex.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.1.0" expl="assertion" proved="true">
   <proof prover="2"><result status="valid" time="0.67"/></proof>
   </goal>
   <goal name="VC inv_order_complex.1.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.06"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.2.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.3.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.00" steps="45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.4.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.17" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.5.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.13" steps="49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.6.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.7.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.13" steps="53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_order_complex.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inv_order_complex.8.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_inv_order" expl="VC for compat_inv_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inv_order.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(c_one/.b &lt;=.c_one /.a)">
   <goal name="VC compat_inv_order.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="VC compat_inv_order.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_by_div_simpl" expl="VC for leq_by_div_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC leq_by_div_simpl.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="37"/></proof>
  </goal>
  <goal name="VC leq_by_div_simpl.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="VC leq_by_div_simpl.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC leq_by_div_simpl.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="VC leq_by_div_simpl.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="45"/></proof>
  </goal>
  <goal name="VC leq_by_div_simpl.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="47"/></proof>
  </goal>
  <goal name="VC leq_by_div_simpl.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="47"/></proof>
  </goal>
  <goal name="VC leq_by_div_simpl.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC leq_by_div" expl="VC for leq_by_div" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="37"/></proof>
 </goal>
 <goal name="VC strict_pos_div" expl="VC for strict_pos_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_pos_div.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="35"/></proof>
  </goal>
  <goal name="VC strict_pos_div.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
  <goal name="VC strict_pos_div.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="37"/></proof>
  </goal>
  <goal name="VC strict_pos_div.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_def" expl="VC for inf_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_def.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inf_def.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
   </goal>
   <goal name="VC inf_def.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
   </goal>
   <goal name="VC inf_def.0.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="37"/></proof>
   </goal>
   <goal name="VC inf_def.0.3" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sup_eq_def" expl="VC for sup_eq_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sup_eq_def.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sup_eq_def.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.12" steps="38"/></proof>
   </goal>
   <goal name="VC sup_eq_def.0.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sup_def" expl="VC for sup_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sup_def.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC sup_def.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC sup_def.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.04"/></proof>
   </goal>
   <goal name="VC sup_def.0.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.05"/></proof>
   </goal>
   <goal name="VC sup_def.0.3" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC assoc_mult_div" expl="VC for assoc_mult_div" proved="true">
 <proof prover="1"><result status="valid" time="0.04" steps="33"/></proof>
 </goal>
 <goal name="VC assoc_mult_div_rev" expl="VC for assoc_mult_div_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="33"/></proof>
 </goal>
 <goal name="VC subst_zero" expl="VC for subst_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC subst_zero.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC subst_zero_gen" expl="VC for subst_zero_gen" proved="true">
 <proof prover="1"><result status="valid" time="0.04" steps="33"/></proof>
 </goal>
 <goal name="VC transitive_inf_inv_r" expl="VC for transitive_inf_inv_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC transitive_inf_inv_r.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC transitive_inf_inv_r.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
   </goal>
   <goal name="VC transitive_inf_inv_r.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(c_one /.c &lt;. c_one)">
    <goal name="VC transitive_inf_inv_r.0.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="((c_one /. c) *. c_one &lt;. (c_one/.c) *.c)">
     <goal name="VC transitive_inf_inv_r.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.24"/></proof>
     </goal>
     <goal name="VC transitive_inf_inv_r.0.1.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="2.42"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC transitive_inf_inv_r.0.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_scal_r" expl="VC for infeq_scal_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_scal_r.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_scal_l" expl="VC for infeq_scal_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_scal_l.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC transitive_supeq" expl="VC for transitive_supeq" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
 </goal>
 <goal name="VC transitive_inf_l" expl="VC for transitive_inf_l" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
 </goal>
 <goal name="VC transitive_sup_l" expl="VC for transitive_sup_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC transitive_sup_l.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.56"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC transitive_inf_r" expl="VC for transitive_inf_r" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
 </goal>
 <goal name="VC transitive_sup_r" expl="VC for transitive_sup_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC transitive_sup_r.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_frac_r" expl="VC for simpl_frac_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC simpl_frac_r.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_mult_sup_eq_right" expl="VC for compat_mult_sup_eq_right" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
 </goal>
 <goal name="VC compat_mult_sup_right" expl="VC for compat_mult_sup_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_mult_sup_right.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_mult_inf_right" expl="VC for compat_mult_inf_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_mult_inf_right.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_to_supeq" expl="VC for infeq_to_supeq" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
 </goal>
 <goal name="VC infeq_inv" expl="VC for infeq_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_inv.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_inv_add_l" expl="VC for infeq_inv_add_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_inv_add_l.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_l.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_l.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_l.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="39"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_l.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((a +. c) -. c)" arg2="a" arg3="in" arg4="H">
   <goal name="VC infeq_inv_add_l.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="VC infeq_inv_add_l.4.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="0.23"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_inv_add_r" expl="VC for infeq_inv_add_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_inv_add_r.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_r.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="35"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_r.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_r.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC infeq_inv_add_r.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((b +. c) -. c)" arg2="b" arg3="in" arg4="H">
   <goal name="VC infeq_inv_add_r.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="VC infeq_inv_add_r.4.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="0.13"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC r_to_c_surj" expl="VC for r_to_c_surj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC r_to_c_surj.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="33"/></proof>
  </goal>
  <goal name="VC r_to_c_surj.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.86"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC r_to_c_inf_rev" expl="VC for r_to_c_inf_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC r_to_c_inf_rev.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC r_to_c_inf_rev.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
  <goal name="VC r_to_c_inf_rev.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="6.62"/></proof>
  </goal>
  <goal name="VC r_to_c_inf_rev.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_simpl" expl="VC for div_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_simpl.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_inv_subs_l" expl="VC for infeq_inv_subs_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_inv_subs_l.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC infeq_inv_subs_l.1" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(a-.c)" arg2="(a+. (-.c))">
   <goal name="VC infeq_inv_subs_l.1.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
   </goal>
   <goal name="VC infeq_inv_subs_l.1.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC infeq_inv_subs_l.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="VC infeq_inv_subs_l.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="VC infeq_inv_subs_l.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((a -. c) +. c)" arg2="a" arg3="in" arg4="H">
   <goal name="VC infeq_inv_subs_l.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
   </goal>
   <goal name="VC infeq_inv_subs_l.4.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="0.15"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_inv_subs_r" expl="VC for infeq_inv_subs_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_inv_subs_r.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(a+.c&lt;=. (b-.c) +. c)">
   <goal name="VC infeq_inv_subs_r.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
   </goal>
   <goal name="VC infeq_inv_subs_r.0.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((b -. c) +. c)" arg2="b" arg3="in" arg4="h">
    <goal name="VC infeq_inv_subs_r.0.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
    </goal>
    <goal name="VC infeq_inv_subs_r.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="4"><result status="valid" time="0.15"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_pos_elim" expl="VC for infeq_pos_elim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_pos_elim.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_pos_elim_add" expl="VC for infeq_pos_elim_add" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="41"/></proof>
 </goal>
 <goal name="VC supeq_elim_left" expl="VC for supeq_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC supeq_elim_left.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sup_elim_left" expl="VC for sup_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sup_elim_left.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC infeq_elim_left" expl="VC for infeq_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infeq_elim_left.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="4.31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_elim_left" expl="VC for inf_elim_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_elim_left.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_im_real" expl="VC for t_im_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_im_real.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC t_im_real.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="t_im_part_def">
    <goal name="VC t_im_real.0.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="1.33" steps="36"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_decomp_mult" expl="VC for t_decomp_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_decomp_mult.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_complex_decomp" expl="VC for t_complex_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_complex_decomp.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="5.80"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_unic_decomp" expl="VC for t_unic_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_unic_decomp.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="37"/></proof>
  </goal>
  <goal name="VC t_unic_decomp.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC t_unic_decomp.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_decomp_minus" expl="VC for t_decomp_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_decomp_minus.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04"/></proof>
  </goal>
  <goal name="VC t_decomp_minus.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_sum" expl="VC for real_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_sum.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_diff" expl="VC for real_diff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_diff.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.08"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pure_im_sum" expl="VC for pure_im_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pure_im_sum.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.83"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC equal_decomp" expl="VC for equal_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC equal_decomp.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_equal_decomp" expl="VC for t_equal_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_equal_decomp.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pure_im_diff" expl="VC for pure_im_diff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pure_im_diff.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(x -. y)" arg2="(x+. (-.y))">
   <goal name="VC pure_im_diff.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.23"/></proof>
   </goal>
   <goal name="VC pure_im_diff.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC real_div" expl="VC for real_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC real_div.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_im_im" expl="VC for mult_im_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_im_im.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="VC mult_im_im.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC mult_im_im.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC mult_im_im.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="VC mult_im_im.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_real_im" expl="VC for mult_real_im" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_real_im.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="VC mult_real_im.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="VC mult_real_im.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95"/></proof>
  </goal>
  <goal name="VC mult_real_im.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
  <goal name="VC mult_real_im.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_im_real" expl="VC for mult_im_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_im_real.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="VC mult_im_real.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.40" steps="41"/></proof>
  </goal>
  <goal name="VC mult_im_real.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96"/></proof>
  </goal>
  <goal name="VC mult_im_real.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
  </goal>
  <goal name="VC mult_im_real.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC decomp_mult_gen" expl="VC for decomp_mult_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp_mult_gen.0" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="complex_decomp" arg2="a">
   <goal name="VC decomp_mult_gen.0.0" expl="assertion" proved="true">
   <transf name="instantiate" proved="true" arg1="complex_decomp" arg2="b">
    <goal name="VC decomp_mult_gen.0.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(a*.b)" arg2="( (r_to_c (real_part a) +. (im *. r_to_c (im_part a))) *.  (r_to_c (real_part b) +. (im *. r_to_c (im_part b))))">
     <goal name="VC decomp_mult_gen.0.0.0.0" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c d:complex. (a+.b) *. (c+.d) = ((((a*.c) +. (a*.d)) +. (b*.c)) +. (b*.d)))">
      <goal name="VC decomp_mult_gen.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b c d:complex. (a+.b) *. (c+.d) = ((((a*.c) +. (a*.d)) +. (b*.c)) +. (b*.d)))">
       <goal name="VC decomp_mult_gen.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC decomp_mult_gen.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="4"><result status="valid" time="0.22"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC decomp_mult_gen.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="0.01"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC decomp_mult_gen.0.0.0.0.1" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="VC decomp_mult_gen.0.0.0.0.1.0" expl="assertion" proved="true">
       <transf name="assert" proved="true" arg1="(forall a b c d: complex. a = c -&gt; b = d -&gt; a+. b = c+.d)">
        <goal name="VC decomp_mult_gen.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.04"/></proof>
        </goal>
        <goal name="VC decomp_mult_gen.0.0.0.0.1.0.1" expl="assertion" proved="true">
        <transf name="apply" proved="true" arg1="h">
         <goal name="VC decomp_mult_gen.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="h">
          <goal name="VC decomp_mult_gen.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="h">
           <goal name="VC decomp_mult_gen.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.32" steps="35"/></proof>
           </goal>
           <goal name="VC decomp_mult_gen.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.35" steps="35"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC decomp_mult_gen.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.41" steps="35"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC decomp_mult_gen.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.28"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC decomp_mult_gen.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="33"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC decomp_mult_gen.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.13"/></proof>
  </goal>
  <goal name="VC decomp_mult_gen.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
  <goal name="VC decomp_mult_gen.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_real" expl="VC for inv_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_real.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC inv_real.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.87"/></proof>
  </goal>
  <goal name="VC inv_real.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC inv_real.3" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC inv_real.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(r_to_c (real_part (inv1 a))  = c_one /. a)">
   <goal name="VC inv_real.4.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.07"/></proof>
   </goal>
   <goal name="VC inv_real.4.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inv_real.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_real_real" expl="VC for div_real_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_real_real.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="VC div_real_real.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="37"/></proof>
  </goal>
  <goal name="VC div_real_real.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="39"/></proof>
  </goal>
  <goal name="VC div_real_real.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(real_part a /* real_part b)" arg2="(real_part a ** real_part(c_one /. b))">
   <goal name="VC div_real_real.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(a /. b)" arg2="(a*. c_one/.b)">
    <goal name="VC div_real_real.3.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.11" steps="47"/></proof>
    </goal>
    <goal name="VC div_real_real.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.07"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC div_real_real.3.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(real_part a ** real_part (c_one /. b))" arg2="(real_part (a *.  (c_one /. b)))">
    <goal name="VC div_real_real.3.1.0" expl="equality hypothesis" proved="true">
    <transf name="instantiate" proved="true" arg1="inv_real" arg2="b">
     <goal name="VC div_real_real.3.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="(real_part (a *. (c_one /. b)))" arg2="(real_part a ** real_part  (c_one /. b))">
      <goal name="VC div_real_real.3.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC div_real_real.3.1.0.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst1">
        <goal name="VC div_real_real.3.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="(/*)_def">
         <goal name="VC div_real_real.3.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(real_part b &lt;&gt; 0.0)">
          <goal name="VC div_real_real.3.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.21" steps="51"/></proof>
          </goal>
          <goal name="VC div_real_real.3.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(forall a b: real.  b &lt;&gt; 0.0 -&gt; a/b = a** (1.0 /b))">
           <goal name="VC div_real_real.3.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="1"><result status="valid" time="0.09" steps="55"/></proof>
           </goal>
           <goal name="VC div_real_real.3.1.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="h">
            <goal name="VC div_real_real.3.1.0.0.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
            <proof prover="1"><result status="valid" time="0.10" steps="53"/></proof>
            </goal>
            <goal name="VC div_real_real.3.1.0.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.02" steps="51"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_real_real.3.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.10" steps="51"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC div_real_real.3.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="0.03" steps="49"/></proof>
        </goal>
        <goal name="VC div_real_real.3.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="0.02" steps="49"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC div_real_real.3.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="0.03" steps="49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC div_real_real.3.1.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC zeroLessOne" expl="VC for zeroLessOne" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC zeroLessOne.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compatOrderAdd" expl="VC for compatOrderAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compatOrderAdd.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC compatOrderAdd.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC compatOrderAdd.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( real_part (x +. z) &lt;=* real_part (y +. z)
)">
   <goal name="VC compatOrderAdd.2.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="43"/></proof>
   </goal>
   <goal name="VC compatOrderAdd.2.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(r_to_c (real_part (x +. z)) &lt;=. r_to_c (real_part (y +. z)))">
    <goal name="VC compatOrderAdd.2.1.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.15" steps="45"/></proof>
    </goal>
    <goal name="VC compatOrderAdd.2.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(real_ (x+.y))">
     <goal name="VC compatOrderAdd.2.1.1.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="47"/></proof>
     </goal>
     <goal name="VC compatOrderAdd.2.1.1.1" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.12" steps="49"/></proof>
     </goal>
    </transf>
    <transf name="assert" proved="true" arg1="(real_ (x+.z))">
     <goal name="VC compatOrderAdd.2.1.1.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.05" steps="47"/></proof>
     </goal>
     <goal name="VC compatOrderAdd.2.1.1.1" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="49"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_add" expl="VC for positive_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_add.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="35"/></proof>
  </goal>
  <goal name="VC positive_add.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="37"/></proof>
  </goal>
  <goal name="VC positive_add.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_positive_add_l" expl="VC for strict_positive_add_l" proved="true">
 <proof prover="1"><result status="valid" time="0.07" steps="36"/></proof>
 </goal>
 <goal name="VC strict_compatOrderAdd" expl="VC for strict_compatOrderAdd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_compatOrderAdd.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((x +. z) &lt;. (y +. z))">
   <goal name="VC strict_compatOrderAdd.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="45"/></proof>
   </goal>
   <goal name="VC strict_compatOrderAdd.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.02"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_sup_add" expl="VC for compat_sup_add" proved="true">
 <proof prover="2"><result status="valid" time="0.23"/></proof>
 </goal>
 <goal name="VC compat_supeq_mult" expl="VC for compat_supeq_mult" proved="true">
 <proof prover="1"><result status="valid" time="0.06" steps="43"/></proof>
 </goal>
 <goal name="VC compat_supeq_div" expl="VC for compat_supeq_div" proved="true">
 <proof prover="2"><result status="valid" time="0.35"/></proof>
 </goal>
 <goal name="VC compat_infeq_div" expl="VC for compat_infeq_div" proved="true">
 <proof prover="1"><result status="valid" time="0.04" steps="43"/></proof>
 </goal>
 <goal name="VC compat_sup_div" expl="VC for compat_sup_div" proved="true">
 <proof prover="0"><result status="valid" time="4.08"/></proof>
 </goal>
 <goal name="VC compat_inf_div" expl="VC for compat_inf_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_inf_div.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_prod_itself" expl="VC for positive_prod_itself" proved="true">
 <proof prover="2"><result status="valid" time="0.28"/></proof>
 </goal>
 <goal name="VC strict_positive_prod_itself" expl="VC for strict_positive_prod_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_positive_prod_itself.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="41"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="43"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="45"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.9" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="VC strict_positive_prod_itself.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_sup_mult" expl="VC for compat_sup_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_sup_mult.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_compat_sup_mult" expl="VC for strict_compat_sup_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_compat_sup_mult.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_sup_mult_left" expl="VC for compat_sup_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_sup_mult_left.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_compat_sup_mult_left" expl="VC for strict_compat_sup_mult_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_compat_sup_mult_left.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_inf_eq" expl="VC for inv_inf_eq" proved="true">
 <proof prover="0"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="VC inv_sup_eq" expl="VC for inv_sup_eq" proved="true">
 <proof prover="1"><result status="valid" time="0.06" steps="39"/></proof>
 </goal>
 <goal name="VC inv_sup" expl="VC for inv_sup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_sup.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="41"/></proof>
  </goal>
  <goal name="VC inv_sup.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="43"/></proof>
  </goal>
  <goal name="VC inv_sup.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC inv_sup.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_eqinf" expl="VC for inv_eqinf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_eqinf.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="41"/></proof>
  </goal>
  <goal name="VC inv_eqinf.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="43"/></proof>
  </goal>
  <goal name="VC inv_eqinf.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.17" steps="47"/></proof>
  </goal>
  <goal name="VC inv_eqinf.3" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC inv_eqinf.3.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.10" steps="47"/></proof>
   </goal>
   <goal name="VC inv_eqinf.3.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="((c_one /. x) &lt;. (c_one /. y) )">
    <goal name="VC inv_eqinf.3.1.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="false">
     <goal name="VC inv_eqinf.3.1.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="((x *. (c_one /. x)) = (x *. (c_one /. y)))">
      <goal name="VC inv_eqinf.3.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(x *. (c_one /. x))" arg2="c_one">
       <goal name="VC inv_eqinf.3.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.09"/></proof>
       </goal>
       <goal name="VC inv_eqinf.3.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.14"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC inv_eqinf.3.1.0.0.1" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.15" steps="49"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC inv_eqinf.3.1.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="47"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC inv_eqinf.3.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.15" steps="49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_eqsup" expl="VC for inv_eqsup" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_eqsup.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_inf" expl="VC for inv_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_inf.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="2.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inv_neg" expl="VC for inv_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inv_neg.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC inv_neg.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC lower_inv" expl="VC for lower_inv" proved="true">
 <proof prover="0"><result status="valid" time="0.10"/></proof>
 </goal>
 <goal name="VC lower_inv_" expl="VC for lower_inv_" proved="true">
 <proof prover="0"><result status="valid" time="0.10"/></proof>
 </goal>
 <goal name="VC zero_add_t" expl="VC for zero_add_t" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
 </goal>
 <goal name="VC add_zero_t" expl="VC for add_zero_t" proved="true">
 <proof prover="1"><result status="valid" time="0.12" steps="35"/></proof>
 </goal>
 <goal name="VC one_mult_t" expl="VC for one_mult_t" proved="true">
 <proof prover="1"><result status="valid" time="0.14" steps="35"/></proof>
 </goal>
 <goal name="VC one_mult_t_const" expl="VC for one_mult_t_const" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="33"/></proof>
 </goal>
 <goal name="VC zero_mult_t_const" expl="VC for zero_mult_t_const" proved="true">
 <proof prover="1"><result status="valid" time="0.13" steps="33"/></proof>
 </goal>
 <goal name="VC mult_zero_t_const" expl="VC for mult_zero_t_const" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="33"/></proof>
 </goal>
 <goal name="VC subs_eq" expl="VC for subs_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC subs_eq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC subst_itself" expl="VC for subst_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC subst_itself.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_assoc_four" expl="VC for mult_assoc_four" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="31"/></proof>
 </goal>
 <goal name="VC mult_assoc_rev" expl="VC for mult_assoc_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
 </goal>
 <goal name="VC add_assoc" expl="VC for add_assoc" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="31"/></proof>
 </goal>
 <goal name="VC add_assoc_rev" expl="VC for add_assoc_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="31"/></proof>
 </goal>
 <goal name="VC div_mult" expl="VC for div_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_mult.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_mult_rev" expl="VC for div_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_mult_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="35"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC triang_p" expl="VC for triang_p" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC triang_p.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="15.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC triang_n" expl="VC for triang_n" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC triang_n.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="triang_p" arg2="a">
   <goal name="VC triang_n.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(-. b)">
    <goal name="VC triang_n.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(a -. b)" arg2="(a +. (-. b))">
     <goal name="VC triang_n.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC triang_n.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="((-. b) *. (-. b))" arg2="(b*.b)">
       <goal name="VC triang_n.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="highfailure" time="1.02"/></proof>
       <proof prover="1"><result status="timeout" time="5.00"/></proof>
       <proof prover="2"><result status="timeout" time="5.00"/></proof>
       <proof prover="4"><result status="valid" time="0.11"/></proof>
       </goal>
       <goal name="VC triang_n.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.10"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC triang_n.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.07"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC triang_s" expl="VC for triang_s" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC triang_s.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Assoc5">
   <goal name="VC triang_s.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Assoc5">
    <goal name="VC triang_s.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(b +. (c +. ((d -. b) +. e)))" arg2="(c+.d+.e )">
     <goal name="VC triang_s.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
     </goal>
     <goal name="VC triang_s.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="Assoc5">
      <goal name="VC triang_s.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="replace" proved="true" arg1="(b +. (c +. ((d -. b) +. e)))" arg2="( (c +. ((d -. b) +. b +. e)))">
       <goal name="VC triang_s.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="((d -. b) +. b)" arg2="d">
        <goal name="VC triang_s.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
        </goal>
        <goal name="VC triang_s.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="0.24"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC triang_s.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC triang_t" expl="VC for triang_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC triang_t.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="33"/></proof>
  </goal>
  <goal name="VC triang_t.1" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC triang_t.2" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC triang_t.3" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(a-. b)" arg2="(a+. (-.b))">
   <goal name="VC triang_t.3.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(b-. c)" arg2="(b+. (-.c))">
    <goal name="VC triang_t.3.0.0" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="(forall a b c d. (a+. b) +. (c+. d)  = a +. (b+. c) +. d)">
     <goal name="VC triang_t.3.0.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="37"/></proof>
     </goal>
     <goal name="VC triang_t.3.0.0.1" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="h">
      <goal name="VC triang_t.3.0.0.1.0" expl="assertion" proved="true">
      <proof prover="0"><result status="valid" time="0.20"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC triang_t.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.44" steps="39"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC triang_t.3.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.45" steps="39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC triang_t.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((a +. b) *. (a -. b))" arg2="(a *. (a-. b) +. b*. (a-.b))">
   <goal name="VC triang_t.4.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.35" steps="39"/></proof>
   </goal>
   <goal name="VC triang_t.4.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC triang_sr" expl="VC for triang_sr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC triang_sr.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(((a -. b) +. c) +. ((d +. b) +. e))" arg2="( ((d +. b) +. e)+.((a -. b) +. c))">
   <goal name="VC triang_sr.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="33"/></proof>
   </goal>
   <goal name="VC triang_sr.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_pos" expl="VC for add_pos" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="37"/></proof>
 </goal>
 <goal name="VC add_pos_strit_l" expl="VC for add_pos_strit_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_pos_strit_l.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_pos_strit_r" expl="VC for add_pos_strit_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_pos_strit_r.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_pre_pre" expl="VC for modulus_pre_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_pre_pre.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC modulus_pre_pre.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="Mul_distr_r2">
   <goal name="VC modulus_pre_pre.1.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="33"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_pre" expl="VC for modulus_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_pre.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="((a *. b) *. (a *. b))" arg2="((a *. a) *. (b *. b))">
   <goal name="VC modulus_pre.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((c *. d) *. (c *. d))" arg2="((c *. c) *. (d *. d))">
    <goal name="VC modulus_pre.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((a *. d) *. (a *. d))" arg2="((a*.a)*.(d*.d))">
     <goal name="VC modulus_pre.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="((c *. b) *. (c *. b))" arg2="((c*.c) *. (b*.b))">
      <goal name="VC modulus_pre.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="1.07" steps="33"/></proof>
      </goal>
      <goal name="VC modulus_pre.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC modulus_pre.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="31"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_pre.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modulus_pre.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.01" steps="31"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_rt" expl="VC for square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC square_rt.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC square_rt.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
  </goal>
  <goal name="VC square_rt.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(real_ x)">
   <goal name="VC square_rt.2.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="41"/></proof>
   </goal>
   <goal name="VC square_rt.2.1" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC square_rt.2.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC square_rt.2.1.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="1.42" steps="48"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC square_rt.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_rt_eq" expl="VC for square_rt_eq" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="37"/></proof>
 </goal>
 <goal name="real_square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="real_square_rt.0" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="pos_square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pos_square_rt.0" proved="true">
  <proof prover="1"><result status="valid" time="0.12" steps="37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_rt_square" expl="VC for square_rt_square" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="35"/></proof>
 </goal>
 <goal name="VC square_rt_infeq" expl="VC for square_rt_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC square_rt_infeq.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_rt_inf" expl="VC for square_rt_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC square_rt_inf.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(square_rt x &lt;=. square_rt y)">
   <goal name="VC square_rt_inf.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.14" steps="37"/></proof>
   </goal>
   <goal name="VC square_rt_inf.0.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(square_rt x = square_rt y)">
    <goal name="VC square_rt_inf.0.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="3.79"/></proof>
    </goal>
    <goal name="VC square_rt_inf.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.09" steps="41"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_square_rt" expl="VC for injective_square_rt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injective_square_rt.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="complete_order_real_">
   <goal name="VC injective_square_rt.0.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
   </goal>
   <goal name="VC injective_square_rt.0.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
   </goal>
   <goal name="VC injective_square_rt.0.2" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.07"/></proof>
   </goal>
   <goal name="VC injective_square_rt.0.3" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.06"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injective_square" expl="VC for injective_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injective_square.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="complete_order_real_">
   <goal name="VC injective_square.0.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
   </goal>
   <goal name="VC injective_square.0.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
   </goal>
   <goal name="VC injective_square.0.2" expl="apply premises" proved="true">
   <transf name="case" proved="true" arg1="(y&lt;.x)">
    <goal name="VC injective_square.0.2.0" expl="true case (apply premises)" proved="true">
    <transf name="assert" proved="true" arg1="(y*.y &lt;. x*.x)">
     <goal name="VC injective_square.0.2.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="compat_inf_mult_both">
      <goal name="VC injective_square.0.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
      </goal>
      <goal name="VC injective_square.0.2.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
      </goal>
      <goal name="VC injective_square.0.2.0.0.2" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
      </goal>
      <goal name="VC injective_square.0.2.0.0.3" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
      </goal>
      <goal name="VC injective_square.0.2.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.40"/></proof>
      </goal>
      <goal name="VC injective_square.0.2.0.0.5" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.06" steps="45"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC injective_square.0.2.0.1" expl="true case (apply premises)" proved="true">
     <proof prover="1"><result status="valid" time="0.06" steps="45"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC injective_square.0.2.1" expl="false case (apply premises)" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injective_square.0.3" expl="apply premises" proved="true">
   <transf name="case" proved="true" arg1="(x&lt;.y)">
    <goal name="VC injective_square.0.3.0" expl="true case (apply premises)" proved="true">
    <transf name="assert" proved="true" arg1="(x *. x &lt;.y*.y)">
     <goal name="VC injective_square.0.3.0.0" expl="asserted formula" proved="true">
     <transf name="case" proved="true" arg1="(x = c_zero)">
      <goal name="VC injective_square.0.3.0.0.0" expl="true case (asserted formula)" proved="true">
      <transf name="apply" proved="true" arg1="compat_inf_mult_both">
       <goal name="VC injective_square.0.3.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.0.4" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC injective_square.0.3.0.0.0.4.0" proved="true">
        <proof prover="2"><result status="valid" time="0.07"/></proof>
        </goal>
        <goal name="VC injective_square.0.3.0.0.0.4.1" proved="true">
        <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC injective_square.0.3.0.0.0.5" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC injective_square.0.3.0.0.1" expl="false case (asserted formula)" proved="true">
      <transf name="apply" proved="true" arg1="compat_inf_mult_both">
       <goal name="VC injective_square.0.3.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.1.3" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
       </goal>
       <goal name="VC injective_square.0.3.0.0.1.4" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC injective_square.0.3.0.0.1.4.0" proved="true">
        <proof prover="1"><result status="valid" time="0.06" steps="47"/></proof>
        </goal>
        <goal name="VC injective_square.0.3.0.0.1.4.1" proved="true">
        <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC injective_square.0.3.0.0.1.5" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.06" steps="47"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC injective_square.0.3.0.1" expl="true case (apply premises)" proved="true">
     <proof prover="1"><result status="valid" time="0.05" steps="45"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC injective_square.0.3.1" expl="false case (apply premises)" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_rt_c_one" expl="VC for square_rt_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC square_rt_c_one.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC square_rt_c_one.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="square_rt_def">
   <goal name="VC square_rt_c_one.1.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.25"/></proof>
   </goal>
   <goal name="VC square_rt_c_one.1.1" expl="rewrite premises" proved="true">
   <proof prover="1"><result status="valid" time="0.02" steps="33"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_mult.0" proved="true">
  <transf name="apply" proved="true" arg1="injective_square">
   <goal name="square_rt_mult.0.0" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="43"/></proof>
   </goal>
   <goal name="square_rt_mult.0.1" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="43"/></proof>
   </goal>
   <goal name="square_rt_mult.0.2" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="43"/></proof>
   </goal>
   <goal name="square_rt_mult.0.3" expl="apply premises" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="43"/></proof>
   </goal>
   <goal name="square_rt_mult.0.4" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.08"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="square_rt_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="square_rt_mult_rev.0" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus" expl="VC for modulus" proved="true">
 <proof prover="1"><result status="valid" time="0.11" steps="39"/></proof>
 </goal>
 <goal name="VC modulus_eq" expl="VC for modulus_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_eq.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_minus" expl="VC for modulus_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_minus.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC modulus_minus.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="modulus_def">
    <goal name="VC modulus_minus.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="modulus_def">
     <goal name="VC modulus_minus.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="square_rt_eq">
      <goal name="VC modulus_minus.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="add_pos">
       <goal name="VC modulus_minus.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.07"/></proof>
       </goal>
       <goal name="VC modulus_minus.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.08"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC modulus_minus.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="add_pos">
       <goal name="VC modulus_minus.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.07"/></proof>
       </goal>
       <goal name="VC modulus_minus.0.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.06"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC modulus_minus.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="add_eq_t">
       <goal name="VC modulus_minus.0.0.0.0.2.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.23"/></proof>
       </goal>
       <goal name="VC modulus_minus.0.0.0.0.2.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.26"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_rt_simpl" expl="VC for square_rt_simpl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC square_rt_simpl.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(x *. (c_one /. square_rt x))" arg2="(square_rt x *. square_rt x  *. (c_one /. square_rt x) )">
   <goal name="VC square_rt_simpl.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.07"/></proof>
   </goal>
   <goal name="VC square_rt_simpl.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.05" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC square_rt_simpl_fact" expl="VC for square_rt_simpl_fact" proved="true">
 <proof prover="1"><result status="valid" time="0.06" steps="37"/></proof>
 </goal>
 <goal name="VC square_rt_simpl_mult" expl="VC for square_rt_simpl_mult" proved="true">
 <proof prover="2"><result status="valid" time="0.51"/></proof>
 </goal>
 <goal name="VC square_rt_simpl_fact_assoc" expl="VC for square_rt_simpl_fact_assoc" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="37"/></proof>
 </goal>
 <goal name="VC modulus_itself" expl="VC for modulus_itself" proved="true">
 <proof prover="1"><result status="valid" time="0.03" steps="35"/></proof>
 </goal>
 <goal name="VC modulus_real_pos" expl="VC for modulus_real_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_real_pos.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC modulus_real_pos.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="modulus_def">
    <goal name="VC modulus_real_pos.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_zero_t">
     <goal name="VC modulus_real_pos.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.38"/></proof>
     </goal>
     <goal name="VC modulus_real_pos.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.07"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_real_pos_inv" expl="VC for modulus_real_pos_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_real_pos_inv.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC modulus_real_pos_inv.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="modulus_def">
    <goal name="VC modulus_real_pos_inv.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_zero_t">
     <goal name="VC modulus_real_pos_inv.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(t_real_part (-. x) )" arg2="(-. t_real_part x)">
      <goal name="VC modulus_real_pos_inv.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(forall x . -. x *. (-. x)  = x*.x)">
       <goal name="VC modulus_real_pos_inv.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.06" steps="42"/></proof>
       </goal>
       <goal name="VC modulus_real_pos_inv.0.0.0.0.0.1" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="h">
        <goal name="VC modulus_real_pos_inv.0.0.0.0.0.1.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.26"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC modulus_real_pos_inv.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="0.07" steps="42"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC modulus_real_pos_inv.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.07"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_real_neg" expl="VC for modulus_real_neg" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_real_neg.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="5.00"/></proof>
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="valid" time="0.25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_positive_modulus" expl="VC for strict_positive_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_positive_modulus.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(c_zero&lt;=. modulus x)">
   <goal name="VC strict_positive_modulus.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.04" steps="37"/></proof>
   </goal>
   <goal name="VC strict_positive_modulus.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(not (c_zero =  modulus x))">
    <goal name="VC strict_positive_modulus.0.1.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC strict_positive_modulus.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="modulus_def">
      <goal name="VC strict_positive_modulus.0.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="case" proved="true" arg1="(t_real_part x &lt;&gt; c_zero)">
       <goal name="VC strict_positive_modulus.0.1.0.0.0.0" expl="true case (asserted formula)" proved="true">
       <transf name="assert" proved="true" arg1="(c_zero &lt;. (t_real_part x *. t_real_part x) )">
        <goal name="VC strict_positive_modulus.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="1"><result status="valid" time="0.05" steps="44"/></proof>
        </goal>
        <goal name="VC strict_positive_modulus.0.1.0.0.0.0.1" expl="true case (asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(c_zero &lt;=. (t_im_part x *. t_im_part x) )">
         <goal name="VC strict_positive_modulus.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="1"><result status="valid" time="0.05" steps="46"/></proof>
         </goal>
         <goal name="VC strict_positive_modulus.0.1.0.0.0.0.1.1" expl="true case (asserted formula)" proved="true">
         <proof prover="2"><result status="valid" time="0.49"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC strict_positive_modulus.0.1.0.0.0.1" expl="false case (asserted formula)" proved="true">
       <transf name="case" proved="true" arg1="(t_im_part x &lt;&gt; c_zero)">
        <goal name="VC strict_positive_modulus.0.1.0.0.0.1.0" expl="false case (true case. asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(c_zero &lt;. (t_im_part x *. t_im_part x) )">
         <goal name="VC strict_positive_modulus.0.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(c_zero &lt;=. (t_real_part x *. t_real_part x) )">
          <goal name="VC strict_positive_modulus.0.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.06" steps="46"/></proof>
          </goal>
          <goal name="VC strict_positive_modulus.0.1.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.06" steps="48"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC strict_positive_modulus.0.1.0.0.0.1.0.1" expl="false case (true case. asserted formula)" proved="true">
         <proof prover="2"><result status="valid" time="0.46"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC strict_positive_modulus.0.1.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
        <proof prover="2"><result status="valid" time="0.27"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC strict_positive_modulus.0.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.15" steps="41"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC not_modulus_zero" expl="VC for not_modulus_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC not_modulus_zero.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_real" expl="VC for modulus_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_real.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_mult_real_square" expl="VC for t_mult_real_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_mult_real_square.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
  </goal>
  <goal name="VC t_mult_real_square.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC t_mult_real_square.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC t_mult_real_square.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC t_mult_real_square.1.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="substr_eq_t">
      <goal name="VC t_mult_real_square.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
      </goal>
      <goal name="VC t_mult_real_square.1.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="0.05" steps="45"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC t_mult_im_square" expl="VC for t_mult_im_square" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC t_mult_im_square.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="45"/></proof>
  </goal>
  <goal name="VC t_mult_im_square.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC t_mult_im_square.1.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.06" steps="45"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_modulus_pre" expl="VC for mult_modulus_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_modulus_pre.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall a b c. (a+.c) +.(b-.c) = a+. b)">
   <goal name="VC mult_modulus_pre.0.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mult_modulus_pre.0.0.0" expl="asserted formula" proved="true">
    <transf name="replace" proved="true" arg1="(b-. c)" arg2="(b+. (-.c))">
     <goal name="VC mult_modulus_pre.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="((a +. c) +. (b +. (-. c)))" arg2="(a+. b +. (c+. (-.c)))">
      <goal name="VC mult_modulus_pre.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.21"/></proof>
      </goal>
      <goal name="VC mult_modulus_pre.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="0.88" steps="37"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mult_modulus_pre.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.13"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mult_modulus_pre.0.1" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b c. (a-.c) +.(b+.c) = a+. b)">
    <goal name="VC mult_modulus_pre.0.1.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mult_modulus_pre.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.50"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mult_modulus_pre.0.1.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.20"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_modulus_pre.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC mult_modulus_pre.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC mult_modulus_pre.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC mult_modulus_pre.1.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.89" steps="37"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_modulus" expl="VC for mult_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_modulus.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC mult_modulus.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="modulus_def">
    <goal name="VC mult_modulus.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="modulus_def">
     <goal name="VC mult_modulus.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="modulus_def">
      <goal name="VC mult_modulus.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="square_rt_mult">
       <goal name="VC mult_modulus.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="injective_square">
        <goal name="VC mult_modulus.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.17" steps="38"/></proof>
        </goal>
        <goal name="VC mult_modulus.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.14" steps="38"/></proof>
        </goal>
        <goal name="VC mult_modulus.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.06" steps="38"/></proof>
        </goal>
        <goal name="VC mult_modulus.0.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.13" steps="38"/></proof>
        </goal>
        <goal name="VC mult_modulus.0.0.0.0.0.0.4" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(forall x. real_ x -&gt; c_zero &lt;=. x -&gt; square_rt x *. square_rt x = x)">
         <goal name="VC mult_modulus.0.0.0.0.0.0.4.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mult_modulus.0.0.0.0.0.0.4.0.0" expl="asserted formula" proved="true">
          <proof prover="1"><result status="valid" time="0.15" steps="42"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mult_modulus.0.0.0.0.0.0.4.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="h">
          <goal name="VC mult_modulus.0.0.0.0.0.0.4.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="h">
           <goal name="VC mult_modulus.0.0.0.0.0.0.4.1.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.20" steps="38"/></proof>
           </goal>
           <goal name="VC mult_modulus.0.0.0.0.0.0.4.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.11" steps="38"/></proof>
           </goal>
           <goal name="VC mult_modulus.0.0.0.0.0.0.4.1.0.2" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.19" steps="38"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mult_modulus.0.0.0.0.0.0.4.1.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.17" steps="38"/></proof>
          </goal>
          <goal name="VC mult_modulus.0.0.0.0.0.0.4.1.2" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.06" steps="38"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mult_modulus.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="0.05" steps="38"/></proof>
       </goal>
       <goal name="VC mult_modulus.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="0.05" steps="38"/></proof>
       </goal>
       <goal name="VC mult_modulus.0.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="0.17" steps="38"/></proof>
       </goal>
       <goal name="VC mult_modulus.0.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="0.16" steps="38"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_modulus_rev" expl="VC for mult_modulus_rev" proved="true">
 <proof prover="1"><result status="valid" time="0.06" steps="35"/></proof>
 </goal>
 <goal name="VC modulus_real_minus_bound" expl="VC for modulus_real_minus_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_real_minus_bound.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC modulus_real_minus_bound.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="highfailure" time="1.46"/></proof>
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="timeout" time="5.00"/></proof>
   <proof prover="3"><result status="timeout" time="5.00"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   <proof prover="5"><result status="timeout" time="5.00"/></proof>
   <transf name="replace" proved="true" arg1="(a -&#39;&#39; b)" arg2="(a -. b)" arg3="in" arg4="H">
    <goal name="VC modulus_real_minus_bound.0.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(a=b)">
     <goal name="VC modulus_real_minus_bound.0.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="2"><result status="valid" time="0.37"/></proof>
     </goal>
     <goal name="VC modulus_real_minus_bound.0.0.0.1" expl="false case (postcondition)" proved="true">
     <transf name="case" proved="true" arg1="(a&lt;.b)">
      <goal name="VC modulus_real_minus_bound.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
      <proof prover="2"><result status="valid" time="0.48"/></proof>
      </goal>
      <goal name="VC modulus_real_minus_bound.0.0.0.1.1" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="modulus_real_pos" arg2="in" arg3="H">
       <goal name="VC modulus_real_minus_bound.0.0.0.1.1.0" expl="false case (postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.42"/></proof>
       </goal>
       <goal name="VC modulus_real_minus_bound.0.0.0.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.07"/></proof>
       </goal>
       <goal name="VC modulus_real_minus_bound.0.0.0.1.1.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.34"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_real_minus_bound.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="0.07"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modulus_real_minus_bound.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="highfailure" time="2.32"/></proof>
   <proof prover="1"><result status="timeout" time="5.00"/></proof>
   <proof prover="2"><result status="timeout" time="5.00"/></proof>
   <proof prover="3"><result status="timeout" time="5.00"/></proof>
   <proof prover="4"><result status="timeout" time="5.00"/></proof>
   <proof prover="5"><result status="timeout" time="5.00"/></proof>
   <transf name="replace" proved="true" arg1="(a -&#39;&#39; b)" arg2="(a -. b)" arg3="in" arg4="H">
    <goal name="VC modulus_real_minus_bound.0.1.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(a=b)">
     <goal name="VC modulus_real_minus_bound.0.1.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="2"><result status="valid" time="0.08"/></proof>
     </goal>
     <goal name="VC modulus_real_minus_bound.0.1.0.1" expl="false case (postcondition)" proved="true">
     <transf name="case" proved="true" arg1="(a&lt;.b)">
      <goal name="VC modulus_real_minus_bound.0.1.0.1.0" expl="false case (true case. postcondition)" proved="true">
      <proof prover="0"><result status="highfailure" time="1.38"/></proof>
      <proof prover="1"><result status="timeout" time="5.00"/></proof>
      <proof prover="2"><result status="timeout" time="5.00"/></proof>
      <proof prover="4"><result status="timeout" time="5.00"/></proof>
      <proof prover="5"><result status="timeout" time="5.00"/></proof>
      <transf name="replace" proved="true" arg1="(modulus (a -. b))" arg2="(b-.a)" arg3="in" arg4="H">
       <goal name="VC modulus_real_minus_bound.0.1.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.07"/></proof>
       </goal>
       <goal name="VC modulus_real_minus_bound.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="highfailure" time="1.59"/></proof>
       <proof prover="1"><result status="timeout" time="5.00"/></proof>
       <proof prover="4"><result status="valid" time="0.08"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC modulus_real_minus_bound.0.1.0.1.1" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="modulus_real_pos" arg2="in" arg3="H">
       <goal name="VC modulus_real_minus_bound.0.1.0.1.1.0" expl="false case (postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.44"/></proof>
       </goal>
       <goal name="VC modulus_real_minus_bound.0.1.0.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.07"/></proof>
       </goal>
       <goal name="VC modulus_real_minus_bound.0.1.0.1.1.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.35"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_real_minus_bound.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="0.07"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_real_modulus" expl="VC for mult_real_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_real_modulus.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="VC mult_real_modulus.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="VC mult_real_modulus.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_real_modulus_rev" expl="VC for mult_real_modulus_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_real_modulus_rev.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="VC mult_real_modulus_rev.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
  <goal name="VC mult_real_modulus_rev.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_real_div" expl="VC for modulus_real_div">
 <transf name="split_vc" >
  <goal name="VC modulus_real_div.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="39"/></proof>
  </goal>
  <goal name="VC modulus_real_div.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="41"/></proof>
  </goal>
  <goal name="VC modulus_real_div.2" expl="postcondition">
  <proof prover="0"><result status="timeout" time="5.00"/></proof>
  <proof prover="1"><result status="timeout" time="5.00"/></proof>
  <proof prover="2"><result status="timeout" time="5.00"/></proof>
  <proof prover="3"><result status="timeout" time="5.00"/></proof>
  <proof prover="4"><result status="timeout" time="5.00"/></proof>
  <proof prover="5"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_modulus_real" expl="VC for mult_modulus_real" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_modulus_real.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="VC mult_modulus_real.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="39"/></proof>
  </goal>
  <goal name="VC mult_modulus_real.2" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_modulus_non_null" expl="VC for mult_modulus_non_null" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="39"/></proof>
 </goal>
 <goal name="VC modulus_to_non_null" expl="VC for modulus_to_non_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_to_non_null.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_c_one_modulus" expl="VC for mult_c_one_modulus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_c_one_modulus.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_pos" expl="VC for modulus_pos" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="39"/></proof>
 </goal>
 <goal name="VC modulus_infeq" expl="VC for modulus_infeq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_infeq.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_inf" expl="VC for modulus_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_inf.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_diff_rev" expl="VC for modulus_diff_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_diff_rev.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC modulus_diff_rev.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(a-.b)" arg2="(a+. (-.b))">
    <goal name="VC modulus_diff_rev.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(b-.a)" arg2="(b+. (-.a))">
     <goal name="VC modulus_diff_rev.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="modulus_eq">
      <goal name="VC modulus_diff_rev.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(a+. (-. b))" arg2="(-. (b+.(-.a)))">
       <goal name="VC modulus_diff_rev.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.08"/></proof>
       </goal>
       <goal name="VC modulus_diff_rev.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="0.05" steps="37"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC modulus_diff_rev.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(a+. (-. b))" arg2="(-. (b+.(-.a)))">
       <goal name="VC modulus_diff_rev.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.07"/></proof>
       </goal>
       <goal name="VC modulus_diff_rev.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="0.05" steps="37"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC modulus_diff_rev.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.17" steps="37"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_diff_rev.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.07" steps="37"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_simpl_leq" expl="VC for modulus_simpl_leq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_simpl_leq.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(real_ a)">
   <goal name="VC modulus_simpl_leq.0.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(real_ c)">
    <goal name="VC modulus_simpl_leq.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(c_zero &lt;=. a)">
     <goal name="VC modulus_simpl_leq.0.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="2"><result status="valid" time="0.41"/></proof>
     </goal>
     <goal name="VC modulus_simpl_leq.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
     <proof prover="3"><result status="valid" time="3.04"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_simpl_leq.0.0.1" expl="false case (true case. postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modulus_simpl_leq.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(real_ c)">
    <goal name="VC modulus_simpl_leq.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
    </goal>
    <goal name="VC modulus_simpl_leq.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modulus_simpl_leq_rev" expl="VC for modulus_simpl_leq_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modulus_simpl_leq_rev.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(real_ a)">
   <goal name="VC modulus_simpl_leq_rev.0.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(real_ c)">
    <goal name="VC modulus_simpl_leq_rev.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="3.64"/></proof>
    </goal>
    <goal name="VC modulus_simpl_leq_rev.0.0.1" expl="false case (true case. postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC modulus_simpl_leq_rev.0.1" expl="false case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(a=b)">
    <goal name="VC modulus_simpl_leq_rev.0.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(not (real_ b))">
     <goal name="VC modulus_simpl_leq_rev.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
     </goal>
     <goal name="VC modulus_simpl_leq_rev.0.1.0.1" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.03" steps="45"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modulus_simpl_leq_rev.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.02" steps="45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_eq" expl="VC for div_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_eq.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_eq_inv_t" expl="VC for add_eq_inv_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_eq_inv_t.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_eq_inv_t" expl="VC for mult_eq_inv_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_eq_inv_t.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_frac" expl="VC for sum_frac" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_frac.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sum_frac_rev" expl="VC for sum_frac_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sum_frac_rev.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_pos" expl="VC for div_pos" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_pos.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="41"/></proof>
  </goal>
  <goal name="VC div_pos.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="VC div_pos.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="43"/></proof>
  </goal>
  <goal name="VC div_pos.3" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="45"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
