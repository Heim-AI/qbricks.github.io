<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="4">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file name="../shaped_mat.mlw" proved="true">
<theory name="Diag_mat" proved="true">
 <goal name="VC diag_mat" expl="VC for diag_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="79"/></proof>
  </goal>
  <goal name="VC diag_mat.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="79"/></proof>
  </goal>
  <goal name="VC diag_mat.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC diag_mat.2.0" expl="postcondition" proved="true">
   <transf name="compute_hyp" proved="true" >
    <goal name="VC diag_mat.2.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.20" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_mat.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC diag_mat.3.0" expl="postcondition" proved="true">
   <transf name="compute_hyp" proved="true" >
    <goal name="VC diag_mat.3.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.21" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_values" expl="VC for diag_mat_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_values.0" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.50" steps="562"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_eq" expl="VC for diag_mat_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_eq.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.12" steps="79"/></proof>
  </goal>
  <goal name="VC diag_mat_eq.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.20" steps="79"/></proof>
  </goal>
  <goal name="VC diag_mat_eq.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.15" steps="203"/></proof>
  </goal>
  <goal name="VC diag_mat_eq.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.14" steps="209"/></proof>
  </goal>
  <goal name="VC diag_mat_eq.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="2.48" steps="1135"/></proof>
  </goal>
  <goal name="VC diag_mat_eq.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="81"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_diag" expl="VC for mat_mult_diag" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_mult_diag.0" expl="VC for mat_mult_diag" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_mult_diag.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="79"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.14" steps="192"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.2" expl="assertion" proved="true">
   <transf name="instantiate" proved="true" arg1="ind_sum_indic_t_quant" arg2="(fun (k:int) -&gt; (((get m @ i) @ k) *. (f @ j))),0,(columns m)">
    <goal name="VC mat_mult_diag.0.2.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
     <goal name="VC mat_mult_diag.0.2.0.0" expl="assertion" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC mat_mult_diag.0.2.0.0.0" proved="true">
      <proof prover="5"><result status="valid" time="0.23" steps="80"/></proof>
      </goal>
      <goal name="VC mat_mult_diag.0.2.0.0.1" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="( ind_sum (fun (k:int) -&gt; (get m i k *. (f @ j)) *. indic j k) 0 (columns m))" arg2="(ind_sum
  (fun (e:int) -&gt;
    ((fun (k:int) -&gt;
       ((((fun (y0:matrix t) (y1:int) (y2:int) -&gt; get y0 y1 y2) @ m) @ i) @ k)
       *. (f @ j))
     @ e)
    *. indic j e)
  0 (columns m))">
       <goal name="VC mat_mult_diag.0.2.0.0.1.0" expl="assertion" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC mat_mult_diag.0.2.0.0.1.0.0" expl="assertion" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_diag.0.2.0.0.1.1" proved="true">
       <transf name="apply" proved="true" arg1="ind_sum_eq">
        <goal name="VC mat_mult_diag.0.2.0.0.1.1.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_mult_diag.0.2.0.0.1.1.0.0" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_diag.0.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.13" steps="79"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.15" steps="192"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="83"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.6" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="85"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.7" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="87"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.8" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.19" steps="282"/></proof>
   </goal>
   <goal name="VC mat_mult_diag.0.9" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H6">
    <goal name="VC mat_mult_diag.0.9.0" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="H11" arg2="i,j">
     <goal name="VC mat_mult_diag.0.9.0.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; get m i k *. get (diag_mat (columns m) f) k j) 0
    (columns m))" arg2="(ind_sum (fun (k:int) -&gt; (get m i k *. (f @ j)) *. indic j k) 0 (columns m))">
      <goal name="VC mat_mult_diag.0.9.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC mat_mult_diag.0.9.0.0.0.0" expl="precondition" proved="true">
       <proof prover="5"><result status="valid" time="0.15" steps="470"/></proof>
       </goal>
       <goal name="VC mat_mult_diag.0.9.0.0.0.1" proved="true">
       <proof prover="5"><result status="valid" time="0.14" steps="315"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_diag.0.9.0.0.1" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq">
       <goal name="VC mat_mult_diag.0.9.0.0.1.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_diag.0.9.0.0.1.0.0" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_diag.0.9.0.0.1.0.0.0" proved="true">
         <proof prover="5"><result status="valid" time="1.25" steps="688"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_diag.0.9.1" proved="true">
    <proof prover="5"><result status="valid" time="0.15" steps="306"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_diag.0.10" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.63"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mult_mat" expl="VC for diag_mult_mat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC diag_mult_mat.0" expl="VC for diag_mult_mat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC diag_mult_mat.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.23" steps="79"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="192"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.2" expl="assertion" proved="true">
   <transf name="instantiate" proved="true" arg1="ind_sum_indic_t_quant" arg2="(fun k -&gt; f i *. get m k j),0,(rows m)">
    <goal name="VC diag_mult_mat.0.2.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="i">
     <goal name="VC diag_mult_mat.0.2.0.0" expl="assertion" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC diag_mult_mat.0.2.0.0.0" proved="true">
      <proof prover="5"><result status="valid" time="0.14" steps="80"/></proof>
      </goal>
      <goal name="VC diag_mult_mat.0.2.0.0.1" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; ((f @ i) *. get m k j) *. indic i k) 0 (rows m))" arg2="(ind_sum
  (fun (e:int) -&gt; ((fun (k:int) -&gt; (f @ i) *. get m k j) @ e) *. indic i e) 0
  (rows m))">
       <goal name="VC diag_mult_mat.0.2.0.0.1.0" expl="assertion" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC diag_mult_mat.0.2.0.0.1.0.0" expl="assertion" proved="true">
        <proof prover="5"><result status="valid" time="0.11" steps="83"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC diag_mult_mat.0.2.0.0.1.1" proved="true">
       <transf name="apply" proved="true" arg1="ind_sum_eq">
        <goal name="VC diag_mult_mat.0.2.0.0.1.1.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC diag_mult_mat.0.2.0.0.1.1.0.0" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC diag_mult_mat.0.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="79"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.13" steps="192"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="83"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.6" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="85"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.7" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.28" steps="251"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.8" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="89"/></proof>
   </goal>
   <goal name="VC diag_mult_mat.0.9" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H3">
    <goal name="VC diag_mult_mat.0.9.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC diag_mult_mat.0.9.0.0" expl="precondition" proved="true">
     <transf name="instantiate" proved="true" arg1="H11" arg2="i,j">
      <goal name="VC diag_mult_mat.0.9.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; get (diag_mat (rows m) f) i k *. get m k j) 0
    (columns (diag_mat (rows m) f)))" arg2="(ind_sum (fun (k:int) -&gt; ((f @ i) *. get m k j) *. indic i k) 0 (rows m))">
       <goal name="VC diag_mult_mat.0.9.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC diag_mult_mat.0.9.0.0.0.0.0" expl="precondition" proved="true">
        <proof prover="5"><result status="valid" time="0.12" steps="94"/></proof>
        </goal>
        <goal name="VC diag_mult_mat.0.9.0.0.0.0.1" proved="true">
        <proof prover="5"><result status="valid" time="0.13" steps="312"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC diag_mult_mat.0.9.0.0.0.1" proved="true">
       <transf name="apply" proved="true" arg1="ind_sum_eq_gen">
        <goal name="VC diag_mult_mat.0.9.0.0.0.1.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC diag_mult_mat.0.9.0.0.0.1.0.0" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC diag_mult_mat.0.9.0.0.0.1.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="diag_mat_values">
           <goal name="VC diag_mult_mat.0.9.0.0.0.1.0.0.0.0" proved="true">
           <proof prover="5"><result status="valid" time="0.13" steps="95"/></proof>
           </goal>
           <goal name="VC diag_mult_mat.0.9.0.0.0.1.0.0.0.1" proved="true">
           <proof prover="5"><result status="valid" time="0.72" steps="601"/></proof>
           </goal>
           <goal name="VC diag_mult_mat.0.9.0.0.0.1.0.0.0.2" proved="true">
           <proof prover="5"><result status="valid" time="0.17" steps="101"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC diag_mult_mat.0.9.0.0.0.1.1" proved="true">
        <proof prover="5"><result status="valid" time="0.38" steps="575"/></proof>
        </goal>
        <goal name="VC diag_mult_mat.0.9.0.0.0.1.2" proved="true">
        <proof prover="5"><result status="valid" time="0.12" steps="91"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC diag_mult_mat.0.9.0.1" proved="true">
     <proof prover="5"><result status="valid" time="0.23" steps="306"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC diag_mult_mat.0.10" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.73"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mult_diag" expl="VC for diag_mult_diag" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC diag_mult_diag.0" expl="VC for diag_mult_diag" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC diag_mult_diag.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="79"/></proof>
   </goal>
   <goal name="VC diag_mult_diag.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="81"/></proof>
   </goal>
   <goal name="VC diag_mult_diag.0.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="81"/></proof>
   </goal>
   <goal name="VC diag_mult_diag.0.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="81"/></proof>
   </goal>
   <goal name="VC diag_mult_diag.0.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="81"/></proof>
   </goal>
   <goal name="VC diag_mult_diag.0.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.33" steps="264"/></proof>
   </goal>
   <goal name="VC diag_mult_diag.0.6" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="305"/></proof>
   </goal>
   <goal name="VC diag_mult_diag.0.7" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC diag_mult_diag.0.7.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC diag_mult_diag.0.7.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.37"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC diag_mult_diag.0.7.1" proved="true">
    <proof prover="5"><result status="valid" time="0.24" steps="94"/></proof>
    </goal>
    <goal name="VC diag_mult_diag.0.7.2" proved="true">
    <proof prover="5"><result status="valid" time="0.25" steps="94"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC diag_mult_diag.0.8" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(columns (diag_mat n f))" arg2="n" arg3="in" arg4="H6">
    <goal name="VC diag_mult_diag.0.8.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC diag_mult_diag.0.8.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(rows (diag_mat n f))" arg2="n">
      <goal name="VC diag_mult_diag.0.8.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC diag_mult_diag.0.8.0.0.1" proved="true">
      <proof prover="5"><result status="valid" time="0.16" steps="254"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC diag_mult_diag.0.8.1" proved="true">
    <proof prover="5"><result status="valid" time="0.16" steps="258"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_product_re" expl="VC for ind_product_re" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_product_re.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ind_product_right_extension" arg2="(fun (i1:int) -&gt; (f @ i1) @ k),i,(j+1)">
   <goal name="VC ind_product_re.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.56"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_mat_diag_prod" expl="VC for int_mat_diag_prod" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC int_mat_diag_prod.0" expl="VC for int_mat_diag_prod" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_mat_diag_prod.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="83"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.1" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC int_mat_diag_prod.0.1.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_mat_diag_prod.0.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="85"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.3" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="83"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="83"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="83"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.6" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.19" steps="85"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.7" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="85"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.8" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC int_mat_diag_prod.0.8.0" expl="precondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC int_mat_diag_prod.0.8.0.0" expl="VC for int_mat_diag_prod" proved="true">
     <proof prover="5"><result status="valid" time="0.17" steps="244"/></proof>
     </goal>
     <goal name="VC int_mat_diag_prod.0.8.0.1" expl="VC for int_mat_diag_prod" proved="true">
     <proof prover="5"><result status="valid" time="0.14" steps="232"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC int_mat_diag_prod.0.9" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="87"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.10" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.20" steps="89"/></proof>
   </goal>
   <goal name="VC int_mat_diag_prod.0.11" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC int_mat_diag_prod.0.11.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(i = j)">
     <goal name="VC int_mat_diag_prod.0.11.0.0" expl="true case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC int_mat_diag_prod.0.11.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H4">
       <goal name="VC int_mat_diag_prod.0.11.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_mat">
         <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="diag_mat_values">
           <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0.0" proved="true">
           <transf name="rewrite" proved="true" arg1="diag_mat_values">
            <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0.0.0" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0.0.0.0" proved="true">
             <proof prover="5"><result status="valid" time="1.32" steps="295"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0.0.1" proved="true">
            <proof prover="5"><result status="valid" time="0.18" steps="288"/></proof>
            </goal>
            <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0.0.2" proved="true">
            <proof prover="5"><result status="valid" time="0.17" steps="288"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0.1" proved="true">
           <proof prover="5"><result status="valid" time="0.17" steps="288"/></proof>
           </goal>
           <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.0.0.2" proved="true">
           <proof prover="5"><result status="valid" time="0.18" steps="288"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.1" proved="true">
         <proof prover="5"><result status="valid" time="0.19" steps="237"/></proof>
         </goal>
         <goal name="VC int_mat_diag_prod.0.11.0.0.0.0.0.2" proved="true">
         <proof prover="5"><result status="valid" time="0.18" steps="233"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_mat_diag_prod.0.11.0.0.0.1" proved="true">
       <proof prover="5"><result status="valid" time="0.21" steps="83"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_mat_diag_prod.0.11.0.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC int_mat_diag_prod.0.11.0.1.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC int_mat_diag_prod.0.11.0.1.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H3">
        <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="((j - 1) + 1)" arg2="j">
         <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((fun (k:int) -&gt; diag_mat n (f @ k)) @ j)" arg2="(diag_mat n (f @ j))">
          <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="H1">
           <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
            <transf name="apply" proved="true" arg1="diag_mat_eq">
             <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0.0.0.0.0" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0.0.0.0.0.0" proved="true">
               <proof prover="1"><result status="valid" time="1.35"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0.0.0.1" proved="true">
             <proof prover="5"><result status="valid" time="0.08" steps="83"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.0.1" proved="true">
           <proof prover="5"><result status="valid" time="0.19" steps="83"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.0.1" proved="true">
          <proof prover="5"><result status="valid" time="0.10" steps="95"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.0.1" proved="true">
         <proof prover="5"><result status="valid" time="0.09" steps="83"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC int_mat_diag_prod.0.11.0.1.0.0.1" proved="true">
        <proof prover="5"><result status="valid" time="0.20" steps="83"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_mat_diag_prod.0.11.0.1.0.1" proved="true">
       <proof prover="5"><result status="valid" time="0.08" steps="83"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_two_mat" expl="VC for diag_two_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_two_mat.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.23" steps="81"/></proof>
  </goal>
  <goal name="VC diag_two_mat.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="85"/></proof>
  </goal>
  <goal name="VC diag_two_mat.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="87"/></proof>
  </goal>
  <goal name="VC diag_two_mat.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC diag_two_mat.3.0" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.20" steps="88"/></proof>
   </goal>
   <goal name="VC diag_two_mat.3.1" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_two_mat.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="91"/></proof>
  </goal>
  <goal name="VC diag_two_mat.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC diag_two_mat.5.0" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="92"/></proof>
   </goal>
   <goal name="VC diag_two_mat.5.1" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.13" steps="92"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_two_mat.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="97"/></proof>
  </goal>
  <goal name="VC diag_two_mat.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC diag_two_mat.7.0" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="98"/></proof>
   </goal>
   <goal name="VC diag_two_mat.7.1" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="98"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_two_mat.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="103"/></proof>
  </goal>
  <goal name="VC diag_two_mat.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC diag_two_mat.9.0" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="104"/></proof>
   </goal>
   <goal name="VC diag_two_mat.9.1" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="104"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_two_mat.10" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="107"/></proof>
  </goal>
  <goal name="VC diag_two_mat.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC diag_two_mat.11.0" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="108"/></proof>
   </goal>
   <goal name="VC diag_two_mat.11.1" expl="VC for diag_two_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.23" steps="108"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_two_mat.12" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="79"/></proof>
  </goal>
  <goal name="VC diag_two_mat.13" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="79"/></proof>
  </goal>
  <goal name="VC diag_two_mat.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.18" steps="81"/></proof>
  </goal>
  <goal name="VC diag_two_mat.15" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.08" steps="81"/></proof>
  </goal>
  <goal name="VC diag_two_mat.16" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="83"/></proof>
  </goal>
  <goal name="VC diag_two_mat.17" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="83"/></proof>
  </goal>
  <goal name="VC diag_two_mat.18" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(make_f (power 2 n) (power 2 n) o2)">
   <goal name="VC diag_two_mat.18.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat_make">
    <goal name="VC diag_two_mat.18.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC diag_two_mat.18.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.33"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC diag_two_mat.18.0.1" proved="true">
    <proof prover="5"><result status="valid" time="0.21" steps="85"/></proof>
    </goal>
    <goal name="VC diag_two_mat.18.0.2" proved="true">
    <proof prover="5"><result status="valid" time="0.11" steps="85"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC diag_two_mat.18.1" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="83"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC two_bloc_diag_mat" expl="VC for two_bloc_diag_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC two_bloc_diag_mat.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="81"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="85"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="87"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC two_bloc_diag_mat.3.0" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="88"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_mat.3.1" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.14" steps="88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_bloc_diag_mat.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.19" steps="91"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC two_bloc_diag_mat.5.0" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="92"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_mat.5.1" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="92"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_bloc_diag_mat.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.23" steps="95"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC two_bloc_diag_mat.7.0" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="96"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_mat.7.1" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="96"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_bloc_diag_mat.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="101"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC two_bloc_diag_mat.9.0" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="102"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_mat.9.1" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="102"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_bloc_diag_mat.10" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="107"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC two_bloc_diag_mat.11.0" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="108"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_mat.11.1" expl="VC for two_bloc_diag_mat" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="108"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC two_bloc_diag_mat.12" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="79"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.13" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.19" steps="79"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="81"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.15" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="81"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.16" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.13" steps="83"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.17" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.22" steps="83"/></proof>
  </goal>
  <goal name="VC two_bloc_diag_mat.18" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(make_f (power 2 n) (power 2 n) o2)">
   <goal name="VC two_bloc_diag_mat.18.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat_make">
    <goal name="VC two_bloc_diag_mat.18.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC two_bloc_diag_mat.18.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.38"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC two_bloc_diag_mat.18.0.1" proved="true">
    <proof prover="5"><result status="valid" time="0.12" steps="85"/></proof>
    </goal>
    <goal name="VC two_bloc_diag_mat.18.0.2" proved="true">
    <proof prover="5"><result status="valid" time="0.23" steps="85"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC two_bloc_diag_mat.18.1" proved="true">
   <proof prover="5"><result status="valid" time="0.23" steps="83"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC two_bloc_diag_two_val" expl="VC for two_bloc_diag_two_val" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC two_bloc_diag_two_val.0" expl="VC for two_bloc_diag_two_val" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC two_bloc_diag_two_val.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="87"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.13" steps="88"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="91"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.24" steps="91"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.20" steps="92"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="97"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.6" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="103"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.7" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="109"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.8" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.32" steps="367"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.9" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="111"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.10" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.21" steps="112"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.11" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="111"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.12" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="112"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.13" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="111"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.14" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="111"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.15" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.24" steps="112"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.16" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.13" steps="112"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.17" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.23" steps="114"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.18" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="114"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.19" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="1.32" steps="389"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.20" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.35" steps="412"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.21" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.29" steps="414"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.22" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.23" steps="125"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.23" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.22" steps="125"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.24" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="1.24" steps="560"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.25" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H12">
    <goal name="VC two_bloc_diag_two_val.0.25.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="ind_sum_eq_gen">
     <goal name="VC two_bloc_diag_two_val.0.25.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC two_bloc_diag_two_val.0.25.0.0.0" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC two_bloc_diag_two_val.0.25.0.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="H3">
        <goal name="VC two_bloc_diag_two_val.0.25.0.0.0.0.0" proved="true">
        <transf name="rewrite" proved="true" arg1="H4">
         <goal name="VC two_bloc_diag_two_val.0.25.0.0.0.0.0.0" proved="true">
         <proof prover="0"><result status="valid" time="0.64"/></proof>
         </goal>
         <goal name="VC two_bloc_diag_two_val.0.25.0.0.0.0.0.1" proved="true">
         <proof prover="5"><result status="valid" time="0.12" steps="123"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC two_bloc_diag_two_val.0.25.0.0.0.0.1" proved="true">
        <proof prover="5"><result status="valid" time="0.10" steps="123"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC two_bloc_diag_two_val.0.25.0.1" proved="true">
     <proof prover="5"><result status="valid" time="0.22" steps="119"/></proof>
     </goal>
     <goal name="VC two_bloc_diag_two_val.0.25.0.2" proved="true">
     <proof prover="5"><result status="valid" time="0.21" steps="119"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.26" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="121"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.27" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.09" steps="123"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.28" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="125"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.29" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="126"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.30" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="129"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.31" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.12" steps="130"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.32" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="135"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.33" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="136"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.34" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="141"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.35" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="142"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.36" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="141"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.37" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="142"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.38" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="145"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.39" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="146"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.40" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.23" steps="429"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.41" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.37" steps="532"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two_val.0.42" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H3">
    <goal name="VC two_bloc_diag_two_val.0.42.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_sum
  (fun (k:int) -&gt;
    (indic k ((head_bit i n * power 2 (n - 1)) + tail_bits j n)
     *. (((f @ head_bit k n) @ tail_bits i n) @ tail_bits j n))
    *. (((g @ head_bit k n) @ head_bit j n) @ tail_bits k n))
  0 (power 2 n))" arg2="(ind_sum
  (fun (e:int) -&gt;
    ((fun (k:int) -&gt;
       if 0 &lt;= k /\ k &lt; power 2 n
       then (((f @ head_bit k n) @ tail_bits i n) @ tail_bits j n)
            *. (((g @ head_bit k n) @ head_bit j n) @ tail_bits k n)
       else tzero)
     @ e)
    *. indic ((head_bit i n * power 2 (n - 1)) + tail_bits j n) e)
  0 (power 2 n))">
     <goal name="VC two_bloc_diag_two_val.0.42.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC two_bloc_diag_two_val.0.42.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC two_bloc_diag_two_val.0.42.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC two_bloc_diag_two_val.0.42.0.1" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="VC two_bloc_diag_two_val.0.42.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC two_bloc_diag_two_val.0.42.0.1.0.0" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC two_bloc_diag_two_val.0.42.0.1.0.0.0" proved="true">
        <proof prover="5"><result status="valid" time="0.20" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC two_bloc_diag_two" expl="VC for two_bloc_diag_two" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC two_bloc_diag_two.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC two_bloc_diag_two.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC two_bloc_diag_two.0.0.0" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make">
     <goal name="VC two_bloc_diag_two.0.0.0.0" proved="true">
     <transf name="rewrite" proved="true" arg1="two_bloc_diag_two_val">
      <goal name="VC two_bloc_diag_two.0.0.0.0.0" proved="true">
      <transf name="compute_hyp" proved="true" >
      </transf>
      </goal>
      <goal name="VC two_bloc_diag_two.0.0.0.0.1" proved="true">
      <proof prover="5"><result status="valid" time="0.10" steps="81"/></proof>
      </goal>
      <goal name="VC two_bloc_diag_two.0.0.0.0.2" proved="true">
      <proof prover="5"><result status="valid" time="0.25" steps="317"/></proof>
      </goal>
      <goal name="VC two_bloc_diag_two.0.0.0.0.3" proved="true">
      <proof prover="5"><result status="valid" time="0.13" steps="317"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC two_bloc_diag_two.0.0.0.1" proved="true">
     <proof prover="5"><result status="valid" time="0.14" steps="317"/></proof>
     </goal>
     <goal name="VC two_bloc_diag_two.0.0.0.2" proved="true">
     <proof prover="5"><result status="valid" time="0.22" steps="317"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC two_bloc_diag_two.0.1" proved="true">
   <proof prover="5"><result status="valid" time="0.11" steps="242"/></proof>
   </goal>
   <goal name="VC two_bloc_diag_two.0.2" proved="true">
   <proof prover="5"><result status="valid" time="0.24" steps="242"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC two_bloc_mult_diag" expl="VC for two_bloc_mult_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC two_bloc_mult_diag.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.09" steps="79"/></proof>
  </goal>
  <goal name="VC two_bloc_mult_diag.1" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mat_mult (two_bloc_diag_mat n f) (diag_mat (power 2 n) g))" arg2="( mat_mult o (diag_mat (columns o) g))">
   <goal name="VC two_bloc_mult_diag.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="two_bloc_diag_mat_def">
    <goal name="VC two_bloc_mult_diag.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC two_bloc_mult_diag.1.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(rows o)" arg2="(power 2 n)">
      <goal name="VC two_bloc_mult_diag.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(columns o)" arg2="(power 2 n)">
       <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_mat_make">
        <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.0.0" proved="true">
         <transf name="compute_hyp" proved="true" >
          <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.0.0.0" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.0.0.0.0.0" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.0.0.0.0.0.0" proved="true">
             <proof prover="0"><result status="valid" time="0.64"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.0.0.0.0.1" proved="true">
            <proof prover="5"><result status="valid" time="0.10" steps="97"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.1" proved="true">
        <proof prover="5"><result status="valid" time="0.11" steps="89"/></proof>
        </goal>
        <goal name="VC two_bloc_mult_diag.1.0.0.0.0.0.2" proved="true">
        <proof prover="5"><result status="valid" time="0.11" steps="89"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC two_bloc_mult_diag.1.0.0.0.0.1" proved="true">
       <proof prover="5"><result status="valid" time="0.22" steps="87"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC two_bloc_mult_diag.1.0.0.0.1" proved="true">
      <proof prover="5"><result status="valid" time="0.09" steps="87"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC two_bloc_mult_diag.1.0.1" proved="true">
    <proof prover="5"><result status="valid" time="0.10" steps="87"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC two_bloc_mult_diag.1.1" proved="true">
   <proof prover="5"><result status="valid" time="0.20" steps="87"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
