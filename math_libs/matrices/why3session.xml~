<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="matrices.mlw"/>
<theory name="Matrice" proved="true">
 <goal name="VC matrix" expl="VC for matrix" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC matrix.0" expl="VC for matrix" proved="true">
  <proof prover="1"><result status="valid" time="0.01"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get" expl="VC for get" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="0"/></proof>
 </goal>
 <goal name="VC elts_eq" expl="VC for elts_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC elts_eq.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="2"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC elts_inst_eq" expl="VC for elts_inst_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="10"/></proof>
 </goal>
 <goal name="VC make" expl="VC for make" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="28"/></proof>
 </goal>
 <goal name="VC make_value" expl="VC for make_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_value.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_indices" expl="VC for mat_indices" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_indices.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="79"/></proof>
  </goal>
  <goal name="VC mat_indices.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="88"/></proof>
  </goal>
  <goal name="VC mat_indices.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="121"/></proof>
  </goal>
  <goal name="VC mat_indices.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="116"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.02" steps="4"/></proof>
   </goal>
   <goal name="VC set.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.01" steps="4"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="VC set.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="6"/></proof>
  </goal>
  <goal name="VC set.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="68"/></proof>
  </goal>
  <goal name="VC set.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="VC set.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="VC set.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_valid_index" expl="VC for set_valid_index" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_valid_index.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_valid_index" expl="VC for get_valid_index" proved="true">
 <proof prover="6"><result status="valid" time="0.01" steps="21"/></proof>
 </goal>
 <goal name="VC get_valid_index_params" expl="VC for get_valid_index_params" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_valid_index_params.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_valid_index_params.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.01" steps="8"/></proof>
   </goal>
   <goal name="VC get_valid_index_params.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.01" steps="8"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC get_valid_index_params.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_valid_index_params.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.02" steps="12"/></proof>
   </goal>
   <goal name="VC get_valid_index_params.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.01" steps="12"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_values" expl="VC for set_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_values.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="43"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_rows" expl="VC for set_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_columns" expl="VC for set_columns" proved="true">
 <proof prover="6"><result status="valid" time="0.01" steps="4"/></proof>
 </goal>
 <goal name="VC make_func" expl="VC for make_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC make_func.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="4"/></proof>
  </goal>
  <goal name="VC make_func.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="10"/></proof>
  </goal>
  <goal name="VC make_func.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="10"/></proof>
  </goal>
  <goal name="VC make_func.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="10"/></proof>
  </goal>
  <goal name="VC make_func.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="12"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC make_f" expl="VC for make_f" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="16"/></proof>
 </goal>
 <goal name="VC assert_make" expl="VC for assert_make" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC assert_make.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC assert_make_r" expl="VC for assert_make_r" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="6"/></proof>
 </goal>
 <goal name="VC assert_make_c" expl="VC for assert_make_c" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="6"/></proof>
 </goal>
 <goal name="VC to_indexes" expl="VC for to_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC to_indexes.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="9"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_to_indexes_mem" expl="VC for set_to_indexes_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_to_indexes_mem.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="70"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_to_indexes_mem" expl="VC for get_to_indexes_mem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_to_indexes_mem.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_to_indexes_mem.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.04" steps="94"/></proof>
   </goal>
   <goal name="VC get_to_indexes_mem.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.04" steps="94"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC get_to_indexes_mem.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC get_to_indexes_mem.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.03" steps="104"/></proof>
   </goal>
   <goal name="VC get_to_indexes_mem.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.03" steps="104"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_equality" proved="true">
 <goal name="VC mat_equality" expl="VC for mat_equality" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_equality.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="m" arg2="n">
   <goal name="VC mat_equality.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="71"/></proof>
   </goal>
   <goal name="VC mat_equality.0.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="equality">
    <goal name="VC mat_equality.0.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_equality.0.1.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="69"/></proof>
     </goal>
     <goal name="VC mat_equality.0.1.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.07" steps="69"/></proof>
     </goal>
     <goal name="VC mat_equality.0.1.0.2" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="73"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC equal_sym" expl="VC for equal_sym" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC equal_sym.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC equal_sym.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="69"/></proof>
   </goal>
   <goal name="VC equal_sym.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="69"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC equal_rex" expl="VC for equal_rex" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC equal_rex.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC equal_trans" expl="VC for equal_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC equal_trans.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_mat" expl="VC for set_equal_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_mat.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(equal m n)">
   <goal name="VC set_equal_mat.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="VC set_equal_mat.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="73"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_mat_make" expl="VC for set_equal_mat_make" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_mat_make.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="69"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="69"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="73"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="73"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="77"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="78"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="7.37"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_mat_make_t" expl="VC for set_equal_mat_make_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_mat_make_t.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="73"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make_t.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="73"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make_t.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="77"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make_t.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="77"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make_t.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="81"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make_t.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="82"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make_t.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC set_equal_mat_make_t.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="83"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_equal_mat" expl="VC for get_equal_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_equal_mat.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="67"/></proof>
  </goal>
  <goal name="VC get_equal_mat.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="68"/></proof>
  </goal>
  <goal name="VC get_equal_mat.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC equal_functions" expl="VC for equal_functions" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC equal_functions.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="69"/></proof>
  </goal>
  <goal name="VC equal_functions.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="69"/></proof>
  </goal>
  <goal name="VC equal_functions.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="73"/></proof>
  </goal>
  <goal name="VC equal_functions.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="73"/></proof>
  </goal>
  <goal name="VC equal_functions.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="77"/></proof>
  </goal>
  <goal name="VC equal_functions.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="78"/></proof>
  </goal>
  <goal name="VC equal_functions.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="6.34"/></proof>
  </goal>
  <goal name="VC equal_functions.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC equal_functions_mat" expl="VC for equal_functions_mat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC equal_functions_mat.0" expl="VC for equal_functions_mat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC equal_functions_mat.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="67"/></proof>
   </goal>
   <goal name="VC equal_functions_mat.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="69"/></proof>
   </goal>
   <goal name="VC equal_functions_mat.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="69"/></proof>
   </goal>
   <goal name="VC equal_functions_mat.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="69"/></proof>
   </goal>
   <goal name="VC equal_functions_mat.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.26"/></proof>
   </goal>
   <goal name="VC equal_functions_mat.0.5" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="71"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 <transf name="split_vc" proved="true" >
  <goal name="VC equal_functions_mat.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="67"/></proof>
  </goal>
  <goal name="VC equal_functions_mat.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="69"/></proof>
  </goal>
  <goal name="VC equal_functions_mat.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="69"/></proof>
  </goal>
  <goal name="VC equal_functions_mat.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="69"/></proof>
  </goal>
  <goal name="VC equal_functions_mat.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="VC equal_functions_mat.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_null_mat" expl="VC for set_null_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_null_mat.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_null_mat" expl="VC for get_null_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_null_mat.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Kronecker_product" proved="true">
 <goal name="VC kronecker_neutral" expl="VC for kronecker_neutral" proved="true">
 <proof prover="6"><result status="valid" time="0.11" steps="87"/></proof>
 </goal>
 <goal name="VC identity" expl="VC for identity" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC identity.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="89"/></proof>
  </goal>
  <goal name="VC identity.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="89"/></proof>
  </goal>
  <goal name="VC identity.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="91"/></proof>
  </goal>
  <goal name="VC identity.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="91"/></proof>
  </goal>
  <goal name="VC identity.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="95"/></proof>
  </goal>
  <goal name="VC identity.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="95"/></proof>
  </goal>
  <goal name="VC identity.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC identity.6.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC identity_rows" expl="VC for identity_rows" proved="true">
 <proof prover="6"><result status="valid" time="0.24" steps="91"/></proof>
 </goal>
 <goal name="VC identity_columns" expl="VC for identity_columns" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="91"/></proof>
 </goal>
 <goal name="VC identity_values" expl="VC for identity_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC identity_values.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker" expl="VC for kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker.0.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="97"/></proof>
   </goal>
   <goal name="VC kronecker.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_valid_index">
    <goal name="VC kronecker.0.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kronecker.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="97"/></proof>
     </goal>
     <goal name="VC kronecker.0.1.0.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(rows m &lt;= div i (rows n))">
      <goal name="VC kronecker.0.1.0.1.0" expl="true case (apply premises)" proved="true">
      <transf name="assert" proved="true" arg1="(rows m * rows n &lt;= div i (rows n) * rows n)">
       <goal name="VC kronecker.0.1.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.27"/></proof>
       </goal>
       <goal name="VC kronecker.0.1.0.1.0.1" expl="true case (apply premises)" proved="true">
       <proof prover="0"><result status="valid" time="0.24"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker.0.1.0.1.1" expl="false case (apply premises)" proved="true">
      <proof prover="6"><result status="valid" time="0.09" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC kronecker.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kronecker.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="97"/></proof>
     </goal>
     <goal name="VC kronecker.0.1.1.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(columns m &lt;= div j (columns n))">
      <goal name="VC kronecker.0.1.1.1.0" expl="true case (apply premises)" proved="true">
      <transf name="assert" proved="true" arg1="(columns m * columns n &lt;= div j (columns n) * columns n)">
       <goal name="VC kronecker.0.1.1.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.26"/></proof>
       </goal>
       <goal name="VC kronecker.0.1.1.1.0.1" expl="true case (apply premises)" proved="true">
       <proof prover="0"><result status="valid" time="0.26"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker.0.1.1.1.1" expl="false case (apply premises)" proved="true">
      <proof prover="6"><result status="valid" time="0.08" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="89"/></proof>
  </goal>
  <goal name="VC kronecker.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="89"/></proof>
  </goal>
  <goal name="VC kronecker.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="91"/></proof>
  </goal>
  <goal name="VC kronecker.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="91"/></proof>
  </goal>
  <goal name="VC kronecker.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="VC kronecker.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC kronecker.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="93"/></proof>
  </goal>
  <goal name="VC kronecker.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="93"/></proof>
  </goal>
  <goal name="VC kronecker.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_eq" expl="VC for kronecker_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.10" steps="91"/></proof>
 </goal>
 <goal name="VC get_kronecker" expl="VC for get_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_kronecker.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC get_kronecker.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_def">
    <goal name="VC get_kronecker.0.0.0" expl="postcondition" proved="true">
    <transf name="simplify_formula" proved="true" >
     <goal name="VC get_kronecker.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_values" expl="VC for kronecker_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_values.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_rows" expl="VC for kronecker_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_columns" expl="VC for kronecker_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_values_gen" expl="VC for kronecker_values_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_values_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_mod_values" expl="VC for kronecker_mod_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_mod_values.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="89"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.39" steps="93"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="95"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="97"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="99"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="101"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="99"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="101"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.51" steps="103"/></proof>
  </goal>
  <goal name="VC kronecker_mod_values.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.39" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_indexes" expl="VC for kronecker_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_indexes.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.51" steps="92"/></proof>
  </goal>
  <goal name="VC kronecker_indexes.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.46" steps="96"/></proof>
  </goal>
  <goal name="VC kronecker_indexes.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.45" steps="95"/></proof>
  </goal>
  <goal name="VC kronecker_indexes.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.45" steps="99"/></proof>
  </goal>
  <goal name="VC kronecker_indexes.4" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="n,k,l">
   <goal name="VC kronecker_indexes.4.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="get_valid_index" arg2="m,i,j">
    <goal name="VC kronecker_indexes.4.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC kronecker_indexes.4.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_valid_index">
      <goal name="VC kronecker_indexes.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC kronecker_indexes.4.0.0.0.0.0" proved="true">
       <transf name="assert" proved="true" arg1="(0&lt;= (i * rows n))">
        <goal name="VC kronecker_indexes.4.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.88"/></proof>
        </goal>
        <goal name="VC kronecker_indexes.4.0.0.0.0.0.1" proved="true">
        <transf name="assert" proved="true" arg1="(0&lt;= k)">
         <goal name="VC kronecker_indexes.4.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.59" steps="103"/></proof>
         </goal>
         <goal name="VC kronecker_indexes.4.0.0.0.0.0.1.1" proved="true">
         <proof prover="6"><result status="valid" time="0.40" steps="101"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC kronecker_indexes.4.0.0.0.0.1" proved="true">
       <transf name="assert" proved="true" arg1="(i &lt;= rows m-1)">
        <goal name="VC kronecker_indexes.4.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.44" steps="101"/></proof>
        </goal>
        <goal name="VC kronecker_indexes.4.0.0.0.0.1.1" proved="true">
        <transf name="assert" proved="true" arg1="(i * rows n &lt;= (rows m-1) * rows n)">
         <goal name="VC kronecker_indexes.4.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.87"/></proof>
         </goal>
         <goal name="VC kronecker_indexes.4.0.0.0.0.1.1.1" proved="true">
         <proof prover="0"><result status="valid" time="0.65"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker_indexes.4.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC kronecker_indexes.4.0.0.0.1.0" proved="true">
       <transf name="assert" proved="true" arg1="(0&lt;= (j * columns n))">
        <goal name="VC kronecker_indexes.4.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="1.19"/></proof>
        </goal>
        <goal name="VC kronecker_indexes.4.0.0.0.1.0.1" proved="true">
        <proof prover="6"><result status="valid" time="0.70" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC kronecker_indexes.4.0.0.0.1.1" proved="true">
       <transf name="assert" proved="true" arg1="(j * columns n &lt;= (columns m-1) * columns n)">
        <goal name="VC kronecker_indexes.4.0.0.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.65"/></proof>
        </goal>
        <goal name="VC kronecker_indexes.4.0.0.0.1.1.1" proved="true">
        <proof prover="0"><result status="valid" time="0.73"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_indexes_com" expl="VC for kronecker_indexes_com" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_indexes_com.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="94"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="99"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="99"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="101"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="96"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.53" steps="101"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="101"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.50" steps="103"/></proof>
  </goal>
  <goal name="VC kronecker_indexes_com.8" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_valid_index">
   <goal name="VC kronecker_indexes_com.8.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kronecker_indexes_com.8.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.51" steps="99"/></proof>
    </goal>
    <goal name="VC kronecker_indexes_com.8.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="((div i (rows n)) * rows n &lt; (rows m) * rows n)">
     <goal name="VC kronecker_indexes_com.8.0.1.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.96"/></proof>
     </goal>
     <goal name="VC kronecker_indexes_com.8.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="6.87"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kronecker_indexes_com.8.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kronecker_indexes_com.8.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.82" steps="99"/></proof>
    </goal>
    <goal name="VC kronecker_indexes_com.8.1.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="((div j (columns n)) * columns n &lt; (columns m) * columns n)">
     <goal name="VC kronecker_indexes_com.8.1.1.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.98"/></proof>
     </goal>
     <goal name="VC kronecker_indexes_com.8.1.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="7.19"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_indexes_com.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_assoc_pre" expl="VC for kronecker_assoc_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_assoc_pre.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="VC kronecker_assoc_pre.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97"/></proof>
  </goal>
  <goal name="VC kronecker_assoc_pre.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H4">
   <goal name="VC kronecker_assoc_pre.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC kronecker_assoc_pre.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC kronecker_assoc_pre.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H5">
      <goal name="VC kronecker_assoc_pre.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(div (div i (rows o)) (rows n))" arg2="(div i (rows (kronecker n o)))">
       <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(div (div j (columns o)) (columns n))" arg2="(div j (columns (kronecker n o)))">
        <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="mult_assoc_rev">
         <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="mult_eq_t">
          <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mult_eq_t">
           <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.43" steps="107"/></proof>
           </goal>
           <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.74"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(rows (kronecker n o))" arg2="(rows o * rows n)">
           <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(columns (kronecker n o))" arg2="(columns o * columns n)">
            <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mod_mod_right">
             <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mod_mod_right">
              <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
              </goal>
              <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.30" steps="107"/></proof>
              </goal>
              <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="1.14" steps="109"/></proof>
              </goal>
              <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.90" steps="109"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="107"/></proof>
             </goal>
             <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.89" steps="109"/></proof>
             </goal>
             <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="1.08" steps="109"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="107"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC kronecker_assoc_pre.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.89" steps="109"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC kronecker_assoc_pre.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="1.11" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kronecker_assoc_pre.2.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_valid_index">
       <goal name="VC kronecker_assoc_pre.2.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC kronecker_assoc_pre.2.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.84" steps="109"/></proof>
        </goal>
        <goal name="VC kronecker_assoc_pre.2.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="((div i (rows o)) * rows o &lt; (rows (kronecker m n)) * rows o)">
         <goal name="VC kronecker_assoc_pre.2.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.58"/></proof>
         </goal>
         <goal name="VC kronecker_assoc_pre.2.0.0.0.1.0.1.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.61"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC kronecker_assoc_pre.2.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC kronecker_assoc_pre.2.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.76" steps="109"/></proof>
        </goal>
        <goal name="VC kronecker_assoc_pre.2.0.0.0.1.1.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="((div j (columns o)) * columns o &lt; (columns (kronecker m n)) * columns o)">
         <goal name="VC kronecker_assoc_pre.2.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.56"/></proof>
         </goal>
         <goal name="VC kronecker_assoc_pre.2.0.0.0.1.1.1.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.32"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC kronecker_assoc_pre.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.94" steps="109"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_assoc" expl="VC for kronecker_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_assoc.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="VC kronecker_assoc.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="VC kronecker_assoc.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="kronecker_assoc_pre">
   <goal name="VC kronecker_assoc.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kronecker_assoc.2.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="91"/></proof>
    </goal>
    <goal name="VC kronecker_assoc.2.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kronecker_assoc.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kronecker_assoc.2.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="91"/></proof>
    </goal>
    <goal name="VC kronecker_assoc.2.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.86"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_assoc.3" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="((kronecker (kronecker m n) o)  = (kronecker m (kronecker n o)))">
   <goal name="VC kronecker_assoc.3.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="VC kronecker_assoc.3.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.45" steps="89"/></proof>
    </goal>
    <goal name="VC kronecker_assoc.3.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.49" steps="89"/></proof>
    </goal>
    <goal name="VC kronecker_assoc.3.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.50" steps="91"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kronecker_assoc.3.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.40" steps="91"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_assoc.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC kronecker_assoc.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="op_assoc_def">
    <goal name="VC kronecker_assoc.4.0.0" expl="VC for kronecker_assoc" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kronecker_assoc.4.0.0.0" expl="VC for kronecker_assoc" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC kronecker_assoc.4.0.0.0.0" expl="VC for kronecker_assoc" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="VC kronecker_assoc.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.41" steps="94"/></proof>
       </goal>
       <goal name="VC kronecker_assoc.4.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.37" steps="94"/></proof>
       </goal>
       <goal name="VC kronecker_assoc.4.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.48" steps="96"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_assoc_use" expl="VC for kronecker_assoc_use" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_assoc_use.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC kronecker_assoc_use.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.57"/></proof>
   </goal>
   <goal name="VC kronecker_assoc_use.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.45"/></proof>
   </goal>
   <goal name="VC kronecker_assoc_use.0.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.52"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_assoc_use_rev" expl="VC for kronecker_assoc_use_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.20" steps="91"/></proof>
 </goal>
 <goal name="VC neutral_" expl="VC for neutral_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC neutral_.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC neutral_.0.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC neutral_.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.48"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC neutral_.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC neutral_.1.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.61"/></proof>
   </goal>
   <goal name="VC neutral_.1.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC neutral_.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.55" steps="99"/></proof>
  </goal>
  <goal name="VC neutral_.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC neutral_.3.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_values">
    <goal name="VC neutral_.3.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mult_one_t">
     <goal name="VC neutral_.3.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(div i (rows kronecker_neutral))" arg2="i">
      <goal name="VC neutral_.3.0.0.0.0" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(div j (columns kronecker_neutral))" arg2="j">
       <goal name="VC neutral_.3.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="6"><result status="valid" time="0.42" steps="101"/></proof>
       </goal>
       <goal name="VC neutral_.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="7.28"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC neutral_.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="7.70"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC neutral_.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.44"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC neutral_.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC neutral_.3.1" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_values">
    <goal name="VC neutral_.3.1.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.42"/></proof>
    </goal>
    <goal name="VC neutral_.3.1.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(div i (rows m))" arg2="0">
     <goal name="VC neutral_.3.1.1.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(div j (columns m))" arg2="0">
      <goal name="VC neutral_.3.1.1.0.0" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(mod i (rows m))" arg2="i">
       <goal name="VC neutral_.3.1.1.0.0.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(mod j (columns m))" arg2="j">
        <goal name="VC neutral_.3.1.1.0.0.0.0" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.56"/></proof>
        </goal>
        <goal name="VC neutral_.3.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.35" steps="103"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC neutral_.3.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.51" steps="103"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC neutral_.3.1.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.63" steps="103"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC neutral_.3.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.54" steps="103"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC neutral_.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="6.88"/></proof>
  </goal>
  <goal name="VC neutral_.5" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker kronecker_neutral m)" arg2="m">
   <goal name="VC neutral_.5.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="103"/></proof>
   </goal>
   <goal name="VC neutral_.5.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="VC neutral_.5.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC neutral_.5.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.32" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC neutral_.5.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC neutral_.5.1.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC neutral_.5.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC neutral_.5.1.2.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.10"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC neutral_.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="105"/></proof>
  </goal>
  <goal name="VC neutral_.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC neutral" expl="VC for neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC neutral.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="15.05"/></proof>
  </goal>
  <goal name="VC neutral.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="13.85"/></proof>
  </goal>
  <goal name="VC neutral.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(assoc kronecker)">
   <goal name="VC neutral.2.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
   <goal name="VC neutral.2.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC neutral.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC neutral.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="has_neutral_def">
    <goal name="VC neutral.3.0.0" expl="VC for neutral" proved="true">
    <transf name="exists" proved="true" arg1="kronecker_neutral">
     <goal name="VC neutral.3.0.0.0" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="102"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC neutral.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kronecker_equal" expl="VC for kronecker_equal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kronecker_equal.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="101"/></proof>
  </goal>
  <goal name="VC kronecker_equal.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="103"/></proof>
  </goal>
  <goal name="VC kronecker_equal.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker_equal.2.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
   <goal name="VC kronecker_equal.2.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_equal.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker_equal.3.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="107"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_equal.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker_equal.4.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="107"/></proof>
   </goal>
   <goal name="VC kronecker_equal.4.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="VC kronecker_equal.4.2" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="107"/></proof>
   </goal>
   <goal name="VC kronecker_equal.4.3" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC kronecker_equal.4.4" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.51"/></proof>
   </goal>
   <goal name="VC kronecker_equal.4.5" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC kronecker_equal.4.6" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_equal.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="VC kronecker_equal.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kronecker_equal.6.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="107"/></proof>
   </goal>
   <goal name="VC kronecker_equal.6.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="107"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kronecker_equal.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kron_id" expl="VC for kron_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kron_id.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC kron_id.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_rows">
    <goal name="VC kron_id.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="identity_rows">
     <goal name="VC kron_id.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity_rows">
      <goal name="VC kron_id.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="identity_rows">
       <goal name="VC kron_id.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="101"/></proof>
       </goal>
       <goal name="VC kron_id.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kron_id.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC kron_id.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kron_id.0.1" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="identity_columns">
    <goal name="VC kron_id.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_columns">
     <goal name="VC kron_id.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity_columns">
      <goal name="VC kron_id.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="identity_columns">
       <goal name="VC kron_id.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.35" steps="101"/></proof>
       </goal>
       <goal name="VC kron_id.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kron_id.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC kron_id.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kron_id.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kron_id.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_values">
     <goal name="VC kron_id.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity_def">
      <goal name="VC kron_id.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="identity_def">
       <goal name="VC kron_id.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="identity_def">
        <goal name="VC kron_id.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="VC kron_id.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make">
          <goal name="VC kron_id.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make">
           <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.36" steps="109"/></proof>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_r" arg2="in" arg3="H1">
               <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_c" arg2="in" arg3="H1">
                <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make_c" arg2="in" arg3="H2">
                 <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_r" arg2="in" arg3="H2">
                  <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.45" steps="109"/></proof>
                  </goal>
                  <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.35" steps="109"/></proof>
                  </goal>
                  <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.33" steps="109"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.37" steps="109"/></proof>
                 </goal>
                 <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.26" steps="109"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.26" steps="109"/></proof>
                </goal>
                <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.46" steps="109"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.44" steps="109"/></proof>
               </goal>
               <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.20" steps="109"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.85"/></proof>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.48" steps="109"/></proof>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.58"/></proof>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.27" steps="109"/></proof>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.62"/></proof>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.39" steps="109"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (m + n))" arg2="(rows (kronecker (identity m) (identity n)))">
            <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.31" steps="102"/></proof>
            </goal>
            <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_rows">
             <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="identity_rows">
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="identity_rows">
               <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1.1.0.0.0" expl="equality hypothesis" proved="true">
               <proof prover="6"><result status="valid" time="0.26" steps="103"/></proof>
               </goal>
               <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.14" steps="101"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.14" steps="101"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(power 2 (m + n))" arg2="(columns (kronecker (identity m) (identity n)))">
            <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.26" steps="102"/></proof>
            </goal>
            <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_columns">
             <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2.1.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="identity_columns">
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2.1.0.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="identity_columns">
               <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2.1.0.0.0" expl="equality hypothesis" proved="true">
               <proof prover="6"><result status="valid" time="0.33" steps="103"/></proof>
               </goal>
               <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.35" steps="101"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC kron_id.0.2.0.0.0.0.0.0.0.2.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.29" steps="101"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC kron_id.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="1.20"/></proof>
          </goal>
          <goal name="VC kron_id.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.87"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC kron_id.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.07"/></proof>
         </goal>
         <goal name="VC kron_id.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.75"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC kron_id.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.28" steps="101"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC kron_id.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="101"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kron_id.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="101"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC kron_id.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.17" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC frows" expl="VC for frows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC frows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC fcolumns" expl="VC for fcolumns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC fcolumns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC const_fcol" expl="VC for const_fcol" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC const_fcol.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC const_frows" expl="VC for const_frows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC const_frows.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.96"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_product" proved="true">
 <goal name="VC mat_mult_no_bound" expl="VC for mat_mult_no_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_no_bound.0" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC mat_mult_no_bound.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_sum_def">
    <goal name="VC mat_mult_no_bound.0.0.0" expl="assertion" proved="true">
    <transf name="compute_hyp" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_mult_no_bound.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="99"/></proof>
  </goal>
  <goal name="VC mat_mult_no_bound.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="101"/></proof>
  </goal>
  <goal name="VC mat_mult_no_bound.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="97"/></proof>
  </goal>
  <goal name="VC mat_mult_no_bound.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="98"/></proof>
  </goal>
  <goal name="VC mat_mult_no_bound.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.38" steps="105"/></proof>
  </goal>
  <goal name="VC mat_mult_no_bound.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="105"/></proof>
  </goal>
  <goal name="VC mat_mult_no_bound.7" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC mat_mult_no_bound.7.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H4">
    <goal name="VC mat_mult_no_bound.7.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(columns m = rows n)">
     <goal name="VC mat_mult_no_bound.7.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H5">
      <goal name="VC mat_mult_no_bound.7.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="6"><result status="valid" time="0.26" steps="103"/></proof>
      </goal>
      <goal name="VC mat_mult_no_bound.7.0.0.0.1" expl="true case (postcondition)" proved="true">
      <transf name="eliminate_let" proved="true" arg1="in" arg2="H5">
       <goal name="VC mat_mult_no_bound.7.0.0.0.1.0" expl="true case (postcondition)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC mat_mult_no_bound.7.0.0.0.1.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H8">
         <goal name="VC mat_mult_no_bound.7.0.0.0.1.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_no_bound.7.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="107"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult" expl="VC for mat_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC mat_mult.0.0" expl="postcondition" proved="true">
   <transf name="close_epsilon" proved="true" >
    <goal name="VC mat_mult.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="110"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_mult.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="103"/></proof>
  </goal>
  <goal name="VC mat_mult.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC mat_mult.2.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
   <goal name="VC mat_mult.2.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="105"/></proof>
   </goal>
   <goal name="VC mat_mult.2.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_mat_mult" expl="VC for correct_mat_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_mat_mult.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_def">
   <goal name="VC correct_mat_mult.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC correct_mat_mult.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC correct_mat_mult.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC correct_mat_mult.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_mult_no_bound_def1">
       <goal name="VC correct_mat_mult.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="VC correct_mat_mult.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="102"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_mat_mult.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="97"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_values" expl="VC for mat_mult_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_values.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_mult_values.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_mult_spec">
    <goal name="VC mat_mult_values.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="99"/></proof>
    </goal>
    <goal name="VC mat_mult_values.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="99"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_columns" expl="VC for mat_mult_columns" proved="true">
 <proof prover="6"><result status="valid" time="0.22" steps="99"/></proof>
 </goal>
 <goal name="VC mat_mult_rows" expl="VC for mat_mult_rows" proved="true">
 <proof prover="6"><result status="valid" time="0.24" steps="99"/></proof>
 </goal>
 <goal name="VC mat_mult_values_quant" expl="VC for mat_mult_values_quant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_values_quant.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_mult_values">
   <goal name="VC mat_mult_values_quant.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="99"/></proof>
   </goal>
   <goal name="VC mat_mult_values_quant.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_mat_prod" expl="VC for int_mat_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_mat_prod.0" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="99"/></proof>
  </goal>
  <goal name="VC int_mat_prod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="99"/></proof>
  </goal>
  <goal name="VC int_mat_prod.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_mat_prod.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="110"/></proof>
   </goal>
   <goal name="VC int_mat_prod.2.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.51"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_mat_prod.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.64"/></proof>
  </goal>
  <goal name="VC int_mat_prod.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="VC int_mat_prod.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_mat_prod_zero" expl="VC for int_mat_prod_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_mat_prod_zero.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_mat_prod_plus_one" expl="VC for int_mat_prod_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_mat_prod_plus_one.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC int_mat_prod_plus_one.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="int_mat_prod_def">
    <goal name="VC int_mat_prod_plus_one.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(columns (int_mat_prod f i (j - 1)) = rows (f j))">
     <goal name="VC int_mat_prod_plus_one.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="(rows (f j))" arg2="(rows(f i))">
      <goal name="VC int_mat_prod_plus_one.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f i))" arg2="(columns (f i))">
       <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="int_mat_prod_spec1">
        <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="97"/></proof>
        </goal>
        <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="107"/></proof>
         </goal>
         <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="H4" arg2="k&#39;,k&#39;">
          <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="Hinst">
           <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.21" steps="107"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="H" arg2="j,i">
        <goal name="VC int_mat_prod_plus_one.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="99"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC int_mat_prod_plus_one.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.26" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC int_mat_prod_plus_one.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_mat_prod_plus_one.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="97"/></proof>
    </goal>
    <goal name="VC int_mat_prod_plus_one.0.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC int_mat_prod_plus_one.0.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="107"/></proof>
     </goal>
     <goal name="VC int_mat_prod_plus_one.0.0.2.1" expl="rewrite premises" proved="true">
     <transf name="instantiate" proved="true" arg1="H4" arg2="k&#39;,k&#39;">
      <goal name="VC int_mat_prod_plus_one.0.0.2.1.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC int_mat_prod_plus_one.0.0.2.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="107"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC int_mat_prod_plus_one.0.0.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC int_mat_prod_plus_one.0.0.3.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="97"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC int_mat_prod_eq" expl="VC for int_mat_prod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC int_mat_prod_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="99"/></proof>
  </goal>
  <goal name="VC int_mat_prod_eq.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_mat_prod_eq.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="110"/></proof>
   </goal>
   <goal name="VC int_mat_prod_eq.1.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_mat_prod_eq.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="101"/></proof>
  </goal>
  <goal name="VC int_mat_prod_eq.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_mat_prod_eq.3.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.38"/></proof>
   </goal>
   <goal name="VC int_mat_prod_eq.3.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_mat_prod_eq.4" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="103"/></proof>
  </goal>
  <goal name="VC int_mat_prod_eq.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="103"/></proof>
  </goal>
  <goal name="VC int_mat_prod_eq.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC int_mat_prod_eq.6.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="114"/></proof>
   </goal>
   <goal name="VC int_mat_prod_eq.6.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.59"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC int_mat_prod_eq.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="110"/></proof>
  </goal>
  <goal name="VC int_mat_prod_eq.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_id" expl="VC for mat_mult_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_id.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC mat_mult_id.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_rows">
    <goal name="VC mat_mult_id.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="99"/></proof>
    </goal>
    <goal name="VC mat_mult_id.0.0.1" expl="rewrite premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mat_mult_id.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="identity_spec2">
      <goal name="VC mat_mult_id.0.0.1.0.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="99"/></proof>
      </goal>
      <goal name="VC mat_mult_id.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.08" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_id.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC mat_mult_id.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_mult_id.0.2.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mat_mult_id.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_mult_values">
      <goal name="VC mat_mult_id.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m i k *. get (identity n) k j),0,(columns m),j">
       <goal name="VC mat_mult_id.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC mat_mult_id.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_mult_id.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.50"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_id.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_mult_id.0.2.0.0.0.0.1.0" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="103"/></proof>
         </goal>
         <goal name="VC mat_mult_id.0.2.0.0.0.0.1.1" proved="true">
         <proof prover="0"><result status="valid" time="0.50"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_id.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_mult_id.0.2.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_mult_id.0.2.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.58"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_id.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="103"/></proof>
      </goal>
      <goal name="VC mat_mult_id.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="101"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC id_mat_mult" expl="VC for id_mat_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC id_mat_mult.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC id_mat_mult.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC id_mat_mult.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC id_mat_mult.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC id_mat_mult.0.2.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC id_mat_mult.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_mult_values">
      <goal name="VC id_mat_mult.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get (identity n) i k *. get m k j),0,(columns (identity n)),i">
       <goal name="VC id_mat_mult.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC id_mat_mult.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC id_mat_mult.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.48"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC id_mat_mult.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC id_mat_mult.0.2.0.0.0.0.1.0" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="103"/></proof>
         </goal>
         <goal name="VC id_mat_mult.0.2.0.0.0.0.1.1" proved="true">
         <proof prover="0"><result status="valid" time="0.32"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC id_mat_mult.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC id_mat_mult.0.2.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC id_mat_mult.0.2.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.33"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC id_mat_mult.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="103"/></proof>
      </goal>
      <goal name="VC id_mat_mult.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="101"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_eq" expl="VC for mat_mult_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_eq.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_addition" proved="true">
 <goal name="VC add_mat" expl="VC for add_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mat.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add_mat.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_mat.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add_mat.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="103"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_mat.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add_mat.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="105"/></proof>
   </goal>
   <goal name="VC add_mat.2.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_mat.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add_mat.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="105"/></proof>
   </goal>
   <goal name="VC add_mat.3.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_mat.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mat_equal" expl="VC for add_mat_equal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mat_equal.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_value" expl="VC for add_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_value.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_values" expl="VC for add_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_values.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mat_null_left" expl="VC for add_mat_null_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mat_null_left.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="101"/></proof>
  </goal>
  <goal name="VC add_mat_null_left.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="101"/></proof>
  </goal>
  <goal name="VC add_mat_null_left.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="105"/></proof>
  </goal>
  <goal name="VC add_mat_null_left.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="106"/></proof>
  </goal>
  <goal name="VC add_mat_null_left.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC add_mat_null_left.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="zero_add_t">
    <goal name="VC add_mat_null_left.4.0.0" expl="apply premises" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC add_mat_null_left.4.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="null_mat_def" arg2="in" arg3="H8">
      <goal name="VC add_mat_null_left.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H8">
       <goal name="VC add_mat_null_left.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="3.93" steps="492"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_mat_null_left.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mat_null_right" expl="VC for add_mat_null_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mat_null_right.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="101"/></proof>
  </goal>
  <goal name="VC add_mat_null_right.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="101"/></proof>
  </goal>
  <goal name="VC add_mat_null_right.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="105"/></proof>
  </goal>
  <goal name="VC add_mat_null_right.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="105"/></proof>
  </goal>
  <goal name="VC add_mat_null_right.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC add_mat_null_right.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="add_zero_t">
    <goal name="VC add_mat_null_right.4.0.0" expl="apply premises" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC add_mat_null_right.4.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="null_mat_def" arg2="in" arg3="H8">
      <goal name="VC add_mat_null_right.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H8">
       <goal name="VC add_mat_null_right.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="4.44" steps="492"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_mat_null_right.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_columns_elt" expl="VC for set_equal_columns_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_columns_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_rows_elt" expl="VC for set_equal_rows_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_rows_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_columns" expl="VC for add_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_rows" expl="VC for add_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_equal_dim_elt" expl="VC for set_equal_dim_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_equal_dim_elt.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="103"/></proof>
  </goal>
  <goal name="VC set_equal_dim_elt.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_dim_add" expl="VC for set_dim_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_dim_add.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="105"/></proof>
  </goal>
  <goal name="VC set_dim_add.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="107"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mat_eq" expl="VC for add_mat_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mat_eq.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mat_comm" expl="VC for add_mat_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mat_comm.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="99"/></proof>
  </goal>
  <goal name="VC add_mat_comm.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
  </goal>
  <goal name="VC add_mat_comm.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
  </goal>
  <goal name="VC add_mat_comm.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
  </goal>
  <goal name="VC add_mat_comm.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="107"/></proof>
  </goal>
  <goal name="VC add_mat_comm.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="108"/></proof>
  </goal>
  <goal name="VC add_mat_comm.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.54"/></proof>
  </goal>
  <goal name="VC add_mat_comm.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mat_eq_rev" expl="VC for add_mat_eq_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mat_eq_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_neutral" expl="VC for add_neutral" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_neutral.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add_neutral.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="97"/></proof>
   </goal>
   <goal name="VC add_neutral.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="97"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC add_neutral.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="VC add_neutral.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="101"/></proof>
  </goal>
  <goal name="VC add_neutral.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC distr_1_pre" expl="VC for distr_1_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC distr_1_pre.0" expl="VC for distr_1_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC distr_1_pre.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="109"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="113"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="117"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="117"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="121"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="122"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="123"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.7" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="121"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="123"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.9" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="123"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="126"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.11" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="125"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.12" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
   <goal name="VC distr_1_pre.0.13" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC distr_1_pre.0.13.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H4">
     <goal name="VC distr_1_pre.0.13.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="( ind_sum (fun (k:int) -&gt; get (add_mat m n) i k *. get o k j) 0
  (columns (add_mat m n)))" arg2="(ind_sum
  (fun (k:int) -&gt;
    ((fun (k1:int) -&gt; get m i k1 *. get o k1 j) @ k)
    +. ((fun (k1:int) -&gt; get n i k1 *. get o k1 j) @ k))
  0 (columns m))">
      <goal name="VC distr_1_pre.0.13.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC distr_1_pre.0.13.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_eq_t">
        <goal name="VC distr_1_pre.0.13.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="VC distr_1_pre.0.13.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H3">
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC distr_1_pre.0.13.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="5.64"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC distr_1_pre.0.13.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq_gen">
       <goal name="VC distr_1_pre.0.13.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="129"/></proof>
       </goal>
       <goal name="VC distr_1_pre.0.13.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="129"/></proof>
       </goal>
       <goal name="VC distr_1_pre.0.13.0.0.1.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC distr_1_pre.0.13.0.0.1.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC distr_1_pre.0.13.0.0.1.2.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.34"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC distr_1_pre.0.13.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="129"/></proof>
     </goal>
     <goal name="VC distr_1_pre.0.13.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="129"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC distr_l" expl="VC for distr_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC distr_l.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC distr_l.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC distr_l.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="105"/></proof>
  </goal>
  <goal name="VC distr_l.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="109"/></proof>
  </goal>
  <goal name="VC distr_l.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="110"/></proof>
  </goal>
  <goal name="VC distr_l.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="115"/></proof>
  </goal>
  <goal name="VC distr_l.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="115"/></proof>
  </goal>
  <goal name="VC distr_l.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="119"/></proof>
  </goal>
  <goal name="VC distr_l.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="123"/></proof>
  </goal>
  <goal name="VC distr_l.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC distr_l.8.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="124"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC distr_l.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC distr_l.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="125"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC distr_2_pre" expl="VC for distr_2_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC distr_2_pre.0" expl="VC for distr_2_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC distr_2_pre.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="109"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="109"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="113"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="117"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="121"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="122"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="123"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.7" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="121"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="123"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.9" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="123"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="126"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.11" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="125"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.12" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.43"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.13" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.43"/></proof>
   </goal>
   <goal name="VC distr_2_pre.0.14" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC distr_2_pre.0.14.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC distr_2_pre.0.14.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H4">
      <goal name="VC distr_2_pre.0.14.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC distr_2_pre.0.14.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; get m i k *. get (add_mat n o) k j) 0 (columns m))" arg2="(ind_sum
  (fun (k:int) -&gt;
    ((fun (k1:int) -&gt; get m i k1 *. get n k1 j) @ k)
    +. ((fun (k1:int) -&gt; get m i k1 *. get o k1 j) @ k))
  0 (columns m))">
        <goal name="VC distr_2_pre.0.14.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H1">
         <goal name="VC distr_2_pre.0.14.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="add_eq_t">
          <goal name="VC distr_2_pre.0.14.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_sum_eq">
           <goal name="VC distr_2_pre.0.14.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC distr_2_pre.0.14.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_sum_eq">
           <goal name="VC distr_2_pre.0.14.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC distr_2_pre.0.14.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ind_sum_eq">
         <goal name="VC distr_2_pre.0.14.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC distr_2_pre.0.14.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC distr_2_pre.0.14.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.32"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC distr_2_pre.0.14.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.10" steps="131"/></proof>
     </goal>
     <goal name="VC distr_2_pre.0.14.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC distr_r" expl="VC for distr_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC distr_r.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC distr_r.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC distr_r.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="105"/></proof>
  </goal>
  <goal name="VC distr_r.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="109"/></proof>
  </goal>
  <goal name="VC distr_r.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="110"/></proof>
  </goal>
  <goal name="VC distr_r.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="115"/></proof>
  </goal>
  <goal name="VC distr_r.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="115"/></proof>
  </goal>
  <goal name="VC distr_r.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC distr_r.6.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="119"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC distr_r.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
  </goal>
  <goal name="VC distr_r.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="124"/></proof>
  </goal>
  <goal name="VC distr_r.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC distr_r.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="125"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_scalar" proved="true">
 <goal name="VC infix *.." expl="VC for infix *.." proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC infix *...0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="97"/></proof>
  </goal>
  <goal name="VC infix *...1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC infix *...1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC infix *...2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="101"/></proof>
  </goal>
  <goal name="VC infix *...3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="101"/></proof>
  </goal>
  <goal name="VC infix *...4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="VC infix *...5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC infix *...5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC infix *...5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.32"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_columns" expl="VC for scalar_columns" proved="true">
 <proof prover="6"><result status="valid" time="0.22" steps="97"/></proof>
 </goal>
 <goal name="VC scalar_values" expl="VC for scalar_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_values.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.21"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_rows" expl="VC for scalar_rows" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="97"/></proof>
 </goal>
 <goal name="VC scalar_null" expl="VC for scalar_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_null.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.96"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_tone" expl="VC for scalar_tone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_tone.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC scalar_tone.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="97"/></proof>
   </goal>
   <goal name="VC scalar_tone.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="97"/></proof>
   </goal>
   <goal name="VC scalar_tone.0.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="6.60"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_tone_gen" expl="VC for scalar_tone_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_tone_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_null_gen" expl="VC for scalar_null_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_null_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_plus" expl="VC for scalar_plus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_plus.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC scalar_plus.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="VC scalar_plus.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.33"/></proof>
   </goal>
   <goal name="VC scalar_plus.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC scalar_plus.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_mat_def">
     <goal name="VC scalar_plus.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC scalar_plus.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC scalar_plus.0.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.21"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC scalar_plus.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.50"/></proof>
      </goal>
      <goal name="VC scalar_plus.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.33"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC scalar_plus.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.32"/></proof>
     </goal>
     <goal name="VC scalar_plus.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.31"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_plus_rev" expl="VC for scalar_plus_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.16" steps="97"/></proof>
 </goal>
 <goal name="VC add_scal" expl="VC for add_scal" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC add_scal.0" expl="VC for add_scal" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC add_scal.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="107"/></proof>
   </goal>
   <goal name="VC add_scal.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="108"/></proof>
   </goal>
   <goal name="VC add_scal.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="113"/></proof>
   </goal>
   <goal name="VC add_scal.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="113"/></proof>
   </goal>
   <goal name="VC add_scal.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="121"/></proof>
   </goal>
   <goal name="VC add_scal.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="122"/></proof>
   </goal>
   <goal name="VC add_scal.0.6" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_values">
    <goal name="VC add_scal.0.6.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="add_values">
     <goal name="VC add_scal.0.6.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="add_values">
      <goal name="VC add_scal.0.6.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="VC add_scal.0.6.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_values">
        <goal name="VC add_scal.0.6.0.0.0.0.0" expl="precondition" proved="true">
        <proof prover="6"><result status="valid" time="0.27" steps="127"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC add_scal.0.6.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
      </goal>
      <goal name="VC add_scal.0.6.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="125"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC add_scal.0.6.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="125"/></proof>
     </goal>
     <goal name="VC add_scal.0.6.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="125"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC add_scal.0.7" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_scal_rev" expl="VC for add_scal_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.23" steps="101"/></proof>
 </goal>
 <goal name="VC mat_mult_scal_values_l" expl="VC for mat_mult_scal_values_l" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_mult_scal_values_l.0" expl="VC for mat_mult_scal_values_l" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_mult_scal_values_l.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_values">
    <goal name="VC mat_mult_scal_values_l.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(fun (k:int) -&gt; (a *. get m i k) *. get n k j)" arg2="(fun (i1:int) -&gt; a *. ((fun (k:int) -&gt; get m i k *. get n k j) @ i1))">
     <goal name="VC mat_mult_scal_values_l.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC mat_mult_scal_values_l.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="4"><result status="valid" time="1.73"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_scal_values_l.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="1.12"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_scal_values_l.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="107"/></proof>
    </goal>
    <goal name="VC mat_mult_scal_values_l.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_scal_values_r" expl="VC for mat_mult_scal_values_r" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_mult_scal_values_r.0" expl="VC for mat_mult_scal_values_r" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_mult_scal_values_r.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_sum (fun (k:int) -&gt; (a *. get m i k) *. get n k j) 0 (columns m))" arg2="(ind_sum
  (fun (i1:int) -&gt; a *. ((fun (k:int) -&gt; get m i k *. get n k j) @ i1)) 0
  (columns m))">
    <goal name="VC mat_mult_scal_values_r.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC mat_mult_scal_values_r.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_mult_values">
      <goal name="VC mat_mult_scal_values_r.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="4"><result status="valid" time="1.73"/></proof>
      </goal>
      <goal name="VC mat_mult_scal_values_r.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="111"/></proof>
      </goal>
      <goal name="VC mat_mult_scal_values_r.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.33"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_scal_values_r.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_sum_eq">
     <goal name="VC mat_mult_scal_values_r.0.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_mult_scal_values_r.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.20"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mut_scal" expl="VC for mat_mut_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mut_scal.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC mat_mut_scal.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC mat_mut_scal.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="VC mat_mut_scal.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_mut_scal.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="VC mat_mut_scal.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_values">
      <goal name="VC mat_mut_scal.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="VC mat_mut_scal.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_mult_values">
        <goal name="VC mat_mut_scal.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
         <goal name="VC mat_mut_scal.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_sum_eq">
          <goal name="VC mat_mut_scal.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_mut_scal.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_mut_scal.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.09" steps="103"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mut_scal.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
        </goal>
        <goal name="VC mat_mut_scal.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.30"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mut_scal.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="101"/></proof>
     </goal>
     <goal name="VC mat_mut_scal.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_mat_mut" expl="VC for scal_mat_mut" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_mat_mut.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC scal_mat_mut.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC scal_mat_mut.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="VC scal_mat_mut.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC scal_mat_mut.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="VC scal_mat_mut.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_values">
      <goal name="VC scal_mat_mut.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="VC scal_mat_mut.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_mult_values">
        <goal name="VC scal_mat_mut.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
         <goal name="VC scal_mat_mut.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="scalar_columns">
          <goal name="VC scal_mat_mut.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_sum_eq">
           <goal name="VC scal_mat_mut.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.79"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC scal_mat_mut.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.09" steps="99"/></proof>
        </goal>
        <goal name="VC scal_mat_mut.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.40"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC scal_mat_mut.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="101"/></proof>
     </goal>
     <goal name="VC scal_mat_mut.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mut_scal_rev" expl="VC for mat_mut_scal_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.18" steps="99"/></proof>
 </goal>
 <goal name="VC scal_mat_mut_rev" expl="VC for scal_mat_mut_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.15" steps="99"/></proof>
 </goal>
 <goal name="VC ind_sum_commute_scal_r" expl="VC for ind_sum_commute_scal_r" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC ind_sum_commute_scal_r.0" expl="VC for ind_sum_commute_scal_r" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_sum_commute_scal_r.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="ind_sum_eq">
    <goal name="VC ind_sum_commute_scal_r.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ind_sum_commute_scal_r.0.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="((fun (k11:int) -&gt; ind_sum (f @ k11) k1 l *. (g @ k11)) @ k)" arg2="(( ind_sum (f @ k) k1 l *. (g @ k)) )">
      <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="((fun (k11:int) -&gt;
       ind_sum (fun (k2:int) -&gt; ((f @ k11) @ k2) *. (g @ k11)) k1 l)
     @ k)" arg2="((       ind_sum (fun (k2:int) -&gt; ((f @ k) @ k2) *. (g @ k)) k1 l)
     )">
       <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_sum_scal" arg2="(f k),k1,l,(g k)">
        <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ind_sum (fun (k2:int) -&gt; ((f @ k) @ k2) *. (g @ k)) k1 l)" arg2="(  ind_sum (fun (i1:int) -&gt; (g @ k) *. ((f @ k) @ i1)) k1 l)">
         <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="1.71"/></proof>
         </goal>
         <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ind_sum_eq">
          <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.09" steps="109"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_sum_commute_scal_r.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_sum_commute_scal_r.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="replace" proved="true" arg1="((fun (k11:int) -&gt;
       ind_sum (fun (k2:int) -&gt; ((f @ k11) @ k2) *. (g @ k11)) k1 l)
     @ k)" arg2="((       ind_sum (fun (k2:int) -&gt; ((f @ k) @ k2) *. (g @ k)) k1 l)
     )">
       <goal name="VC ind_sum_commute_scal_r.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_sum_scal" arg2="(f k),k1,l,(g k)">
        <goal name="VC ind_sum_commute_scal_r.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.26" steps="107"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_sum_commute_scal_r.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_sum_commute_scal_r.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="101"/></proof>
   </goal>
   <goal name="VC ind_sum_commute_scal_r.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="101"/></proof>
   </goal>
   <goal name="VC ind_sum_commute_scal_r.0.3" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC ind_sum_commute_scal_r.0.3.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ind_sum
  (fun (k1:int) -&gt; ind_sum (fun (k2:int) -&gt; ((f @ k1) @ k2) *. (g @ k1)) k l)
  i j)" arg2="(ind_sum
  (fun (k1:int) -&gt;
    ind_sum ((fun (k11:int) (k2:int) -&gt; ((f @ k11) @ k2) *. (g @ k11)) @ k1)
    k l)
  i j)">
     <goal name="VC ind_sum_commute_scal_r.0.3.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC ind_sum_commute_scal_r.0.3.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq">
       <goal name="VC ind_sum_commute_scal_r.0.3.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ind_sum_commute_scal_r.0.3.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_sum_commute_scal_r.0.3.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="VC ind_sum_commute_scal_r.0.3.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ind_sum_commute_scal_r.0.3.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_assoc_pre" expl="VC for mat_mult_assoc_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_mult_assoc_pre.0" expl="VC for mat_mult_assoc_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_mult_assoc_pre.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="107"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc_pre.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="111"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc_pre.0.2" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.27"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc_pre.0.3" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_values">
    <goal name="VC mat_mult_assoc_pre.0.3.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(columns (mat_mult m n))" arg2="(columns n)">
     <goal name="VC mat_mult_assoc_pre.0.3.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="VC mat_mult_assoc_pre.0.3.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_mult_assoc_pre.0.3.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_assoc_pre.0.3.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_mult_values">
         <goal name="VC mat_mult_assoc_pre.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_hyp" proved="true" >
         </transf>
         </goal>
         <goal name="VC mat_mult_assoc_pre.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.16" steps="117"/></proof>
         </goal>
         <goal name="VC mat_mult_assoc_pre.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="119"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_assoc_pre.0.3.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="113"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_assoc_pre.0.3.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="113"/></proof>
    </goal>
    <goal name="VC mat_mult_assoc_pre.0.3.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.42"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_assoc_pre.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="117"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc_pre.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="119"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc_pre.0.6" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_values">
    <goal name="VC mat_mult_assoc_pre.0.6.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(columns (mat_mult m n))" arg2="(columns n)">
     <goal name="VC mat_mult_assoc_pre.0.6.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="ind_sum_eq">
      <goal name="VC mat_mult_assoc_pre.0.6.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_mult_assoc_pre.0.6.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_mult_assoc_pre.0.6.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_mult_values">
         <goal name="VC mat_mult_assoc_pre.0.6.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_hyp" proved="true" >
         </transf>
         </goal>
         <goal name="VC mat_mult_assoc_pre.0.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="121"/></proof>
         </goal>
         <goal name="VC mat_mult_assoc_pre.0.6.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.32"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_mult_assoc_pre.0.6.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="117"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_mult_assoc_pre.0.6.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="119"/></proof>
    </goal>
    <goal name="VC mat_mult_assoc_pre.0.6.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.36"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_assoc_pre.0.7" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC mat_mult_assoc_pre.0.7.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC mat_mult_assoc_pre.0.7.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_sum
  (fun (k1:int) -&gt;
    ind_sum (fun (k2:int) -&gt; get m i k2 *. get n k2 k1) 0 (columns m)
    *. get o k1 j)
  0 (columns n))" arg2="( ind_sum
  (fun (k1:int) -&gt;
    ind_sum ((fun (k11:int) (k2:int) -&gt; get m i k2 *. get n k2 k11) @ k1) 0
    (columns m) *. ((fun (k2:int) -&gt; get o k2 j) @ k1))
  0 (columns n))">
      <goal name="VC mat_mult_assoc_pre.0.7.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC mat_mult_assoc_pre.0.7.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="ind_sum_eq">
        <goal name="VC mat_mult_assoc_pre.0.7.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_mult_assoc_pre.0.7.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_mult_assoc_pre.0.7.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_sum_scal_rev">
           <goal name="VC mat_mult_assoc_pre.0.7.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ind_sum_eq">
            <goal name="VC mat_mult_assoc_pre.0.7.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC mat_mult_assoc_pre.0.7.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.25"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_assoc_pre.0.7.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_sum_eq">
       <goal name="VC mat_mult_assoc_pre.0.7.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_mult_assoc_pre.0.7.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_assoc" expl="VC for mat_mult_assoc" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_mult_assoc.0" expl="VC for mat_mult_assoc" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_mult_assoc.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="99"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="107"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="111"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="115"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="116"/></proof>
   </goal>
   <goal name="VC mat_mult_assoc.0.6" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_mult_assoc_pre">
    <goal name="VC mat_mult_assoc.0.6.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="119"/></proof>
    </goal>
    <goal name="VC mat_mult_assoc.0.6.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="119"/></proof>
    </goal>
    <goal name="VC mat_mult_assoc.0.6.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.43"/></proof>
    </goal>
    <goal name="VC mat_mult_assoc.0.6.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.29"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_mult_assoc.0.7" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="117"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_assoc_quant" expl="VC for mat_mult_assoc_quant" proved="true">
 <proof prover="6"><result status="valid" time="0.26" steps="101"/></proof>
 </goal>
 <goal name="VC mat_mult_assoc_comm" expl="VC for mat_mult_assoc_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_assoc_comm.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_eq" expl="VC for scalar_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
 </goal>
 <goal name="VC scalar_eq_gen" expl="VC for scalar_eq_gen" proved="true">
 <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
 </goal>
 <goal name="VC scalar_add" expl="VC for scalar_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_add.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="103"/></proof>
  </goal>
  <goal name="VC scalar_add.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="104"/></proof>
  </goal>
  <goal name="VC scalar_add.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="113"/></proof>
  </goal>
  <goal name="VC scalar_add.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="114"/></proof>
  </goal>
  <goal name="VC scalar_add.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="VC scalar_add.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="115"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_assoc" expl="VC for scalar_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalar_assoc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="103"/></proof>
  </goal>
  <goal name="VC scalar_assoc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="104"/></proof>
  </goal>
  <goal name="VC scalar_assoc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="113"/></proof>
  </goal>
  <goal name="VC scalar_assoc.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="114"/></proof>
  </goal>
  <goal name="VC scalar_assoc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="VC scalar_assoc.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC scalar_assoc.5.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="VC scalar_assoc.5.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
   <goal name="VC scalar_assoc.5.2" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scalar_assoc_rev" expl="VC for scalar_assoc_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.26" steps="97"/></proof>
 </goal>
 <goal name="VC scalars_inv" expl="VC for scalars_inv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scalars_inv.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.60"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC eq_scalar" expl="VC for eq_scalar" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC eq_scalar.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(a-. b &lt;&gt; tzero)">
   <goal name="VC eq_scalar.0.0" expl="true case (postcondition)" proved="true">
   <transf name="replace" proved="true" arg1="a" arg2="((a-.b)+.b)" arg3="in" arg4="H">
    <goal name="VC eq_scalar.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_plus" arg2="in" arg3="H">
     <goal name="VC eq_scalar.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H1">
      <goal name="VC eq_scalar.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H1">
       <goal name="VC eq_scalar.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="(a*. (get m i j) = (a-. b) *.  (get m i j) +. b *. (get m i j))">
        <goal name="VC eq_scalar.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="(((a -. b) *. get m i j) +. (b *. get m i j))" arg2="(get (add_mat ((a -. b) *.. m) (b *.. m)) i j)">
         <goal name="VC eq_scalar.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.22"/></proof>
         </goal>
         <goal name="VC eq_scalar.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="0.92"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC eq_scalar.0.0.0.0.0.0.1" expl="true case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.22"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC eq_scalar.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="107"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC eq_scalar.0.1" expl="false case (postcondition)" proved="true">
   <transf name="replace" proved="true" arg1="a" arg2="((a-.b)+.b)">
    <goal name="VC eq_scalar.0.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="107"/></proof>
    </goal>
    <goal name="VC eq_scalar.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="107"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_substr" expl="VC for mat_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_substr.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="103"/></proof>
  </goal>
  <goal name="VC mat_substr.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="104"/></proof>
  </goal>
  <goal name="VC mat_substr.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="109"/></proof>
  </goal>
  <goal name="VC mat_substr.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="109"/></proof>
  </goal>
  <goal name="VC mat_substr.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC substr_rows" expl="VC for substr_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC substr_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC substr_columns" expl="VC for substr_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC substr_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC substr_value" expl="VC for substr_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC substr_value.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC distr_l_substr" expl="VC for distr_l_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC distr_l_substr.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
  </goal>
  <goal name="VC distr_l_substr.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="106"/></proof>
  </goal>
  <goal name="VC distr_l_substr.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="107"/></proof>
  </goal>
  <goal name="VC distr_l_substr.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="107"/></proof>
  </goal>
  <goal name="VC distr_l_substr.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC distr_r_substr" expl="VC for distr_r_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC distr_r_substr.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
  </goal>
  <goal name="VC distr_r_substr.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="106"/></proof>
  </goal>
  <goal name="VC distr_r_substr.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="107"/></proof>
  </goal>
  <goal name="VC distr_r_substr.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="107"/></proof>
  </goal>
  <goal name="VC distr_r_substr.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_substr_eq" expl="VC for mat_substr_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
 </goal>
 <goal name="VC substr_decomp" expl="VC for substr_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC substr_decomp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="99"/></proof>
  </goal>
  <goal name="VC substr_decomp.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="99"/></proof>
  </goal>
  <goal name="VC substr_decomp.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="103"/></proof>
  </goal>
  <goal name="VC substr_decomp.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="104"/></proof>
  </goal>
  <goal name="VC substr_decomp.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="109"/></proof>
  </goal>
  <goal name="VC substr_decomp.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="110"/></proof>
  </goal>
  <goal name="VC substr_decomp.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_value">
   <goal name="VC substr_decomp.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="substr_value">
    <goal name="VC substr_decomp.6.0.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall a b. a+.(b-.a) = b)">
     <goal name="VC substr_decomp.6.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC substr_decomp.6.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(a +. (b -. a))" arg2="(a +. ((-. a)+.b))">
       <goal name="VC substr_decomp.6.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="1.17"/></proof>
       </goal>
       <goal name="VC substr_decomp.6.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="115"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC substr_decomp.6.0.0.1" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="115"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC substr_decomp.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="113"/></proof>
    </goal>
    <goal name="VC substr_decomp.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="113"/></proof>
    </goal>
    <goal name="VC substr_decomp.6.0.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="114"/></proof>
    </goal>
    <goal name="VC substr_decomp.6.0.4" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="114"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC substr_decomp.6.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="113"/></proof>
   </goal>
   <goal name="VC substr_decomp.6.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="113"/></proof>
   </goal>
   <goal name="VC substr_decomp.6.3" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="113"/></proof>
   </goal>
   <goal name="VC substr_decomp.6.4" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="VC substr_decomp.6.5" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC substr_decomp.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="111"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC subtr_scal" expl="VC for subtr_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC subtr_scal.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
  </goal>
  <goal name="VC subtr_scal.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="108"/></proof>
  </goal>
  <goal name="VC subtr_scal.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="111"/></proof>
  </goal>
  <goal name="VC subtr_scal.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="111"/></proof>
  </goal>
  <goal name="VC subtr_scal.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="119"/></proof>
  </goal>
  <goal name="VC subtr_scal.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="120"/></proof>
  </goal>
  <goal name="VC subtr_scal.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="scalar_values">
   <goal name="VC subtr_scal.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="substr_value">
    <goal name="VC subtr_scal.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="substr_value">
     <goal name="VC subtr_scal.6.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_values">
      <goal name="VC subtr_scal.6.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_values">
       <goal name="VC subtr_scal.6.0.0.0.0.0" expl="precondition" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="125"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC subtr_scal.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
     </goal>
     <goal name="VC subtr_scal.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
     </goal>
     <goal name="VC subtr_scal.6.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.44"/></proof>
     </goal>
     <goal name="VC subtr_scal.6.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.35"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC subtr_scal.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="123"/></proof>
    </goal>
    <goal name="VC subtr_scal.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
    </goal>
    <goal name="VC subtr_scal.6.0.3" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.37"/></proof>
    </goal>
    <goal name="VC subtr_scal.6.0.4" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.33"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC subtr_scal.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC subtr_scal_rev" expl="VC for subtr_scal_rev" proved="true">
 <proof prover="6"><result status="valid" time="0.21" steps="101"/></proof>
 </goal>
 <goal name="VC get_equal_mat_to_substr" expl="VC for get_equal_mat_to_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_equal_mat_to_substr.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="102"/></proof>
  </goal>
  <goal name="VC get_equal_mat_to_substr.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="105"/></proof>
  </goal>
  <goal name="VC get_equal_mat_to_substr.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
  </goal>
  <goal name="VC get_equal_mat_to_substr.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="109"/></proof>
  </goal>
  <goal name="VC get_equal_mat_to_substr.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="110"/></proof>
  </goal>
  <goal name="VC get_equal_mat_to_substr.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.83"/></proof>
  </goal>
  <goal name="VC get_equal_mat_to_substr.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="111"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_inequal_mat_by_substr" expl="VC for set_inequal_mat_by_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_inequal_mat_by_substr.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_inequal_mat_by_substr.0.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(exists i j. 0&lt;= i &lt; rows m /\ 0&lt;= j &lt; columns m /\ get (mat_substr m n) i j &lt;&gt; tzero)">
    <goal name="VC set_inequal_mat_by_substr.0.0.0" expl="asserted formula" proved="true">
    <transf name="case" proved="true" arg1="(forall i j. 0&lt;= i &lt; rows m -&gt; 0&lt;= j &lt; columns m -&gt; get (mat_substr m n) i j = tzero)">
     <goal name="VC set_inequal_mat_by_substr.0.0.0.0" expl="true case (asserted formula)" proved="true">
     <transf name="assert" proved="true" arg1="(m = n)">
      <goal name="VC set_inequal_mat_by_substr.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="VC set_inequal_mat_by_substr.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="101"/></proof>
       </goal>
       <goal name="VC set_inequal_mat_by_substr.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="101"/></proof>
       </goal>
       <goal name="VC set_inequal_mat_by_substr.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC set_inequal_mat_by_substr.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(get m i j )" arg2="(get (mat_substr m n) i j +. get n i j)">
         <goal name="VC set_inequal_mat_by_substr.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="105"/></proof>
         </goal>
         <goal name="VC set_inequal_mat_by_substr.0.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="0.84"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_inequal_mat_by_substr.0.0.0.0.1" expl="true case (asserted formula)" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="101"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_inequal_mat_by_substr.0.0.0.1" expl="false case (asserted formula)" proved="true">
     <proof prover="6"><result status="valid" time="0.17" steps="113"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_inequal_mat_by_substr.0.0.1" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="115"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_inequal_mat_by_substr.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="103"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_sums" proved="true">
 <goal name="VC set_constant_size" expl="VC for set_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_constant_size.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_constant_size.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="constant_size_def">
    <goal name="VC set_constant_size.0.0.0" expl="VC for set_constant_size" proved="true">
    <proof prover="4"><result status="valid" time="0.48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_constant_size_exists" expl="VC for set_constant_size_exists" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_constant_size_exists.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_constant_size_exists.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC set_constant_size_exists.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_constant_size_exists.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.39"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_constant_size_exists.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_constant_size_exists.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.31"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_constant_size_t" expl="VC for set_constant_size_t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_constant_size_t.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_constant_size_t.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.46"/></proof>
   </goal>
   <goal name="VC set_constant_size_t.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.43"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC guarded_set_constant_size" expl="VC for guarded_set_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC guarded_set_constant_size.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC guarded_set_constant_size.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="VC guarded_set_constant_size.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.49"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_constant_size_set" expl="VC for set_constant_size_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_constant_size_set.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_constant_size_set.0.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC set_constant_size_set.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.48"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_constant_size_set.0.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC set_constant_size_set.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_constant_size" expl="VC for get_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_constant_size.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC get_constant_size.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC s_rows" expl="VC for s_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC s_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="100"/></proof>
  </goal>
  <goal name="VC s_rows.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC s_rows.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC s_columns" expl="VC for s_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC s_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="100"/></proof>
  </goal>
  <goal name="VC s_columns.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="VC s_columns.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_rows" expl="VC for set_s_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_rows_elt" expl="VC for set_s_rows_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_rows_elt.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_columns" expl="VC for set_s_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="101"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_columns_elt" expl="VC for set_s_columns_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_columns_elt.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC s_rows_eq" expl="VC for s_rows_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC s_rows_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="99"/></proof>
  </goal>
  <goal name="VC s_rows_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="99"/></proof>
  </goal>
  <goal name="VC s_rows_eq.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC s_rows_eq.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC s_rows_eq.2.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.35"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC s_rows_eq.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC s_rows_eq.2.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.35"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC s_rows_eq.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC s_rows_eq.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_constant_size_give" expl="VC for set_constant_size_give" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_constant_size_give.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_constant_size_give.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.48"/></proof>
   </goal>
   <goal name="VC set_constant_size_give.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_constant_size_give.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="103"/></proof>
  </goal>
  <goal name="VC set_constant_size_give.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="103"/></proof>
  </goal>
  <goal name="VC set_constant_size_give.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="VC set_constant_size_give.3.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC set_constant_size_give.3.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.44"/></proof>
    </goal>
    <goal name="VC set_constant_size_give.3.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_constant_size_give.3.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="3.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_constant_size_give.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="VC set_constant_size_give.4.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC set_constant_size_give.4.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.52"/></proof>
    </goal>
    <goal name="VC set_constant_size_give.4.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.48"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_constant_size_give.4.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="3.13"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC s_columns_eq" expl="VC for s_columns_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC s_columns_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="99"/></proof>
  </goal>
  <goal name="VC s_columns_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
  </goal>
  <goal name="VC s_columns_eq.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC s_columns_eq.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC s_columns_eq.2.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC s_columns_eq.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC s_columns_eq.2.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC s_columns_eq.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="VC s_columns_eq.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC subset_constant_size" expl="VC for subset_constant_size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC subset_constant_size.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC subset_constant_size.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC subset_constant_size.1.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC subset_constant_size.1.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC subset_constant_size.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(s_rows s&#39; f )" arg2="(rows (f (choose s&#39;)))">
   <goal name="VC subset_constant_size.2.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="VC subset_constant_size.2.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC subset_constant_size.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(s_columns s&#39; f )" arg2="(columns (f (choose s&#39;)))">
   <goal name="VC subset_constant_size.3.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.18"/></proof>
   </goal>
   <goal name="VC subset_constant_size.3.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="107"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_rows_rem" expl="VC for set_s_rows_rem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_rows_rem.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="99"/></proof>
  </goal>
  <goal name="VC set_s_rows_rem.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="VC set_s_rows_rem.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
  </goal>
  <goal name="VC set_s_rows_rem.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC set_s_rows_rem.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="108"/></proof>
  </goal>
  <goal name="VC set_s_rows_rem.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="109"/></proof>
  </goal>
  <goal name="VC set_s_rows_rem.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_columns_rem" expl="VC for set_s_columns_rem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_columns_rem.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
  </goal>
  <goal name="VC set_s_columns_rem.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC set_s_columns_rem.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
  </goal>
  <goal name="VC set_s_columns_rem.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC set_s_columns_rem.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="108"/></proof>
  </goal>
  <goal name="VC set_s_columns_rem.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="109"/></proof>
  </goal>
  <goal name="VC set_s_columns_rem.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_rows_add" expl="VC for set_s_rows_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_rows_add.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_s_rows_add.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_rows_add.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.46"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_s_rows_add.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_rows_add.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_s_rows_add.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="107"/></proof>
  </goal>
  <goal name="VC set_s_rows_add.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_columns_add" expl="VC for set_s_columns_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_columns_add.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_s_columns_add.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_columns_add.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.33"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_s_columns_add.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_columns_add.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_s_columns_add.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="107"/></proof>
  </goal>
  <goal name="VC set_s_columns_add.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_s_rows_columns_add" expl="VC for set_s_rows_columns_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_s_rows_columns_add.0" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_s_rows_columns_add.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_rows_columns_add.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_s_rows_columns_add.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_rows_columns_add.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.46"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_s_rows_columns_add.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="107"/></proof>
  </goal>
  <goal name="VC set_s_rows_columns_add.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC set_s_rows_columns_add.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_rows_columns_add.2.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_s_rows_columns_add.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_s_rows_columns_add.2.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.38"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_s_rows_columns_add.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="109"/></proof>
  </goal>
  <goal name="VC set_s_rows_columns_add.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
  </goal>
  <goal name="VC set_s_rows_columns_add.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="108"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum" expl="VC for mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="101"/></proof>
  </goal>
  <goal name="VC mat_sum.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
  </goal>
  <goal name="VC mat_sum.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC mat_sum.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="108"/></proof>
  </goal>
  <goal name="VC mat_sum.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum.4.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="109"/></proof>
   </goal>
   <goal name="VC mat_sum.4.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.33"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="109"/></proof>
  </goal>
  <goal name="VC mat_sum.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.49"/></proof>
  </goal>
  <goal name="VC mat_sum.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="116"/></proof>
  </goal>
  <goal name="VC mat_sum.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="118"/></proof>
  </goal>
  <goal name="VC mat_sum.9" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="VC mat_sum.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC mat_sum.11" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="109"/></proof>
  </goal>
  <goal name="VC mat_sum.12" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="109"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC columns_mat_sum" expl="VC for columns_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC columns_mat_sum.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC columns_mat_sum.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_spec2">
    <goal name="VC columns_mat_sum.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="VC columns_mat_sum.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
     </goal>
     <goal name="VC columns_mat_sum.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC columns_mat_sum.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
    </goal>
    <goal name="VC columns_mat_sum.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="101"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rows_mat_sum" expl="VC for rows_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rows_mat_sum.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.67"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_cardone" expl="VC for mat_sum_cardone" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_cardone.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_sum_cardone.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_def1">
    <goal name="VC mat_sum_cardone.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.05"/></proof>
    </goal>
    <goal name="VC mat_sum_cardone.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
    </goal>
    <goal name="VC mat_sum_cardone.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_to_sum_pre" expl="VC for mat_sum_to_sum_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_to_sum_pre.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="111"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_to_sum_pre.2.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="115"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum_pre.2.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.33"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="118"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_to_sum_pre.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="119"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum_pre.5.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_to_sum_pre.6.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="121"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum_pre.6.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="117"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum_pre.8" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_sum_to_sum_pre.8.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s =1)">
    <goal name="VC mat_sum_to_sum_pre.8.0.0" expl="true case (postcondition)" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_to_sum_pre.8.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="3"><result status="valid" time="0.22"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_pre.8.0.1" expl="false case (postcondition)" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_to_sum_pre.8.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC mat_sum_to_sum_pre.8.0.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H3">
       <goal name="VC mat_sum_to_sum_pre.8.0.1.0.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_to_sum_pre.8.0.1.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="4"><result status="valid" time="2.36"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_to_sum" expl="VC for mat_sum_to_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_to_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="101"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="103"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="103"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="107"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
  </goal>
  <goal name="VC mat_sum_to_sum.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC mat_sum_to_sum.6.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="113"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum.6.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="113"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum.6.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_to_sum.6.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC mat_sum_to_sum.6.2.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_to_sum.6.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
       <goal name="VC mat_sum_to_sum.6.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="1.07"/></proof>
       </goal>
       <goal name="VC mat_sum_to_sum.6.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="113"/></proof>
       </goal>
       <goal name="VC mat_sum_to_sum.6.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="113"/></proof>
       </goal>
       <goal name="VC mat_sum_to_sum.6.2.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.45"/></proof>
       </goal>
       <goal name="VC mat_sum_to_sum.6.2.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_to_sum.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC mat_sum_to_sum.7.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="117"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum.7.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="117"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum.7.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_to_sum.7.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
     <goal name="VC mat_sum_to_sum.7.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC mat_sum_to_sum.7.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC mat_sum_to_sum.7.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.47"/></proof>
      </goal>
      <goal name="VC mat_sum_to_sum.7.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.37"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum.7.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="117"/></proof>
     </goal>
     <goal name="VC mat_sum_to_sum.7.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="117"/></proof>
     </goal>
     <goal name="VC mat_sum_to_sum.7.2.0.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.34"/></proof>
     </goal>
     <goal name="VC mat_sum_to_sum.7.2.0.4" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.45"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_value" expl="VC for mat_sum_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_value.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_to_sum">
   <goal name="VC mat_sum_value.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC mat_sum_value.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC mat_sum_value.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.30"/></proof>
    </goal>
    <goal name="VC mat_sum_value.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.44"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_value.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="101"/></proof>
   </goal>
   <goal name="VC mat_sum_value.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_add" expl="VC for mat_sum_add" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_add.0" expl="VC for mat_sum_add" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_add.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="109"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.5" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.33"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.6" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_add.0.6.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_add.0.6.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.34"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_add.0.6.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_add.0.6.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.43"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_add.0.7" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="119"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="113"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.9" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.10" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_add.0.10.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_add.0.10.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.41"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_add.0.10.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_add.0.10.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_add.0.11" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="123"/></proof>
   </goal>
   <goal name="VC mat_sum_add.0.12" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="VC mat_sum_add.0.12.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="3.44"/></proof>
    </goal>
    <goal name="VC mat_sum_add.0.12.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="4.37"/></proof>
    </goal>
    <goal name="VC mat_sum_add.0.12.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_add.0.12.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="VC mat_sum_add.0.12.2.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_value">
       <goal name="VC mat_sum_add.0.12.2.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
        <goal name="VC mat_sum_add.0.12.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="sum_add">
         <goal name="VC mat_sum_add.0.12.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="2.02"/></proof>
         </goal>
         <goal name="VC mat_sum_add.0.12.2.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="119"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_add.0.12.2.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="inversion_arg_pr" proved="true" arg1="H5">
         <goal name="VC mat_sum_add.0.12.2.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.17" steps="119"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_add.0.12.2.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="119"/></proof>
        </goal>
        <goal name="VC mat_sum_add.0.12.2.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.36"/></proof>
        </goal>
        <goal name="VC mat_sum_add.0.12.2.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.35"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_add.0.12.2.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="121"/></proof>
       </goal>
       <goal name="VC mat_sum_add.0.12.2.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="121"/></proof>
       </goal>
       <goal name="VC mat_sum_add.0.12.2.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="121"/></proof>
       </goal>
       <goal name="VC mat_sum_add.0.12.2.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.42"/></proof>
       </goal>
       <goal name="VC mat_sum_add.0.12.2.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.42"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_add.0.12.2.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_sum_add.0.12.2.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_add.0.12.2.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.44"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_add.0.12.2.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_add.0.12.2.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.42"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_add.0.12.2.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.48"/></proof>
      </goal>
      <goal name="VC mat_sum_add.0.12.2.0.3" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.50"/></proof>
      </goal>
      <goal name="VC mat_sum_add.0.12.2.0.4" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.35"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_plus_one" expl="VC for mat_sum_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_plus_one.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC mat_sum_plus_one.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC mat_sum_plus_one.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC mat_sum_plus_one.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="106"/></proof>
  </goal>
  <goal name="VC mat_sum_plus_one.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="108"/></proof>
  </goal>
  <goal name="VC mat_sum_plus_one.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="110"/></proof>
  </goal>
  <goal name="VC mat_sum_plus_one.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="109"/></proof>
  </goal>
  <goal name="VC mat_sum_plus_one.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_comp_pre" expl="VC for mat_sum_comp_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_comp_pre.0" expl="VC for mat_sum_comp_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_comp_pre.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="sum_eq">
    <goal name="VC mat_sum_comp_pre.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_comp_pre.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_hyp" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="4.59"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp_pre.0.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(sum s (fun (k:b) -&gt; get (add_mat (f @ k) (g @ k)) i j))" arg2="(sum s
  (fun (k:b) -&gt;
    ((fun (k1:b) -&gt; get (f @ k1) i j) @ k)
    +. ((fun (k1:b) -&gt; get (g @ k1) i j) @ k)))">
    <goal name="VC mat_sum_comp_pre.0.1.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="VC mat_sum_comp_pre.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="VC mat_sum_comp_pre.0.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.51"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp_pre.0.2" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC mat_sum_comp_pre.0.2.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp_pre.0.2.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.50"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp_pre.0.2.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.2.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.2.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp_pre.0.2.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_comp_pre.0.2.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.48"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp_pre.0.3" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC mat_sum_comp_pre.0.3.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp_pre.0.3.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.3.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.3.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.44"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp_pre.0.3.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.3.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.3.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.47"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp_pre.0.3.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_comp_pre.0.3.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.45"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp_pre.0.4" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
    <goal name="VC mat_sum_comp_pre.0.4.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(sum s (fun (e:b) -&gt; get ((fun (k:b) -&gt; add_mat (f @ k) (g @ k)) @ e) i j))" arg2="( sum s (fun (k:b) -&gt; get (add_mat (f @ k) (g @ k)) i j))">
     <goal name="VC mat_sum_comp_pre.0.4.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC mat_sum_comp_pre.0.4.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="add_values">
       <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_eq_t">
        <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="3.00"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="123"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="123"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="123"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="123"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="2.77"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.1.3" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.10" steps="123"/></proof>
         </goal>
         <goal name="VC mat_sum_comp_pre.0.4.0.0.0.0.1.4" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_comp_pre.0.4.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.50"/></proof>
       </goal>
       <goal name="VC mat_sum_comp_pre.0.4.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.43"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp_pre.0.4.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="VC mat_sum_comp_pre.0.4.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.4.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp_pre.0.4.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp_pre.0.4.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.4.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.4.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.52"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp_pre.0.4.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_pre.0.4.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_pre.0.4.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.63"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp_pre.0.4.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
    </goal>
    <goal name="VC mat_sum_comp_pre.0.4.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_comp_pre.0.4.3.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="123"/></proof>
     </goal>
     <goal name="VC mat_sum_comp_pre.0.4.3.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC mat_sum_comp_pre.0.4.3.1.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp_pre.0.4.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_comp_pre.0.4.4.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="123"/></proof>
     </goal>
     <goal name="VC mat_sum_comp_pre.0.4.4.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC mat_sum_comp_pre.0.4.4.1.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_comp" expl="VC for mat_sum_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_comp.0" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_comp.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="3.63"/></proof>
   </goal>
   <goal name="VC mat_sum_comp.0.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="4.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.1" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="VC mat_sum_comp.1.0" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(s_rows s f)" arg2="(rows (f(choose s)))">
    <goal name="VC mat_sum_comp.1.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp.1.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.29"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp.1.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.32"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp.1.0.1" expl="equality hypothesis" proved="true">
    <transf name="compute_hyp" proved="true" >
     <goal name="VC mat_sum_comp.1.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="109"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.1.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_comp.1.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="VC mat_sum_comp.2.0" expl="apply premises" proved="true">
   <transf name="replace" proved="true" arg1="(s_columns s f)" arg2="(columns (f(choose s)))">
    <goal name="VC mat_sum_comp.2.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp.2.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp.2.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.29"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.2.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp.2.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp.2.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.37"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="111"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.2.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.30"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_comp.3.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.24"/></proof>
   </goal>
   <goal name="VC mat_sum_comp.3.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.4" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_sum_comp.4.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_spec3">
    <goal name="VC mat_sum_comp.4.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="add_mat_spec2">
     <goal name="VC mat_sum_comp.4.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC mat_sum_comp.4.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_spec3">
       <goal name="VC mat_sum_comp.4.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="113"/></proof>
       </goal>
       <goal name="VC mat_sum_comp.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="113"/></proof>
       </goal>
       <goal name="VC mat_sum_comp.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="113"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.50"/></proof>
     </goal>
     <goal name="VC mat_sum_comp.4.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp.4.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp.4.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_comp.4.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.4.0.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_comp.4.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.60"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="113"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.5" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_sum_comp.5.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_spec2">
    <goal name="VC mat_sum_comp.5.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="add_mat_spec4">
     <goal name="VC mat_sum_comp.5.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_spec2">
      <goal name="VC mat_sum_comp.5.0.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="H2">
      </transf>
      </goal>
      <goal name="VC mat_sum_comp.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="115"/></proof>
      </goal>
      <goal name="VC mat_sum_comp.5.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="115"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.5.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.41"/></proof>
     </goal>
     <goal name="VC mat_sum_comp.5.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.52"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp.5.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp.5.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_comp.5.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.60"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.5.0.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_comp.5.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.51"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp.5.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="115"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.6" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(s_rows s f)" arg2="(rows (mat_sum s (fun (k:b) -&gt; add_mat (f @ k) (g @ k))))">
   <goal name="VC mat_sum_comp.6.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC mat_sum_comp.6.0.0" expl="VC for mat_sum_comp" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="121"/></proof>
    </goal>
    <goal name="VC mat_sum_comp.6.0.1" expl="VC for mat_sum_comp" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC mat_sum_comp.6.0.1.0" expl="VC for mat_sum_comp" proved="true">
     <transf name="rewrite" proved="true" arg1="valid_index_def" arg2="in" arg3="H">
      <goal name="VC mat_sum_comp.6.0.1.0.0" expl="VC for mat_sum_comp" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC mat_sum_comp.6.0.1.0.0.0" expl="VC for mat_sum_comp" proved="true">
       <transf name="apply" proved="true" arg1="H2">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.6.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC mat_sum_comp.6.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC mat_sum_comp.6.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.7" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(s_columns s f)" arg2="(columns (mat_sum s (fun (k:b) -&gt; add_mat (f @ k) (g @ k))))">
   <goal name="VC mat_sum_comp.7.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC mat_sum_comp.7.0.0" expl="VC for mat_sum_comp" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="121"/></proof>
    </goal>
    <goal name="VC mat_sum_comp.7.0.1" expl="VC for mat_sum_comp" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC mat_sum_comp.7.0.1.0" expl="VC for mat_sum_comp" proved="true">
     <transf name="rewrite" proved="true" arg1="valid_index_def" arg2="in" arg3="H">
      <goal name="VC mat_sum_comp.7.0.1.0.0" expl="VC for mat_sum_comp" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC mat_sum_comp.7.0.1.0.0.0" expl="VC for mat_sum_comp" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.7.1" expl="equality hypothesis" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC mat_sum_comp.7.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC mat_sum_comp.7.1.0.0" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.50"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.8" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC mat_sum_comp.8.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="H3">
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.8.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="H2">
   </transf>
   </goal>
   <goal name="VC mat_sum_comp.8.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_comp.8.2.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_comp_pre">
     <goal name="VC mat_sum_comp.8.2.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="119"/></proof>
     </goal>
     <goal name="VC mat_sum_comp.8.2.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="119"/></proof>
     </goal>
     <goal name="VC mat_sum_comp.8.2.0.2" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="H2" arg2="i,j">
      <goal name="VC mat_sum_comp.8.2.0.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC mat_sum_comp.8.2.0.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.8.2.0.3" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="H1" arg2="i,j">
      <goal name="VC mat_sum_comp.8.2.0.3.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC mat_sum_comp.8.2.0.3.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
       <goal name="VC mat_sum_comp.8.2.0.3.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.8.2.0.4" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="119"/></proof>
     </goal>
     <goal name="VC mat_sum_comp.8.2.0.5" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="H2" arg2="i,j">
      <goal name="VC mat_sum_comp.8.2.0.5.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC mat_sum_comp.8.2.0.5.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
       <goal name="VC mat_sum_comp.8.2.0.5.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="123"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp.8.2.0.6" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="119"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_comp.9" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_comp_rec" expl="VC for mat_sum_comp_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_comp_rec.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_comp">
   <goal name="VC mat_sum_comp_rec.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_comp_rec.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_comp_rec.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_comp_rec.0.3" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_comp_rec.0.4" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_comp_rec.0.5" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_to_sum_fun" expl="VC for mat_sum_to_sum_fun" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_to_sum_fun.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="sum_eq">
   <goal name="VC mat_sum_to_sum_fun.0.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_to_sum_fun.0.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_to_sum_fun.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="VC mat_sum_to_sum_fun.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.84"/></proof>
      </goal>
      <goal name="VC mat_sum_to_sum_fun.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_to_sum_fun.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_to_sum_fun.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_fun.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.43"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_to_sum_fun.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_fun.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.55"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_to_sum_fun.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.09" steps="109"/></proof>
      </goal>
      <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="( s_rows s&#39; (f @ x))" arg2="r">
       <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows">
        <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.42"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.42"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_to_sum_fun.0.0.0.0.3.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.52"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(s_columns s&#39; (f @ x))" arg2="c">
       <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns">
        <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.38"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.44"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_to_sum_fun.0.0.0.0.4.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.51"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_to_sum_double_pre" expl="VC for mat_sum_to_sum_double_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_to_sum_double_pre.0" expl="VC for mat_sum_to_sum_double_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_to_sum_double_pre.0.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_to_sum_double_pre.0.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_to_sum_double_pre.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_to_sum_double_pre.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.51"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_to_sum_double_pre.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.0.1" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="VC mat_sum_to_sum_double_pre.0.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC mat_sum_to_sum_double_pre.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.46"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.47"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.40"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.0.2" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="VC mat_sum_to_sum_double_pre.0.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC mat_sum_to_sum_double_pre.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.46"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.0.2.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.0.2.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.42"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.0.2.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_to_sum_double_pre.0.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_to_sum_double_pre.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.19"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_to_sum_double_pre.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.30"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="113"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="113"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="111"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.5" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_to_sum_double_pre.0.5.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_to_sum_double_pre.0.5.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.21" steps="115"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.5.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_to_sum_double_pre.0.5.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="1.20" steps="115"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="111"/></proof>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.7" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(s_rows s
    (fun (e:a) -&gt; if mem e s then mat_sum s&#39; (f @ e) else make 1 1 tone))" arg2="r">
    <goal name="VC mat_sum_to_sum_double_pre.0.7.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="111"/></proof>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.7.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="VC mat_sum_to_sum_double_pre.0.7.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC mat_sum_to_sum_double_pre.0.7.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.7.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="1.11" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.7.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.7.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="1.20" steps="117"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.7.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.17"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.8" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(s_columns s
    (fun (e:a) -&gt; if mem e s then mat_sum s&#39; (f @ e) else make 1 1 tone))" arg2="c">
    <goal name="VC mat_sum_to_sum_double_pre.0.8.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="113"/></proof>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.8.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="VC mat_sum_to_sum_double_pre.0.8.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC mat_sum_to_sum_double_pre.0.8.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.8.1.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_to_sum_double_pre.0.8.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="1.32" steps="119"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.8.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.8.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_to_sum_double_pre.0.8.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="1.08" steps="119"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.8.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.17"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_to_sum_double_pre.0.9" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
    <goal name="VC mat_sum_to_sum_double_pre.0.9.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
        <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="1.10"/></proof>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.16" steps="115"/></proof>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="113"/></proof>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.0.0.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.52"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.9.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_to_sum_double_pre.0.9.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_to_sum_double_pre.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.68"/></proof>
      </goal>
     </transf>
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_to_sum_double_pre.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.35"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.9.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_to_sum_double_pre.0.9.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.64"/></proof>
      </goal>
     </transf>
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_to_sum_double_pre.0.9.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.50"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.9.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="111"/></proof>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.9.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_columns s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="c">
      <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="111"/></proof>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.41"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.39"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_to_sum_double_pre.0.9.3.0.1.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.16"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_rows s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="r">
      <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="111"/></proof>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.41"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.40"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_to_sum_double_pre.0.9.3.1.1.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.19"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_to_sum_double_pre.0.9.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_rows s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="r">
      <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="111"/></proof>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.39"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.39"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_to_sum_double_pre.0.9.4.0.1.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.30"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(s_columns s (fun (e:a) -&gt; mat_sum s&#39; (f @ e)))" arg2="c">
      <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="111"/></proof>
      </goal>
      <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.45"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.54"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_to_sum_double_pre.0.9.4.1.1.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.16"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_mult_sum_out_l" expl="VC for mat_mult_sum_out_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_mult_sum_out_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="103"/></proof>
  </goal>
  <goal name="VC mat_mult_sum_out_l.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_mult_sum_out_l.1.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="101"/></proof>
   </goal>
   <goal name="VC mat_mult_sum_out_l.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_mult_sum_out_l.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC mat_mult_sum_out_l.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="112"/></proof>
  </goal>
  <goal name="VC mat_mult_sum_out_l.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC mat_mult_sum_out_l.5" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="VC mat_mult_sum_out_l.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_mult_sum_out_l.6.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="3.27"/></proof>
   </goal>
   <goal name="VC mat_mult_sum_out_l.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_mult_sum_out_l.6.1.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="mat_sum_add" arg2="(remove (choose s) s),f,(choose s)">
     <goal name="VC mat_mult_sum_out_l.6.1.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="Hinst">
      <goal name="VC mat_mult_sum_out_l.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="distr_l">
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="mat_sum_add" arg2="(remove (choose s) s),(fun (e:a) -&gt; mat_mult (f @ e) n),(choose s)">
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="Hinst">
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="rewrite" proved="true" arg1="H1">
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.35"/></proof>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.20"/></proof>
            </goal>
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.20"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="goal_comm">
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_s_rows">
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="set_constant_size">
               <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.19"/></proof>
               </goal>
               <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.19"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_mult_rows">
                 <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="H5">
                  <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="H5">
                   <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.19" steps="105"/></proof>
                   </goal>
                   <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.22" steps="111"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="0"><result status="valid" time="0.44"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="0.39"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.1" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="H6">
                 <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.3.0.0.1.0.1.0" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="0.37"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_s_columns">
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.21"/></proof>
              </goal>
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.22"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.1" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_mult_columns">
               <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="0.39"/></proof>
               </goal>
               <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.1.0.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="H6">
                <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.4.0.1.0.1.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.39"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.17" steps="105"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.17" steps="105"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H5">
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mat_sum_spec3">
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_s_rows">
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.58"/></proof>
              </goal>
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.59"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.28"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.75"/></proof>
            </goal>
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.63"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.35"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="110"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H6">
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="mat_sum_spec2">
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_s_columns">
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.76"/></proof>
              </goal>
              <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.65"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.48"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.55"/></proof>
            </goal>
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.66"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.34"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="110"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.34"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.46"/></proof>
       </goal>
       <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.52"/></proof>
        </goal>
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows">
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.41"/></proof>
          </goal>
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.46"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H5">
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H5">
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.10" steps="105"/></proof>
           </goal>
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="110"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.3.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.39"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns">
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.42"/></proof>
          </goal>
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.46"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.1" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="get_constant_size" arg2="s,f">
          <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.1.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.1.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.47"/></proof>
            </goal>
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.52"/></proof>
            </goal>
            <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.4.0.1.0.0.2" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.18" steps="111"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_mult_sum_out_l.6.1.0.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="105"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_mult_sum_out_l.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_dim" expl="VC for mat_sum_dim" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_dim.0" expl="VC for mat_sum_dim" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_dim.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="101"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="101"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="111"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="113"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.5" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC mat_sum_dim.0.5.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_dim.0.5.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.37"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim.0.5.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.45"/></proof>
    </goal>
    <goal name="VC mat_sum_dim.0.5.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.46"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_dim.0.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="111"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.7" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_dim.0.7.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_dim.0.7.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.34"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim.0.7.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_dim.0.7.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.43"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_dim.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="105"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_dim.0.9.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_dim.0.9.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.36"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim.0.9.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_dim.0.9.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.40"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_dim.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="107"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.11" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="101"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.12" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="123"/></proof>
   </goal>
   <goal name="VC mat_sum_dim.0.13" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H2">
    <goal name="VC mat_sum_dim.0.13.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="116"/></proof>
    </goal>
    <goal name="VC mat_sum_dim.0.13.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC mat_sum_dim.0.13.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="rows_mat_sum">
      <goal name="VC mat_sum_dim.0.13.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="109"/></proof>
      </goal>
      <goal name="VC mat_sum_dim.0.13.1.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_sum_dim.0.13.1.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_dim.0.13.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.37"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_dim.0.13.1.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_dim.0.13.1.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.53"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_dim.0.13.1.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="113"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim.0.13.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="111"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_dim.0.14" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H3">
    <goal name="VC mat_sum_dim.0.14.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="116"/></proof>
    </goal>
    <goal name="VC mat_sum_dim.0.14.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC mat_sum_dim.0.14.1.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="columns_mat_sum">
      <goal name="VC mat_sum_dim.0.14.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="111"/></proof>
      </goal>
      <goal name="VC mat_sum_dim.0.14.1.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_sum_dim.0.14.1.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_dim.0.14.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_dim.0.14.1.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_dim.0.14.1.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_dim.0.14.1.0.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="115"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim.0.14.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.17" steps="113"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_dim_to_mat_sum" expl="VC for mat_sum_dim_to_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_dim_to_mat_sum.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_dim_to_make_zero" expl="VC for mat_sum_dim_to_make_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_dim_to_make_zero.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_dim_add" expl="VC for mat_sum_dim_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_dim_add.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_dim_add.0.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum_dim s f r c)" arg2="(make r c tzero)">
    <goal name="VC mat_sum_dim_add.0.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mat_sum_dim_add.0.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_dim_def">
      <goal name="VC mat_sum_dim_add.0.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
       <goal name="VC mat_sum_dim_add.0.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="4"><result status="valid" time="1.12"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="107"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_dim_add.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="105"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="105"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="109"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.0.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="109"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.0.0.0.5" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="107"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim_add.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="VC mat_sum_dim_add.0.0.1.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_dim_add.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
       <goal name="VC mat_sum_dim_add.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="107"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim_add.0.0.1.1" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_dim_add.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec">
       <goal name="VC mat_sum_dim_add.0.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.17" steps="107"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.1.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.0.1.1.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.17" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim_add.0.0.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_dim_add.0.0.1.2.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC mat_sum_dim_add.0.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec2">
        <goal name="VC mat_sum_dim_add.0.0.1.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="107"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.0.0.1.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="107"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.0.0.1.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="107"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.0.0.1.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="111"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.0.0.1.2.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="111"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.0.0.1.2.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="107"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_dim_add.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="VC mat_sum_dim_add.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_rows">
     <goal name="VC mat_sum_dim_add.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_add.0.1.0.1" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_dim_add.0.1.0.1.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec">
       <goal name="VC mat_sum_dim_add.0.1.0.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="1.08"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.1.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.1.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.15" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim_add.0.1.0.2" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_dim_add.0.1.0.2.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
       <goal name="VC mat_sum_dim_add.0.1.0.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="1.28"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.2.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.0.2.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim_add.0.1.1" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="add_columns">
     <goal name="VC mat_sum_dim_add.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="105"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_add.0.1.1.1" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_dim_add.0.1.1.1.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec">
       <goal name="VC mat_sum_dim_add.0.1.1.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="1.06"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.1.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.1.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim_add.0.1.1.2" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_dim_add.0.1.1.2.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
       <goal name="VC mat_sum_dim_add.0.1.1.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="1.32"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.2.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.1.2.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="109"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim_add.0.1.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_dim_add.0.1.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_make_zero">
      <goal name="VC mat_sum_dim_add.0.1.2.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_value">
       <goal name="VC mat_sum_dim_add.0.1.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.82"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.2.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.78"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.2.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.92"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.2.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.92"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.2.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="108"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.0.1.2.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="108"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_dim_add.0.1.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="107"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.1.2.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.18" steps="111"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.1.2.0.3" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="111"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.1.2.0.4" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="107"/></proof>
      </goal>
      <goal name="VC mat_sum_dim_add.0.1.2.0.5" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.09" steps="107"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_dim_add.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="105"/></proof>
  </goal>
  <goal name="VC mat_sum_dim_add.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="106"/></proof>
  </goal>
  <goal name="VC mat_sum_dim_add.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="106"/></proof>
  </goal>
  <goal name="VC mat_sum_dim_add.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="VC mat_sum_dim_add.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC mat_sum_dim_add.6" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s =0)">
   <goal name="VC mat_sum_dim_add.6.0" expl="true case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="109"/></proof>
   </goal>
   <goal name="VC mat_sum_dim_add.6.1" expl="false case (postcondition)" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC mat_sum_dim_add.6.1.0" expl="false case (postcondition)" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="VC mat_sum_dim_add.6.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(rows (mat_sum_dim (add x s) f r c))" arg2="r">
      <goal name="VC mat_sum_dim_add.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_rows">
       <goal name="VC mat_sum_dim_add.6.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="1.85"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC mat_sum_dim_add.6.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec">
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.52"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.10" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.88"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.1.0.4" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.68"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC mat_sum_dim_add.6.1.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.58"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.2.0.3" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.67"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.0.0.2.0.4" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.48"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_dim_add.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim_add.6.1.0.1" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(columns (mat_sum_dim (add x s) f r c))" arg2="c">
      <goal name="VC mat_sum_dim_add.6.1.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="add_columns">
       <goal name="VC mat_sum_dim_add.6.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="1.28"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC mat_sum_dim_add.6.1.0.1.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec">
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.79"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.13" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.74"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.1.0.4" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.54"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.1.0.2" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC mat_sum_dim_add.6.1.0.1.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.61"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.16" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.2.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="107"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.2.0.3" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.66"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.1.0.2.0.4" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="1.49"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_dim_add.6.1.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="0.45"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_dim_add.6.1.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_dim_add.6.1.0.2.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
       <goal name="VC mat_sum_dim_add.6.1.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
        <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_add">
         <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="109"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="109"/></proof>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(columns (f @ x))" arg2="c">
          <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(columns (f(choose s)) = c)">
           <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.0.0" expl="asserted formula" proved="true">
           <proof prover="4"><result status="valid" time="2.03"/></proof>
           </goal>
           <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.49"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.37"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.2.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="1.22"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="( rows (f @ x) )" arg2="r">
          <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(rows (f(choose s)) = r)">
           <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.0" expl="asserted formula" proved="true">
           <proof prover="4"><result status="valid" time="2.91"/></proof>
           </goal>
           <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.1" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="s_rows_def">
            <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.15" steps="111"/></proof>
            </goal>
            <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.37"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.51"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.3.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="1.74"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.4" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(s_columns s f)" arg2="c">
          <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.4.0" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="1.19"/></proof>
          </goal>
          <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.4.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_s_columns">
           <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.4.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.4.1.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="1.31"/></proof>
            </goal>
            <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.4.1.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="1.29"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.4.1.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="1.97"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.0.5" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.10" steps="109"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.10" steps="109"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="109"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="109"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="1.17"/></proof>
        </goal>
        <goal name="VC mat_sum_dim_add.6.1.0.2.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="1.21"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.35"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.2.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="109"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.2.0.4" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.24" steps="113"/></proof>
       </goal>
       <goal name="VC mat_sum_dim_add.6.1.0.2.0.5" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.17" steps="113"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_scalar" expl="VC for mat_sum_scalar" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_scalar.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_scalar.1.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.57"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar.1.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.58"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_scalar.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="110"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="112"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="111"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_scalar.6.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.17"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar.6.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_scalar.7" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC mat_sum_scalar.7.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC mat_sum_scalar.7.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_scalar.7.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_scalar.7.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.21"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_scalar.7.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_scalar.7.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.18"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_scalar.7.0.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.25"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_scalar.8" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC mat_sum_scalar.8.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC mat_sum_scalar.8.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_scalar.8.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.22"/></proof>
     </goal>
     <goal name="VC mat_sum_scalar.8.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.31"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_scalar.8.0.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.23"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_scalar.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="113"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.10" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_scalar.10.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="107"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar.10.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_scalar.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_scalar.11.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="110"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_scalar.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="112"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.14" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="116"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="118"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar.17" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC mat_sum_scalar.17.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_sum_scalar.17.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mat_sum_scalar.17.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.25"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_scalar.17.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_sum_scalar.17.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mat_sum_scalar.17.1.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="2.39"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_scalar_rev" expl="VC for mat_sum_scalar_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_scalar_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar_rev.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
  </goal>
  <goal name="VC mat_sum_scalar_rev.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC mat_sum_scalar_rev.2.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_const" expl="VC for mat_sum_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_const.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC mat_sum_const.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.32"/></proof>
  </goal>
  <goal name="VC mat_sum_const.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC mat_sum_const.2.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC mat_sum_const.2.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.61"/></proof>
    </goal>
    <goal name="VC mat_sum_const.2.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_const.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC mat_sum_const.3.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC mat_sum_const.3.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.61"/></proof>
    </goal>
    <goal name="VC mat_sum_const.3.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.41"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_const.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
  </goal>
  <goal name="VC mat_sum_const.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_const.5.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="125"/></proof>
   </goal>
   <goal name="VC mat_sum_const.5.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_const.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC mat_sum_const.7" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 1)">
   <goal name="VC mat_sum_const.7.0" expl="true case (postcondition)" proved="true">
   <proof prover="3"><result status="valid" time="0.63"/></proof>
   </goal>
   <goal name="VC mat_sum_const.7.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC mat_sum_const.7.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="121"/></proof>
    </goal>
    <goal name="VC mat_sum_const.7.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC mat_sum_const.7.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_const.7.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H3">
       <goal name="VC mat_sum_const.7.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H3">
        <goal name="VC mat_sum_const.7.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H">
         <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((fun (_:a) -&gt; x) @ choose s)" arg2="x">
          <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_mat">
           <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="1.50"/></proof>
           </goal>
           <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="1.40"/></proof>
           </goal>
           <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="add_values">
             <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(i_to_t (cardinal (remove (choose s) s)) )" arg2="(i_to_t (cardinal s) -. tone)">
              <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="scalar_values">
               <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="scalar_values">
                <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(get x i j +. ((i_to_t (cardinal s) -. tone) *. get x i j))" arg2="( ((i_to_t (cardinal s) -. tone +. tone) *. get x i j))">
                 <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.24" steps="132"/></proof>
                 </goal>
                 <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="1"><result status="valid" time="0.75"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="0"><result status="valid" time="0.43"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.19" steps="132"/></proof>
             </goal>
             <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.31" steps="132"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_const.7.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.18" steps="130"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_const.7.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.40"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_quot" expl="VC for mat_sum_quot" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_quot.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC mat_sum_quot.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.25"/></proof>
  </goal>
  <goal name="VC mat_sum_quot.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
  </goal>
  <goal name="VC mat_sum_quot.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_const">
   <goal name="VC mat_sum_quot.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_assoc">
    <goal name="VC mat_sum_quot.3.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="((tone /. i_to_t (cardinal s)) *. i_to_t (cardinal s))" arg2="tone">
     <goal name="VC mat_sum_quot.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="127"/></proof>
     </goal>
     <goal name="VC mat_sum_quot.3.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_quot.3.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="125"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_scalar_right" expl="VC for mat_sum_scalar_right" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_scalar_right.0" expl="VC for mat_sum_scalar_right" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_scalar_right.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.48"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="138"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="140"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="142"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.5" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.6" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_scalar_right.0.6.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_scalar_right.0.6.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_scalar_right.0.6.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_scalar_right.0.6.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="7.33"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.7" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_scalar_right.0.7.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_rows">
     <goal name="VC mat_sum_scalar_right.0.7.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC mat_sum_scalar_right.0.7.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="VC mat_sum_scalar_right.0.7.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_scalar_right.0.7.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_scalar_right.0.7.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.38"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_scalar_right.0.7.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_scalar_right.0.7.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.35"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_scalar_right.0.7.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.42"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.8" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_scalar_right.0.8.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_columns">
     <goal name="VC mat_sum_scalar_right.0.8.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC mat_sum_scalar_right.0.8.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="VC mat_sum_scalar_right.0.8.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_scalar_right.0.8.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_scalar_right.0.8.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_scalar_right.0.8.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_scalar_right.0.8.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.33"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_scalar_right.0.8.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.36"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.9" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.10" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.11" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="140"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.12" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.13" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.14" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.15" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="142"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.16" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.53"/></proof>
   </goal>
   <goal name="VC mat_sum_scalar_right.0.17" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC mat_sum_scalar_right.0.17.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(cardinal s = 1)">
     <goal name="VC mat_sum_scalar_right.0.17.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="3"><result status="valid" time="0.76"/></proof>
     </goal>
     <goal name="VC mat_sum_scalar_right.0.17.0.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_scalar_right.0.17.0.1.0" expl="false case (postcondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="131"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_scalar_right.0.17.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(cardinal s = 1)">
     <goal name="VC mat_sum_scalar_right.0.17.1.0" expl="true case (postcondition)" proved="true">
     <proof prover="1"><result status="valid" time="0.78"/></proof>
     </goal>
     <goal name="VC mat_sum_scalar_right.0.17.1.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sum_scalar_right.0.17.1.1.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_plus_one">
       <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="add_value">
        <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_plus_one">
          <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="4.35"/></proof>
          </goal>
          <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.42"/></proof>
          </goal>
          <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.62"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0.2.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.0.0.2.1.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.60"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.58"/></proof>
        </goal>
        <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.60"/></proof>
        </goal>
        <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.61"/></proof>
        </goal>
        <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.4" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.57"/></proof>
        </goal>
        <goal name="VC mat_sum_scalar_right.0.17.1.1.0.0.5" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.55"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_scalar_right.0.17.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.41"/></proof>
       </goal>
       <goal name="VC mat_sum_scalar_right.0.17.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.24"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_eq" expl="VC for mat_sum_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_eq.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.52"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="130"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="132"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="134"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_eq.6.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_eq.6.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.43"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_eq.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_eq.6.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_eq.7" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC mat_sum_eq.7.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC mat_sum_eq.7.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
    </goal>
    <goal name="VC mat_sum_eq.7.0.1" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.86"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_eq.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="135"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.10" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_eq.10.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="129"/></proof>
   </goal>
   <goal name="VC mat_sum_eq.10.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_eq.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.52"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="134"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="138"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.14" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="VC mat_sum_eq.15" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="4.71"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_eq_gen" expl="VC for mat_sum_eq_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_eq_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
  </goal>
  <goal name="VC mat_sum_eq_gen.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
  </goal>
  <goal name="VC mat_sum_eq_gen.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="127"/></proof>
  </goal>
  <goal name="VC mat_sum_eq_gen.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="125"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_eq_gen_int" expl="VC for mat_sum_eq_gen_int" proved="true">
 <proof prover="6"><result status="valid" time="0.12" steps="117"/></proof>
 </goal>
 <goal name="VC mat_sum_comp_eq" expl="VC for mat_sum_comp_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_comp_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_eq.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_eq.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_eq.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_comp_eq.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC mat_sum_comp_eq.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="VC mat_sum_comp_eq.5.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="135"/></proof>
    </goal>
    <goal name="VC mat_sum_comp_eq.5.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_comp_eq.5.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_eq.5.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_eq.5.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.43"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_comp_eq.5.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_comp_eq.5.0.1.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_comp_eq.5.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.41"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_comp_eq.5.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_comp_eq.5.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_comp_eq.5.0.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_mat">
       <goal name="VC mat_sum_comp_eq.5.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.50"/></proof>
       </goal>
       <goal name="VC mat_sum_comp_eq.5.0.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.51"/></proof>
       </goal>
       <goal name="VC mat_sum_comp_eq.5.0.2.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.46"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_dim_eq" expl="VC for mat_sum_dim_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_dim_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="125"/></proof>
  </goal>
  <goal name="VC mat_sum_dim_eq.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_dim_eq.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_dim_eq.1.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_dim_eq.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_dim_eq.1.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.42"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_dim_eq.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="131"/></proof>
  </goal>
  <goal name="VC mat_sum_dim_eq.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(cardinal s = 0)">
   <goal name="VC mat_sum_dim_eq.3.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_make_zero">
    <goal name="VC mat_sum_dim_eq.3.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_make_zero">
     <goal name="VC mat_sum_dim_eq.3.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="127"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.28" steps="127"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.0.0.5" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="123"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="123"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="127"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.0.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="127"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.0.4" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.0.5" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_dim_eq.3.1" expl="false case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
    <goal name="VC mat_sum_dim_eq.3.1.0" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
     <goal name="VC mat_sum_dim_eq.3.1.0.0" expl="false case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="127"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="125"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.1.0.3" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="125"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.1.0.4" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.50"/></proof>
     </goal>
     <goal name="VC mat_sum_dim_eq.3.1.0.5" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="127"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.1.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="125"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.1.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.1.4" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="129"/></proof>
    </goal>
    <goal name="VC mat_sum_dim_eq.3.1.5" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC constant_size_map" expl="VC for constant_size_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC constant_size_map.0" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e">
   <goal name="VC constant_size_map.0.0" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e&#39;">
    <goal name="VC constant_size_map.0.0.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC constant_size_map.1" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e">
   <goal name="VC constant_size_map.1.0" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="t,s,e&#39;">
    <goal name="VC constant_size_map.1.0.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC constant_size_map.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_mat_sum" expl="VC for map_mat_sum" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC map_mat_sum.0" expl="VC for map_mat_sum" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC map_mat_sum.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_mat_sum.0.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC map_mat_sum.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.58"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_mat_sum.0.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC map_mat_sum.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.58"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum.0.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="129"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.55"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.3" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.14"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.4" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC map_mat_sum.0.4.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="VC map_mat_sum.0.4.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="135"/></proof>
     </goal>
     <goal name="VC map_mat_sum.0.4.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem ( choose (remove (t @ choose s) (map1 t s))) (map1 t s))">
      <goal name="VC map_mat_sum.0.4.0.1.0" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.72"/></proof>
      </goal>
      <goal name="VC map_mat_sum.0.4.0.1.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.79"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum.0.5" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC map_mat_sum.0.5.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="VC map_mat_sum.0.5.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
     </goal>
     <goal name="VC map_mat_sum.0.5.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem ( choose (remove (t @ choose s) (map1 t s))) (map1 t s))">
      <goal name="VC map_mat_sum.0.5.0.1.0" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.62"/></proof>
      </goal>
      <goal name="VC map_mat_sum.0.5.0.1.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.79"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum.0.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="139"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.7" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.63"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.8" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_mat_sum.0.9.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_mat_sum.0.9.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_mat_sum.0.9.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="3.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_mat_sum.0.9.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_mat_sum.0.9.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_mat_sum.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="3.34"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum.0.10" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC map_mat_sum.0.10.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC map_mat_sum.0.10.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="VC map_mat_sum.0.10.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC map_mat_sum.0.10.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_mat_sum.0.10.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="5.03"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum.0.11" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC map_mat_sum.0.11.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC map_mat_sum.0.11.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="VC map_mat_sum.0.11.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="5.10"/></proof>
      </goal>
      <goal name="VC map_mat_sum.0.11.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_mat_sum.0.11.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="5.09"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum.0.12" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="145"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.13" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.14" expl="variant decrease" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC map_mat_sum.0.14.0" expl="variant decrease" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
    </goal>
    <goal name="VC map_mat_sum.0.14.1" expl="variant decrease" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum.0.15" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.16" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="2.85"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.17" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="3.46"/></proof>
   </goal>
   <goal name="VC map_mat_sum.0.18" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(cardinal s = 1)">
    <goal name="VC map_mat_sum.0.18.0" expl="true case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="( mat_sum s (fun (a1:a) -&gt; f @ (t @ a1)))" arg2="(f (t(choose s)))">
     <goal name="VC map_mat_sum.0.18.0.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="((map1 t s) = to_set (t (choose s)))">
      <goal name="VC map_mat_sum.0.18.0.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="set_equal">
       <goal name="VC map_mat_sum.0.18.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC map_mat_sum.0.18.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="1.99"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_mat_sum.0.18.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC map_mat_sum.0.18.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC map_mat_sum.0.18.0.0.1" expl="true case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_cardone">
       <goal name="VC map_mat_sum.0.18.0.0.1.0" expl="true case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="h">
        <goal name="VC map_mat_sum.0.18.0.0.1.0.0" expl="true case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(element (to_set (t @ choose s)))" arg2="(t (choose s))">
         <goal name="VC map_mat_sum.0.18.0.0.1.0.0.0" expl="true case (postcondition)" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
         </goal>
         <goal name="VC map_mat_sum.0.18.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="2.82"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_mat_sum.0.18.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="131"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC map_mat_sum.0.18.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.76"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_mat_sum.0.18.1" expl="false case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="VC map_mat_sum.0.18.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC map_mat_sum.0.18.1.0.0" expl="false case (postcondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="127"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC map_mat_sum.0.18.1.1" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC map_mat_sum.0.18.1.1.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H4">
       <goal name="VC map_mat_sum.0.18.1.1.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="4"><result status="valid" time="3.23"/></proof>
       </goal>
       <goal name="VC map_mat_sum.0.18.1.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.51"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_mat_sum_rec" expl="VC for map_mat_sum_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC map_mat_sum_rec.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="123"/></proof>
  </goal>
  <goal name="VC map_mat_sum_rec.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC map_mat_sum_rec.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC map_mat_sum_rec.1.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC map_mat_sum_rec.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.50"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_mat_sum_rec.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC map_mat_sum_rec.1.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC map_mat_sum_rec.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC map_mat_sum_rec.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
  </goal>
  <goal name="VC map_mat_sum_rec.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC map_mat_sum_rec.3.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_id" expl="VC for mat_sum_id" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_id.0" expl="VC for mat_sum_id" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_id.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="125"/></proof>
   </goal>
   <goal name="VC mat_sum_id.0.1" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_id.0.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_id.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.11"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_id.0.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_id.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.39"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_id.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="127"/></proof>
   </goal>
   <goal name="VC mat_sum_id.0.3" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC mat_sum_id.0.3.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC mat_sum_id.0.3.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="127"/></proof>
     </goal>
     <goal name="VC mat_sum_id.0.3.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC mat_sum_id.0.3.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_id.0.3.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.01"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_id.0.3.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_id.0.3.0.1.1.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.36"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_id.0.3.0.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_id.0.3.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_id.0.3.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="129"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC nonn_mat_subset" expl="VC for nonn_mat_subset" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC nonn_mat_subset.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="119"/></proof>
  </goal>
  <goal name="VC nonn_mat_subset.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="121"/></proof>
  </goal>
  <goal name="VC nonn_mat_subset.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC nonn_mat_subset.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
   </goal>
   <goal name="VC nonn_mat_subset.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC nonn_mat_subset.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_subset">
   <goal name="VC nonn_mat_subset.3.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="125"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC nonn_mat_subset.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="127"/></proof>
  </goal>
  <goal name="VC nonn_mat_subset.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC nonn_mat_subset.5.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC nonn_mat_subset.5.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.52"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_subset.5.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC nonn_mat_subset.5.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC nonn_mat_subset.6" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem (choose result ) s)">
   <goal name="VC nonn_mat_subset.6.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(forall e . mem e result -&gt; mem e s)">
    <goal name="VC nonn_mat_subset.6.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="131"/></proof>
    </goal>
    <goal name="VC nonn_mat_subset.6.0.1" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC nonn_mat_subset.6.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_subset.6.1" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC nonn_mat_subset.6.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="129"/></proof>
    </goal>
    <goal name="VC nonn_mat_subset.6.1.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC nonn_mat_subset.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="VC nonn_mat_subset.7.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
   </goal>
   <goal name="VC nonn_mat_subset.7.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC nonn_mat_subset.7.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="VC nonn_mat_subset.7.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
     </goal>
     <goal name="VC nonn_mat_subset.7.1.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem (choose result) s)">
      <goal name="VC nonn_mat_subset.7.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.53"/></proof>
      </goal>
      <goal name="VC nonn_mat_subset.7.1.0.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.42"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_subset_elt" expl="VC for mat_subset_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_subset_elt.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_subset_nonn_elt" expl="VC for mat_subset_nonn_elt" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_subset_nonn_elt.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="((fun e1 -&gt;
       not equal (f @ e1) (make (s_rows s f) (s_columns s f) tzero)) e)">
   <goal name="VC mat_subset_nonn_elt.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="VC mat_subset_nonn_elt.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.29"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC nonn_mat_sum_cardzero" expl="VC for nonn_mat_sum_cardzero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC nonn_mat_sum_cardzero.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(is_empty  (nonn_mat_subset f s) )">
   <goal name="VC nonn_mat_sum_cardzero.0.0" expl="asserted formula" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC nonn_mat_sum_cardzero.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_empty">
     <goal name="VC nonn_mat_sum_cardzero.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(mem e (nonn_mat_subset f s))">
       <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
       <transf name="case" proved="true" arg1="(mem e s)">
        <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="127"/></proof>
        </goal>
        <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
        <transf name="assert" proved="true" arg1="(mem e s)">
         <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def" arg2="in" arg3="h2">
          <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="127"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.23" steps="133"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.23" steps="133"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="127"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC nonn_mat_sum_cardzero.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="125"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_cardzero.0.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.21"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="129"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="134"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="134"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="129"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="129"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="131"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="136"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="136"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="131"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="131"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum_cardzero.12" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC nonn_mat_sum_cardone" expl="VC for nonn_mat_sum_cardone" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC nonn_mat_sum_cardone.0" expl="VC for nonn_mat_sum_cardone" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC nonn_mat_sum_cardone.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.42"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.41"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.2" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC nonn_mat_sum_cardone.0.2.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="131"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_cardone.0.2.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.3" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.58"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.4" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(is_empty  (nonn_mat_subset f s) )">
    <goal name="VC nonn_mat_sum_cardone.0.4.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC nonn_mat_sum_cardone.0.4.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="set_empty">
      <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(mem e (nonn_mat_subset f s))">
        <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="case" proved="true" arg1="(mem e s)">
         <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def" arg2="in" arg3="h1">
          <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
          <proof prover="1"><result status="valid" time="0.88"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="2.14"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
         <transf name="assert" proved="true" arg1="(mem e s)">
          <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def" arg2="in" arg3="h2">
           <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
           </goal>
           <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.19" steps="153"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.33" steps="153"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="145"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC nonn_mat_sum_cardone.0.4.0.0.0.0.1" expl="false case (apply premises)" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC nonn_mat_sum_cardone.0.4.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="149"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="149"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.7" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="143"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.9" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def">
    <goal name="VC nonn_mat_sum_cardone.0.9.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="140"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_cardone.0.9.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="1.35"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.10" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.45"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.11" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC nonn_mat_sum_cardone.0.11.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.50"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_cardone.0.11.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.12" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.84"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.13" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_cardone.0.14" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(is_empty s)">
    <goal name="VC nonn_mat_sum_cardone.0.14.0" expl="true case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="145"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_cardone.0.14.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC nonn_mat_sum_cardone.0.14.1.0" expl="false case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="( equal (f @ choose s) (make (s_rows s f) (s_columns s f) tzero) )">
       <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H15">
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
          <proof prover="4"><result status="valid" time="2.24"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="149"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="149"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.16" steps="149"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="154"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.0.5" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.21" steps="154"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="149"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1" expl="false case (postcondition)" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_dim_to_mat_sum">
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="H">
           <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
           <proof prover="4"><result status="valid" time="2.97"/></proof>
           </goal>
           <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="157"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="157"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.17" steps="157"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.17" steps="157"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="162"/></proof>
          </goal>
          <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.0.5" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="162"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="157"/></proof>
         </goal>
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.16" steps="157"/></proof>
         </goal>
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="157"/></proof>
         </goal>
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.4" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.29" steps="162"/></proof>
         </goal>
         <goal name="VC nonn_mat_sum_cardone.0.14.1.0.0.1.0.5" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.32" steps="162"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_null_but_maybe_one_elt" expl="VC for mat_sum_null_but_maybe_one_elt" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_null_but_maybe_one_elt.0" expl="VC for mat_sum_null_but_maybe_one_elt" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_null_but_maybe_one_elt.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="123"/></proof>
   </goal>
   <goal name="VC mat_sum_null_but_maybe_one_elt.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="123"/></proof>
   </goal>
   <goal name="VC mat_sum_null_but_maybe_one_elt.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="129"/></proof>
   </goal>
   <goal name="VC mat_sum_null_but_maybe_one_elt.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="131"/></proof>
   </goal>
   <goal name="VC mat_sum_null_but_maybe_one_elt.0.4" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
    <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e1:a) -&gt; (get (f  e1) i  j)),s,e">
     <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.0" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.30" steps="136"/></proof>
      </goal>
      <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="133"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.2.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="get_null_mat">
         <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.17" steps="140"/></proof>
         </goal>
         <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.0.0.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.55"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="133"/></proof>
    </goal>
    <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
    </goal>
    <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.3.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
     </goal>
     <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.3.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="135"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.4" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.4.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
     </goal>
     <goal name="VC mat_sum_null_but_maybe_one_elt.0.4.4.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="135"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_null_but_maybe_one_elt.0.5" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC nonn_mat_sum_plus_one" expl="VC for nonn_mat_sum_plus_one" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC nonn_mat_sum_plus_one.0" expl="VC for nonn_mat_sum_plus_one" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC nonn_mat_sum_plus_one.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="130"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="129"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.2" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.3" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.43"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="129"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="129"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.6" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.7" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.46"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.8" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.43"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.9" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.45"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="133"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.11" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="135"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.12" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC nonn_mat_sum_plus_one.0.12.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="137"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.12.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.13" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="146"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.14" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="145"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.15" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="145"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.16" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="150"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.17" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="150"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.18" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.19" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.44"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.20" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.21" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="149"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.22" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="149"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.23" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="156"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.24" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="156"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.25" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="149"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.26" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="149"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.27" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="156"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.28" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="156"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.29" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="155"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.30" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="156"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.31" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_sum_dim s f r c )" arg2="(add_mat (f @ choose s) (mat_sum_dim (remove (choose s) s) f r c))">
    <goal name="VC nonn_mat_sum_plus_one.0.31.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H13">
     <goal name="VC nonn_mat_sum_plus_one.0.31.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="zero_add_t">
      <goal name="VC nonn_mat_sum_plus_one.0.31.0.0.0" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="159"/></proof>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.31.0.0.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H21">
       <goal name="VC nonn_mat_sum_plus_one.0.31.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.53"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC nonn_mat_sum_plus_one.0.31.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC nonn_mat_sum_plus_one.0.31.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.31.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.53"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC nonn_mat_sum_plus_one.0.31.0.2" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC nonn_mat_sum_plus_one.0.31.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="165"/></proof>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.31.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.46"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.31.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.44"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.32" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.33" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="161"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.34" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e (remove (choose s) s))">
    <goal name="VC nonn_mat_sum_plus_one.0.34.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.43"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.34.1" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def">
     <goal name="VC nonn_mat_sum_plus_one.0.34.1.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="set_filter">
      <goal name="VC nonn_mat_sum_plus_one.0.34.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC nonn_mat_sum_plus_one.0.34.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.55"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.34.1.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="169"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC nonn_mat_sum_plus_one.0.34.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="169"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.35" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e s)">
    <goal name="VC nonn_mat_sum_plus_one.0.35.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="175"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.35.1" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def">
     <goal name="VC nonn_mat_sum_plus_one.0.35.1.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def" arg2="in" arg3="H">
      <goal name="VC nonn_mat_sum_plus_one.0.35.1.0.0" expl="precondition" proved="true">
      <proof prover="3"><result status="valid" time="0.97"/></proof>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.35.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="169"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC nonn_mat_sum_plus_one.0.35.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="169"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.36" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="146"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.37" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def">
    <goal name="VC nonn_mat_sum_plus_one.0.37.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="set_filter">
     <goal name="VC nonn_mat_sum_plus_one.0.37.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC nonn_mat_sum_plus_one.0.37.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="145"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC nonn_mat_sum_plus_one.0.37.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.58"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.37.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.38" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="147"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.39" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="157"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.40" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="155"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.41" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.53"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.42" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.54"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.43" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="155"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.44" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="155"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.45" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="155"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.46" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="155"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.47" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e s)">
    <goal name="VC nonn_mat_sum_plus_one.0.47.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="166"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.47.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(mem e (nonn_mat_subset f s))">
     <goal name="VC nonn_mat_sum_plus_one.0.47.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mem e s)">
      <goal name="VC nonn_mat_sum_plus_one.0.47.1.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="163"/></proof>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.47.1.0.1" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def">
       <goal name="VC nonn_mat_sum_plus_one.0.47.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="((fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) tzero)) e)">
        <goal name="VC nonn_mat_sum_plus_one.0.47.1.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.80"/></proof>
        </goal>
        <goal name="VC nonn_mat_sum_plus_one.0.47.1.0.1.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC nonn_mat_sum_plus_one.0.47.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.15" steps="163"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC nonn_mat_sum_plus_one.0.47.1.1" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.48" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem e (remove (choose s) s))">
    <goal name="VC nonn_mat_sum_plus_one.0.48.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.28"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.48.1" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def">
     <goal name="VC nonn_mat_sum_plus_one.0.48.1.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="((fun (e1:a) -&gt;
     not equal (f @ e1)
         (make (s_rows (remove (choose s) s) f)
          (s_columns (remove (choose s) s) f) tzero)) e)">
      <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0" expl="asserted formula" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def" arg2="in" arg3="H">
        <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="((fun (e1:a) -&gt;
      not equal (f @ e1) (make (s_rows s f) (s_columns s f) tzero)) e)">
         <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(mem e (filter
    (fun (e1:a) -&gt;
      not equal (f @ e1) (make (s_rows s f) (s_columns s f) tzero))
    s))">
          <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(forall e e&#39;:a. forall s : set2 a. 0&lt; cardinal s -&gt; mem e&#39; s -&gt;  mem e (remove e&#39; s)  -&gt; mem e s)">
           <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.25" steps="174"/></proof>
           </goal>
           <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <transf name="instantiate" proved="true" arg1="h1" arg2="e,(choose s),(filter
   (fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) tzero))
   s)">
            <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem (choose s) (filter
   (fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) tzero))
   s))">
              <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
              <proof prover="6"><result status="valid" time="0.23" steps="169"/></proof>
              </goal>
              <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(forall e :a. forall s : set2 a. mem e s -&gt; 0&lt; cardinal s)">
               <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
                <proof prover="6"><result status="valid" time="0.24" steps="173"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
               <transf name="instantiate" proved="true" arg1="h" arg2="(choose s),(filter
   (fun (e1:a) -&gt;
     not equal (f @ e1) (make (s_rows s f) (s_columns s f) tzero))
   s)">
                <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="Hinst">
                 <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="h1">
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.21" steps="169"/></proof>
             </goal>
             <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="H">
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.49"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.51"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="163"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.48.1.0.1" expl="precondition" proved="true">
      <proof prover="3"><result status="valid" time="0.29"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC nonn_mat_sum_plus_one.0.48.1.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="163"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC nonn_mat_sum_plus_one.0.49" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC nonn_mat_sum_plus_one.0.49.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="167"/></proof>
    </goal>
    <goal name="VC nonn_mat_sum_plus_one.0.49.1" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC nonn_mat_sum_plus_one.0.49.1.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add (choose s) (remove (choose s) s))" arg2="s" arg3="in" arg4="H43">
      <goal name="VC nonn_mat_sum_plus_one.0.49.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H43">
       <goal name="VC nonn_mat_sum_plus_one.0.49.1.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H49">
        <goal name="VC nonn_mat_sum_plus_one.0.49.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(nonn_mat_subset f s)" arg2="(add (choose s) (nonn_mat_subset f (remove (choose s) s)))">
         <goal name="VC nonn_mat_sum_plus_one.0.49.1.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="161"/></proof>
         </goal>
         <goal name="VC nonn_mat_sum_plus_one.0.49.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="167"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC nonn_mat_sum_plus_one.0.49.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="167"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC nonn_mat_sum" expl="VC for nonn_mat_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC nonn_mat_sum.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="123"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="123"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="123"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="125"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="125"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="125"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="127"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="129"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC nonn_mat_sum.8.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="130"/></proof>
   </goal>
   <goal name="VC nonn_mat_sum.8.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC nonn_mat_sum.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="127"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="127"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="132"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="132"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="132"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="131"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="136"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="136"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="131"/></proof>
  </goal>
  <goal name="VC nonn_mat_sum.19" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_map_map" expl="VC for mat_sum_map_map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_map_map.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="131"/></proof>
  </goal>
  <goal name="VC mat_sum_map_map.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_map_map.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_map_map.1.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_map_map.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.45"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_map_map.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_map_map.1.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_map_map.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.46"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_map_map.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_map_map.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="133"/></proof>
  </goal>
  <goal name="VC mat_sum_map_map.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_map_map.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_map_map.4.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_map_map.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_map_map.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_map_map.4.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_map_map.4.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_map_map.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
  </goal>
  <goal name="VC mat_sum_map_map.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_disjoint_transitivity" expl="VC for mat_sum_disjoint_transitivity" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_disjoint_transitivity.0" expl="VC for mat_sum_disjoint_transitivity" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_disjoint_transitivity.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="127"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.54"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.5" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="4.50"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.6" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="139"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.7" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.9" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="141"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.11" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.12" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="145"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.13" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.45"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.14" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="149"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.15" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="149"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.16" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.17" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.18" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.19" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="158"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.20" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="163"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.21" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="164"/></proof>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.22" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H3">
    <goal name="VC mat_sum_disjoint_transitivity.0.22.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H20">
     <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H21">
      <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H22">
       <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make">
          <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="instantiate" proved="true" arg1="sum_disjoint_transitivity" arg2="s1,s2,(fun (e:a) -&gt; get (f @ e) i j)">
            <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
            <transf name="destruct" proved="true" arg1="Hinst">
             <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="167"/></proof>
             </goal>
             <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0.0.0.1" expl="precondition" proved="true">
             <transf name="replace" proved="true" arg1="s" arg2="(union s1 s2)">
              <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0.0.0.1.0" expl="precondition" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0.0.0.1.0.0" expl="precondition" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="6"><result status="valid" time="0.24" steps="169"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.31" steps="169"/></proof>
           </goal>
           <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.26" steps="169"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="169"/></proof>
           </goal>
           <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="169"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.32" steps="169"/></proof>
          </goal>
          <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.22" steps="169"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.20" steps="169"/></proof>
          </goal>
          <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.21" steps="169"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.34" steps="169"/></proof>
         </goal>
         <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.31" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.23" steps="169"/></proof>
         </goal>
         <goal name="VC mat_sum_disjoint_transitivity.0.22.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="169"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_disjoint_transitivity.0.23" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_null" expl="VC for mat_sum_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_null.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="121"/></proof>
  </goal>
  <goal name="VC mat_sum_null.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="121"/></proof>
  </goal>
  <goal name="VC mat_sum_null.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_to_sum">
   <goal name="VC mat_sum_null.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC mat_sum_null.2.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC mat_sum_null.2.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="sum_null_forall">
      <goal name="VC mat_sum_null.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_null.2.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_null.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H3">
         <goal name="VC mat_sum_null.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.13" steps="127"/></proof>
         </goal>
         <goal name="VC mat_sum_null.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.13" steps="127"/></proof>
         </goal>
         <goal name="VC mat_sum_null.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_null.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
    <goal name="VC mat_sum_null.2.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.56"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_null.2.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="125"/></proof>
   </goal>
   <goal name="VC mat_sum_null.2.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="125"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sum_null_b" expl="VC for mat_sum_null_b" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sum_null_b.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="119"/></proof>
  </goal>
  <goal name="VC mat_sum_null_b.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC mat_sum_null_b.1.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_null_b.1.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.46"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_null_b.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sum_null_b.1.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sum_null_b.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC mat_sum_null_b.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_sum_null">
   <goal name="VC mat_sum_null_b.3.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="127"/></proof>
   </goal>
   <goal name="VC mat_sum_null_b.3.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_null_b.3.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
    <goal name="VC mat_sum_null_b.3.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.44"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_null_b.3.2" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.44"/></proof>
   </goal>
   <goal name="VC mat_sum_null_b.3.3" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_valid_index">
    <goal name="VC mat_sum_null_b.3.3.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_null_b.3.3.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="127"/></proof>
     </goal>
     <goal name="VC mat_sum_null_b.3.3.0.1" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="rows_mat_sum" arg2="s,f,r">
      <goal name="VC mat_sum_null_b.3.3.0.1.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="1.82"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_null_b.3.3.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_null_b.3.3.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="127"/></proof>
     </goal>
     <goal name="VC mat_sum_null_b.3.3.1.1" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="columns_mat_sum" arg2="s,f,r">
      <goal name="VC mat_sum_null_b.3.3.1.1.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="1.61"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_add_mat_sum_t" expl="VC for map_add_mat_sum_t" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC map_add_mat_sum_t.0" expl="VC for map_add_mat_sum_t" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC map_add_mat_sum_t.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.54"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="1.50"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.52"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.5" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="4.47"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.6" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injo @ e)) s&#39;)">
    <goal name="VC map_add_mat_sum_t.0.6.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(mem ((injo @ e)) (map1 injo s))">
     <goal name="VC map_add_mat_sum_t.0.6.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="145"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum_t.0.6.0.1" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.6.1" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.7" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injz @ e)) s&#39;)">
    <goal name="VC map_add_mat_sum_t.0.7.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(mem ((injz @ e)) (map1 injz s))">
     <goal name="VC map_add_mat_sum_t.0.7.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="145"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum_t.0.7.0.1" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.7.1" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.8" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injo @ e)) s&#39;)">
    <goal name="VC map_add_mat_sum_t.0.8.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(mem ((injo @ e)) (map1 injo s))">
     <goal name="VC map_add_mat_sum_t.0.8.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="145"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum_t.0.8.0.1" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.8.1" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.9" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem ((injz @ e)) s&#39;)">
    <goal name="VC map_add_mat_sum_t.0.9.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(mem ((injz @ e)) (map1 injz s))">
     <goal name="VC map_add_mat_sum_t.0.9.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.29" steps="145"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum_t.0.9.0.1" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.9.1" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.11" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.12" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="145"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.13" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum_t.0.13.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.13.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.13.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f @ (injz @ e)))" arg2="(s_rows  s&#39; f)">
       <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injz @ e&#39;)) s&#39;)">
        <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(mem  ( (injz @ e))  (map1 injz s))">
         <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.18" steps="150"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="s&#39;" arg2="(union (map1 injz s) (map1 injo s) )">
          <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_mem_union">
           <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.15" steps="150"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.13.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_add_mat_sum_t.0.13.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injz @ e))  (map1 injz s))">
        <goal name="VC map_add_mat_sum_t.0.13.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.31" steps="150"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.13.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="s&#39;" arg2="(union (map1 injz s) (map1 injo s) )">
         <goal name="VC map_add_mat_sum_t.0.13.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.13.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.13.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.13.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.13.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(columns (f @ (injz @ e)))" arg2="(s_columns  s&#39; f)">
       <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injz @ e&#39;)) s&#39;)">
        <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(mem  ( (injz @ e))  (map1 injz s))">
         <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="150"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="s&#39;" arg2="(union (map1 injz s) (map1 injo s) )">
          <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_mem_union">
           <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.20" steps="152"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.13.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_add_mat_sum_t.0.13.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injz @ e))  (map1 injz s))">
        <goal name="VC map_add_mat_sum_t.0.13.1.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="150"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.13.1.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="s&#39;" arg2="(union (map1 injz s) (map1 injo s) )">
         <goal name="VC map_add_mat_sum_t.0.13.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.23" steps="152"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.13.1.0.0.1.1.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.17" steps="150"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.14" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum_t.0.14.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.14.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.14.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f @ (injo @ e)))" arg2="(s_rows  s&#39; f)">
       <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injo @ e&#39;)) s&#39;)">
        <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(mem  ( (injo @ e))  (map1 injo s))">
         <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="152"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="s&#39;" arg2="(union (map1 injz s) (map1 injo s) )">
          <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_mem_union&#39;">
           <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.21" steps="154"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.16" steps="152"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.14.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="154"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_add_mat_sum_t.0.14.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injo @ e))  (map1 injo s))">
        <goal name="VC map_add_mat_sum_t.0.14.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.14.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="154"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.14.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.14.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.14.1.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(columns (f @ (injo @ e)))" arg2="(s_columns  s&#39; f)">
       <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injo @ e&#39;)) s&#39;)">
        <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(mem  ( (injo @ e))  (map1 injo s))">
         <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="152"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="s&#39;" arg2="(union (map1 injz s) (map1 injo s) )">
          <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_mem_union&#39;">
           <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.21" steps="154"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="152"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.14.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.19" steps="154"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_add_mat_sum_t.0.14.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="assert" proved="true" arg1="(mem  ( (injo @ e))  (map1 injo s))">
        <goal name="VC map_add_mat_sum_t.0.14.1.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.32" steps="152"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.14.1.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.31" steps="154"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.15" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC map_add_mat_sum_t.0.15.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H1">
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.15.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC map_add_mat_sum_t.0.15.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="VC map_add_mat_sum_t.0.15.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC map_add_mat_sum_t.0.15.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum_t.0.15.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.62"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.16" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC map_add_mat_sum_t.0.16.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H2">
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.16.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC map_add_mat_sum_t.0.16.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_s_columns">
      <goal name="VC map_add_mat_sum_t.0.16.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H1">
      </transf>
      </goal>
      <goal name="VC map_add_mat_sum_t.0.16.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum_t.0.16.1.0.1.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC map_add_mat_sum_t.0.16.1.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H10">
         <goal name="VC map_add_mat_sum_t.0.16.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC map_add_mat_sum_t.0.16.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H9">
           <goal name="VC map_add_mat_sum_t.0.16.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.15" steps="150"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum_t.0.16.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.70"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.16.1.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.66"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.17" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="152"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.18" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="146"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.19" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum_t.0.19.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.19.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.19.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(rows (f @ (injo @ choose s)))" arg2="(s_rows (map1 injo s) f)">
       <goal name="VC map_add_mat_sum_t.0.19.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.47"/></proof>
       </goal>
       <goal name="VC map_add_mat_sum_t.0.19.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="0.70"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.19.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.19.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.19.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.55"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.20" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="148"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.21" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="148"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.22" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum_t.0.22.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.22.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.22.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.47"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.22.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum_t.0.22.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(rows ((fun (a1:a) -&gt; f @ (injz @ a1)) @ e))" arg2="(s_rows s&#39; f)">
      <goal name="VC map_add_mat_sum_t.0.22.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum_t.0.22.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.53"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC map_add_mat_sum_t.0.22.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum_t.0.22.1.0.1.0" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="154"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.23" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="150"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.24" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="150"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.25" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.26" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="150"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.27" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="152"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.28" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="154"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum_t.0.29" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="( mat_sum s (fun (e:a) -&gt; add_mat (f @ (injz @ e)) (f @ (injo @ e))))" arg2="(mat_sum s
  (fun (k:a) -&gt;
    add_mat ((fun (e:a) -&gt; f @ (injz @ e)) @ k)
    ((fun (e:a) -&gt; f @ (injo @ e)) @ k)))">
    <goal name="VC map_add_mat_sum_t.0.29.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC map_add_mat_sum_t.0.29.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(mat_sum s&#39; f)" arg2="(add_mat (mat_sum (map1 injz s) f) (mat_sum (map1 injo s) f) )">
      <goal name="VC map_add_mat_sum_t.0.29.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(mat_sum s (fun (e:a) -&gt; f @ (injz @ e)))" arg2="(mat_sum (map1 injz s) f)">
       <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(mat_sum s (fun (e:a) -&gt; f @ (injo @ e)))" arg2="(mat_sum (map1 injo s) f)">
        <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="152"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="H2">
         <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="mat_sum_eq">
          <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.22" steps="152"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.64"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.49"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC map_add_mat_sum_t.0.29.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.47"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_eq">
         <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.13" steps="152"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.46"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.47"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC map_add_mat_sum_t.0.29.0.0.0.1.0.2.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.44"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC map_add_mat_sum_t.0.29.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="152"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum_t.0.29.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC map_add_mat_sum_t.0.29.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="152"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum_t.0.29.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC map_add_mat_sum_t.0.29.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_rows">
         <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_rows">
          <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.48"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.45"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.44"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.43"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.29.1.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.51"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC map_add_mat_sum_t.0.29.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_columns">
         <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="add_columns">
          <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.48"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.45"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.46"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.45"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum_t.0.29.1.1.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.45"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC map_add_mat_sum_t.0.29.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC map_add_mat_sum_t.0.29.1.2.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC map_add_mat_sum" expl="VC for map_add_mat_sum" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC map_add_mat_sum.0" expl="VC for map_add_mat_sum" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC map_add_mat_sum.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.45"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC map_add_mat_sum.0.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC map_add_mat_sum.0.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC map_add_mat_sum.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_rows">
        <goal name="VC map_add_mat_sum.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_rows">
         <goal name="VC map_add_mat_sum.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.43"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.54"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.53"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.42"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.41"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC map_add_mat_sum.0.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC map_add_mat_sum.0.1.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum.0.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_columns">
        <goal name="VC map_add_mat_sum.0.1.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_columns">
         <goal name="VC map_add_mat_sum.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.57"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.49"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.45"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.42"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.48"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.1.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC map_add_mat_sum.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.58"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.2" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC map_add_mat_sum.0.2.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC map_add_mat_sum.0.2.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC map_add_mat_sum.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_rows">
        <goal name="VC map_add_mat_sum.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_rows">
         <goal name="VC map_add_mat_sum.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.41"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.57"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.41"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.42"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.56"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC map_add_mat_sum.0.2.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC map_add_mat_sum.0.2.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum.0.2.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="add_columns">
        <goal name="VC map_add_mat_sum.0.2.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="add_columns">
         <goal name="VC map_add_mat_sum.0.2.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.45"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.2.0.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.51"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.2.0.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.48"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum.0.2.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.55"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum.0.2.0.1.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.57"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.2.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC map_add_mat_sum.0.2.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.56"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="153"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="153"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.6" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(cardinal (map1 f s) &gt; 0)">
    <goal name="VC map_add_mat_sum.0.6.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="155"/></proof>
    </goal>
    <goal name="VC map_add_mat_sum.0.6.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.34" steps="157"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.7" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(cardinal (map1 g s) &gt; 0)">
    <goal name="VC map_add_mat_sum.0.7.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.37" steps="157"/></proof>
    </goal>
    <goal name="VC map_add_mat_sum.0.7.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.36" steps="159"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="155"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.9" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum.0.9.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.9.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.28"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.9.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.9.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.9.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.65"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="157"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.11" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="157"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.12" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum.0.12.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.12.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.23"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.12.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.12.1.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.43"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.13" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="159"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.14" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(cardinal s1 &gt; 0)">
    <goal name="VC map_add_mat_sum.0.14.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(cardinal (map1 f s) &gt; 0)">
     <goal name="VC map_add_mat_sum.0.14.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.34" steps="161"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum.0.14.0.1" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mem (f (choose s)) (map1 h2 s1))">
      <goal name="VC map_add_mat_sum.0.14.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.80"/></proof>
      </goal>
      <goal name="VC map_add_mat_sum.0.14.0.1.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.34" steps="165"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.14.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(mem (choose s1) s&#39;)">
     <goal name="VC map_add_mat_sum.0.14.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum.0.14.1.1" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="165"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.15" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum.0.15.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.15.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.15.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.61"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.15.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.15.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.15.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.16" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="163"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.17" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(cardinal (map1 f s) &gt; 0)">
    <goal name="VC map_add_mat_sum.0.17.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.35" steps="163"/></proof>
    </goal>
    <goal name="VC map_add_mat_sum.0.17.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(mem (f (choose s)) (map1 h1 s1))">
     <goal name="VC map_add_mat_sum.0.17.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.64"/></proof>
     </goal>
     <goal name="VC map_add_mat_sum.0.17.1.1" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="167"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.18" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum.0.18.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.18.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.18.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC map_add_mat_sum.0.18.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="p_id_def">
        <goal name="VC map_add_mat_sum.0.18.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="p_id_def">
         <goal name="VC map_add_mat_sum.0.18.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(mem e s&#39;)">
          <goal name="VC map_add_mat_sum.0.18.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.34" steps="174"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum.0.18.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem e&#39; s&#39;)">
           <goal name="VC map_add_mat_sum.0.18.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="176"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.18.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="1.74" steps="178"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.18.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.18.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.18.1.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC map_add_mat_sum.0.18.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="p_id_def">
        <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="p_id_def">
         <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(mem e&#39; s&#39;)">
          <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem e s&#39;)">
           <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.31" steps="174"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.27" steps="176"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem e s&#39;)">
           <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.29" steps="176"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.18.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="2.00" steps="178"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.19" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_injective">
    <goal name="VC map_add_mat_sum.0.19.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.19.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem e s&#39;)">
      <goal name="VC map_add_mat_sum.0.19.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.32" steps="173"/></proof>
      </goal>
      <goal name="VC map_add_mat_sum.0.19.0.0.1" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC map_add_mat_sum.0.19.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="p_injective_def" arg2="in" arg3="H16">
        <goal name="VC map_add_mat_sum.0.19.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H16">
         <goal name="VC map_add_mat_sum.0.19.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="176"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.19.0.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.23" steps="178"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.19.0.0.1.0.0.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="176"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.20" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(cardinal (map1 g s) &gt; 0)">
    <goal name="VC map_add_mat_sum.0.20.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
    </goal>
    <goal name="VC map_add_mat_sum.0.20.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="167"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.21" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC map_add_mat_sum.0.21.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.21.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.21.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC map_add_mat_sum.0.21.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="p_id_def">
        <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="p_id_def">
         <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(mem e&#39; s&#39;)">
          <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem e s&#39;)">
           <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.28" steps="176"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.30" steps="178"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem e s&#39;)">
           <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.28" steps="178"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.21.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="1.72" steps="180"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.21.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.21.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC map_add_mat_sum.0.21.1.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC map_add_mat_sum.0.21.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="p_id_def">
        <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="p_id_def">
         <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(mem e&#39; s&#39;)">
          <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem e s&#39;)">
           <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="176"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.23" steps="178"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem e s&#39;)">
           <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.23" steps="178"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.21.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="1.67" steps="180"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.22" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_injective">
    <goal name="VC map_add_mat_sum.0.22.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC map_add_mat_sum.0.22.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem e s&#39;)">
      <goal name="VC map_add_mat_sum.0.22.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.25" steps="175"/></proof>
      </goal>
      <goal name="VC map_add_mat_sum.0.22.0.0.1" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC map_add_mat_sum.0.22.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="p_injective_def" arg2="in" arg3="H17">
        <goal name="VC map_add_mat_sum.0.22.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H17">
         <goal name="VC map_add_mat_sum.0.22.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="178"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.22.0.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.23" steps="180"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.22.0.0.1.0.0.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="178"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.23" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="165"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.24" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="165"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.25" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="165"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.26" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="165"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.27" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="165"/></proof>
   </goal>
   <goal name="VC map_add_mat_sum.0.28" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC map_add_mat_sum.0.28.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC map_add_mat_sum.0.28.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H4">
      <goal name="VC map_add_mat_sum.0.28.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC map_add_mat_sum.0.28.0.0.0.0" expl="assertion" proved="true">
       <transf name="apply" proved="true" arg1="add_mat_eq">
        <goal name="VC map_add_mat_sum.0.28.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.64"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum.0.28.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.48"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum.0.28.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_eq">
         <goal name="VC map_add_mat_sum.0.28.0.0.0.0.2.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="167"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.28.0.0.0.0.2.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="167"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.28.0.0.0.0.2.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.40"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC map_add_mat_sum.0.28.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_eq">
         <goal name="VC map_add_mat_sum.0.28.0.0.0.0.3.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="167"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.28.0.0.0.0.3.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="167"/></proof>
         </goal>
         <goal name="VC map_add_mat_sum.0.28.0.0.0.0.3.2" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.38"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.28.1" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC map_add_mat_sum.0.28.1.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H4">
      <goal name="VC map_add_mat_sum.0.28.1.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC map_add_mat_sum.0.28.1.0.0.0" expl="assertion" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0" expl="assertion" proved="true">
        <transf name="apply" proved="true" arg1="add_mat_eq">
         <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="rows_mat_sum">
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.15" steps="167"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.96"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.62"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="rows_mat_sum">
             <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.22" steps="169"/></proof>
             </goal>
             <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.06"/></proof>
              </goal>
              <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.49"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.08"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="columns_mat_sum">
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="167"/></proof>
          </goal>
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.03"/></proof>
           </goal>
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.49"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="columns_mat_sum">
             <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.14" steps="169"/></proof>
             </goal>
             <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="set_constant_size">
              <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.03"/></proof>
              </goal>
              <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.52"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0.0.2" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.1.2.0.0.2.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.53"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(mat_sum s (fun (a1:a) -&gt; (fun (y0:matrix complex) -&gt; p_id y0) @ (f @ a1)))" arg2="(mat_sum (map1 f s) (fun (y0:matrix complex) -&gt; p_id y0))
">
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H13">
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H2">
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="H5">
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.2.1.0" expl="equality hypothesis" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.3" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(mat_sum s (fun (a1:a) -&gt; (fun (y0:matrix complex) -&gt; p_id y0) @ (g @ a1)))" arg2="(mat_sum (map1 g s) (fun (y0:matrix complex) -&gt; p_id y0))
">
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.3.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H12">
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H1">
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="H4">
           <goal name="VC map_add_mat_sum.0.28.1.0.0.0.0.3.1.0" expl="equality hypothesis" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC map_add_mat_sum.0.28.2" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC map_add_mat_sum.0.28.2.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC map_add_mat_sum.0.28.2.0.0" expl="assertion" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC map_add_mat_sum.0.28.2.0.0.0" expl="assertion" proved="true">
       <transf name="replace" proved="true" arg1="(fun (a1:a) -&gt; p_id (h @ a1))" arg2="h">
        <goal name="VC map_add_mat_sum.0.28.2.0.0.0.0" expl="assertion" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="167"/></proof>
        </goal>
        <goal name="VC map_add_mat_sum.0.28.2.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="167"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC map_add_mat_sum.0.29" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC map_add_mat_sum.0.29.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC map_add_mat_sum.0.29.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC map_add_mat_sum.0.29.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Mat_sums_comp" proved="true">
 <goal name="VC mat_sum_sum_cartesian_product_pre" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC mat_sum_sum_cartesian_product_pre.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.50"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="127"/></proof>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.3" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.3.0" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.49"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.4" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.4.0" expl="precondition" proved="true">
    <proof prover="4"><result status="valid" time="0.60"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.5" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(rows (mat_sum s2 (f @ e)))" arg2="r">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0" expl="precondition" proved="true">
       <transf name="replace" proved="true" arg1="(rows (mat_sum s2 (f @ e&#39;)))" arg2="r">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.0" expl="precondition" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="133"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.24" steps="133"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.46"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.52"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.0.1.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="rows_mat_sum">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.69"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.1.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.71"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.1" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.2" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.5.0.0.3" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.6" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="( columns (mat_sum s2 (f @ e)))" arg2="c">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0" expl="precondition" proved="true">
       <transf name="replace" proved="true" arg1="( columns (mat_sum s2 (f @ e&#39;)))" arg2="c">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.0" expl="precondition" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.55"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.50"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.0.1.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="columns_mat_sum">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.56"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1.1.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.58"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.1" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="133"/></proof>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.2" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.6.0.0.3" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.7" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.7.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.7.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.7.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.65"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.7.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.7.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.7.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.62"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="133"/></proof>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.9" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(rows
  (mat_sum s1
   (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c tzero)))" arg2="r">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(rows
    (mat_sum (cartesian_product s1 s2)
     (fun (o:(a, b)) -&gt; (f @ fir o) @ sec o)))" arg2="r">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="rows_mat_sum">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.50"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.59"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.19" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_s_rows">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H4">
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="rows_mat_sum">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="2.39"/></proof>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.20" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.9.1.0.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.10" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.48"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.10" steps="141"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.47"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="141"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.10.1.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.11" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="139"/></proof>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.12" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="columns_mat_sum">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.45"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.47"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.13" steps="143"/></proof>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.63"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.51"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.12.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.13" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.13.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.13.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.57"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.13.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.13.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.50"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.14" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.14.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.14.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.14.0.0.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="columns_mat_sum">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.14.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="147"/></proof>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.14.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="3.24"/></proof>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.14.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.31" steps="151"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.14.0.0.1" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.15" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.15.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.15.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.15.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.15.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.16" expl="precondition" proved="true">
   <transf name="compute_hyp" proved="true" >
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.16.0" expl="precondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.16.0.0" expl="VC for mat_sum_sum_cartesian_product_pre" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.16.0.0.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="rows_mat_sum">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.16.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="149"/></proof>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.16.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="2.71"/></proof>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.16.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="153"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.16.0.0.1" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="151"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.17" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.17.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.17.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.51"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.17.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.17.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.45"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.18" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.19" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="rows_mat_sum">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="151"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.47"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.47"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="rows_mat_sum">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.10" steps="153"/></proof>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.53"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.56"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.39" steps="157"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.19.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="153"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.20" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(columns
  (mat_sum s1
   (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c tzero)))" arg2="c">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(columns
    (mat_sum (cartesian_product s1 s2)
     (fun (o:(a, b)) -&gt; (f @ fir o) @ sec o)))" arg2="c">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="153"/></proof>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="columns_mat_sum">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="153"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.55"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.1.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.1.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.54"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.34" steps="157"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="columns_mat_sum">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="153"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.49"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.1.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.48"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="columns_mat_sum">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.15" steps="155"/></proof>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="instantiate" proved="true" arg1="set_constant_size_give" arg2="s2,(f e),r,c">
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst4">
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.18" steps="155"/></proof>
             </goal>
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.29" steps="163"/></proof>
             </goal>
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.26" steps="163"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="159"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.20.1.2.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="155"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.21" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.21.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.21.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.21.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.50"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.21.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.21.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.21.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.51"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.22" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="153"/></proof>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.23" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.23.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.23.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.23.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.23.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.24" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="157"/></proof>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.25" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="rows_mat_sum">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.26" steps="159"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.52"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.53"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="rows_mat_sum">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="161"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.58"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.55"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="goal_comm">
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="rows_mat_sum">
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.15" steps="163"/></proof>
              </goal>
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="set_constant_size">
               <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.60"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.60"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.96"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.25.2.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.24" steps="163"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.26" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="columns_mat_sum">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="161"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.53"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.51"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="columns_mat_sum">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="163"/></proof>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.59"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.68"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="165"/></proof>
            </goal>
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="0.67"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.1.1.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="0.53"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.2.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.0.2.0.0.2.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.65"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.26.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="163"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(0&lt;= i &lt; r)">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.0" expl="asserted formula" proved="true">
    <transf name="instantiate" proved="true" arg1="H15" arg2="i,j">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;= j &lt; c)">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="H14" arg2="i,j">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.0.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0" expl="precondition" proved="true">
       <transf name="instantiate" proved="true" arg1="sum_from_cartesian_product" arg2="s1,s2,(fun a b -&gt; get (f a b) i j)">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0" expl="precondition" proved="true">
        <transf name="replace" proved="true" arg1="(sum (cartesian_product s1 s2)
    (fun (e:(a, b)) -&gt; get ((fun (o:(a, b)) -&gt; (f @ fir o) @ sec o) @ e) i j))" arg2="(sum (cartesian_product s1 s2)
  (fun (o:(a, b)) -&gt;
    ((fun (a1:a) (b1:b) -&gt; get ((f @ a1) @ b1) i j) @ fir o) @ sec o))">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0" expl="precondition" proved="true">
           <transf name="apply" proved="true" arg1="sum_eq">
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="eliminate_if" proved="true" >
               <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
                 <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(s_columns s2 (f @ x))" arg2="c">
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="set_constant_size">
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="0.67"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="0.61"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="set_s_columns">
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_constant_size">
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="0.63"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="0.64"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="0.65"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(s_rows s2 (f @ x))" arg2="r">
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.14" steps="177"/></proof>
                  </goal>
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="set_s_rows">
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_constant_size">
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="0.60"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.0.1.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="0.71"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="0.74"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.14" steps="177"/></proof>
                  </goal>
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(s_rows s2 (f @ x) )" arg2="r">
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.0" expl="rewrite premises" proved="true">
                   <proof prover="6"><result status="valid" time="0.13" steps="177"/></proof>
                   </goal>
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
                   <transf name="apply" proved="true" arg1="set_s_rows">
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="set_constant_size">
                     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.0.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="0.73"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.1" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.0.1.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="0.56"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.3.1.1.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="0.59"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(s_columns s2 (f @ x) )" arg2="c">
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="0.13" steps="177"/></proof>
                  </goal>
                  <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="set_s_columns">
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0" expl="apply premises" proved="true">
                   <transf name="instantiate" proved="true" arg1="set_constant_size_give" arg2="s2,(f x),r,c">
                    <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="Hinst4">
                      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.14" steps="177"/></proof>
                      </goal>
                      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.36" steps="185"/></proof>
                      </goal>
                      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.0.0.0.2" expl="apply premises" proved="true">
                      <proof prover="6"><result status="valid" time="0.45" steps="185"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.0.4.1.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="0.57"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.13" steps="177"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="sum_eq">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.51"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.67"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="173"/></proof>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt; (f @ fir o) @ sec o))" arg2="r">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.0" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="173"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.71"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.0.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.57"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.3.1.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.61"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_columns (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt; (f @ fir o) @ sec o))" arg2="c">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.0" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="173"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.56"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.0.1.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.66"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.0.4.1.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.76"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.52"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.57"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.18" steps="173"/></proof>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(s_rows (cartesian_product s1 s2)
    (fun (o:(a, b)) -&gt; (f @ fir o) @ sec o))" arg2="r">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows s1
    (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c tzero))" arg2="r">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.19" steps="173"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.55"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.0.1.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.55"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="rows_mat_sum">
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.15" steps="175"/></proof>
             </goal>
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.1" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="set_constant_size_give" arg2="s2,(f (choose s1)),r,c">
              <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="Hinst4">
                <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.15" steps="175"/></proof>
                </goal>
                <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.42" steps="183"/></proof>
                </goal>
                <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.41" steps="183"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.49" steps="179"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.0.1.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.35" steps="177"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.67"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.60"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.3.1.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.61"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(s_columns s1
    (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c tzero))" arg2="c">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="173"/></proof>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns">
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.53"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.52"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="columns_mat_sum">
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.15" steps="175"/></proof>
            </goal>
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="4.97"/></proof>
            </goal>
            <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.40" steps="179"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sum_sum_cartesian_product_pre.0.27.1.1.4.1.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.35" steps="177"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.28" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="161"/></proof>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.69"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.50"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.16" steps="163"/></proof>
        </goal>
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.28.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.17" steps="163"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sum_sum_cartesian_product_pre.0.29" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="( mat_sum s1 (fun (a1:a) -&gt; mat_sum s2 (f @ a1)))" arg2="(mat_sum s1
  (fun (a1:a) -&gt; if mem a1 s1 then mat_sum s2 (f @ a1) else make r c tzero))">
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H1">
    </transf>
    </goal>
    <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_eq">
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.17" steps="163"/></proof>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.52"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.57"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sum_sum_cartesian_product_pre.0.29.1.0.2.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.55"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Matrix_decomp" proved="true">
 <goal name="VC ind_basis_mat" expl="VC for ind_basis_mat" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC ind_basis_mat.0" expl="VC for ind_basis_mat" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ind_basis_mat.0.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem o (mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))))">
    <goal name="VC ind_basis_mat.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.49"/></proof>
    </goal>
    <goal name="VC ind_basis_mat.0.0.1" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_basis_mat.0.1" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ind_basis_mat.0.1.0" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir x)
      (sec x))
     tone) o)">
     <goal name="VC ind_basis_mat.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ind_basis_mat.0.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="VC ind_basis_mat.0.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ind_basis_mat.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir x)
      (sec x))
     tone)o)">
         <goal name="VC ind_basis_mat.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))),(fun (x:(int, int)) -&gt;
     eq_t
     (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir x)
      (sec x))
     tone),o">
          <goal name="VC ind_basis_mat.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="Hinst">
           <goal name="VC ind_basis_mat.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H">
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_basis_mat.0.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h1">
          <goal name="VC ind_basis_mat.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.45"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_basis_mat.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem o (mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))))">
        <goal name="VC ind_basis_mat.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.66"/></proof>
        </goal>
        <goal name="VC ind_basis_mat.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC ind_basis_mat.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_indices_def" arg2="in" arg3="h">
          <goal name="VC ind_basis_mat.0.1.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem (fir o) (to_fset 0 (rows (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)))))">
           <goal name="VC ind_basis_mat.0.1.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="2.12" steps="136"/></proof>
           </goal>
           <goal name="VC ind_basis_mat.0.1.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="1.83" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_basis_mat.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(mem o (mat_indices (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j))))">
        <goal name="VC ind_basis_mat.0.1.0.0.0.2.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.51"/></proof>
        </goal>
        <goal name="VC ind_basis_mat.0.1.0.0.0.2.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ind_basis_mat.0.1.0.0.0.2.1.0" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
         </goal>
         <goal name="VC ind_basis_mat.0.1.0.0.0.2.1.1" proved="true">
         <proof prover="0"><result status="valid" time="0.41"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_basis_mat.0.1.0.1" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(indic_2 (fir o) i (sec o) j = tone)">
      <goal name="VC ind_basis_mat.0.1.0.1.0" expl="asserted formula" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h1">
       <goal name="VC ind_basis_mat.0.1.0.1.0.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.42"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ind_basis_mat.0.1.0.1.1" expl="assertion" proved="true">
      <proof prover="4"><result status="valid" time="0.44"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_basis_mat.0.1.1" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="VC ind_basis_mat.0.1.1.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ind_basis_mat.0.1.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="mat_indices_spec2">
       <goal name="VC ind_basis_mat.0.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ind_basis_mat.0.1.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
        <goal name="VC ind_basis_mat.0.1.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.66"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ind_basis_mat.0.1.1.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ind_basis_mat.0.1.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.41"/></proof>
        </goal>
        <goal name="VC ind_basis_mat.0.1.1.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.61"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ind_basis_mat.0.1.1.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC ind_basis_mat.0.1.1.1.0" expl="apply premises" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC ind_basis_mat.0.1.1.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="eq_t_def">
        <goal name="VC ind_basis_mat.0.1.1.1.0.0.0" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="VC ind_basis_mat.0.1.1.1.0.0.0.0" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ind_basis_mat.0.1.1.1.0.0.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="4.94" steps="608"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_basis_mat.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="3.29" steps="356"/></proof>
         </goal>
         <goal name="VC ind_basis_mat.0.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="3.40" steps="357"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_basis_mat.0.2" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="127"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.3" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="128"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.4" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="127"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.5" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="128"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.6" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(i,j)">
    <goal name="VC ind_basis_mat.0.6.0" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC ind_basis_mat.0.6.0.0" proved="true">
     <transf name="apply" proved="true" arg1="H4">
      <goal name="VC ind_basis_mat.0.6.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.71"/></proof>
      </goal>
      <goal name="VC ind_basis_mat.0.6.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ind_basis_mat.0.6.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="VC ind_basis_mat.0.6.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC ind_basis_mat.0.6.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.33" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_basis_mat.0.6.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.40"/></proof>
        </goal>
        <goal name="VC ind_basis_mat.0.6.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.56"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_basis_mat.0.7" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="139"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.8" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="140"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.9" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.10" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="140"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.11" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ind_basis_mat.0.11.0" expl="VC for ind_basis_mat" proved="true">
    <transf name="instantiate" proved="true" arg1="H3" arg2="b">
     <goal name="VC ind_basis_mat.0.11.0.0" expl="VC for ind_basis_mat" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_basis_mat.0.11.0.0.0" expl="VC for ind_basis_mat" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
       <goal name="VC ind_basis_mat.0.11.0.0.0.0" expl="VC for ind_basis_mat" proved="true">
       <transf name="assert" proved="true" arg1="(eq_t
  (get (make_f r c (fun (k:int) (l:int) -&gt; indic_2 k i l j)) (fir b) (sec b))
  tone)">
        <goal name="VC ind_basis_mat.0.11.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="VC ind_basis_mat.0.11.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.97"/></proof>
         </goal>
         <goal name="VC ind_basis_mat.0.11.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H">
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC ind_basis_mat.0.11.0.0.0.0.1" expl="VC for ind_basis_mat" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make" arg2="in" arg3="h">
         <goal name="VC ind_basis_mat.0.11.0.0.0.0.1.0" expl="VC for ind_basis_mat" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
          <goal name="VC ind_basis_mat.0.11.0.0.0.0.1.0.0" expl="VC for ind_basis_mat" proved="true">
          <proof prover="0"><result status="valid" time="1.15"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_basis_mat.0.11.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.59"/></proof>
         </goal>
         <goal name="VC ind_basis_mat.0.11.0.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.57"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ind_basis_mat.0.11.1" expl="VC for ind_basis_mat" proved="true">
    <transf name="instantiate" proved="true" arg1="H4" arg2="b">
     <goal name="VC ind_basis_mat.0.11.1.0" expl="VC for ind_basis_mat" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ind_basis_mat.0.11.1.0.0" expl="VC for ind_basis_mat" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC ind_basis_mat.0.11.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.00"/></proof>
       </goal>
       <goal name="VC ind_basis_mat.0.11.1.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ind_basis_mat.0.11.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="VC ind_basis_mat.0.11.1.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC ind_basis_mat.0.11.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.67"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ind_basis_mat.0.11.1.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.53"/></proof>
         </goal>
         <goal name="VC ind_basis_mat.0.11.1.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.57"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ind_basis_mat.0.12" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.13" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="152"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.14" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="157"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.15" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.36" steps="159"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.16" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.84"/></proof>
   </goal>
   <goal name="VC ind_basis_mat.0.17" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H4">
    <goal name="VC ind_basis_mat.0.17.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC ind_basis_mat.0.17.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="1.24" steps="166"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_basis_mat_values" expl="VC for ind_basis_mat_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_basis_mat_values.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unic_ind_basis_mat" expl="VC for unic_ind_basis_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unic_ind_basis_mat.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
  </goal>
  <goal name="VC unic_ind_basis_mat.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
  </goal>
  <goal name="VC unic_ind_basis_mat.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_basis_mat_values" arg2="in" arg3="H">
   <goal name="VC unic_ind_basis_mat.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_basis_mat_values" arg2="in" arg3="H">
    <goal name="VC unic_ind_basis_mat.2.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.45"/></proof>
    </goal>
    <goal name="VC unic_ind_basis_mat.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
    </goal>
    <goal name="VC unic_ind_basis_mat.2.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="137"/></proof>
    </goal>
    <goal name="VC unic_ind_basis_mat.2.0.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="137"/></proof>
    </goal>
    <goal name="VC unic_ind_basis_mat.2.0.4" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC unic_ind_basis_mat.2.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="136"/></proof>
   </goal>
   <goal name="VC unic_ind_basis_mat.2.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="136"/></proof>
   </goal>
   <goal name="VC unic_ind_basis_mat.2.3" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="136"/></proof>
   </goal>
   <goal name="VC unic_ind_basis_mat.2.4" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="136"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC basis_mat" expl="VC for basis_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_mat.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_mat.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
   </goal>
   <goal name="VC basis_mat.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_mat.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="137"/></proof>
   </goal>
   <goal name="VC basis_mat.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_mat.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
   </goal>
   <goal name="VC basis_mat.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_mat.3.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
    match o with
    | i, j -&gt;
        if (0 &lt;= i /\ i &lt; r) /\ 0 &lt;= j /\ j &lt; c then ind_basis_mat i j r c
        else make r c tzero
    end),(cartesian_product (to_fset 0 r) (to_fset 0 c)),m">
    <goal name="VC basis_mat.3.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC basis_mat.3.0.0.0" expl="destruct premise" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC basis_mat.3.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="rewrite" proved="true" arg1="result_def" arg2="in" arg3="H">
       <goal name="VC basis_mat.3.0.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC basis_mat.3.0.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC basis_mat.3.0.0.1.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="(fir a)">
       <goal name="VC basis_mat.3.0.0.1.0.0" proved="true">
       <transf name="exists" proved="true" arg1="(sec a)">
        <goal name="VC basis_mat.3.0.0.1.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC basis_mat.3.0.0.1.0.0.0.0" proved="true">
         <proof prover="4"><result status="valid" time="1.05"/></proof>
         </goal>
         <goal name="VC basis_mat.3.0.0.1.0.0.0.1" proved="true">
         <proof prover="4"><result status="valid" time="1.10"/></proof>
         </goal>
         <goal name="VC basis_mat.3.0.0.1.0.0.0.2" proved="true">
         <proof prover="4"><result status="valid" time="1.07"/></proof>
         </goal>
         <goal name="VC basis_mat.3.0.0.1.0.0.0.3" proved="true">
         <proof prover="4"><result status="valid" time="1.07"/></proof>
         </goal>
         <goal name="VC basis_mat.3.0.0.1.0.0.0.4" proved="true">
         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
          <goal name="VC basis_mat.3.0.0.1.0.0.0.4.0" proved="true">
          <proof prover="4"><result status="valid" time="1.76"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_mat.3.1" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC basis_mat.3.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC basis_mat.3.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="VC basis_mat.3.1.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(i,j)">
       <goal name="VC basis_mat.3.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_mat.3.1.0.0.0.0.0" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC basis_mat.3.1.0.0.0.0.0.0" proved="true">
         <transf name="apply" proved="true" arg1="H5">
          <goal name="VC basis_mat.3.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC basis_mat.3.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="4.70" steps="711"/></proof>
           </goal>
           <goal name="VC basis_mat.3.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="4.57" steps="713"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC basis_mat.3.1.0.0.0.0.1" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC basis_mat.3.1.0.0.0.0.1.0" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_basis_mat_def" arg2="in" arg3="H">
          <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="H">
           <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0" proved="true">
           <transf name="apply" proved="true" arg1="set_equal_mat">
            <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="1.63" steps="148"/></proof>
            </goal>
            <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="1.74" steps="148"/></proof>
            </goal>
            <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ind_basis_mat_def">
                <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="1.20"/></proof>
                </goal>
                <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.13" steps="148"/></proof>
                </goal>
                <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.17" steps="148"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC basis_mat.3.1.0.0.0.0.1.0.0.0.2.0.0.1" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.15" steps="148"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC basis_mat.3.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.13" steps="146"/></proof>
          </goal>
          <goal name="VC basis_mat.3.1.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.16" steps="146"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC basis_mat.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC basis_mat.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="map_eq">
     <goal name="VC basis_mat.4.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC basis_mat.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC basis_mat.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="2.08"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC basis_mat.5.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC basis_mat.5.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.92"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_mat.5.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC basis_mat.5.1.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.97"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="VC basis_mat.6.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC basis_mat.6.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(p_id (choose result))" arg2="(choose result)">
     <goal name="VC basis_mat.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
     </goal>
     <goal name="VC basis_mat.6.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(exists i:int, j:int.
     (0 &lt;= i /\ i &lt; r) &amp;&amp; (0 &lt;= j /\ j &lt; c) &amp;&amp; choose result = ind_basis_mat i j r c)">
      <goal name="VC basis_mat.6.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="destruct" proved="true" arg1="h">
       <goal name="VC basis_mat.6.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC basis_mat.6.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="instantiate" proved="true" arg1="H3" arg2="(choose result)">
         <goal name="VC basis_mat.6.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="VC basis_mat.6.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.65"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC basis_mat.6.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_mat.6.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC basis_mat.6.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(p_id (choose result))" arg2="(choose result)">
     <goal name="VC basis_mat.6.1.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c),(cartesian_product (to_fset 0 r) (to_fset 0 c)),(choose result)">
      <goal name="VC basis_mat.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC basis_mat.6.1.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="replace" proved="true" arg1="(map (fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c)
   (cartesian_product (to_fset 0 r) (to_fset 0 c)))" arg2="result">
        <goal name="VC basis_mat.6.1.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="0.43"/></proof>
        </goal>
        <goal name="VC basis_mat.6.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="1.64"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_mat.6.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC basis_mat.6.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC basis_mat.6.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="VC basis_mat.6.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC basis_mat.6.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="ind_basis_mat_def">
            <goal name="VC basis_mat.6.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.21" steps="141"/></proof>
            </goal>
            <goal name="VC basis_mat.6.1.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="1.65"/></proof>
            </goal>
            <goal name="VC basis_mat.6.1.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="1.62"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC basis_mat.6.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.21" steps="135"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="VC basis_mat.7.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
   </goal>
   <goal name="VC basis_mat.7.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC basis_mat.7.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(p_id (choose result))" arg2="(choose result)">
     <goal name="VC basis_mat.7.1.0.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(mem (choose result )  result)">
      <goal name="VC basis_mat.7.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
      <goal name="VC basis_mat.7.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.81"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC basis_mat.7.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat.8" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt; ind_basis_mat (fir o) (sec o) r c),(cartesian_product (to_fset 0 r) (to_fset 0 c)),m">
   <goal name="VC basis_mat.8.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC basis_mat.8.0.0" expl="destruct premise" proved="true">
    <proof prover="4"><result status="valid" time="3.84"/></proof>
    </goal>
    <goal name="VC basis_mat.8.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC basis_mat.8.0.1.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC basis_mat.8.0.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC basis_mat.8.0.1.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC basis_mat.8.0.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="instantiate" proved="true" arg1="set_cardone_elt_" arg2="(filter
   (fun (x:(int, int)) -&gt;
     eq_t (get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x)) tone)
   (mat_indices (ind_basis_mat (fir a) (sec a) r c))),a">
         <goal name="VC basis_mat.8.0.1.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="instantiate" proved="true" arg1="set_cardone_elt_" arg2="(my_filter (mat_indices (ind_basis_mat (fir a) (sec a) r c))
   (fun (x:(int, int)) -&gt;
     eq_t (get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x)) tone)),a">
          <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="Hinst">
           <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="eliminate_definition" proved="true" >
             <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="eq_t_def" arg2="in" arg3="H">
              <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x) = tone) b)">
                <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                <proof prover="1"><result status="valid" time="0.45"/></proof>
                </goal>
                <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
                 <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="ind_basis_mat_spec3" arg2="in" arg3="h">
                  <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="6"><result status="valid" time="1.66" steps="158"/></proof>
                  </goal>
                  <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="4"><result status="valid" time="1.51"/></proof>
                  </goal>
                  <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                  <proof prover="4"><result status="valid" time="1.78"/></proof>
                  </goal>
                  <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
                  <proof prover="6"><result status="valid" time="1.78" steps="158"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     eq_t (get (ind_basis_mat (fir a) (sec a) r c) (fir x) (sec x)) tone) b)">
             <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="rewrite" proved="true" arg1="ind_basis_mat_spec3">
               <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
               <proof prover="6"><result status="valid" time="0.21" steps="151"/></proof>
               </goal>
               <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="1.74"/></proof>
               </goal>
               <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="1.72"/></proof>
               </goal>
               <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="set_valid_index">
                <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.3.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.3.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="1.60"/></proof>
                 </goal>
                 <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.3.0.1" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="1.62"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.3.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.3.1.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="1.86"/></proof>
                 </goal>
                 <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.0.0.3.1.1" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="1.55"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC basis_mat.8.0.1.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.16"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC basis_mat_indexes" expl="VC for basis_mat_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_mat_indexes.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="122"/></proof>
  </goal>
  <goal name="VC basis_mat_indexes.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="126"/></proof>
  </goal>
  <goal name="VC basis_mat_indexes.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="basis_mat_spec" arg2="(rows m),(columns m)">
   <goal name="VC basis_mat_indexes.2.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC basis_mat_indexes.2.0.0" expl="destruct premise" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="127"/></proof>
    </goal>
    <goal name="VC basis_mat_indexes.2.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC basis_mat_indexes.2.0.1.0" expl="destruct premise" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="127"/></proof>
     </goal>
     <goal name="VC basis_mat_indexes.2.0.1.1" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC basis_mat_indexes.2.0.1.1.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst6" arg2="m">
       <goal name="VC basis_mat_indexes.2.0.1.1.0.0" expl="precondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC basis_mat_indexes.2.0.1.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
        </goal>
        <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1" expl="precondition" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0" expl="precondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0.0" expl="precondition" proved="true">
          <transf name="exists" proved="true" arg1="(i,j)">
           <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0.0.0" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="fil_def">
             <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0.0.0.0.0" proved="true">
             <transf name="apply" proved="true" arg1="in_my_filter">
              <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.24"/></proof>
              </goal>
              <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="compute_in_goal" proved="true" >
               <goal name="VC basis_mat_indexes.2.0.1.1.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.75"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat_indexes.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
  </goal>
  <goal name="VC basis_mat_indexes.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="basis_mat_spec" arg2="(rows m),(columns m)">
   <goal name="VC basis_mat_indexes.4.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC basis_mat_indexes.4.0.0" expl="destruct premise" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="131"/></proof>
    </goal>
    <goal name="VC basis_mat_indexes.4.0.1" expl="precondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC basis_mat_indexes.4.0.1.0" expl="destruct premise" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="131"/></proof>
     </goal>
     <goal name="VC basis_mat_indexes.4.0.1.1" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC basis_mat_indexes.4.0.1.1.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst6" arg2="m">
       <goal name="VC basis_mat_indexes.4.0.1.1.0.0" expl="precondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC basis_mat_indexes.4.0.1.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
        </goal>
        <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1" expl="precondition" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0" expl="precondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0" expl="precondition" proved="true">
          <transf name="exists" proved="true" arg1="(i,j)">
           <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0" proved="true">
           <transf name="intros" proved="true" arg1="b">
            <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0" proved="true">
               <transf name="rewrite" proved="true" arg1="fil_def" arg2="in" arg3="H">
                <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0" proved="true">
                <transf name="assert" proved="true" arg1="(mem b (mat_indices m))">
                 <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     mem x (mat_indices m) /\
     equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m))) b)">
                  <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="6"><result status="valid" time="0.21" steps="155"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="asserted formula" proved="true">
                  <proof prover="6"><result status="valid" time="0.19" steps="158"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1" proved="true">
                 <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
     mem x (mat_indices m) /\
     equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m))) b)">
                  <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                  <proof prover="1"><result status="valid" time="0.42"/></proof>
                  </goal>
                  <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.1" proved="true">
                  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
                   <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.0.0.0.0.1.1.0" proved="true">
                   <proof prover="4"><result status="valid" time="1.44"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1" proved="true">
             <transf name="instantiate" proved="true" arg1="get_filter" arg2="(fun (x:(int, int)) -&gt;
     mem x (mat_indices m) /\
     equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m))),(mat_indices m),b">
              <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0" proved="true">
              <transf name="assert" proved="true" arg1="(m = (ind_basis_mat (fir b) (sec b) (rows m) (columns m)))">
               <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
               <proof prover="0"><result status="valid" time="0.57"/></proof>
               </goal>
               <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1" proved="true">
               <transf name="eliminate_definition" proved="true" >
                <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1.0" proved="true">
                <transf name="rewrite" proved="true" arg1="fil_def">
                 <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0" proved="true">
                 <transf name="apply" proved="true" arg1="in_my_filter">
                  <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="6"><result status="valid" time="5.72" steps="829"/></proof>
                  </goal>
                  <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                  <transf name="compute_in_goal" proved="true" >
                   <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.1.0.0" proved="true">
                    <proof prover="6"><result status="valid" time="5.00" steps="829"/></proof>
                    </goal>
                    <goal name="VC basis_mat_indexes.4.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.1.0.1" proved="true">
                    <proof prover="6"><result status="valid" time="0.25" steps="159"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat_indexes.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="131"/></proof>
  </goal>
  <goal name="VC basis_mat_indexes.6" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC basis_mat_indexes.6.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="((fun (x:(int, int)) -&gt;
      mem x (mat_indices m) /\
      equal m (ind_basis_mat (fir x) (sec x) (rows m) (columns m)))result)">
    <goal name="VC basis_mat_indexes.6.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="H6">
     <goal name="VC basis_mat_indexes.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.55"/></proof>
     </goal>
     <goal name="VC basis_mat_indexes.6.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.63"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC basis_mat_indexes.6.0.1" expl="postcondition" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
     <goal name="VC basis_mat_indexes.6.0.1.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.29" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat_indexes.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ind_basis_mat_def" arg2="in" arg3="H">
   <goal name="VC basis_mat_indexes.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC basis_mat_indexes.7.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="VC basis_mat_indexes.7.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_r">
      <goal name="VC basis_mat_indexes.7.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_r">
       <goal name="VC basis_mat_indexes.7.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="133"/></proof>
       </goal>
       <goal name="VC basis_mat_indexes.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.25" steps="135"/></proof>
       </goal>
       <goal name="VC basis_mat_indexes.7.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.30" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC basis_mat_indexes.7.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="135"/></proof>
      </goal>
      <goal name="VC basis_mat_indexes.7.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC basis_mat_indexes.7.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.59"/></proof>
     </goal>
     <goal name="VC basis_mat_indexes.7.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC basis_mat_indexes.7.0.0.2.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="VC basis_mat_indexes.7.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="VC basis_mat_indexes.7.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC basis_mat_indexes.7.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC basis_mat_indexes.7.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.81"/></proof>
        </goal>
        <goal name="VC basis_mat_indexes.7.0.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.53"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_mat_indexes.7.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.36"/></proof>
       </goal>
       <goal name="VC basis_mat_indexes.7.0.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.41"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_mat_indexes.7.1" expl="rewrite premises" proved="true">
   <transf name="assert" proved="true" arg1="(mem result (mat_indices m))">
    <goal name="VC basis_mat_indexes.7.1.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="1.30"/></proof>
    </goal>
    <goal name="VC basis_mat_indexes.7.1.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="136"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_mat_indexes.7.2" expl="rewrite premises" proved="true">
   <transf name="assert" proved="true" arg1="(mem result (mat_indices m))">
    <goal name="VC basis_mat_indexes.7.2.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="1.28"/></proof>
    </goal>
    <goal name="VC basis_mat_indexes.7.2.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.30" steps="136"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat_indexes.8" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.23"/></proof>
  </goal>
  <goal name="VC basis_mat_indexes.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H4">
   <goal name="VC basis_mat_indexes.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC basis_mat_indexes.9.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC basis_mat_indexes.9.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.18" steps="145"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC basis_mat_indexes.9.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.29" steps="144"/></proof>
    </goal>
    <goal name="VC basis_mat_indexes.9.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="144"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_mat_indexes.10" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_basis_mat_indexes" expl="VC for get_basis_mat_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_basis_mat_indexes.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="121"/></proof>
  </goal>
  <goal name="VC get_basis_mat_indexes.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC get_basis_mat_indexes.1.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="123"/></proof>
   </goal>
   <goal name="VC get_basis_mat_indexes.1.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="123"/></proof>
   </goal>
   <goal name="VC get_basis_mat_indexes.1.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC get_basis_mat_indexes.1.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="assert_make">
     <goal name="VC get_basis_mat_indexes.1.2.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC get_basis_mat_indexes.1.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="1.25"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC get_basis_mat_indexes.1.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.30" steps="124"/></proof>
     </goal>
     <goal name="VC get_basis_mat_indexes.1.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="124"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC get_basis_mat_indexes.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="125"/></proof>
  </goal>
  <goal name="VC get_basis_mat_indexes.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC get_basis_mat_indexes.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC get_basis_mat_indexes.3.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC get_basis_mat_indexes.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="4"><result status="valid" time="1.03"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC get_basis_mat_indexes.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="130"/></proof>
    </goal>
    <goal name="VC get_basis_mat_indexes.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="130"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_basis_mat_indexes" expl="VC for set_basis_mat_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_basis_mat_indexes.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="123"/></proof>
  </goal>
  <goal name="VC set_basis_mat_indexes.1" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC set_basis_mat_indexes.1.0" expl="assertion" proved="true">
   <transf name="case" proved="true" arg1="( basis_mat_indexes m &lt;&gt; (i, j))">
    <goal name="VC set_basis_mat_indexes.1.0.0" expl="true case (assertion)" proved="true">
    <transf name="instantiate" proved="true" arg1="get_basis_mat_indexes" arg2="m">
     <goal name="VC set_basis_mat_indexes.1.0.0.0" expl="true case (assertion)" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC set_basis_mat_indexes.1.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="131"/></proof>
      </goal>
      <goal name="VC set_basis_mat_indexes.1.0.0.0.1" expl="true case (assertion)" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="i,j">
       <goal name="VC set_basis_mat_indexes.1.0.0.0.1.0" expl="true case (assertion)" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC set_basis_mat_indexes.1.0.0.0.1.0.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="131"/></proof>
        </goal>
        <goal name="VC set_basis_mat_indexes.1.0.0.0.1.0.1" expl="true case (assertion)" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="131"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_basis_mat_indexes.1.0.1" expl="false case (assertion)" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_basis_mat_indexes.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="131"/></proof>
  </goal>
  <goal name="VC set_basis_mat_indexes.3" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC set_basis_mat_indexes.3.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.41"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_basis_mat_indexes.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.36"/></proof>
  </goal>
  <goal name="VC set_basis_mat_indexes.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC basis_projection" expl="VC for basis_projection" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_projection.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="125"/></proof>
  </goal>
  <goal name="VC basis_projection.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="126"/></proof>
  </goal>
  <goal name="VC basis_projection.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_projection.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="129"/></proof>
   </goal>
   <goal name="VC basis_projection.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_projection.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="129"/></proof>
   </goal>
   <goal name="VC basis_projection.3.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
  </goal>
  <goal name="VC basis_projection.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="143"/></proof>
  </goal>
  <goal name="VC basis_projection.6" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="scalar_values">
   <goal name="VC basis_projection.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC basis_projection.6.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC basis_projection.6.0.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC basis_projection.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
    <goal name="VC basis_projection.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_projection.7.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
   </goal>
   <goal name="VC basis_projection.7.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_projection.8.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="141"/></proof>
   </goal>
   <goal name="VC basis_projection.8.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="141"/></proof>
  </goal>
  <goal name="VC basis_projection.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="142"/></proof>
  </goal>
  <goal name="VC basis_projection.11" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC basis_projection.11.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="145"/></proof>
   </goal>
   <goal name="VC basis_projection.11.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="145"/></proof>
   </goal>
   <goal name="VC basis_projection.11.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC basis_projection.11.2.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.12" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC basis_projection.12.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC basis_projection.12.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC basis_projection.12.0.0.0" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.32" steps="147"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC basis_projection.12.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="145"/></proof>
    </goal>
    <goal name="VC basis_projection.12.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.13" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(indic_2 i&#39; i j&#39; j = tzero)">
   <goal name="VC basis_projection.13.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
   </goal>
   <goal name="VC basis_projection.13.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="2.68"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projection.14" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(indic_2 i&#39; i j&#39; j = tzero)">
   <goal name="VC basis_projection.14.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="153"/></proof>
   </goal>
   <goal name="VC basis_projection.14.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="2.25"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC basis_projection_null" expl="VC for basis_projection_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_projection_null.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="VC basis_projection_null.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="126"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC basis_projections" expl="VC for basis_projections" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_projections.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="121"/></proof>
  </goal>
  <goal name="VC basis_projections.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="121"/></proof>
  </goal>
  <goal name="VC basis_projections.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_projections.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="123"/></proof>
   </goal>
   <goal name="VC basis_projections.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="123"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projections.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC basis_projections.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC basis_projections.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC basis_projections.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="map_eq">
     <goal name="VC basis_projections.4.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC basis_projections.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC basis_projections.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="4.41" steps="645"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projections.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC basis_projections.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def" arg2="in" arg3="H">
    <goal name="VC basis_projections.5.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
     if valid_index m (fir o) (sec o) then basis_projection m (fir o) (sec o)
     else m),(to_indexes m),e">
     <goal name="VC basis_projections.5.0.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC basis_projections.5.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC basis_projections.5.0.0.0.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC basis_projections.5.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
        <goal name="VC basis_projections.5.0.0.0.1.0.0" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC basis_projections.5.0.0.0.1.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="VC basis_projections.5.0.0.0.1.0.0.0.0" expl="postcondition" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC basis_projections.5.0.0.0.1.0.0.0.0.0" expl="VC for basis_projections" proved="true">
           <proof prover="6"><result status="valid" time="0.20" steps="138"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projections.6" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists o. mem o (to_indexes m) /\ e = ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
       @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
          @ m)) o)">
   <goal name="VC basis_projections.6.0" expl="asserted formula" proved="true">
   <transf name="instantiate" proved="true" arg1="map_antec" arg2="((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
     @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
        @ m)),(to_indexes m),e">
    <goal name="VC basis_projections.6.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC basis_projections.6.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H2" arg2="in" arg3="H">
      <goal name="VC basis_projections.6.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_projections.6.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="h">
    <goal name="VC basis_projections.6.1.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="h">
     <goal name="VC basis_projections.6.1.0.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(e = basis_projection m (fir o)(sec o))">
      <goal name="VC basis_projections.6.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="1"><result status="valid" time="0.54"/></proof>
      </goal>
      <goal name="VC basis_projections.6.1.0.0.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.43"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_projections.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC basis_projections.7.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC basis_projections.7.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.45"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_projections.7.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC basis_projections.7.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rewrite_basis_projections" expl="VC for rewrite_basis_projections" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rewrite_basis_projections.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rewrite_basis_projections.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="basis_projections_def">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC indexes_decomp" expl="VC for indexes_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indexes_decomp.0" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="1.07"/></proof>
  </goal>
  <goal name="VC indexes_decomp.1" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.93"/></proof>
  </goal>
  <goal name="VC indexes_decomp.2" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="s_columns_def">
   <goal name="VC indexes_decomp.2.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="1.13"/></proof>
   </goal>
   <goal name="VC indexes_decomp.2.1" expl="rewrite premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC indexes_decomp.2.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC indexes_decomp.2.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC indexes_decomp.2.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC indexes_decomp.2.1.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC indexes_decomp.2.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC indexes_decomp.2.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp.3" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="s_rows_def">
   <goal name="VC indexes_decomp.3.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="1.23"/></proof>
   </goal>
   <goal name="VC indexes_decomp.3.1" expl="rewrite premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC indexes_decomp.3.1.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC indexes_decomp.3.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC indexes_decomp.3.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.41"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC indexes_decomp.3.1.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC indexes_decomp.3.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC indexes_decomp.3.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.54"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indexes_decomp.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="127"/></proof>
   </goal>
   <goal name="VC indexes_decomp.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indexes_decomp.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="131"/></proof>
   </goal>
   <goal name="VC indexes_decomp.5.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC indexes_decomp.6.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC indexes_decomp.6.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC indexes_decomp.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC indexes_decomp.6.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC indexes_decomp.6.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC indexes_decomp.6.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.47"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC indexes_decomp.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC indexes_decomp.8.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC indexes_decomp.8.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC indexes_decomp.8.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC indexes_decomp.8.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC indexes_decomp.8.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.60"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC indexes_decomp.8.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC indexes_decomp.8.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC indexes_decomp.8.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.55"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC indexes_decomp.8.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.34"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC indexes_decomp.9.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC indexes_decomp.9.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC indexes_decomp.9.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC indexes_decomp.9.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC indexes_decomp.9.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC indexes_decomp.9.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC indexes_decomp.9.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC indexes_decomp.9.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.52"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC indexes_decomp.9.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.41"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rewrite_indexes_decomp" expl="VC for rewrite_indexes_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rewrite_indexes_decomp.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rewrite_indexes_decomp.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="indexes_decomp_def">
    <goal name="VC rewrite_indexes_decomp.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_eq">
     <goal name="VC rewrite_indexes_decomp.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="to_indexes_def">
      <goal name="VC rewrite_indexes_decomp.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(mem (0,0) (to_indexes m))">
       <goal name="VC rewrite_indexes_decomp.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="4"><result status="valid" time="1.06"/></proof>
       </goal>
       <goal name="VC rewrite_indexes_decomp.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="1.83" steps="126"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_indexes_decomp.0.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC rewrite_indexes_decomp.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC rewrite_indexes_decomp.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC rewrite_indexes_decomp.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.92"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC rewrite_indexes_decomp.0.0.0.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC rewrite_indexes_decomp.0.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC rewrite_indexes_decomp.0.0.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.93"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_indexes_decomp.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC rewrite_indexes_decomp.0.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.14"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC indexes_decomp_pre" expl="VC for indexes_decomp_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indexes_decomp_pre.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indexes_decomp_pre.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="125"/></proof>
   </goal>
   <goal name="VC indexes_decomp_pre.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="125"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp_pre.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indexes_decomp_pre.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="129"/></proof>
   </goal>
   <goal name="VC indexes_decomp_pre.1.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp_pre.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="123"/></proof>
  </goal>
  <goal name="VC indexes_decomp_pre.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="sum_eq">
   <goal name="VC indexes_decomp_pre.3.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC indexes_decomp_pre.3.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.46"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC indexes_decomp_pre.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC indexes_decomp_pre.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(sum (to_indexes m)
    (fun (o:(int, int)) -&gt;
      if mem o (to_indexes m)
      then get (basis_projection m (fir o) (sec o)) i j else tzero))" arg2="(sum (to_indexes m)
  (fun (e:(int, int)) -&gt;
    ((fun (o:(int, int)) -&gt;
       if mem o (to_indexes m)
       then get (basis_projection m (fir o) (sec o)) i j else tzero)
     @ e)
    *. indic (i, j) e))">
    <goal name="VC indexes_decomp_pre.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC indexes_decomp_pre.4.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC indexes_decomp_pre.4.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.63"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC indexes_decomp_pre.4.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="VC indexes_decomp_pre.4.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC indexes_decomp_pre.4.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC indexes_decomp_pre.4.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC indexes_decomp_pre.4.0.1.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC indexes_decomp_pre.4.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="1.51"/></proof>
         </goal>
         <goal name="VC indexes_decomp_pre.4.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="127"/></proof>
         </goal>
         <goal name="VC indexes_decomp_pre.4.0.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="127"/></proof>
         </goal>
         <goal name="VC indexes_decomp_pre.4.0.1.0.0.0.0.3" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="127"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC indexes_decomp_pre_gen" expl="VC for indexes_decomp_pre_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indexes_decomp_pre_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="indexes_decomp_pre">
   <goal name="VC indexes_decomp_pre_gen.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="119"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_to_indexes_decomp" expl="VC for mat_to_indexes_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_to_indexes_decomp.0" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC mat_to_indexes_decomp.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="119"/></proof>
   </goal>
   <goal name="VC mat_to_indexes_decomp.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="119"/></proof>
   </goal>
   <goal name="VC mat_to_indexes_decomp.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_to_indexes_decomp.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="indexes_decomp_pre">
     <goal name="VC mat_to_indexes_decomp.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC mat_to_indexes_decomp.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_hyp" proved="true" >
      </transf>
      </goal>
      <goal name="VC mat_to_indexes_decomp.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="120"/></proof>
      </goal>
      <goal name="VC mat_to_indexes_decomp.0.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="120"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_to_indexes_decomp.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="119"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_to_indexes_decomp.1" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_to_indexes_decomp.1.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (to_indexes m)) (to_indexes m))">
    <goal name="VC mat_to_indexes_decomp.1.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
    <goal name="VC mat_to_indexes_decomp.1.0.1" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.65"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_to_indexes_decomp.2" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_to_indexes_decomp.2.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (to_indexes m)) (to_indexes m))">
    <goal name="VC mat_to_indexes_decomp.2.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(exists x. (mem x (to_indexes m)))">
     <goal name="VC mat_to_indexes_decomp.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="exists" proved="true" arg1="(0,0)">
      <goal name="VC mat_to_indexes_decomp.2.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.17" steps="123"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_to_indexes_decomp.2.0.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_to_indexes_decomp.2.0.1" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_to_indexes_decomp.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_rows">
   <goal name="VC mat_to_indexes_decomp.3.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_to_indexes_decomp.3.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_to_indexes_decomp.3.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="1.34"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_to_indexes_decomp.3.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_to_indexes_decomp.3.0.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="1.19"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_to_indexes_decomp.3.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_to_indexes_decomp.3.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_to_indexes_decomp.4" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="set_s_columns">
   <goal name="VC mat_to_indexes_decomp.4.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_to_indexes_decomp.4.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.28"/></proof>
    </goal>
    <goal name="VC mat_to_indexes_decomp.4.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.59"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_to_indexes_decomp.4.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mat_to_indexes_decomp.4.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_to_indexes_decomp.5" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sum_to_sum">
   <goal name="VC mat_to_indexes_decomp.5.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(make_f
    (s_rows (to_indexes m)
     ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
      @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
         @ m)))
    (s_columns (to_indexes m)
     ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
      @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
         @ m)))
    (fun (i:int) (j:int) -&gt;
      sum (to_indexes m)
      (fun (e:(int, int)) -&gt;
        get
        (((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
          @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
               basis_projection y0 y1 y2)
             @ m))
         @ e)
        i j)))" arg2="(make_f (rows m) (columns m)
    (fun (i:int) (j:int) -&gt;
      sum (to_indexes m)
      (fun (o:(int, int)) -&gt; get (basis_projection m (fir o) (sec o)) i j)))">
    <goal name="VC mat_to_indexes_decomp.5.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="H4">
    </transf>
    </goal>
    <goal name="VC mat_to_indexes_decomp.5.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat_make_t">
     <goal name="VC mat_to_indexes_decomp.5.0.1.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(s_rows (to_indexes m)
  ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
   @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m))
  = rows m)">
      <goal name="VC mat_to_indexes_decomp.5.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_s_rows">
        <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.07"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.13"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_to_indexes_decomp.5.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.56"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_to_indexes_decomp.5.0.1.0.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(s_columns (to_indexes m)
  ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
   @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m))
  = columns m)
">
       <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns">
         <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="set_constant_size">
          <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.31"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.12"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.54"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_to_indexes_decomp.5.0.1.0.1.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.73"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_to_indexes_decomp.5.0.1.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(s_columns (to_indexes m)
  ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
   @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m))
  = columns m)">
      <goal name="VC mat_to_indexes_decomp.5.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_s_columns">
        <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size">
         <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.12"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.04"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_to_indexes_decomp.5.0.1.1.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.57"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_to_indexes_decomp.5.0.1.1.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.77"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_to_indexes_decomp.5.0.1.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_to_indexes_decomp.5.0.1.2.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_rows">
       <goal name="VC mat_to_indexes_decomp.5.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_to_indexes_decomp.5.0.1.2.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_to_indexes_decomp.5.0.1.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.07"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_to_indexes_decomp.5.0.1.2.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_to_indexes_decomp.5.0.1.2.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.35"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_to_indexes_decomp.5.0.1.2.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_to_indexes_decomp.5.0.1.2.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.53"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_to_indexes_decomp.5.0.1.3" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_to_indexes_decomp.5.0.1.3.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_s_columns">
       <goal name="VC mat_to_indexes_decomp.5.0.1.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_constant_size">
        <goal name="VC mat_to_indexes_decomp.5.0.1.3.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_to_indexes_decomp.5.0.1.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.09"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_to_indexes_decomp.5.0.1.3.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_to_indexes_decomp.5.0.1.3.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.03"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_to_indexes_decomp.5.0.1.3.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_to_indexes_decomp.5.0.1.3.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.54"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_to_indexes_decomp.5.0.1.4" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC mat_to_indexes_decomp.5.0.1.4.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mat_to_indexes_decomp.5.0.1.4.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC mat_to_indexes_decomp.5.0.1.4.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_to_indexes_decomp.5.0.1.4.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_to_indexes_decomp.5.0.1.4.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.16"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_to_indexes_decomp.5.1" expl="rewrite premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC mat_to_indexes_decomp.5.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_to_indexes_decomp.5.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_to_indexes_decomp.5.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC mat_to_indexes_decomp.5.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="VC mat_to_indexes_decomp.5.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
         <goal name="VC mat_to_indexes_decomp.5.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
          <goal name="VC mat_to_indexes_decomp.5.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="4.43" steps="673"/></proof>
          </goal>
          <goal name="VC mat_to_indexes_decomp.5.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="1.73" steps="138"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_to_indexes_decomp.5.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="1.99" steps="138"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_to_indexes_decomp.5.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_to_indexes_decomp.5.1.1.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.23"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_to_indexes_decomp.5.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.45"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_to_indexes_decomp.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC mat_to_indexes_decomp.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="indexes_decomp_def">
    <goal name="VC mat_to_indexes_decomp.6.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(mat_sum (to_indexes m)
    (fun (o:(int, int)) -&gt;
      if mem o (to_indexes m) then basis_projection m (fir o) (sec o) else m))" arg2="(mat_sum (to_indexes m)
    ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
     @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2)
        @ m)))">
     <goal name="VC mat_to_indexes_decomp.6.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="VC mat_to_indexes_decomp.6.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_eq">
      <goal name="VC mat_to_indexes_decomp.6.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="1.97" steps="136"/></proof>
      </goal>
      <goal name="VC mat_to_indexes_decomp.6.0.0.1.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="set_constant_size">
       <goal name="VC mat_to_indexes_decomp.6.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_to_indexes_decomp.6.0.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="1.34"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_to_indexes_decomp.6.0.0.1.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_to_indexes_decomp.6.0.0.1.1.1.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="1.20"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_to_indexes_decomp.6.0.0.1.2" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_to_indexes_decomp.6.0.0.1.2.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_to_indexes_decomp.6.0.0.1.2.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="2.19" steps="138"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC basis_decomp" expl="VC for basis_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_decomp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="121"/></proof>
  </goal>
  <goal name="VC basis_decomp.1" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC basis_decomp.1.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))">
    <goal name="VC basis_decomp.1.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
     <goal name="VC basis_decomp.1.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="VC basis_decomp.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(0,0)">
       <goal name="VC basis_decomp.1.0.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_decomp.1.0.0.0.0.0.0" proved="true">
        <proof prover="4"><result status="valid" time="1.58"/></proof>
        </goal>
        <goal name="VC basis_decomp.1.0.0.0.0.0.1" proved="true">
        <proof prover="4"><result status="valid" time="1.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC basis_decomp.1.0.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_decomp.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC basis_decomp.2.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_rows">
    <goal name="VC basis_decomp.2.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="127"/></proof>
    </goal>
    <goal name="VC basis_decomp.2.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC basis_decomp.2.0.1.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC basis_decomp.2.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="p_id_def">
       <goal name="VC basis_decomp.2.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC basis_decomp.2.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="basis_projections_spec2">
         <goal name="VC basis_decomp.2.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))">
          <goal name="VC basis_decomp.2.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
           <goal name="VC basis_decomp.2.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="set_map_mem">
            <goal name="VC basis_decomp.2.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="(0,0)">
             <goal name="VC basis_decomp.2.0.1.0.0.0.0.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC basis_decomp.2.0.1.0.0.0.0.0.0.0.0.0.0" proved="true">
              <proof prover="4"><result status="valid" time="1.49"/></proof>
              </goal>
              <goal name="VC basis_decomp.2.0.1.0.0.0.0.0.0.0.0.0.1" proved="true">
              <proof prover="4"><result status="valid" time="1.39"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC basis_decomp.2.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.30"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_decomp.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC basis_decomp.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_s_columns">
    <goal name="VC basis_decomp.3.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="129"/></proof>
    </goal>
    <goal name="VC basis_decomp.3.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC basis_decomp.3.0.1.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC basis_decomp.3.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC basis_decomp.3.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="basis_projections_spec1">
        <goal name="VC basis_decomp.3.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))">
         <goal name="VC basis_decomp.3.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
          <goal name="VC basis_decomp.3.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_map_mem">
           <goal name="VC basis_decomp.3.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="exists" proved="true" arg1="(0,0)">
            <goal name="VC basis_decomp.3.0.1.0.0.0.0.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC basis_decomp.3.0.1.0.0.0.0.0.0.0.0.0" proved="true">
             <proof prover="6"><result status="valid" time="0.18" steps="136"/></proof>
             </goal>
             <goal name="VC basis_decomp.3.0.1.0.0.0.0.0.0.0.0.1" proved="true">
             <proof prover="4"><result status="valid" time="1.37"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC basis_decomp.3.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.48"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC indexes_basis_decomp_equal_pre" expl="VC for indexes_basis_decomp_equal_pre" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC indexes_basis_decomp_equal_pre.0" expl="VC for indexes_basis_decomp_equal_pre" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indexes_basis_decomp_equal_pre.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="122"/></proof>
   </goal>
   <goal name="VC indexes_basis_decomp_equal_pre.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="126"/></proof>
   </goal>
   <goal name="VC indexes_basis_decomp_equal_pre.0.2" expl="precondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC indexes_basis_decomp_equal_pre.0.2.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_projections_def">
     <goal name="VC indexes_basis_decomp_equal_pre.0.2.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="set_map_mem">
      <goal name="VC indexes_basis_decomp_equal_pre.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="exists" proved="true" arg1="(i,j)">
       <goal name="VC indexes_basis_decomp_equal_pre.0.2.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC indexes_basis_decomp_equal_pre.0.2.0.0.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.19" steps="140"/></proof>
        </goal>
        <goal name="VC indexes_basis_decomp_equal_pre.0.2.0.0.0.0.1" proved="true">
        <proof prover="4"><result status="valid" time="0.55"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC indexes_basis_decomp_equal_pre.0.3" expl="precondition" proved="true">
   <transf name="compute_hyp" proved="true" >
    <goal name="VC indexes_basis_decomp_equal_pre.0.3.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(exists i1 j1. valid_index m i1 j1 &amp;&amp; k = basis_projection m i1 j1 &amp;&amp; (i1 = i -&gt; j1 &lt;&gt; j))">
     <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0" expl="asserted formula" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="basis_projections_def" arg2="in" arg3="H1">
       <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="map_antec" arg2="(fun (o:(int, int)) -&gt;
     if valid_index m (fir o) (sec o) then basis_projection m (fir o) (sec o)
     else m),(to_indexes m),k">
        <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.0" expl="destruct premise" proved="true">
         <transf name="apply" proved="true" arg1="H1">
         </transf>
         </goal>
         <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.1" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <transf name="exists" proved="true" arg1="(fir a)">
           <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.1.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(sec a)">
            <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.1.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.1.0.0.0.0" proved="true">
             <proof prover="6"><result status="valid" time="5.27" steps="781"/></proof>
             </goal>
             <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.1.0.0.0.1" proved="true">
             <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
             </goal>
             <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.0.0.0.0.1.0.0.0.2" proved="true">
             <proof prover="6"><result status="valid" time="0.15" steps="154"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC indexes_basis_decomp_equal_pre.0.3.0.1" expl="precondition" proved="true">
     <proof prover="4"><result status="valid" time="1.27"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC indexes_basis_decomp_equal_pre.0.4" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC indexes_basis_decomp_equal_pre.0.4.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_decomp_def">
     <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sum_to_sum_pre">
      <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(sum (basis_projections m)
    (fun (e:matrix complex) -&gt; get ((fun (y0:matrix complex) -&gt; p_id y0) @ e) i j))" arg2="(sum (basis_projections m) (fun (mat:matrix complex) -&gt; get mat i j))
">
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="6"><result status="valid" time="0.18" steps="140"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.95"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.1" expl="rewrite premises" proved="true">
      <transf name="assert" proved="true" arg1="(rows m &gt; 0)">
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="142"/></proof>
       </goal>
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.1.1" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(columns m &gt; 0)">
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.27" steps="144"/></proof>
        </goal>
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="144"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="1.97" steps="142"/></proof>
      </goal>
      <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="142"/></proof>
       </goal>
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows (basis_projections m) (fun (y0:matrix complex) -&gt; p_id y0))" arg2="(rows m)
">
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.0" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.18" steps="142"/></proof>
        </goal>
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_rows">
         <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="140"/></proof>
         </goal>
         <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="p_id_def">
           <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))">
            <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0.0" expl="asserted formula" proved="true">
            <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
             <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="set_map_mem">
              <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="exists" proved="true" arg1="(0,0)">
               <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0.0.0.0.0.0" proved="true">
                <proof prover="6"><result status="valid" time="0.19" steps="142"/></proof>
                </goal>
                <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0.0.0.0.0.1" proved="true">
                <proof prover="4"><result status="valid" time="1.20"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.3.1.1.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.59"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.0" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="142"/></proof>
       </goal>
       <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(s_columns (basis_projections m) (fun (y0:matrix complex) -&gt; p_id y0))" arg2="(columns m)
">
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.0" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
        </goal>
        <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_s_columns">
         <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="140"/></proof>
         </goal>
         <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="( mem (basis_projection m 0 0) (basis_projections m))">
           <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0.0" expl="asserted formula" proved="true">
           <transf name="rewrite" proved="true" arg1="rewrite_basis_projections">
            <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="set_map_mem">
             <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="exists" proved="true" arg1="(0,0)">
              <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0.0.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0.0.0.0.0.0" proved="true">
               <proof prover="6"><result status="valid" time="0.34" steps="142"/></proof>
               </goal>
               <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0.0.0.0.0.1" proved="true">
               <proof prover="4"><result status="valid" time="1.23"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC indexes_basis_decomp_equal_pre.0.4.0.0.4.1.1.1.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.09"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC indexes_basis_decomp_equal" expl="VC for indexes_basis_decomp_equal" proved="true">
 <transf name="eliminate_let" proved="true" >
  <goal name="VC indexes_basis_decomp_equal.0" expl="VC for indexes_basis_decomp_equal" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indexes_basis_decomp_equal.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="125"/></proof>
   </goal>
   <goal name="VC indexes_basis_decomp_equal.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="126"/></proof>
   </goal>
   <goal name="VC indexes_basis_decomp_equal.0.2" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.49"/></proof>
   </goal>
   <goal name="VC indexes_basis_decomp_equal.0.3" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(indexes_decomp m)" arg2="m">
    <goal name="VC indexes_basis_decomp_equal.0.3.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="129"/></proof>
    </goal>
    <goal name="VC indexes_basis_decomp_equal.0.3.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="129"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_to_basis_decomp" expl="VC for mat_to_basis_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_to_basis_decomp.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="121"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_mat_sum_r_pre" expl="VC for product_mat_sum_r_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_mat_sum_r_pre.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="131"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC product_mat_sum_r_pre.2.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.26"/></proof>
   </goal>
   <goal name="VC product_mat_sum_r_pre.2.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.72"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="137"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC product_mat_sum_r_pre.6.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC product_mat_sum_r_pre.6.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC product_mat_sum_r_pre.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.64"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC product_mat_sum_r_pre.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC product_mat_sum_r_pre.6.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="146"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.75"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.11" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC product_mat_sum_r_pre.11.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC product_mat_sum_r_pre.11.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC product_mat_sum_r_pre.11.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.62"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC product_mat_sum_r_pre.11.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC product_mat_sum_r_pre.11.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.51"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.12" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC product_mat_sum_r_pre.12.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC product_mat_sum_r_pre.12.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_rows">
     <goal name="VC product_mat_sum_r_pre.12.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC product_mat_sum_r_pre.12.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC product_mat_sum_r_pre.12.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC product_mat_sum_r_pre.12.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.53"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC product_mat_sum_r_pre.12.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC product_mat_sum_r_pre.12.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.48"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC product_mat_sum_r_pre.12.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC product_mat_sum_r_pre.12.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.60"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.13" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC product_mat_sum_r_pre.13.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC product_mat_sum_r_pre.13.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_s_columns">
     <goal name="VC product_mat_sum_r_pre.13.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_constant_size">
      <goal name="VC product_mat_sum_r_pre.13.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC product_mat_sum_r_pre.13.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC product_mat_sum_r_pre.13.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.60"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC product_mat_sum_r_pre.13.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC product_mat_sum_r_pre.13.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC product_mat_sum_r_pre.13.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.60"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC product_mat_sum_r_pre.13.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC product_mat_sum_r_pre.13.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.43"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="149"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.15" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC product_mat_sum_r_pre.15.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.25" steps="143"/></proof>
   </goal>
   <goal name="VC product_mat_sum_r_pre.15.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="143"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="143"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="146"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.19" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.20" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_constant_size">
   <goal name="VC product_mat_sum_r_pre.20.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC product_mat_sum_r_pre.20.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.42"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC product_mat_sum_r_pre.20.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC product_mat_sum_r_pre.20.1.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.36"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.21" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.22" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H4">
   <goal name="VC product_mat_sum_r_pre.22.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.23" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H4">
   <goal name="VC product_mat_sum_r_pre.23.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.24" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="163"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.25" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(add_mat (f @ choose s&#39;) (mat_sum (remove (choose s&#39;) s&#39;) f))" arg2="(mat_sum s&#39; f)" arg3="in" arg4="H">
   <goal name="VC product_mat_sum_r_pre.25.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC product_mat_sum_r_pre.25.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(add (choose s&#39;) (remove (choose s&#39;) s&#39;))" arg2="s&#39;" arg3="in" arg4="H16">
     <goal name="VC product_mat_sum_r_pre.25.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H16">
      <goal name="VC product_mat_sum_r_pre.25.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="H13">
       <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="apply" proved="true" arg1="add_mat_eq">
         <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="rows_mat_sum">
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.53"/></proof>
           </goal>
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.61"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.58"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.48"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="columns_mat_sum">
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.61"/></proof>
           </goal>
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.56"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.49"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.58"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.69"/></proof>
         </goal>
         <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="mat_sum_eq">
          <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.55"/></proof>
          </goal>
          <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.72"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.1.1.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.69"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC product_mat_sum_r_pre.25.0.0.0.0.0.0.3.2.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.51"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC product_mat_sum_r_pre.25.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.44"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC product_mat_sum_r_pre.25.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="0.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.26" expl="postcondition" proved="true">
  <transf name="eliminate_let" proved="true" >
   <goal name="VC product_mat_sum_r_pre.26.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC product_mat_sum_r_pre.26.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(cardinal s&#39; =1)">
     <goal name="VC product_mat_sum_r_pre.26.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="3"><result status="valid" time="0.70"/></proof>
     </goal>
     <goal name="VC product_mat_sum_r_pre.26.0.0.1" expl="false case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="VC product_mat_sum_r_pre.26.0.0.1.0" expl="destruct premise" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="171"/></proof>
      </goal>
      <goal name="VC product_mat_sum_r_pre.26.0.0.1.1" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="VC product_mat_sum_r_pre.26.0.0.1.1.0" expl="false case (postcondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="129"/></proof>
       </goal>
       <goal name="VC product_mat_sum_r_pre.26.0.0.1.1.1" expl="false case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.27" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC product_mat_sum_r_pre.27.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mat_sum_eq">
    <goal name="VC product_mat_sum_r_pre.27.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="127"/></proof>
    </goal>
    <goal name="VC product_mat_sum_r_pre.27.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC product_mat_sum_r_pre.27.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC product_mat_sum_r_pre.27.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC product_mat_sum_r_pre.27.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.62"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC product_mat_sum_r_pre.27.0.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC product_mat_sum_r_pre.27.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.90"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC product_mat_sum_r_pre.27.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC product_mat_sum_r_pre.27.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.54"/></proof>
      </goal>
      <goal name="VC product_mat_sum_r_pre.27.0.1.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.54"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC product_mat_sum_r_pre.27.0.2" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.28" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC product_mat_sum_r_pre.28.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.72"/></proof>
   </goal>
   <goal name="VC product_mat_sum_r_pre.28.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.67"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.29" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC product_mat_sum_r_pre.29.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="4.85"/></proof>
   </goal>
   <goal name="VC product_mat_sum_r_pre.29.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.70"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r_pre.30" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_pre.31" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_mat_sum_r" expl="VC for product_mat_sum_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_mat_sum_r.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="123"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="125"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="125"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r.4" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="mat_sum_eq">
   <goal name="VC product_mat_sum_r.4.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="135"/></proof>
   </goal>
   <goal name="VC product_mat_sum_r.4.1" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_constant_size">
    <goal name="VC product_mat_sum_r.4.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC product_mat_sum_r.4.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC product_mat_sum_r.4.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.61"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC product_mat_sum_r.4.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC product_mat_sum_r.4.1.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC product_mat_sum_r.4.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.80"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC product_mat_sum_r.4.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC product_mat_sum_r.4.2.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.76"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC product_mat_sum_r.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC product_mat_sum_r.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC product_mat_sum_r_rev" expl="VC for product_mat_sum_r_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC product_mat_sum_r_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="123"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_rev.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="123"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_rev.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="123"/></proof>
  </goal>
  <goal name="VC product_mat_sum_r_rev.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC product_mat_sum_r_rev.3.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC p_injective_proj" expl="VC for p_injective_proj" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC p_injective_proj.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(mem o (to_indexes m))">
   <goal name="VC p_injective_proj.0.0" expl="asserted formula" proved="true">
   <transf name="rewrite" proved="true" arg1="nonn_mat_subset_def" arg2="in" arg3="H">
    <goal name="VC p_injective_proj.0.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="121"/></proof>
    </goal>
    <goal name="VC p_injective_proj.0.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="set_constant_size">
     <goal name="VC p_injective_proj.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.95"/></proof>
     </goal>
     <goal name="VC p_injective_proj.0.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC p_injective_proj.0.0.1.1.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.98"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC p_injective_proj.0.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC p_injective_proj.1" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(get (basis_projection m (fir o) (sec o)) (fir o) (sec o) = tzero)">
   <goal name="VC p_injective_proj.1.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="((basis_projection m (fir o) (sec o))  = make (rows m) (columns m) tzero)">
    <goal name="VC p_injective_proj.1.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="VC p_injective_proj.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="1.21"/></proof>
     </goal>
     <goal name="VC p_injective_proj.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.32"/></proof>
     </goal>
     <goal name="VC p_injective_proj.1.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC p_injective_proj.1.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="1.20"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC p_injective_proj.1.0.1" expl="true case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="false">
     <goal name="VC p_injective_proj.1.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(not (basis_projection m (fir o) (sec o) = make (rows m) (columns m) tzero))">
      <goal name="VC p_injective_proj.1.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="mat_subset_nonn_elt" arg2="((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
    @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt; basis_projection y0 y1 y2) @ m)),(to_indexes m)
">
       <goal name="VC p_injective_proj.1.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="replace" proved="true" arg1="(s_rows (to_indexes m)
           ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
            @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
                 basis_projection y0 y1 y2)
               @ m)))" arg2="(rows m)" arg3="in" arg4="Hinst">
        <goal name="VC p_injective_proj.1.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="(s_columns (to_indexes m)
           ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
            @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
                 basis_projection y0 y1 y2)
               @ m)))" arg2="(columns m)" arg3="in" arg4="Hinst">
         <goal name="VC p_injective_proj.1.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC p_injective_proj.1.0.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC p_injective_proj.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC p_injective_proj.1.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.14"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC p_injective_proj.1.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC p_injective_proj.1.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.23"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC p_injective_proj.1.0.1.0.0.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="0.76"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_s_columns">
          <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_constant_size">
           <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="1"><result status="valid" time="0.70"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="0.62"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
            <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
             <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="basis_projection_def">
              <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="1.48"/></proof>
              </goal>
              <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="1.65"/></proof>
              </goal>
              <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="1.09"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC p_injective_proj.1.0.1.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="0.62"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC p_injective_proj.1.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="(s_columns (to_indexes m)
           ((fun (y0:int -&gt; int -&gt; matrix complex) (y1:(int, int)) -&gt; couple y0 y1)
            @ ((fun (y0:matrix complex) (y1:int) (y2:int) -&gt;
                 basis_projection y0 y1 y2)
               @ m)))" arg2="(columns m)" arg3="in" arg4="Hinst">
          <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0" expl="destruct premise" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.04"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
                <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="1.13"/></proof>
                </goal>
                <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="1"><result status="valid" time="0.17"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="1"><result status="valid" time="0.23"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="set_s_rows">
            <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size">
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.12"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.0.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.0.1.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.56"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="basis_projection_spec5">
                 <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.17" steps="123"/></proof>
                 </goal>
                 <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="instantiate" proved="true" arg1="get_to_indexes_mem" arg2="m,(choose (to_indexes m))">
                  <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="instantiate" proved="true" arg1="get_to_indexes_mem1" arg2="m,(choose (to_indexes m))">
                   <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="instantiate" proved="true" arg1="get_to_indexes_mem2" arg2="m,(choose (to_indexes m))">
                    <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="instantiate" proved="true" arg1="get_to_indexes_mem3" arg2="m,(choose (to_indexes m))">
                     <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0.0.0.0.0" proved="true">
                      <transf name="apply" proved="true" arg1="Hinst">
                       <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.32"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0.0.0.0.1" proved="true">
                      <transf name="apply" proved="true" arg1="Hinst1">
                       <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.36"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.0" proved="true">
                  <transf name="instantiate" proved="true" arg1="get_to_indexes_mem1" arg2="m,(choose (to_indexes m))">
                   <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.0.0" proved="true">
                   <transf name="instantiate" proved="true" arg1="get_to_indexes_mem" arg2="m,(choose (to_indexes m))">
                    <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="Hinst1">
                     <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="3"><result status="valid" time="0.38"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.1" proved="true">
                  <transf name="instantiate" proved="true" arg1="get_to_indexes_mem1" arg2="m,(choose (to_indexes m))">
                   <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.1.0" proved="true">
                   <transf name="instantiate" proved="true" arg1="get_to_indexes_mem" arg2="m,(choose (to_indexes m))">
                    <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.1.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="Hinst">
                     <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="3"><result status="valid" time="0.41"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="0"><result status="valid" time="0.61"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.0.1.1.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="0.69"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_s_columns">
           <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_constant_size">
            <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
                <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="1.86"/></proof>
                </goal>
                <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="1"><result status="valid" time="0.15"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="1"><result status="valid" time="0.15"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e)" arg2="(basis_projection m (fir e) (sec e))">
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2) e&#39;)" arg2="(basis_projection m (fir e&#39;) (sec e&#39;))">
                <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="1.47"/></proof>
                </goal>
                <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="1"><result status="valid" time="0.17"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.0.1.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="1"><result status="valid" time="0.18"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   (choose (to_indexes m)))" arg2="(basis_projection m (fir (choose (to_indexes m)))(sec (choose (to_indexes m))))">
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="basis_projection_spec4">
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
               </goal>
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="1.41"/></proof>
               </goal>
               <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="1.33"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC p_injective_proj.1.0.1.0.0.0.1.0.1.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="0.49"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC p_injective_proj.1.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC p_injective_proj.1.0.1.1" expl="true case (assertion)" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="123"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC p_injective_proj.1.1" expl="false case (assertion)" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="121"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC p_injective_proj.2" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(fir o = fir o&#39;)">
   <goal name="VC p_injective_proj.2.0" expl="true case (assertion)" proved="true">
   <proof prover="3"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC p_injective_proj.2.1" expl="false case (assertion)" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="127"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC p_injective_proj.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_injective">
   <goal name="VC p_injective_proj.3.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC p_injective_proj.3.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC p_injective_proj.3.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   e)" arg2="(basis_projection m (fir e)(sec e))">
      <goal name="VC p_injective_proj.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(couple (fun (y1:int) (y2:int) -&gt; basis_projection m y1 y2)
   e&#39;)" arg2="(basis_projection m (fir e&#39;)(sec e&#39;))">
       <goal name="VC p_injective_proj.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="1.17"/></proof>
       </goal>
       <goal name="VC p_injective_proj.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="1"><result status="valid" time="0.17"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC p_injective_proj.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="0.15"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_decomp_equal_indexes" expl="VC for mat_decomp_equal_indexes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_decomp_equal_indexes.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="119"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Diag_mat" proved="true">
 <goal name="VC diag_mat" expl="VC for diag_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="97"/></proof>
  </goal>
  <goal name="VC diag_mat.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
  </goal>
  <goal name="VC diag_mat.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC diag_mat.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="is_diagonal_def">
    <goal name="VC diag_mat.2.0.0" expl="VC for diag_mat" proved="true">
    <transf name="exists" proved="true" arg1="f">
     <goal name="VC diag_mat.2.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_mat">
      <goal name="VC diag_mat.2.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="110"/></proof>
      </goal>
      <goal name="VC diag_mat.2.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="110"/></proof>
      </goal>
      <goal name="VC diag_mat.2.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.82"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_mat.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="105"/></proof>
  </goal>
  <goal name="VC diag_mat.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_rows" expl="VC for diag_mat_rows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_rows.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_columns" expl="VC for diag_mat_columns" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_columns.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="99"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_values" expl="VC for diag_mat_values" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_values.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="diag_mat_def">
   <goal name="VC diag_mat_values.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="assert_make">
    <goal name="VC diag_mat_values.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC diag_mat_values.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="105"/></proof>
    </goal>
    <goal name="VC diag_mat_values.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="105"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC diag_mat_values.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="105"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_add" expl="VC for diag_mat_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_add.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
  </goal>
  <goal name="VC diag_mat_add.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="103"/></proof>
  </goal>
  <goal name="VC diag_mat_add.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="109"/></proof>
  </goal>
  <goal name="VC diag_mat_add.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="115"/></proof>
  </goal>
  <goal name="VC diag_mat_add.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="116"/></proof>
  </goal>
  <goal name="VC diag_mat_add.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="121"/></proof>
  </goal>
  <goal name="VC diag_mat_add.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="122"/></proof>
  </goal>
  <goal name="VC diag_mat_add.7" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_value">
   <goal name="VC diag_mat_add.7.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="diag_mat_def">
    <goal name="VC diag_mat_add.7.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="diag_mat_def">
     <goal name="VC diag_mat_add.7.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC diag_mat_add.7.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="VC diag_mat_add.7.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC diag_mat_add.7.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="diag_mat_def">
         <goal name="VC diag_mat_add.7.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make">
          <goal name="VC diag_mat_add.7.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC diag_mat_add.7.0.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
           <proof prover="0"><result status="valid" time="0.44"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC diag_mat_add.7.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.37"/></proof>
          </goal>
          <goal name="VC diag_mat_add.7.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.27"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC diag_mat_add.7.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC diag_mat_add.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.28"/></proof>
       </goal>
       <goal name="VC diag_mat_add.7.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.31"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC diag_mat_add.7.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.31"/></proof>
      </goal>
      <goal name="VC diag_mat_add.7.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.31"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC diag_mat_add.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="125"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC diag_mat_add.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC diag_mat_add.7.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="125"/></proof>
   </goal>
   <goal name="VC diag_mat_add.7.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="125"/></proof>
   </goal>
   <goal name="VC diag_mat_add.7.3" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="125"/></proof>
   </goal>
   <goal name="VC diag_mat_add.7.4" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
   <goal name="VC diag_mat_add.7.5" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC diag_mat_add.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="123"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_subst" expl="VC for diag_mat_subst" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_subst.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC diag_mat_subst.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.37"/></proof>
   </goal>
   <goal name="VC diag_mat_subst.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC diag_mat_subst.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC diag_mat_subst.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="substr_value">
     <goal name="VC diag_mat_subst.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="diag_mat_def">
      <goal name="VC diag_mat_subst.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="diag_mat_def">
       <goal name="VC diag_mat_subst.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="diag_mat_def">
        <goal name="VC diag_mat_subst.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make">
          <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make">
           <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.40"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.31"/></proof>
           </goal>
           <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.32"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.33"/></proof>
          </goal>
          <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.35"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.32"/></proof>
         </goal>
         <goal name="VC diag_mat_subst.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.29"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC diag_mat_subst.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC diag_mat_subst.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC diag_mat_subst.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC diag_mat_subst.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.35"/></proof>
     </goal>
     <goal name="VC diag_mat_subst.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.33"/></proof>
     </goal>
     <goal name="VC diag_mat_subst.0.2.0.3" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.41"/></proof>
     </goal>
     <goal name="VC diag_mat_subst.0.2.0.4" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.41"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_scal" expl="VC for diag_mat_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_scal.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="diag_mat_def">
   <goal name="VC diag_mat_scal.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="diag_mat_def">
    <goal name="VC diag_mat_scal.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_mat">
     <goal name="VC diag_mat_scal.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_r">
      <goal name="VC diag_mat_scal.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_rows">
       <goal name="VC diag_mat_scal.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_r">
        <goal name="VC diag_mat_scal.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="97"/></proof>
        </goal>
        <goal name="VC diag_mat_scal.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="97"/></proof>
        </goal>
        <goal name="VC diag_mat_scal.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="97"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC diag_mat_scal.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="97"/></proof>
      </goal>
      <goal name="VC diag_mat_scal.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="97"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC diag_mat_scal.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.39"/></proof>
     </goal>
     <goal name="VC diag_mat_scal.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC diag_mat_scal.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="VC diag_mat_scal.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_values">
        <goal name="VC diag_mat_scal.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make">
         <goal name="VC diag_mat_scal.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC diag_mat_scal.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.36"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC diag_mat_scal.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.32"/></proof>
         </goal>
         <goal name="VC diag_mat_scal.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.30"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC diag_mat_scal.0.0.0.2.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.28"/></proof>
       </goal>
       <goal name="VC diag_mat_scal.0.0.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.31"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC diag_mat_scal.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="97"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC diag_mat_scal.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="97"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC diag_mat_eq" expl="VC for diag_mat_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC diag_mat_eq.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC diag_mat_eq.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
   <goal name="VC diag_mat_eq.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
   <goal name="VC diag_mat_eq.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC diag_mat_eq.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="diag_mat_def">
     <goal name="VC diag_mat_eq.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="diag_mat_def">
      <goal name="VC diag_mat_eq.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="VC diag_mat_eq.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make">
        <goal name="VC diag_mat_eq.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC diag_mat_eq.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.37"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC diag_mat_eq.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.32"/></proof>
        </goal>
        <goal name="VC diag_mat_eq.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.30"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC diag_mat_eq.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.45"/></proof>
       </goal>
       <goal name="VC diag_mat_eq.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.31"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC diag_mat_eq.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="101"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC diag_mat_eq.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC id_mat" expl="VC for id_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC id_mat.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="97"/></proof>
  </goal>
  <goal name="VC id_mat.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC id_mat.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="diagonal_def">
    <goal name="VC id_mat.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC id_mat.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="diag_mat_def">
      <goal name="VC id_mat.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make">
       <goal name="VC id_mat.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="VC id_mat.1.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="114"/></proof>
       </goal>
       <goal name="VC id_mat.1.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="114"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC id_mat.1.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="114"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC id_mat.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="114"/></proof>
    </goal>
    <goal name="VC id_mat.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="114"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC id_mat.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="105"/></proof>
  </goal>
  <goal name="VC id_mat.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_id_mat" expl="VC for set_id_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_id_mat.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC set_id_mat.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_mat">
    <goal name="VC set_id_mat.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="diag_mat_spec1">
     <goal name="VC set_id_mat.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="99"/></proof>
     </goal>
     <goal name="VC set_id_mat.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="97"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_id_mat.0.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.41"/></proof>
    </goal>
    <goal name="VC set_id_mat.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_id_mat.0.0.2.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="id_mat_def">
      <goal name="VC set_id_mat.0.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="1.22"/></proof>
      </goal>
      <goal name="VC set_id_mat.0.0.2.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC id_mat_prod_r" expl="VC for id_mat_prod_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC id_mat_prod_r.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC id_mat_prod_r.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.30"/></proof>
   </goal>
   <goal name="VC id_mat_prod_r.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.43"/></proof>
   </goal>
   <goal name="VC id_mat_prod_r.0.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC id_mat_prod_r.0.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="VC id_mat_prod_r.0.2.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get (id_mat n) i k *. get m k j),0,(columns (id_mat n)),i">
      <goal name="VC id_mat_prod_r.0.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC id_mat_prod_r.0.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="id_mat_def">
         <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="diag_mat_values">
          <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.17" steps="104"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.13" steps="101"/></proof>
          </goal>
          <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.37"/></proof>
          </goal>
          <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.30"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC id_mat_prod_r.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="101"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC id_mat_prod_r.0.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.36"/></proof>
       </goal>
       <goal name="VC id_mat_prod_r.0.2.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.88"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC id_mat_prod_r.0.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="103"/></proof>
     </goal>
     <goal name="VC id_mat_prod_r.0.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="101"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC id_mat_prod_l" expl="VC for id_mat_prod_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC id_mat_prod_l.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
  </goal>
  <goal name="VC id_mat_prod_l.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
  </goal>
  <goal name="VC id_mat_prod_l.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="107"/></proof>
  </goal>
  <goal name="VC id_mat_prod_l.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC id_mat_prod_l.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC id_mat_prod_l.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC id_mat_prod_l.4.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="107"/></proof>
   </goal>
   <goal name="VC id_mat_prod_l.4.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="107"/></proof>
   </goal>
   <goal name="VC id_mat_prod_l.4.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC id_mat_prod_l.4.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_mult_values">
     <goal name="VC id_mat_prod_l.4.2.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="ind_sum_null_but_maybe_one_elt" arg2="(fun (k:int) -&gt; get m i k *. get (id_mat n) k j),0,(columns m),j">
      <goal name="VC id_mat_prod_l.4.2.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC id_mat_prod_l.4.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="id_mat_def">
         <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="diag_mat_values">
          <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.18" steps="112"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="(0 &lt;=&#39; i &lt;&#39; n)">
             <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.0.0.1.0" expl="true case (apply premises)" proved="true">
             <proof prover="6"><result status="valid" time="0.11" steps="109"/></proof>
             </goal>
             <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.0.0.1.1" expl="false case (apply premises)" proved="true">
             <proof prover="6"><result status="valid" time="0.10" steps="109"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.12" steps="109"/></proof>
          </goal>
          <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.15" steps="110"/></proof>
          </goal>
          <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.16" steps="110"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC id_mat_prod_l.4.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.11" steps="109"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC id_mat_prod_l.4.2.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.15" steps="110"/></proof>
       </goal>
       <goal name="VC id_mat_prod_l.4.2.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC id_mat_prod_l.4.2.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC id_mat_prod_l.4.2.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.30"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC id_mat_prod_l.4.2.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="109"/></proof>
     </goal>
     <goal name="VC id_mat_prod_l.4.2.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="109"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
