(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require HighOrd.
Require int.Int.

Axiom t : Type.
Parameter t_WhyType : WhyType t.
Existing Instance t_WhyType.

(* Why3 assumption *)
Definition terms := Z -> t.

Parameter zero: t.

Parameter add: t -> t -> t.

Axiom add_zero_left : forall (a:t), ((add zero a) = a).

Axiom add_zero_right : forall (a:t), ((add a zero) = a).

Axiom add_assoc :
  forall (a:t) (b:t) (c:t), ((add (add a b) c) = (add a (add b c))).

Parameter sum: (Z -> t) -> Z -> Z -> t.

Axiom sum_def :
  forall (f:Z -> t) (i:Z) (j:Z),
  ((j <= i)%Z -> ((sum f i j) = zero)) /\
  (~ (j <= i)%Z -> ((sum f i j) = (add (f i) (sum f (i + 1%Z)%Z j)))).

Axiom Sum_def_empty :
  forall (f:Z -> t) (i:Z) (j:Z), (j <= i)%Z -> ((sum f i j) = zero).

Axiom Sum_def_non_empty :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  ((sum f i j) = (add (f i) (sum f (i + 1%Z)%Z j))).

Axiom sum_right_extension :
  forall (f:Z -> t) (i:Z) (j:Z), (i < j)%Z ->
  ((sum f i j) = (add (sum f i (j - 1%Z)%Z) (f (j - 1%Z)%Z))).

Axiom sum_transitivity :
  forall (f:Z -> t) (i:Z) (k:Z) (j:Z), ((i <= k)%Z /\ (k <= j)%Z) ->
  ((sum f i j) = (add (sum f i k) (sum f k j))).

Axiom sum_eq :
  forall (f1:Z -> t) (f2:Z -> t) (i:Z) (j:Z),
  (forall (k:Z), ((i <= k)%Z /\ (k < j)%Z) -> ((f1 k) = (f2 k))) ->
  ((sum f1 i j) = (sum f2 i j)).

Axiom sum_lambda_eq :
  forall (f:Z -> t) (i:Z) (j:Z),
  ((sum f i j) = (sum (fun (k:Z) => (f k)) i j)).

Axiom sum_lambda_eq_comm :
  forall (f:Z -> t) (i:Z) (j:Z),
  ((sum (fun (k:Z) => (f k)) i j) = (sum f i j)).

Parameter f: Z -> t.

Parameter g: Z -> t.

Parameter i: Z.

Parameter j: Z.

Axiom H : ~ (j <= i)%Z.

(* Why3 goal *)
Theorem VC_sum_plus_sum :
  ((add (sum f i j) (sum g i j)) =
   (add (add (f i) (sum f (i + 1%Z)%Z j)) (add (g i) (sum g (i + 1%Z)%Z j)))) /\
  (((add (add (f i) (sum f (i + 1%Z)%Z j)) (add (g i) (sum g (i + 1%Z)%Z j)))
    =
    (add (f i) (add (sum f (i + 1%Z)%Z j) (add (g i) (sum g (i + 1%Z)%Z j))))) /\
   (((add (f i)
      (add (sum f (i + 1%Z)%Z j) (add (g i) (sum g (i + 1%Z)%Z j))))
     =
     (add (f i)
      (add (add (g i) (sum g (i + 1%Z)%Z j)) (sum f (i + 1%Z)%Z j)))) /\
    (((add (f i)
       (add (add (g i) (sum g (i + 1%Z)%Z j)) (sum f (i + 1%Z)%Z j)))
      =
      (add (f i)
       (add (g i) (add (sum g (i + 1%Z)%Z j) (sum f (i + 1%Z)%Z j))))) /\
     ((add (f i)
       (add (g i) (add (sum g (i + 1%Z)%Z j) (sum f (i + 1%Z)%Z j))))
      =
      (add (add (f i) (g i))
       (add (sum g (i + 1%Z)%Z j) (sum f (i + 1%Z)%Z j))))))).
Proof.


Qed.

