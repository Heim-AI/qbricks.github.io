(set-logic AUFNIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2: real arithmetic
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun real () ty)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-sort t 0)

(declare-fun t1 () ty)

(declare-fun tzero () t)

(declare-fun prefix_mndt (t) t)

(declare-fun infix_pldt (t t) t)

(declare-fun infix_mndt (t t) t)

;; infix -._def
  (assert
  (forall ((x t) (y t)) (= (infix_mndt x y) (infix_pldt x (prefix_mndt y)))))

;; opposite
  (assert (forall ((a t)) (= (infix_mndt a a) tzero)))

(declare-fun r_to_t (Real) t)

;; r_to_t_zero
  (assert (= (r_to_t 0.0) tzero))

(declare-fun real_part (t) Real)

(declare-fun im_part (t) Real)

(declare-fun real_ (t) Bool)

(declare-fun t2tb (Real) uni)

;; t2tb_sort
  (assert (forall ((x Real)) (sort real (t2tb x))))

(declare-fun tb2t (uni) Real)

;; BridgeL
  (assert (forall ((i Real)) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni)) (! (= (t2tb (tb2t j)) j) :pattern ((t2tb (tb2t j))) )))

;; real__def
  (assert
  (forall ((x t))
  (= (real_ x) (infix_eqeq real (t2tb (im_part x)) (t2tb 0.0)))))

(declare-fun infix_lseqdt (t t) Bool)

(declare-fun t2tb1 (t) uni)

;; t2tb_sort
  (assert (forall ((x t)) (sort t1 (t2tb1 x))))

(declare-fun tb2t1 (uni) t)

;; BridgeL
  (assert (forall ((i t)) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort t1 j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1 (tb2t1 j))) )))

;; infix <=._def
  (assert
  (forall ((x t) (y t))
  (= (infix_lseqdt x y)
  (or (and (real_ x) (and (real_ y) (<= (real_part x) (real_part y))))
  (infix_eqeq t1 (t2tb1 x) (t2tb1 y))))))

(declare-fun infix_lsdt (t t) Bool)

;; infix <._def
  (assert
  (forall ((x t) (y t))
  (= (infix_lsdt x y)
  (and (infix_lseqdt x y) (not (infix_eqeq t1 (t2tb1 x) (t2tb1 y)))))))

(declare-fun infix_gtdt (t t) Bool)

;; infix >._def
  (assert
  (forall ((x t) (y t))
  (= (infix_gtdt x y)
  (and (infix_lseqdt y x) (not (infix_eqeq t1 (t2tb1 x) (t2tb1 y)))))))

;; Asymm
  (assert
  (forall ((x t) (y t)) (=> (infix_lsdt x y) (not (infix_lsdt y x)))))

;; r_to_t_inf
  (assert
  (forall ((i Real) (j Real))
  (= (infix_lseqdt (r_to_t i) (r_to_t j)) (<= i j))))

(declare-fun pi1 () t)

;; pi_def
  (assert (infix_lsdt (r_to_t 3.0) pi1))

(declare-fun square_rt (t) t)

;; square_rt_infeq
  (assert
  (forall ((x t) (y t))
  (=> (real_ x)
  (=> (real_ y)
  (=> (and (infix_lseqdt tzero x) (infix_lseqdt x y)) (infix_lseqdt
  (square_rt x) (square_rt y)))))))

;; surjective_square_rt
  (assert
  (forall ((x t) (y t))
  (=> (real_ x)
  (=> (real_ y)
  (=> (infix_lseqdt tzero x) (and (= (square_rt x) (square_rt y)) (= x y)))))))

(declare-fun infix_mngt (ty ty) ty)

(assert
;; h
  (not false))
(check-sat)
