<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.4.1" alternative="noBV" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="arit.mlw"/>
<theory name="Div_Mod">
 <goal name="VC div_plus_one" expl="VC for div_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_plus_one.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC div_plus_one.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.27"/></proof>
   </goal>
   <goal name="VC div_plus_one.0.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.07"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_is_inf" expl="VC for mod_is_inf" proved="true">
 <proof prover="3"><result status="valid" time="0.70"/></proof>
 </goal>
 <goal name="VC zero_add" expl="VC for zero_add" proved="true">
 <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
 </goal>
 <goal name="VC add_zero" expl="VC for add_zero" proved="true">
 <proof prover="6"><result status="valid" time="0.18" steps="71"/></proof>
 </goal>
 <goal name="VC one_mult" expl="VC for one_mult" proved="true">
 <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
 </goal>
 <goal name="VC mult_one" expl="VC for mult_one" proved="true">
 <proof prover="6"><result status="valid" time="0.12" steps="71"/></proof>
 </goal>
 <goal name="VC add_eq" expl="VC for add_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.08" steps="73"/></proof>
 </goal>
 <goal name="VC mult_eq" expl="VC for mult_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.13" steps="73"/></proof>
 </goal>
 <goal name="VC add_eq_inv" expl="VC for add_eq_inv" proved="true">
 <proof prover="6"><result status="valid" time="0.07" steps="73"/></proof>
 </goal>
 <goal name="VC mult_eq_inv" expl="VC for mult_eq_inv" proved="true">
 <proof prover="6"><result status="valid" time="0.07" steps="73"/></proof>
 </goal>
 <goal name="VC bound_eq" expl="VC for bound_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_eq.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_eq_rev" expl="VC for bound_eq_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_eq_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_div_mod" expl="VC for unicity_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_div_mod.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="77"/></proof>
  </goal>
  <goal name="VC unicity_div_mod.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="81"/></proof>
  </goal>
  <goal name="VC unicity_div_mod.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_div" expl="VC for get_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_div.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC positive_div" expl="VC for positive_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC positive_div.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_mod_sim_bound" expl="VC for div_mod_sim_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_mod_sim_bound.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC div_mod_sim_bound.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="77"/></proof>
   </goal>
   <goal name="VC div_mod_sim_bound.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(d*q &lt;= (r-1) * (q))">
    <goal name="VC div_mod_sim_bound.0.1.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="79"/></proof>
    </goal>
    <goal name="VC div_mod_sim_bound.0.1.1" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="79"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_mod_sim_bound_gen_r" expl="VC for div_mod_sim_bound_gen_r" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_mod_sim_bound_gen_r.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC div_mod_sim_bound_gen_r.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="77"/></proof>
   </goal>
   <goal name="VC div_mod_sim_bound_gen_r.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="79"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_div_gen" expl="VC for unicity_div_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_div_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="81"/></proof>
  </goal>
  <goal name="VC unicity_div_gen.1" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,j,q,(i - (j * q))">
   <goal name="VC unicity_div_gen.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="83"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_mod" expl="VC for bound_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_mod.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bound_mod.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.22"/></proof>
   </goal>
   <goal name="VC bound_mod.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="73"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_eq" expl="VC for mod_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.10" steps="71"/></proof>
 </goal>
 <goal name="VC e_div_eq" expl="VC for e_div_eq" proved="true">
 <proof prover="6"><result status="valid" time="0.09" steps="71"/></proof>
 </goal>
 <goal name="VC decomp" expl="VC for decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC decomp.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_mod_eq" expl="VC for div_mod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_mod_eq.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="79"/></proof>
  </goal>
  <goal name="VC div_mod_eq.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="81"/></proof>
  </goal>
  <goal name="VC div_mod_eq.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="i" arg2="(div i q * q + mod i q)">
   <goal name="VC div_mod_eq.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="83"/></proof>
   </goal>
   <goal name="VC div_mod_eq.2.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="83"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_zero" expl="VC for mod_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_zero.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_plus_quotient" expl="VC for div_plus_quotient" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_plus_quotient.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(i+j),j,(div i j+1),(mod i j)">
   <goal name="VC div_plus_quotient.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.27"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_plus_fact_gen_div" expl="VC for div_plus_fact_gen_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_plus_fact_gen_div.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_plus_fact_gen_mod" expl="VC for mod_plus_fact_gen_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_plus_fact_gen_mod.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="VC mod_plus_fact_gen_mod.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="VC mod_plus_fact_gen_mod.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_plus_fact_gen_mod_left" expl="VC for mod_plus_fact_gen_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_plus_fact_gen_mod_left.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
  </goal>
  <goal name="VC mod_plus_fact_gen_mod_left.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_div" expl="VC for bound_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_div.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="79"/></proof>
  </goal>
  <goal name="VC bound_div.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC bound_div.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bound_div.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(div i q * q &lt;= i)">
    <goal name="VC bound_div.2.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.08" steps="84"/></proof>
    </goal>
    <goal name="VC bound_div.2.0.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(f &lt;= div i q)">
     <goal name="VC bound_div.2.0.1.0" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(div i q * q &lt; f *q)">
      <goal name="VC bound_div.2.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.08" steps="86"/></proof>
      </goal>
      <goal name="VC bound_div.2.0.1.0.1" expl="true case (postcondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="89"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC bound_div.2.0.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="86"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_upper_bound" expl="VC for mod_upper_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_upper_bound.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.19"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_div_gen" expl="VC for bound_div_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_div_gen.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_invariant" expl="VC for mod_invariant" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_invariant.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_inf" expl="VC for mod_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_inf.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mod" expl="VC for add_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mod.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
  </goal>
  <goal name="VC add_mod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="73"/></proof>
  </goal>
  <goal name="VC add_mod.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="75"/></proof>
  </goal>
  <goal name="VC add_mod.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="76"/></proof>
  </goal>
  <goal name="VC add_mod.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="76"/></proof>
  </goal>
  <goal name="VC add_mod.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="76"/></proof>
  </goal>
  <goal name="VC add_mod.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="76"/></proof>
  </goal>
  <goal name="VC add_mod.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="76"/></proof>
  </goal>
  <goal name="VC add_mod.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="78"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mod_eq" expl="VC for add_mod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mod_eq.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(mod (a + b) n)" arg2="(mod (mod a n + mod b n )n)">
   <goal name="VC add_mod_eq.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mod (c + d) n)" arg2="(mod (mod c n + mod d n )n)">
    <goal name="VC add_mod_eq.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mod_eq">
     <goal name="VC add_mod_eq.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="75"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC add_mod_eq.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="77"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC add_mod_eq.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="77"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC add_mod_left" expl="VC for add_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mod_left.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="71"/></proof>
  </goal>
  <goal name="VC add_mod_left.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="73"/></proof>
  </goal>
  <goal name="VC add_mod_left.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="73"/></proof>
  </goal>
  <goal name="VC add_mod_left.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC simpl_add_mod_left" expl="VC for simpl_add_mod_left" proved="true">
 <proof prover="6"><result status="valid" time="0.07" steps="73"/></proof>
 </goal>
 <goal name="VC add_mod_right" expl="VC for add_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC add_mod_right.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_left" expl="VC for mod_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_left.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="VC mod_mod_left.1" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall a b. (mod (j*a + b) j = mod b j))">
   <goal name="VC mod_mod_left.1.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="77"/></proof>
   </goal>
   <goal name="VC mod_mod_left.1.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mod_mod_left.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_mod" expl="VC for mult_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_mod.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="71"/></proof>
  </goal>
  <goal name="VC mult_mod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="73"/></proof>
  </goal>
  <goal name="VC mult_mod.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="75"/></proof>
  </goal>
  <goal name="VC mult_mod.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="77"/></proof>
  </goal>
  <goal name="VC mult_mod.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="77"/></proof>
  </goal>
  <goal name="VC mult_mod.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="77"/></proof>
  </goal>
  <goal name="VC mult_mod.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mult_mod.6.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.39" steps="79"/></proof>
   </goal>
   <goal name="VC mult_mod.6.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.37" steps="79"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_mod.7" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mult_mod.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC mult_mod.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC mult_mod.7.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC mult_mod.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="((div b c * c) + mod b c)" arg2="b">
       <goal name="VC mult_mod.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC mult_mod.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="assert" proved="true" arg1="(forall a b c . a+ (b+c) = a+b+c)">
         <goal name="VC mult_mod.7.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.40" steps="81"/></proof>
         </goal>
         <goal name="VC mult_mod.7.0.0.0.0.0.0.1" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="h">
          <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
           <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
            <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
            <transf name="assert" proved="true" arg1="(forall a b c . a+ (b+c) = a+b+c)">
             <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="0.43" steps="81"/></proof>
             </goal>
             <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0.1" expl="postcondition" proved="true">
             <transf name="assert" proved="true" arg1="(forall a b c . a* b + a*c= a*(b+c))">
              <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
              <proof prover="6"><result status="valid" time="0.39" steps="81"/></proof>
              </goal>
              <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0.1.1" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="h">
               <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0.1.1.0" expl="postcondition" proved="true">
               <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
                <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0.1.1.0.0" expl="postcondition" proved="true">
                <proof prover="0"><result status="valid" time="0.26"/></proof>
                </goal>
                <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.37" steps="81"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="6"><result status="valid" time="0.34" steps="81"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mult_mod.7.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.61" steps="81"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mult_mod.7.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.60" steps="81"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_mult" expl="VC for mod_mod_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_mult.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_mult_rev" expl="VC for mod_mod_mult_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_mult_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_i" expl="VC for mod_mod_i" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_i.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC binary_prod" expl="VC for binary_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC binary_prod.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_minus" expl="VC for mod_minus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_minus.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_mod_left" expl="VC for mult_mod_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_mod_left.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="VC mult_mod_left.1" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC mult_mod_left.1.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="((c * mod a c) * div b c)" arg2="(c * (mod  a c * div b c))">
    <goal name="VC mult_mod_left.1.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mod_plus_fact_gen_mod_left">
     <goal name="VC mult_mod_left.1.0.0.0" expl="assertion" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="73"/></proof>
     </goal>
     <goal name="VC mult_mod_left.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.08" steps="73"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC mult_mod_left.1.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="73"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mult_mod_left.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="75"/></proof>
  </goal>
  <goal name="VC mult_mod_left.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_mod_right" expl="VC for mult_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_mod_right.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_right" expl="VC for mod_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_right.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC mod_mod_right.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="79"/></proof>
  </goal>
  <goal name="VC mod_mod_right.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_rev" expl="VC for mod_mod_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_rev.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC mod_mod_rev.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="79"/></proof>
  </goal>
  <goal name="VC mod_mod_rev.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="79"/></proof>
  </goal>
  <goal name="VC mod_mod_rev.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="80"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_plus" expl="VC for mod_mod_plus" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_plus.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="73"/></proof>
  </goal>
  <goal name="VC mod_mod_plus.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_add_left" expl="VC for mod_mod_add_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_add_left.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(mod a c + b),c,mod(a+b)c,(div (mod a c + b) c)">
   <goal name="VC mod_mod_add_left.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC mod_mod_add_left.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="74"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="replace" proved="true" arg1="(mod (mod a c + b) c)" arg2="(mod (c*div a c + (mod a c + b)) c)">
   <goal name="VC mod_mod_add_left.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mod_eq">
    <goal name="VC mod_mod_add_left.0.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="((c * div a c) + (mod a c + b))" arg2="(((c * div a c) + mod a c) + b)">
     <goal name="VC mod_mod_add_left.0.0.0.0" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="decomp" arg2="a,c">
      <goal name="VC mod_mod_add_left.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.07" steps="73"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mod_mod_add_left.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.08" steps="71"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mod_mod_add_left.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="73"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_add_right" expl="VC for mod_mod_add_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_add_right.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_add_left_rev" expl="VC for mod_mod_add_left_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_add_left_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_add_right_rev" expl="VC for mod_mod_add_right_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_add_right_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mult_assoc" expl="VC for mult_assoc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mult_assoc.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="75"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_div" expl="VC for div_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_div.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC div_div.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="79"/></proof>
  </goal>
  <goal name="VC div_div.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC div_div.3" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="83"/></proof>
  </goal>
  <goal name="VC div_div.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC div_div.5" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="85"/></proof>
  </goal>
  <goal name="VC div_div.6" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="86"/></proof>
  </goal>
  <goal name="VC div_div.7" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="87"/></proof>
  </goal>
  <goal name="VC div_div.8" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="88"/></proof>
  </goal>
  <goal name="VC div_div.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="90"/></proof>
  </goal>
  <goal name="VC div_div.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="90"/></proof>
  </goal>
  <goal name="VC div_div.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="90"/></proof>
  </goal>
  <goal name="VC div_div.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="90"/></proof>
  </goal>
  <goal name="VC div_div.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="90"/></proof>
  </goal>
  <goal name="VC div_div.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="90"/></proof>
  </goal>
  <goal name="VC div_div.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="91"/></proof>
  </goal>
  <goal name="VC div_div.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC div_div.16.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.22"/></proof>
   </goal>
   <goal name="VC div_div.16.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="92"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC div_div.17" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="94"/></proof>
  </goal>
  <goal name="VC div_div.18" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC compat_order_div" expl="VC for compat_order_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC compat_order_div.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(div i&#39; j &lt; div i j)">
   <goal name="VC compat_order_div.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(div i&#39; j * j +j &lt;= div i j * j )">
    <goal name="VC compat_order_div.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.23"/></proof>
    </goal>
    <goal name="VC compat_order_div.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.24"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC compat_order_div.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="77"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_div" expl="VC for mod_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_div.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC mod_div.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="79"/></proof>
  </goal>
  <goal name="VC mod_div.2" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC mod_div.3" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="81"/></proof>
  </goal>
  <goal name="VC mod_div.4" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC mod_div.5" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="( mod (mod i (j * k)) j)" arg2="(mod i j)" arg3="in" arg4="H">
   <goal name="VC mod_div.5.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="84"/></proof>
   </goal>
   <goal name="VC mod_div.5.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.38"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mod_div.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC mod_div.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_mul" expl="VC for inf_mul" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_mul.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="77"/></proof>
  </goal>
  <goal name="VC inf_mul.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="VC inf_mul.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="79"/></proof>
  </goal>
  <goal name="VC inf_mul.3" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="80"/></proof>
  </goal>
  <goal name="VC inf_mul.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="81"/></proof>
  </goal>
  <goal name="VC inf_mul.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="83"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_mul_gen" expl="VC for inf_mul_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_mul_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_mul_gen_b" expl="VC for inf_mul_gen_b" proved="true">
 <proof prover="6"><result status="valid" time="0.10" steps="79"/></proof>
 </goal>
 <goal name="VC inf_mul_comm" expl="VC for inf_mul_comm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_mul_comm.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="81"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_div_mod" expl="VC for indic_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_div_mod.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC indic_div_mod.0.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="77"/></proof>
   </goal>
   <goal name="VC indic_div_mod.0.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="77"/></proof>
   </goal>
   <goal name="VC indic_div_mod.0.2" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="81"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC indic_div_mod.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.25"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC indic_div_mod_gen" expl="VC for indic_div_mod_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC indic_div_mod_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="77"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_inf" expl="VC for set_inf" proved="true">
 <proof prover="6"><result status="valid" time="0.09" steps="71"/></proof>
 </goal>
 <goal name="VC set_infeq" expl="VC for set_infeq" proved="true">
 <proof prover="6"><result status="valid" time="0.09" steps="71"/></proof>
 </goal>
 <goal name="VC bounded_cycle" expl="VC for bounded_cycle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bounded_cycle.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="81"/></proof>
  </goal>
  <goal name="VC bounded_cycle.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bounded_cycle.1.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="82"/></proof>
   </goal>
   <goal name="VC bounded_cycle.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.23"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bounded_cycle.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="82"/></proof>
  </goal>
  <goal name="VC bounded_cycle.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="83"/></proof>
  </goal>
  <goal name="VC bounded_cycle.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="83"/></proof>
  </goal>
  <goal name="VC bounded_cycle.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="83"/></proof>
  </goal>
  <goal name="VC bounded_cycle.6" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="86"/></proof>
  </goal>
  <goal name="VC bounded_cycle.7" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC bounded_cycle.7.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(div a c)" arg2="0">
    <goal name="VC bounded_cycle.7.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(((a * b) + d) &lt;(b * c))">
     <goal name="VC bounded_cycle.7.0.0.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.38"/></proof>
     </goal>
     <goal name="VC bounded_cycle.7.0.0.1" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="85"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC bounded_cycle.7.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="83"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC bounded_cycle.7.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="86"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_mod_minus" expl="VC for div_mod_minus">
 <transf name="split_vc" >
  <goal name="VC div_mod_minus.0" expl="postcondition">
  <transf name="case" arg1="(a=0)">
   <goal name="VC div_mod_minus.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="73"/></proof>
   </goal>
   <goal name="VC div_mod_minus.0.1" expl="false case (postcondition)">
   <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <transf name="replace" arg1="(mod (-a) b)" arg2="(b- a)">
    <goal name="VC div_mod_minus.0.1.0" expl="false case (postcondition)">
    <proof prover="0"><result status="timeout" time="5.00"/></proof>
    <proof prover="1"><result status="timeout" time="5.00"/></proof>
    <proof prover="2"><result status="timeout" time="5.00"/></proof>
    <proof prover="3"><result status="timeout" time="5.00"/></proof>
    <proof prover="4"><result status="timeout" time="5.00"/></proof>
    <proof prover="6"><result status="timeout" time="5.00"/></proof>
    <transf name="instantiate" arg1="unicity_div_mod" arg2="(-a),b,(-1),(b-a)">
     <goal name="VC div_mod_minus.0.1.0.0" expl="false case (postcondition)">
     <transf name="split_all_full" >
      <goal name="VC div_mod_minus.0.1.0.0.0" expl="false case (postcondition)">
      <transf name="rewrite" arg1="Hinst">
       <goal name="VC div_mod_minus.0.1.0.0.0.0" expl="false case (postcondition)">
       <proof prover="0"><result status="timeout" time="5.00"/></proof>
       <proof prover="3"><result status="timeout" time="5.00"/></proof>
       <proof prover="6"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC div_mod_minus.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="75"/></proof>
       </goal>
       <goal name="VC div_mod_minus.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="75"/></proof>
       </goal>
       <goal name="VC div_mod_minus.0.1.0.0.0.3" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC div_mod_minus.0.1.0.0.0.3.0">
        <proof prover="0"><result status="timeout" time="5.00"/></proof>
        <proof prover="1"><result status="timeout" time="5.00"/></proof>
        <proof prover="2"><result status="timeout" time="5.00"/></proof>
        <proof prover="3"><result status="timeout" time="5.00"/></proof>
        <proof prover="4"><result status="timeout" time="5.00"/></proof>
        <proof prover="6"><result status="timeout" time="5.00"/></proof>
        </goal>
        <goal name="VC div_mod_minus.0.1.0.0.0.3.1" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="75"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC div_mod_minus.0.1.1" expl="equality hypothesis">
    <proof prover="0"><result status="timeout" time="5.00"/></proof>
    <proof prover="1"><result status="timeout" time="5.00"/></proof>
    <proof prover="2"><result status="timeout" time="5.00"/></proof>
    <proof prover="3"><result status="timeout" time="5.00"/></proof>
    <proof prover="4"><result status="timeout" time="5.00"/></proof>
    <proof prover="6"><result status="timeout" time="5.00"/></proof>
    <transf name="instantiate" arg1="unicity_div_mod" arg2="(-a),b,(-1),(b-a)">
     <goal name="VC div_mod_minus.0.1.1.0" expl="equality hypothesis">
     <transf name="split_all_full" >
      <goal name="VC div_mod_minus.0.1.1.0.0" expl="equality hypothesis">
      <transf name="rewrite" arg1="Hinst">
       <goal name="VC div_mod_minus.0.1.1.0.0.0" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.08" steps="75"/></proof>
       </goal>
       <goal name="VC div_mod_minus.0.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.08" steps="75"/></proof>
       </goal>
       <goal name="VC div_mod_minus.0.1.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.20" steps="75"/></proof>
       </goal>
       <goal name="VC div_mod_minus.0.1.1.0.0.3" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC div_mod_minus.0.1.1.0.0.3.0">
        <proof prover="0"><result status="timeout" time="5.00"/></proof>
        <proof prover="1"><result status="timeout" time="5.00"/></proof>
        <proof prover="2"><result status="timeout" time="5.00"/></proof>
        <proof prover="3"><result status="timeout" time="5.00"/></proof>
        <proof prover="4"><result status="timeout" time="5.00"/></proof>
        <proof prover="6"><result status="timeout" time="5.00"/></proof>
        </goal>
        <goal name="VC div_mod_minus.0.1.1.0.0.3.1" proved="true">
        <proof prover="6"><result status="valid" time="0.09" steps="75"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mod_mod_iproduct" expl="VC for mod_mod_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mod_mod_iproduct.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mod_mod_iproduct.0.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="96"/></proof>
   </goal>
   <goal name="VC mod_mod_iproduct.0.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mod_mod_iproduct.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="93"/></proof>
  </goal>
  <goal name="VC mod_mod_iproduct.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="98"/></proof>
  </goal>
  <goal name="VC mod_mod_iproduct.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="97"/></proof>
  </goal>
  <goal name="VC mod_mod_iproduct.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="100"/></proof>
  </goal>
  <goal name="VC mod_mod_iproduct.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC mod_mod_iproduct.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.26"/></proof>
   </goal>
   <goal name="VC mod_mod_iproduct.5.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mod_mod_iproduct.5.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC mod_mod_iproduct.5.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC mod_mod_iproduct.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC mod_mod_iproduct.5.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(mod
  (mod (f @ choose s) b
   * iproduct (remove (choose s) s) (fun (i:a) -&gt; mod (f @ i) b))
  b)" arg2="(mod
  (mod (f @ choose s) b
   * mod (iproduct (remove (choose s) s) (fun (i:a) -&gt; mod (f @ i) b))b)
  b)">
        <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H2">
         <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="mod_mod_mult">
          <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="6"><result status="valid" time="0.08" steps="97"/></proof>
          </goal>
          <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.08" steps="97"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
         <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="mod_eq">
          <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="mult_eq">
            <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="100"/></proof>
            </goal>
            <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mod_mod_iproduct.5.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.08" steps="97"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ind_isum_mod_eq" expl="VC for ind_isum_mod_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ind_isum_mod_eq.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="91"/></proof>
  </goal>
  <goal name="VC ind_isum_mod_eq.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="92"/></proof>
  </goal>
  <goal name="VC ind_isum_mod_eq.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="92"/></proof>
  </goal>
  <goal name="VC ind_isum_mod_eq.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="98"/></proof>
  </goal>
  <goal name="VC ind_isum_mod_eq.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="94"/></proof>
  </goal>
  <goal name="VC ind_isum_mod_eq.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="96"/></proof>
  </goal>
  <goal name="VC ind_isum_mod_eq.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC ind_isum_mod_eq.6.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="VC ind_isum_mod_eq.6.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC ind_isum_mod_eq.6.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC ind_isum_mod_eq.6.1.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ind_isum_mod_eq.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC ind_isum_mod_eq.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC ind_isum_mod_eq.6.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="99"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Base_arit" proved="true">
 <goal name="VC power_minus_one" expl="VC for power_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC power_minus_one.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="91"/></proof>
  </goal>
  <goal name="VC power_minus_one.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="93"/></proof>
  </goal>
  <goal name="VC power_minus_one.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="93"/></proof>
  </goal>
  <goal name="VC power_minus_one.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="97"/></proof>
  </goal>
  <goal name="VC power_minus_one.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="96"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_right" expl="VC for kth_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_right.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66"/></proof>
  </goal>
  <goal name="VC kth_right.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="93"/></proof>
  </goal>
  <goal name="VC kth_right.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_right.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC kth_right.2.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_right_eq" expl="VC for kth_right_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_right_eq.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kth_right_def">
   <goal name="VC kth_right_eq.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right_def">
    <goal name="VC kth_right_eq.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC kth_right_eq.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ind_iproduct f ((h - k) + 1) h)" arg2="(ind_iproduct g ((h - k) + 1) h)">
      <goal name="VC kth_right_eq.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC kth_right_eq.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_eq">
       <goal name="VC kth_right_eq.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC kth_right_eq.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="97"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC kth_right_eq.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="91"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC kth_right_eq.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="91"/></proof>
    </goal>
    <goal name="VC kth_right_eq.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="91"/></proof>
    </goal>
    <goal name="VC kth_right_eq.0.0.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kth_right_eq.0.0.3.0" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.64"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_right_eq.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="91"/></proof>
   </goal>
   <goal name="VC kth_right_eq.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="91"/></proof>
   </goal>
   <goal name="VC kth_right_eq.0.3" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="97"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_right_trans" expl="VC for kth_right_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_right_trans.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_right_trans.0.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
   </goal>
   <goal name="VC kth_right_trans.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_right_trans.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
  </goal>
  <goal name="VC kth_right_trans.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.85"/></proof>
  </goal>
  <goal name="VC kth_right_trans.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.87"/></proof>
  </goal>
  <goal name="VC kth_right_trans.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC kth_right_trans.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right_def">
    <goal name="VC kth_right_trans.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC kth_right_trans.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="kth_right_def">
      <goal name="VC kth_right_trans.4.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
      </goal>
      <goal name="VC kth_right_trans.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="103"/></proof>
      </goal>
      <goal name="VC kth_right_trans.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="103"/></proof>
      </goal>
      <goal name="VC kth_right_trans.4.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.18" steps="109"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC kth_right_trans.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="1.06"/></proof>
    </goal>
    <goal name="VC kth_right_trans.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="103"/></proof>
    </goal>
    <goal name="VC kth_right_trans.4.0.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="109"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_left" expl="VC for kth_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_left.0" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="kth_right_def">
   <goal name="VC kth_left.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right_def">
    <goal name="VC kth_left.0.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (ind:int) -&gt; if l &lt;= ind /\ ind &lt; h then f @ ind else 1)
    ((h - (((h - l) - k) + 1)) + 1) h)" arg2="(ind_iproduct
    (fun (ind:int) -&gt; f @ ind)
    ((h - (((h - l) - k) + 1)) + 1) h)">
     <goal name="VC kth_left.0.0.0.0" expl="assertion" proved="true">
     <proof prover="0"><result status="valid" time="0.27"/></proof>
     </goal>
     <goal name="VC kth_left.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.88"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC kth_left.0.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kth_left.0.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="95"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC kth_left.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.09" steps="95"/></proof>
    </goal>
    <goal name="VC kth_left.0.0.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kth_left.0.0.3.0" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.29"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_left.0.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="95"/></proof>
   </goal>
   <goal name="VC kth_left.0.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
   </goal>
   <goal name="VC kth_left.0.3" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kth_left.0.3.0" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="1.74"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="97"/></proof>
  </goal>
  <goal name="VC kth_left.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="97"/></proof>
  </goal>
  <goal name="VC kth_left.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC kth_left.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.42"/></proof>
  </goal>
  <goal name="VC kth_left.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_left.5.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="103"/></proof>
   </goal>
   <goal name="VC kth_left.5.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="103"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_left_eq" expl="VC for kth_left_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_left_eq.0" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC kth_left_eq.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="kth_left_spec2">
    <goal name="VC kth_left_eq.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
    </goal>
    <goal name="VC kth_left_eq.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
    </goal>
    <goal name="VC kth_left_eq.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
    </goal>
    <goal name="VC kth_left_eq.0.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC kth_left_eq.0.0.3.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.05"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left_eq.1" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.69"/></proof>
  </goal>
  <goal name="VC kth_left_eq.2" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.73"/></proof>
  </goal>
  <goal name="VC kth_left_eq.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_left_to_mod_div" expl="VC for kth_left_to_mod_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_left_to_mod_div.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.34"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_left_trans" expl="VC for kth_left_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_left_trans.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="95"/></proof>
  </goal>
  <goal name="VC kth_left_trans.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="95"/></proof>
  </goal>
  <goal name="VC kth_left_trans.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_left_trans.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="95"/></proof>
   </goal>
   <goal name="VC kth_left_trans.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left_trans.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_left_trans.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="102"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left_trans.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC kth_left_trans.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC kth_left_trans.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="101"/></proof>
  </goal>
  <goal name="VC kth_left_trans.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_left_trans.7.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="101"/></proof>
   </goal>
   <goal name="VC kth_left_trans.7.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left_trans.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_left_trans.8.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="108"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left_trans.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="101"/></proof>
  </goal>
  <goal name="VC kth_left_trans.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC kth_left_trans.11" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.32"/></proof>
  </goal>
  <goal name="VC kth_left_trans.12" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC kth_left_trans.12.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="97"/></proof>
   </goal>
   <goal name="VC kth_left_trans.12.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC kth_left_trans.12.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC kth_left_trans.12.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H4">
      <goal name="VC kth_left_trans.12.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC kth_left_trans.12.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="case" proved="true" arg1="( (l + k) &lt; (h - 1))">
        <goal name="VC kth_left_trans.12.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="H2">
         <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="mod_eq">
          <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="div_div">
           <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(ind_iproduct f (l + k) h1)" arg2="((ind_iproduct f (l + k) ((h1 - 1) - 1) * (f @ ((h1 - 1) - 1)))
     * (f @ (h1 - 1)))">
            <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.09" steps="106"/></proof>
            </goal>
            <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.18" steps="108"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.11" steps="106"/></proof>
           </goal>
           <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="assert" proved="true" arg1="(forall a b. 0&lt;a -&gt; 0&lt;b -&gt; 0&lt; a*b)">
            <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2.0" expl="asserted formula" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="0.11" steps="110"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="h">
             <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
              <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="0.42"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.43"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC kth_left_trans.12.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.47"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC kth_left_trans.12.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.09" steps="106"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC kth_left_trans.12.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.41"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_isum_exponents" expl="VC for div_isum_exponents" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_isum_exponents.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="97"/></proof>
  </goal>
  <goal name="VC div_isum_exponents.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="99"/></proof>
  </goal>
  <goal name="VC div_isum_exponents.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="101"/></proof>
  </goal>
  <goal name="VC div_isum_exponents.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="103"/></proof>
  </goal>
  <goal name="VC div_isum_exponents.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="105"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC divp" expl="VC for divp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divp.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="91"/></proof>
  </goal>
  <goal name="VC divp.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="VC divp.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC divp.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="95"/></proof>
   </goal>
   <goal name="VC divp.2.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.27"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC divp.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC divp.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_right_div_mod" expl="VC for kth_right_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_right_div_mod.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="93"/></proof>
  </goal>
  <goal name="VC kth_right_div_mod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
  </goal>
  <goal name="VC kth_right_div_mod.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.80"/></proof>
  </goal>
  <goal name="VC kth_right_div_mod.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
  </goal>
  <goal name="VC kth_right_div_mod.4" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=1)">
   <goal name="VC kth_right_div_mod.4.0" expl="true case (postcondition)" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC kth_right_div_mod.4.0.0" expl="true case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="VC kth_right_div_mod.4.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="kth_right_def">
      <goal name="VC kth_right_div_mod.4.0.0.0.0" expl="true case (postcondition)" proved="true">
      <proof prover="0"><result status="valid" time="0.41"/></proof>
      </goal>
      <goal name="VC kth_right_div_mod.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.09" steps="93"/></proof>
      </goal>
      <goal name="VC kth_right_div_mod.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="93"/></proof>
      </goal>
      <goal name="VC kth_right_div_mod.4.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC kth_right_div_mod.4.0.0.1" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="kth_right_def">
      <goal name="VC kth_right_div_mod.4.0.0.1.0" expl="true case (postcondition)" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC kth_right_div_mod.4.0.0.1.0.0" expl="true case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC kth_right_div_mod.4.0.0.1.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="((f @ ((h1 - k) + 1)) * ind_iproduct f (((h1 - k) + 1) + 1) h1)" arg2="(ind_iproduct f ((h1 - k) + 1) h1)">
         <goal name="VC kth_right_div_mod.4.0.0.1.0.0.0.0" expl="true case (postcondition)" proved="true">
         <proof prover="3"><result status="valid" time="0.53"/></proof>
         </goal>
         <goal name="VC kth_right_div_mod.4.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC kth_right_div_mod.4.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.09" steps="97"/></proof>
      </goal>
      <goal name="VC kth_right_div_mod.4.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
      </goal>
      <goal name="VC kth_right_div_mod.4.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.17" steps="103"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_right_div_mod.4.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC kth_right_div_mod.4.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="93"/></proof>
    </goal>
    <goal name="VC kth_right_div_mod.4.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC kth_right_div_mod.4.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC kth_right_div_mod.4.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="kth_right_def">
       <goal name="VC kth_right_div_mod.4.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC kth_right_div_mod.4.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <proof prover="0"><result status="valid" time="0.36"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC kth_right_div_mod.4.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.09" steps="97"/></proof>
       </goal>
       <goal name="VC kth_right_div_mod.4.1.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
       </goal>
       <goal name="VC kth_right_div_mod.4.1.1.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.15" steps="103"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_head" expl="VC for kth_head" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_head.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.78"/></proof>
  </goal>
  <goal name="VC kth_head.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="95"/></proof>
  </goal>
  <goal name="VC kth_head.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC kth_head.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="kth_right_def">
    <goal name="VC kth_head.2.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="2.28" steps="100"/></proof>
    </goal>
    <goal name="VC kth_head.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="98"/></proof>
    </goal>
    <goal name="VC kth_head.2.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="98"/></proof>
    </goal>
    <goal name="VC kth_head.2.0.3" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="104"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC weighted_kth_right" expl="VC for weighted_kth_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC weighted_kth_right.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="91"/></proof>
  </goal>
  <goal name="VC weighted_kth_right.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="91"/></proof>
  </goal>
  <goal name="VC weighted_kth_right.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC weighted_kth_right_" expl="VC for weighted_kth_right_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC weighted_kth_right_.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="93"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="93"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="95"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.98"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="97"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.69"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="101"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
  </goal>
  <goal name="VC weighted_kth_right_.9" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=1)">
   <goal name="VC weighted_kth_right_.9.0" expl="true case (postcondition)" proved="true">
   <proof prover="0"><result status="valid" time="0.31"/></proof>
   </goal>
   <goal name="VC weighted_kth_right_.9.1" expl="false case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC weighted_kth_right_.9.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC weighted_kth_right_.9.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC weighted_kth_right_.9.1.0.0.0" expl="false case (postcondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.08" steps="93"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC weighted_kth_right_.9.1.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC weighted_kth_right_.9.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC weighted_kth_right_.9.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC weighted_kth_right_.9.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="apply" proved="true" arg1="add_eq">
        <goal name="VC weighted_kth_right_.9.1.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.30"/></proof>
        </goal>
        <goal name="VC weighted_kth_right_.9.1.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.10" steps="101"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_right_decomposition" expl="VC for kth_right_decomposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_right_decomposition.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="93"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="93"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="95"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_right_decomposition.3.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="95"/></proof>
   </goal>
   <goal name="VC kth_right_decomposition.3.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_right_decomposition.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="95"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="95"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="98"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="99"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="101"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
  </goal>
  <goal name="VC kth_right_decomposition.10" expl="assertion" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC kth_right_decomposition.10.0" expl="destruct premise" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="97"/></proof>
   </goal>
   <goal name="VC kth_right_decomposition.10.1" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC kth_right_decomposition.10.1.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="((h - k) + 1)" arg2="(h - (k - 1))">
     <goal name="VC kth_right_decomposition.10.1.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(weighted_kth_right i k h f + mod i (ind_iproduct f ((h - k) + 1) h))" arg2="(mod i (ind_iproduct f (h - k) h))">
      <goal name="VC kth_right_decomposition.10.1.0.0.0" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(weighted_kth_right i k h f + mod i (ind_iproduct f (h - (k - 1)) h))" arg2="( mod i (ind_iproduct f (h - k) h))">
       <goal name="VC kth_right_decomposition.10.1.0.0.0.0" expl="assertion" proved="true">
       <transf name="replace" proved="true" arg1="(ind_isum (fun (a:int) -&gt; weighted_kth_right i a h f) 1 (k + 1))" arg2="( ind_isum (fun (a:int) -&gt; if 1 &lt;= a then weighted_kth_right i a h f else 0)
  1 (k + 1))">
        <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="rewrite" proved="true" arg1="H">
         <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0" expl="assertion" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0" expl="assertion" proved="true">
          <transf name="replace" proved="true" arg1="(ind_isum
     (fun (a:int) -&gt; if 1 &lt;= a then weighted_kth_right i a h f else 0) 1 k)" arg2="(ind_isum
     (fun (a:int) -&gt;  weighted_kth_right i a h f ) 1 k)">
           <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
           <transf name="rewrite" proved="true" arg1="H2">
            <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
            <transf name="apply" proved="true" arg1="add_eq_inv">
             <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
             </goal>
             <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="((h - k) + 1)" arg2="(h - (k - 1))">
              <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="H1">
               <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
                <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.42"/></proof>
                </goal>
                <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.09" steps="99"/></proof>
                </goal>
                <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
            <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.35"/></proof>
            </goal>
            <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.18" steps="99"/></proof>
            </goal>
            <goal name="VC kth_right_decomposition.10.1.0.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC kth_right_decomposition.10.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ind_isum_eq_gen">
         <goal name="VC kth_right_decomposition.10.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.31"/></proof>
         </goal>
         <goal name="VC kth_right_decomposition.10.1.0.0.0.0.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
         </goal>
         <goal name="VC kth_right_decomposition.10.1.0.0.0.0.1.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC kth_right_decomposition.10.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="99"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kth_right_decomposition.10.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC kth_right_decomposition.10.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_right_decomposition.11" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k=1)">
   <goal name="VC kth_right_decomposition.11.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="ind_isum_one">
    <goal name="VC kth_right_decomposition.11.0.0" expl="true case (postcondition)" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC kth_right_decomposition.11.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="0"><result status="valid" time="0.34"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC kth_right_decomposition.11.0.1" expl="rewrite premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC kth_right_decomposition.11.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="93"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_right_decomposition.11.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC kth_right_decomposition.11.1.0" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC kth_right_decomposition.11.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="VC kth_right_decomposition.11.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="H2">
       <goal name="VC kth_right_decomposition.11.1.0.0.0.0" expl="false case (postcondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="93"/></proof>
       </goal>
       <goal name="VC kth_right_decomposition.11.1.0.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="95"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC kth_right_decomposition.11.1.0.0.1" expl="false case (postcondition)" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_left_div_mod" expl="VC for kth_left_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_left_div_mod.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="97"/></proof>
  </goal>
  <goal name="VC kth_left_div_mod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="97"/></proof>
  </goal>
  <goal name="VC kth_left_div_mod.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="99"/></proof>
  </goal>
  <goal name="VC kth_left_div_mod.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="kth_left_def">
   <goal name="VC kth_left_div_mod.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.47"/></proof>
   </goal>
   <goal name="VC kth_left_div_mod.3.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="99"/></proof>
   </goal>
   <goal name="VC kth_left_div_mod.3.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="99"/></proof>
   </goal>
   <goal name="VC kth_left_div_mod.3.3" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kth_left_div_mod.3.3.0" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="99"/></proof>
    </goal>
    <goal name="VC kth_left_div_mod.3.3.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="99"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kth_left_div_mod.3.4" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC kth_left_div_mod.3.4.0" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="105"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC weighted_kth_left" expl="VC for weighted_kth_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC weighted_kth_left.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="95"/></proof>
  </goal>
  <goal name="VC weighted_kth_left.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="97"/></proof>
  </goal>
  <goal name="VC weighted_kth_left.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC weighted_kth_left_" expl="VC for weighted_kth_left_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC weighted_kth_left_.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="95"/></proof>
  </goal>
  <goal name="VC weighted_kth_left_.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="96"/></proof>
  </goal>
  <goal name="VC weighted_kth_left_.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="98"/></proof>
  </goal>
  <goal name="VC weighted_kth_left_.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bounded_kth_left_decomposition" expl="VC for bounded_kth_left_decomposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bounded_kth_left_decomposition.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="95"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="95"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="98"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.5" expl="precondition" proved="true">
  <transf name="compute_hyp" proved="true" >
   <goal name="VC bounded_kth_left_decomposition.5.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(h-l+1-e&#39;)">
    <goal name="VC bounded_kth_left_decomposition.5.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bounded_kth_left_decomposition.5.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.40"/></proof>
     </goal>
     <goal name="VC bounded_kth_left_decomposition.5.0.0.1" proved="true">
     <proof prover="6"><result status="valid" time="0.09" steps="105"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="109"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="111"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="109"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.72"/></proof>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.10" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(h - (((h - l) - k) + 1))" arg2="((l + k) - 1)" arg3="in" arg4="H9">
   <goal name="VC bounded_kth_left_decomposition.10.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H9">
    <goal name="VC bounded_kth_left_decomposition.10.0.0" expl="assertion" proved="true">
    <transf name="replace" proved="true" arg1="( ind_isum (fun (a:int) -&gt; weighted_kth_right i a h f) 1
  ((((h - l) - k) + 1) + 1))" arg2="(ind_isum (fun (a:int) -&gt; if 1 &lt;= a then weighted_kth_right i a h f else 0)
  1 (((h - l) - k) + 2))">
     <goal name="VC bounded_kth_left_decomposition.10.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC bounded_kth_left_decomposition.10.0.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="ind_isum_eq">
       <goal name="VC bounded_kth_left_decomposition.10.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC bounded_kth_left_decomposition.10.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC bounded_kth_left_decomposition.10.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.32"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC bounded_kth_left_decomposition.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="5.71"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bounded_kth_left_decomposition.10.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.08" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bounded_kth_left_decomposition.11" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC bounded_kth_left_decomposition.11.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_isum_eq">
    <goal name="VC bounded_kth_left_decomposition.11.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC bounded_kth_left_decomposition.11.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.37"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kth_left_decomposition" expl="VC for kth_left_decomposition" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kth_left_decomposition.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="93"/></proof>
  </goal>
  <goal name="VC kth_left_decomposition.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="93"/></proof>
  </goal>
  <goal name="VC kth_left_decomposition.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_left_decomposition.2.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="94"/></proof>
   </goal>
   <goal name="VC kth_left_decomposition.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="94"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left_decomposition.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC kth_left_decomposition.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="98"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kth_left_decomposition.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.97"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Evenness" proved="true">
 <goal name="VC odd" expl="VC for odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC odd.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="87"/></proof>
  </goal>
  <goal name="VC odd.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="89"/></proof>
  </goal>
  <goal name="VC odd.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="89"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC even" expl="VC for even" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC even.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="87"/></proof>
  </goal>
  <goal name="VC even.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC even.1.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="91"/></proof>
   </goal>
   <goal name="VC even.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="91"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC even_to_mod" expl="VC for even_to_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC even_to_mod.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC even_minus_one" expl="VC for even_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC even_minus_one.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="3.66"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC odd_minus_one" expl="VC for odd_minus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC odd_minus_one.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC even_opp" expl="VC for even_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC even_opp.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC even_opp.0.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(mod (-n) 2 = 0)">
    <goal name="VC even_opp.0.0.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="0.98"/></proof>
    </goal>
    <goal name="VC even_opp.0.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.30"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC odd_opp" expl="VC for odd_opp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC odd_opp.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (-n) 2 = 1)">
   <goal name="VC odd_opp.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.88"/></proof>
   </goal>
   <goal name="VC odd_opp.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC odd_to_mod" expl="VC for odd_to_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC odd_to_mod.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="even_or_odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="even_or_odd.0" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="91"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_minus_c_one" expl="VC for cpower_minus_c_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_minus_c_one.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="131"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one.3" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="138"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one.4" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="138"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_minus_c_one_even" expl="VC for cpower_minus_c_one_even" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_minus_c_one_even.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="129"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one_even.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cpower_minus_c_one_odd" expl="VC for cpower_minus_c_one_odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cpower_minus_c_one_odd.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="129"/></proof>
  </goal>
  <goal name="VC cpower_minus_c_one_odd.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC iproduct_extract_const" expl="VC for iproduct_extract_const" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC iproduct_extract_const.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="129"/></proof>
  </goal>
  <goal name="VC iproduct_extract_const.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC iproduct_extract_const.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="131"/></proof>
  </goal>
  <goal name="VC iproduct_extract_const.3" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="VC iproduct_extract_const.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC iproduct_extract_const.4.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.44"/></proof>
   </goal>
   <goal name="VC iproduct_extract_const.4.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC iproduct_extract_const.4.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC iproduct_extract_const.4.1.0.0" expl="postcondition" proved="true">
     <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H3">
      <goal name="VC iproduct_extract_const.4.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC iproduct_extract_const.4.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="VC iproduct_extract_const.4.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="0"><result status="valid" time="0.44"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Divisors">
 <goal name="VC divisors" expl="VC for divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
  </goal>
  <goal name="VC divisors.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC divisors.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="140"/></proof>
  </goal>
  <goal name="VC divisors.3" expl="postcondition" proved="true">
  <transf name="exists" proved="true" arg1="(div i j)">
   <goal name="VC divisors.3.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC divisors.3.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.36"/></proof>
    </goal>
    <goal name="VC divisors.3.0.1" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="140"/></proof>
    </goal>
    <goal name="VC divisors.3.0.2" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="140"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(((fun (j1:int) -&gt; (1 &lt;= j1 /\ j1 &lt;= i) /\ mod i j1 = 0) @ j))">
   <goal name="VC divisors.4.0" expl="asserted formula" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC divisors.4.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="142"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors.4.1" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
    <goal name="VC divisors.4.1.0" expl="postcondition" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H9">
     <goal name="VC divisors.4.1.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC divisors.4.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H13">
       <goal name="VC divisors.4.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.31" steps="144"/></proof>
       </goal>
       <goal name="VC divisors.4.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="142"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors.5" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(((fun (j1:int) -&gt; (1 &lt;= j1 /\ j1 &lt;= i) /\ mod i j1 = 0) @ j))">
   <goal name="VC divisors.5.0" expl="asserted formula" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC divisors.5.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.40"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors.5.1" expl="postcondition" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="h">
    <goal name="VC divisors.5.1.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_mem_divisors" expl="VC for set_mem_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_mem_divisors.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_mem_divisors.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="divisors_def">
    <goal name="VC set_mem_divisors.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="VC set_mem_divisors.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="140"/></proof>
     </goal>
     <goal name="VC set_mem_divisors.0.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC set_mem_divisors.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="138"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_mem_divisors.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="138"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_mem_divisors_mod" expl="VC for get_mem_divisors_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_mem_divisors_mod.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_mem_divisors_bounds" expl="VC for get_mem_divisors_bounds" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_mem_divisors_bounds.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_mem_divisors_inf" expl="VC for get_mem_divisors_inf" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_mem_divisors_inf.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_mem_divisors" expl="VC for get_mem_divisors" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="130"/></proof>
 </goal>
 <goal name="VC in_divisors_mult" expl="VC for in_divisors_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC in_divisors_mult.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
  </goal>
  <goal name="VC in_divisors_mult.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
  </goal>
  <goal name="VC in_divisors_mult.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
  </goal>
  <goal name="VC in_divisors_mult.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC in_divisors_mult.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="138"/></proof>
   </goal>
   <goal name="VC in_divisors_mult.3.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(j&lt;=j*k)">
    <goal name="VC in_divisors_mult.3.1.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="140"/></proof>
    </goal>
    <goal name="VC in_divisors_mult.3.1.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="140"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC in_divisors_mult.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(j*k),i,(div j i*k),0">
   <goal name="VC in_divisors_mult.4.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC in_divisors_mult.4.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC in_divisors_mult.4.0.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="140"/></proof>
     </goal>
     <goal name="VC in_divisors_mult.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="140"/></proof>
     </goal>
     <goal name="VC in_divisors_mult.4.0.0.2" expl="rewrite premises" proved="true">
     <transf name="assert" proved="true" arg1="(j = div j i* i)">
      <goal name="VC in_divisors_mult.4.0.0.2.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
      </goal>
      <goal name="VC in_divisors_mult.4.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="142"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC in_divisors_mult.4.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="140"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC in_divisors_mult.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC in_divisors_powers" expl="VC for in_divisors_powers" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC in_divisors_powers.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="137"/></proof>
  </goal>
  <goal name="VC in_divisors_powers.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="139"/></proof>
  </goal>
  <goal name="VC in_divisors_powers.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="139"/></proof>
  </goal>
  <goal name="VC in_divisors_powers.3" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(power_ a b * power_ a (b&#39; - b))" arg2="(power_ a b&#39;)" arg3="in" arg4="H">
   <goal name="VC in_divisors_powers.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="137"/></proof>
   </goal>
   <goal name="VC in_divisors_powers.3.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC powers_in_divisors" expl="VC for powers_in_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC powers_in_divisors.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="137"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="139"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="139"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.4" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="139"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="141"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="143"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
  </goal>
  <goal name="VC powers_in_divisors.9" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC not_powers_in_divisors" expl="VC for not_powers_in_divisors" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="137"/></proof>
 </goal>
 <goal name="VC itself_divisors" expl="VC for itself_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC itself_divisors.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC itself_divisors.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="VC itself_divisors.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="132"/></proof>
    </goal>
    <goal name="VC itself_divisors.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="132"/></proof>
    </goal>
    <goal name="VC itself_divisors.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.30" steps="134"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_div_rev" expl="VC for unicity_div_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_div_rev.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i = div i j * j + mod i j)">
   <goal name="VC unicity_div_rev.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.36"/></proof>
   </goal>
   <goal name="VC unicity_div_rev.0.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(mod i j )" arg2="0" arg3="in" arg4="h">
    <goal name="VC unicity_div_rev.0.1.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
    </goal>
    <goal name="VC unicity_div_rev.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC unicity_div_rev.0.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="divisors_def" arg2="in" arg3="H1">
      <goal name="VC unicity_div_rev.0.1.1.0.0" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="140"/></proof>
      </goal>
      <goal name="VC unicity_div_rev.0.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="138"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mem_own_divisors" expl="VC for mem_own_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mem_own_divisors.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="VC mem_own_divisors.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="127"/></proof>
   </goal>
   <goal name="VC mem_own_divisors.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="127"/></proof>
   </goal>
   <goal name="VC mem_own_divisors.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.32" steps="129"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mem_one_divisors" expl="VC for mem_one_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mem_one_divisors.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="129"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC trivial_divisors_left" expl="VC for trivial_divisors_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC trivial_divisors_left.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC trivial_divisors_left.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="129"/></proof>
  </goal>
  <goal name="VC trivial_divisors_left.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="130"/></proof>
  </goal>
  <goal name="VC trivial_divisors_left.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="VC trivial_divisors_left.3.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
   </goal>
   <goal name="VC trivial_divisors_left.3.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="135"/></proof>
   </goal>
   <goal name="VC trivial_divisors_left.3.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC trivial_divisors_right" expl="VC for trivial_divisors_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC trivial_divisors_right.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="129"/></proof>
  </goal>
  <goal name="VC trivial_divisors_right.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="129"/></proof>
  </goal>
  <goal name="VC trivial_divisors_right.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_not_prime" expl="VC for get_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_not_prime.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(forall b:int. (1 &lt; b /\ b &lt; a) -&gt; not (mem b (divisors a)))">
   <goal name="VC get_not_prime.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
    <goal name="VC get_not_prime.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_equal">
     <goal name="VC get_not_prime.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC get_not_prime.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="2.40"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC get_not_prime.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC get_not_prime.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(e = a)">
       <goal name="VC get_not_prime.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
       <proof prover="6"><result status="valid" time="0.19" steps="135"/></proof>
       </goal>
       <goal name="VC get_not_prime.0.0.0.1.0.1" expl="apply premises (false case)" proved="true">
       <transf name="replace" proved="true" arg1="e" arg2="1">
        <goal name="VC get_not_prime.0.0.0.1.0.1.0" expl="apply premises (false case)" proved="true">
        <proof prover="6"><result status="valid" time="0.30" steps="135"/></proof>
        </goal>
        <goal name="VC get_not_prime.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
         <goal name="VC get_not_prime.0.0.0.1.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="135"/></proof>
         </goal>
         <goal name="VC get_not_prime.0.0.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC get_not_prime.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_not_prime.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_not_prime" expl="VC for set_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_not_prime.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists b. mem b (divisors a) /\ not (mem b (add a (to_set 1))))">
   <goal name="VC set_not_prime.0.0" expl="asserted formula" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC set_not_prime.0.0.0" expl="asserted formula" proved="true">
    <transf name="exists" proved="true" arg1="b">
     <goal name="VC set_not_prime.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_not_prime.0.0.0.0.0" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
      </goal>
      <goal name="VC set_not_prime.0.0.0.0.1" proved="true">
      <proof prover="3"><result status="valid" time="2.23"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_not_prime.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.29"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC card_prime_divisors" expl="VC for card_prime_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC card_prime_divisors.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(divisors a )" arg2="(add a (to_set 1))">
   <goal name="VC card_prime_divisors.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="cardinal_add">
    <goal name="VC card_prime_divisors.0.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.32" steps="131"/></proof>
    </goal>
    <goal name="VC card_prime_divisors.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.43"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC card_prime_divisors.0.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC symetric_co_prime" expl="VC for symetric_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC symetric_co_prime.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.74"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_is_co_prime_right" expl="VC for prime_is_co_prime_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_is_co_prime_right.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC prime_is_co_prime_right.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime_def">
    <goal name="VC prime_is_co_prime_right.0.0.0" expl="VC for prime_is_co_prime_right" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC prime_is_co_prime_right.0.0.0.0" expl="VC for prime_is_co_prime_right" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="136"/></proof>
     </goal>
     <goal name="VC prime_is_co_prime_right.0.0.0.1" expl="VC for prime_is_co_prime_right" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="138"/></proof>
     </goal>
     <goal name="VC prime_is_co_prime_right.0.0.0.2" expl="VC for prime_is_co_prime_right" proved="true">
     <transf name="replace" proved="true" arg1="((divisors b))" arg2="(add b (to_set 1))">
      <goal name="VC prime_is_co_prime_right.0.0.0.2.0" expl="VC for prime_is_co_prime_right" proved="true">
      <transf name="apply" proved="true" arg1="set_equal">
       <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(e =1)">
         <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="6"><result status="valid" time="0.65" steps="142"/></proof>
         </goal>
         <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.1" expl="apply premises (false case)" proved="true">
         <transf name="case" proved="true" arg1="(e =b)">
          <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.1.0" expl="apply premises (false case. true case)" proved="true">
          <transf name="assert" proved="true" arg1="(not (mem e (inter (divisors a) (add b (to_set 1)))))">
           <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.1.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.37" steps="142"/></proof>
           </goal>
           <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.1.0.1" expl="apply premises (false case. true case)" proved="true">
           <proof prover="6"><result status="valid" time="0.13" steps="142"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.1.1" expl="apply premises (false case)" proved="true">
          <transf name="assert" proved="true" arg1="(not (mem e (inter (divisors a) (add b (to_set 1)))))">
           <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.1.1.0" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="1.94"/></proof>
           </goal>
           <goal name="VC prime_is_co_prime_right.0.0.0.2.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="6"><result status="valid" time="0.13" steps="142"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC prime_is_co_prime_right.0.0.0.2.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC prime_is_co_prime_right.0.0.0.2.0.1.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(mem e (divisors a))">
         <goal name="VC prime_is_co_prime_right.0.0.0.2.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.69"/></proof>
         </goal>
         <goal name="VC prime_is_co_prime_right.0.0.0.2.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="2.21"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC prime_is_co_prime_right.0.0.0.2.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.37" steps="138"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_is_co_prime" expl="VC for prime_is_co_prime" proved="true">
 <proof prover="6"><result status="valid" time="0.19" steps="133"/></proof>
 </goal>
 <goal name="VC prime_are_co_primes" expl="VC for prime_are_co_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_are_co_primes.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(a=1)">
   <goal name="VC prime_are_co_primes.0.0" expl="true case (postcondition)" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC prime_are_co_primes.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="co_prime_def">
     <goal name="VC prime_are_co_primes.0.0.0.0" expl="VC for prime_are_co_primes" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC prime_are_co_primes.0.0.0.0.0" expl="VC for prime_are_co_primes" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="138"/></proof>
      </goal>
      <goal name="VC prime_are_co_primes.0.0.0.0.1" expl="VC for prime_are_co_primes" proved="true">
      <proof prover="6"><result status="valid" time="0.18" steps="140"/></proof>
      </goal>
      <goal name="VC prime_are_co_primes.0.0.0.0.2" expl="VC for prime_are_co_primes" proved="true">
      <transf name="apply" proved="true" arg1="set_equal">
       <goal name="VC prime_are_co_primes.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC prime_are_co_primes.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="2.36"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC prime_are_co_primes.0.0.0.0.2.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC prime_are_co_primes.0.0.0.0.2.1.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.94"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_are_co_primes.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(b=1)">
    <goal name="VC prime_are_co_primes.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC prime_are_co_primes.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="co_prime_def">
      <goal name="VC prime_are_co_primes.0.1.0.0.0" expl="VC for prime_are_co_primes" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC prime_are_co_primes.0.1.0.0.0.0" expl="VC for prime_are_co_primes" proved="true">
       <proof prover="6"><result status="valid" time="0.35" steps="142"/></proof>
       </goal>
       <goal name="VC prime_are_co_primes.0.1.0.0.0.1" expl="VC for prime_are_co_primes" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="140"/></proof>
       </goal>
       <goal name="VC prime_are_co_primes.0.1.0.0.0.2" expl="VC for prime_are_co_primes" proved="true">
       <transf name="apply" proved="true" arg1="set_equal">
        <goal name="VC prime_are_co_primes.0.1.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC prime_are_co_primes.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.98"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC prime_are_co_primes.0.1.0.0.0.2.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC prime_are_co_primes.0.1.0.0.0.2.1.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.44"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC prime_are_co_primes.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="2.36"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC one_is_co_prime" expl="VC for one_is_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC one_is_co_prime.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC one_is_co_prime.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime_def">
    <goal name="VC one_is_co_prime.0.0.0" expl="VC for one_is_co_prime" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC one_is_co_prime.0.0.0.0" expl="VC for one_is_co_prime" proved="true">
     <proof prover="6"><result status="valid" time="0.17" steps="132"/></proof>
     </goal>
     <goal name="VC one_is_co_prime.0.0.0.1" expl="VC for one_is_co_prime" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="132"/></proof>
     </goal>
     <goal name="VC one_is_co_prime.0.0.0.2" expl="VC for one_is_co_prime" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="VC one_is_co_prime.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC one_is_co_prime.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="e" arg2="1">
        <goal name="VC one_is_co_prime.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.29" steps="136"/></proof>
        </goal>
        <goal name="VC one_is_co_prime.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="3"><result status="valid" time="2.84"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC one_is_co_prime.0.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC one_is_co_prime.0.0.0.2.1.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.78"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mem_divisors_trans" expl="VC for mem_divisors_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mem_divisors_trans.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="VC mem_divisors_trans.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="131"/></proof>
   </goal>
   <goal name="VC mem_divisors_trans.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.33"/></proof>
   </goal>
   <goal name="VC mem_divisors_trans.0.2" expl="apply premises" proved="true">
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="c,a,(div c b * div b a),0">
    <goal name="VC mem_divisors_trans.0.2.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mem_divisors_trans.0.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC mem_divisors_trans.0.2.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
      </goal>
      <goal name="VC mem_divisors_trans.0.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.50"/></proof>
      </goal>
      <goal name="VC mem_divisors_trans.0.2.0.0.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="((div c b * div b a) * a)" arg2="(div c b * (div b a * a))">
       <goal name="VC mem_divisors_trans.0.2.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(div b a * a)" arg2="b">
        <goal name="VC mem_divisors_trans.0.2.0.0.2.0.0" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="134"/></proof>
        </goal>
        <goal name="VC mem_divisors_trans.0.2.0.0.2.0.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="3.44"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mem_divisors_trans.0.2.0.0.2.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC mem_divisors_trans.0.2.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.50"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC subset_divisors" expl="VC for subset_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC subset_divisors.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC not_prime_divisors" expl="VC for not_prime_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC not_prime_divisors.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(1&lt; cardinal (remove 1 (divisors a)))">
   <goal name="VC not_prime_divisors.0.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(0&lt; cardinal (remove a (remove 1 (divisors a))))">
    <goal name="VC not_prime_divisors.0.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC not_prime_divisors.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="prime_def" arg2="in" arg3="H">
      <goal name="VC not_prime_divisors.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(subset (add a (to_set 1)) (divisors a))">
       <goal name="VC not_prime_divisors.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_subset">
        <goal name="VC not_prime_divisors.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC not_prime_divisors.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(e = a)">
          <goal name="VC not_prime_divisors.0.0.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
          <proof prover="6"><result status="valid" time="0.19" steps="140"/></proof>
          </goal>
          <goal name="VC not_prime_divisors.0.0.0.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
          <transf name="assert" proved="true" arg1="(e = 1)">
           <goal name="VC not_prime_divisors.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
            <goal name="VC not_prime_divisors.0.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.19" steps="140"/></proof>
            </goal>
            <goal name="VC not_prime_divisors.0.0.0.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.21" steps="142"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC not_prime_divisors.0.0.0.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="6"><result status="valid" time="0.26" steps="142"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC not_prime_divisors.0.0.0.0.0.1" expl="asserted formula" proved="true">
       <transf name="case" proved="true" arg1="(exists x. mem x (divisors a) /\ not (mem x (add a (to_set 1))))">
        <goal name="VC not_prime_divisors.0.0.0.0.0.1.0" expl="true case (asserted formula)" proved="true">
        <transf name="destruct" proved="true" arg1="h1">
         <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0" expl="true case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem x (remove a (remove 1 (divisors a))))">
          <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem x ( (remove 1 (divisors a))))">
           <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem x  (divisors a))">
            <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="140"/></proof>
            </goal>
            <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
            <transf name="case" proved="true" arg1="( x  &lt;&gt;1)">
             <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.0.1.0" expl="true case (asserted formula)" proved="true">
             <proof prover="6"><result status="valid" time="0.25" steps="144"/></proof>
             </goal>
             <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
             <transf name="assert" proved="true" arg1="(mem x (to_set 1))">
              <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
              <proof prover="6"><result status="valid" time="0.20" steps="144"/></proof>
              </goal>
              <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
              <proof prover="6"><result status="valid" time="0.62" steps="146"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.58" steps="144"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC not_prime_divisors.0.0.0.0.0.1.0.0.1" expl="true case (asserted formula)" proved="true">
          <proof prover="6"><result status="valid" time="0.47" steps="144"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC not_prime_divisors.0.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
         <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="set_equal">
          <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.44" steps="140"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(e =a)">
            <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.1.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="6"><result status="valid" time="0.31" steps="142"/></proof>
            </goal>
            <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.1.0.1" expl="apply premises (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(e = 1)">
             <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.1.0.1.0" expl="asserted formula" proved="true">
             <proof prover="3"><result status="valid" time="1.92"/></proof>
             </goal>
             <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.0.1.0.1.1" expl="apply premises (false case)" proved="true">
             <proof prover="6"><result status="valid" time="0.18" steps="144"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC not_prime_divisors.0.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="136"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC not_prime_divisors.0.0.1" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC not_prime_divisors.0.0.1.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="prime_def" arg2="in" arg3="H">
      <goal name="VC not_prime_divisors.0.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(subset (add a (to_set 1)) (divisors a))">
       <goal name="VC not_prime_divisors.0.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_subset">
        <goal name="VC not_prime_divisors.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC not_prime_divisors.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(e = a)">
          <goal name="VC not_prime_divisors.0.0.1.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
          <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
          </goal>
          <goal name="VC not_prime_divisors.0.0.1.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
          <transf name="assert" proved="true" arg1="(e = 1)">
           <goal name="VC not_prime_divisors.0.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
            <goal name="VC not_prime_divisors.0.0.1.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.24" steps="142"/></proof>
            </goal>
            <goal name="VC not_prime_divisors.0.0.1.0.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.21" steps="144"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC not_prime_divisors.0.0.1.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="6"><result status="valid" time="0.28" steps="144"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC not_prime_divisors.0.0.1.0.0.1" expl="asserted formula" proved="true">
       <transf name="case" proved="true" arg1="(exists x. mem x (divisors a) /\ not (mem x (add a (to_set 1))))">
        <goal name="VC not_prime_divisors.0.0.1.0.0.1.0" expl="true case (asserted formula)" proved="true">
        <transf name="destruct" proved="true" arg1="h1">
         <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0" expl="true case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem x (remove a (remove 1 (divisors a))))">
          <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem x ( (remove 1 (divisors a))))">
           <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem x  (divisors a))">
            <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="142"/></proof>
            </goal>
            <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
            <transf name="case" proved="true" arg1="( x  &lt;&gt;1)">
             <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.0.1.0" expl="true case (asserted formula)" proved="true">
             <proof prover="6"><result status="valid" time="0.20" steps="146"/></proof>
             </goal>
             <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
             <transf name="assert" proved="true" arg1="(mem x (to_set 1))">
              <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
              <proof prover="6"><result status="valid" time="0.24" steps="146"/></proof>
              </goal>
              <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
              <proof prover="6"><result status="valid" time="0.32" steps="148"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="146"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC not_prime_divisors.0.0.1.0.0.1.0.0.1" expl="true case (asserted formula)" proved="true">
          <proof prover="3"><result status="valid" time="1.80"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC not_prime_divisors.0.0.1.0.0.1.1" expl="false case (asserted formula)" proved="true">
        <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
         <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="set_equal">
          <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.1.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(e =a)">
            <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.1.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="6"><result status="valid" time="0.25" steps="144"/></proof>
            </goal>
            <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.1.0.1" expl="apply premises (false case)" proved="true">
            <transf name="assert" proved="true" arg1="(e = 1)">
             <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.1.0.1.0" expl="asserted formula" proved="true">
             <proof prover="3"><result status="valid" time="1.67"/></proof>
             </goal>
             <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.0.1.0.1.1" expl="apply premises (false case)" proved="true">
             <proof prover="6"><result status="valid" time="0.20" steps="146"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC not_prime_divisors.0.0.1.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="138"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC not_prime_divisors.0.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.51"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC not_prime_divisors.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(1&lt; cardinal (remove 1 (divisors a)))">
   <goal name="VC not_prime_divisors.1.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.47"/></proof>
   </goal>
   <goal name="VC not_prime_divisors.1.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(0&lt; cardinal (remove a (remove 1 (divisors a))))">
    <goal name="VC not_prime_divisors.1.1.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(forall s: set int. forall e . mem e s -&gt; cardinal (remove e s) = cardinal s -1)">
     <goal name="VC not_prime_divisors.1.1.0.0" expl="asserted formula" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC not_prime_divisors.1.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.80" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC not_prime_divisors.1.1.0.1" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="h1">
      <goal name="VC not_prime_divisors.1.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.33" steps="133"/></proof>
      </goal>
      <goal name="VC not_prime_divisors.1.1.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.94"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC not_prime_divisors.1.1.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(exists i. mem i  (remove a (remove 1 (divisors a))))">
     <goal name="VC not_prime_divisors.1.1.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.71"/></proof>
     </goal>
     <goal name="VC not_prime_divisors.1.1.1.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="h">
      <goal name="VC not_prime_divisors.1.1.1.1.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="i">
       <goal name="VC not_prime_divisors.1.1.1.1.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC not_prime_divisors.1.1.1.1.0.0.0" proved="true">
        <transf name="assert" proved="true" arg1="(mem i (remove 1 (divisors a)))">
         <goal name="VC not_prime_divisors.1.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.35" steps="139"/></proof>
         </goal>
         <goal name="VC not_prime_divisors.1.1.1.1.0.0.0.1" proved="true">
         <proof prover="6"><result status="valid" time="0.24" steps="141"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC not_prime_divisors.1.1.1.1.0.0.1" proved="true">
        <proof prover="3"><result status="valid" time="2.37"/></proof>
        </goal>
        <goal name="VC not_prime_divisors.1.1.1.1.0.0.2" proved="true">
        <proof prover="6"><result status="valid" time="0.33" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC strict_subset_divisors" expl="VC for strict_subset_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC strict_subset_divisors.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="133"/></proof>
  </goal>
  <goal name="VC strict_subset_divisors.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(not (mem b (divisors a)))">
   <goal name="VC strict_subset_divisors.1.0" expl="asserted formula" proved="true">
   <transf name="case" proved="true" arg1="(b &lt; a)">
    <goal name="VC strict_subset_divisors.1.0.0" expl="true case (asserted formula)" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="137"/></proof>
    </goal>
    <goal name="VC strict_subset_divisors.1.0.1" expl="false case (asserted formula)" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC strict_subset_divisors.1.0.1.0" expl="false case (asserted formula)" proved="true">
     <transf name="rewrite" proved="true" arg1="divisors_def">
      <goal name="VC strict_subset_divisors.1.0.1.0.0" expl="false case (asserted formula)" proved="true">
      <proof prover="3"><result status="valid" time="2.44"/></proof>
      </goal>
      <goal name="VC strict_subset_divisors.1.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="142"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC strict_subset_divisors.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC strict_subset_divisors.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_contains_prime" expl="VC for divisors_contains_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_contains_prime.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="127"/></proof>
  </goal>
  <goal name="VC divisors_contains_prime.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC divisors_contains_prime.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(prime i -&gt; cardinal (divisors i) = 2)">
   <goal name="VC divisors_contains_prime.2.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC divisors_contains_prime.2.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors_contains_prime.2.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_contains_prime.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="139"/></proof>
  </goal>
  <goal name="VC divisors_contains_prime.4" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i (divisors i)))) (divisors i))">
   <goal name="VC divisors_contains_prime.4.0" expl="asserted formula" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i (divisors i)))) (remove 1 (remove i (divisors i))))">
    <goal name="VC divisors_contains_prime.4.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC divisors_contains_prime.4.0.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="H">
      <goal name="VC divisors_contains_prime.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="2.60"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC divisors_contains_prime.4.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.32" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors_contains_prime.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_contains_prime.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC divisors_contains_prime.5.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem i1 (remove 1 (remove i1 (divisors i1)))))">
    <goal name="VC divisors_contains_prime.5.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.35" steps="145"/></proof>
    </goal>
    <goal name="VC divisors_contains_prime.5.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;cardinal (remove 1 (remove i1 (divisors i1))) )">
     <goal name="VC divisors_contains_prime.5.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. forall e . mem e s -&gt; cardinal (remove e s) = cardinal s -1)">
      <goal name="VC divisors_contains_prime.5.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="149"/></proof>
      </goal>
      <goal name="VC divisors_contains_prime.5.0.1.0.1" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="h1">
       <goal name="VC divisors_contains_prime.5.0.1.0.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="h1">
        <goal name="VC divisors_contains_prime.5.0.1.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.10" steps="144"/></proof>
        </goal>
        <goal name="VC divisors_contains_prime.5.0.1.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC divisors_contains_prime.5.0.1.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.45"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC divisors_contains_prime.5.0.1.1" expl="precondition" proved="true">
     <proof prover="3"><result status="valid" time="0.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_contains_prime.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC divisors_contains_prime.6.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i1 (divisors i1)))) (remove 1 (remove i1 (divisors i1))))">
    <goal name="VC divisors_contains_prime.6.0.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="3.44"/></proof>
    </goal>
    <goal name="VC divisors_contains_prime.6.0.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="148"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_contains_prime.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="149"/></proof>
  </goal>
  <goal name="VC divisors_contains_prime.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC divisors_contains_prime.8.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="147"/></proof>
   </goal>
   <goal name="VC divisors_contains_prime.8.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.44" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_contains_prime.9" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC divisors_contains_prime.9.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i1 (divisors i1)))) ( (divisors i1)))">
    <goal name="VC divisors_contains_prime.9.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;cardinal (remove 1 (remove i1 (divisors i1))) )">
     <goal name="VC divisors_contains_prime.9.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(forall s: set int. forall e . mem e s -&gt; cardinal (remove e s) = cardinal s -1)">
      <goal name="VC divisors_contains_prime.9.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.34" steps="152"/></proof>
      </goal>
      <goal name="VC divisors_contains_prime.9.0.0.0.1" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="h1">
       <goal name="VC divisors_contains_prime.9.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="h1">
        <goal name="VC divisors_contains_prime.9.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.10" steps="147"/></proof>
        </goal>
        <goal name="VC divisors_contains_prime.9.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.34" steps="150"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC divisors_contains_prime.9.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.43"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC divisors_contains_prime.9.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.54"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC divisors_contains_prime.9.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(forall s: set int. forall e . mem e s -&gt; cardinal (remove e s) = cardinal s -1)">
     <goal name="VC divisors_contains_prime.9.0.1.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.49" steps="154"/></proof>
     </goal>
     <goal name="VC divisors_contains_prime.9.0.1.1" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(mem (choose (remove 1 (remove i1 (divisors i1)))) (to_fset 1 i1))">
      <goal name="VC divisors_contains_prime.9.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC divisors_contains_prime.9.0.1.1.1" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;= choose (remove 1 (remove i1 (divisors i1))) &lt; i1)">
       <goal name="VC divisors_contains_prime.9.0.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.42"/></proof>
       </goal>
       <goal name="VC divisors_contains_prime.9.0.1.1.1.1" expl="precondition" proved="true">
       <proof prover="3"><result status="valid" time="3.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_contains_prime.10" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC divisors_contains_prime.10.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="i">
    <goal name="VC divisors_contains_prime.10.0.0" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="130"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors_contains_prime.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC divisors_contains_prime.10.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC divisors_contains_prime.10.1.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H">
      <goal name="VC divisors_contains_prime.10.1.0.0.0" expl="postcondition" proved="true">
      <transf name="exists" proved="true" arg1="j">
       <goal name="VC divisors_contains_prime.10.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC divisors_contains_prime.10.1.0.0.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.26" steps="153"/></proof>
        </goal>
        <goal name="VC divisors_contains_prime.10.1.0.0.0.0.1" proved="true">
        <proof prover="6"><result status="valid" time="0.16" steps="153"/></proof>
        </goal>
        <goal name="VC divisors_contains_prime.10.1.0.0.0.0.2" proved="true">
        <proof prover="3"><result status="valid" time="3.08"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_not_co_prime" expl="VC for set_not_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_not_co_prime.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
  </goal>
  <goal name="VC set_not_co_prime.1" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(not (inter (divisors a) (divisors b) = to_set 1))">
   <goal name="VC set_not_co_prime.1.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.42"/></proof>
   </goal>
   <goal name="VC set_not_co_prime.1.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_not_co_prime_" expl="VC for set_not_co_prime_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_not_co_prime_.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC set_not_co_prime_.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_co_prime" expl="VC for set_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_co_prime.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_co_prime.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime_def">
    <goal name="VC set_co_prime.0.0.0" expl="VC for set_co_prime" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_co_prime.0.0.0.0" expl="VC for set_co_prime" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="136"/></proof>
     </goal>
     <goal name="VC set_co_prime.0.0.0.1" expl="VC for set_co_prime" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="136"/></proof>
     </goal>
     <goal name="VC set_co_prime.0.0.0.2" expl="VC for set_co_prime" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="VC set_co_prime.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC set_co_prime.0.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="2.30"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_co_prime.0.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC set_co_prime.0.0.0.2.1.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.43"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_to_mod" expl="VC for co_prime_to_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_to_mod.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(mod a b = 0)">
   <goal name="VC co_prime_to_mod.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(not(co_prime a b))">
    <goal name="VC co_prime_to_mod.0.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC co_prime_to_mod.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="case" proved="true" arg1="(a &lt;b)">
      <goal name="VC co_prime_to_mod.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
      <transf name="assert" proved="true" arg1="(mem a (divisors b))">
       <goal name="VC co_prime_to_mod.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3"><result status="valid" time="0.46"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC co_prime_to_mod.0.0.0.0.0.1" expl="true case (asserted formula)" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3"><result status="valid" time="0.37"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_to_mod.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
      <transf name="assert" proved="true" arg1="(mem b (divisors a))">
       <goal name="VC co_prime_to_mod.0.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.34" steps="144"/></proof>
       </goal>
       <goal name="VC co_prime_to_mod.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
       <transf name="assert" proved="true" arg1="(b&lt;&gt;1)">
        <goal name="VC co_prime_to_mod.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="144"/></proof>
        </goal>
        <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1" expl="false case (asserted formula)" proved="true">
        <transf name="rewrite" proved="true" arg1="co_prime_def">
         <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1.0" expl="false case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(not (inter (divisors a) (divisors b) = to_set 1))">
          <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem b (divisors a))">
           <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.14" steps="146"/></proof>
           </goal>
           <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1.0.0.1" expl="asserted formula" proved="true">
           <transf name="assert" proved="true" arg1="(mem b (inter (divisors a) (divisors b) ))">
            <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.33" steps="148"/></proof>
            </goal>
            <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1.0.0.1.1" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.24" steps="150"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC co_prime_to_mod.0.0.0.0.1.1.1.0.1" expl="false case (asserted formula)" proved="true">
          <proof prover="6"><result status="valid" time="0.10" steps="148"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_to_mod.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC co_prime_to_mod.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_to_mod_right" expl="VC for co_prime_to_mod_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_to_mod_right.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inter_div_mod" expl="VC for inter_div_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inter_div_mod.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="VC inter_div_mod.1" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC inter_div_mod.1.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(div b c * c)" arg2="b">
    <goal name="VC inter_div_mod.1.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.61"/></proof>
    </goal>
    <goal name="VC inter_div_mod.1.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="0.50"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC inter_div_mod.1.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC inter_div_mod.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_subset">
   <goal name="VC inter_div_mod.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC inter_div_mod.2.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(mem e (divisors a))">
     <goal name="VC inter_div_mod.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mod a e = 0)">
      <goal name="VC inter_div_mod.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,e,((div a b * div b e) + div (mod a b) e),0">
       <goal name="VC inter_div_mod.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC inter_div_mod.2.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="VC inter_div_mod.2.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="133"/></proof>
         </goal>
         <goal name="VC inter_div_mod.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="(mem e (divisors b))">
          <goal name="VC inter_div_mod.2.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.47" steps="136"/></proof>
          </goal>
          <goal name="VC inter_div_mod.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="6"><result status="valid" time="0.35" steps="137"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC inter_div_mod.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.70" steps="135"/></proof>
         </goal>
         <goal name="VC inter_div_mod.2.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC inter_div_mod.2.0.0.0.0.0.0.3.0" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
          </goal>
          <goal name="VC inter_div_mod.2.0.0.0.0.0.0.3.1" proved="true">
          <transf name="assert" proved="true" arg1="(mem e (divisors b))">
           <goal name="VC inter_div_mod.2.0.0.0.0.0.0.3.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.75" steps="136"/></proof>
           </goal>
           <goal name="VC inter_div_mod.2.0.0.0.0.0.0.3.1.1" proved="true">
           <proof prover="6"><result status="valid" time="0.57" steps="137"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC inter_div_mod.2.0.0.0.1" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(mem e (divisors (mod a b)))">
       <goal name="VC inter_div_mod.2.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.60" steps="137"/></proof>
       </goal>
       <goal name="VC inter_div_mod.2.0.0.0.1.1" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.94"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC inter_div_mod.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.52" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_mod" expl="VC for co_prime_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_mod.0" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(a= 1)">
   <goal name="VC co_prime_mod.0.0" expl="true case (assertion)" proved="true">
   <proof prover="0"><result status="valid" time="0.60"/></proof>
   </goal>
   <goal name="VC co_prime_mod.0.1" expl="false case (assertion)" proved="true">
   <transf name="case" proved="true" arg1="(0 = mod a b)">
    <goal name="VC co_prime_mod.0.1.0" expl="false case (true case. assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(mem a (divisors b))">
     <goal name="VC co_prime_mod.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.83"/></proof>
     </goal>
     <goal name="VC co_prime_mod.0.1.0.1" expl="false case (true case. assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(mem a (divisors a))">
      <goal name="VC co_prime_mod.0.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.44" steps="139"/></proof>
      </goal>
      <goal name="VC co_prime_mod.0.1.0.1.1" expl="false case (true case. assertion)" proved="true">
      <transf name="assert" proved="true" arg1="(not (co_prime a b))">
       <goal name="VC co_prime_mod.0.1.0.1.1.0" expl="asserted formula" proved="true">
       <transf name="eliminate_definition" proved="true" >
        <goal name="VC co_prime_mod.0.1.0.1.1.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="co_prime_def">
         <goal name="VC co_prime_mod.0.1.0.1.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="assert" proved="true" arg1="(inter (divisors a) (divisors b) &lt;&gt; to_set 1)">
          <goal name="VC co_prime_mod.0.1.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(mem a (inter (divisors a) (divisors b)))">
           <goal name="VC co_prime_mod.0.1.0.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.93" steps="146"/></proof>
           </goal>
           <goal name="VC co_prime_mod.0.1.0.1.1.0.0.0.0.1" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.75" steps="148"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC co_prime_mod.0.1.0.1.1.0.0.0.1" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.36" steps="146"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC co_prime_mod.0.1.0.1.1.1" expl="false case (true case. assertion)" proved="true">
       <proof prover="6"><result status="valid" time="0.35" steps="139"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_mod.0.1.1" expl="false case (assertion)" proved="true">
    <proof prover="6"><result status="valid" time="0.72" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_prime_mod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.54" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_mod.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_mod.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.40" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_mod.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC co_prime_mod.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime_def">
    <goal name="VC co_prime_mod.4.0.0" expl="VC for co_prime_mod" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC co_prime_mod.4.0.0.0" expl="VC for co_prime_mod" proved="true">
     <proof prover="6"><result status="valid" time="0.39" steps="140"/></proof>
     </goal>
     <goal name="VC co_prime_mod.4.0.0.1" expl="VC for co_prime_mod" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="140"/></proof>
     </goal>
     <goal name="VC co_prime_mod.4.0.0.2" expl="VC for co_prime_mod" proved="true">
     <transf name="apply" proved="true" arg1="set_equal">
      <goal name="VC co_prime_mod.4.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC co_prime_mod.4.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(to_set 1)" arg2="(inter (divisors a) (divisors b))">
        <goal name="VC co_prime_mod.4.0.0.2.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="subset_spec" arg2="in" arg3="H1">
         <goal name="VC co_prime_mod.4.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.35" steps="142"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC co_prime_mod.4.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="144"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_mod.4.0.0.2.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC co_prime_mod.4.0.0.2.1.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="e" arg2="1">
        <goal name="VC co_prime_mod.4.0.0.2.1.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(mem 1 (divisors (mod a b)))">
         <goal name="VC co_prime_mod.4.0.0.2.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="mem_one_divisors">
          <goal name="VC co_prime_mod.4.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.13" steps="142"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC co_prime_mod.4.0.0.2.1.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.63" steps="146"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC co_prime_mod.4.0.0.2.1.0.1" expl="equality hypothesis" proved="true">
        <proof prover="6"><result status="valid" time="0.38" steps="144"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_by_primes" expl="VC for co_prime_by_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_by_primes.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="131"/></proof>
  </goal>
  <goal name="VC co_prime_by_primes.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
  </goal>
  <goal name="VC co_prime_by_primes.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="132"/></proof>
  </goal>
  <goal name="VC co_prime_by_primes.3" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(prime c)">
   <goal name="VC co_prime_by_primes.3.0" expl="true case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="140"/></proof>
   </goal>
   <goal name="VC co_prime_by_primes.3.1" expl="false case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(exists c&#39;. prime c&#39; /\ 1&lt; c&#39; /\mem c&#39; (divisors c))">
    <goal name="VC co_prime_by_primes.3.1.0" expl="asserted formula" proved="true">
    <transf name="instantiate" proved="true" arg1="divisors_contains_prime" arg2="c">
     <goal name="VC co_prime_by_primes.3.1.0.0" expl="asserted formula" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC co_prime_by_primes.3.1.0.0.0" expl="destruct premise" proved="true">
      <transf name="assert" proved="true" arg1="(0&lt;c)">
       <goal name="VC co_prime_by_primes.3.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="140"/></proof>
       </goal>
       <goal name="VC co_prime_by_primes.3.1.0.0.0.1" expl="destruct premise" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="140"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_by_primes.3.1.0.0.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="146"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_by_primes.3.1.1" expl="false case (precondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.55"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_prime_by_primes.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC euclid_lemma_pre" expl="VC for euclid_lemma_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC euclid_lemma_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="143"/></proof>
  </goal>
  <goal name="VC euclid_lemma_pre.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="145"/></proof>
  </goal>
  <goal name="VC euclid_lemma_pre.2" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="co_prime_mod" arg2="b,c">
   <goal name="VC euclid_lemma_pre.2.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(mod b c)">
    <goal name="VC euclid_lemma_pre.2.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC euclid_lemma_pre.2.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.39"/></proof>
     </goal>
     <goal name="VC euclid_lemma_pre.2.0.0.1" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC euclid_lemma_pre.2.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC euclid_lemma_pre.2.0.0.1.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.35" steps="146"/></proof>
       </goal>
       <goal name="VC euclid_lemma_pre.2.0.0.1.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="146"/></proof>
       </goal>
       <goal name="VC euclid_lemma_pre.2.0.0.1.0.2" proved="true">
       <proof prover="6"><result status="valid" time="0.37" steps="146"/></proof>
       </goal>
       <goal name="VC euclid_lemma_pre.2.0.0.1.0.3" proved="true">
       <transf name="assert" proved="true" arg1="(mod (a * b) c = mod (a * mod b c) c)">
        <goal name="VC euclid_lemma_pre.2.0.0.1.0.3.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.34" steps="146"/></proof>
        </goal>
        <goal name="VC euclid_lemma_pre.2.0.0.1.0.3.1" proved="true">
        <transf name="assert" proved="true" arg1="(mod (a * b) c = 0)">
         <goal name="VC euclid_lemma_pre.2.0.0.1.0.3.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
         </goal>
         <goal name="VC euclid_lemma_pre.2.0.0.1.0.3.1.1" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="143"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.36" steps="149"/></proof>
   </goal>
   <goal name="VC euclid_lemma_pre.3.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.4.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="151"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.6.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(0 = r)">
    <goal name="VC euclid_lemma_pre.6.0.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mem b&#39; (divisors c))">
     <goal name="VC euclid_lemma_pre.6.0.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.40" steps="158"/></proof>
     </goal>
     <goal name="VC euclid_lemma_pre.6.0.0.1" expl="true case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(not (prime c))">
      <goal name="VC euclid_lemma_pre.6.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC euclid_lemma_pre.6.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="prime_def">
        <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(exists x. mem x (divisors c )/\ not (mem x (add c (to_set 1))))">
         <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="exists" proved="true" arg1="b&#39;">
          <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0.0.0" proved="true">
           <proof prover="6"><result status="valid" time="0.15" steps="162"/></proof>
           </goal>
           <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0.0.1" proved="true">
           <transf name="assert" proved="true" arg1="(b&#39; &lt;&gt; c)">
            <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.13" steps="162"/></proof>
            </goal>
            <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0.0.1.1" proved="true">
            <transf name="assert" proved="true" arg1="(b&#39; &lt;&gt; 1)">
             <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="0.33" steps="169"/></proof>
             </goal>
             <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.0.0.1.1.1" proved="true">
             <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
             <proof prover="3"><result status="valid" time="0.66"/></proof>
             <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC euclid_lemma_pre.6.0.0.1.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="168"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC euclid_lemma_pre.6.0.0.1.1" expl="true case (postcondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="155"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC euclid_lemma_pre.6.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="158"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC euclid_lemma_pre.6.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="156"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.7" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.7.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.35"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.8.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="157"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.9" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.9.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.45" steps="163"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.10" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC euclid_lemma_pre.10.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC euclid_lemma_pre.10.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mul_assoc">
     <goal name="VC euclid_lemma_pre.10.0.0.0" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c. (b*a) - (a*c) = a * (b-c))">
      <goal name="VC euclid_lemma_pre.10.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="160"/></proof>
      </goal>
      <goal name="VC euclid_lemma_pre.10.0.0.0.1" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="h">
       <goal name="VC euclid_lemma_pre.10.0.0.0.1.0" expl="assertion" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="160"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     <transf name="assert" proved="true" arg1="(forall a b c. (a*b) - (a*c) = a * (b-c))">
      <goal name="VC euclid_lemma_pre.10.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="160"/></proof>
      </goal>
      <goal name="VC euclid_lemma_pre.10.0.0.0.1" expl="assertion" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="160"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.11.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.12" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.12.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.13.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.14" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.14.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="161"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.15.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="162"/></proof>
   </goal>
   <goal name="VC euclid_lemma_pre.15.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="162"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.16.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.17" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC euclid_lemma_pre.17.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="in_my_filter">
    <goal name="VC euclid_lemma_pre.17.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.57"/></proof>
    </goal>
    <goal name="VC euclid_lemma_pre.17.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC euclid_lemma_pre.17.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC euclid_lemma_pre.17.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="165"/></proof>
      </goal>
      <goal name="VC euclid_lemma_pre.17.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="165"/></proof>
      </goal>
      <goal name="VC euclid_lemma_pre.17.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.59"/></proof>
      </goal>
      <goal name="VC euclid_lemma_pre.17.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="169"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC euclid_lemma_pre.17.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="165"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euclid_lemma_pre.18" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(not (b&#39;=
  min_filter (to_fset 1 c)
  (fun (d:int) -&gt; (1 &lt;= d /\ d &lt;= c) /\ not mod d c = 0 /\ mod (a * d) c = 0)))">
   <goal name="VC euclid_lemma_pre.18.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC euclid_lemma_pre.18.0.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="11.11"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC euclid_lemma_pre.18.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.48"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC euclid_lemma" expl="VC for euclid_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC euclid_lemma.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="137"/></proof>
  </goal>
  <goal name="VC euclid_lemma.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC euclid_lemma.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC euclid_lemma.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC euclid_lemma.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC euclid_lemma.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC euclid_lemma.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="139"/></proof>
  </goal>
  <goal name="VC euclid_lemma.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC euclid_lemma.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_euclid_lemma" expl="VC for divisors_euclid_lemma" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_euclid_lemma.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="137"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="139"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bounded_primes" expl="VC for bounded_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bounded_primes.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="139"/></proof>
  </goal>
  <goal name="VC bounded_primes.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC bounded_primes.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC bounded_primes.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC bounded_primes.2.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="VC bounded_primes.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="149"/></proof>
     </goal>
     <goal name="VC bounded_primes.2.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC bounded_primes.2.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.17" steps="144"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors" expl="VC for prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="131"/></proof>
  </goal>
  <goal name="VC prime_factors.1" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="0">
   <goal name="VC prime_factors.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC prime_factors.1.0.0" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="136"/></proof>
    </goal>
    <goal name="VC prime_factors.1.0.1" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC prime_factors.1.0.1.0" proved="true">
     <proof prover="0"><result status="valid" time="0.37"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="VC prime_factors.3" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC prime_factors.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC prime_factors.3.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC prime_factors.3.0.0.0" expl="postcondition" proved="true">
     <transf name="case" proved="true" arg1="(prime b)">
      <goal name="VC prime_factors.3.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="(b =1)">
       <goal name="VC prime_factors.3.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="3"><result status="valid" time="0.41"/></proof>
       </goal>
       <goal name="VC prime_factors.3.0.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="(mem (power_ b result) (divisors a))">
        <goal name="VC prime_factors.3.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.40"/></proof>
        </goal>
        <goal name="VC prime_factors.3.0.0.0.0.1.1" expl="false case (true case. postcondition)" proved="true">
        <transf name="assert" proved="true" arg1="(mem (power_ b j) (divisors(power_ b result)))">
         <goal name="VC prime_factors.3.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(power_ b result),(power_ b j),(power_ b (result-j)),0">
          <goal name="VC prime_factors.3.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="assert" proved="true" arg1="(0 = mod (power_ b result) (power_ b j))">
           <goal name="VC prime_factors.3.0.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC prime_factors.3.0.0.0.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="VC prime_factors.3.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
             </goal>
             <goal name="VC prime_factors.3.0.0.0.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
             </goal>
             <goal name="VC prime_factors.3.0.0.0.0.1.1.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.21" steps="152"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC prime_factors.3.0.0.0.0.1.1.0.0.1" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="0.43"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC prime_factors.3.0.0.0.0.1.1.1" expl="false case (true case. postcondition)" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="154"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC prime_factors.3.0.0.0.1" expl="false case (postcondition)" proved="true">
      <proof prover="3"><result status="valid" time="0.46"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors.4" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H4">
   <goal name="VC prime_factors.4.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(mem (power b result) (divisors a))">
    <goal name="VC prime_factors.4.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC prime_factors.4.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC prime_factors.4.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.38"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC prime_factors.4.0.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(a &lt;(power_ b a) )">
     <goal name="VC prime_factors.4.0.1.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="146"/></proof>
     </goal>
     <goal name="VC prime_factors.4.0.1.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.36"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_factors.4.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="134"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H6">
   <goal name="VC prime_factors.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC prime_factors.5.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC prime_factors.5.0.0.0" expl="postcondition" proved="true">
     <transf name="case" proved="true" arg1="(mem (power_ b (result + 1)) (divisors a))">
      <goal name="VC prime_factors.5.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(not (mem (power_ b (result + 1)) (divisors a)))">
       <goal name="VC prime_factors.5.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H6">
        <goal name="VC prime_factors.5.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="2.17"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC prime_factors.5.0.0.0.0.1" expl="true case (postcondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="148"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC prime_factors.5.0.0.0.1" expl="false case (postcondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="150"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_factors.5.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors.6" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(mem b (divisors (div a (power_ b result))))">
   <goal name="VC prime_factors.6.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="( div a (power_ b result) = div (div a (power_ b result)) b * b)">
    <goal name="VC prime_factors.6.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.34"/></proof>
    </goal>
    <goal name="VC prime_factors.6.0.1" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(a = div a (power_ b result) * (power_ b result))">
     <goal name="VC prime_factors.6.0.1.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mem (power_ b result) (divisors a))">
      <goal name="VC prime_factors.6.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="160"/></proof>
      </goal>
      <goal name="VC prime_factors.6.0.1.0.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.35" steps="162"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC prime_factors.6.0.1.1" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="h1" arg2="in" arg3="h">
      <goal name="VC prime_factors.6.0.1.1.0" expl="true case (postcondition)" proved="true">
      <transf name="case" proved="true" arg1="(mem b (divisors (div a (power_ b result))))">
       <goal name="VC prime_factors.6.0.1.1.0.0" expl="true case (postcondition)" proved="true">
       <transf name="assert" proved="true" arg1="(mem (power_ b (result +1)) (divisors a))">
        <goal name="VC prime_factors.6.0.1.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="set_mem_divisors">
         <goal name="VC prime_factors.6.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="160"/></proof>
         </goal>
         <goal name="VC prime_factors.6.0.1.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.52"/></proof>
         </goal>
         <goal name="VC prime_factors.6.0.1.1.0.0.0.2" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,(power_ b (result + 1)),(div (div a (power_ b result)) b),0">
          <goal name="VC prime_factors.6.0.1.1.0.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.51"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC prime_factors.6.0.1.1.0.0.1" expl="true case (postcondition)" proved="true">
        <proof prover="6"><result status="valid" time="0.29" steps="162"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC prime_factors.6.0.1.1.0.1" expl="false case (true case. postcondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="160"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_factors.6.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="156"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_prime_factors" expl="VC for set_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_prime_factors.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_prime_factors_null" expl="VC for set_prime_factors_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_prime_factors_null.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC set_prime_factors_null.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC set_prime_factors_null.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
  </goal>
  <goal name="VC set_prime_factors_null.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="VC set_prime_factors_null.4" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(power_ b (0 + 1))" arg2="b">
   <goal name="VC set_prime_factors_null.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
   </goal>
   <goal name="VC set_prime_factors_null.4.1" expl="equality hypothesis" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_prime_factors_null.5" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_prime_factors_over" expl="VC for set_prime_factors_over" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_prime_factors_over.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(prime b)">
   <goal name="VC set_prime_factors_over.0.0" expl="true case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_prime_factors">
    <goal name="VC set_prime_factors_over.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
    </goal>
    <goal name="VC set_prime_factors_over.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="131"/></proof>
    </goal>
    <goal name="VC set_prime_factors_over.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
    </goal>
    <goal name="VC set_prime_factors_over.0.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.44"/></proof>
    </goal>
    <goal name="VC set_prime_factors_over.0.0.4" expl="apply premises" proved="true">
    <transf name="case" proved="true" arg1="(mod a b = 0 )">
     <goal name="VC set_prime_factors_over.0.0.4.0" expl="apply premises (true case)" proved="true">
     <transf name="case" proved="true" arg1="( a  = 0 )">
      <goal name="VC set_prime_factors_over.0.0.4.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
      </goal>
      <goal name="VC set_prime_factors_over.0.0.4.0.1" expl="apply premises (false case. true case)" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_prime_factors_over.0.0.4.1" expl="apply premises (false case)" proved="true">
     <proof prover="0"><result status="valid" time="0.32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_prime_factors_over.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_prime_factors_not_prime" expl="VC for set_prime_factors_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_prime_factors_not_prime.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="131"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_prime_factors_one" expl="VC for set_prime_factors_one" proved="true">
 <proof prover="6"><result status="valid" time="0.23" steps="131"/></proof>
 </goal>
 <goal name="VC set_prime_factors_diff" expl="VC for set_prime_factors_diff" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_prime_factors_diff.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(1&lt;b)">
   <goal name="VC set_prime_factors_diff.0.0" expl="true case (postcondition)" proved="true">
   <transf name="apply" proved="true" arg1="set_prime_factors">
    <goal name="VC set_prime_factors_diff.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
    </goal>
    <goal name="VC set_prime_factors_diff.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
    </goal>
    <goal name="VC set_prime_factors_diff.0.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
    </goal>
    <goal name="VC set_prime_factors_diff.0.0.3" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.30"/></proof>
    </goal>
    <goal name="VC set_prime_factors_diff.0.0.4" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(power_ b (0 + 1))" arg2="b">
     <goal name="VC set_prime_factors_diff.0.0.4.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(a &lt;b)">
      <goal name="VC set_prime_factors_diff.0.0.4.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="0"><result status="valid" time="0.29"/></proof>
      </goal>
      <goal name="VC set_prime_factors_diff.0.0.4.0.1" expl="apply premises (false case)" proved="true">
      <transf name="case" proved="true" arg1="(mod a b = 0)">
       <goal name="VC set_prime_factors_diff.0.0.4.0.1.0" expl="apply premises (false case. true case)" proved="true">
       <transf name="assert" proved="true" arg1="(mem b (divisors a))">
        <goal name="VC set_prime_factors_diff.0.0.4.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="141"/></proof>
        </goal>
        <goal name="VC set_prime_factors_diff.0.0.4.0.1.0.1" expl="apply premises (false case. true case)" proved="true">
        <proof prover="3"><result status="valid" time="0.36"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC set_prime_factors_diff.0.0.4.0.1.1" expl="apply premises (false case)" proved="true">
       <proof prover="6"><result status="valid" time="0.10" steps="139"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_prime_factors_diff.0.0.4.1" expl="equality hypothesis" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_prime_factors_diff.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_prime_factors" expl="VC for get_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_prime_factors.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="VC get_prime_factors.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_itself" expl="VC for prime_factors_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_itself.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_prime_factors">
   <goal name="VC prime_factors_itself.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="129"/></proof>
   </goal>
   <goal name="VC prime_factors_itself.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
   </goal>
   <goal name="VC prime_factors_itself.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="129"/></proof>
   </goal>
   <goal name="VC prime_factors_itself.0.3" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="131"/></proof>
   </goal>
   <goal name="VC prime_factors_itself.0.4" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.29"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_one" expl="VC for prime_factors_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_one.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="129"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_up" expl="VC for prime_factors_up" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_up.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(prime b)">
   <goal name="VC prime_factors_up.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(not (mem (power_ b 1)  (divisors a)))">
    <goal name="VC prime_factors_up.0.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.52"/></proof>
    </goal>
    <goal name="VC prime_factors_up.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.19" steps="135"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_factors_up.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_up.1" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ind_iproduct_trans" arg2="(fun (i:int) -&gt; power_ i (prime_factors a i)),0,(a+1),(b+1)">
   <goal name="VC prime_factors_up.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC prime_factors_up.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mult_one">
     <goal name="VC prime_factors_up.1.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC prime_factors_up.1.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_one">
      <goal name="VC prime_factors_up.1.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC prime_factors_up.1.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC prime_factors_up.1.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="2.59"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC prime_factors_up.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_up_set" expl="VC for prime_factors_up_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_up_set.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(a=b)">
   <goal name="VC prime_factors_up_set.0.0" expl="true case (postcondition)" proved="true">
   <transf name="rewrite" proved="true" arg1="h">
    <goal name="VC prime_factors_up_set.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_factors_up_set.0.1" expl="false case (postcondition)" proved="true">
   <transf name="instantiate" proved="true" arg1="prime_factors_up" arg2="a">
    <goal name="VC prime_factors_up_set.0.1.0" expl="false case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC prime_factors_up_set.0.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="apply" proved="true" arg1="Hinst">
      <goal name="VC prime_factors_up_set.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
      </goal>
      <goal name="VC prime_factors_up_set.0.1.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_mult" expl="VC for prime_factors_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_mult.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="141"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="145"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="149"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="149"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="149"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="159"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.31"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.13" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.14.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.28" steps="163"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.14.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="163"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="165"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="171"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.17" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="171"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.18.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="173"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.18.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.37" steps="173"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.19.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.20" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="177"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.21" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="181"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="185"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.24" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="189"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.25" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.25.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="190"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.25.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.26" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.26.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="193"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.27" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="add_zero">
   <goal name="VC prime_factors_mult.27.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="194"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.27.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="194"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.28" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="195"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.29" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="197"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.30" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="201"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.31" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(prime_factors a b = 0)">
   <goal name="VC prime_factors_mult.31.0" expl="true case (precondition)" proved="true">
   <transf name="case" proved="true" arg1="(prime_factors a&#39; b = 0)">
    <goal name="VC prime_factors_mult.31.0.0" expl="true case (precondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.77" steps="211"/></proof>
    </goal>
    <goal name="VC prime_factors_mult.31.0.1" expl="false case (true case. precondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.64" steps="211"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_factors_mult.31.1" expl="false case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.56" steps="209"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.32" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="207"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.33" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="power__sum" arg2="in" arg3="H">
   <goal name="VC prime_factors_mult.33.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="power__sum" arg2="in" arg3="H">
    <goal name="VC prime_factors_mult.33.0.0" expl="assertion" proved="true">
    <proof prover="0"><result status="valid" time="0.48"/></proof>
    </goal>
    <goal name="VC prime_factors_mult.33.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.17" steps="209"/></proof>
    </goal>
    <goal name="VC prime_factors_mult.33.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="209"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC prime_factors_mult.33.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="207"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.33.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="207"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.34" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.34.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="209"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.35" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="209"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.36" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.37" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.37.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="212"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.37.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.38" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_factors_mult.38.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.72"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.39" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.58" steps="215"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.40" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="207"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.41" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="211"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.42" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="215"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.43" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="216"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.44" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="216"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.45" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="power__sum">
   <goal name="VC prime_factors_mult.45.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.30"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.45.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="216"/></proof>
   </goal>
   <goal name="VC prime_factors_mult.45.2" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="216"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult.46" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="218"/></proof>
  </goal>
  <goal name="VC prime_factors_mult.47" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_mult_gen" expl="VC for prime_factors_mult_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_mult_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="131"/></proof>
  </goal>
  <goal name="VC prime_factors_mult_gen.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC prime_factors_mult_gen.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC prime_factors_mult_gen.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC prime_factors_mult_gen.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC prime_factors_mult_gen.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="133"/></proof>
  </goal>
  <goal name="VC prime_factors_mult_gen.6" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC prime_factors_mult_gen.6.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="prime_factors_mult">
    <goal name="VC prime_factors_mult_gen.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="power__sum">
     <goal name="VC prime_factors_mult_gen.6.0.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="138"/></proof>
     </goal>
     <goal name="VC prime_factors_mult_gen.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="140"/></proof>
     </goal>
     <goal name="VC prime_factors_mult_gen.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.36" steps="140"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC prime_factors_mult_gen.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="138"/></proof>
    </goal>
    <goal name="VC prime_factors_mult_gen.6.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="138"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_factors_mult_gen.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC proper_divisors" expl="VC for proper_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC proper_divisors.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC proper_divisors.1" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(forall i:int. not (mem i result))">
   <goal name="VC proper_divisors.1.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(divisors a = add a (to_set 1))">
    <goal name="VC proper_divisors.1.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_equal">
     <goal name="VC proper_divisors.1.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC proper_divisors.1.0.0.0.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(e=1)">
       <goal name="VC proper_divisors.1.0.0.0.0.0" expl="apply premises (true case)" proved="true">
       <transf name="assert" proved="true" arg1="(mem e (to_set 1))">
        <goal name="VC proper_divisors.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.21" steps="139"/></proof>
        </goal>
        <goal name="VC proper_divisors.1.0.0.0.0.0.1" expl="apply premises (true case)" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC proper_divisors.1.0.0.0.0.1" expl="apply premises (false case)" proved="true">
       <transf name="case" proved="true" arg1="(e=a)">
        <goal name="VC proper_divisors.1.0.0.0.0.1.0" expl="apply premises (false case. true case)" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="141"/></proof>
        </goal>
        <goal name="VC proper_divisors.1.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
        <transf name="assert" proved="true" arg1="(mem e result)">
         <goal name="VC proper_divisors.1.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.34" steps="141"/></proof>
         </goal>
         <goal name="VC proper_divisors.1.0.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC proper_divisors.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC proper_divisors.1.0.0.1.0" expl="apply premises" proved="true">
      <transf name="case" proved="true" arg1="(e=a)">
       <goal name="VC proper_divisors.1.0.0.1.0.0" expl="apply premises (true case)" proved="true">
       <proof prover="6"><result status="valid" time="0.23" steps="139"/></proof>
       </goal>
       <goal name="VC proper_divisors.1.0.0.1.0.1" expl="apply premises (false case)" proved="true">
       <transf name="assert" proved="true" arg1="(e=1)">
        <goal name="VC proper_divisors.1.0.0.1.0.1.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="2.28"/></proof>
        </goal>
        <goal name="VC proper_divisors.1.0.0.1.0.1.1" expl="apply premises (false case)" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="141"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC proper_divisors.1.0.1" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(not (prime a))">
     <goal name="VC proper_divisors.1.0.1.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="set_not_prime">
      <goal name="VC proper_divisors.1.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
      </goal>
      <goal name="VC proper_divisors.1.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC proper_divisors.1.0.1.1" expl="true case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC proper_divisors.1.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC proper_divisors.2" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="141"/></proof>
  </goal>
  <goal name="VC proper_divisors.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC proper_divisors.4" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC proper_divisors.4.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H7">
    <goal name="VC proper_divisors.4.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC proper_divisors.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
     </goal>
     <goal name="VC proper_divisors.4.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC proper_divisors.5" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem (div a i) (divisors a))">
   <goal name="VC proper_divisors.5.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="VC proper_divisors.5.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
    </goal>
    <goal name="VC proper_divisors.5.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.38"/></proof>
    </goal>
    <goal name="VC proper_divisors.5.0.2" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,(div a i),i,0">
     <goal name="VC proper_divisors.5.0.2.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.62"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC proper_divisors.5.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(div a i = 1)">
    <goal name="VC proper_divisors.5.1.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(i =a)">
     <goal name="VC proper_divisors.5.1.0.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,(div a i),i,0">
      <goal name="VC proper_divisors.5.1.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.36"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC proper_divisors.5.1.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC proper_divisors.5.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.56"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC proper_divisors.6" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC proper_divisors.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="strict_subset_divisors">
    <goal name="VC proper_divisors.6.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
    </goal>
    <goal name="VC proper_divisors.6.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
    </goal>
    <goal name="VC proper_divisors.6.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_divisors" expl="VC for prime_divisors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_divisors.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
  </goal>
  <goal name="VC prime_divisors.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="129"/></proof>
  </goal>
  <goal name="VC prime_divisors.2" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="divisors_contains_prime" arg2="a">
   <goal name="VC prime_divisors.2.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC prime_divisors.2.0.0" expl="destruct premise" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
    </goal>
    <goal name="VC prime_divisors.2.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC prime_divisors.2.0.1.0" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="j">
      <goal name="VC prime_divisors.2.0.1.0.0" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC prime_divisors.2.0.1.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="result_def">
        <goal name="VC prime_divisors.2.0.1.0.0.0.0" proved="true">
        <transf name="apply" proved="true" arg1="in_my_filter">
         <goal name="VC prime_divisors.2.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.40"/></proof>
         </goal>
         <goal name="VC prime_divisors.2.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.23" steps="152"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_divisors.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="147"/></proof>
  </goal>
  <goal name="VC prime_divisors.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="147"/></proof>
  </goal>
  <goal name="VC prime_divisors.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC prime_divisors.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="153"/></proof>
  </goal>
  <goal name="VC prime_divisors.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="147"/></proof>
  </goal>
  <goal name="VC prime_divisors.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.35" steps="147"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_div_rev_" expl="VC for unicity_div_rev_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_div_rev_.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_rev" arg2="i,q,j">
   <goal name="VC unicity_div_rev_.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC unicity_div_rev_.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
    </goal>
    <goal name="VC unicity_div_rev_.0.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_mem_divisors">
     <goal name="VC unicity_div_rev_.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
     </goal>
     <goal name="VC unicity_div_rev_.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.42"/></proof>
     </goal>
     <goal name="VC unicity_div_rev_.0.0.1.2" expl="apply premises" proved="true">
     <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,q,j,0">
      <goal name="VC unicity_div_rev_.0.0.1.2.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC unicity_div_rev_.0.0.1.2.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC unicity_div_rev_.0.0.1.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
        </goal>
        <goal name="VC unicity_div_rev_.0.0.1.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.45"/></proof>
        </goal>
        <goal name="VC unicity_div_rev_.0.0.1.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="2.97"/></proof>
        </goal>
        <goal name="VC unicity_div_rev_.0.0.1.2.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.50"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC unicity_div_rev_.0.0.2" expl="apply premises" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="i,q,j,0">
     <goal name="VC unicity_div_rev_.0.0.2.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC unicity_div_rev_.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="Hinst1">
       <goal name="VC unicity_div_rev_.0.0.2.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.42"/></proof>
       </goal>
       <goal name="VC unicity_div_rev_.0.0.2.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="2.46"/></proof>
       </goal>
       <goal name="VC unicity_div_rev_.0.0.2.0.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.44"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC factors_prod" expl="VC for factors_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC factors_prod.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="129"/></proof>
  </goal>
  <goal name="VC factors_prod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC factors_prod.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC factors_prod.2.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a e&#39;)" arg2="0">
    <goal name="VC factors_prod.2.0.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="139"/></proof>
    </goal>
    <goal name="VC factors_prod.2.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC factors_prod.2.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="case" proved="true" arg1="(1 &lt; e&#39; /\ prime e&#39;)">
      <goal name="VC factors_prod.2.0.1.0.0" expl="true case (equality hypothesis)" proved="true">
      <transf name="apply" proved="true" arg1="set_prime_factors">
       <goal name="VC factors_prod.2.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.25" steps="146"/></proof>
       </goal>
       <goal name="VC factors_prod.2.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.15" steps="146"/></proof>
       </goal>
       <goal name="VC factors_prod.2.0.1.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="146"/></proof>
       </goal>
       <goal name="VC factors_prod.2.0.1.0.0.3" expl="apply premises" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3"><result status="valid" time="0.38"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC factors_prod.2.0.1.0.0.4" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(mod a e&#39; = 0 )">
        <goal name="VC factors_prod.2.0.1.0.0.4.0" expl="apply premises (true case)" proved="true">
        <proof prover="3"><result status="valid" time="3.22"/></proof>
        </goal>
        <goal name="VC factors_prod.2.0.1.0.0.4.1" expl="apply premises (false case)" proved="true">
        <proof prover="6"><result status="valid" time="0.25" steps="150"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC factors_prod.2.0.1.0.1" expl="false case (equality hypothesis)" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC factors_prod.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="VC factors_prod.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
  </goal>
  <goal name="VC factors_prod.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="VC factors_prod.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC factors_prod.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="VC factors_prod.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="VC factors_prod.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="142"/></proof>
  </goal>
  <goal name="VC factors_prod.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="144"/></proof>
  </goal>
  <goal name="VC factors_prod.11" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="a,c,div_c,0">
   <goal name="VC factors_prod.11.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="unicity_div_rev" arg2="a,c,div_c">
    <goal name="VC factors_prod.11.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.31"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC factors_prod.12" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="VC factors_prod.12.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="145"/></proof>
   </goal>
   <goal name="VC factors_prod.12.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="VC factors_prod.12.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="148"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC factors_prod.13" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC factors_prod.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="150"/></proof>
  </goal>
  <goal name="VC factors_prod.15" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="149"/></proof>
  </goal>
  <goal name="VC factors_prod.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="150"/></proof>
  </goal>
  <goal name="VC factors_prod.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
  </goal>
  <goal name="VC factors_prod.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="149"/></proof>
  </goal>
  <goal name="VC factors_prod.19" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC factors_prod.19.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="mult_eq">
    <goal name="VC factors_prod.19.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H2">
     <goal name="VC factors_prod.19.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC factors_prod.19.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H1">
     <goal name="VC factors_prod.19.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC factors_prod.19.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(c * div_c)" arg2="a" arg3="in" arg4="H">
    <goal name="VC factors_prod.19.1.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC factors_prod.19.1.0.0" expl="assertion" proved="true">
     <transf name="compute_hyp" proved="true" >
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC factors_prod.19.1.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC factors_prod.19.2" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(c * div_c)" arg2="a" arg3="in" arg4="H">
    <goal name="VC factors_prod.19.2.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H">
     <goal name="VC factors_prod.19.2.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="a" arg2="(c*div_c)">
      <goal name="VC factors_prod.19.2.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq">
       <goal name="VC factors_prod.19.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC factors_prod.19.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H2">
         <goal name="VC factors_prod.19.2.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.40" steps="150"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC factors_prod.19.2.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC factors_prod.19.2.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H1">
         <goal name="VC factors_prod.19.2.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.41" steps="150"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC factors_prod.19.2.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC factors_prod.19.2.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="147"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC factors_prod.20" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H1">
   <goal name="VC factors_prod.20.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(a=1)">
    <goal name="VC factors_prod.20.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ind_iproduct_one">
     <goal name="VC factors_prod.20.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
     </goal>
     <goal name="VC factors_prod.20.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC factors_prod.20.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC factors_prod.20.0.0.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="2.44"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC factors_prod.20.0.1" expl="false case (postcondition)" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC factors_prod.20.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (x + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (a + 1))">
      <goal name="VC factors_prod.20.0.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC factors_prod.20.0.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC factors_prod.20.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(prime_factors a a)" arg2="1">
         <goal name="VC factors_prod.20.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
         </goal>
         <goal name="VC factors_prod.20.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC factors_prod.20.0.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC factors_prod.20.0.1.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="case" proved="true" arg1="(a=x)">
        <goal name="VC factors_prod.20.0.1.0.1.0.0" expl="true case (equality hypothesis)" proved="true">
        <transf name="rewrite" proved="true" arg1="h">
         <goal name="VC factors_prod.20.0.1.0.1.0.0.0" expl="true case (equality hypothesis)" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC factors_prod.20.0.1.0.1.0.1" expl="false case (equality hypothesis)" proved="true">
        <transf name="apply" proved="true" arg1="prime_factors_up">
         <goal name="VC factors_prod.20.0.1.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
         </goal>
         <goal name="VC factors_prod.20.0.1.0.1.0.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC factors_prod.20.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC factors_prod.20.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC factors_prod.20.1.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC factors_prod.20.1.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (x + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (a + 1))">
       <goal name="VC factors_prod.20.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H1">
        <goal name="VC factors_prod.20.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="157"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC factors_prod.20.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="case" proved="true" arg1="(x=a)">
        <goal name="VC factors_prod.20.1.0.0.0.1.0" expl="true case (equality hypothesis)" proved="true">
        <transf name="rewrite" proved="true" arg1="h">
         <goal name="VC factors_prod.20.1.0.0.0.1.0.0" expl="true case (equality hypothesis)" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC factors_prod.20.1.0.0.0.1.1" expl="false case (equality hypothesis)" proved="true">
        <transf name="apply" proved="true" arg1="prime_factors_up">
         <goal name="VC factors_prod.20.1.0.0.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="159"/></proof>
         </goal>
         <goal name="VC factors_prod.20.1.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="159"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_by_factor_decomp_pre" expl="VC for divisors_by_factor_decomp_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_by_factor_decomp_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre.3" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(prime_factors a i )" arg2="(prime_factors (b * div a b) i )">
   <goal name="VC divisors_by_factor_decomp_pre.3.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="prime_factors_mult">
    <goal name="VC divisors_by_factor_decomp_pre.3.0.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
    </goal>
    <goal name="VC divisors_by_factor_decomp_pre.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="133"/></proof>
    </goal>
    <goal name="VC divisors_by_factor_decomp_pre.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.59"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors_by_factor_decomp_pre.3.1" expl="equality hypothesis" proved="true">
   <transf name="assert" proved="true" arg1="(a = div a b * b)">
    <goal name="VC divisors_by_factor_decomp_pre.3.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="unicity_div_rev">
     <goal name="VC divisors_by_factor_decomp_pre.3.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
     </goal>
     <goal name="VC divisors_by_factor_decomp_pre.3.1.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
     </goal>
     <goal name="VC divisors_by_factor_decomp_pre.3.1.0.2" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC divisors_by_factor_decomp_pre.3.1.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre.4" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(0&lt;= prime_factors (div a b) i)">
   <goal name="VC divisors_by_factor_decomp_pre.4.0" expl="asserted formula" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC divisors_by_factor_decomp_pre.4.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="prime_factors_spec4">
     <goal name="VC divisors_by_factor_decomp_pre.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors_by_factor_decomp_pre.4.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_by_factor_decomp_pre_" expl="VC for divisors_by_factor_decomp_pre_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_by_factor_decomp_pre_.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_by_factor_decomp_pre_rec" expl="VC for divisors_by_factor_decomp_pre_rec" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_by_factor_decomp_pre_rec.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="131"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.2" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="factors_prod">
   <goal name="VC divisors_by_factor_decomp_pre_rec.2.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
   </goal>
   <goal name="VC divisors_by_factor_decomp_pre_rec.2.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.3" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="factors_prod">
   <goal name="VC divisors_by_factor_decomp_pre_rec.3.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
   </goal>
   <goal name="VC divisors_by_factor_decomp_pre_rec.3.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.9" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC divisors_by_factor_decomp_pre_rec.9.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="((prime_factors b k) + (prime_factors a k - prime_factors b k))">
    <goal name="VC divisors_by_factor_decomp_pre_rec.9.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="power__sum">
     <goal name="VC divisors_by_factor_decomp_pre_rec.9.0.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="mult_eq">
      <goal name="VC divisors_by_factor_decomp_pre_rec.9.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.11" steps="140"/></proof>
      </goal>
      <goal name="VC divisors_by_factor_decomp_pre_rec.9.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="140"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC divisors_by_factor_decomp_pre_rec.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="142"/></proof>
     </goal>
     <goal name="VC divisors_by_factor_decomp_pre_rec.9.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC divisors_by_factor_decomp_pre_rec.9.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="140"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.10" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (a + 1) = (b
     * ind_iproduct
       (fun (i:int) -&gt; power_ i (prime_factors a i - prime_factors b i)) 0
       (a + 1)))">
   <goal name="VC divisors_by_factor_decomp_pre_rec.10.0" expl="asserted formula" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC divisors_by_factor_decomp_pre_rec.10.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq">
     <goal name="VC divisors_by_factor_decomp_pre_rec.10.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC divisors_by_factor_decomp_pre_rec.10.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H2">
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC divisors_by_factor_decomp_pre_rec.10.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_eq">
      <goal name="VC divisors_by_factor_decomp_pre_rec.10.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors_by_factor_decomp_pre_rec.10.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(b
     * ind_iproduct
       (fun (i:int) -&gt; power_ i (prime_factors a i - prime_factors b i)) 0
       (a + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (a + 1))">
    <goal name="VC divisors_by_factor_decomp_pre_rec.10.1.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="H1">
    </transf>
    </goal>
    <goal name="VC divisors_by_factor_decomp_pre_rec.10.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC divisors_by_factor_decomp_pre_rec.10.1.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC divisors_by_factor_decomp_pre_rec.11" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC inf_by_prime_factors" expl="VC for inf_by_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC inf_by_prime_factors.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="138"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="138"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="140"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="142"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="144"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="144"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.7" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC inf_by_prime_factors.7.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.34"/></proof>
   </goal>
   <goal name="VC inf_by_prime_factors.7.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC inf_by_prime_factors.7.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC inf_by_prime_factors.7.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC inf_by_prime_factors.7.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC inf_by_prime_factors.7.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="compat_int_order_mult">
        <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ind_iproduct_pos">
          <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="3.11"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H4">
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.43"/></proof>
          </goal>
          <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <transf name="case" proved="true" arg1="(k-1 = 0)">
           <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.1.0" expl="apply premises (true case)" proved="true">
           <transf name="case" proved="true" arg1="((prime_factors b (k - 1)) = 0)">
            <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.1.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="3"><result status="valid" time="0.67"/></proof>
            </goal>
            <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.1.0.1" expl="apply premises (false case. true case)" proved="true">
            <proof prover="6"><result status="valid" time="0.34" steps="149"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.1.1" expl="apply premises (false case)" proved="true">
           <transf name="case" proved="true" arg1="((prime_factors b (k - 1)) = 0)">
            <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
            <proof prover="3"><result status="valid" time="0.70"/></proof>
            </goal>
            <goal name="VC inf_by_prime_factors.7.1.0.0.0.0.1.0.1.1.1" expl="apply premises (false case)" proved="true">
            <proof prover="3"><result status="valid" time="0.45"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC inf_by_prime_factors.7.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="143"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC inf_by_prime_factors.7.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.10" steps="143"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC inf_by_prime_factors.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC inf_by_prime_factors.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors b i)) 0 (max a b + 1))" arg2="b" arg3="in" arg4="H">
   <goal name="VC inf_by_prime_factors.9.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (max a b + 1))" arg2="a" arg3="in" arg4="H">
    <goal name="VC inf_by_prime_factors.9.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="133"/></proof>
    </goal>
    <goal name="VC inf_by_prime_factors.9.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC inf_by_prime_factors.9.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="VC inf_by_prime_factors.9.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
      </goal>
      <goal name="VC inf_by_prime_factors.9.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.44"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC inf_by_prime_factors.9.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="goal_comm">
    <goal name="VC inf_by_prime_factors.9.1.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="VC inf_by_prime_factors.9.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="133"/></proof>
     </goal>
     <goal name="VC inf_by_prime_factors.9.1.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_to_prod" expl="VC for co_prime_to_prod">
 <transf name="split_vc" >
  <goal name="VC co_prime_to_prod.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="141"/></proof>
  </goal>
  <goal name="VC co_prime_to_prod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="141"/></proof>
  </goal>
  <goal name="VC co_prime_to_prod.2" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="( (a * b) = c)">
   <goal name="VC co_prime_to_prod.2.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(mem a (divisors c))">
    <goal name="VC co_prime_to_prod.2.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC co_prime_to_prod.2.0.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="divisors_def">
      <goal name="VC co_prime_to_prod.2.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(1&lt;= a &lt;=c)">
       <goal name="VC co_prime_to_prod.2.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC co_prime_to_prod.2.0.0.0.0.0.0" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="149"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.2.0.0.0.0.0.1" proved="true">
        <proof prover="6"><result status="valid" time="0.32" steps="151"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC co_prime_to_prod.2.0.0.0.0.1" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="((fun (j:int) -&gt; (1 &lt;= j /\ j &lt;= c) /\ mod c j = 0) a)">
        <goal name="VC co_prime_to_prod.2.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC co_prime_to_prod.2.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC co_prime_to_prod.2.0.0.0.0.1.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.22" steps="152"/></proof>
          </goal>
          <goal name="VC co_prime_to_prod.2.0.0.0.0.1.0.0.1" proved="true">
          <proof prover="6"><result status="valid" time="0.19" steps="152"/></proof>
          </goal>
          <goal name="VC co_prime_to_prod.2.0.0.0.0.1.0.0.2" proved="true">
          <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="c,a,b,0">
           <goal name="VC co_prime_to_prod.2.0.0.0.0.1.0.0.2.0" proved="true">
           <proof prover="6"><result status="valid" time="0.15" steps="156"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC co_prime_to_prod.2.0.0.0.0.1.1" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="9.34"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_to_prod.2.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_to_prod.2.0.1" expl="true case (precondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mem a (divisors a))">
     <goal name="VC co_prime_to_prod.2.0.1.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.48" steps="148"/></proof>
     </goal>
     <goal name="VC co_prime_to_prod.2.0.1.1" expl="true case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a c))">
      <goal name="VC co_prime_to_prod.2.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC co_prime_to_prod.2.0.1.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="co_prime_def">
        <goal name="VC co_prime_to_prod.2.0.1.1.0.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(exists e . mem e (inter (divisors a) (divisors c)) /\ not (mem e (to_set 1)))">
         <goal name="VC co_prime_to_prod.2.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="exists" proved="true" arg1="a">
          <goal name="VC co_prime_to_prod.2.0.1.1.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC co_prime_to_prod.2.0.1.1.0.0.0.0.0.0" proved="true">
           <proof prover="6"><result status="valid" time="0.27" steps="155"/></proof>
           </goal>
           <goal name="VC co_prime_to_prod.2.0.1.1.0.0.0.0.0.1" proved="true">
           <proof prover="6"><result status="valid" time="0.30" steps="155"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC co_prime_to_prod.2.0.1.1.0.0.0.1" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="159"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_to_prod.2.0.1.1.1" expl="true case (precondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="148"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC co_prime_to_prod.2.1" expl="false case (precondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="144"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_prime_to_prod.3" expl="precondition">
  <transf name="case" arg1="(a= c1)">
   <goal name="VC co_prime_to_prod.3.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(mem c1 (divisors (a*b)))">
    <goal name="VC co_prime_to_prod.3.0.0" expl="asserted formula" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(a*b),c1,b,0">
     <goal name="VC co_prime_to_prod.3.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC co_prime_to_prod.3.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="158"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_to_prod.3.0.1" expl="true case (precondition)" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC co_prime_to_prod.3.0.1.0" expl="true case (precondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="divisors_def">
      <goal name="VC co_prime_to_prod.3.0.1.0.0" expl="true case (precondition)" proved="true">
      <transf name="assert" proved="true" arg1="(not (fun (j:int) -&gt; (1 &lt;= j /\ j &lt;= c1) /\ mod c1 j = 0) c)">
       <goal name="VC co_prime_to_prod.3.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC co_prime_to_prod.3.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="case" proved="true" arg1="(mod c1 c = 0)">
         <goal name="VC co_prime_to_prod.3.0.1.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
         <proof prover="3"><result status="valid" time="2.75"/></proof>
         </goal>
         <goal name="VC co_prime_to_prod.3.0.1.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
         <proof prover="6"><result status="valid" time="0.20" steps="161"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC co_prime_to_prod.3.0.1.0.0.1" expl="true case (precondition)" proved="true">
       <transf name="apply" proved="true" arg1="not_in_my_filter_filter">
        <goal name="VC co_prime_to_prod.3.0.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="h">
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_to_prod.3.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="159"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC co_prime_to_prod.3.1" expl="false case (precondition)">
   <transf name="case" arg1="(mem c (divisors c1))">
    <goal name="VC co_prime_to_prod.3.1.0" expl="false case (true case. precondition)">
    <transf name="case" arg1="(mem c (divisors a))">
     <goal name="VC co_prime_to_prod.3.1.0.0" expl="false case (true case. precondition)">
     <transf name="assert" arg1="(not (co_prime a c1))">
      <goal name="VC co_prime_to_prod.3.1.0.0.0" expl="asserted formula">
      <transf name="apply" arg1="set_not_co_prime_">
       <goal name="VC co_prime_to_prod.3.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="156"/></proof>
       </goal>
       <goal name="VC co_prime_to_prod.3.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="156"/></proof>
       </goal>
       <goal name="VC co_prime_to_prod.3.1.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="156"/></proof>
       </goal>
       <goal name="VC co_prime_to_prod.3.1.0.0.0.3" expl="apply premises">
       <transf name="exists" arg1="c">
        <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0">
        <transf name="split_vc" >
         <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.0" proved="true">
         <proof prover="6"><result status="valid" time="0.43" steps="158"/></proof>
         </goal>
         <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.1">
         <transf name="assert" arg1="(mem c (to_fset 1 (a+1)))">
          <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.1.0" expl="asserted formula">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
          <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.1.1" proved="true">
          <proof prover="6"><result status="valid" time="0.35" steps="160"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.2" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="158"/></proof>
         </goal>
         <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.3" proved="true">
         <transf name="assert" proved="true" arg1="(mem c (to_fset 1 (c1+1)))">
          <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.3.0" expl="asserted formula" proved="true">
          <proof prover="0"><result status="valid" time="0.58"/></proof>
          </goal>
          <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.3.1" proved="true">
          <proof prover="6"><result status="valid" time="0.28" steps="160"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.4">
         <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
         <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
         </goal>
         <goal name="VC co_prime_to_prod.3.1.0.0.0.3.0.5" proved="true">
         <proof prover="6"><result status="valid" time="0.26" steps="158"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_to_prod.3.1.0.0.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="6"><result status="valid" time="0.16" steps="156"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC co_prime_to_prod.3.1.0.1" expl="false case (true case. precondition)">
     <transf name="assert" arg1="(mem c (divisors b))">
      <goal name="VC co_prime_to_prod.3.1.0.1.0" expl="asserted formula">
      <transf name="instantiate" arg1="divisors_euclid_lemma" arg2="b,a,c">
       <goal name="VC co_prime_to_prod.3.1.0.1.0.0" expl="asserted formula">
       <transf name="apply" arg1="Hinst">
        <goal name="VC co_prime_to_prod.3.1.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="156"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.16" steps="156"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.30" steps="158"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.17" steps="156"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.0.0.4" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="156"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.0.0.5" expl="apply premises">
        <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_to_prod.3.1.0.1.1" expl="false case (true case. precondition)" proved="true">
      <transf name="assert" proved="true" arg1="(not (co_prime b c1))">
       <goal name="VC co_prime_to_prod.3.1.0.1.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_not_co_prime_">
        <goal name="VC co_prime_to_prod.3.1.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="158"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.1.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="158"/></proof>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.1.0.2" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(mod c1 a = 0)">
         <goal name="VC co_prime_to_prod.3.1.0.1.1.0.2.0" expl="apply premises (true case)" proved="true">
         <proof prover="6"><result status="valid" time="0.38" steps="162"/></proof>
         </goal>
         <goal name="VC co_prime_to_prod.3.1.0.1.1.0.2.1" expl="apply premises (false case)" proved="true">
         <proof prover="3"><result status="valid" time="4.13"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3" expl="apply premises" proved="true">
        <transf name="exists" proved="true" arg1="c">
         <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.27" steps="160"/></proof>
          </goal>
          <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.1" proved="true">
          <transf name="assert" proved="true" arg1="(mem c (to_fset 1 (b+1)))">
           <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.1.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.44"/></proof>
           </goal>
           <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.1.1" proved="true">
           <proof prover="6"><result status="valid" time="0.28" steps="162"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.2" proved="true">
          <proof prover="6"><result status="valid" time="0.29" steps="160"/></proof>
          </goal>
          <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.3" proved="true">
          <transf name="assert" proved="true" arg1="(mem c (to_fset 1 (c1+1)))">
           <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.3.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="0.66"/></proof>
           </goal>
           <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.3.1" proved="true">
           <proof prover="6"><result status="valid" time="0.31" steps="162"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.4" proved="true">
          <proof prover="6"><result status="valid" time="0.26" steps="160"/></proof>
          </goal>
          <goal name="VC co_prime_to_prod.3.1.0.1.1.0.3.0.5" proved="true">
          <proof prover="6"><result status="valid" time="0.30" steps="160"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC co_prime_to_prod.3.1.0.1.1.1" expl="false case (true case. precondition)" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="158"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_to_prod.3.1.1" expl="false case (precondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="154"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_prime_to_prod.4" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_to_prod_rev" expl="VC for co_prime_to_prod_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_to_prod_rev.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_to_prod_rev.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_to_prod_rev.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_to_prod_rev.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_to_prod_rev.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_pow" expl="VC for co_prime_pow" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_pow.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.32" steps="139"/></proof>
  </goal>
  <goal name="VC co_prime_pow.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
  </goal>
  <goal name="VC co_prime_pow.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
  </goal>
  <goal name="VC co_prime_pow.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
  </goal>
  <goal name="VC co_prime_pow.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC co_prime_pow.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC co_prime_pow.5.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.30" steps="135"/></proof>
   </goal>
   <goal name="VC co_prime_pow.5.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC co_prime_pow.5.1.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.51"/></proof>
    </goal>
    <goal name="VC co_prime_pow.5.1.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="VC co_prime_pow.5.1.1.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.49"/></proof>
     </goal>
     <goal name="VC co_prime_pow.5.1.1.1" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="c" arg2="(c-1+1)">
      <goal name="VC co_prime_pow.5.1.1.1.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="power__sum">
       <goal name="VC co_prime_pow.5.1.1.1.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="co_prime_to_prod">
        <goal name="VC co_prime_pow.5.1.1.1.0.0.0" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(1&lt;a)">
         <goal name="VC co_prime_pow.5.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
         </goal>
         <goal name="VC co_prime_pow.5.1.1.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC co_prime_pow.5.1.1.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
        </goal>
        <goal name="VC co_prime_pow.5.1.1.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
        </goal>
        <goal name="VC co_prime_pow.5.1.1.1.0.0.3" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC co_prime_pow.5.1.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
       </goal>
       <goal name="VC co_prime_pow.5.1.1.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_pow.5.1.1.1.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_pows" expl="VC for co_prime_pows" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_pows.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC co_prime_pows.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC co_prime_pows.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
  </goal>
  <goal name="VC co_prime_pows.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.30" steps="141"/></proof>
  </goal>
  <goal name="VC co_prime_pows.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="143"/></proof>
  </goal>
  <goal name="VC co_prime_pows.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="143"/></proof>
  </goal>
  <goal name="VC co_prime_pows.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC co_prime_pows.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(power_ b d)" arg2="1">
    <goal name="VC co_prime_pows.6.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="137"/></proof>
    </goal>
    <goal name="VC co_prime_pows.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.34" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC co_prime_pows.6.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="VC co_prime_pows.6.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.74"/></proof>
    </goal>
    <goal name="VC co_prime_pows.6.1.1" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="139"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_iproduct_primes" expl="VC for div_iproduct_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_iproduct_primes.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC div_iproduct_primes.0.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
   </goal>
   <goal name="VC div_iproduct_primes.0.1" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC div_iproduct_primes.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
  </goal>
  <goal name="VC div_iproduct_primes.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="140"/></proof>
  </goal>
  <goal name="VC div_iproduct_primes.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.45" steps="138"/></proof>
  </goal>
  <goal name="VC div_iproduct_primes.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="134"/></proof>
  </goal>
  <goal name="VC div_iproduct_primes.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H2">
   <goal name="VC div_iproduct_primes.5.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.18"/></proof>
   </goal>
   <goal name="VC div_iproduct_primes.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC div_iproduct_primes.5.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC div_iproduct_primes.5.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_iproduct_right_extension">
      <goal name="VC div_iproduct_primes.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC div_iproduct_primes.5.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="case" proved="true" arg1="(f bound = 0)">
        <goal name="VC div_iproduct_primes.5.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="mult_one">
         <goal name="VC div_iproduct_primes.5.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="H3">
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
           </goal>
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_iproduct_primes.5.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.47" steps="139"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <transf name="case" proved="true" arg1="(bound = 1)">
         <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_one">
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound -1)+1 )">
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
           <transf name="apply" proved="true" arg1="H3">
            <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
            </goal>
            <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.11" steps="139"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.36" steps="141"/></proof>
           </goal>
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.18" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1" expl="false case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="co_prime_to_prod_rev">
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(bound = 1)">
            <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.0.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="6"><result status="valid" time="0.16" steps="139"/></proof>
            </goal>
            <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.0.0.1" expl="apply premises (false case)" proved="true">
            <proof prover="3"><result status="valid" time="0.78"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.26" steps="139"/></proof>
          </goal>
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="symetric_co_prime">
            <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
            </goal>
            <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
             <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="case" proved="true" arg1="(k = 0)">
                <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
                <proof prover="6"><result status="valid" time="0.40" steps="147"/></proof>
                </goal>
                <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.1.0.0.0.1" expl="apply premises (false case)" proved="true">
                <proof prover="6"><result status="valid" time="0.24" steps="147"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.2" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="H3">
             <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.2.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
             </goal>
             <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.0.2.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.2.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.25" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.5.1.0.0.0.0.1.1.3" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="4.00"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC div_iproduct_primes.5.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC div_iproduct_primes.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H5">
   <goal name="VC div_iproduct_primes.6.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.19" steps="133"/></proof>
   </goal>
   <goal name="VC div_iproduct_primes.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC div_iproduct_primes.6.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC div_iproduct_primes.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_iproduct_right_extension">
      <goal name="VC div_iproduct_primes.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC div_iproduct_primes.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="case" proved="true" arg1="(f bound = 0)">
        <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="mult_one">
         <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="case" proved="true" arg1="(bound = j)">
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
           <transf name="apply" proved="true" arg1="H6">
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.15" steps="143"/></proof>
            </goal>
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
           <proof prover="3"><result status="valid" time="3.84"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.11" steps="141"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_iproduct_primes.6.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.27" steps="143"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <transf name="case" proved="true" arg1="(bound = 1)">
         <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_one">
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound -1)+1 )">
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
           <transf name="case" proved="true" arg1="(bound = j)">
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
            <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
            </goal>
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
           </goal>
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.18" steps="141"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1" expl="false case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="co_prime_to_prod_rev">
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound ) )">
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(bound = 1)">
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.0.0.0" expl="apply premises (true case)" proved="true">
            <proof prover="6"><result status="valid" time="0.13" steps="143"/></proof>
            </goal>
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.0.0.1" expl="apply premises (false case)" proved="true">
            <proof prover="3"><result status="valid" time="0.74"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="6"><result status="valid" time="0.13" steps="143"/></proof>
          </goal>
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="((bound + 1) - 1)" arg2="((bound - 1) + 1)">
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="symetric_co_prime">
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
            </goal>
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos">
             <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.1.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="case" proved="true" arg1="(k = 0)">
                <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
                <proof prover="6"><result status="valid" time="0.25" steps="151"/></proof>
                </goal>
                <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.1.0.0.0.1" expl="apply premises (false case)" proved="true">
                <proof prover="6"><result status="valid" time="0.40" steps="151"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="3.85"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.2.1" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.3" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="co_prime_pow">
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.3.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
           </goal>
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.3.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.35"/></proof>
           </goal>
           <goal name="VC div_iproduct_primes.6.1.0.0.0.0.1.1.3.2" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.36" steps="145"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC div_iproduct_primes.6.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_factors_prod_one" expl="VC for unicity_factors_prod_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_factors_prod_one.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(f i &lt;&gt; 0)">
   <goal name="VC unicity_factors_prod_one.0.0" expl="true case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(1&lt;   ind_iproduct (fun (i1:int) -&gt; power_ i1 (f @ i1)) 0 (bound + 1))">
    <goal name="VC unicity_factors_prod_one.0.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="ind_iproduct_sup_one">
     <goal name="VC unicity_factors_prod_one.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_one.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC unicity_factors_prod_one.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC unicity_factors_prod_one.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(k = 0)">
        <goal name="VC unicity_factors_prod_one.0.0.0.1.0.0.0" expl="apply premises (true case)" proved="true">
        <transf name="replace" proved="true" arg1="(f k)" arg2="0">
         <goal name="VC unicity_factors_prod_one.0.0.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
         </goal>
         <goal name="VC unicity_factors_prod_one.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="0.41"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC unicity_factors_prod_one.0.0.0.1.0.0.1" expl="apply premises (false case)" proved="true">
        <proof prover="6"><result status="valid" time="0.23" steps="143"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC unicity_factors_prod_one.0.0.0.2" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="i">
      <goal name="VC unicity_factors_prod_one.0.0.0.2.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC unicity_factors_prod_one.0.0.0.2.0.0" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
       </goal>
       <goal name="VC unicity_factors_prod_one.0.0.0.2.0.1" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
       </goal>
       <goal name="VC unicity_factors_prod_one.0.0.0.2.0.2" proved="true">
       <transf name="case" proved="true" arg1="(i = 1)">
        <goal name="VC unicity_factors_prod_one.0.0.0.2.0.2.0" expl="true case" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
        </goal>
        <goal name="VC unicity_factors_prod_one.0.0.0.2.0.2.1" expl="false case" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC unicity_factors_prod_one.0.0.0.2.0.2.1.0" expl="false case" proved="true">
         <proof prover="4"><result status="valid" time="6.24"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod_one.0.0.1" expl="true case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="2.98"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_factors_prod_one.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_factors_prod_pre" expl="VC for unicity_factors_prod_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_factors_prod_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="137"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="138"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="160"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.22" steps="160"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.8" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(b = ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors b i)) 0 (bound + 1))">
   <goal name="VC unicity_factors_prod_pre.8.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="H2">
    <goal name="VC unicity_factors_prod_pre.8.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.36"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_factors_prod_pre.8.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (if i = b then 1 else 0)) 0
    (bound + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors b i)) 0 (bound + 1))">
    <goal name="VC unicity_factors_prod_pre.8.1.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="h">
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod_pre.8.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ind_iproduct_eq">
     <goal name="VC unicity_factors_prod_pre.8.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC unicity_factors_prod_pre.8.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC unicity_factors_prod_pre.8.1.1.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC unicity_factors_prod_pre.8.1.1.0.0.0.0" proved="true">
        <proof prover="3"><result status="valid" time="2.88"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.9" expl="assertion" proved="true">
  <transf name="apply" proved="true" arg1="unicity_div_rev_">
   <goal name="VC unicity_factors_prod_pre.9.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.9.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="145"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.9.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.15" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.10" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(f b = 0)">
   <goal name="VC unicity_factors_prod_pre.10.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime  b a)">
    <goal name="VC unicity_factors_prod_pre.10.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC unicity_factors_prod_pre.10.0.0.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="div_iproduct_primes" arg2="bound,(fun (i:int) -&gt; (f i))">
      <goal name="VC unicity_factors_prod_pre.10.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
       <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
        </goal>
        <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.0.0" expl="destruct premise" proved="true">
          <proof prover="6"><result status="valid" time="0.44" steps="151"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.0" expl="destruct premise" proved="true">
          <proof prover="6"><result status="valid" time="0.24" steps="149"/></proof>
          </goal>
          <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.1" expl="asserted formula" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
           <proof prover="0"><result status="valid" time="0.44"/></proof>
           </goal>
           <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.1.1" expl="asserted formula" proved="true">
           <transf name="destruct" proved="true" arg1="Hinst">
            <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.47"/></proof>
             </goal>
             <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.13" steps="143"/></proof>
             </goal>
             <goal name="VC unicity_factors_prod_pre.10.0.0.0.0.0.1.1.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod_pre.10.0.1" expl="true case (assertion)" proved="true">
    <transf name="case" proved="true" arg1="(a=b)">
     <goal name="VC unicity_factors_prod_pre.10.0.1.0" expl="true case (assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a b))">
      <goal name="VC unicity_factors_prod_pre.10.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC unicity_factors_prod_pre.10.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="co_prime_def">
        <goal name="VC unicity_factors_prod_pre.10.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="case" proved="true" arg1="(a=1)">
         <goal name="VC unicity_factors_prod_pre.10.0.1.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="154"/></proof>
         </goal>
         <goal name="VC unicity_factors_prod_pre.10.0.1.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem a (inter (divisors a) (divisors b)))">
          <goal name="VC unicity_factors_prod_pre.10.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.31" steps="157"/></proof>
          </goal>
          <goal name="VC unicity_factors_prod_pre.10.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
          <proof prover="6"><result status="valid" time="0.32" steps="161"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC unicity_factors_prod_pre.10.0.1.0.1" expl="true case (assertion)" proved="true">
      <proof prover="6"><result status="valid" time="0.28" steps="147"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC unicity_factors_prod_pre.10.0.1.1" expl="false case (true case. assertion)" proved="true">
     <proof prover="0"><result status="valid" time="0.58"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_factors_prod_pre.10.1" expl="false case (assertion)" proved="true">
   <proof prover="0"><result status="valid" time="0.50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.11" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall divprod. a = b * divprod -&gt; divb = divprod)">
   <goal name="VC unicity_factors_prod_pre.11.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.61"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.11.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="h">
    <goal name="VC unicity_factors_prod_pre.11.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H8">
     <goal name="VC unicity_factors_prod_pre.11.1.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(b
     * ind_iproduct
       (fun (i:int) -&gt; power_ i (if i = b then (f @ i) - 1 else f @ i)) 0
       (bound + 1))" arg2="(ind_iproduct (fun (i:int) -&gt; power_ i (if i = b then 1 else 0)) 0
    (bound + 1)     * ind_iproduct
       (fun (i:int) -&gt; power_ i (if i = b then (f @ i) - 1 else f @ i)) 0
       (bound + 1))">
      <goal name="VC unicity_factors_prod_pre.11.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_comp">
       <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
       </goal>
       <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="( power_ k (f @ k))" arg2="( power_ k ( 1 + (f @ k-1)))">
            <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="power__sum">
             <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.14" steps="149"/></proof>
             </goal>
             <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
             </goal>
             <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.31" steps="149"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.13" steps="149"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.13" steps="149"/></proof>
           </goal>
           <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
           </goal>
           <goal name="VC unicity_factors_prod_pre.11.1.0.0.0.1.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.43" steps="153"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC unicity_factors_prod_pre.11.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="assert" proved="true" arg1="(forall x. b* x =  ind_iproduct (fun (i:int) -&gt; power_ i (if i = b then 1 else 0)) 0
    (bound + 1) * x)">
       <goal name="VC unicity_factors_prod_pre.11.1.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC unicity_factors_prod_pre.11.1.0.0.1.0.0" expl="asserted formula" proved="true">
        <transf name="assert" proved="true" arg1="(forall x y z.  x= y -&gt; x*z= y*z)">
         <goal name="VC unicity_factors_prod_pre.11.1.0.0.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC unicity_factors_prod_pre.11.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC unicity_factors_prod_pre.11.1.0.0.1.0.0.1" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="h1">
          <goal name="VC unicity_factors_prod_pre.11.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="H2">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC unicity_factors_prod_pre.11.1.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.12" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_factors_prod_pre.12.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.37" steps="151"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.12.1" expl="variant decrease" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC unicity_factors_prod_pre.12.1.0" expl="variant decrease" proved="true">
    <transf name="apply" proved="true" arg1="strict_subset_divisors">
     <goal name="VC unicity_factors_prod_pre.12.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="147"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_pre.12.1.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="3.81"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_pre.12.1.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="3.72"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.13" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.13.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.14" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.14.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.16" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.16.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC unicity_factors_prod_pre.16.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC unicity_factors_prod_pre.16.0.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="159"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_pre.16.0.0.1" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="163"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_factors_prod_pre.17.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.29" steps="182"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.17.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.18" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC unicity_factors_prod_pre.18.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.19" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(prime_factors a b = 0)">
   <goal name="VC unicity_factors_prod_pre.19.0" expl="true case (assertion)" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime b a)">
    <goal name="VC unicity_factors_prod_pre.19.0.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC unicity_factors_prod_pre.19.0.0.0" expl="asserted formula" proved="true">
     <transf name="replace" proved="true" arg1="a" arg2="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (bound + 1))">
      <goal name="VC unicity_factors_prod_pre.19.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="instantiate" proved="true" arg1="div_iproduct_primes" arg2="bound,(prime_factors a)">
       <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.22" steps="151"/></proof>
        </goal>
        <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1" expl="asserted formula" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
         <proof prover="3"><result status="valid" time="3.63"/></proof>
         </goal>
         <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1" expl="asserted formula" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.0" expl="destruct premise" proved="true">
          <proof prover="3"><result status="valid" time="4.44"/></proof>
          </goal>
          <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.1" expl="asserted formula" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
           <proof prover="3"><result status="valid" time="4.33"/></proof>
           </goal>
           <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.1.1" expl="asserted formula" proved="true">
           <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
            <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="Hinst">
             <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.59"/></proof>
             </goal>
             <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.14" steps="151"/></proof>
             </goal>
             <goal name="VC unicity_factors_prod_pre.19.0.0.0.0.0.1.1.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="6"><result status="valid" time="0.14" steps="151"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC unicity_factors_prod_pre.19.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="factors_prod">
       <goal name="VC unicity_factors_prod_pre.19.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.15" steps="151"/></proof>
       </goal>
       <goal name="VC unicity_factors_prod_pre.19.0.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="151"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod_pre.19.0.1" expl="true case (assertion)" proved="true">
    <transf name="case" proved="true" arg1="(a=b)">
     <goal name="VC unicity_factors_prod_pre.19.0.1.0" expl="true case (assertion)" proved="true">
     <transf name="assert" proved="true" arg1="(not (co_prime a b))">
      <goal name="VC unicity_factors_prod_pre.19.0.1.0.0" expl="asserted formula" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC unicity_factors_prod_pre.19.0.1.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="co_prime_def">
        <goal name="VC unicity_factors_prod_pre.19.0.1.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="case" proved="true" arg1="(a=1)">
         <goal name="VC unicity_factors_prod_pre.19.0.1.0.0.0.0.0" expl="true case (asserted formula)" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="162"/></proof>
         </goal>
         <goal name="VC unicity_factors_prod_pre.19.0.1.0.0.0.0.1" expl="false case (asserted formula)" proved="true">
         <transf name="assert" proved="true" arg1="(mem a (inter (divisors a) (divisors b)))">
          <goal name="VC unicity_factors_prod_pre.19.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.43" steps="165"/></proof>
          </goal>
          <goal name="VC unicity_factors_prod_pre.19.0.1.0.0.0.0.1.1" expl="false case (asserted formula)" proved="true">
          <proof prover="6"><result status="valid" time="0.25" steps="169"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC unicity_factors_prod_pre.19.0.1.0.1" expl="true case (assertion)" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="155"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC unicity_factors_prod_pre.19.0.1.1" expl="false case (true case. assertion)" proved="true">
     <proof prover="0"><result status="valid" time="0.43"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_factors_prod_pre.19.1" expl="false case (assertion)" proved="true">
   <proof prover="6"><result status="valid" time="0.46" steps="155"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.20" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(forall divprod. a = b * divprod -&gt; divb = divprod)">
   <goal name="VC unicity_factors_prod_pre.20.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.20.1" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="h">
    <goal name="VC unicity_factors_prod_pre.20.1.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (bound + 1) = ind_iproduct (fun (i:int) -&gt; power_ i (if i = b then 1 else 0)) 0 (bound + 1) * ind_iproduct
       (fun (i:int) -&gt;
         power_ i
         (if i = b then prime_factors a i - 1 else prime_factors a i))
       0 (bound + 1))">
     <goal name="VC unicity_factors_prod_pre.20.1.0.0" expl="asserted formula" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_comp">
      <goal name="VC unicity_factors_prod_pre.20.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="151"/></proof>
      </goal>
      <goal name="VC unicity_factors_prod_pre.20.1.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="( power_ k (prime_factors a k))" arg2="(power_ k ((if k = b then 1 else 0) + (if k = b then prime_factors a k - 1 else (prime_factors a) @ k)))">
         <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="power__sum">
           <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="mult_eq">
            <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.15" steps="155"/></proof>
            </goal>
            <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="6"><result status="valid" time="0.43" steps="161"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.12" steps="155"/></proof>
           </goal>
           <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.2.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.12" steps="157"/></proof>
             </goal>
             <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="6"><result status="valid" time="0.27" steps="161"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC unicity_factors_prod_pre.20.1.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="0.90"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC unicity_factors_prod_pre.20.1.0.1" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (if i = b then 1 else 0)) 0
     (bound + 1))" arg2="b" arg3="in" arg4="h">
      <goal name="VC unicity_factors_prod_pre.20.1.0.1.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (bound + 1))" arg2="a" arg3="in" arg4="h">
       <goal name="VC unicity_factors_prod_pre.20.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="h">
       </transf>
       </goal>
       <goal name="VC unicity_factors_prod_pre.20.1.0.1.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC unicity_factors_prod_pre.20.1.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H6">
         <goal name="VC unicity_factors_prod_pre.20.1.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.29" steps="155"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC unicity_factors_prod_pre.20.1.0.1.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC unicity_factors_prod_pre.20.1.0.1.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H5">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.21" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="157"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="157"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_pre.23" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_factors_prod_pre.23.0" expl="variant decrease" proved="true">
   <proof prover="6"><result status="valid" time="0.32" steps="159"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.23.1" expl="variant decrease" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC unicity_factors_prod_pre.23.1.0" expl="variant decrease" proved="true">
    <transf name="apply" proved="true" arg1="strict_subset_divisors">
     <goal name="VC unicity_factors_prod_pre.23.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="155"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_pre.23.1.0.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(b=1)">
      <goal name="VC unicity_factors_prod_pre.23.1.0.1.0" expl="apply premises (true case)" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="155"/></proof>
      </goal>
      <goal name="VC unicity_factors_prod_pre.23.1.0.1.1" expl="apply premises (false case)" proved="true">
      <proof prover="0"><result status="valid" time="0.70"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC unicity_factors_prod_pre.23.1.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_mem_divisors">
      <goal name="VC unicity_factors_prod_pre.23.1.0.2.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="155"/></proof>
      </goal>
      <goal name="VC unicity_factors_prod_pre.23.1.0.2.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.78"/></proof>
      </goal>
      <goal name="VC unicity_factors_prod_pre.23.1.0.2.2" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="5.64"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.24" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.24.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC unicity_factors_prod_pre.24.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC unicity_factors_prod_pre.24.0.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="0.62"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_pre.24.0.0.1" expl="precondition" proved="true">
     <proof prover="3"><result status="valid" time="0.63"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.25" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.25.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC unicity_factors_prod_pre.25.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC unicity_factors_prod_pre.25.0.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.16" steps="163"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_pre.25.0.0.1" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.36" steps="165"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.26" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.26.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="163"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.27" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.27.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC unicity_factors_prod_pre.27.0.0" expl="VC for unicity_factors_prod_pre" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC unicity_factors_prod_pre.27.0.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.17" steps="167"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod_pre.27.0.0.1" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.34" steps="171"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.28" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_factors_prod_pre.28.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.41" steps="190"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod_pre.28.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.29" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_pre.29.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H5">
    <goal name="VC unicity_factors_prod_pre.29.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.30" expl="assertion" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC unicity_factors_prod_pre.30.0" expl="VC for unicity_factors_prod_pre" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC unicity_factors_prod_pre.30.0.0" expl="assertion" proved="true">
    <proof prover="6"><result status="valid" time="0.35" steps="163"/></proof>
    </goal>
    <goal name="VC unicity_factors_prod_pre.30.0.1" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.42"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.31" expl="assertion" proved="true">
  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
   <goal name="VC unicity_factors_prod_pre.31.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC unicity_factors_prod_pre.31.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC unicity_factors_prod_pre.31.0.0.0" expl="assertion" proved="true">
     <transf name="case" proved="true" arg1="(i=b)">
      <goal name="VC unicity_factors_prod_pre.31.0.0.0.0" expl="true case (assertion)" proved="true">
      <proof prover="6"><result status="valid" time="0.36" steps="169"/></proof>
      </goal>
      <goal name="VC unicity_factors_prod_pre.31.0.0.0.1" expl="false case (assertion)" proved="true">
      <proof prover="4"><result status="valid" time="0.42"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_pre.32" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC unicity_factors_prod_pre.32.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(prime i)">
    <goal name="VC unicity_factors_prod_pre.32.0.0" expl="true case (postcondition)" proved="true">
    <transf name="instantiate" proved="true" arg1="unicity_factors_prod_one" arg2="bound,f">
     <goal name="VC unicity_factors_prod_pre.32.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC unicity_factors_prod_pre.32.0.0.0.0" expl="destruct premise" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
      </goal>
      <goal name="VC unicity_factors_prod_pre.32.0.0.0.1" expl="true case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.0" expl="destruct premise" proved="true">
       <proof prover="6"><result status="valid" time="0.25" steps="141"/></proof>
       </goal>
       <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1" expl="true case (postcondition)" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
        </goal>
        <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1" expl="true case (postcondition)" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1.0" expl="destruct premise" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="141"/></proof>
         </goal>
         <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1.1" expl="true case (postcondition)" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1.1.0" expl="destruct premise" proved="true">
          <proof prover="3"><result status="valid" time="2.33"/></proof>
          </goal>
          <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1.1.1" expl="true case (postcondition)" proved="true">
          <transf name="destruct" proved="true" arg1="Hinst">
           <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1.1.1.0" expl="destruct premise" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1.1.1.0.0" expl="destruct premise" proved="true">
            <proof prover="6"><result status="valid" time="0.26" steps="143"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC unicity_factors_prod_pre.32.0.0.0.1.1.1.1.1.1" expl="true case (postcondition)" proved="true">
           <proof prover="3"><result status="valid" time="0.43"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod_pre.32.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.49"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_factors_prod_pre.32.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC unicity_factors_prod_pre.32.1.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.27" steps="163"/></proof>
    </goal>
    <goal name="VC unicity_factors_prod_pre.32.1.1" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.29" steps="172"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_factors_prod" expl="VC for unicity_factors_prod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_factors_prod.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_factors_prod.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC unicity_factors_prod.0.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="ind_iproduct_strict_pos_one">
     <goal name="VC unicity_factors_prod.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC unicity_factors_prod.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC unicity_factors_prod.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(k = 0)">
        <goal name="VC unicity_factors_prod.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
        <transf name="replace" proved="true" arg1="(f k)" arg2="0">
         <goal name="VC unicity_factors_prod.0.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="137"/></proof>
         </goal>
         <goal name="VC unicity_factors_prod.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(0 &lt;= f 0 &lt;= prime_factors c 0)">
          <goal name="VC unicity_factors_prod.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.23" steps="136"/></proof>
          </goal>
          <goal name="VC unicity_factors_prod.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="0.45"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC unicity_factors_prod.0.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="137"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_factors_prod.0.1" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors c   i)) 0 (c + 1))">
    <goal name="VC unicity_factors_prod.0.1.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC unicity_factors_prod.0.1.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_inf">
      <goal name="VC unicity_factors_prod.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC unicity_factors_prod.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC unicity_factors_prod.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(k = 0)">
         <goal name="VC unicity_factors_prod.0.1.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
         <transf name="replace" proved="true" arg1="(f k)" arg2="0">
          <goal name="VC unicity_factors_prod.0.1.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
          <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
          </goal>
          <goal name="VC unicity_factors_prod.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(0 &lt;= f 0 &lt;= prime_factors c 0)">
           <goal name="VC unicity_factors_prod.0.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.21" steps="136"/></proof>
           </goal>
           <goal name="VC unicity_factors_prod.0.1.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="0.44"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC unicity_factors_prod.0.1.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
         <proof prover="6"><result status="valid" time="0.19" steps="137"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC unicity_factors_prod.0.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC unicity_factors_prod.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(f k =0)">
         <goal name="VC unicity_factors_prod.0.1.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
         <proof prover="3"><result status="valid" time="2.39"/></proof>
         </goal>
         <goal name="VC unicity_factors_prod.0.1.0.0.0.1.0.1" expl="apply premises (false case)" proved="true">
         <proof prover="3"><result status="valid" time="0.47"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="VC unicity_factors_prod.0.1.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="129"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod.0.1.1.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="129"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod.1" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(0 &lt;= f i &lt;= prime_factors c i)">
   <goal name="VC unicity_factors_prod.1.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="138"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod.1.1" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(prime_factors c i = 0)">
    <goal name="VC unicity_factors_prod.1.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_prime_factors_over">
     <goal name="VC unicity_factors_prod.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="141"/></proof>
     </goal>
     <goal name="VC unicity_factors_prod.1.1.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="141"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod.1.1.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(0 &lt;= f i &lt;= prime_factors c i)">
   <goal name="VC unicity_factors_prod.2.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC unicity_factors_prod.2.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
    </goal>
    <goal name="VC unicity_factors_prod.2.0.1" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC unicity_factors_prod.2.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod.3" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(prime_factors c 1 = 0)">
   <goal name="VC unicity_factors_prod.3.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="135"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod.3.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="139"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC unicity_factors_prod.5.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod.5.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="2.53"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="divisors_by_factor_decomp_pre_rec">
   <goal name="VC unicity_factors_prod.7.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod.7.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
   </goal>
   <goal name="VC unicity_factors_prod.7.2" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.53"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_factors_prod_" expl="VC for unicity_factors_prod_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_factors_prod_.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="127"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="129"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="2.27"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="131"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.74"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC unicity_factors_prod_gen" expl="VC for unicity_factors_prod_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC unicity_factors_prod_gen.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_gen.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC unicity_factors_prod_gen.1.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="2.13"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC unicity_factors_prod_gen.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_gen.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.44" steps="135"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_gen.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.41" steps="135"/></proof>
  </goal>
  <goal name="VC unicity_factors_prod_gen.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC unicity_factors_prod_gen.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mult_one">
    <goal name="VC unicity_factors_prod_gen.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
    <goal name="VC unicity_factors_prod_gen.5.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="H1">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC gcd" expl="VC for gcd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC gcd.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="129"/></proof>
  </goal>
  <goal name="VC gcd.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
  </goal>
  <goal name="VC gcd.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
  </goal>
  <goal name="VC gcd.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC gcd.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC gcd.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
   </goal>
   <goal name="VC gcd.4.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="133"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC gcd.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
  </goal>
  <goal name="VC gcd.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC gcd.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
  </goal>
  <goal name="VC gcd.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
  <goal name="VC gcd.10" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.10.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="2.71"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="137"/></proof>
  </goal>
  <goal name="VC gcd.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC gcd.13" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.13.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="3.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.14" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC gcd.14.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="res_def">
    <goal name="VC gcd.14.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC gcd.14.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mult_one">
      <goal name="VC gcd.14.0.0.0.0" expl="assertion" proved="true">
      <proof prover="3"><result status="valid" time="4.49"/></proof>
      </goal>
      <goal name="VC gcd.14.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="H1">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.15" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC gcd.15.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="res_def">
    <goal name="VC gcd.15.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC gcd.15.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="mult_one">
      <goal name="VC gcd.15.0.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_eq">
       <goal name="VC gcd.15.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC gcd.15.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="H1">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="143"/></proof>
  </goal>
  <goal name="VC gcd.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="145"/></proof>
  </goal>
  <goal name="VC gcd.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
  </goal>
  <goal name="VC gcd.19" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.19.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.88"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.20" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.20.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H3">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.21" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.21.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="145"/></proof>
  </goal>
  <goal name="VC gcd.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="147"/></proof>
  </goal>
  <goal name="VC gcd.24" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="145"/></proof>
  </goal>
  <goal name="VC gcd.25" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.25.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(0 &lt;= prime_factors a i)">
    <goal name="VC gcd.25.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.58" steps="147"/></proof>
    </goal>
    <goal name="VC gcd.25.0.1" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(0 &lt;= prime_factors b i)">
     <goal name="VC gcd.25.0.1.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.36" steps="149"/></proof>
     </goal>
     <goal name="VC gcd.25.0.1.1" expl="precondition" proved="true">
     <proof prover="3"><result status="valid" time="0.46"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.26" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.26.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H3">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.27" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC gcd.27.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.28" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="147"/></proof>
  </goal>
  <goal name="VC gcd.29" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="149"/></proof>
  </goal>
  <goal name="VC gcd.30" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod_pre" arg2="result,(a*b),(fun i -&gt; min (prime_factors a i) (prime_factors b i))">
   <goal name="VC gcd.30.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC gcd.30.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC gcd.30.0.0.0" expl="destruct premise" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC gcd.30.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC gcd.30.0.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="replace" proved="true" arg1="(prime_factors a i)" arg2="0">
        <goal name="VC gcd.30.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="6"><result status="valid" time="0.68" steps="155"/></proof>
        </goal>
        <goal name="VC gcd.30.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="3.22"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC gcd.30.0.0.1" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC gcd.30.0.0.1.0" expl="destruct premise" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC gcd.30.0.0.1.0.0" expl="destruct premise" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC gcd.30.0.0.1.0.0.0" expl="destruct premise" proved="true">
        <proof prover="3"><result status="valid" time="0.69"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC gcd.30.0.0.1.1" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC gcd.30.0.0.1.1.0" expl="destruct premise" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC gcd.30.0.0.1.1.0.0" expl="destruct premise" proved="true">
        <proof prover="3"><result status="valid" time="0.72"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC gcd.30.0.0.1.1.1" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC gcd.30.0.0.1.1.1.0" expl="destruct premise" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC gcd.30.0.0.1.1.1.0.0" expl="destruct premise" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC gcd.30.0.0.1.1.1.0.0.0" expl="destruct premise" proved="true">
          <proof prover="3"><result status="valid" time="0.51"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC gcd.30.0.0.1.1.1.1" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC gcd.30.0.0.1.1.1.1.0" expl="destruct premise" proved="true">
         <transf name="assert" proved="true" arg1="(mem result (divisors (a * b)))">
          <goal name="VC gcd.30.0.0.1.1.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="replace" proved="true" arg1="result" arg2="res">
           <goal name="VC gcd.30.0.0.1.1.1.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.33" steps="151"/></proof>
           </goal>
           <goal name="VC gcd.30.0.0.1.1.1.1.0.0.1" expl="equality hypothesis" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="VC gcd.30.0.0.1.1.1.1.0.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="res_def">
             <goal name="VC gcd.30.0.0.1.1.1.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="result_def">
              <goal name="VC gcd.30.0.0.1.1.1.1.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC gcd.30.0.0.1.1.1.1.0.1" expl="destruct premise" proved="true">
          <proof prover="6"><result status="valid" time="0.52" steps="152"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC gcd.30.0.0.1.1.1.1.1" expl="postcondition" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="VC gcd.30.0.0.1.1.1.1.1.0" expl="destruct premise" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC gcd.30.0.0.1.1.1.1.1.0.0" expl="destruct premise" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="VC gcd.30.0.0.1.1.1.1.1.0.0.0" expl="destruct premise" proved="true">
            <transf name="apply" proved="true" arg1="result_def">
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC gcd.30.0.0.1.1.1.1.1.1" expl="postcondition" proved="true">
          <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
           <goal name="VC gcd.30.0.0.1.1.1.1.1.1.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.31" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="res">
   <goal name="VC gcd.31.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="VC gcd.31.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="149"/></proof>
    </goal>
    <goal name="VC gcd.31.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.34" steps="150"/></proof>
    </goal>
    <goal name="VC gcd.31.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.34" steps="151"/></proof>
    </goal>
   </transf>
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="res,a,((div res (a*b))*b),0">
    <goal name="VC gcd.31.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="149"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC gcd.31.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC gcd.31.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="res_def">
     <goal name="VC gcd.31.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="result_def">
      <goal name="VC gcd.31.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.32" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="res">
   <goal name="VC gcd.32.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="VC gcd.32.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="151"/></proof>
    </goal>
    <goal name="VC gcd.32.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.33" steps="152"/></proof>
    </goal>
    <goal name="VC gcd.32.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.34" steps="153"/></proof>
    </goal>
   </transf>
   <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="res,a,((div res (a*b))*b),0">
    <goal name="VC gcd.32.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="151"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC gcd.32.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC gcd.32.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="res_def">
     <goal name="VC gcd.32.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="result_def">
      <goal name="VC gcd.32.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC gcd.33" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC gcd.33.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="j" arg2="(ind_iproduct
    (fun (i:int) -&gt; power_ i (( fun k -&gt; prime_factors j k) i)) 0
    ((a * b) + 1))">
    <goal name="VC gcd.33.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="unicity_factors_prod_gen">
     <goal name="VC gcd.33.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC gcd.33.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.33" steps="164"/></proof>
      </goal>
      <goal name="VC gcd.33.0.0.0.1" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="mem_divisors_trans" arg2="result,a,(a*b)">
       <goal name="VC gcd.33.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="4"><result status="valid" time="5.93"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC gcd.33.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC gcd.33.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.82"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC gcd.33.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC gcd.33.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC gcd.33.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="( prime_factors j i &lt;= prime_factors a i
)">
        <goal name="VC gcd.33.0.0.2.0.0.0" expl="asserted formula" proved="true">
        <proof prover="6"><result status="valid" time="0.33" steps="164"/></proof>
        </goal>
        <goal name="VC gcd.33.0.0.2.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="( prime_factors j i &lt;= prime_factors b i
)">
         <goal name="VC gcd.33.0.0.2.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.34" steps="166"/></proof>
         </goal>
         <goal name="VC gcd.33.0.0.2.0.0.1.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H4">
          <goal name="VC gcd.33.0.0.2.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.48"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC gcd.33.0.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC gcd.33.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="VC gcd.33.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.37" steps="164"/></proof>
      </goal>
      <goal name="VC gcd.33.0.1.0.1" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="mem_divisors_trans" arg2="result,a,(a*b)">
       <goal name="VC gcd.33.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="4"><result status="valid" time="5.89"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC gcd_prime_factors" expl="VC for gcd_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC gcd_prime_factors.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC scm" expl="VC for scm" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scm.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="129"/></proof>
  </goal>
  <goal name="VC scm.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
  </goal>
  <goal name="VC scm.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC scm.2.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="a" arg2="( ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors a i)) 0 (a*b + 1))">
    <goal name="VC scm.2.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC scm.2.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="res_def">
      <goal name="VC scm.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_inf">
       <goal name="VC scm.2.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC scm.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC scm.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.80"/></proof>
         </goal>
         <goal name="VC scm.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(k = 0)">
          <goal name="VC scm.2.0.0.0.0.0.0.1.0" expl="apply premises (true case)" proved="true">
          <transf name="replace" proved="true" arg1="(max (prime_factors a k) (prime_factors b k))" arg2="0">
           <goal name="VC scm.2.0.0.0.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
           <proof prover="3"><result status="valid" time="0.53"/></proof>
           </goal>
           <goal name="VC scm.2.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="0">
            <goal name="VC scm.2.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(prime_factors b k)" arg2="0">
             <goal name="VC scm.2.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
             <proof prover="6"><result status="valid" time="0.23" steps="144"/></proof>
             </goal>
             <goal name="VC scm.2.0.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="6"><result status="valid" time="0.26" steps="144"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC scm.2.0.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.20" steps="144"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC scm.2.0.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
          <transf name="case" proved="true" arg1="( (prime_factors a k) = 0)">
           <goal name="VC scm.2.0.0.0.0.0.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
           <proof prover="3"><result status="valid" time="0.51"/></proof>
           </goal>
           <goal name="VC scm.2.0.0.0.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="3"><result status="valid" time="0.42"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.2.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="VC scm.2.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
     </goal>
     <goal name="VC scm.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.27" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC scm.2.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(a*b)" arg2="(ind_iproduct
  (fun (i:int) -&gt; power_ i ((prime_factors a i) + (prime_factors b i))) 0
  ((a * b) + 1))">
    <goal name="VC scm.2.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC scm.2.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="res_def">
      <goal name="VC scm.2.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_inf">
       <goal name="VC scm.2.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC scm.2.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="2.40"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.2.1.1" expl="equality hypothesis" proved="true">
    <transf name="instantiate" proved="true" arg1="factors_prod" arg2="(a*b)">
     <goal name="VC scm.2.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC scm.2.1.1.0.0" expl="destruct premise" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
      </goal>
      <goal name="VC scm.2.1.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="(a*b)">
       <goal name="VC scm.2.1.1.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (i:int) -&gt; power_ i (prime_factors a i + prime_factors b i)) 0
    ((a * b) + 1))" arg2="( ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors (a * b) i)) 0
    ((a * b) + 1))">
        <goal name="VC scm.2.1.1.0.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="2.79"/></proof>
        </goal>
        <goal name="VC scm.2.1.1.0.1.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="ind_iproduct_eq">
         <goal name="VC scm.2.1.1.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC scm.2.1.1.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC scm.2.1.1.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.46" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC scm.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="b" arg2="( ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors b i)) 0 (a*b + 1))">
    <goal name="VC scm.3.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC scm.3.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="res_def">
      <goal name="VC scm.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_inf">
       <goal name="VC scm.3.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC scm.3.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC scm.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="2.42"/></proof>
         </goal>
         <goal name="VC scm.3.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(k = 0)">
          <goal name="VC scm.3.0.0.0.0.0.0.1.0" expl="apply premises (true case)" proved="true">
          <transf name="replace" proved="true" arg1="(max (prime_factors a k) (prime_factors b k))" arg2="0">
           <goal name="VC scm.3.0.0.0.0.0.0.1.0.0" expl="apply premises (true case)" proved="true">
           <proof prover="3"><result status="valid" time="0.50"/></proof>
           </goal>
           <goal name="VC scm.3.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="0">
            <goal name="VC scm.3.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(prime_factors b k)" arg2="0">
             <goal name="VC scm.3.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="148"/></proof>
             </goal>
             <goal name="VC scm.3.0.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="6"><result status="valid" time="0.28" steps="148"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC scm.3.0.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="6"><result status="valid" time="0.27" steps="148"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC scm.3.0.0.0.0.0.0.1.1" expl="apply premises (false case)" proved="true">
          <transf name="case" proved="true" arg1="( (prime_factors b k) = 0)">
           <goal name="VC scm.3.0.0.0.0.0.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
           <proof prover="3"><result status="valid" time="0.52"/></proof>
           </goal>
           <goal name="VC scm.3.0.0.0.0.0.0.1.1.1" expl="apply premises (false case)" proved="true">
           <proof prover="3"><result status="valid" time="0.65"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="factors_prod">
     <goal name="VC scm.3.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.24" steps="135"/></proof>
     </goal>
     <goal name="VC scm.3.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.52"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC scm.3.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
  </goal>
  <goal name="VC scm.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
  <goal name="VC scm.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="VC scm.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="141"/></proof>
  </goal>
  <goal name="VC scm.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="VC scm.10" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.10.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.41"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.11" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.11.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="6.30"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="141"/></proof>
  </goal>
  <goal name="VC scm.13" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC scm.13.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="141"/></proof>
  </goal>
  <goal name="VC scm.15" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC scm.15.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.16" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.16.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a i)" arg2="0">
    <goal name="VC scm.16.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(prime_factors b i)" arg2="0">
     <goal name="VC scm.16.0.0.0" expl="precondition" proved="true">
     <proof prover="6"><result status="valid" time="0.26" steps="147"/></proof>
     </goal>
     <goal name="VC scm.16.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_prime_factors_over">
      <goal name="VC scm.16.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="145"/></proof>
      </goal>
      <goal name="VC scm.16.0.0.1.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(b&lt;=a*b )">
       <goal name="VC scm.16.0.0.1.1.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.11" steps="145"/></proof>
       </goal>
       <goal name="VC scm.16.0.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.16" steps="147"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.16.0.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(a&lt;=a*b )">
     <goal name="VC scm.16.0.1.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.25" steps="145"/></proof>
     </goal>
     <goal name="VC scm.16.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.51"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.17" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.17.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.40"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.18" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.18.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.19" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.19.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.20" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_iproduct
     (fun (i:int) -&gt; power_ i (max (prime_factors a i) (prime_factors b i)))
     0 ((a * b) + 1))" arg2="res">
   <goal name="VC scm.20.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC scm.20.0.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
    </goal>
    <goal name="VC scm.20.0.1" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="143"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC scm.20.1" expl="equality hypothesis" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC scm.20.1.0" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC scm.20.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="res_def">
      <goal name="VC scm.20.1.0.0.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ind_iproduct_eq">
       <goal name="VC scm.20.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.21" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.21.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="ind_iproduct_eq">
    <goal name="VC scm.21.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="141"/></proof>
  </goal>
  <goal name="VC scm.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
  </goal>
  <goal name="VC scm.24" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="143"/></proof>
  </goal>
  <goal name="VC scm.25" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="143"/></proof>
  </goal>
  <goal name="VC scm.26" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="145"/></proof>
  </goal>
  <goal name="VC scm.27" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.27.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors a k)" arg2="0">
    <goal name="VC scm.27.0.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.43" steps="151"/></proof>
    </goal>
    <goal name="VC scm.27.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.66"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.28" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="147"/></proof>
  </goal>
  <goal name="VC scm.29" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC scm.29.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(prime_factors b k)" arg2="0">
    <goal name="VC scm.29.0.0" expl="precondition" proved="true">
    <proof prover="6"><result status="valid" time="0.52" steps="153"/></proof>
    </goal>
    <goal name="VC scm.29.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.30" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="factors_prod" arg2="j">
   <goal name="VC scm.30.0" expl="assertion" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC scm.30.0.0" expl="destruct premise" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="155"/></proof>
    </goal>
    <goal name="VC scm.30.0.1" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="(max res j)">
     <goal name="VC scm.30.0.1.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="factors_prod" arg2="res">
      <goal name="VC scm.30.0.1.0.0" expl="assertion" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC scm.30.0.1.0.0.0" expl="destruct premise" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="155"/></proof>
       </goal>
       <goal name="VC scm.30.0.1.0.0.1" expl="assertion" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="(max res j)">
        <goal name="VC scm.30.0.1.0.0.1.0" expl="assertion" proved="true">
        <transf name="assert" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors res i)) 0
    (max res j + 1) &lt;=  ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors j i)) 0
    (max res j + 1))">
         <goal name="VC scm.30.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="ind_iproduct_inf">
          <goal name="VC scm.30.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC scm.30.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="(k=0)">
             <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
             <transf name="replace" proved="true" arg1="(prime_factors res k)" arg2="0">
              <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises (true case)" proved="true">
              <proof prover="6"><result status="valid" time="0.66" steps="165"/></proof>
              </goal>
              <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="6"><result status="valid" time="0.64" steps="165"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.0.1" expl="apply premises (false case)" proved="true">
             <proof prover="6"><result status="valid" time="0.61" steps="165"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (i1:int) -&gt;
      power_ i1 (max (prime_factors a i1) (prime_factors b i1)))
    0 ((a * b) + 1))" arg2="res" arg3="in" arg4="H9">
             <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="H9">
              <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="case" proved="true" arg1="(max (prime_factors a k) (prime_factors b k)  = 0)">
                <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises (true case)" proved="true">
                <transf name="case" proved="true" arg1="(k=0)">
                 <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises (true case)" proved="true">
                 <proof prover="2"><result status="valid" time="0.70"/></proof>
                 </goal>
                 <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises (false case. true case)" proved="true">
                 <proof prover="3"><result status="valid" time="0.67"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises (false case)" proved="true">
                <transf name="apply" proved="true" arg1="power_leq">
                 <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="6"><result status="valid" time="0.17" steps="161"/></proof>
                 </goal>
                 <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.1.0" proved="true">
                  <proof prover="0"><result status="valid" time="2.34"/></proof>
                  </goal>
                  <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.0.0.0.1.1.1" proved="true">
                  <proof prover="0"><result status="valid" time="3.88"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="res_def">
               <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="ind_iproduct_eq">
                <goal name="VC scm.30.0.1.0.0.1.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC scm.30.0.1.0.0.1.0.1" expl="assertion" proved="true">
         <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors res i)) 0
  (max res j + 1))" arg2="res" arg3="in" arg4="h">
          <goal name="VC scm.30.0.1.0.0.1.0.1.0" expl="assertion" proved="true">
          <transf name="replace" proved="true" arg1="(ind_iproduct (fun (i:int) -&gt; power_ i (prime_factors j i)) 0
     (max res j + 1))" arg2="j" arg3="in" arg4="h">
           <goal name="VC scm.30.0.1.0.0.1.0.1.0.0" expl="assertion" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="157"/></proof>
           </goal>
           <goal name="VC scm.30.0.1.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="goal_comm">
            <goal name="VC scm.30.0.1.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst2">
             <goal name="VC scm.30.0.1.0.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.75"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC scm.30.0.1.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="goal_comm">
           <goal name="VC scm.30.0.1.0.0.1.0.1.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst1">
            <goal name="VC scm.30.0.1.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.60"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.31" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="res" arg2="(ind_iproduct
    (fun (i2:int) -&gt;
      power_ i2 (max (prime_factors a i2) (prime_factors b i2)))
    0 ((a * b) + 1))">
   <goal name="VC scm.31.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H5">
    <goal name="VC scm.31.0.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.49" steps="151"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC scm.31.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC scm.31.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="res_def">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.32" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod" arg2="a,(res),(fun i -&gt; (prime_factors a i) )">
   <goal name="VC scm.32.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC scm.32.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="149"/></proof>
    </goal>
    <goal name="VC scm.32.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC scm.32.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.41" steps="152"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.32.0.2" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC scm.32.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="VC scm.32.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.25" steps="149"/></proof>
      </goal>
      <goal name="VC scm.32.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="149"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.32.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC scm.32.0.3.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC scm.32.0.3.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC scm.32.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="2.29"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.33" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod" arg2="b,(res),(fun i -&gt; (prime_factors b i) )">
   <goal name="VC scm.33.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC scm.33.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="151"/></proof>
    </goal>
    <goal name="VC scm.33.0.1" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC scm.33.0.1.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.36" steps="154"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.33.0.2" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC scm.33.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="VC scm.33.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="151"/></proof>
      </goal>
      <goal name="VC scm.33.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="151"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.33.0.3" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC scm.33.0.3.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC scm.33.0.3.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="2.07"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC scm.34" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="unicity_factors_prod" arg2="res,j,(fun i -&gt; prime_factors res i )">
   <goal name="VC scm.34.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC scm.34.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="159"/></proof>
    </goal>
    <goal name="VC scm.34.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC scm.34.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC scm.34.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.39" steps="162"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.34.0.2" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC scm.34.0.2.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="factors_prod">
      <goal name="VC scm.34.0.2.0.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="159"/></proof>
      </goal>
      <goal name="VC scm.34.0.2.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.39" steps="162"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC scm.34.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC scm.34.0.3.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC scm.34.0.3.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H5">
       <goal name="VC scm.34.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.71"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_mult" expl="VC for divisors_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_mult.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC divisors_mult.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="134"/></proof>
  </goal>
  <goal name="VC divisors_mult.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="136"/></proof>
  </goal>
  <goal name="VC divisors_mult.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_mult.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="136"/></proof>
  </goal>
  <goal name="VC divisors_mult.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="138"/></proof>
  </goal>
  <goal name="VC divisors_mult.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
  </goal>
  <goal name="VC divisors_mult.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC divisors_mult.7.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_to_div" expl="VC for prime_factors_to_div" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_to_div.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_not_prime" expl="VC for prime_factors_not_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_not_prime.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.42"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_factors_not_one" expl="VC for prime_factors_not_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_factors_not_one.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC prime_prime_factors" expl="VC for prime_prime_factors" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC prime_prime_factors.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="131"/></proof>
  </goal>
  <goal name="VC prime_prime_factors.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC prime_prime_factors.1.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_prime_factors.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC prime_prime_factors.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
  </goal>
  <goal name="VC prime_prime_factors.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC prime_prime_factors.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_prime_factors.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC prime_prime_factors.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_prime_factors.6.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.22" steps="147"/></proof>
   </goal>
   <goal name="VC prime_prime_factors.6.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_prime_factors.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC prime_prime_factors.7.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC prime_prime_factors.7.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC prime_prime_factors.7.0.0.0" expl="precondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC prime_prime_factors.7.0.0.0.0" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.23" steps="150"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC prime_prime_factors.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mem_div_by_fact" expl="VC for mem_div_by_fact" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mem_div_by_fact.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
  </goal>
  <goal name="VC mem_div_by_fact.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="129"/></proof>
  </goal>
  <goal name="VC mem_div_by_fact.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="132"/></proof>
  </goal>
  <goal name="VC mem_div_by_fact.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC mem_div_by_fact.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="132"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mem_div_by_fact.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ind_iproduct
   (fun (i:int) -&gt;
     power_ i (((fun (y0:int) (y1:int) -&gt; prime_factors y0 y1) @ a) @ i))
   0 (c + 1))" arg2="a" arg3="in" arg4="H">
   <goal name="VC mem_div_by_fact.4.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.11" steps="131"/></proof>
   </goal>
   <goal name="VC mem_div_by_fact.4.1" expl="equality hypothesis" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC mem_div_by_fact.4.1.0" expl="equality hypothesis" proved="true">
    <transf name="instantiate" proved="true" arg1="factors_prod" arg2="a">
     <goal name="VC mem_div_by_fact.4.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="destruct" proved="true" arg1="Hinst">
      <goal name="VC mem_div_by_fact.4.1.0.0.0" expl="destruct premise" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
      </goal>
      <goal name="VC mem_div_by_fact.4.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="(max a c)">
       <goal name="VC mem_div_by_fact.4.1.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="ind_iproduct_trans" arg2="(fun (i:int) -&gt; power_ i (prime_factors a i)),0,(c+1),(max a c + 1)">
        <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.0" expl="destruct premise" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.0.0" proved="true">
          <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
          </goal>
          <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.0.1" proved="true">
          <proof prover="3"><result status="valid" time="0.40"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="mult_one" arg2="in" arg3="Hinst">
          <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
          <proof prover="3"><result status="valid" time="2.71"/></proof>
          </goal>
          <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="ind_iproduct_one">
           <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC mem_div_by_fact.4.1.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="2.35"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC div_prime" expl="VC for div_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC div_prime.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC div_prime.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC div_prime.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="137"/></proof>
  </goal>
  <goal name="VC div_prime.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
  <goal name="VC div_prime.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.38"/></proof>
  </goal>
  <goal name="VC div_prime.5" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(i
   = ind_iproduct (fun (i1:int) -&gt; power_ i1 (prime_factors i i1)) 0 (a + 1))">
   <goal name="VC div_prime.5.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="H2">
    <goal name="VC div_prime.5.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="140"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC div_prime.5.1" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(ind_iproduct
    (fun (i1:int) -&gt; power_ i1 ((fun (j:int) -&gt; if j = i then 1 else 0) @ i1))
    0 (a + 1))" arg2="(ind_iproduct (fun (i1:int) -&gt; power_ i1 (prime_factors i i1)) 0 (a + 1))">
    <goal name="VC div_prime.5.1.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="2.38"/></proof>
    </goal>
    <goal name="VC div_prime.5.1.1" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC div_prime.5.1.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ind_iproduct_eq">
      <goal name="VC div_prime.5.1.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC div_prime.5.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="2.27"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC div_prime.6" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC div_prime.6.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.21" steps="146"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC div_prime.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC not_co_prime_itself" expl="VC for not_co_prime_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC not_co_prime_itself.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(mem a (divisors a))">
   <goal name="VC not_co_prime_itself.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="itself_divisors">
    <goal name="VC not_co_prime_itself.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="127"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC not_co_prime_itself.0.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC not_co_prime_itself.1" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC not_co_prime_itself.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="co_prime_def">
    <goal name="VC not_co_prime_itself.1.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(exists b. mem b (inter (divisors a) (divisors a)) /\ not (mem b (to_set 1)))">
     <goal name="VC not_co_prime_itself.1.0.0.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="1.93"/></proof>
     </goal>
     <goal name="VC not_co_prime_itself.1.0.0.1" expl="postcondition" proved="true">
     <proof prover="6"><result status="valid" time="0.11" steps="140"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_gcd" expl="VC for co_prime_gcd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_gcd.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC co_prime_gcd.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="gcd_prime_factors">
    <goal name="VC co_prime_gcd.0.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(0 &lt; prime_factors a i)">
     <goal name="VC co_prime_gcd.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="case" proved="true" arg1="(0 &lt; prime_factors b i)">
      <goal name="VC co_prime_gcd.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(mem i (inter (divisors a) (divisors b)))">
       <goal name="VC co_prime_gcd.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="137"/></proof>
       </goal>
       <goal name="VC co_prime_gcd.0.0.0.0.0.1" expl="true case (postcondition)" proved="true">
       <transf name="case" proved="true" arg1="(0 &lt; prime_factors (gcd a b) i)">
        <goal name="VC co_prime_gcd.0.0.0.0.0.1.0" expl="true case (postcondition)" proved="true">
        <transf name="assert" proved="true" arg1="(mem i (inter (divisors a) (divisors b)))">
         <goal name="VC co_prime_gcd.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
         </goal>
         <goal name="VC co_prime_gcd.0.0.0.0.0.1.0.1" expl="true case (postcondition)" proved="true">
         <transf name="case" proved="true" arg1="(i = 1)">
          <goal name="VC co_prime_gcd.0.0.0.0.0.1.0.1.0" expl="true case (postcondition)" proved="true">
          <proof prover="0"><result status="valid" time="0.39"/></proof>
          </goal>
          <goal name="VC co_prime_gcd.0.0.0.0.0.1.0.1.1" expl="false case (true case. postcondition)" proved="true">
          <transf name="case" proved="true" arg1="(a = b)">
           <goal name="VC co_prime_gcd.0.0.0.0.0.1.0.1.1.0" expl="false case (true case. postcondition)" proved="true">
           <proof prover="3"><result status="valid" time="0.56"/></proof>
           </goal>
           <goal name="VC co_prime_gcd.0.0.0.0.0.1.0.1.1.1" expl="false case (true case. postcondition)" proved="true">
           <proof prover="3"><result status="valid" time="2.54"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC co_prime_gcd.0.0.0.0.0.1.1" expl="false case (true case. postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.47"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC co_prime_gcd.0.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
      <proof prover="3"><result status="valid" time="0.58"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC co_prime_gcd.0.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="3"><result status="valid" time="0.43"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_gcd.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
    </goal>
    <goal name="VC co_prime_gcd.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="131"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_gcd_rev" expl="VC for co_prime_gcd_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_gcd_rev.0" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC co_prime_gcd_rev.0.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="0" arg2="(prime_factors (gcd a b) i)">
    <goal name="VC co_prime_gcd_rev.0.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="2.84"/></proof>
    </goal>
    <goal name="VC co_prime_gcd_rev.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.20" steps="133"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_prime_gcd_rev.1" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="VC co_prime_gcd_rev.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_gcd_rev.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_gcd_rev.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="factors_prod" arg2="e">
   <goal name="VC co_prime_gcd_rev.4.0" expl="precondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC co_prime_gcd_rev.4.0.0" expl="destruct premise" proved="true">
    <proof prover="0"><result status="valid" time="0.39"/></proof>
    </goal>
    <goal name="VC co_prime_gcd_rev.4.0.1" expl="precondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="e">
     <goal name="VC co_prime_gcd_rev.4.0.1.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ind_iproduct_one" arg2="in" arg3="Hinst">
      <goal name="VC co_prime_gcd_rev.4.0.1.0.0" expl="precondition" proved="true">
      <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
      </goal>
      <goal name="VC co_prime_gcd_rev.4.0.1.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC co_prime_gcd_rev.4.0.1.0.1.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC co_prime_gcd_rev.4.0.1.0.1.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H17">
         <goal name="VC co_prime_gcd_rev.4.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.22" steps="143"/></proof>
         </goal>
         <goal name="VC co_prime_gcd_rev.4.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="6"><result status="valid" time="0.14" steps="141"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_prime_gcd_rev.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.46"/></proof>
  </goal>
  <goal name="VC co_prime_gcd_rev.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_euclid_lemma_co_prime" expl="VC for divisors_euclid_lemma_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_euclid_lemma_co_prime.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem c (divisors a))">
   <goal name="VC divisors_euclid_lemma_co_prime.0.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="mem_div_by_fact">
    <goal name="VC divisors_euclid_lemma_co_prime.0.0.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
    </goal>
    <goal name="VC divisors_euclid_lemma_co_prime.0.0.1" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="137"/></proof>
    </goal>
    <goal name="VC divisors_euclid_lemma_co_prime.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(prime_factors c i &lt;= prime_factors (a*b) i)">
      <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
      </goal>
      <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="prime_factors_mult" arg2="in" arg3="h">
       <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(prime_factors c i = 0)">
        <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.0" expl="apply premises (true case)" proved="true">
        <proof prover="6"><result status="valid" time="0.28" steps="143"/></proof>
        </goal>
        <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1" expl="apply premises (false case)" proved="true">
        <transf name="case" proved="true" arg1="(prime_factors b i = 0)">
         <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1.0" expl="apply premises (false case. true case)" proved="true">
         <proof prover="6"><result status="valid" time="0.16" steps="143"/></proof>
         </goal>
         <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1.1" expl="apply premises (false case)" proved="true">
         <transf name="case" proved="true" arg1="(prime_factors (gcd b c) i = 0)">
          <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1.1.0" expl="apply premises (false case. true case)" proved="true">
          <transf name="rewrite" proved="true" arg1="gcd_prime_factors" arg2="in" arg3="h">
           <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1.1.0.0" expl="apply premises (false case. true case)" proved="true">
           <proof prover="6"><result status="valid" time="0.27" steps="147"/></proof>
           </goal>
           <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.15" steps="145"/></proof>
           </goal>
           <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1.1.0.2" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.13" steps="145"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.0.1.1.1" expl="apply premises (false case)" proved="true">
          <proof prover="0"><result status="valid" time="0.46"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
       </goal>
       <goal name="VC divisors_euclid_lemma_co_prime.0.0.2.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC divisors_euclid_lemma_co_prime.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC divisors_euclid_lemma_co_prime_itself" expl="VC for divisors_euclid_lemma_co_prime_itself" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC divisors_euclid_lemma_co_prime_itself.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma_co_prime_itself.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma_co_prime_itself.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma_co_prime_itself.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma_co_prime_itself.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="135"/></proof>
  </goal>
  <goal name="VC divisors_euclid_lemma_co_prime_itself.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.57"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC euclid_lemma_co_prime" expl="VC for euclid_lemma_co_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC euclid_lemma_co_prime.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(c=1)">
   <goal name="VC euclid_lemma_co_prime.0.0" expl="true case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
   </goal>
   <goal name="VC euclid_lemma_co_prime.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(a=1)">
    <goal name="VC euclid_lemma_co_prime.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
    </goal>
    <goal name="VC euclid_lemma_co_prime.0.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="0.39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_odd" expl="VC for co_prime_odd" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_odd.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
  </goal>
  <goal name="VC co_prime_odd.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="132"/></proof>
  </goal>
  <goal name="VC co_prime_odd.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.33" steps="134"/></proof>
  </goal>
  <goal name="VC co_prime_odd.3" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(divisors 2 )" arg2="(add 2 (to_set 1))" arg3="in" arg4="H1">
   <goal name="VC co_prime_odd.3.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="2">
    <goal name="VC co_prime_odd.3.0.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="2.31"/></proof>
    </goal>
    <goal name="VC co_prime_odd.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="2.18"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC co_prime_odd.3.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal">
    <goal name="VC co_prime_odd.3.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC co_prime_odd.3.1.0.0" expl="apply premises" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC co_prime_odd.3.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="divisors_def" arg2="in" arg3="H">
       <goal name="VC co_prime_odd.3.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.93"/></proof>
       </goal>
       <goal name="VC co_prime_odd.3.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.31" steps="145"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_prime_odd.3.1.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC co_prime_odd.3.1.1.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(e= 1)">
      <goal name="VC co_prime_odd.3.1.1.0.0" expl="apply premises (true case)" proved="true">
      <proof prover="6"><result status="valid" time="0.39" steps="144"/></proof>
      </goal>
      <goal name="VC co_prime_odd.3.1.1.0.1" expl="apply premises (false case)" proved="true">
      <transf name="replace" proved="true" arg1="e" arg2="2">
       <goal name="VC co_prime_odd.3.1.1.0.1.0" expl="apply premises (false case)" proved="true">
       <proof prover="6"><result status="valid" time="0.21" steps="144"/></proof>
       </goal>
       <goal name="VC co_prime_odd.3.1.1.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="2.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_prime_odd.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_odd.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_odd.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_odd.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_primes" expl="VC for co_primes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_primes.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC co_primes.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC co_primes.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="VC co_primes.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.29" steps="145"/></proof>
     </goal>
     <goal name="VC co_primes.0.0.0.1" expl="apply premises" proved="true">
     <transf name="compute_in_goal" proved="true" >
      <goal name="VC co_primes.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_primes.1" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i =1)">
   <goal name="VC co_primes.1.0" expl="true case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="138"/></proof>
   </goal>
   <goal name="VC co_primes.1.1" expl="false case (postcondition)" proved="true">
   <transf name="assert" proved="true" arg1="(subset result (to_fset 1 i))">
    <goal name="VC co_primes.1.1.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="set_subset">
     <goal name="VC co_primes.1.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC co_primes.1.1.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(mem e (to_fset 0 i))">
       <goal name="VC co_primes.1.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.27" steps="144"/></proof>
       </goal>
       <goal name="VC co_primes.1.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="assert" proved="true" arg1="(co_prime e i)">
        <goal name="VC co_primes.1.1.0.0.0.1.0" expl="asserted formula" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC co_primes.1.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="result_def" arg2="in" arg3="H">
          <goal name="VC co_primes.1.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
          <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
           <goal name="VC co_primes.1.1.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(to_fset 0 i),((fun (y0:int) (y1:int) -&gt; co_prime y0 y1) @ i),e">
            <goal name="VC co_primes.1.1.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
             <goal name="VC co_primes.1.1.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="symetric_co_prime">
              <goal name="VC co_primes.1.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.16" steps="153"/></proof>
              </goal>
              <goal name="VC co_primes.1.1.0.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.25" steps="155"/></proof>
              </goal>
              <goal name="VC co_primes.1.1.0.0.0.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="6"><result status="valid" time="0.14" steps="153"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC co_primes.1.1.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(e&lt;&gt; 0)">
         <goal name="VC co_primes.1.1.0.0.0.1.1.0" expl="asserted formula" proved="true">
         <proof prover="6"><result status="valid" time="0.25" steps="148"/></proof>
         </goal>
         <goal name="VC co_primes.1.1.0.0.0.1.1.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.53"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC co_primes.1.1.1" expl="false case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(cardinal result &lt;= cardinal (to_fset 1 i))">
     <goal name="VC co_primes.1.1.1.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.20" steps="144"/></proof>
     </goal>
     <goal name="VC co_primes.1.1.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(1&lt;= cardinal result)">
      <goal name="VC co_primes.1.1.1.1.0" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.29" steps="146"/></proof>
      </goal>
      <goal name="VC co_primes.1.1.1.1.1" expl="false case (postcondition)" proved="true">
      <proof prover="3"><result status="valid" time="0.78"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_primes.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC co_primes.2.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime i j)">
    <goal name="VC co_primes.2.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.22" steps="139"/></proof>
    </goal>
    <goal name="VC co_primes.2.0.1" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.21" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC co_primes.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.47"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC co_primes.3" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="139"/></proof>
  </goal>
  <goal name="VC co_primes.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC co_primes.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC co_primes.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="in_my_filter">
     <goal name="VC co_primes.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.22" steps="150"/></proof>
     </goal>
     <goal name="VC co_primes.4.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.33" steps="150"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_iproduct" expl="VC for co_prime_iproduct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_iproduct.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="131"/></proof>
  </goal>
  <goal name="VC co_prime_iproduct.1" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="VC co_prime_iproduct.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
  </goal>
  <goal name="VC co_prime_iproduct.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="138"/></proof>
  </goal>
  <goal name="VC co_prime_iproduct.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="138"/></proof>
  </goal>
  <goal name="VC co_prime_iproduct.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC co_prime_iproduct.5.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime  1 bound)">
    <goal name="VC co_prime_iproduct.5.0.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="2.01"/></proof>
    </goal>
    <goal name="VC co_prime_iproduct.5.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.38"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC co_prime_iproduct.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC co_prime_iproduct.5.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC co_prime_iproduct.5.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H3">
      <goal name="VC co_prime_iproduct.5.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="euclid_lemma_co_prime">
       <goal name="VC co_prime_iproduct.5.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.45"/></proof>
       </goal>
       <goal name="VC co_prime_iproduct.5.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.26" steps="136"/></proof>
       </goal>
       <goal name="VC co_prime_iproduct.5.1.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="133"/></proof>
       </goal>
       <goal name="VC co_prime_iproduct.5.1.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
       </goal>
       <goal name="VC co_prime_iproduct.5.1.0.0.0.4" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.49"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC greatest_factor_in_n" expl="VC for greatest_factor_in_n" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC greatest_factor_in_n.0" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3"><result status="valid" time="0.40"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC greatest_factor_in_n.1" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3"><result status="valid" time="0.22"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC greatest_factor_in_n.2" expl="precondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3"><result status="valid" time="0.22"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC greatest_factor_in_n.3" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3"><result status="valid" time="0.47"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC greatest_factor_in_n.4" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC greatest_factor_in_n.4.0" expl="postcondition" proved="true">
   <transf name="exists" proved="true" arg1="(div j multi)">
    <goal name="VC greatest_factor_in_n.4.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC greatest_factor_in_n.4.0.0.0" proved="true">
     <proof prover="3"><result status="valid" time="0.49"/></proof>
     </goal>
     <goal name="VC greatest_factor_in_n.4.0.0.1" proved="true">
     <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="destruct" proved="true" arg1="H4">
      <goal name="VC greatest_factor_in_n.4.0.0.1.0" proved="true">
      <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="eliminate_let" proved="true" >
       <goal name="VC greatest_factor_in_n.4.0.0.1.0.0" proved="true">
       <transf name="case" proved="true" arg1="(div j multi = result)">
        <goal name="VC greatest_factor_in_n.4.0.0.1.0.0.0" expl="true case" proved="true">
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        <transf name="assert" proved="true" arg1="(j = result  * multi+ i)">
         <goal name="VC greatest_factor_in_n.4.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="0"><result status="valid" time="0.36"/></proof>
         <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
         </goal>
         <goal name="VC greatest_factor_in_n.4.0.0.1.0.0.0.1" expl="true case" proved="true">
         <proof prover="3"><result status="valid" time="0.49"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC greatest_factor_in_n.4.0.0.1.0.0.1" expl="false case" proved="true">
        <proof prover="6"><result status="valid" time="0.28" steps="150"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC greatest_factor_in_n.4.0.0.1.1" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <transf name="case" proved="true" arg1="(div j multi = result)">
       <goal name="VC greatest_factor_in_n.4.0.0.1.1.0" expl="true case" proved="true">
       <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <transf name="assert" proved="true" arg1="(j = result  * multi + i)">
        <goal name="VC greatest_factor_in_n.4.0.0.1.1.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.36"/></proof>
        </goal>
        <goal name="VC greatest_factor_in_n.4.0.0.1.1.0.1" expl="true case" proved="true">
        <proof prover="3"><result status="valid" time="0.58"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC greatest_factor_in_n.4.0.0.1.1.1" expl="false case" proved="true">
       <proof prover="3"><result status="valid" time="0.41"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC greatest_factor_in_n.4.0.0.2" proved="true">
     <proof prover="3"><result status="valid" time="0.46"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC greatest_factor_in_n.4.1" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="6"><result status="valid" time="0.26" steps="151"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_in_n.5" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="VC greatest_factor_in_n.5.0" expl="postcondition" proved="true">
   <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
   <transf name="replace" proved="true" arg1="(i_to_c (result - 1))" arg2="(i_to_c (((result - 1) * multi) ) /. i_to_c (multi))
">
    <goal name="VC greatest_factor_in_n.5.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="3.76"/></proof>
    </goal>
    <goal name="VC greatest_factor_in_n.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="3.42"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC greatest_factor_in_n.5.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(i_to_c ((result-1) * multi +i) &lt;=. i_to_c (power_ 2 (2*n)))">
    <goal name="VC greatest_factor_in_n.5.1.0" expl="asserted formula" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC greatest_factor_in_n.5.1.0.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="0.62"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC greatest_factor_in_n.5.1.1" expl="postcondition" proved="true">
    <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <proof prover="3" obsolete="true"><result status="timeout" time="10.00"/></proof>
    <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
    <transf name="replace" proved="true" arg1="(i_to_c (result - 1))" arg2="((i_to_c (((result - 1) * multi) + i - i))/. i_to_c multi)">
     <goal name="VC greatest_factor_in_n.5.1.1.0" expl="postcondition" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     <transf name="rewrite" proved="true" arg1="(/.)_def">
      <goal name="VC greatest_factor_in_n.5.1.1.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="(/.)_def">
       <goal name="VC greatest_factor_in_n.5.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="compat_order_mult">
        <goal name="VC greatest_factor_in_n.5.1.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.46"/></proof>
        </goal>
        <goal name="VC greatest_factor_in_n.5.1.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.45"/></proof>
        </goal>
        <goal name="VC greatest_factor_in_n.5.1.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.45"/></proof>
        </goal>
        <goal name="VC greatest_factor_in_n.5.1.1.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.11"/></proof>
        </goal>
        <goal name="VC greatest_factor_in_n.5.1.1.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.19"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC greatest_factor_in_n.5.1.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.47"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC greatest_factor_in_n.5.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.45"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC greatest_factor_in_n.5.1.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.46"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_in_n.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC greatest_factor_sum_in_n" expl="VC for greatest_factor_sum_in_n" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC greatest_factor_sum_in_n.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="131"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="133"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.42" steps="135"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="135"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.36" steps="137"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="141"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="141"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="141"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="137"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="137"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.10" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC greatest_factor_sum_in_n.10.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_empty1">
    <goal name="VC greatest_factor_sum_in_n.10.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC greatest_factor_sum_in_n.10.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="4.99"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="140"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="146"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="146"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.19" steps="146"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="142"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.16" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC greatest_factor_sum_in_n.16.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="144"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="150"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.19" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="150"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.20" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="150"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.21" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="146"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.22" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC greatest_factor_sum_in_n.22.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.41"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.23" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.24" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.25" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.26" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="148"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.27" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.28" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC greatest_factor_sum_in_n.28.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_empty1">
    <goal name="VC greatest_factor_sum_in_n.28.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC greatest_factor_sum_in_n.28.0.0.0" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="(mem e (to_fset 0 (mod (power_ 2 n) multi)))">
      <goal name="VC greatest_factor_sum_in_n.28.0.0.0.0" expl="apply premises (true case)" proved="true">
      <transf name="case" proved="true" arg1="(mem e (to_fset (mod (power_ 2 n) multi) multi))">
       <goal name="VC greatest_factor_sum_in_n.28.0.0.0.0.0" expl="apply premises (true case)" proved="true">
       <proof prover="3"><result status="valid" time="0.71"/></proof>
       </goal>
       <goal name="VC greatest_factor_sum_in_n.28.0.0.0.0.1" expl="apply premises (false case. true case)" proved="true">
       <proof prover="3"><result status="valid" time="0.67"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC greatest_factor_sum_in_n.28.0.0.0.1" expl="apply premises (false case)" proved="true">
      <proof prover="3"><result status="valid" time="0.66"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.29" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.30" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.31" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.32" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.33" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.34" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC greatest_factor_sum_in_n.34.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.35" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.23"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.36" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.37" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.32"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.38" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.39" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.40" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC greatest_factor_sum_in_n.40.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.48"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.41" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="154"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.42" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.26"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.43" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.44" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="156"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.45" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="157"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.46" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.47" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="mult_comm">
   <goal name="VC greatest_factor_sum_in_n.47.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_scal_rev">
    <goal name="VC greatest_factor_sum_in_n.47.0.0" expl="assertion" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.48" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(sum (to_fset 0 multi)
   (fun (i:int) -&gt; cpower (i_to_c (greatest_factor_in_n multi n i)) 2))" arg2="(sum
  (union (to_fset 0 (mod (power_ 2 n) multi))
   (to_fset (mod (power_ 2 n) multi) multi))
  (fun (i:int) -&gt;
    if 0 &lt;= i /\ i &lt; multi
    then cpower (i_to_c (greatest_factor_in_n multi n i)) 2 else c_zero))">
   <goal name="VC greatest_factor_sum_in_n.48.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="H15">
    <goal name="VC greatest_factor_sum_in_n.48.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC greatest_factor_sum_in_n.48.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="H10">
      <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="H25">
       <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="replace" proved="true" arg1="(cardinal (to_fset 0 (mod (power_ 2 n) multi)) )" arg2="(mod (power_ 2 n) multi)">
        <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0" expl="assertion" proved="true">
        <transf name="replace" proved="true" arg1="(div (power_ 2 n) multi)" arg2="(divm)">
         <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0" expl="assertion" proved="true">
         <transf name="replace" proved="true" arg1="(mod (power_ 2 n) multi)" arg2="(modm)">
          <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
          <transf name="replace" proved="true" arg1="(multi - modm)" arg2="minusmod">
           <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
           <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
            <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
            <transf name="rewrite" proved="true" arg1="i_to_c_add_rev">
             <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
             <transf name="rewrite" proved="true" arg1="i_to_c_add">
              <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
              <transf name="rewrite" proved="true" arg1="i_to_c_add">
               <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
               <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
                <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
                 <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                 <transf name="rewrite" proved="true" arg1="i_to_c_mult">
                  <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                  <transf name="rewrite" proved="true" arg1="i_to_c_mult">
                   <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                   <transf name="rewrite" proved="true" arg1="i_to_c_add">
                    <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="assertion" proved="true">
                    <proof prover="0"><result status="valid" time="0.53"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.31"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="3"><result status="valid" time="0.22"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="0.40"/></proof>
           <proof prover="6"><result status="valid" time="4.08" steps="162"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="3"><result status="valid" time="0.19"/></proof>
          <proof prover="6"><result status="valid" time="4.51" steps="162"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="0.19"/></proof>
         <proof prover="6"><result status="valid" time="3.66" steps="162"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.20"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC greatest_factor_sum_in_n.48.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.47"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC greatest_factor_sum_in_n.48.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(to_fset 0 multi)" arg2="(union (to_fset 0 (mod (power_ 2 n) multi))
     (to_fset (mod (power_ 2 n) multi) multi))">
    <goal name="VC greatest_factor_sum_in_n.48.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="sum_eq">
     <goal name="VC greatest_factor_sum_in_n.48.1.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC greatest_factor_sum_in_n.48.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC greatest_factor_sum_in_n.48.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.54"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC greatest_factor_sum_in_n.48.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal">
     <goal name="VC greatest_factor_sum_in_n.48.1.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC greatest_factor_sum_in_n.48.1.1.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.49"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC greatest_factor_sum_in_n.48.1.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC greatest_factor_sum_in_n.48.1.1.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.47"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.49" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.50" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.51" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.62"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.52" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.65"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.53" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.68"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.54" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.68"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.55" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC greatest_factor_sum_in_n.55.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(forall a b c. (a+b)*c = a*c+b*c)">
    <goal name="VC greatest_factor_sum_in_n.55.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.72"/></proof>
    </goal>
    <goal name="VC greatest_factor_sum_in_n.55.0.1" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="h">
     <goal name="VC greatest_factor_sum_in_n.55.0.1.0" expl="assertion" proved="true">
     <transf name="assert" proved="true" arg1="(forall a b c. c*(a+b) = a*c+b*c)">
      <goal name="VC greatest_factor_sum_in_n.55.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.55"/></proof>
      </goal>
      <goal name="VC greatest_factor_sum_in_n.55.0.1.0.1" expl="assertion" proved="true">
      <transf name="assert" proved="true" arg1="(forall a b c. c*(a+b) = a*c+b*c)">
       <goal name="VC greatest_factor_sum_in_n.55.0.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.75"/></proof>
       </goal>
       <goal name="VC greatest_factor_sum_in_n.55.0.1.0.1.1" expl="assertion" proved="true">
       <proof prover="3"><result status="valid" time="0.18"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC greatest_factor_sum_in_n.55.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.56" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.83"/></proof>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.57" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(sum (to_fset 0 multi)
  (fun (i:int) -&gt; i_to_c (greatest_factor_in_n multi n i) *. cst))" arg2="(cst *. sum (to_fset 0 multi)
  (fun (i:int) -&gt; i_to_c (greatest_factor_in_n multi n i) ))">
   <goal name="VC greatest_factor_sum_in_n.57.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mult_comm">
    <goal name="VC greatest_factor_sum_in_n.57.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq_t">
     <goal name="VC greatest_factor_sum_in_n.57.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(sum (to_fset 0 multi)
  (fun (i:int) -&gt; i_to_c (greatest_factor_in_n multi n i)))" arg2="(sum
  (union (to_fset 0 (mod (power_ 2 n) multi))
   (to_fset (mod (power_ 2 n) multi) multi))
  (fun (i:int) -&gt;
    if 0 &lt;= i /\ i &lt; multi then i_to_c (greatest_factor_in_n multi n i)
    else c_zero))">
      <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H41">
       <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H31">
        <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H36">
         <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H49">
          <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(cardinal (to_fset 0 (mod (power_ 2 n) multi)))" arg2="(mod (power_ 2 n) multi)">
           <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="i_to_c_mult">
            <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="i_to_c_mult">
             <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="i_to_c_add">
              <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="i_to_c_eq">
               <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.17"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC greatest_factor_sum_in_n.57.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="0.34"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="sum_eq_gen">
       <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_equal">
        <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.68"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.92"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC greatest_factor_sum_in_n.57.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.67"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC greatest_factor_sum_in_n.57.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.62"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC greatest_factor_sum_in_n.57.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="sum_scal_rev">
    <goal name="VC greatest_factor_sum_in_n.57.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC greatest_factor_sum_in_n.57.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="VC greatest_factor_sum_in_n.57.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC greatest_factor_sum_in_n.57.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.73"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC greatest_factor_sum_in_n.58" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H9">
   <goal name="VC greatest_factor_sum_in_n.58.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="cpower_i_to_c_rev">
    <goal name="VC greatest_factor_sum_in_n.58.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.75"/></proof>
    </goal>
    <goal name="VC greatest_factor_sum_in_n.58.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.18"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Inverse">
 <goal name="VC euler_phi" expl="VC for euler_phi" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC euler_phi.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="127"/></proof>
  </goal>
  <goal name="VC euler_phi.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC injec_mult_mod_pre" expl="VC for injec_mult_mod_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injec_mult_mod_pre.0" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(1&lt; bound)">
   <goal name="VC injec_mult_mod_pre.0.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="133"/></proof>
   </goal>
   <goal name="VC injec_mult_mod_pre.0.1" expl="assertion" proved="true">
   <transf name="case" proved="true" arg1="(i&#39; = bound)">
    <goal name="VC injec_mult_mod_pre.0.1.0" expl="true case (assertion)" proved="true">
    <transf name="assert" proved="true" arg1="(mem i&#39; (divisors bound))">
     <goal name="VC injec_mult_mod_pre.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
     </goal>
     <goal name="VC injec_mult_mod_pre.0.1.0.1" expl="true case (assertion)" proved="true">
     <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC injec_mult_mod_pre.0.1.1" expl="false case (assertion)" proved="true">
    <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC injec_mult_mod_pre.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="133"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="135"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC injec_mult_mod_pre.4.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC injec_mult_mod_pre.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.50"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.47"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="140"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.19" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="141"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.20" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="144"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.21" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="144"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.22" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_mem_divisors">
   <goal name="VC injec_mult_mod_pre.22.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC injec_mult_mod_pre.22.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injec_mult_mod_pre.22.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC injec_mult_mod_pre.22.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.18" steps="145"/></proof>
    </goal>
    <goal name="VC injec_mult_mod_pre.22.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.56"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injec_mult_mod_pre.22.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC injec_mult_mod_pre.22.2.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC injec_mult_mod_pre.23" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC injec_mult_mod_pre.23.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.14" steps="147"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC injec_mult_mod_pre.24" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(mem bound (divisors ((i&#39; - i) * a)))">
   <goal name="VC injec_mult_mod_pre.24.0" expl="asserted formula" proved="true">
   <transf name="apply" proved="true" arg1="set_mem_divisors">
    <goal name="VC injec_mult_mod_pre.24.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.66"/></proof>
    </goal>
    <goal name="VC injec_mult_mod_pre.24.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="0.44"/></proof>
    </goal>
    <goal name="VC injec_mult_mod_pre.24.0.2" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.25" steps="141"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injec_mult_mod_pre.24.1" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.32" steps="145"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC injec_mult_mod_pre.25" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.60"/></proof>
  </goal>
  <goal name="VC injec_mult_mod_pre.26" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC injec_mult_mod" expl="VC for injec_mult_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injec_mult_mod.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mult_mod.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mult_mod.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mult_mod.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mult_mod.4" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(mod (i * a) bound = mod (i&#39; * a) bound)">
   <goal name="VC injec_mult_mod.4.0" expl="true case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(i&lt;i&#39;)">
    <goal name="VC injec_mult_mod.4.0.0" expl="true case (postcondition)" proved="true">
    <transf name="assert" proved="true" arg1="(mod ((i&#39;-i)*a) bound = 0)">
     <goal name="VC injec_mult_mod.4.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(mod (i&#39;-i) bound = 0)">
      <goal name="VC injec_mult_mod.4.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(i&#39;-i &lt; bound)">
       <goal name="VC injec_mult_mod.4.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
       </goal>
       <goal name="VC injec_mult_mod.4.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC injec_mult_mod.4.0.0.0.1" expl="asserted formula" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC injec_mult_mod.4.0.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="6"><result status="valid" time="0.17" steps="137"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC injec_mult_mod.4.0.1" expl="false case (true case. postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.15" steps="137"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC injec_mult_mod.4.1" expl="false case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="139"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC co_prime_mod_mult" expl="VC for co_prime_mod_mult" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC co_prime_mod_mult.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="co_prime_mod">
   <goal name="VC co_prime_mod_mult.0.0" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="135"/></proof>
   </goal>
   <goal name="VC co_prime_mod_mult.0.1" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="135"/></proof>
   </goal>
   <goal name="VC co_prime_mod_mult.0.2" expl="apply premises" proved="true">
   <proof prover="6"><result status="valid" time="0.27" steps="137"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_injec_mult_mod" expl="VC for set_injec_mult_mod" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_injec_mult_mod.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.68"/></proof>
  </goal>
  <goal name="VC set_injec_mult_mod.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.16"/></proof>
  </goal>
  <goal name="VC set_injec_mult_mod.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="129"/></proof>
  </goal>
  <goal name="VC set_injec_mult_mod.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="133"/></proof>
  </goal>
  <goal name="VC set_injec_mult_mod.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_injective">
   <goal name="VC set_injec_mult_mod.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_injec_mult_mod.4.0.0" expl="apply premises" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC set_injec_mult_mod.4.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(a * e)" arg2="(e * a)">
      <goal name="VC set_injec_mult_mod.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(a * e&#39;)" arg2="(e&#39; * a)">
       <goal name="VC set_injec_mult_mod.4.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="injec_mult_mod">
        <goal name="VC set_injec_mult_mod.4.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="139"/></proof>
        </goal>
        <goal name="VC set_injec_mult_mod.4.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.38"/></proof>
        </goal>
        <goal name="VC set_injec_mult_mod.4.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.40"/></proof>
        </goal>
        <goal name="VC set_injec_mult_mod.4.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.15" steps="139"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC set_injec_mult_mod.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="6"><result status="valid" time="0.15" steps="139"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_injec_mult_mod.4.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="6"><result status="valid" time="0.19" steps="139"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_injec_mult_mod.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC set_injec_mult_mod.5.0" expl="precondition" proved="true">
   <transf name="assert" proved="true" arg1="(co_prime (mod (a * e) bound) bound)">
    <goal name="VC set_injec_mult_mod.5.0.0" expl="asserted formula" proved="true">
    <transf name="apply" proved="true" arg1="co_prime_mod">
     <goal name="VC set_injec_mult_mod.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.43"/></proof>
     </goal>
     <goal name="VC set_injec_mult_mod.5.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
     </goal>
     <goal name="VC set_injec_mult_mod.5.0.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="euclid_lemma_co_prime">
      <goal name="VC set_injec_mult_mod.5.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.28" steps="139"/></proof>
      </goal>
      <goal name="VC set_injec_mult_mod.5.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.27" steps="139"/></proof>
      </goal>
      <goal name="VC set_injec_mult_mod.5.0.0.2.2" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="137"/></proof>
      </goal>
      <goal name="VC set_injec_mult_mod.5.0.0.2.3" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.26" steps="139"/></proof>
      </goal>
      <goal name="VC set_injec_mult_mod.5.0.0.2.4" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.15" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_injec_mult_mod.5.0.1" expl="precondition" proved="true">
    <proof prover="0"><result status="valid" time="0.43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_injec_mult_mod.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H1">
  </transf>
  </goal>
  <goal name="VC set_injec_mult_mod.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H1">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC injec_mult_mod_rev" expl="VC for injec_mult_mod_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC injec_mult_mod_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="141"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC bezout_set" expl="VC for bezout_set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bezout_set.0" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(exists e. mem e res)">
   <goal name="VC bezout_set.0.0" expl="asserted formula" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC bezout_set.0.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="res_def">
     <goal name="VC bezout_set.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC bezout_set.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="exists" proved="true" arg1="pick">
       <goal name="VC bezout_set.0.0.0.0.0.0" proved="true">
       <transf name="apply" proved="true" arg1="in_my_filter">
        <goal name="VC bezout_set.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="6"><result status="valid" time="0.31" steps="145"/></proof>
        </goal>
        <goal name="VC bezout_set.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC bezout_set.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="bezout_pred_def">
          <goal name="VC bezout_set.0.0.0.0.0.0.1.0.0" proved="true">
          <transf name="exists" proved="true" arg1="1">
           <goal name="VC bezout_set.0.0.0.0.0.0.1.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="0">
            <goal name="VC bezout_set.0.0.0.0.0.0.1.0.0.0.0" proved="true">
            <proof prover="6"><result status="valid" time="0.24" steps="143"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bezout_set.0.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.26" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bezout_set.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.48"/></proof>
  </goal>
  <goal name="VC bezout_set.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  </goal>
  <goal name="VC bezout_set.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="144"/></proof>
  </goal>
  <goal name="VC bezout_set.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="144"/></proof>
  </goal>
  <goal name="VC bezout_set.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="VC bezout_set.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="147"/></proof>
  </goal>
  <goal name="VC bezout_set.7" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.55"/></proof>
  </goal>
  <goal name="VC bezout_set.8" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(bezout_pred pick bound min)">
   <goal name="VC bezout_set.8.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.31" steps="148"/></proof>
   </goal>
   <goal name="VC bezout_set.8.1" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC bezout_set.8.1.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="bezout_pred_def" arg2="in" arg3="h">
     <goal name="VC bezout_set.8.1.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bezout_set.9" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="150"/></proof>
  </goal>
  <goal name="VC bezout_set.10" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC bezout_set.11" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bezout_set.11.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC bezout_set.11.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="res_def">
     <goal name="VC bezout_set.11.0.0.0" expl="assertion" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC bezout_set.11.0.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="in_my_filter">
       <goal name="VC bezout_set.11.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3"><result status="valid" time="0.53"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
       <goal name="VC bezout_set.11.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC bezout_set.11.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="bezout_pred_def">
         <goal name="VC bezout_set.11.0.0.0.0.1.0.0" proved="true">
         <transf name="exists" proved="true" arg1="(1 - (div pick min * s))">
          <goal name="VC bezout_set.11.0.0.0.0.1.0.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(-(t*div pick min))">
           <goal name="VC bezout_set.11.0.0.0.0.1.0.0.0.0" proved="true">
           <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
           <proof prover="3"><result status="valid" time="0.25"/></proof>
           <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bezout_set.11.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.53"/></proof>
   <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bezout_set.12" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.39"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bezout_set.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="144"/></proof>
  </goal>
  <goal name="VC bezout_set.14" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="145"/></proof>
  </goal>
  <goal name="VC bezout_set.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="150"/></proof>
  </goal>
  <goal name="VC bezout_set.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="150"/></proof>
  </goal>
  <goal name="VC bezout_set.17" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.51"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bezout_set.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="153"/></proof>
  </goal>
  <goal name="VC bezout_set.19" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.52"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bezout_set.20" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(bezout_pred pick bound min)">
   <goal name="VC bezout_set.20.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="154"/></proof>
   </goal>
   <goal name="VC bezout_set.20.1" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC bezout_set.20.1.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="bezout_pred_def" arg2="in" arg3="h">
     <goal name="VC bezout_set.20.1.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="h">
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bezout_set.21" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="156"/></proof>
  </goal>
  <goal name="VC bezout_set.22" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.08"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bezout_set.23" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bezout_set.23.0" expl="assertion" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC bezout_set.23.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="res_def">
     <goal name="VC bezout_set.23.0.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="in_my_filter">
      <goal name="VC bezout_set.23.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
      <proof prover="3"><result status="valid" time="0.52"/></proof>
      <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
      </goal>
      <goal name="VC bezout_set.23.0.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC bezout_set.23.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="bezout_pred_def">
        <goal name="VC bezout_set.23.0.0.0.1.0.0" proved="true">
        <transf name="exists" proved="true" arg1="(-(s * div bound min))">
         <goal name="VC bezout_set.23.0.0.0.1.0.0.0" proved="true">
         <transf name="exists" proved="true" arg1="(1 - (div bound min * t))">
          <goal name="VC bezout_set.23.0.0.0.1.0.0.0.0" proved="true">
          <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
          <proof prover="3"><result status="valid" time="0.29"/></proof>
          <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC bezout_set.23.1" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.54"/></proof>
   <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC bezout_set.24" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.46"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bezout_set.25" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bezout_set.26" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.60"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC bezout_set.27" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="156"/></proof>
  </goal>
  <goal name="VC bezout_set.28" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC bezout_set.28.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="156"/></proof>
   </goal>
   <goal name="VC bezout_set.28.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(min = pick)">
    <goal name="VC bezout_set.28.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.24" steps="158"/></proof>
    </goal>
    <goal name="VC bezout_set.28.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="6"><result status="valid" time="0.26" steps="160"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC bezout_set.29" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="159"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC euler_theorem" expl="VC for euler_theorem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC euler_theorem.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
  </goal>
  <goal name="VC euler_theorem.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="132"/></proof>
  </goal>
  <goal name="VC euler_theorem.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="135"/></proof>
  </goal>
  <goal name="VC euler_theorem.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC euler_theorem.3.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="VC euler_theorem.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="VC euler_theorem.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="139"/></proof>
  </goal>
  <goal name="VC euler_theorem.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC euler_theorem.8" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="bijective_is_injective" arg2="(fun (x:int) -&gt; mod (pick * x) bound),(co_primes bound),(co_primes bound)">
   <goal name="VC euler_theorem.8.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC euler_theorem.8.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H11">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.9" expl="assertion" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC euler_theorem.9.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="prod_def">
    <goal name="VC euler_theorem.9.0.0" expl="assertion" proved="true">
    <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H">
     <goal name="VC euler_theorem.9.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(map (fun (x:int) -&gt; mod (pick * x) bound) (co_primes bound))" arg2="(co_primes bound)" arg3="in" arg4="H">
      <goal name="VC euler_theorem.9.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC euler_theorem.9.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="apply" proved="true" arg1="mod_eq">
        <goal name="VC euler_theorem.9.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="iproduct_eq">
         <goal name="VC euler_theorem.9.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC euler_theorem.9.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC euler_theorem.9.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="6"><result status="valid" time="0.25" steps="152"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC euler_theorem.9.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="H11">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="143"/></proof>
  </goal>
  <goal name="VC euler_theorem.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="145"/></proof>
  </goal>
  <goal name="VC euler_theorem.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="145"/></proof>
  </goal>
  <goal name="VC euler_theorem.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="147"/></proof>
  </goal>
  <goal name="VC euler_theorem.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="147"/></proof>
  </goal>
  <goal name="VC euler_theorem.15" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H18">
   <goal name="VC euler_theorem.15.0" expl="assertion" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H6">
    <goal name="VC euler_theorem.15.0.0" expl="assertion" proved="true">
    <transf name="apply" proved="true" arg1="H6">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.16" expl="assertion" proved="true">
  <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H13">
   <goal name="VC euler_theorem.16.0" expl="assertion" proved="true">
   <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H7">
    <goal name="VC euler_theorem.16.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="H13" arg2="in" arg3="H7">
     <goal name="VC euler_theorem.16.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (x:int) -&gt; x)) bound)" arg2="prod" arg3="in" arg4="H7">
      <goal name="VC euler_theorem.16.0.0.0.0" expl="assertion" proved="true">
      <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H1">
       <goal name="VC euler_theorem.16.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="assert" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (i:int) -&gt; mod (pick * i) bound))
  bound = mod (power_ pick (euler_phi bound) * prod) bound)">
        <goal name="VC euler_theorem.16.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="H7">
         <goal name="VC euler_theorem.16.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="replace" proved="true" arg1="(cardinal (co_primes bound))" arg2="(euler_phi bound)">
          <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
           <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="replace" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (x:int) -&gt; x)) bound)" arg2="prod">
            <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
             <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="goal_comm">
              <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
               <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="mod_mod_i">
                <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                </transf>
                </goal>
                <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="6"><result status="valid" time="0.18" steps="151"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="6"><result status="valid" time="0.18" steps="151"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.15" steps="151"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="eliminate_definition" proved="true" >
             <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="prod_def">
              <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="H1">
               <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="mod_eq">
                <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="iproduct_eq">
                 <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.13" steps="151"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC euler_theorem.16.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="6"><result status="valid" time="0.30" steps="153"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC euler_theorem.16.0.0.0.0.0.1" expl="assertion" proved="true">
        <transf name="replace" proved="true" arg1="(mod (iproduct (co_primes bound) (fun (i:int) -&gt; mod (pick * i) bound))
  bound)" arg2="prod" arg3="in" arg4="h">
         <goal name="VC euler_theorem.16.0.0.0.0.0.1.0" expl="assertion" proved="true">
         <transf name="apply" proved="true" arg1="h">
         </transf>
         </goal>
         <goal name="VC euler_theorem.16.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC euler_theorem.16.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="H19">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC euler_theorem.16.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC euler_theorem.16.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="prod_def">
        <goal name="VC euler_theorem.16.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="H1">
         <goal name="VC euler_theorem.16.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="goal_comm">
          <goal name="VC euler_theorem.16.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="H1">
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.17" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev" arg2="in" arg3="H">
   <goal name="VC euler_theorem.17.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
    <goal name="VC euler_theorem.17.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="mod_mod_i">
     <goal name="VC euler_theorem.17.0.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="VC euler_theorem.17.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.12" steps="153"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC euler_theorem.17.0.1" expl="rewrite premises" proved="true">
    <proof prover="6"><result status="valid" time="0.12" steps="153"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC euler_theorem.17.1" expl="rewrite premises" proved="true">
   <proof prover="6"><result status="valid" time="0.12" steps="153"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="155"/></proof>
  </goal>
  <goal name="VC euler_theorem.19" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="157"/></proof>
  </goal>
  <goal name="VC euler_theorem.20" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="157"/></proof>
  </goal>
  <goal name="VC euler_theorem.21" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC euler_theorem.21.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="prod_def">
    <goal name="VC euler_theorem.21.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="co_prime_mod">
     <goal name="VC euler_theorem.21.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="iproduct_strict_pos">
      <goal name="VC euler_theorem.21.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC euler_theorem.21.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC euler_theorem.21.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.03"/></proof>
        <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC euler_theorem.21.0.0.1" expl="apply premises" proved="true">
     <proof prover="6"><result status="valid" time="0.14" steps="164"/></proof>
     </goal>
     <goal name="VC euler_theorem.21.0.0.2" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="co_prime_iproduct">
      <goal name="VC euler_theorem.21.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="164"/></proof>
      </goal>
      <goal name="VC euler_theorem.21.0.0.2.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC euler_theorem.21.0.0.2.1.0" expl="apply premises" proved="true">
       <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
       <proof prover="3"><result status="valid" time="1.16"/></proof>
       <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC euler_theorem.21.0.0.2.2" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC euler_theorem.21.0.0.2.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC euler_theorem.21.0.0.2.2.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="co_prime_mod">
         <goal name="VC euler_theorem.21.0.0.2.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.33" steps="168"/></proof>
         </goal>
         <goal name="VC euler_theorem.21.0.0.2.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.15" steps="166"/></proof>
         </goal>
         <goal name="VC euler_theorem.21.0.0.2.2.0.0.2" expl="apply premises" proved="true">
         <proof prover="6"><result status="valid" time="0.34" steps="168"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.40"/></proof>
  <proof prover="6"><result status="valid" time="0.42" steps="160"/></proof>
  </goal>
  <goal name="VC euler_theorem.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="163"/></proof>
  </goal>
  <goal name="VC euler_theorem.24" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(1*prod)" arg2="prod">
   <goal name="VC euler_theorem.24.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(mod prod bound)" arg2="prod">
    <goal name="VC euler_theorem.24.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="goal_comm">
     <goal name="VC euler_theorem.24.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H5">
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC euler_theorem.24.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC euler_theorem.24.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="prod_def">
      <goal name="VC euler_theorem.24.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="mod_mod_i">
       <goal name="VC euler_theorem.24.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.14" steps="171"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC euler_theorem.24.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="one_mult">
    <goal name="VC euler_theorem.24.1.0" expl="apply premises" proved="true">
    <proof prover="6"><result status="valid" time="0.14" steps="164"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC euler_theorem.25" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="159"/></proof>
  </goal>
  <goal name="VC euler_theorem.26" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.15" steps="159"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_inverse" expl="VC for modular_inverse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modular_inverse.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="131"/></proof>
  </goal>
  <goal name="VC modular_inverse.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.16" steps="131"/></proof>
  </goal>
  <goal name="VC modular_inverse.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="133"/></proof>
  </goal>
  <goal name="VC modular_inverse.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC modular_inverse.3.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(mod (power_ pick (euler_phi bound -1)) bound)">
    <goal name="VC modular_inverse.3.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC modular_inverse.3.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.37"/></proof>
     <proof prover="6"><result status="valid" time="0.22" steps="138"/></proof>
     </goal>
     <goal name="VC modular_inverse.3.0.0.1" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
      <goal name="VC modular_inverse.3.0.0.1.0" proved="true">
      <transf name="rewrite" proved="true" arg1="mod_mod_i">
       <goal name="VC modular_inverse.3.0.0.1.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="mod_mod_mult">
        <goal name="VC modular_inverse.3.0.0.1.0.0.0" proved="true">
        <transf name="replace" proved="true" arg1="(power_ pick (euler_phi bound - 1) * pick)" arg2="(power_ pick (euler_phi bound))">
         <goal name="VC modular_inverse.3.0.0.1.0.0.0.0" proved="true">
         <proof prover="6"><result status="valid" time="0.16" steps="138"/></proof>
         </goal>
         <goal name="VC modular_inverse.3.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="assert" proved="true" arg1="(power_ pick (euler_phi bound) =  power_ pick (euler_phi bound -1 +1))">
          <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="6"><result status="valid" time="0.20" steps="138"/></proof>
          </goal>
          <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="power__sum" arg2="in" arg3="h">
           <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
           <proof prover="6"><result status="valid" time="0.23" steps="142"/></proof>
           </goal>
           <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
           <transf name="assert" proved="true" arg1="(1 &lt; bound)">
            <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1.1.0" expl="asserted formula" proved="true">
            <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
            </goal>
            <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1.1.1" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(mem (euler_phi bound) (to_fset 1 bound))">
             <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1.1.1.0" expl="asserted formula" proved="true">
             <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
             </goal>
             <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1.1.1.1" expl="rewrite premises" proved="true">
             <proof prover="6"><result status="valid" time="0.24" steps="144"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC modular_inverse.3.0.0.1.0.0.0.1.1.2" expl="rewrite premises" proved="true">
           <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC modular_inverse.3.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.24" steps="138"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC modular_inverse.3.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.18" steps="138"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC modular_inverse.3.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="138"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_inverse.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC modular_inverse.4.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="144"/></proof>
   </goal>
   <goal name="VC modular_inverse.4.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.23" steps="144"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC modular_inverse.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC modular_inverse.5.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="148"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC multi_order" expl="VC for multi_order" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC multi_order.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="131"/></proof>
  </goal>
  <goal name="VC multi_order.1" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="(euler_phi bound)">
   <goal name="VC multi_order.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC multi_order.1.0.0" proved="true">
    <proof prover="6"><result status="valid" time="0.23" steps="136"/></proof>
    </goal>
    <goal name="VC multi_order.1.0.1" proved="true">
    <transf name="compute_specified" proved="true" >
     <goal name="VC multi_order.1.0.1.0" proved="true">
     <transf name="apply" proved="true" arg1="euler_theorem">
      <goal name="VC multi_order.1.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC multi_order.1.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.13" steps="136"/></proof>
       </goal>
       <goal name="VC multi_order.1.0.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="6"><result status="valid" time="0.12" steps="136"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC multi_order.1.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="6"><result status="valid" time="0.13" steps="136"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC multi_order.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multi_order.2.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="142"/></proof>
   </goal>
   <goal name="VC multi_order.2.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="142"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC multi_order.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC multi_order.3.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.24" steps="146"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_expo" expl="VC for modular_expo" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modular_expo.0" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="138"/></proof>
  </goal>
  <goal name="VC modular_expo.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC modular_expo.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="139"/></proof>
  </goal>
  <goal name="VC modular_expo.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC modular_expo.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC modular_expo.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC modular_expo.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
  </goal>
  <goal name="VC modular_expo.7" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC modular_expo.7.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.16" steps="138"/></proof>
   </goal>
   <goal name="VC modular_expo.7.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="((k * multi_order a bound)+i)" arg2="((((k-1) * multi_order a bound)+i)  + multi_order a bound)">
    <goal name="VC modular_expo.7.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="power__sum">
     <goal name="VC modular_expo.7.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mod_mod_mult_rev">
      <goal name="VC modular_expo.7.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mult_one">
       <goal name="VC modular_expo.7.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="mod_mod_i">
        <goal name="VC modular_expo.7.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="6"><result status="valid" time="0.20" steps="140"/></proof>
        </goal>
        <goal name="VC modular_expo.7.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="6"><result status="valid" time="0.12" steps="140"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC modular_expo.7.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="6"><result status="valid" time="0.22" steps="142"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC modular_expo.7.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="6"><result status="valid" time="0.12" steps="140"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC modular_expo.7.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.38"/></proof>
     <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
     </goal>
     <goal name="VC modular_expo.7.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="142"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC modular_expo.7.1.1" expl="equality hypothesis" proved="true">
    <proof prover="6"><result status="valid" time="0.16" steps="140"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_expo_gen" expl="VC for modular_expo_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modular_expo_gen.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.28" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_expo_rev" expl="VC for modular_expo_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modular_expo_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC modular_expo_gen_rev" expl="VC for modular_expo_gen_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC modular_expo_gen_rev.0" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC injec_mod_prod_multi_order_pre" expl="VC for injec_mod_prod_multi_order_pre">
 <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
 <transf name="split_vc" >
  <goal name="VC injec_mod_prod_multi_order_pre.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.23" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order_pre.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order_pre.2" expl="assertion">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order_pre.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="5.00"/></proof>
  <proof prover="6" obsolete="true"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC injec_mod_prod_multi_order" expl="VC for injec_mod_prod_multi_order" proved="true">
 <proof prover="6"><result status="valid" time="0.16" steps="137"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="VC injec_mod_prod_multi_order.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.25" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.7" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.12" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="139"/></proof>
  </goal>
  <goal name="VC injec_mod_prod_multi_order.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="137"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
