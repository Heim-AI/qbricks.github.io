<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="derived_circuits_c.mlw"/>
<theory name="Reverse" proved="true">
 <goal name="VC ancilla_free" expl="VC for ancilla_free" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_free.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.09"/></proof>
  </goal>
  <goal name="VC ancilla_free.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_free.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.10"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.07"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.86" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.79" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.56" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.74" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.47"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
   <goal name="VC ancilla_free.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_free.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02"/></proof>
  </goal>
  <goal name="VC ancilla_free.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_free.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.98" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.95" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.69" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.34" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.13"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.43"/></proof>
   </goal>
   <goal name="VC ancilla_free.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_free.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.51"/></proof>
  </goal>
  <goal name="VC ancilla_free.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_free.5.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.56"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.88"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.38" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.70" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.92" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.93" steps="424"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC ancilla_free.5.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.03"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_free.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.03"/></proof>
  </goal>
  <goal name="VC ancilla_free.7" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_free.7.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.02"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.88" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.93" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.08" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.92" steps="428"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.07"/></proof>
   </goal>
   <goal name="VC ancilla_free.7.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.08"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_free.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_free.8.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="H1">
    <goal name="VC ancilla_free.8.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC ancilla_free.8.0.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC ancilla_free.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(ancillas_c (to_qc x1) = 0)">
       <goal name="VC ancilla_free.8.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="0.54" steps="430"/></proof>
       </goal>
       <goal name="VC ancilla_free.8.0.0.0.0.1" expl="postcondition" proved="true">
       <transf name="assert" proved="true" arg1="(ancillas_c (to_qc x) = 0)">
        <goal name="VC ancilla_free.8.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="0.53" steps="430"/></proof>
        </goal>
        <goal name="VC ancilla_free.8.0.0.0.0.1.1" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="c" arg2="(sequence_c (to_qc x1) (to_qc x))">
         <goal name="VC ancilla_free.8.0.0.0.0.1.1.0" expl="postcondition" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC ancilla_free.8.0.0.0.0.1.1.0.0" expl="postcondition" proved="true">
          <transf name="instantiate" proved="true" arg1="ancillas_c_def8" arg2="(sequence_c (to_qc x1) (to_qc x)),x1,x">
           <goal name="VC ancilla_free.8.0.0.0.0.1.1.0.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="Hinst">
            <goal name="VC ancilla_free.8.0.0.0.0.1.1.0.0.0.0" expl="postcondition" proved="true">
            <proof prover="3"><result status="valid" time="3.03" steps="433"/></proof>
            </goal>
            <goal name="VC ancilla_free.8.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.05"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ancilla_free.8.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="0.98"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla_free.8.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.96" steps="432"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.0.2" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.89" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.0.3" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.89" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.0.4" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.92" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.0.5" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.88" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.0.6" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.90" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.0.7" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.88" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.0.8" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.52" steps="422"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC ancilla_free.8.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ancilla_free.8.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC ancilla_free.8.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC ancilla_free.8.1.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC ancilla_free.8.1.0.0.0.0" expl="VC for ancilla_free" proved="true">
       <transf name="assert" proved="true" arg1="(ancillas_c c = max (ancillas_c (to_qc x1)) (ancillas_c (to_qc x)))">
        <goal name="VC ancilla_free.8.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="2.97" steps="429"/></proof>
        </goal>
        <goal name="VC ancilla_free.8.1.0.0.0.0.1" expl="VC for ancilla_free" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ancilla_free.8.1.0.0.0.0.1.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.48" steps="434"/></proof>
         </goal>
         <goal name="VC ancilla_free.8.1.0.0.0.0.1.1" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="1.31"/></proof>
         </goal>
         <goal name="VC ancilla_free.8.1.0.0.0.0.1.2" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="1.32"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla_free.8.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.87"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.1.2" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.50" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.1.3" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.51" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.1.4" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.58" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.1.5" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.65" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.1.6" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.51" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.1.7" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.47" steps="424"/></proof>
    </goal>
    <goal name="VC ancilla_free.8.1.8" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(ancillas_c c =  (ancillas_c (to_qc x)) +1)">
     <goal name="VC ancilla_free.8.1.8.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="3.00" steps="426"/></proof>
     </goal>
     <goal name="VC ancilla_free.8.1.8.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="2.93" steps="426"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC reverse_c" expl="VC for reverse_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC reverse_c.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.07"/></proof>
  </goal>
  <goal name="VC reverse_c.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC reverse_c.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.15"/></proof>
   </goal>
   <goal name="VC reverse_c.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.23"/></proof>
   </goal>
   <goal name="VC reverse_c.1.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.88" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.1.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.84" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.1.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.00" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.1.5" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.05"/></proof>
   </goal>
   <goal name="VC reverse_c.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.20"/></proof>
   </goal>
   <goal name="VC reverse_c.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
   <goal name="VC reverse_c.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.09"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(ancilla_free (to_qc x1))">
   <goal name="VC reverse_c.2.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="1.16"/></proof>
   </goal>
   <goal name="VC reverse_c.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="3.37" steps="428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98"/></proof>
  </goal>
  <goal name="VC reverse_c.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC reverse_c.4.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.47"/></proof>
   </goal>
   <goal name="VC reverse_c.4.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC reverse_c.4.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.21" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.4.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.07" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.4.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.93" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.4.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.96" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.4.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.02"/></proof>
   </goal>
   <goal name="VC reverse_c.4.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.19"/></proof>
   </goal>
   <goal name="VC reverse_c.4.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.96"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.5" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(ancilla_free (to_qc x))">
   <goal name="VC reverse_c.5.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC reverse_c.5.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="2.88" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98"/></proof>
  </goal>
  <goal name="VC reverse_c.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98"/></proof>
  </goal>
  <goal name="VC reverse_c.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC reverse_c.8.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC reverse_c.8.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC reverse_c.8.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.82" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.8.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.81" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.8.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.47" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.8.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.88" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.8.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
   <goal name="VC reverse_c.8.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC reverse_c.8.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.08"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.9" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(ancilla_free (to_qc x1))">
   <goal name="VC reverse_c.9.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
   <goal name="VC reverse_c.9.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.29"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.10" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99"/></proof>
  </goal>
  <goal name="VC reverse_c.11" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC reverse_c.11.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC reverse_c.11.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC reverse_c.11.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.85" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.11.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.85" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.11.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.90" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.11.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.90" steps="434"/></proof>
   </goal>
   <goal name="VC reverse_c.11.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC reverse_c.11.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.24"/></proof>
   </goal>
   <goal name="VC reverse_c.11.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.12" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(ancilla_free (to_qc x))">
   <goal name="VC reverse_c.12.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC reverse_c.12.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99"/></proof>
  </goal>
  <goal name="VC reverse_c.14" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC reverse_c.14.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.82" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.14.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.83" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.14.2" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.83" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.14.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.97"/></proof>
   </goal>
   <goal name="VC reverse_c.14.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC reverse_c.14.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.84" steps="426"/></proof>
   </goal>
   <goal name="VC reverse_c.14.6" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.06"/></proof>
   </goal>
   <goal name="VC reverse_c.14.7" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC reverse_c.14.8" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.15" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC reverse_c.15.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.87" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.15.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.85" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.15.2" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.92" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.15.3" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.93" steps="442"/></proof>
   </goal>
   <goal name="VC reverse_c.15.4" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.96" steps="443"/></proof>
   </goal>
   <goal name="VC reverse_c.15.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.88" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.15.6" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.19"/></proof>
   </goal>
   <goal name="VC reverse_c.15.7" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(parallel_c (to_qc x1) (to_qc x))">
    <goal name="VC reverse_c.15.7.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC reverse_c.15.7.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="result" arg2="(parallel_c o o1)">
      <goal name="VC reverse_c.15.7.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.33"/></proof>
      </goal>
      <goal name="VC reverse_c.15.7.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.50" steps="448"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC reverse_c.15.7.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.16"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.15.8" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.01" steps="428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.16" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC reverse_c.16.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.16.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.16.2" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.48" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.16.3" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="440"/></proof>
   </goal>
   <goal name="VC reverse_c.16.4" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.50" steps="440"/></proof>
   </goal>
   <goal name="VC reverse_c.16.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.50" steps="428"/></proof>
   </goal>
   <goal name="VC reverse_c.16.6" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC reverse_c.16.6.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ancillas_c result)" arg2="(max (ancillas_c o2) (ancillas_c o3))">
     <goal name="VC reverse_c.16.6.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="3.62" steps="452"/></proof>
     </goal>
     <goal name="VC reverse_c.16.6.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.16.7" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC reverse_c.16.7.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ancillas_c result)" arg2="( (ancillas_c o) + (ancillas_c o1))">
     <goal name="VC reverse_c.16.7.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.61" steps="450"/></proof>
     </goal>
     <goal name="VC reverse_c.16.7.0.1" expl="equality hypothesis" proved="true">
     <transf name="replace" proved="true" arg1="result" arg2="(parallel_c o o1)">
      <goal name="VC reverse_c.16.7.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="3.44" steps="452"/></proof>
      </goal>
      <goal name="VC reverse_c.16.7.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.53" steps="450"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.16.8" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC reverse_c.17" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H5">
   <goal name="VC reverse_c.17.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(id_c)">
    <goal name="VC reverse_c.17.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.57"/></proof>
    </goal>
    <goal name="VC reverse_c.17.0.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="3.22" steps="435"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.1" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(swap_c)">
    <goal name="VC reverse_c.17.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC reverse_c.17.1.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="3.26" steps="437"/></proof>
     </goal>
     <goal name="VC reverse_c.17.1.0.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="3.24" steps="437"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC reverse_c.17.1.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="3.11" steps="435"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.2" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(cnot_c)">
    <goal name="VC reverse_c.17.2.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.71"/></proof>
    </goal>
    <goal name="VC reverse_c.17.2.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.13"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.3" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(phase_c x1)">
    <goal name="VC reverse_c.17.3.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="result" arg2="(phase_c (-x1))">
     <goal name="VC reverse_c.17.3.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC reverse_c.17.3.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="y" arg2="(path_sem_c (phase_c x1) x )">
       <goal name="VC reverse_c.17.3.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="x1" arg2="(-(-x1))">
        <goal name="VC reverse_c.17.3.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(- (- (- x1)))" arg2="( ( (- x1)))">
         <goal name="VC reverse_c.17.3.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="path_sem_phase_inv_c">
          <goal name="VC reverse_c.17.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="0.55" steps="446"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC reverse_c.17.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="0.64" steps="446"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC reverse_c.17.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.66" steps="446"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.3.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.54" steps="446"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC reverse_c.17.3.0.0.1" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="x" arg2="(path_sem_c (phase_c (- x1)) y)">
       <goal name="VC reverse_c.17.3.0.0.1.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="path_sem_phase_inv_c">
        <goal name="VC reverse_c.17.3.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.55" steps="446"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.3.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.53" steps="446"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC reverse_c.17.3.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.52" steps="444"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC reverse_c.17.3.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(pre c = pre (phase_c x1))">
     <goal name="VC reverse_c.17.3.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="3.17" steps="448"/></proof>
     </goal>
     <goal name="VC reverse_c.17.3.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="3.11" steps="450"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.4" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(rz_c x1)">
    <goal name="VC reverse_c.17.4.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="result" arg2="(rz_c (-x1))">
     <goal name="VC reverse_c.17.4.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC reverse_c.17.4.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="y" arg2="(path_sem_c (rz_c x1) x)">
       <goal name="VC reverse_c.17.4.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(rz_c x1)" arg2="(rz_c (-(-x1)))">
        <goal name="VC reverse_c.17.4.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="path_sem_rz_inv_c">
         <goal name="VC reverse_c.17.4.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.58" steps="446"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC reverse_c.17.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.57" steps="446"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.4.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.54" steps="446"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC reverse_c.17.4.0.0.1" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="x" arg2="(path_sem_c (rz_c (- x1)) y )">
       <goal name="VC reverse_c.17.4.0.0.1.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="path_sem_rz_inv_c">
        <goal name="VC reverse_c.17.4.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.55" steps="446"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.4.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.54" steps="446"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC reverse_c.17.4.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.54" steps="444"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC reverse_c.17.4.1" expl="equality hypothesis" proved="true">
    <transf name="assert" proved="true" arg1="(pre c = pre (rz_c x1))">
     <goal name="VC reverse_c.17.4.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="3.78" steps="448"/></proof>
     </goal>
     <goal name="VC reverse_c.17.4.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="3.76" steps="450"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.5" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(hadamard_c)">
    <goal name="VC reverse_c.17.5.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="2.20"/></proof>
    </goal>
    <goal name="VC reverse_c.17.5.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="3.20" steps="435"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.6" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC reverse_c.17.6.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC reverse_c.17.6.0.0" expl="VC for reverse_c" proved="true">
     <transf name="replace" proved="true" arg1="c" arg2="( sequence_c (to_qc x2) (to_qc x1))">
      <goal name="VC reverse_c.17.6.0.0.0" expl="VC for reverse_c" proved="true">
      <transf name="replace" proved="true" arg1="result" arg2="( sequence_c o2 o3 )">
       <goal name="VC reverse_c.17.6.0.0.0.0" expl="VC for reverse_c" proved="true">
       <transf name="instantiate" proved="true" arg1="path_sem_comp_c" arg2="o2,o3,y,(path_sem_c (to_qc x2) x),x">
        <goal name="VC reverse_c.17.6.0.0.0.0.0" expl="VC for reverse_c" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC reverse_c.17.6.0.0.0.0.0.0" expl="VC for reverse_c" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="VC reverse_c.17.6.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.14"/></proof>
          </goal>
          <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H11">
            <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(is_a_ket_l x (width_c (to_qc x2)))">
             <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="1.16"/></proof>
             </goal>
             <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="( (width_c (to_qc x1)))" arg2="( (width_c (to_qc x2)))">
              <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="3.37" steps="463"/></proof>
              </goal>
              <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="0"><result status="valid" time="1.21"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.28"/></proof>
            </goal>
            <goal name="VC reverse_c.17.6.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.10"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC reverse_c.17.6.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC reverse_c.17.6.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H17">
            <goal name="VC reverse_c.17.6.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.13"/></proof>
            </goal>
            <goal name="VC reverse_c.17.6.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(is_a_ket_l x (width_c (to_qc x2)))">
             <goal name="VC reverse_c.17.6.0.0.0.0.0.0.2.0.1.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="1.11"/></proof>
             </goal>
             <goal name="VC reverse_c.17.6.0.0.0.0.0.0.2.0.1.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="3.21" steps="463"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC reverse_c.17.6.0.0.0.0.0.0.2.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.50" steps="458"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC reverse_c.17.6.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.12"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.6.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.53" steps="456"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC reverse_c.17.6.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.17"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC reverse_c.17.6.0.1" expl="VC for reverse_c" proved="true">
     <transf name="replace" proved="true" arg1="c" arg2="( sequence_c (to_qc x2) (to_qc x1))">
      <goal name="VC reverse_c.17.6.0.1.0" expl="VC for reverse_c" proved="true">
      <transf name="replace" proved="true" arg1="result" arg2="( sequence_c o2 o3 )">
       <goal name="VC reverse_c.17.6.0.1.0.0" expl="VC for reverse_c" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC reverse_c.17.6.0.1.0.0.0" expl="VC for reverse_c" proved="true">
        <transf name="instantiate" proved="true" arg1="path_sem_comp_c" arg2="(to_qc x2),(to_qc x1),x,(path_sem_c o2 y),y">
         <goal name="VC reverse_c.17.6.0.1.0.0.0.0" expl="VC for reverse_c" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
          <goal name="VC reverse_c.17.6.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.13"/></proof>
          </goal>
          <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H16">
            <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.12"/></proof>
            </goal>
            <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(is_a_ket_l y (width_c (to_qc x2)))">
             <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
             <proof prover="0"><result status="valid" time="1.13"/></proof>
             </goal>
             <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(width_c (to_qc x2))" arg2="(width_c o2)">
              <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="0.44"/></proof>
              </goal>
              <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
              <proof prover="0"><result status="valid" time="1.07"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC reverse_c.17.6.0.1.0.0.0.0.1.0.2" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.12"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC reverse_c.17.6.0.1.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC reverse_c.17.6.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H10">
            <goal name="VC reverse_c.17.6.0.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="0.45"/></proof>
            </goal>
            <goal name="VC reverse_c.17.6.0.1.0.0.0.0.2.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.18"/></proof>
            </goal>
            <goal name="VC reverse_c.17.6.0.1.0.0.0.0.2.0.2" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.52" steps="458"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC reverse_c.17.6.0.1.0.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.34"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.6.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.63" steps="456"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC reverse_c.17.6.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.18"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.7" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC reverse_c.17.7.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(path_sem_c result y)" arg2="(path_sem_c (sequence_c c result) x)">
     <goal name="VC reverse_c.17.7.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC reverse_c.17.7.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="result" arg2="(parallel_c o o1)">
       <goal name="VC reverse_c.17.7.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="c" arg2="(parallel_c (to_qc x2) (to_qc x1))">
        <goal name="VC reverse_c.17.7.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_sequence_parallel_c">
         <goal name="VC reverse_c.17.7.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width_c c)">
          <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
            <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="apply" proved="true" arg1="ket_sum_eq">
             <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="3.33" steps="460"/></proof>
             </goal>
             <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.54" steps="458"/></proof>
             </goal>
             <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
                <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="scalar_eq">
                 <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(bv_to_ket a)" arg2="(kronecker (bv_to_ket (hpart a (width_c (to_qc x2))))(bv_to_ket (tpart a (width_c (to_qc x2)))))">
                  <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="path_sem_kron_c">
                   <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="sequence_width_c">
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="hpart_spec4">
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.65" steps="460"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="3"><result status="valid" time="3.44" steps="463"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.55" steps="460"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="tpart_spec2">
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="sequence_width_c">
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.15"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.57" steps="460"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="3"><result status="valid" time="3.26" steps="463"/></proof>
                      </goal>
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.57"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_comp_pre_c">
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="H12">
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.54"/></proof>
                      </goal>
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.61"/></proof>
                      </goal>
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.56" steps="460"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                    <proof prover="5"><result status="valid" time="0.42"/></proof>
                    </goal>
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.52" steps="460"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_comp_pre_c">
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="H18">
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="tpart_spec2">
                        <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.10"/></proof>
                        </goal>
                        <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="3"><result status="valid" time="3.25" steps="463"/></proof>
                        </goal>
                        <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.66"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="path_sem_c_spec1">
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                        <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="tpart_spec2">
                         <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="0"><result status="valid" time="1.22"/></proof>
                         </goal>
                         <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="3"><result status="valid" time="3.64" steps="463"/></proof>
                         </goal>
                         <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.68"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.2" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.52" steps="460"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="tpart_spec2">
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.31"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="3"><result status="valid" time="3.20" steps="463"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.55"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.2" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.59" steps="460"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="goal_comm">
                   <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="(bv_to_ket a)" arg2="(bv_to_ket(concat (hpart a (width_c (to_qc x2))) (tpart a (width_c (to_qc x2)))))">
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
                     <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="3"><result status="valid" time="0.56" steps="460"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="2"><result status="valid" time="1.68"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.33"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="3.23" steps="461"/></proof>
            </goal>
            <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.04"/></proof>
            </goal>
            <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_ket_l">
               <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.32"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="3.17" steps="460"/></proof>
           </goal>
           <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="3.56" steps="460"/></proof>
           </goal>
           <goal name="VC reverse_c.17.7.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="3.53" steps="460"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC reverse_c.17.7.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.17"/></proof>
         </goal>
         <goal name="VC reverse_c.17.7.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.54" steps="458"/></proof>
         </goal>
         <goal name="VC reverse_c.17.7.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.53" steps="458"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC reverse_c.17.7.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.13"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.7.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.57" steps="458"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC reverse_c.17.7.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="3.31" steps="460"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC reverse_c.17.7.1" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(path_sem_c c x)" arg2="(path_sem_c (sequence_c result c) y)">
     <goal name="VC reverse_c.17.7.1.0" expl="postcondition" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC reverse_c.17.7.1.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="result" arg2="(parallel_c o o1)">
       <goal name="VC reverse_c.17.7.1.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="c" arg2="(parallel_c (to_qc x2) (to_qc x1))">
        <goal name="VC reverse_c.17.7.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_sequence_parallel_c">
         <goal name="VC reverse_c.17.7.1.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="y,(width_c c)">
          <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
            <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="apply" proved="true" arg1="ket_sum_eq">
             <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="3.25" steps="460"/></proof>
             </goal>
             <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.52" steps="458"/></proof>
             </goal>
             <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
                <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="scalar_eq">
                 <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(bv_to_ket a)" arg2="(kronecker (bv_to_ket (hpart a (width_c (to_qc x2))))(bv_to_ket (tpart a (width_c (to_qc x2)))))">
                  <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="path_sem_kron_c">
                   <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="sequence_width_c">
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="hpart_spec4">
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.62" steps="460"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="3"><result status="valid" time="3.53" steps="463"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.54" steps="460"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="tpart_spec2">
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="sequence_width_c">
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.17"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.55" steps="460"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="3"><result status="valid" time="3.33" steps="463"/></proof>
                      </goal>
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.67"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_comp_pre_c">
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="H11">
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.56"/></proof>
                      </goal>
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.60"/></proof>
                      </goal>
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.57" steps="460"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="hpart_spec4">
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.52" steps="460"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="3"><result status="valid" time="3.26" steps="463"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.56" steps="460"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="path_sem_comp_pre_c">
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="H17">
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                      <transf name="replace" proved="true" arg1="(width_c (to_qc x1))" arg2="(width_c o1)">
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="path_sem_c_spec1">
                        <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                         <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="tpart_spec2">
                          <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="0"><result status="valid" time="1.10"/></proof>
                          </goal>
                          <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="3"><result status="valid" time="3.53" steps="463"/></proof>
                          </goal>
                          <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.56"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
                       <proof prover="3"><result status="valid" time="0.54" steps="460"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="tpart_spec2">
                        <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.16"/></proof>
                        </goal>
                        <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="3"><result status="valid" time="3.65" steps="463"/></proof>
                        </goal>
                        <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.1.0.2" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.59"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.0.0.2" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.54" steps="460"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0" expl="apply premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="tpart_spec2">
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.17"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="3"><result status="valid" time="3.21" steps="463"/></proof>
                       </goal>
                       <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.1.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.46"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.0.3.2" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.52" steps="460"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
                  <transf name="apply" proved="true" arg1="goal_comm">
                   <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="(bv_to_ket a)" arg2="(bv_to_ket(concat (hpart a (width_c (to_qc x2))) (tpart a (width_c (to_qc x2)))))">
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
                     <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="3"><result status="valid" time="0.49" steps="460"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="2"><result status="valid" time="1.46"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                 <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.50"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="3.23" steps="461"/></proof>
            </goal>
            <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.04"/></proof>
            </goal>
            <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_ket_l">
               <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.30"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="3.18" steps="460"/></proof>
           </goal>
           <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="3.12" steps="460"/></proof>
           </goal>
           <goal name="VC reverse_c.17.7.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="3.19" steps="460"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC reverse_c.17.7.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.00"/></proof>
         </goal>
         <goal name="VC reverse_c.17.7.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.51" steps="458"/></proof>
         </goal>
         <goal name="VC reverse_c.17.7.1.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.48" steps="458"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC reverse_c.17.7.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="0.99"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC reverse_c.17.7.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.48" steps="458"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC reverse_c.17.7.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="3.05" steps="460"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC reverse_c.17.8" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.83" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Place" proved="true">
 <goal name="VC ids_c" expl="VC for ids_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ids_c.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.0.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="422"/></proof>
   </goal>
   <goal name="VC ids_c.0.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.52" steps="422"/></proof>
  </goal>
  <goal name="VC ids_c.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.2.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="424"/></proof>
   </goal>
   <goal name="VC ids_c.2.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.02" steps="440"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.3.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="425"/></proof>
   </goal>
   <goal name="VC ids_c.3.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.03" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.4.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="426"/></proof>
   </goal>
   <goal name="VC ids_c.4.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.10" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.5.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="427"/></proof>
   </goal>
   <goal name="VC ids_c.5.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.03" steps="446"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.6.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.80" steps="430"/></proof>
   </goal>
   <goal name="VC ids_c.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ids_c.6.1.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ids_c.6.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H7">
      <goal name="VC ids_c.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="parallel_basis_ket_c">
       <goal name="VC ids_c.6.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC ids_c.6.1.0.0.0.0.0" expl="VC for ids_c" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ids_c.6.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="0"><result status="valid" time="3.73"/></proof>
         </goal>
         <goal name="VC ids_c.6.1.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="1.38"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.7.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.99" steps="430"/></proof>
   </goal>
   <goal name="VC ids_c.7.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ids_c.7.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H8">
     <goal name="VC ids_c.7.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="parallel_angle_c">
      <goal name="VC ids_c.7.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.33"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.8.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.85" steps="434"/></proof>
   </goal>
   <goal name="VC ids_c.8.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ids_c.8.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H11">
     <goal name="VC ids_c.8.1.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="x" arg2="(kronecker (hpart_ket x (n-1)) (tpart_ket x (n-1)))">
      <goal name="VC ids_c.8.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_kron_c_">
       <goal name="VC ids_c.8.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="VC ids_c.8.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H13">
         <goal name="VC ids_c.8.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.97"/></proof>
         </goal>
         <goal name="VC ids_c.8.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.18"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ids_c.8.1.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_id_c">
         <goal name="VC ids_c.8.1.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.54" steps="450"/></proof>
         </goal>
         <goal name="VC ids_c.8.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.00"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ids_c.8.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.13"/></proof>
       </goal>
       <goal name="VC ids_c.8.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.33"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ids_c.8.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.02"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_c.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_c.9.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.06" steps="432"/></proof>
   </goal>
   <goal name="VC ids_c.9.1" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,n">
    <goal name="VC ids_c.9.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC ids_c.9.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC ids_c.9.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="VC ids_c.9.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.68" steps="448"/></proof>
       </goal>
       <goal name="VC ids_c.9.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.52" steps="448"/></proof>
       </goal>
       <goal name="VC ids_c.9.1.0.0.0.2" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC ids_c.9.1.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ids_c.9.1.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
          <goal name="VC ids_c.9.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq">
           <goal name="VC ids_c.9.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H2">
            <goal name="VC ids_c.9.1.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="3.11" steps="453"/></proof>
            </goal>
            <goal name="VC ids_c.9.1.0.0.0.2.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="2.98" steps="453"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC ids_c.9.1.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="2.99" steps="453"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ids_c.9.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.00" steps="451"/></proof>
      </goal>
      <goal name="VC ids_c.9.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.53" steps="448"/></proof>
      </goal>
      <goal name="VC ids_c.9.1.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC ids_c.9.1.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ids_c.9.1.0.0.3.0.0" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="3.10" steps="453"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC ids_c.9.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.51" steps="448"/></proof>
     </goal>
     <goal name="VC ids_c.9.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="2.99" steps="450"/></proof>
     </goal>
     <goal name="VC ids_c.9.1.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="3.07" steps="450"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_zero" expl="VC for place_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_zero.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.51" steps="428"/></proof>
  </goal>
  <goal name="VC place_zero.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.13" steps="454"/></proof>
  </goal>
  <goal name="VC place_zero.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.17" steps="456"/></proof>
  </goal>
  <goal name="VC place_zero.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.12" steps="458"/></proof>
  </goal>
  <goal name="VC place_zero.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.10" steps="460"/></proof>
  </goal>
  <goal name="VC place_zero.5" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC place_zero.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC place_zero.5.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(n= width_c c)">
     <goal name="VC place_zero.5.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="2"><result status="valid" time="1.17"/></proof>
     </goal>
     <goal name="VC place_zero.5.0.0.1" expl="false case (postcondition)" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC place_zero.5.0.0.1.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="result" arg2="(parallel_c c (ids_c (n- width_c c)))">
       <goal name="VC place_zero.5.0.0.1.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="parallel_basis_ket_c">
        <goal name="VC place_zero.5.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC place_zero.5.0.0.1.0.0.0.0" expl="VC for place_zero" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC place_zero.5.0.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="0.77"/></proof>
          </goal>
          <goal name="VC place_zero.5.0.0.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="0.81"/></proof>
          </goal>
          <goal name="VC place_zero.5.0.0.1.0.0.0.0.2" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="0.81"/></proof>
          </goal>
          <goal name="VC place_zero.5.0.0.1.0.0.0.0.3" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="0.76"/></proof>
          </goal>
          <goal name="VC place_zero.5.0.0.1.0.0.0.0.4" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="0.78"/></proof>
          </goal>
          <goal name="VC place_zero.5.0.0.1.0.0.0.0.5" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="1.39"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_zero.5.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="0.72"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_zero.6" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H5">
   <goal name="VC place_zero.6.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.66"/></proof>
   </goal>
   <goal name="VC place_zero.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC place_zero.6.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC place_zero.6.1.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="result" arg2="(parallel_c c (ids_c (n- width_c c)))">
      <goal name="VC place_zero.6.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="parallel_angle_c">
       <goal name="VC place_zero.6.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="1.42"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_zero.6.1.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="0.67"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_zero.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.47" steps="434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_c" expl="VC for place_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_c.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="426"/></proof>
  </goal>
  <goal name="VC place_c.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_c.1.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="426"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_c.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
  </goal>
  <goal name="VC place_c.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_c.3.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="436"/></proof>
   </goal>
   <goal name="VC place_c.3.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.06"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_c.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_c.4.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="436"/></proof>
   </goal>
   <goal name="VC place_c.4.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_c.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_c.5.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="436"/></proof>
   </goal>
   <goal name="VC place_c.5.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_c.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96"/></proof>
  </goal>
  <goal name="VC place_c.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H8">
    <goal name="VC place_c.7.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC place_c.7.0.0.0" expl="VC for place_c" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC place_c.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(fun (j:int) -&gt; x @ (j + k))" arg2="x">
       <goal name="VC place_c.7.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="0.55" steps="444"/></proof>
       </goal>
       <goal name="VC place_c.7.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="0.54" steps="444"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_c.7.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.54" steps="442"/></proof>
      </goal>
      <goal name="VC place_c.7.0.0.0.2" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.49" steps="443"/></proof>
      </goal>
      <goal name="VC place_c.7.0.0.0.3" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.52" steps="443"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_c.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.51" steps="440"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_c.7.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC place_c.7.1.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(i &lt; k)">
     <goal name="VC place_c.7.1.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="H9">
      <goal name="VC place_c.7.1.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="parallel_basis_ket_c">
       <goal name="VC place_c.7.1.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC place_c.7.1.0.0.0.0.0" expl="VC for place_c" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC place_c.7.1.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="0.67"/></proof>
         </goal>
         <goal name="VC place_c.7.1.0.0.0.0.0.1" expl="true case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="1.32"/></proof>
         </goal>
         <goal name="VC place_c.7.1.0.0.0.0.0.2" expl="true case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="0.65"/></proof>
         </goal>
         <goal name="VC place_c.7.1.0.0.0.0.0.3" expl="true case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="0.99"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_c.7.1.0.1" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="H9">
      <goal name="VC place_c.7.1.0.1.0" expl="false case (postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="parallel_basis_ket_c">
       <goal name="VC place_c.7.1.0.1.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="H20">
        <goal name="VC place_c.7.1.0.1.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC place_c.7.1.0.1.0.0.0.0" expl="VC for place_c" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC place_c.7.1.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="1.14"/></proof>
          </goal>
          <goal name="VC place_c.7.1.0.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="1.06"/></proof>
          </goal>
          <goal name="VC place_c.7.1.0.1.0.0.0.0.2" expl="false case (postcondition)" proved="true">
          <transf name="replace" proved="true" arg1="(fun (k1:int) -&gt; x @ (k1 + width_c (ids_c k)))" arg2="(fun (j:int) -&gt; x @ (j + k))">
           <goal name="VC place_c.7.1.0.1.0.0.0.0.2.0" expl="false case (postcondition)" proved="true">
           <transf name="replace" proved="true" arg1="(fun (k1:int) -&gt; y @ (k1 + range_c (ids_c k)))" arg2="y">
            <goal name="VC place_c.7.1.0.1.0.0.0.0.2.0.0" expl="false case (postcondition)" proved="true">
            <transf name="replace" proved="true" arg1="(width_c (ids_c k))" arg2="k">
             <goal name="VC place_c.7.1.0.1.0.0.0.0.2.0.0.0" expl="false case (postcondition)" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC place_c.7.1.0.1.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="0.66"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_c.7.1.0.1.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="1.05"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_c.7.1.0.1.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(width_c (ids_c k))" arg2="k">
            <goal name="VC place_c.7.1.0.1.0.0.0.0.2.1.0" expl="equality hypothesis" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC place_c.7.1.0.1.0.0.0.0.2.1.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="0.67"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_c.7.1.0.1.0.0.0.0.3" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="1.10"/></proof>
          </goal>
          <goal name="VC place_c.7.1.0.1.0.0.0.0.4" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="1.03"/></proof>
          </goal>
          <goal name="VC place_c.7.1.0.1.0.0.0.0.5" expl="false case (postcondition)" proved="true">
          <proof prover="2"><result status="valid" time="1.30"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_c.7.1.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.99"/></proof>
        <transf name="replace" proved="true" arg1="(width_c (ids_c k))" arg2="k">
         <goal name="VC place_c.7.1.0.1.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.09"/></proof>
         <proof prover="2"><result status="valid" time="0.60"/></proof>
         <proof prover="3"><result status="valid" time="0.51" steps="464"/></proof>
         </goal>
         <goal name="VC place_c.7.1.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="0.59"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_c.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_c.8.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(fun (j:int) -&gt; x @ (j + k))" arg2="x">
    <goal name="VC place_c.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.96" steps="442"/></proof>
    </goal>
    <goal name="VC place_c.8.0.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="0.57" steps="436"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_c.8.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC place_c.8.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H8">
     <goal name="VC place_c.8.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="parallel_angle_c">
      <goal name="VC place_c.8.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ang_zero_add">
       <goal name="VC place_c.8.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H18">
        <goal name="VC place_c.8.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(fun (k1:int) -&gt; x @ (k1 + width_c (ids_c k)))" arg2="(fun (j:int) -&gt; x @ (j + k))">
         <goal name="VC place_c.8.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(fun (k1:int) -&gt; y @ (k1 + range_c (ids_c k)))" arg2="y">
          <goal name="VC place_c.8.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="VC place_c.8.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.66"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC place_c.8.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.01"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_c.8.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="3.13" steps="462"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_c.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_c.9.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC place_c.9.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.55" steps="438"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_c.9.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC place_c.9.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H9">
     <goal name="VC place_c.9.1.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.56" steps="464"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_kron_c" expl="VC for place_kron_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC place_kron_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC place_kron_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="place_c_spec">
     <goal name="VC place_kron_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_kron_c">
      <goal name="VC place_kron_c.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.47"/></proof>
      </goal>
      <goal name="VC place_kron_c.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="parallel_width_c">
       <goal name="VC place_kron_c.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_ket_l">
        <goal name="VC place_kron_c.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.02" steps="434"/></proof>
        </goal>
        <goal name="VC place_kron_c.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.30" steps="434"/></proof>
        </goal>
        <goal name="VC place_kron_c.0.0.0.0.1.0.2" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
        </goal>
        <goal name="VC place_kron_c.0.0.0.0.1.0.3" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c (ids_c ((n - k) - width_c c)))" arg2="((n - width_c c) - k)">
         <goal name="VC place_kron_c.0.0.0.0.1.0.3.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.60" steps="432"/></proof>
         </goal>
         <goal name="VC place_kron_c.0.0.0.0.1.0.3.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="3.03" steps="434"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_kron_c.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.27"/></proof>
      </goal>
      <goal name="VC place_kron_c.0.0.0.0.3" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="path_sem_kron_c">
       <goal name="VC place_kron_c.0.0.0.0.3.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.51" steps="432"/></proof>
       </goal>
       <goal name="VC place_kron_c.0.0.0.0.3.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (ids_c ((n - k) - width_c c)))" arg2="((n - width_c c) - k)">
        <goal name="VC place_kron_c.0.0.0.0.3.1.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
        </goal>
        <goal name="VC place_kron_c.0.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="3.06" steps="434"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_kron_c.0.0.0.0.3.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
       </goal>
       <goal name="VC place_kron_c.0.0.0.0.3.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.12"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_kron_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
     </goal>
     <goal name="VC place_kron_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
     </goal>
     <goal name="VC place_kron_c.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
     </goal>
     <goal name="VC place_kron_c.0.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
     </goal>
     <goal name="VC place_kron_c.0.0.0.5" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_kron_left_c" expl="VC for place_kron_left_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_left_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC place_kron_left_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="place_c_spec">
    <goal name="VC place_kron_left_c.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC place_kron_left_c.0.0.0.0" expl="VC for place_kron_left_c" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC place_kron_left_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.54" steps="428"/></proof>
      </goal>
      <goal name="VC place_kron_left_c.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="path_sem_kron_c">
       <goal name="VC place_kron_left_c.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.60" steps="430"/></proof>
       </goal>
       <goal name="VC place_kron_left_c.0.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (ids_c ((n - 0) - width_c c)))
" arg2="(n- width_c c)">
        <goal name="VC place_kron_left_c.0.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.50" steps="430"/></proof>
        </goal>
        <goal name="VC place_kron_left_c.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="3.26" steps="432"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_kron_left_c.0.0.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.66" steps="430"/></proof>
       </goal>
       <goal name="VC place_kron_left_c.0.0.0.0.1.3" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.10"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_kron_left_c.0.0.0.0.2" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.51" steps="430"/></proof>
      </goal>
      <goal name="VC place_kron_left_c.0.0.0.0.3" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.71" steps="430"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_kron_left_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.52" steps="428"/></proof>
    </goal>
    <goal name="VC place_kron_left_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.48" steps="428"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_kron_right_c" expl="VC for place_kron_right_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_right_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC place_kron_right_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="place_c_spec">
    <goal name="VC place_kron_right_c.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC place_kron_right_c.0.0.0.0" expl="VC for place_kron_right_c" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC place_kron_right_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.53" steps="428"/></proof>
      </goal>
      <goal name="VC place_kron_right_c.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="path_sem_kron_c">
       <goal name="VC place_kron_right_c.0.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.56" steps="430"/></proof>
       </goal>
       <goal name="VC place_kron_right_c.0.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (ids_c ((n - 0) - width_c c)))
" arg2="(n- width_c c)">
        <goal name="VC place_kron_right_c.0.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.51" steps="430"/></proof>
        </goal>
        <goal name="VC place_kron_right_c.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.53" steps="430"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_kron_right_c.0.0.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.59" steps="430"/></proof>
       </goal>
       <goal name="VC place_kron_right_c.0.0.0.0.1.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.59" steps="430"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_kron_right_c.0.0.0.0.2" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="path_sem_kron_c">
       <goal name="VC place_kron_right_c.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (ids_c k))" arg2="k">
        <goal name="VC place_kron_right_c.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.52" steps="430"/></proof>
        </goal>
        <goal name="VC place_kron_right_c.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="3.12" steps="432"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_kron_right_c.0.0.0.0.2.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.53" steps="430"/></proof>
       </goal>
       <goal name="VC place_kron_right_c.0.0.0.0.2.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.22"/></proof>
       </goal>
       <goal name="VC place_kron_right_c.0.0.0.0.2.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.56" steps="430"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_kron_right_c.0.0.0.0.3" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.63" steps="430"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_kron_right_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.56" steps="428"/></proof>
    </goal>
    <goal name="VC place_kron_right_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.57" steps="428"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_zero_kron_c" expl="VC for place_zero_kron_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_zero_kron_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC place_zero_kron_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC place_zero_kron_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="place_zero_spec">
     <goal name="VC place_zero_kron_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="VC place_zero_kron_c.0.0.0.0.0" expl="VC for place_zero_kron_c" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC place_zero_kron_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.78"/></proof>
       </goal>
       <goal name="VC place_zero_kron_c.0.0.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.79"/></proof>
       </goal>
       <goal name="VC place_zero_kron_c.0.0.0.0.0.2" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.77"/></proof>
       </goal>
       <goal name="VC place_zero_kron_c.0.0.0.0.0.3" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x (width_c c))) (bv_to_ket (tpart x (width_c c))))">
        <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_kron_pre_c">
         <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.76"/></proof>
          </goal>
          <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ids_c_spec">
            <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.09"/></proof>
            </goal>
            <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.0.1.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.33"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.39"/></proof>
         </goal>
         <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.2" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width_c (ids_c (n - width_c c)))" arg2="(( (n - width_c c)))">
          <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.27"/></proof>
          </goal>
          <goal name="VC place_zero_kron_c.0.0.0.0.0.3.0.2.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="1.28"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_zero_kron_c.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="4.50"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_zero_kron_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.67" steps="392"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_kron_gen_c" expl="VC for place_kron_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_gen_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC place_kron_gen_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="place_c_spec">
    <goal name="VC place_kron_gen_c.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC place_kron_gen_c.0.0.0.0" expl="VC for place_kron_gen_c" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC place_kron_gen_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.76"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.1" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.19"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.2" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.78"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.3" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.74"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.4" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.16"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.5" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x (width_c c)))    (bv_to_ket (tpart x (width_c c))))">
       <goal name="VC place_kron_gen_c.0.0.0.0.5.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_kron_pre_c">
        <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.76"/></proof>
         </goal>
         <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ids_c_spec">
           <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.77"/></proof>
           </goal>
           <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1.0.1" expl="rewrite premises" proved="true">
           <transf name="assert" proved="true" arg1="( 0 &lt;= ((n - k) - width_c c))">
            <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1.0.1.0" expl="asserted formula" proved="true">
            <proof prover="2"><result status="valid" time="0.69"/></proof>
            </goal>
            <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1.0.1.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.18"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1.0.2" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
            <goal name="VC place_kron_gen_c.0.0.0.0.5.0.0.1.0.2.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.04"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_kron_gen_c.0.0.0.0.5.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.46"/></proof>
        </goal>
        <goal name="VC place_kron_gen_c.0.0.0.0.5.0.2" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c (ids_c ((n - k) - width_c c)))" arg2="(( ((n - k) - width_c c)))">
         <goal name="VC place_kron_gen_c.0.0.0.0.5.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.45"/></proof>
         </goal>
         <goal name="VC place_kron_gen_c.0.0.0.0.5.0.2.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="1.40"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_kron_gen_c.0.0.0.0.5.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.01"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.6" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.7" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.8" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.74"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.9" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.10" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x k))    (bv_to_ket (tpart x k)))">
       <goal name="VC place_kron_gen_c.0.0.0.0.10.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_kron_pre_c">
        <goal name="VC place_kron_gen_c.0.0.0.0.10.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC place_kron_gen_c.0.0.0.0.10.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.18"/></proof>
         </goal>
         <goal name="VC place_kron_gen_c.0.0.0.0.10.0.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC place_kron_gen_c.0.0.0.0.10.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.02"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_kron_gen_c.0.0.0.0.10.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.20"/></proof>
        </goal>
        <goal name="VC place_kron_gen_c.0.0.0.0.10.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.06"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_kron_gen_c.0.0.0.0.10.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.03"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.11" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.80"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.12" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.13" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.14" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.75"/></proof>
      </goal>
      <goal name="VC place_kron_gen_c.0.0.0.0.15" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x k)) (kronecker  (bv_to_ket (htpart x k (width_c c)))  (bv_to_ket (tpart x (width_c c + k)))))">
       <goal name="VC place_kron_gen_c.0.0.0.0.15.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_kron_pre_c">
        <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.07"/></proof>
         </goal>
         <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_kron_pre_c">
          <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.10"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.99"/></proof>
          </goal>
          <goal name="VC place_kron_gen_c.0.0.0.0.15.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.22"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_kron_gen_c.0.0.0.0.15.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.09"/></proof>
        </goal>
        <goal name="VC place_kron_gen_c.0.0.0.0.15.0.2" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c (parallel_c c (ids_c ((n - k) - width_c c))))" arg2="(width_c c + ((n - k) - width_c c))">
         <goal name="VC place_kron_gen_c.0.0.0.0.15.0.2.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC place_kron_gen_c.0.0.0.0.15.0.2.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.48"/></proof>
          </goal>
          <goal name="VC place_kron_gen_c.0.0.0.0.15.0.2.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.76"/></proof>
          </goal>
          <goal name="VC place_kron_gen_c.0.0.0.0.15.0.2.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.43"/></proof>
          </goal>
          <goal name="VC place_kron_gen_c.0.0.0.0.15.0.2.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.43"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC place_kron_gen_c.0.0.0.0.15.0.2.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="1.40"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_kron_gen_c.0.0.0.0.15.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(kronecker (bv_to_ket (htpart x k (width_c c)))
     (bv_to_ket (tpart x (width_c c + k))))" arg2="(bv_to_ket (tpart x k))">
        <goal name="VC place_kron_gen_c.0.0.0.0.15.1.0" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.05"/></proof>
        </goal>
        <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
         <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="bv_to_ket_eq">
          <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.48"/></proof>
          </goal>
          <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(i &lt; width_c c)">
            <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.0" expl="true case (apply premises)" proved="true">
            <transf name="rewrite" proved="true" arg1="concat_value_left">
             <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="rewrite" proved="true" arg1="htpart_value_b">
              <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
              <proof prover="2"><result status="valid" time="1.57"/></proof>
              </goal>
              <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.77"/></proof>
              </goal>
              <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.14"/></proof>
              </goal>
              <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.0.0.3" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.74"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.46"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1" expl="false case (apply premises)" proved="true">
            <transf name="rewrite" proved="true" arg1="concat_value_right">
             <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.0" expl="false case (apply premises)" proved="true">
             <transf name="rewrite" proved="true" arg1="tpart_value_b">
              <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
              <transf name="rewrite" proved="true" arg1="tpart_value_b">
               <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
               <proof prover="2"><result status="valid" time="1.59"/></proof>
               </goal>
               <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="0.77"/></proof>
               </goal>
               <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.51"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.47"/></proof>
              </goal>
              <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.47"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_kron_gen_c.0.0.0.0.15.1.1.0.1.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.47"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_kron_gen_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.68"/></proof>
    </goal>
    <goal name="VC place_kron_gen_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.68"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_zero_place_c" expl="VC for place_zero_place_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_zero_place_c.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(n&#39; = width_c (place_c c k n))">
   <goal name="VC place_zero_place_c.0.0" expl="true case (postcondition)" proved="true">
   <transf name="replace" proved="true" arg1="(path_sem_c (place_zero (place_c c k n) n&#39;) (bv_to_ket x))" arg2="(path_sem_c (place_c c k n) (bv_to_ket x))">
    <goal name="VC place_zero_place_c.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="0.92"/></proof>
    </goal>
    <goal name="VC place_zero_place_c.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="1.27"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_zero_place_c.0.1" expl="false case (postcondition)" proved="true">
   <transf name="replace" proved="true" arg1="(path_sem_c (place_zero (place_c c k n) n&#39;) (bv_to_ket x))" arg2="(kronecker
        (path_sem_c (place_c c k n)
         (bv_to_ket (hpart x (width_c (place_c c k n)))))
        (bv_to_ket (tpart x (width_c (place_c c k n)))))">
    <goal name="VC place_zero_place_c.0.1.0" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="place_kron_gen_c">
     <goal name="VC place_zero_place_c.0.1.0.0" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="place_kron_gen_c">
      <goal name="VC place_zero_place_c.0.1.0.0.0" expl="false case (postcondition)" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC place_zero_place_c.0.1.0.0.0.0" expl="VC for place_zero_place_c" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="2.94" steps="438"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.1" expl="false case (postcondition)" proved="true">
        <proof prover="0"><result status="valid" time="1.08"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.2" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.51" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.3" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.49" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.4" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.50" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.5" expl="false case (postcondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
          <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0" expl="false case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(bv_to_ket (hpart (hpart x (width_c (place_c c k n))) (width_c c)))" arg2="(bv_to_ket (hpart x (width_c c)))">
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="bv_to_ket_eq">
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.35"/></proof>
             </goal>
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="hpart_value_b">
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="hpart_value_b">
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="hpart_value_b">
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.77"/></proof>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.48"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.53"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.56"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="bv_to_ket_eq">
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.73"/></proof>
             </goal>
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0" expl="apply premises" proved="true">
              <transf name="case" proved="true" arg1="(i &lt; n - width_c c)">
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0" expl="true case (apply premises)" proved="true">
               <transf name="rewrite" proved="true" arg1="concat_value_left">
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                <transf name="rewrite" proved="true" arg1="tpart_value_b">
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
                 <transf name="rewrite" proved="true" arg1="tpart_value_b">
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                  <transf name="rewrite" proved="true" arg1="hpart_value_b">
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                   <proof prover="2"><result status="valid" time="0.82"/></proof>
                   </goal>
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.57"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.49"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.20"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.53"/></proof>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.51"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.66"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1" expl="false case (apply premises)" proved="true">
               <transf name="rewrite" proved="true" arg1="concat_value_right">
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.0" expl="false case (apply premises)" proved="true">
                <transf name="rewrite" proved="true" arg1="tpart_value_b">
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
                 <transf name="rewrite" proved="true" arg1="tpart_value_b">
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                  <proof prover="2"><result status="valid" time="3.42"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.53"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.72"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.48"/></proof>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.73"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.5.0.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.78"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.6" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.50" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.7" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.51" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.8" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.51" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.9" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.10" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="2.97" steps="438"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.11" expl="false case (postcondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
          <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0" expl="false case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="bv_to_ket_eq">
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.36"/></proof>
            </goal>
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="hpart_value_b">
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="hpart_value_b">
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="hpart_value_b">
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.80"/></proof>
                </goal>
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.36"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.48"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.46"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="kronecker_eq">
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(bv_to_ket (tpart (hpart x (width_c (place_c c k n))) k))" arg2="(bv_to_ket (htpart x k (width_c c)))">
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="bv_to_ket_eq">
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="1.51"/></proof>
              </goal>
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="tpart_value_b">
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="hpart_value_b">
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="htpart_value_b">
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.79"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.79"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.49"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.68"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.67"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="0.77"/></proof>
                </goal>
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.0.1.1.0.2" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.51"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.11.0.0.1.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.47"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.12" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.51" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.13" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.50" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.14" expl="false case (postcondition)" proved="true">
        <proof prover="3"><result status="valid" time="0.50" steps="434"/></proof>
        </goal>
        <goal name="VC place_zero_place_c.0.1.0.0.0.0.15" expl="false case (postcondition)" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0" expl="false case (postcondition)" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
          <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0" expl="false case (postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="bv_to_ket_eq">
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.34"/></proof>
            </goal>
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="hpart_value_b">
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="hpart_value_b">
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="hpart_value_b">
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.79"/></proof>
                </goal>
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.48"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.45"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.46"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
            <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_eq">
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(bv_to_ket (htpart (hpart x (width_c (place_c c k n))) k (width_c c)))" arg2="(bv_to_ket (htpart x k (width_c c)))
">
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="bv_to_ket_eq">
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.35"/></proof>
               </goal>
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="htpart_value_b">
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="htpart_value_b">
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="hpart_value_b">
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.77"/></proof>
                   </goal>
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.52"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.75"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.46"/></proof>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.46"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.75"/></proof>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.43"/></proof>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.0.1.1.0.3" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.47"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
              <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="bv_to_ket_eq">
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.83"/></proof>
               </goal>
               <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="case" proved="true" arg1="(i&lt; n - (width_c c +k))">
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0" expl="true case (apply premises)" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value_left">
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                  <transf name="rewrite" proved="true" arg1="tpart_value_b">
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="hpart_value_b">
                    <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="tpart_value_b">
                     <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                     <proof prover="2"><result status="valid" time="0.91"/></proof>
                     </goal>
                     <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.73"/></proof>
                     </goal>
                     <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.37"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.72"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.72"/></proof>
                   </goal>
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.70"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.91"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1" expl="false case (apply premises)" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value_right">
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.0" expl="false case (apply premises)" proved="true">
                  <transf name="rewrite" proved="true" arg1="tpart_value_b">
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="tpart_value_b">
                    <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                    <proof prover="2"><result status="valid" time="3.43"/></proof>
                    </goal>
                    <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.71"/></proof>
                    </goal>
                    <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.93"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.68"/></proof>
                   </goal>
                   <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.89"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_zero_place_c.0.1.0.0.0.0.15.0.0.1.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="3.60"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_zero_place_c.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.50" steps="430"/></proof>
      </goal>
      <goal name="VC place_zero_place_c.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.47" steps="430"/></proof>
      </goal>
      <goal name="VC place_zero_place_c.0.1.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.46" steps="430"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_zero_place_c.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.47" steps="430"/></proof>
     </goal>
     <goal name="VC place_zero_place_c.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.47" steps="430"/></proof>
     </goal>
     <goal name="VC place_zero_place_c.0.1.0.3" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC place_zero_place_c.0.1.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.59"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_zero_place_c.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="place_zero_kron_c">
     <goal name="VC place_zero_place_c.0.1.1.0" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.99"/></proof>
     </goal>
     <goal name="VC place_zero_place_c.0.1.1.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.96"/></proof>
     </goal>
     <goal name="VC place_zero_place_c.0.1.1.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.55"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_place_c" expl="VC for place_place_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_place_c.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(k = 0)">
   <goal name="VC place_place_c.0.0" expl="true case (postcondition)" proved="true">
   <transf name="replace" proved="true" arg1="(place_c c k n)" arg2="(place_zero c  n)">
    <goal name="VC place_place_c.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="(k + k&#39;)" arg2="k&#39;">
     <goal name="VC place_place_c.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="case" proved="true" arg1="(n= width_c c)">
      <goal name="VC place_place_c.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(place_zero c n)" arg2="c">
       <goal name="VC place_place_c.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.56"/></proof>
       </goal>
       <goal name="VC place_place_c.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="1.26"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_place_c.0.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="place_kron_gen_c">
       <goal name="VC place_place_c.0.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="place_kron_gen_c">
        <goal name="VC place_place_c.0.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC place_place_c.0.0.0.0.1.0.0.0" expl="VC for place_place_c" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.48" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.1" expl="false case (true case. postcondition)" proved="true">
          <proof prover="0"><result status="valid" time="1.03"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.2" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.52" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.3" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.4" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.59" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5" expl="false case (true case. postcondition)" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0" expl="false case (true case. postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="place_zero_kron_c">
            <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0" expl="false case (true case. postcondition)" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0" expl="false case (true case. postcondition)" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_eq">
              <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(hpart (hpart x (width_c (place_zero c n))) (width_c c))" arg2="(hpart x (width_c c))">
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="set_equal_bv">
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.52"/></proof>
                </goal>
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="hpart_value_b">
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="hpart_value_b">
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="hpart_value_b">
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.74"/></proof>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.45"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.47"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.40"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.66"/></proof>
                </goal>
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(width_c (place_zero c n))" arg2="n">
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="case" proved="true" arg1="(i&lt; n - width_c c)">
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="concat_value_left">
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="tpart_value_b">
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                     <transf name="rewrite" proved="true" arg1="tpart_value_b">
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                      <transf name="rewrite" proved="true" arg1="hpart_value_b">
                       <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                       <proof prover="2"><result status="valid" time="0.78"/></proof>
                       </goal>
                       <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.49"/></proof>
                       <transf name="replace" proved="true" arg1="(width_c (place_zero c n))" arg2="n">
                        <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.16"/></proof>
                        <proof prover="2"><result status="valid" time="1.46"/></proof>
                        <proof prover="3"><result status="valid" time="2.91" steps="448"/></proof>
                        </goal>
                        <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                        <proof prover="2"><result status="valid" time="1.50"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.43"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.20"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.50"/></proof>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.53"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.69"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1" expl="false case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="concat_value_right">
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.0" expl="false case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="tpart_value_b">
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.0.0" expl="false case (apply premises)" proved="true">
                     <transf name="rewrite" proved="true" arg1="tpart_value_b">
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                      <proof prover="2"><result status="valid" time="3.49"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.48"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.75"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.47"/></proof>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.74"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.86"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="2"><result status="valid" time="1.46"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.21"/></proof>
            </goal>
            <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.53"/></proof>
            </goal>
            <goal name="VC place_place_c.0.0.0.0.1.0.0.0.5.0.3" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.82"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.6" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.51" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.7" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.49" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.8" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.47" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.9" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.46" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.10" expl="false case (true case. postcondition)" proved="true">
          <proof prover="0"><result status="valid" time="1.01"/></proof>
          <proof prover="3"><result status="valid" time="0.50" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11" expl="false case (true case. postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.70"/></proof>
           </goal>
           <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="place_zero_kron_c">
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(hpart (tpart x k&#39;) (width_c c))" arg2="(htpart x k&#39; (width_c c))">
              <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(tpart (tpart x k&#39;) (width_c c))" arg2="(tpart x (width_c c + k&#39;))">
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="set_equal_bv">
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.51"/></proof>
                </goal>
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="tpart_value_b">
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="tpart_value_b">
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="tpart_value_b">
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.80"/></proof>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.50"/></proof>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.65"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.74"/></proof>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.64"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.47"/></proof>
                  </goal>
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.46"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_bv">
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.36"/></proof>
               </goal>
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="hpart_value_b">
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="tpart_value_b">
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="htpart_value_b">
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.80"/></proof>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.79"/></proof>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.49"/></proof>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0.0.3" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.50"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.77"/></proof>
                  </goal>
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.54"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.46"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.15"/></proof>
             </goal>
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.47"/></proof>
             </goal>
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.11.1.0.3" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.80"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.12" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.49" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.13" expl="false case (true case. postcondition)" proved="true">
          <proof prover="3"><result status="valid" time="0.45" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.14" expl="false case (true case. postcondition)" proved="true">
          <proof prover="0"><result status="valid" time="0.96"/></proof>
          <proof prover="3"><result status="valid" time="0.48" steps="438"/></proof>
          </goal>
          <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15" expl="false case (true case. postcondition)" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_eq">
           <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="place_zero_kron_c">
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
              <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_eq">
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(hpart (htpart x k&#39; (width_c (place_zero c n))) (width_c c))" arg2="(htpart x k&#39; (width_c c))">
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.90"/></proof>
                </goal>
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="set_equal_bv">
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.72"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="hpart_value_b">
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="htpart_value_b">
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="htpart_value_b">
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.93"/></proof>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.93"/></proof>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.46"/></proof>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.0.3" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.72"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.88"/></proof>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.68"/></proof>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.0.3" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.72"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.70"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
                <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.88"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                  <transf name="case" proved="true" arg1="(i &lt; n-width_c c)">
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0" expl="true case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="concat_value_left">
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="tpart_value_b">
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
                     <transf name="rewrite" proved="true" arg1="htpart_value_b">
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                      <transf name="rewrite" proved="true" arg1="tpart_value_b">
                       <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                       <proof prover="2"><result status="valid" time="0.82"/></proof>
                       </goal>
                       <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.56"/></proof>
                       </goal>
                       <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.47"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.91"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.49"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
                      <proof prover="0"><result status="valid" time="1.07"/></proof>
                      <proof prover="2"><result status="valid" time="1.47"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.45"/></proof>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.43"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.65"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1" expl="false case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="concat_value_right">
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.0" expl="false case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="tpart_value_b">
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
                     <transf name="rewrite" proved="true" arg1="tpart_value_b">
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                      <proof prover="2"><result status="valid" time="1.81"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.44"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.65"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.64"/></proof>
                     </goal>
                     <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.82"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.0.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.04"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.17"/></proof>
             </goal>
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.2" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.54"/></proof>
             </goal>
             <goal name="VC place_place_c.0.0.0.0.1.0.0.0.15.1.0.3" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.74"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_place_c.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.02"/></proof>
        </goal>
        <goal name="VC place_place_c.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.04"/></proof>
        </goal>
        <goal name="VC place_place_c.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.04"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_place_c.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.03"/></proof>
       </goal>
       <goal name="VC place_place_c.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.04"/></proof>
       </goal>
       <goal name="VC place_place_c.0.0.0.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_place_c.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.55"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_place_c.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="1.27"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_place_c.0.1" expl="false case (postcondition)" proved="true">
   <transf name="case" proved="true" arg1="(k&#39; = 0)">
    <goal name="VC place_place_c.0.1.0" expl="false case (true case. postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="(k + k&#39;)" arg2="k">
     <goal name="VC place_place_c.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
     <transf name="replace" proved="true" arg1="(place_c (place_c c k n) k&#39; n&#39;)" arg2="(place_zero (place_c c k n) n&#39;)">
      <goal name="VC place_place_c.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="place_zero_place_c">
       <goal name="VC place_place_c.0.1.0.0.0.0" expl="false case (true case. postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.57"/></proof>
       </goal>
       <goal name="VC place_place_c.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.57"/></proof>
       </goal>
       <goal name="VC place_place_c.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.55"/></proof>
       </goal>
       <goal name="VC place_place_c.0.1.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.97"/></proof>
       </goal>
       <goal name="VC place_place_c.0.1.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.55"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_place_c.0.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC place_place_c.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="place_c_def1">
        <goal name="VC place_place_c.0.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="0.68"/></proof>
        </goal>
        <goal name="VC place_place_c.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.71"/></proof>
        </goal>
        <goal name="VC place_place_c.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.42"/></proof>
        </goal>
        <goal name="VC place_place_c.0.1.0.0.1.0.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.72"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_place_c.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.44" steps="434"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_place_c.0.1.1" expl="false case (postcondition)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC place_place_c.0.1.1.0" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="place_c_def">
      <goal name="VC place_place_c.0.1.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x k&#39; )) (bv_to_ket (tpart x k&#39; )))">
       <goal name="VC place_place_c.0.1.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_kron_pre_c">
        <goal name="VC place_place_c.0.1.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="rewrite" proved="true" arg1="place_zero_place_c">
         <goal name="VC place_place_c.0.1.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <transf name="replace" proved="true" arg1="(kronecker (bv_to_ket (hpart x k&#39;)) (bv_to_ket (tpart x k&#39;)))" arg2="(bv_to_ket x)">
          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
          <transf name="instantiate" proved="true" arg1="place_kron_gen_c" arg2="c,(k+k&#39;),n&#39;,x">
           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="Hinst">
            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
            <transf name="replace" proved="true" arg1="(path_sem_c (ids_c k&#39;) (bv_to_ket (hpart x k&#39;)))" arg2="(bv_to_ket (hpart x k&#39;))">
             <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
             <transf name="instantiate" proved="true" arg1="place_kron_gen_c" arg2="c,k,(n&#39;-k&#39;),( (tpart x k&#39;))">
              <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
               <transf name="eliminate_if" proved="true" >
                <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="VC for place_place_c" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.56" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.54" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.54" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.55" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.55" steps="434"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.55" steps="436"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.9" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.55" steps="436"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10" expl="false case (postcondition)" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0" expl="false case (postcondition)" proved="true">
                  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
                   <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0" expl="false case (postcondition)" proved="true">
                   <transf name="apply" proved="true" arg1="kronecker_eq">
                    <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
                     <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.37"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="case" proved="true" arg1="(i &lt;k&#39;)">
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.0" expl="true case (apply premises)" proved="true">
                        <transf name="rewrite" proved="true" arg1="concat_value_left">
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                         <proof prover="2"><result status="valid" time="1.68"/></proof>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.39"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
                        <transf name="rewrite" proved="true" arg1="concat_value_right">
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0" expl="false case (apply premises)" proved="true">
                         <transf name="rewrite" proved="true" arg1="hpart_value_b">
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
                          <transf name="rewrite" proved="true" arg1="hpart_value_b">
                           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                           <transf name="rewrite" proved="true" arg1="tpart_value_b">
                            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0.0.0.0" expl="false case (apply premises)" proved="true">
                            <proof prover="2"><result status="valid" time="1.71"/></proof>
                            </goal>
                            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.81"/></proof>
                            </goal>
                            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="1.51"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.51"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.54"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.53"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(tpart (tpart x k&#39;) k)" arg2="(tpart x (k+k&#39;))">
                     <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                     </transf>
                     </goal>
                     <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1" expl="equality hypothesis" proved="true">
                     <transf name="apply" proved="true" arg1="set_equal_bv">
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="1.24"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="tpart_value_b">
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="tpart_value_b">
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="tpart_value_b">
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.80"/></proof>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.21"/></proof>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.53"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.77"/></proof>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.0.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.54"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.76"/></proof>
                        </goal>
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.10.0.0.1.1.1.0.2" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.45"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.11" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.56" steps="438"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.12" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.52" steps="436"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.13" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.49" steps="436"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.14" expl="false case (postcondition)" proved="true">
                 <proof prover="3"><result status="valid" time="0.50" steps="438"/></proof>
                 </goal>
                 <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15" expl="false case (postcondition)" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0" expl="false case (postcondition)" proved="true">
                  <transf name="rewrite" proved="true" arg1="kronecker_assoc_use">
                   <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0" expl="false case (postcondition)" proved="true">
                   <transf name="apply" proved="true" arg1="kronecker_eq">
                    <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
                     <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.64"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="case" proved="true" arg1="(i &lt;k&#39;)">
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.0" expl="true case (apply premises)" proved="true">
                        <transf name="rewrite" proved="true" arg1="concat_value_left">
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                         <proof prover="2"><result status="valid" time="2.28"/></proof>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.65"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
                        <transf name="rewrite" proved="true" arg1="concat_value_right">
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0" expl="false case (apply premises)" proved="true">
                         <transf name="rewrite" proved="true" arg1="hpart_value_b">
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
                          <transf name="rewrite" proved="true" arg1="hpart_value_b">
                           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                           <transf name="rewrite" proved="true" arg1="tpart_value_b">
                            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0.0.0.0" expl="false case (apply premises)" proved="true">
                            <proof prover="2"><result status="valid" time="1.81"/></proof>
                            </goal>
                            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.80"/></proof>
                            </goal>
                            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="1.55"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.65"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.70"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.63"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(tpart (tpart x k&#39;) (width_c c + k))" arg2="(tpart x (width_c c + (k + k&#39;)))">
                     <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(htpart (tpart x k&#39;) k (width_c c))" arg2="(htpart x (k + k&#39;) (width_c c))">
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                      </transf>
                      </goal>
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1" expl="equality hypothesis" proved="true">
                      <transf name="apply" proved="true" arg1="set_equal_bv">
                       <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.48"/></proof>
                       </goal>
                       <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="htpart_value_b">
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="htpart_value_b">
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="tpart_value_b">
                           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.72"/></proof>
                           </goal>
                           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.77"/></proof>
                           </goal>
                           <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.71"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.23"/></proof>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.66"/></proof>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.0.3" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.65"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.75"/></proof>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.63"/></proof>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.0.1.1.0.3" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.61"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1" expl="equality hypothesis" proved="true">
                     <transf name="apply" proved="true" arg1="set_equal_bv">
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.51"/></proof>
                      </goal>
                      <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="tpart_value_b">
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="tpart_value_b">
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="tpart_value_b">
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.78"/></proof>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.65"/></proof>
                          </goal>
                          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.63"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.76"/></proof>
                         </goal>
                         <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.0.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.62"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.61"/></proof>
                        </goal>
                        <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.15.0.0.1.1.1.0.2" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.53"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="0.69"/></proof>
               </goal>
               <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.09"/></proof>
               </goal>
               <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.45"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="1.61"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.14"/></proof>
            </goal>
            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.14"/></proof>
            </goal>
            <goal name="VC place_place_c.0.1.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.70"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_place_c.0.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="1.18"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC place_place_c.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.73"/></proof>
         </goal>
         <goal name="VC place_place_c.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.72"/></proof>
         </goal>
         <goal name="VC place_place_c.0.1.1.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.75"/></proof>
         </goal>
         <goal name="VC place_place_c.0.1.1.0.0.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.46"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_place_c.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.43"/></proof>
        </goal>
        <goal name="VC place_place_c.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.56"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_place_c.0.1.1.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.49"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_place_c.0.1.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.01"/></proof>
      </goal>
      <goal name="VC place_place_c.0.1.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.36"/></proof>
      </goal>
      <goal name="VC place_place_c.0.1.1.0.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.98"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_get_ket_c" expl="VC for place_get_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_get_ket_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pat_sem_apply_basis_value">
   <goal name="VC place_get_ket_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pat_sem_apply_basis_value">
    <goal name="VC place_get_ket_c.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(range_c (place_c c k n))" arg2="(range_c c)">
     <goal name="VC place_get_ket_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mult_eq_t">
      <goal name="VC place_get_ket_c.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="1.11" steps="432"/></proof>
      </goal>
      <goal name="VC place_get_ket_c.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="sum_eq">
       <goal name="VC place_get_ket_c.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="mult_eq_t">
          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="place_c_spec1">
            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(ang_ind_c c
     (getbv (make_bv (fun (i:int) -&gt; getbv x1 @ (i + k)) (width_c c)))
     (getbv x))" arg2="(ang_ind_c c (fun (j:int) -&gt; getbv x1 @ (j + k)) (getbv x))">
             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
               <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant">
                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="assert_make_bv_b">
                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.40"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.21"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="4.99"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.77" steps="402"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.50" steps="434"/></proof>
            </goal>
            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.58" steps="434"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(int_to_bv (bv_to_int y) (width_c (place_c c k n)))" arg2="y">
           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(int_to_bv
     (bv_to_int (make_bv (fun (i:int) -&gt; getbv y @ (i + k)) (width_c c)))
     (width_c c))" arg2="(make_bv (fun (i:int) -&gt; getbv y @ (i + k)) (width_c c))">
            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="indic_spec">
             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="indic_spec">
              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="eliminate_if" proved="true" >
               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="0.59" steps="438"/></proof>
                </goal>
                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="get_equal_bv" arg2="( make_bv
  (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x1) (getbv x) y3)
  (width_c (place_c c k n))),y">
                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="destruct" proved="true" arg1="Hinst">
                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.0" expl="destruct premise" proved="true">
                   <transf name="apply" proved="true" arg1="H1">
                   </transf>
                   </goal>
                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                   <transf name="assert" proved="true" arg1="(make_bv
      (fun (y3:int) -&gt;
        basis_ket_c c
        (getbv (make_bv (fun (i:int) -&gt; getbv x1 @ (i + k)) (width_c c)))
        (getbv x) y3)
      (width_c c) = make_bv (fun (i:int) -&gt; getbv y @ (i + k)) (width_c c))">
                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
                    <transf name="apply" proved="true" arg1="set_equal_bv_make_">
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                     <proof prover="3"><result status="valid" time="3.14" steps="441"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0" expl="apply premises" proved="true">
                      <transf name="eliminate_definition" proved="true" >
                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.66"/></proof>
                          </goal>
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.57"/></proof>
                          </goal>
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                          <proof prover="0"><result status="valid" time="4.12"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.59"/></proof>
                          </goal>
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.62"/></proof>
                          </goal>
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.1.2" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.1.2.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.77"/></proof>
                           </goal>
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.1.0.0.0.1.2.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.44"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0" expl="apply premises" proved="true">
                       <transf name="instantiate" proved="true" arg1="Hinst" arg2="(i+k)">
                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="assert_make_bv_b" arg2="in" arg3="Hinst">
                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="instantiate" proved="true" arg1="place_c_spec10" arg2="c,k,n">
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <transf name="destruct" proved="true" arg1="Hinst1">
                            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.0" expl="destruct premise" proved="true">
                            <proof prover="3"><result status="valid" time="0.55" steps="445"/></proof>
                            </goal>
                            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="Hinst" arg2="in" arg3="Hinst1">
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                             <transf name="replace" proved="true" arg1="(basis_ket_c c
  (getbv (make_bv (fun (i1:int) -&gt; getbv x1 @ (i1 + k)) (width_c c)))
  (getbv x) i)" arg2="(basis_ket_c c (fun (j:int) -&gt; getbv x1 @ (j + k)) (getbv x) ((i + k) - k))">
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                              <transf name="apply" proved="true" arg1="Hinst1">
                              </transf>
                              </goal>
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                              <transf name="replace" proved="true" arg1="((i + k) - k)" arg2="i">
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
                               <transf name="eliminate_definition" proved="true" >
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
                                <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0" expl="equality hypothesis" proved="true">
                                 <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
                                  <transf name="apply" proved="true" arg1="pps&#39;invariant1">
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                                   <transf name="compute_specified" proved="true" >
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                                    <transf name="split_vc" proved="true" >
                                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                                      <transf name="compute_specified" proved="true" >
                                      </transf>
                                      </goal>
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                                      <transf name="compute_specified" proved="true" >
                                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                                       <transf name="split_vc" proved="true" >
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                                        <proof prover="2"><result status="valid" time="1.52"/></proof>
                                        </goal>
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                                        <proof prover="2"><result status="valid" time="1.50"/></proof>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                                      <proof prover="0"><result status="valid" time="4.75"/></proof>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                   </transf>
                                   </goal>
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                                   <proof prover="3"><result status="valid" time="0.72" steps="415"/></proof>
                                   </goal>
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                                   <transf name="split_vc" proved="true" >
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.2.0" proved="true">
                                    <proof prover="2"><result status="valid" time="0.75"/></proof>
                                    </goal>
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.0.0.0.0.2.1" proved="true">
                                    <proof prover="2"><result status="valid" time="1.43"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
                               <proof prover="3"><result status="valid" time="0.52" steps="447"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                             <proof prover="3"><result status="valid" time="0.56" steps="447"/></proof>
                             </goal>
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                             <proof prover="3"><result status="valid" time="0.58" steps="447"/></proof>
                             </goal>
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
                             <proof prover="3"><result status="valid" time="0.55" steps="447"/></proof>
                             </goal>
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.0.0.0.1.4" expl="rewrite premises" proved="true">
                             <proof prover="3"><result status="valid" time="0.52" steps="447"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                           <transf name="eliminate_definition" proved="true" >
                            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="1.55"/></proof>
                              </goal>
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                              <proof prover="0"><result status="valid" time="5.36"/></proof>
                              </goal>
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                              <proof prover="0"><result status="valid" time="4.74"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                           <transf name="eliminate_definition" proved="true" >
                            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="1.57"/></proof>
                              </goal>
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                              <proof prover="0"><result status="valid" time="5.44"/></proof>
                              </goal>
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                              <proof prover="0"><result status="valid" time="4.66"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                         <proof prover="0"><result status="valid" time="1.54"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                    <transf name="assert" proved="true" arg1="(forall a:bitvec. (not a = a) -&gt; c_one = c_zero)">
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.1.0" expl="asserted formula" proved="true">
                     <proof prover="3"><result status="valid" time="0.56" steps="441"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.1.1" expl="apply premises" proved="true">
                     <transf name="instantiate" proved="true" arg1="h" arg2="(make_bv (fun (i:int) -&gt; getbv y @ (i + k)) (width_c c))">
                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.1.1.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="Hinst">
                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="h1" arg2="in" arg3="H">
                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.1.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="H">
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="get_equal_bv" arg2="(make_bv
  (fun (y3:int) -&gt;
    basis_ket_c c
    (getbv (make_bv (fun (i:int) -&gt; getbv x1 @ (i + k)) (width_c c)))
    (getbv x) y3)
  (width_c c) ),(make_bv (fun (i:int) -&gt; getbv y @ (i + k)) (width_c c))">
                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                 <transf name="destruct" proved="true" arg1="Hinst">
                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.0" expl="destruct premise" proved="true">
                  <transf name="apply" proved="true" arg1="H">
                  </transf>
                  </goal>
                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0" expl="apply premises" proved="true">
                   <transf name="assert" proved="true" arg1="(forall a:bitvec. (not a = a) -&gt;  c_zero = c_one)">
                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.0" expl="asserted formula" proved="true">
                    <proof prover="3"><result status="valid" time="0.55" steps="440"/></proof>
                    </goal>
                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1" expl="apply premises" proved="true">
                    <transf name="instantiate" proved="true" arg1="h" arg2="y">
                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="Hinst">
                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="assert" proved="true" arg1="((make_bv
      (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x1) (getbv x) y3)
      (width_c (place_c c k n)) = y))">
                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0" expl="asserted formula" proved="true">
                       <transf name="replace" proved="true" arg1="y" arg2="(make_bv (getbv y) n)">
                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0" expl="asserted formula" proved="true">
                        <transf name="replace" proved="true" arg1="(width_c (place_c c k n))" arg2="n">
                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
                         <transf name="eliminate_definition" proved="true" >
                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                          <transf name="apply" proved="true" arg1="set_equal_bv_make_">
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="0"><result status="valid" time="5.12"/></proof>
                           </goal>
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                           <transf name="compute_specified" proved="true" >
                            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                             <transf name="split_vc" proved="true" >
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                              <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.56"/></proof>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                               <proof prover="0"><result status="valid" time="4.61"/></proof>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
                               <proof prover="0"><result status="valid" time="4.59"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                              <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.67"/></proof>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                               <proof prover="0"><result status="valid" time="5.24"/></proof>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.1.0.0.1.2" expl="apply premises" proved="true">
                               <proof prover="0"><result status="valid" time="4.55"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                            <transf name="compute_specified" proved="true" >
                             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                             <transf name="case" proved="true" arg1="(k&lt;=i &lt; k +width_c c)">
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0" expl="true case (apply premises)" proved="true">
                              <transf name="rewrite" proved="true" arg1="place_c_spec10">
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0" expl="true case (apply premises)" proved="true">
                               <transf name="instantiate" proved="true" arg1="Hinst1" arg2="(i-k)">
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                                <transf name="replace" proved="true" arg1="(getbv
   (make_bv
    (fun (y3:int) -&gt;
      basis_ket_c c
      (getbv (make_bv (fun (i1:int) -&gt; getbv x1 @ (i1 + k)) (width_c c)))
      (getbv x) y3)
    (width_c c))
   @ (i - k))" arg2="(basis_ket_c c (fun (j:int) -&gt; getbv x1 @ (j + k)) (getbv x) (i - k))" arg3="in" arg4="Hinst">
                                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                                 <transf name="rewrite" proved="true" arg1="Hinst">
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                                   <proof prover="0"><result status="valid" time="4.84"/></proof>
                                   </goal>
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                                   <transf name="compute_specified" proved="true" >
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                                    <proof prover="0"><result status="valid" time="4.84"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                                   <proof prover="3"><result status="valid" time="0.73" steps="416"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                                  <transf name="split_vc" proved="true" >
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0" proved="true">
                                   <proof prover="3"><result status="valid" time="0.80" steps="416"/></proof>
                                   </goal>
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1" proved="true">
                                   <transf name="rewrite" proved="true" arg1="make_bv_length">
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0" proved="true">
                                    <proof prover="3"><result status="valid" time="0.72" steps="416"/></proof>
                                    </goal>
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                                    <transf name="compute_specified" proved="true" >
                                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                                     <transf name="split_vc" proved="true" >
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.0" expl="rewrite premises" proved="true">
                                      <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.0.0" expl="rewrite premises" proved="true">
                                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                                        <proof prover="2"><result status="valid" time="1.57"/></proof>
                                        </goal>
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                                        <proof prover="2"><result status="valid" time="1.58"/></proof>
                                        </goal>
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.0.0.2" expl="apply premises" proved="true">
                                        <proof prover="0"><result status="valid" time="5.19"/></proof>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.1" expl="rewrite premises" proved="true">
                                      <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.1.0" expl="rewrite premises" proved="true">
                                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.1.0.0" expl="apply premises" proved="true">
                                        <transf name="split_vc" proved="true" >
                                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.1.0.0.0" expl="apply premises" proved="true">
                                         <proof prover="0"><result status="valid" time="5.12"/></proof>
                                         </goal>
                                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.1.0.0.1" expl="apply premises" proved="true">
                                         <proof prover="0"><result status="valid" time="5.37"/></proof>
                                         </goal>
                                        </transf>
                                        </goal>
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.1.0.1" expl="apply premises" proved="true">
                                        <proof prover="2"><result status="valid" time="1.86"/></proof>
                                        </goal>
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1.0.1.0.2" expl="apply premises" proved="true">
                                        <proof prover="0"><result status="valid" time="4.81"/></proof>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.2" expl="rewrite premises" proved="true">
                                    <proof prover="3"><result status="valid" time="0.72" steps="416"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                                  <transf name="compute_specified" proved="true" >
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
                                   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
                                    <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
                                     <transf name="apply" proved="true" arg1="pps&#39;invariant1">
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                                      <transf name="split_vc" proved="true" >
                                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                                       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                                        <transf name="compute_specified" proved="true" >
                                        </transf>
                                        </goal>
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                                        <transf name="compute_specified" proved="true" >
                                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                                         <transf name="split_vc" proved="true" >
                                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                                          <proof prover="0"><result status="valid" time="4.83"/></proof>
                                          </goal>
                                          <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                                          <proof prover="0"><result status="valid" time="4.76"/></proof>
                                          </goal>
                                         </transf>
                                         </goal>
                                        </transf>
                                        </goal>
                                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                                        <proof prover="0"><result status="valid" time="4.66"/></proof>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                                      <proof prover="3"><result status="valid" time="0.84" steps="416"/></proof>
                                      </goal>
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                                      <proof prover="0"><result status="valid" time="4.53"/></proof>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                                  <transf name="compute_specified" proved="true" >
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                                   <transf name="split_vc" proved="true" >
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                                    <transf name="split_all_full" proved="true" >
                                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.0.0" expl="rewrite premises" proved="true">
                                     <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.0.0.0" expl="rewrite premises" proved="true">
                                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                                       <proof prover="2"><result status="valid" time="2.00"/></proof>
                                       </goal>
                                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                                       <proof prover="2"><result status="valid" time="1.84"/></proof>
                                       </goal>
                                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.0.0.0.2" expl="apply premises" proved="true">
                                       <proof prover="2"><result status="valid" time="1.90"/></proof>
                                       </goal>
                                      </transf>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                    <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                                    <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                     <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.1.0.0" expl="apply premises" proved="true">
                                      <proof prover="2"><result status="valid" time="2.18"/></proof>
                                      </goal>
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.1.0.1" expl="apply premises" proved="true">
                                      <proof prover="2"><result status="valid" time="2.13"/></proof>
                                      </goal>
                                      <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.1.0.1.0.2" expl="apply premises" proved="true">
                                      <proof prover="0"><result status="valid" time="4.84"/></proof>
                                      </goal>
                                     </transf>
                                     </goal>
                                    </transf>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                                  <proof prover="3"><result status="valid" time="0.72" steps="416"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                               <proof prover="3"><result status="valid" time="0.98" steps="416"/></proof>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                               <proof prover="3"><result status="valid" time="0.71" steps="416"/></proof>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.3" expl="rewrite premises" proved="true">
                               <proof prover="3"><result status="valid" time="0.70" steps="416"/></proof>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.0.4" expl="rewrite premises" proved="true">
                               <proof prover="3"><result status="valid" time="0.75" steps="416"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1" expl="false case (apply premises)" proved="true">
                              <transf name="case" proved="true" arg1="(i&lt;k)">
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0" expl="false case (true case. apply premises)" proved="true">
                               <transf name="rewrite" proved="true" arg1="place_c_spec9">
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.0" expl="false case (true case. apply premises)" proved="true">
                                <transf name="replace" proved="true" arg1="(getbv x1 @ i)" arg2="(getbv (hpart x1 k) @ i)">
                                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.0.0" expl="false case (true case. apply premises)" proved="true">
                                 <transf name="replace" proved="true" arg1="(getbv x1 @ i)" arg2="(getbv (hpart y k) @ i)">
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.0.0.0" expl="false case (true case. apply premises)" proved="true">
                                  <transf name="replace" proved="true" arg1="(getbv y @ i)" arg2="(getbv (hpart y k) @ i)">
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.0.0.0.0" expl="false case (true case. apply premises)" proved="true">
                                   <proof prover="3"><result status="valid" time="0.69" steps="414"/></proof>
                                   </goal>
                                   <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                                   <proof prover="0"><result status="valid" time="4.45"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                                  <proof prover="2"><result status="valid" time="1.67"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                                 <proof prover="0"><result status="valid" time="4.57"/></proof>
                                 </goal>
                                </transf>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.68" steps="414"/></proof>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.2" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.78" steps="414"/></proof>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.3" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.77" steps="414"/></proof>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.0.4" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.73" steps="414"/></proof>
                                </goal>
                               </transf>
                               </goal>
                               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1" expl="false case (apply premises)" proved="true">
                               <transf name="rewrite" proved="true" arg1="place_c_spec8">
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1.0" expl="false case (apply premises)" proved="true">
                                <transf name="replace" proved="true" arg1="(getbv x1 @ i)" arg2="(getbv (tpart x1 (k+width_c c)) @ (i - k - width_c c))">
                                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1.0.0" expl="false case (apply premises)" proved="true">
                                 <proof prover="0"><result status="valid" time="5.38"/></proof>
                                 </goal>
                                 <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
                                 <proof prover="0"><result status="valid" time="4.55"/></proof>
                                 </goal>
                                </transf>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1.1" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.78" steps="414"/></proof>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1.2" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.79" steps="414"/></proof>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1.3" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.76" steps="414"/></proof>
                                </goal>
                                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.0.0.2.0.0.1.1.4" expl="rewrite premises" proved="true">
                                <proof prover="3"><result status="valid" time="0.77" steps="414"/></proof>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                         <proof prover="3"><result status="valid" time="3.26" steps="442"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                        <proof prover="3"><result status="valid" time="3.26" steps="442"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.2.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.51" steps="440"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="int_to_bv_to_int_">
             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="3.00" steps="436"/></proof>
             </goal>
             <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.52" steps="434"/></proof>
              </goal>
              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.1.1.1" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.1.1.1.0" expl="rewrite premises" proved="true">
               <proof prover="3"><result status="valid" time="3.05" steps="439"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.0.1.1.2" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="2.85" steps="436"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_get_ket_c.0.0.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.09"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_get_ket_c.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="3.04" steps="434"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_get_ket_c.0.0.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="make_bv_length">
     <goal name="VC place_get_ket_c.0.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.52" steps="432"/></proof>
     </goal>
     <goal name="VC place_get_ket_c.0.0.1.1" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC place_get_ket_c.0.0.1.1.0" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="2.89" steps="437"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_get_ket_c.0.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.34"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC place_get_ket_c.0.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC place_get_ket_c.0.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.36"/></proof>
     </goal>
     <goal name="VC place_get_ket_c.0.0.2.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="power_no_">
      <goal name="VC place_get_ket_c.0.0.2.1.0" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(power 2 (width_c c))" arg2="(power 2 (length (make_bv (fun (i:int) -&gt; getbv y @ (i + k)) (width_c c))))">
       <goal name="VC place_get_ket_c.0.0.2.1.0.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="bv_to_int_bound">
        <goal name="VC place_get_ket_c.0.0.2.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC place_get_ket_c.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="2.96" steps="434"/></proof>
         </goal>
         <goal name="VC place_get_ket_c.0.0.2.1.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC place_get_ket_c.0.0.2.1.0.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="3.11" steps="437"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC place_get_ket_c.0.0.2.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.08" steps="434"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC place_get_ket_c.0.0.2.1.0.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC place_get_ket_c.0.0.2.1.0.1.0" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="0.60" steps="432"/></proof>
        </goal>
        <goal name="VC place_get_ket_c.0.0.2.1.0.1.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC place_get_ket_c.0.0.2.1.0.1.1.0" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="2.99" steps="437"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC place_get_ket_c.0.0.2.1.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="2.96" steps="434"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_get_ket_c.0.0.2.1.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.14" steps="434"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_get_ket_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="3.03" steps="434"/></proof>
   </goal>
   <goal name="VC place_get_ket_c.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC place_get_ket_c.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.17" steps="434"/></proof>
    </goal>
    <goal name="VC place_get_ket_c.0.2.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="power_no_">
     <goal name="VC place_get_ket_c.0.2.1.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(width_c (place_c c k n))" arg2="(length y)">
      <goal name="VC place_get_ket_c.0.2.1.0.0" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.78" steps="434"/></proof>
      </goal>
      <goal name="VC place_get_ket_c.0.2.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="3.08" steps="434"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_get_ket_c.0.2.1.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="3.09" steps="434"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_get_ket_hpart_null_c" expl="VC for place_get_ket_hpart_null_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_get_ket_hpart_null_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pat_sem_apply_basis_value">
   <goal name="VC place_get_ket_hpart_null_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mult_zero_t">
    <goal name="VC place_get_ket_hpart_null_c.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="sum_null_">
     <goal name="VC place_get_ket_hpart_null_c.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="mult_zero_t">
        <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(forall i. 0&lt;=i &lt; k -&gt; getbv x i = getbv y i)">
         <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="assert" proved="true" arg1="(hpart x k = hpart y k)">
          <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.09"/></proof>
           </goal>
           <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="hpart_value">
             <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="hpart_value">
              <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="3.78" steps="440"/></proof>
              </goal>
              <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="0.56" steps="436"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.63" steps="436"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
          <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
         <transf name="assert" proved="true" arg1="(exists i. 0&lt;=i &lt; k /\ getbv x i &lt;&gt; getbv y i)">
          <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="4.27" steps="440"/></proof>
          </goal>
          <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(int_to_bv (bv_to_int y) (width_c (place_c c k n)))" arg2="y">
           <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0" expl="false case (apply premises)" proved="true">
           <transf name="assert" proved="true" arg1="((make_bv
   (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x) (getbv e) y3)
   (width_c (place_c c k n))) &lt;&gt; y)">
            <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
            <transf name="destruct" proved="true" arg1="h1">
             <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(getbv (make_bv
      (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x) (getbv e) y3)
      (width_c (place_c c k n)))i &lt;&gt; getbv y i)">
              <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
               <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="eliminate_definition" proved="true" >
                  <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="rewrite" proved="true" arg1="place_c_spec2">
                   <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="3"><result status="valid" time="0.77" steps="414"/></proof>
                   </goal>
                   <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="3"><result status="valid" time="1.26" steps="414"/></proof>
                   </goal>
                   <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="3"><result status="valid" time="1.20" steps="414"/></proof>
                   </goal>
                   <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                   <proof prover="0"><result status="valid" time="5.64"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="eliminate_definition" proved="true" >
                   <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                    <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="5.68"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.82"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.47"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="eliminate_definition" proved="true" >
                   <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                    <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="5.01"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.59"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.50"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.15"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.1" expl="asserted formula" proved="true">
              <proof prover="3"><result status="valid" time="0.56" steps="448"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.0.1" expl="false case (apply premises)" proved="true">
            <proof prover="3"><result status="valid" time="4.05" steps="452"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(width_c (place_c c k n))" arg2="(length y)">
            <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.1.0" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="int_to_bv_to_int">
             <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.60"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_get_ket_hpart_null_c.0.0.0.0.0.0.0.1.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="3.08" steps="450"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_get_ket_hpart_null_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="3.62" steps="432"/></proof>
   </goal>
   <goal name="VC place_get_ket_hpart_null_c.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC place_get_ket_hpart_null_c.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.53" steps="432"/></proof>
    </goal>
    <goal name="VC place_get_ket_hpart_null_c.0.2.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(width_c (place_c c k n))" arg2="(length y)">
     <goal name="VC place_get_ket_hpart_null_c.0.2.1.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="power_no_">
      <goal name="VC place_get_ket_hpart_null_c.0.2.1.0.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="bv_to_int_bound">
       <goal name="VC place_get_ket_hpart_null_c.0.2.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.01"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_get_ket_hpart_null_c.0.2.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.36"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_get_ket_hpart_null_c.0.2.1.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.25"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_get_ket_tpart_null_c" expl="VC for place_get_ket_tpart_null_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_get_ket_tpart_null_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pat_sem_apply_basis_value">
   <goal name="VC place_get_ket_tpart_null_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="mult_zero_t">
    <goal name="VC place_get_ket_tpart_null_c.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="sum_null_">
     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="mult_zero_t">
        <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(forall i. k + width_c c &lt;=i  -&gt; getbv x i = getbv y i)
">
         <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="assert" proved="true" arg1="( tpart x (k + width_c c) = tpart y (k + width_c c))">
          <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.23"/></proof>
           </goal>
           <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="tpart_value">
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="tpart_value">
              <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.33"/></proof>
              </goal>
              <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="3.85" steps="438"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="3.95" steps="438"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
          <transf name="assert" proved="true" arg1="(exists i. i &lt;= k + width_c c /\ getbv x i &lt;&gt; getbv y i)
">
           <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <proof prover="3"><result status="valid" time="0.69" steps="432"/></proof>
           </goal>
           <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1" expl="true case (apply premises)" proved="true">
           <transf name="replace" proved="true" arg1="(int_to_bv (bv_to_int y) (width_c (place_c c k n)))" arg2="y">
            <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0" expl="true case (apply premises)" proved="true">
            <transf name="assert" proved="true" arg1="((make_bv
   (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x) (getbv e) y3)
   (width_c (place_c c k n))) &lt;&gt; y)">
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
             <transf name="destruct" proved="true" arg1="h1">
              <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
              <transf name="assert" proved="true" arg1="(getbv (make_bv
      (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x) (getbv e) y3)
      (width_c (place_c c k n)))i &lt;&gt; getbv y i)">
               <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="eliminate_definition" proved="true" >
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="rewrite" proved="true" arg1="place_c_spec2">
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                    <proof prover="3"><result status="valid" time="0.76" steps="400"/></proof>
                    </goal>
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.76" steps="400"/></proof>
                    </goal>
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.76" steps="400"/></proof>
                    </goal>
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.75" steps="400"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                   <transf name="eliminate_definition" proved="true" >
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.91" steps="400"/></proof>
                      </goal>
                      <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.81" steps="400"/></proof>
                      </goal>
                      <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="1.42" steps="400"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="eliminate_definition" proved="true" >
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="1.55" steps="400"/></proof>
                      </goal>
                      <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.81" steps="400"/></proof>
                      </goal>
                      <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.2" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.78" steps="400"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="3"><result status="valid" time="0.74" steps="432"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.0.0.1" expl="asserted formula" proved="true">
               <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.0.1" expl="true case (apply premises)" proved="true">
             <proof prover="3"><result status="valid" time="0.59" steps="432"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(width_c (place_c c k n))" arg2="(length y)">
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.1.0" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="int_to_bv_to_int">
              <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.0.1.1.1.1" expl="equality hypothesis" proved="true">
             <proof prover="3"><result status="valid" time="0.58" steps="432"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
         <transf name="assert" proved="true" arg1="(exists i.  k + width_c c &lt;= i /\ getbv x i &lt;&gt; getbv y i)

">
          <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
          <proof prover="3"><result status="valid" time="4.38" steps="438"/></proof>
          </goal>
          <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(int_to_bv (bv_to_int y) (width_c (place_c c k n)))" arg2="y">
           <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0" expl="false case (apply premises)" proved="true">
           <transf name="assert" proved="true" arg1="((make_bv
   (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x) (getbv e) y3)
   (width_c (place_c c k n))) &lt;&gt; y)">
            <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
            <transf name="destruct" proved="true" arg1="h1">
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(getbv (make_bv
      (fun (y3:int) -&gt; basis_ket_c (place_c c k n) (getbv x) (getbv e) y3)
      (width_c (place_c c k n)))i &lt;&gt; getbv y i)">
              <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
               <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                 <transf name="eliminate_definition" proved="true" >
                  <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                  <transf name="rewrite" proved="true" arg1="place_c_spec2">
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                   <proof prover="3"><result status="valid" time="0.76" steps="410"/></proof>
                   </goal>
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="3"><result status="valid" time="1.21" steps="410"/></proof>
                   </goal>
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="3"><result status="valid" time="0.84" steps="410"/></proof>
                   </goal>
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                   <proof prover="0"><result status="valid" time="5.84"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="eliminate_definition" proved="true" >
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="5.40"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.75"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.62"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="eliminate_definition" proved="true" >
                   <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                    <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="5.19"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.73"/></proof>
                     </goal>
                     <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.1.0.1.0.0.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.47"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.14"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.0.0.1" expl="asserted formula" proved="true">
              <proof prover="3"><result status="valid" time="0.51" steps="444"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.0.1" expl="false case (apply premises)" proved="true">
            <proof prover="3"><result status="valid" time="3.58" steps="448"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
           <transf name="replace" proved="true" arg1="(width_c (place_c c k n))" arg2="(length y)">
            <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.1.0" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="int_to_bv_to_int">
             <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.15"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC place_get_ket_tpart_null_c.0.0.0.0.0.0.0.1.1.1.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="3.13" steps="446"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_get_ket_tpart_null_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="2.95" steps="432"/></proof>
   </goal>
   <goal name="VC place_get_ket_tpart_null_c.0.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC place_get_ket_tpart_null_c.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="2.95" steps="432"/></proof>
    </goal>
    <goal name="VC place_get_ket_tpart_null_c.0.2.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(width_c (place_c c k n))" arg2="(length y)">
     <goal name="VC place_get_ket_tpart_null_c.0.2.1.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="power_no_">
      <goal name="VC place_get_ket_tpart_null_c.0.2.1.0.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="bv_to_int_bound">
       <goal name="VC place_get_ket_tpart_null_c.0.2.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.99"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC place_get_ket_tpart_null_c.0.2.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.36" steps="432"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_get_ket_tpart_null_c.0.2.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="3.11" steps="432"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_hadamard_c" expl="VC for place_hadamard_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_hadamard_c.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.63" steps="424"/></proof>
  </goal>
  <goal name="VC place_hadamard_c.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.53" steps="424"/></proof>
  </goal>
  <goal name="VC place_hadamard_c.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
  </goal>
  <goal name="VC place_hadamard_c.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="433"/></proof>
  </goal>
  <goal name="VC place_hadamard_c.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC place_hadamard_c.4.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC place_hadamard_c.4.0.0" expl="VC for place_hadamard_c" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC place_hadamard_c.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="3.14" steps="447"/></proof>
     </goal>
     <goal name="VC place_hadamard_c.4.0.0.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.66" steps="441"/></proof>
     </goal>
     <goal name="VC place_hadamard_c.4.0.0.2" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.56" steps="441"/></proof>
     </goal>
     <goal name="VC place_hadamard_c.4.0.0.3" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.57" steps="439"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC place_hadamard_c.4.1" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="437"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_hadamard_c.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H4">
   <goal name="VC place_hadamard_c.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC place_hadamard_c.5.0.0" expl="VC for place_hadamard_c" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC place_hadamard_c.5.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC place_hadamard_c.5.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="2.35"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_hadamard_c.5.0.0.1" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC place_hadamard_c.5.0.0.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.63"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_hadamard_c.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC place_hadamard_c.6.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC place_hadamard_c.6.0.0" expl="VC for place_hadamard_c" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC place_hadamard_c.6.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(((x @ k) * (y @ 0)) * power_ 2 (m - 1))" arg2="(power_ 2 (m-1))">
      <goal name="VC place_hadamard_c.6.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="1.49"/></proof>
      </goal>
      <goal name="VC place_hadamard_c.6.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="1.07" steps="439"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC place_hadamard_c.6.0.0.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.92" steps="439"/></proof>
     </goal>
     <goal name="VC place_hadamard_c.6.0.0.2" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.49" steps="439"/></proof>
     </goal>
     <goal name="VC place_hadamard_c.6.0.0.3" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.51" steps="435"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Qbit_permutations" proved="true">
 <goal name="VC qbit_permutes" expl="VC for qbit_permutes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC qbit_permutes.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.32"/></proof>
  </goal>
  <goal name="VC qbit_permutes.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.11"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.65"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.37" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.15" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.89" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.91" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.96"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.43"/></proof>
   </goal>
   <goal name="VC qbit_permutes.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.40"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutes.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.60"/></proof>
  </goal>
  <goal name="VC qbit_permutes.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.60"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.23"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.32" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.96" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.48" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.83" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.68"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.24"/></proof>
   </goal>
   <goal name="VC qbit_permutes.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutes.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40"/></proof>
  </goal>
  <goal name="VC qbit_permutes.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.5.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.50"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.78" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.78" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.78" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.63" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.51"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC qbit_permutes.5.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.06"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutes.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.58"/></proof>
  </goal>
  <goal name="VC qbit_permutes.7" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.7.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.64"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.30"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.56" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.80" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.92" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.89" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.07"/></proof>
   </goal>
   <goal name="VC qbit_permutes.7.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.09"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutes.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.8.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.97" steps="446"/></proof>
    </goal>
    <goal name="VC qbit_permutes.8.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.61" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.8.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.8.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.96" steps="446"/></proof>
    </goal>
    <goal name="VC qbit_permutes.8.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.61" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.8.2" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.85" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.8.3" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.86" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutes.8.4" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.8.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.8.6" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.8.7" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.8.8" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutes.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.9.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.9.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="c" arg2="(sequence_c (to_qc x1)(to_qc x) )">
     <goal name="VC qbit_permutes.9.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sequence_ancillas_c">
      <goal name="VC qbit_permutes.9.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="3.04" steps="448"/></proof>
      </goal>
      <goal name="VC qbit_permutes.9.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutes.9.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.18"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutes.9.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.52" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.9.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.9.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.95" steps="448"/></proof>
    </goal>
    <goal name="VC qbit_permutes.9.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.53" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.9.2" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.84" steps="426"/></proof>
   </goal>
   <goal name="VC qbit_permutes.9.3" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="2.89" steps="426"/></proof>
   </goal>
   <goal name="VC qbit_permutes.9.4" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.58" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.9.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.9.6" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.47" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.9.7" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.50" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.9.8" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.66" steps="422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutes.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.10.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.10.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="c" arg2="(sequence_c (to_qc x1)(to_qc x) )">
     <goal name="VC qbit_permutes.10.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sequence_range_c">
      <goal name="VC qbit_permutes.10.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.53" steps="448"/></proof>
      </goal>
      <goal name="VC qbit_permutes.10.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutes.10.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.20"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutes.10.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.49" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.10.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="c" arg2="(parallel_c (to_qc x1)(to_qc x) )">
     <goal name="VC qbit_permutes.10.1.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="2.92" steps="450"/></proof>
     </goal>
     <goal name="VC qbit_permutes.10.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.17"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutes.10.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.60" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.10.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.97"/></proof>
   </goal>
   <goal name="VC qbit_permutes.10.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
   <goal name="VC qbit_permutes.10.4" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.10.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.62" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.10.6" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.10.7" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.58" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.10.8" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.69" steps="422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutes.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutes.11.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.11.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_let" proved="true" >
     <goal name="VC qbit_permutes.11.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="c" arg2="(sequence_c (to_qc x2)(to_qc x1) )">
      <goal name="VC qbit_permutes.11.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="sequence_angle_c">
       <goal name="VC qbit_permutes.11.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H10">
        <goal name="VC qbit_permutes.11.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H4">
         <goal name="VC qbit_permutes.11.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="3.50" steps="452"/></proof>
         </goal>
         <goal name="VC qbit_permutes.11.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.67" steps="450"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutes.11.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.62" steps="450"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permutes.11.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.17"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC qbit_permutes.11.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.24"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutes.11.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.65" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.11.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutes.11.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="c" arg2="(parallel_c (to_qc x2)(to_qc x1) )">
     <goal name="VC qbit_permutes.11.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="parallel_angle_c">
      <goal name="VC qbit_permutes.11.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="1.23"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutes.11.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.27"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutes.11.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.55" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.11.2" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(swap_c )">
    <goal name="VC qbit_permutes.11.2.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="3.08" steps="430"/></proof>
    </goal>
    <goal name="VC qbit_permutes.11.2.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="3.47" steps="430"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.11.3" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="(id_c )">
    <goal name="VC qbit_permutes.11.3.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="3.96" steps="430"/></proof>
    </goal>
    <goal name="VC qbit_permutes.11.3.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="3.54" steps="430"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutes.11.4" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.11.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.50" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.11.6" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.11.7" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.09" steps="422"/></proof>
   </goal>
   <goal name="VC qbit_permutes.11.8" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="1.12" steps="422"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC qbit_permutation" expl="VC for qbit_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC qbit_permutation.0" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="c" arg2="(sequence_c (to_qc x1) (to_qc x))">
   <goal name="VC qbit_permutation.0.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutation.0.0.0" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="(build_correct (pre c))">
     <goal name="VC qbit_permutation.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="3.31" steps="424"/></proof>
     </goal>
     <goal name="VC qbit_permutation.0.0.0.1" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="sequence_width_c">
      <goal name="VC qbit_permutation.0.0.0.1.0" expl="assertion" proved="true">
      <proof prover="3"><result status="valid" time="0.54" steps="424"/></proof>
      </goal>
      <goal name="VC qbit_permutation.0.0.0.1.1" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(width_c (to_qc x1))" arg2="(width_pre ( x1))">
       <goal name="VC qbit_permutation.0.0.0.1.1.0" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (to_qc x))" arg2="(width_pre ( x))">
        <goal name="VC qbit_permutation.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="3.20" steps="426"/></proof>
        </goal>
        <goal name="VC qbit_permutation.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC qbit_permutation.0.0.0.1.1.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="width_c_spec">
          <goal name="VC qbit_permutation.0.0.0.1.1.0.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="pre_to_qc">
           <goal name="VC qbit_permutation.0.0.0.1.1.0.1.0.0.0" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="0.52" steps="424"/></proof>
           </goal>
           <goal name="VC qbit_permutation.0.0.0.1.1.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="4.18" steps="426"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permutation.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC qbit_permutation.0.0.0.1.1.1.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="width_c_spec">
         <goal name="VC qbit_permutation.0.0.0.1.1.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="pre_to_qc">
          <goal name="VC qbit_permutation.0.0.0.1.1.1.0.0.0" expl="equality hypothesis" proved="true">
          <proof prover="3"><result status="valid" time="0.53" steps="424"/></proof>
          </goal>
          <goal name="VC qbit_permutation.0.0.0.1.1.1.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="4.81" steps="426"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutation.0.0.1" expl="assertion" proved="true">
    <transf name="assert" proved="true" arg1="(build_correct (pre c))">
     <goal name="VC qbit_permutation.0.0.1.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="3.84" steps="424"/></proof>
     </goal>
     <goal name="VC qbit_permutation.0.0.1.1" expl="assertion" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC qbit_permutation.0.0.1.1.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="width_c_spec">
       <goal name="VC qbit_permutation.0.0.1.1.0.0" expl="assertion" proved="true">
       <transf name="rewrite" proved="true" arg1="width_c_spec">
        <goal name="VC qbit_permutation.0.0.1.1.0.0.0" expl="assertion" proved="true">
        <transf name="rewrite" proved="true" arg1="pre_to_qc">
         <goal name="VC qbit_permutation.0.0.1.1.0.0.0.0" expl="assertion" proved="true">
         <transf name="rewrite" proved="true" arg1="pre_to_qc">
          <goal name="VC qbit_permutation.0.0.1.1.0.0.0.0.0" expl="assertion" proved="true">
          <proof prover="3"><result status="valid" time="2.89" steps="426"/></proof>
          </goal>
          <goal name="VC qbit_permutation.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="3.04" steps="426"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC qbit_permutation.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="2.85" steps="426"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.0.1" expl="equality hypothesis" proved="true">
   <transf name="assert" proved="true" arg1="(pre c = pre (sequence_c (to_qc x1) (to_qc x)))">
    <goal name="VC qbit_permutation.0.1.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC qbit_permutation.0.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="sequence_c_spec1">
      <goal name="VC qbit_permutation.0.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="pre_to_qc">
       <goal name="VC qbit_permutation.0.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="pre_to_qc">
        <goal name="VC qbit_permutation.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="pre_to_qc">
         <goal name="VC qbit_permutation.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.63" steps="422"/></proof>
         </goal>
         <goal name="VC qbit_permutation.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="0.55"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="0.42"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permutation.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="pre_to_qc">
        <goal name="VC qbit_permutation.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="pre_to_qc">
         <goal name="VC qbit_permutation.0.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.01" steps="424"/></proof>
         </goal>
         <goal name="VC qbit_permutation.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="0.41"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="0.45"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC qbit_permutation.0.1.0.0.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="width_c_spec">
       <goal name="VC qbit_permutation.0.1.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="width_c_spec">
        <goal name="VC qbit_permutation.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="pre_to_qc">
         <goal name="VC qbit_permutation.0.1.0.0.1.0.0.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pre_to_qc">
          <goal name="VC qbit_permutation.0.1.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="0.49"/></proof>
          </goal>
          <goal name="VC qbit_permutation.0.1.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="0.42"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC qbit_permutation.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="0.39"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutation.0.1.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="2.99" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.97" steps="428"/></proof>
  </goal>
  <goal name="VC qbit_permutation.2" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(build_correct (Parallel x1 x))">
   <goal name="VC qbit_permutation.2.0" expl="asserted formula" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC qbit_permutation.2.0.0" expl="asserted formula" proved="true">
    <proof prover="5"><result status="valid" time="14.39"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="2.88" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutation.3.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.02" steps="430"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.91" steps="430"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.76" steps="430"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.86" steps="430"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.77" steps="430"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.77" steps="430"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.02"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.02"/></proof>
   </goal>
   <goal name="VC qbit_permutation.3.8" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.05" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.15" steps="430"/></proof>
  </goal>
  <goal name="VC qbit_permutation.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.72"/></proof>
  </goal>
  <goal name="VC qbit_permutation.6" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutation.6.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.71" steps="434"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.62" steps="434"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.95" steps="434"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.94" steps="434"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.99" steps="434"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.01" steps="434"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.05"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.22"/></proof>
   </goal>
   <goal name="VC qbit_permutation.6.8" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.30" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.35" steps="434"/></proof>
  </goal>
  <goal name="VC qbit_permutation.8" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="c" arg2="(parallel_c (to_qc x1) (to_qc x))">
   <goal name="VC qbit_permutation.8.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="3.45" steps="424"/></proof>
   </goal>
   <goal name="VC qbit_permutation.8.1" expl="equality hypothesis" proved="true">
   <transf name="assert" proved="true" arg1="(pre c = pre (parallel_c (to_qc x1) (to_qc x)))">
    <goal name="VC qbit_permutation.8.1.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC qbit_permutation.8.1.0.0" expl="asserted formula" proved="true">
     <transf name="rewrite" proved="true" arg1="parallel_c_spec1">
      <goal name="VC qbit_permutation.8.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="rewrite" proved="true" arg1="pre_to_qc">
       <goal name="VC qbit_permutation.8.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="pre_to_qc">
        <goal name="VC qbit_permutation.8.1.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="pre_to_qc">
         <goal name="VC qbit_permutation.8.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <proof prover="3"><result status="valid" time="0.50" steps="422"/></proof>
         </goal>
         <goal name="VC qbit_permutation.8.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="0.46"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.8.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="0.38"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permutation.8.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="pre_to_qc">
        <goal name="VC qbit_permutation.8.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="pre_to_qc">
         <goal name="VC qbit_permutation.8.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.82" steps="424"/></proof>
         </goal>
         <goal name="VC qbit_permutation.8.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="0.56"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.8.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="0.42"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutation.8.1.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="5.44" steps="426"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.9" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.44"/></proof>
  </goal>
  <goal name="VC qbit_permutation.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="5.75" steps="434"/></proof>
  </goal>
  <goal name="VC qbit_permutation.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.41" steps="434"/></proof>
  </goal>
  <goal name="VC qbit_permutation.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.34" steps="426"/></proof>
  </goal>
  <goal name="VC qbit_permutation.13" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="VC qbit_permutation.14" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutation.14.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.19" steps="428"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="2.90" steps="428"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.28" steps="428"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.3" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="1.56"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.4" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="1.31"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.5" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="1.37"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.27"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.09"/></proof>
   </goal>
   <goal name="VC qbit_permutation.14.8" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="8.07" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="8.05" steps="428"/></proof>
  </goal>
  <goal name="VC qbit_permutation.16" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.42"/></proof>
  </goal>
  <goal name="VC qbit_permutation.17" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutation.17.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.10" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.12" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.2" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.30" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.3" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.39" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.4" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.28" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.5" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="3.21" steps="432"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.16"/></proof>
   </goal>
   <goal name="VC qbit_permutation.17.8" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="4.29" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="4.31" steps="432"/></proof>
  </goal>
  <goal name="VC qbit_permutation.19" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutation.19.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC qbit_permutation.19.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="c" arg2="(sequence_c (to_qc x2) (to_qc x1))">
     <goal name="VC qbit_permutation.19.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="sequence_basis_ket_c">
      <goal name="VC qbit_permutation.19.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC qbit_permutation.19.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H7">
        <goal name="VC qbit_permutation.19.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="H4">
          <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="0"><result status="valid" time="1.25"/></proof>
          </goal>
          <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem (o3 @ i) (to_fset 0 (width_c (to_qc x2))))">
           <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="replace" proved="true" arg1="(width_c (to_qc x2))" arg2="(width_c (to_qc x1))">
            <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c (to_qc x1)))
)">
             <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="set_mem_to_fset">
              <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c (to_qc x1))" arg3="in" arg4="H">
               <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.54" steps="438"/></proof>
               </goal>
               <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="3"><result status="valid" time="0.66" steps="438"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0.0.1" expl="asserted formula" proved="true">
             <proof prover="2"><result status="valid" time="1.69"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.1.0" proved="true">
            <proof prover="3"><result status="valid" time="4.71" steps="442"/></proof>
            </goal>
            <goal name="VC qbit_permutation.19.0.0.0.0.0.0.0.1.1.1" proved="true">
            <proof prover="3"><result status="valid" time="5.14" steps="442"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.19.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c (to_qc x1))" arg3="in" arg4="H">
         <goal name="VC qbit_permutation.19.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="1.13" steps="438"/></proof>
         </goal>
         <goal name="VC qbit_permutation.19.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="0.52" steps="438"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC qbit_permutation.19.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="assert" proved="true" arg1="(build_correct (Sequence x2 x1))">
       <goal name="VC qbit_permutation.19.0.0.0.1.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="5.02" steps="440"/></proof>
       </goal>
       <goal name="VC qbit_permutation.19.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.72" steps="440"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutation.19.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(pre c = pre (sequence_c (to_qc x2) (to_qc x1)))">
      <goal name="VC qbit_permutation.19.0.0.1.0" expl="asserted formula" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC qbit_permutation.19.0.0.1.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="sequence_c_spec1">
        <goal name="VC qbit_permutation.19.0.0.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="2.56"/></proof>
        </goal>
        <goal name="VC qbit_permutation.19.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <transf name="assert" proved="true" arg1="(build_correct (Sequence x2 x1))">
         <goal name="VC qbit_permutation.19.0.0.1.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="2.41"/></proof>
         </goal>
         <goal name="VC qbit_permutation.19.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.83" steps="440"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC qbit_permutation.19.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="1.61"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.19.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC qbit_permutation.19.1.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="c" arg2="(parallel_c (to_qc x2) (to_qc x1))">
     <goal name="VC qbit_permutation.19.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="parallel_basis_ket_c">
      <goal name="VC qbit_permutation.19.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC qbit_permutation.19.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC qbit_permutation.19.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC qbit_permutation.19.1.0.0.0.0.0.0" expl="VC for qbit_permutation" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC qbit_permutation.19.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="1.54"/></proof>
          </goal>
          <goal name="VC qbit_permutation.19.1.0.0.0.0.0.0.1" expl="postcondition" proved="true">
          <proof prover="3"><result status="valid" time="0.68" steps="438"/></proof>
          </goal>
          <goal name="VC qbit_permutation.19.1.0.0.0.0.0.0.2" expl="postcondition" proved="true">
          <proof prover="3"><result status="valid" time="0.63" steps="438"/></proof>
          </goal>
          <goal name="VC qbit_permutation.19.1.0.0.0.0.0.0.3" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="H9">
           <goal name="VC qbit_permutation.19.1.0.0.0.0.0.0.3.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC qbit_permutation.19.1.0.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.55" steps="438"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutation.19.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(pre c = pre (parallel_c (to_qc x2) (to_qc x1)))">
      <goal name="VC qbit_permutation.19.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="3.87" steps="438"/></proof>
      </goal>
      <goal name="VC qbit_permutation.19.1.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="3.89" steps="440"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.19.2" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="c" arg2="swap_c">
    <goal name="VC qbit_permutation.19.2.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC qbit_permutation.19.2.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC qbit_permutation.19.2.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC qbit_permutation.19.2.0.0.0.0" expl="VC for qbit_permutation" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC qbit_permutation.19.2.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="3"><result status="valid" time="3.02" steps="430"/></proof>
        </goal>
        <goal name="VC qbit_permutation.19.2.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="3"><result status="valid" time="3.15" steps="432"/></proof>
        </goal>
        <goal name="VC qbit_permutation.19.2.0.0.0.0.2" expl="postcondition" proved="true">
        <proof prover="0"><result status="valid" time="1.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutation.19.2.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="3.13" steps="428"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.19.3" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC qbit_permutation.19.3.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H3">
     <goal name="VC qbit_permutation.19.3.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H3">
      <goal name="VC qbit_permutation.19.3.0.0.0" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="H3">
       <goal name="VC qbit_permutation.19.3.0.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="H3">
        <goal name="VC qbit_permutation.19.3.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="H3">
         <goal name="VC qbit_permutation.19.3.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="3.26" steps="432"/></proof>
         </goal>
         <goal name="VC qbit_permutation.19.3.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="3.72" steps="432"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.19.3.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="3"><result status="valid" time="3.45" steps="430"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permutation.19.3.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="3.35" steps="430"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC qbit_permutation.19.3.0.0.1" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="c" arg2="id_c">
       <goal name="VC qbit_permutation.19.3.0.0.1.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="1.60"/></proof>
       </goal>
       <goal name="VC qbit_permutation.19.3.0.0.1.1" expl="equality hypothesis" proved="true">
       <proof prover="3"><result status="valid" time="3.09" steps="430"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutation.19.3.0.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="3.26" steps="432"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permutation.20" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC qbit_permutation.20.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="injective_is_bijective">
    <goal name="VC qbit_permutation.20.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="set_injective">
     <goal name="VC qbit_permutation.20.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC qbit_permutation.20.0.0.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_let" proved="true" >
       <goal name="VC qbit_permutation.20.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H4">
        <goal name="VC qbit_permutation.20.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o3,(to_fset 0 (width_c c)),(to_fset 0 (width_c c))">
          <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o2,(to_fset 0 (width_c c)),(to_fset 0 (width_c c))">
           <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst2">
             <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c (to_qc x1))">
              <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.62" steps="452"/></proof>
              </goal>
              <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="3"><result status="valid" time="0.63" steps="452"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="Hinst7">
              <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c (to_qc x))">
               <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.69" steps="452"/></proof>
               </goal>
               <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
               <transf name="replace" proved="true" arg1="(width_c (to_qc x))" arg2="(width_c (to_qc x1))">
                <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
                <proof prover="3"><result status="valid" time="0.73" steps="452"/></proof>
                </goal>
                <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="3"><result status="valid" time="0.54" steps="452"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.55" steps="452"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="Hinst7">
              <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.68" steps="452"/></proof>
              </goal>
              <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.61" steps="452"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC qbit_permutation.20.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="3.80" steps="454"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutation.20.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC qbit_permutation.20.0.1.0" expl="apply premises" proved="true">
     <transf name="eliminate_let" proved="true" >
      <goal name="VC qbit_permutation.20.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC qbit_permutation.20.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC qbit_permutation.20.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o2,(to_fset 0 (width_c c)),(to_fset 0 (width_c c))">
         <goal name="VC qbit_permutation.20.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o3,(to_fset 0 (width_c c)),(to_fset 0 (width_c c))">
          <goal name="VC qbit_permutation.20.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC qbit_permutation.20.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="Hinst7">
            <goal name="VC qbit_permutation.20.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="0.57" steps="448"/></proof>
            </goal>
            <goal name="VC qbit_permutation.20.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="Hinst3">
             <goal name="VC qbit_permutation.20.0.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.54" steps="448"/></proof>
             </goal>
             <goal name="VC qbit_permutation.20.0.1.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.83" steps="448"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC qbit_permutation.20.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC qbit_permutation.20.0.2.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.58" steps="434"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.20.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC qbit_permutation.20.1.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="injective_is_bijective">
     <goal name="VC qbit_permutation.20.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_injective">
      <goal name="VC qbit_permutation.20.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC qbit_permutation.20.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="case" proved="true" arg1="(e&lt; width_c (to_qc x1))">
        <goal name="VC qbit_permutation.20.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
        <transf name="replace" proved="true" arg1="(result @ e)" arg2="(o e)">
         <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
         <transf name="case" proved="true" arg1="(e&#39;&lt; width_c (to_qc x1))">
          <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(result @ e&#39;)" arg2="(o e&#39;)">
           <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
           <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o,(to_fset 0 (width_c (to_qc x1))),(to_fset 0 (width_c (to_qc x1)))">
            <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="apply" proved="true" arg1="Hinst2">
              <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.58" steps="448"/></proof>
              </goal>
              <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="3.97" steps="450"/></proof>
              </goal>
              <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="3.90" steps="450"/></proof>
              </goal>
              <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.57" steps="448"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="4.39" steps="444"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
          <transf name="assert" proved="true" arg1="(width_c (to_qc x1) &lt;= result @ e&#39;)">
           <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="rewrite" proved="true" arg1="H4">
            <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="3"><result status="valid" time="0.63" steps="442"/></proof>
               </goal>
               <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
               <transf name="assert" proved="true" arg1="(0&lt;= (o1 @ (e&#39; - width_c (to_qc x1))))">
                <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
                <transf name="assert" proved="true" arg1="(mem (o1 @ (e&#39; - width_c (to_qc x1))) (to_fset 0 ((width_c (to_qc x)))))">
                 <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
                 <transf name="instantiate" proved="true" arg1="get_surjective" arg2="o1,(to_fset 0 (width_c (to_qc x))),(to_fset 0 (width_c (to_qc x)))
">
                  <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                   <transf name="apply" proved="true" arg1="Hinst1">
                    <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="3"><result status="valid" time="3.67" steps="444"/></proof>
                    </goal>
                    <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.72"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.0.1" expl="asserted formula" proved="true">
                 <proof prover="3"><result status="valid" time="3.15" steps="446"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.0.0.0.0.1.1" expl="asserted formula" proved="true">
                <proof prover="3"><result status="valid" time="0.50" steps="444"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
           <transf name="assert" proved="true" arg1="(o e &lt; width_c (to_qc x1))">
            <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(mem (o e) (to_fset 0 ((width_c (to_qc x1)))))">
             <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
             <transf name="instantiate" proved="true" arg1="get_surjective" arg2="o,(to_fset 0 (width_c (to_qc x1))),(to_fset 0 (width_c (to_qc x1)))
">
              <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.0.0.0" expl="asserted formula" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="Hinst1">
                <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="3.29" steps="446"/></proof>
                </goal>
                <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="3.32" steps="447"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.0.1" expl="asserted formula" proved="true">
             <proof prover="3"><result status="valid" time="3.37" steps="448"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC qbit_permutation.20.1.0.0.0.0.0.0.1.1.1" expl="false case (true case. apply premises)" proved="true">
            <proof prover="3"><result status="valid" time="0.68" steps="446"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC qbit_permutation.20.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="3.74" steps="442"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.20.1.0.0.0.0.1" expl="false case (apply premises)" proved="true">
        <transf name="replace" proved="true" arg1="(result @ e)" arg2="((o1 @ (e - width_c (to_qc x1))) + width_c (to_qc x1))">
         <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0" expl="false case (apply premises)" proved="true">
         <transf name="case" proved="true" arg1="(e&#39;&lt; width_c (to_qc x1))">
          <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0" expl="false case (true case. apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(result @ e&#39;)" arg2="(o e&#39;)">
           <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0" expl="false case (true case. apply premises)" proved="true">
           <transf name="assert" proved="true" arg1="(o e&#39; &lt; width_c (to_qc x1))">
            <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="assert" proved="true" arg1="(mem (o e&#39;) ( to_fset 0 (width_c (to_qc x1))))">
             <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="instantiate" proved="true" arg1="get_surjective" arg2="o,(to_fset 0 (width_c (to_qc x1))),(to_fset 0 (width_c (to_qc x1)))
">
              <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="Hinst1">
                <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="3.61" steps="444"/></proof>
                </goal>
                <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="3.08" steps="445"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
             <proof prover="3"><result status="valid" time="3.11" steps="446"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1" expl="false case (true case. apply premises)" proved="true">
            <transf name="assert" proved="true" arg1="(0 &lt;= o1 @ (e - width_c (to_qc x1)))">
             <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
             <transf name="assert" proved="true" arg1="(mem (o1 @ (e - width_c (to_qc x1))) ( to_fset 0 (width_c (to_qc x))))">
              <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="instantiate" proved="true" arg1="get_surjective" arg2="o1,(to_fset 0 (width_c (to_qc x))),(to_fset 0 (width_c (to_qc x)))
">
               <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                <transf name="apply" proved="true" arg1="Hinst1">
                 <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="3"><result status="valid" time="3.61" steps="446"/></proof>
                 </goal>
                 <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.05"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.0.1" expl="asserted formula" proved="true">
              <proof prover="3"><result status="valid" time="3.20" steps="448"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.0.1.1" expl="false case (true case. apply premises)" proved="true">
             <proof prover="3"><result status="valid" time="0.56" steps="446"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="3.06" steps="444"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(result @ e&#39;)" arg2="((o1 @ (e&#39; - width_c (to_qc x1))) + width_c (to_qc x1))">
           <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0" expl="false case (apply premises)" proved="true">
           <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o1,(to_fset 0 (width_c (to_qc x))),(to_fset 0 (width_c (to_qc x)))
">
            <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
             <transf name="assert" proved="true" arg1="( not ((o1 @ (e - width_c (to_qc x1))) )
      = ((o1 @ (e&#39; - width_c (to_qc x1))) ))">
              <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="Hinst2">
               <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.52" steps="448"/></proof>
               </goal>
               <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.94"/></proof>
               </goal>
               <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.74"/></proof>
               </goal>
               <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0.0.0.3" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.52" steps="448"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.0.0.0.1" expl="false case (apply premises)" proved="true">
              <proof prover="3"><result status="valid" time="0.73" steps="450"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC qbit_permutation.20.1.0.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="4.11" steps="444"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC qbit_permutation.20.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="4.08" steps="442"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutation.20.1.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC qbit_permutation.20.1.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="H2">
       <goal name="VC qbit_permutation.20.1.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC qbit_permutation.20.1.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem (o e) (to_fset 0 (width_c (to_qc x1))))">
           <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o,(to_fset 0 (width_c (to_qc x1))),(to_fset 0 (width_c (to_qc x1)))
">
            <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="Hinst3">
              <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.51" steps="442"/></proof>
              </goal>
              <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="3.05" steps="444"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.61"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(mem (o1 @ (e - width_c (to_qc x1))) (to_fset 0 (width_c (to_qc x))))">
           <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.1.0" expl="asserted formula" proved="true">
           <transf name="instantiate" proved="true" arg1="get_bijective" arg2="o1,(to_fset 0 (width_c (to_qc x))),(to_fset 0 (width_c (to_qc x)))
">
            <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="Hinst3">
              <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.59" steps="442"/></proof>
              </goal>
              <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="1.88"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC qbit_permutation.20.1.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.61"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutation.20.1.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.51" steps="432"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.20.2" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC qbit_permutation.20.2.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="injective_is_bijective">
     <goal name="VC qbit_permutation.20.2.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="set_injective">
      <goal name="VC qbit_permutation.20.2.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC qbit_permutation.20.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC qbit_permutation.20.2.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="0.59" steps="429"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutation.20.2.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.81"/></proof>
     </goal>
     <goal name="VC qbit_permutation.20.2.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.58" steps="422"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC qbit_permutation.20.3" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC qbit_permutation.20.3.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="H2">
     <goal name="VC qbit_permutation.20.3.0.0" expl="postcondition" proved="true">
     <transf name="destruct" proved="true" arg1="H2">
      <goal name="VC qbit_permutation.20.3.0.0.0" expl="postcondition" proved="true">
      <transf name="destruct" proved="true" arg1="H2">
       <goal name="VC qbit_permutation.20.3.0.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="H2">
        <goal name="VC qbit_permutation.20.3.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="destruct" proved="true" arg1="H2">
         <goal name="VC qbit_permutation.20.3.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="destruct" proved="true" arg1="H2">
          <goal name="VC qbit_permutation.20.3.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="3"><result status="valid" time="3.89" steps="426"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC qbit_permutation.20.3.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="3.97" steps="428"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC qbit_permutation.20.3.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="3"><result status="valid" time="2.89" steps="426"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permutation.20.3.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="2.80" steps="426"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC qbit_permutation.20.3.0.0.1" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="injective_is_bijective">
       <goal name="VC qbit_permutation.20.3.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="set_injective">
        <goal name="VC qbit_permutation.20.3.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.04"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permutation.20.3.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.11"/></proof>
       </goal>
       <goal name="VC qbit_permutation.20.3.0.0.1.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.61" steps="424"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC qbit_permutation.20.3.0.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="2.63" steps="428"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC in_to_fset_qp" expl="VC for in_to_fset_qp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC in_to_fset_qp.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
   <goal name="VC in_to_fset_qp.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="3.01" steps="426"/></proof>
   </goal>
   <goal name="VC in_to_fset_qp.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(p_bijective (qbit_permutation c ) (to_fset 0 (width_c c)) (to_fset 0 (width_c c)))">
    <goal name="VC in_to_fset_qp.0.1.0" expl="asserted formula" proved="true">
    <proof prover="3"><result status="valid" time="3.07" steps="428"/></proof>
    </goal>
    <goal name="VC in_to_fset_qp.0.1.1" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="get_bijective" arg2="(qbit_permutation c ),(to_fset 0 (width_c c)),(to_fset 0 (width_c c))">
     <goal name="VC in_to_fset_qp.0.1.1.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC in_to_fset_qp.0.1.1.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="Hinst3">
       <goal name="VC in_to_fset_qp.0.1.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
       </goal>
       <goal name="VC in_to_fset_qp.0.1.1.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="0.61" steps="434"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC bound_qp" expl="VC for bound_qp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC bound_qp.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(mem (qbit_permutation c @ i) (to_fset 0 (width_c c)))">
   <goal name="VC bound_qp.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="4.29" steps="426"/></proof>
   </goal>
   <goal name="VC bound_qp.0.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="4.22" steps="427"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC qbit_permute_sequence" expl="VC for qbit_permute_sequence" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC qbit_permute_sequence.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.47" steps="424"/></proof>
  </goal>
  <goal name="VC qbit_permute_sequence.1" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC qbit_permute_sequence.1.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="qbit_permutes_def10" arg2="result,(pre d),(pre e)">
    <goal name="VC qbit_permute_sequence.1.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC qbit_permute_sequence.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.52" steps="430"/></proof>
     </goal>
     <goal name="VC qbit_permute_sequence.1.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC qbit_permute_sequence.1.0.0.1.0" proved="true">
      <proof prover="3"><result status="valid" time="3.81" steps="432"/></proof>
      </goal>
      <goal name="VC qbit_permute_sequence.1.0.0.1.1" proved="true">
      <proof prover="3"><result status="valid" time="3.83" steps="432"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permute_sequence.2" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC qbit_permute_sequence.2.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="qbit_permutation_def8" arg2="result">
    <goal name="VC qbit_permute_sequence.2.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC qbit_permute_sequence.2.0.0.0" expl="destruct premise" proved="true">
     <proof prover="3"><result status="valid" time="0.51" steps="432"/></proof>
     </goal>
     <goal name="VC qbit_permute_sequence.2.0.0.1" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="(pre d),(pre e)">
      <goal name="VC qbit_permute_sequence.2.0.0.1.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC qbit_permute_sequence.2.0.0.1.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC qbit_permute_sequence.2.0.0.1.0.0.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="1.62"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permute_sequence.2.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.55" steps="434"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permute_sequence.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.87" steps="434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC qbit_permute_parallel" expl="VC for qbit_permute_parallel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC qbit_permute_parallel.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC qbit_permute_parallel.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="qbit_permutes_def7" arg2="result,(pre d),(pre e)">
    <goal name="VC qbit_permute_parallel.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC qbit_permute_parallel.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.03" steps="428"/></proof>
     </goal>
     <goal name="VC qbit_permute_parallel.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="2.83"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permute_parallel.1" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC qbit_permute_parallel.1.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="qbit_permutation_def7" arg2="result">
    <goal name="VC qbit_permute_parallel.1.0.0" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Hinst">
     <goal name="VC qbit_permute_parallel.1.0.0.0" expl="destruct premise" proved="true">
     <proof prover="3"><result status="valid" time="1.12" steps="430"/></proof>
     </goal>
     <goal name="VC qbit_permute_parallel.1.0.0.1" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Hinst" arg2="(pre d),(pre e)">
      <goal name="VC qbit_permute_parallel.1.0.0.1.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC qbit_permute_parallel.1.0.0.1.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0.0" expl="VC for qbit_permute_parallel" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="2.55"/></proof>
          </goal>
          <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0.0.1" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="2.73"/></proof>
          </goal>
          <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0.0.2" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="2.97"/></proof>
          </goal>
          <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0.0.3" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="to_qc_pre">
           <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0.0.3.0" expl="postcondition" proved="true">
           <transf name="rewrite" proved="true" arg1="to_qc_pre">
            <goal name="VC qbit_permute_parallel.1.0.0.1.0.0.0.0.3.0.0" expl="postcondition" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC qbit_permute_parallel.1.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.81" steps="434"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC qbit_permute_parallel.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="6.03" steps="432"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ids_permute" expl="VC for ids_permute" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ids_permute.0" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="1.09" steps="422"/></proof>
  </goal>
  <goal name="VC ids_permute.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.76" steps="422"/></proof>
  </goal>
  <goal name="VC ids_permute.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.19" steps="426"/></proof>
  </goal>
  <goal name="VC ids_permute.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.86" steps="428"/></proof>
  </goal>
  <goal name="VC ids_permute.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_permute.4.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="424"/></proof>
   </goal>
   <goal name="VC ids_permute.4.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ids_permute.4.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.80" steps="432"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ids_permute.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.54" steps="428"/></proof>
  </goal>
  <goal name="VC ids_permute.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ids_permute.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC ids_permute.6.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC ids_permute.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="qbit_permutation_def1">
      <goal name="VC ids_permute.6.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="3.39" steps="429"/></proof>
      </goal>
      <goal name="VC ids_permute.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.50" steps="427"/></proof>
      </goal>
      <goal name="VC ids_permute.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.50" steps="427"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ids_permute.6.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC ids_permute.6.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC ids_permute.6.1.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="VC ids_permute.6.1.0.0.0" expl="VC for ids_permute" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ids_permute.6.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="3.40" steps="437"/></proof>
       </goal>
       <goal name="VC ids_permute.6.1.0.0.0.1" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC ids_permute.6.1.0.0.0.1.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="qbit_permutation_def1">
         <goal name="VC ids_permute.6.1.0.0.0.1.0.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="3.43" steps="437"/></proof>
         </goal>
         <goal name="VC ids_permute.6.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.95" steps="437"/></proof>
         </goal>
         <goal name="VC ids_permute.6.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.55" steps="435"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC permute_place" expl="VC for permute_place" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permute_place.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="432"/></proof>
  </goal>
  <goal name="VC permute_place.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.84" steps="436"/></proof>
  </goal>
  <goal name="VC permute_place.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.51" steps="436"/></proof>
  </goal>
  <goal name="VC permute_place.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_place.3.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
   </goal>
   <goal name="VC permute_place.3.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.62" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_place.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="432"/></proof>
  </goal>
  <goal name="VC permute_place.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_place.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC permute_place.5.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.64" steps="440"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC permute_place.5.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC permute_place.5.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC permute_place.5.1.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="VC permute_place.5.1.0.0.0" expl="VC for permute_place" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC permute_place.5.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="0.52" steps="449"/></proof>
       </goal>
       <goal name="VC permute_place.5.1.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="0.76" steps="449"/></proof>
       </goal>
       <goal name="VC permute_place.5.1.0.0.0.2" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="0.77" steps="449"/></proof>
       </goal>
       <goal name="VC permute_place.5.1.0.0.0.3" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="4.59" steps="451"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_place.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.74" steps="432"/></proof>
  </goal>
  <goal name="VC permute_place.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.49" steps="436"/></proof>
  </goal>
  <goal name="VC permute_place.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.37" steps="436"/></proof>
  </goal>
  <goal name="VC permute_place.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_place.9.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.95" steps="432"/></proof>
   </goal>
   <goal name="VC permute_place.9.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_place.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_place.10.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="433"/></proof>
   </goal>
   <goal name="VC permute_place.10.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.57" steps="443"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_place.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_place.11.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.65"/></proof>
   </goal>
   <goal name="VC permute_place.11.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC permute_place.11.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC permute_place.11.1.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="VC permute_place.11.1.0.0.0" expl="VC for permute_place" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC permute_place.11.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="1.02" steps="449"/></proof>
       </goal>
       <goal name="VC permute_place.11.1.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="3.32" steps="452"/></proof>
       </goal>
       <goal name="VC permute_place.11.1.0.0.0.2" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="3.42" steps="454"/></proof>
       </goal>
       <goal name="VC permute_place.11.1.0.0.0.3" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="3.94" steps="453"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC permute_plus_one" expl="VC for permute_plus_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permute_plus_one.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.78" steps="424"/></proof>
  </goal>
  <goal name="VC permute_plus_one.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.05" steps="424"/></proof>
  </goal>
  <goal name="VC permute_plus_one.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.70" steps="427"/></proof>
  </goal>
  <goal name="VC permute_plus_one.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.67" steps="428"/></proof>
  </goal>
  <goal name="VC permute_plus_one.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="428"/></proof>
  </goal>
  <goal name="VC permute_plus_one.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H4">
   <goal name="VC permute_plus_one.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC permute_plus_one.5.0.0" expl="VC for permute_plus_one" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC permute_plus_one.5.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="4.58" steps="440"/></proof>
     </goal>
     <goal name="VC permute_plus_one.5.0.0.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="4.64" steps="441"/></proof>
     </goal>
     <goal name="VC permute_plus_one.5.0.0.2" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.56" steps="438"/></proof>
     </goal>
     <goal name="VC permute_plus_one.5.0.0.3" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.65" steps="435"/></proof>
     </goal>
     <goal name="VC permute_plus_one.5.0.0.4" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.80" steps="436"/></proof>
     </goal>
     <goal name="VC permute_plus_one.5.0.0.5" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.83" steps="436"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC permute_plus_one.5.1" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="1.30" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC up_to_image" expl="VC for up_to_image" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC up_to_image.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.39" steps="428"/></proof>
  </goal>
  <goal name="VC up_to_image.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.63" steps="428"/></proof>
  </goal>
  <goal name="VC up_to_image.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.71" steps="428"/></proof>
  </goal>
  <goal name="VC up_to_image.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC up_to_image.3.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="1.04" steps="432"/></proof>
   </goal>
   <goal name="VC up_to_image.3.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC up_to_image.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC up_to_image.4.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
   </goal>
   <goal name="VC up_to_image.4.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.60" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC up_to_image.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC up_to_image.5.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.58" steps="433"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC up_to_image.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="436"/></proof>
  </goal>
  <goal name="VC up_to_image.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="437"/></proof>
  </goal>
  <goal name="VC up_to_image.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.54" steps="437"/></proof>
  </goal>
  <goal name="VC up_to_image.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC up_to_image.9.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.68" steps="434"/></proof>
   </goal>
   <goal name="VC up_to_image.9.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC up_to_image.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC up_to_image.10.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.68" steps="434"/></proof>
   </goal>
   <goal name="VC up_to_image.10.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="443"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC up_to_image.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC up_to_image.11.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.09" steps="445"/></proof>
   </goal>
   <goal name="VC up_to_image.11.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC up_to_image.11.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC up_to_image.11.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H11">
      <goal name="VC up_to_image.11.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H8">
       <goal name="VC up_to_image.11.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC up_to_image.11.1.0.0.0.0.0" expl="VC for up_to_image" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC up_to_image.11.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.55" steps="449"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.54" steps="449"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.2" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.61" steps="449"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.3" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.53" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.4" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.68" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.5" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.54" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.6" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.59" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.7" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.59" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.8" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.59" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.9" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.70" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.10" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.57" steps="456"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.11" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.57" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.12" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.57" steps="449"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.13" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.54" steps="449"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.14" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.67" steps="449"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.15" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.52" steps="452"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.16" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.60" steps="455"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.17" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.64" steps="452"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.18" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.64" steps="451"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.19" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.52" steps="453"/></proof>
         </goal>
         <goal name="VC up_to_image.11.1.0.0.0.0.0.20" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.68" steps="451"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC up_to_image.11.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.52" steps="447"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC up_to_image.11.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.51" steps="447"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC down_to_image" expl="VC for down_to_image" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC down_to_image.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.68" steps="428"/></proof>
  </goal>
  <goal name="VC down_to_image.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.65" steps="428"/></proof>
  </goal>
  <goal name="VC down_to_image.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.48" steps="429"/></proof>
  </goal>
  <goal name="VC down_to_image.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC down_to_image.3.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="436"/></proof>
   </goal>
   <goal name="VC down_to_image.3.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC down_to_image.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC down_to_image.4.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="436"/></proof>
   </goal>
   <goal name="VC down_to_image.4.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC down_to_image.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC down_to_image.5.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.49" steps="437"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC down_to_image.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.51" steps="442"/></proof>
  </goal>
  <goal name="VC down_to_image.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.51" steps="443"/></proof>
  </goal>
  <goal name="VC down_to_image.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.50" steps="443"/></proof>
  </goal>
  <goal name="VC down_to_image.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC down_to_image.9.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.49" steps="434"/></proof>
   </goal>
   <goal name="VC down_to_image.9.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.51" steps="448"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC down_to_image.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC down_to_image.10.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="434"/></proof>
   </goal>
   <goal name="VC down_to_image.10.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="449"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC down_to_image.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC down_to_image.11.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.12" steps="445"/></proof>
   </goal>
   <goal name="VC down_to_image.11.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC down_to_image.11.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC down_to_image.11.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H11">
      <goal name="VC down_to_image.11.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H8">
       <goal name="VC down_to_image.11.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC down_to_image.11.1.0.0.0.0.0" expl="VC for down_to_image" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC down_to_image.11.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.58" steps="458"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.55" steps="457"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.2" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.62" steps="457"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.3" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.64" steps="461"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.4" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.58" steps="461"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.5" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.58" steps="461"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.6" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.74" steps="461"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.7" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.70" steps="461"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.8" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.55" steps="461"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.9" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.56" steps="461"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.10" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.56" steps="463"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.11" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.56" steps="462"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.12" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.56" steps="456"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.13" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.54" steps="460"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.14" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.55" steps="457"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.15" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.56" steps="457"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.16" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.57" steps="457"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.17" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.65" steps="457"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.18" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.73" steps="457"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.19" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.55" steps="462"/></proof>
         </goal>
         <goal name="VC down_to_image.11.1.0.0.0.0.0.20" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.57" steps="458"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC down_to_image.11.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.69" steps="453"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC down_to_image.11.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="0.67" steps="453"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC permute_up" expl="VC for permute_up" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permute_up.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.61" steps="428"/></proof>
  </goal>
  <goal name="VC permute_up.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_up.1.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="428"/></proof>
   </goal>
   <goal name="VC permute_up.1.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_up.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_up.2.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_up.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_up.3.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
   </goal>
   <goal name="VC permute_up.3.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_up.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_up.4.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.60" steps="433"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_up.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.54" steps="438"/></proof>
  </goal>
  <goal name="VC permute_up.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.53" steps="439"/></proof>
  </goal>
  <goal name="VC permute_up.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.54" steps="439"/></proof>
  </goal>
  <goal name="VC permute_up.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_up.8.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="434"/></proof>
   </goal>
   <goal name="VC permute_up.8.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_up.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_up.9.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.65" steps="434"/></proof>
   </goal>
   <goal name="VC permute_up.9.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="445"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_up.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_up.10.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.25"/></proof>
   </goal>
   <goal name="VC permute_up.10.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC permute_up.10.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC permute_up.10.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H8">
      <goal name="VC permute_up.10.1.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H11">
       <goal name="VC permute_up.10.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC permute_up.10.1.0.0.0.0.0" expl="VC for permute_up" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC permute_up.10.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.63" steps="451"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.1" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.67" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.2" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.59" steps="455"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.3" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.68" steps="451"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.4" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.59" steps="451"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.5" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.54" steps="451"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.6" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.67" steps="459"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.7" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.55" steps="459"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.8" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.66" steps="460"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.9" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.56" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.10" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.57" steps="457"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.11" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.69" steps="459"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.12" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.57" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.13" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.70" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.14" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.56" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.15" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.53" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.16" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.64" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.17" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.52" steps="453"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.18" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.52" steps="451"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.19" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.69" steps="455"/></proof>
         </goal>
         <goal name="VC permute_up.10.1.0.0.0.0.0.20" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="0.53" steps="453"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC permute_up.10.1.0.0.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC permute_up.10.1.0.0.0.1.0" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.55" steps="449"/></proof>
        </goal>
        <goal name="VC permute_up.10.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.60" steps="449"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC permute_up.10.1.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC permute_up.10.1.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="3.06" steps="453"/></proof>
       </goal>
       <goal name="VC permute_up.10.1.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.10"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC permute_atom" expl="VC for permute_atom" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permute_atom.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.0.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="430"/></proof>
   </goal>
   <goal name="VC permute_atom.0.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="430"/></proof>
   </goal>
   <goal name="VC permute_atom.0.2" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.65" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.1.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.2.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.50" steps="430"/></proof>
   </goal>
   <goal name="VC permute_atom.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="430"/></proof>
   </goal>
   <goal name="VC permute_atom.2.2" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.59" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.3.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.50" steps="431"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.4.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.61" steps="438"/></proof>
   </goal>
   <goal name="VC permute_atom.4.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.90" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.5.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
   </goal>
   <goal name="VC permute_atom.5.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.61" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.6.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.48" steps="438"/></proof>
   </goal>
   <goal name="VC permute_atom.6.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.55" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.7.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="438"/></proof>
   </goal>
   <goal name="VC permute_atom.7.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="440"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.8.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.56" steps="450"/></proof>
   </goal>
   <goal name="VC permute_atom.8.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.38" steps="450"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC permutation_circuit" expl="VC for permutation_circuit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permutation_circuit.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55" steps="433"/></proof>
  </goal>
  <goal name="VC permutation_circuit.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="3.37" steps="435"/></proof>
  </goal>
  <goal name="VC permutation_circuit.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.2.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="4.21" steps="439"/></proof>
   </goal>
   <goal name="VC permutation_circuit.2.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="5.73" steps="439"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.3.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.56" steps="441"/></proof>
   </goal>
   <goal name="VC permutation_circuit.3.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.54" steps="441"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.4.0" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="0.52" steps="430"/></proof>
   </goal>
   <goal name="VC permutation_circuit.4.1" expl="variant decrease" proved="true">
   <proof prover="3"><result status="valid" time="0.76" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.5.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.89" steps="430"/></proof>
   </goal>
   <goal name="VC permutation_circuit.5.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="2.35" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.6.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="4.89" steps="440"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.7.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="3.66" steps="440"/></proof>
   </goal>
   <goal name="VC permutation_circuit.7.1" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="5.86" steps="440"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.72" steps="437"/></proof>
  </goal>
  <goal name="VC permutation_circuit.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="6.10" steps="439"/></proof>
  </goal>
  <goal name="VC permutation_circuit.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="441"/></proof>
  </goal>
  <goal name="VC permutation_circuit.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.11.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="5.70" steps="445"/></proof>
   </goal>
   <goal name="VC permutation_circuit.11.1" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.94"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.12" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.12.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.81" steps="447"/></proof>
   </goal>
   <goal name="VC permutation_circuit.12.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.68" steps="447"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.13" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="451"/></proof>
  </goal>
  <goal name="VC permutation_circuit.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="452"/></proof>
  </goal>
  <goal name="VC permutation_circuit.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.59" steps="452"/></proof>
  </goal>
  <goal name="VC permutation_circuit.16" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.58" steps="429"/></proof>
  </goal>
  <goal name="VC permutation_circuit.17" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.60" steps="431"/></proof>
  </goal>
  <goal name="VC permutation_circuit.18" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.18.0" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC permutation_circuit.18.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="2.03" steps="451"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC permutation_circuit.18.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC permutation_circuit.18.1.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC permutation_circuit.18.1.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.71"/></proof>
     <proof prover="2"><result status="valid" time="2.14"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.19" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(0 &lt;= (qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i) /\
  (qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i) &lt; n)">
   <goal name="VC permutation_circuit.19.0" expl="asserted formula" proved="true">
   <transf name="replace" proved="true" arg1="n" arg2="(width_c result)">
    <goal name="VC permutation_circuit.19.0.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(0&lt;= inv_func f (to_fset 0 (width_c result)) (to_fset 0 (width_c result))
        i &lt; width_c result)">
     <goal name="VC permutation_circuit.19.0.0.0" expl="asserted formula" proved="true">
     <transf name="assert" proved="true" arg1="(0&lt;=         i &lt; width_c result)">
      <goal name="VC permutation_circuit.19.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="2.27" steps="437"/></proof>
      </goal>
      <goal name="VC permutation_circuit.19.0.0.0.1" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(mem (inv_func f (to_fset 0 (width_c result)) (to_fset 0 (width_c result)) i) (to_fset 0 (width_c result)))">
       <goal name="VC permutation_circuit.19.0.0.0.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c result)))">
        <goal name="VC permutation_circuit.19.0.0.0.1.0.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="7.44" steps="451"/></proof>
        </goal>
        <goal name="VC permutation_circuit.19.0.0.0.1.0.1" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="6.96" steps="453"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC permutation_circuit.19.0.0.0.1.1" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="4.23"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC permutation_circuit.19.0.0.1" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="8.94" steps="452"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC permutation_circuit.19.0.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="1.06" steps="437"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC permutation_circuit.19.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(k&lt;= (qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i))">
    <goal name="VC permutation_circuit.19.1.0" expl="true case (postcondition)" proved="true">
    <transf name="replace" proved="true" arg1="(qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i)" arg2="i">
     <goal name="VC permutation_circuit.19.1.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="3"><result status="valid" time="1.70" steps="443"/></proof>
     </goal>
     <goal name="VC permutation_circuit.19.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC permutation_circuit.19.1.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="1.41" steps="443"/></proof>
      </goal>
      <goal name="VC permutation_circuit.19.1.0.1.1" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i)" arg2="i" arg3="in" arg4="h">
       <goal name="VC permutation_circuit.19.1.0.1.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.96" steps="441"/></proof>
       </goal>
       <goal name="VC permutation_circuit.19.1.0.1.1.1" expl="equality hypothesis" proved="true">
       <transf name="assert" proved="true" arg1="((qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) ((qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i))) = (qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i))">
        <goal name="VC permutation_circuit.19.1.0.1.1.1.0" expl="asserted formula" proved="true">
        <proof prover="3"><result status="valid" time="5.17" steps="489"/></proof>
        </goal>
        <goal name="VC permutation_circuit.19.1.0.1.1.1.1" expl="equality hypothesis" proved="true">
        <transf name="case" proved="true" arg1="((qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i) &lt;&gt; i)">
         <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0" expl="true case (equality hypothesis)" proved="true">
         <transf name="assert" proved="true" arg1="((qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) ((qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i))) &lt;&gt; (qbit_permutation result @ inv_func f (to_fset 0 n) (to_fset 0 n) i))">
          <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0" expl="asserted formula" proved="true">
          <transf name="instantiate" proved="true" arg1="get_injective" arg2="(qbit_permutation result),(to_fset 0 n)">
           <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="Hinst">
            <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="instantiate" proved="true" arg1="bijective_is_injective" arg2="(qbit_permutation result),(to_fset 0 n),(to_fset 0 n)">
             <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="Hinst">
              <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="4.90" steps="460"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="inv_func_spec1">
              <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.84" steps="447"/></proof>
              </goal>
              <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="n" arg2="(width_c result)">
               <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="in_to_fset_qp">
                <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="0.87" steps="447"/></proof>
                </goal>
                <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="(mem (inv_func f (to_fset 0 (width_c result)) (to_fset 0 (width_c result)) i) (to_fset 0  (width_c result)))">
                 <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.0.1.0" expl="asserted formula" proved="true">
                 <transf name="apply" proved="true" arg1="inv_func_spec1">
                  <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="3"><result status="valid" time="0.81" steps="447"/></proof>
                  </goal>
                  <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.0.1.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.59"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.0.1.1" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.63"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="3"><result status="valid" time="1.00" steps="447"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.2" expl="apply premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="inv_func_spec1">
              <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.2.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.81" steps="447"/></proof>
              </goal>
              <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.2.0.1" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="2.04"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3" expl="apply premises" proved="true">
            <transf name="instantiate" proved="true" arg1="get_injective" arg2="(inv_func f (to_fset 0 n) (to_fset 0 n)),(to_fset 0 n)">
             <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0" expl="apply premises" proved="true">
             <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
              <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="Hinst">
               <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <transf name="instantiate" proved="true" arg1="bijective_is_injective" arg2="(inv_func f (to_fset 0 n) (to_fset 0 n)),(to_fset 0 n),(to_fset 0 n)">
                <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
                 <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="Hinst">
                  <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="bijective_inv_func">
                   <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="3"><result status="valid" time="0.67" steps="447"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="n" arg2="(width_c result)">
                <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="in_to_fset_qp">
                 <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.63" steps="447"/></proof>
                 </goal>
                 <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0.1" expl="apply premises" proved="true">
                 <transf name="assert" proved="true" arg1="(mem (inv_func f (to_fset 0 (width_c result)) (to_fset 0 (width_c result)) i)  (to_fset 0 (width_c result)) )">
                  <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0.1.0" expl="asserted formula" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
                   <transf name="apply" proved="true" arg1="inv_func_spec1">
                    <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="3"><result status="valid" time="0.97" steps="447"/></proof>
                    </goal>
                    <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.55"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.0.1.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.02"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="3"><result status="valid" time="1.38" steps="447"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.2" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="2.41"/></proof>
               </goal>
               <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.0.0.3.0.0.3" expl="apply premises" proved="true">
               <proof prover="3"><result status="valid" time="0.90" steps="447"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC permutation_circuit.19.1.0.1.1.1.1.0.1" expl="true case (equality hypothesis)" proved="true">
          <proof prover="3"><result status="valid" time="1.09" steps="447"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC permutation_circuit.19.1.0.1.1.1.1.1" expl="false case (equality hypothesis)" proved="true">
         <proof prover="3"><result status="valid" time="1.15" steps="445"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC permutation_circuit.19.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="1.14" steps="443"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.20" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permutation_circuit.20.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.81" steps="424"/></proof>
   </goal>
   <goal name="VC permutation_circuit.20.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.70" steps="424"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.69" steps="428"/></proof>
  </goal>
  <goal name="VC permutation_circuit.22" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.70" steps="428"/></proof>
  </goal>
  <goal name="VC permutation_circuit.23" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(qbit_permutation result @ i)" arg2="(qbit_permutation result @ (inv_func f (to_fset 0 n) (to_fset 0 n) (f i)))">
   <goal name="VC permutation_circuit.23.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H5">
    <goal name="VC permutation_circuit.23.0.0" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(mem (f i)  (to_fset 0 (width_c result)) )">
     <goal name="VC permutation_circuit.23.0.0.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="get_bijective" arg2="f,(to_fset 0 n),(to_fset 0 n)">
      <goal name="VC permutation_circuit.23.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC permutation_circuit.23.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="replace" proved="true" arg1="(width_c result)" arg2="n">
        <goal name="VC permutation_circuit.23.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="apply" proved="true" arg1="Hinst3">
         <goal name="VC permutation_circuit.23.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="0.74" steps="438"/></proof>
         </goal>
         <goal name="VC permutation_circuit.23.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="6.32" steps="440"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC permutation_circuit.23.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="3"><result status="valid" time="1.40" steps="438"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC permutation_circuit.23.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="5.73" steps="435"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC permutation_circuit.23.1" expl="equality hypothesis" proved="true">
   <transf name="replace" proved="true" arg1="(inv_func f (to_fset 0 n) (to_fset 0 n) (f @ i))" arg2="i">
    <goal name="VC permutation_circuit.23.1.0" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="1.10" steps="432"/></proof>
    </goal>
    <goal name="VC permutation_circuit.23.1.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="inv_rec">
     <goal name="VC permutation_circuit.23.1.1.0" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="0.78" steps="432"/></proof>
     </goal>
     <goal name="VC permutation_circuit.23.1.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="4.53" steps="434"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC permutation_circuit.24" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.83" steps="434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC with_permutation" expl="VC for with_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC with_permutation.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.94" steps="426"/></proof>
  </goal>
  <goal name="VC with_permutation.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.37" steps="427"/></proof>
  </goal>
  <goal name="VC with_permutation.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.45" steps="430"/></proof>
  </goal>
  <goal name="VC with_permutation.3" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_size_c">
     <goal name="VC with_permutation.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="1.79"/></proof>
     </goal>
     <goal name="VC with_permutation.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="1.12" steps="406"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_ancillas_c">
     <goal name="VC with_permutation.4.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="1.75"/></proof>
     </goal>
     <goal name="VC with_permutation.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.87" steps="408"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="4.40" steps="442"/></proof>
  </goal>
  <goal name="VC with_permutation.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_range_c">
     <goal name="VC with_permutation.6.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="2.23"/></proof>
     </goal>
     <goal name="VC with_permutation.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.86" steps="412"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_angle_c">
     <goal name="VC with_permutation.7.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC with_permutation.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ang_zero_add">
       <goal name="VC with_permutation.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
        <goal name="VC with_permutation.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
         <goal name="VC with_permutation.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="pps&#39;invariant">
           <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="qbit_permutation_spec1">
              <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="2.17"/></proof>
              </goal>
              <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="0.94" steps="418"/></proof>
              </goal>
              <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="6.68"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC with_permutation.7.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="6.65"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC with_permutation.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="7.05"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="1.16" steps="414"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.8.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_basis_ket_c">
     <goal name="VC with_permutation.8.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC with_permutation.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC with_permutation.8.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
        <goal name="VC with_permutation.8.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="VC with_permutation.8.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
          <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="pps&#39;invariant1">
           <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="qbit_permutation_spec1">
              <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="7.55"/></proof>
              </goal>
              <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="0.83" steps="422"/></proof>
              </goal>
              <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="2.12"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="5"><result status="valid" time="7.24"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation.8.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="5.83"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation.8.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.92" steps="418"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.64" steps="429"/></proof>
  </goal>
  <goal name="VC with_permutation.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="431"/></proof>
  </goal>
  <goal name="VC with_permutation.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.62" steps="431"/></proof>
  </goal>
  <goal name="VC with_permutation.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.54" steps="443"/></proof>
  </goal>
  <goal name="VC with_permutation.13" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.13.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.13.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_size_c">
     <goal name="VC with_permutation.13.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="1.45"/></proof>
     </goal>
     <goal name="VC with_permutation.13.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.98" steps="419"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.14" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.14.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.14.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_ancillas_c">
     <goal name="VC with_permutation.14.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="1.49"/></proof>
     </goal>
     <goal name="VC with_permutation.14.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.78" steps="421"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.15" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.66" steps="455"/></proof>
  </goal>
  <goal name="VC with_permutation.16" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.16.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.16.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_range_c">
     <goal name="VC with_permutation.16.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="1.75"/></proof>
     </goal>
     <goal name="VC with_permutation.16.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="1.01" steps="425"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.17" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.17.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.17.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_angle_c">
     <goal name="VC with_permutation.17.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ang_add_zero_d">
      <goal name="VC with_permutation.17.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H8">
      </transf>
      </goal>
      <goal name="VC with_permutation.17.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="5.80"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation.17.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="1.09" steps="427"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.18" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC with_permutation.18.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC with_permutation.18.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="sequence_basis_ket_c">
     <goal name="VC with_permutation.18.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC with_permutation.18.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC with_permutation.18.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="qbit_permutation_spec1">
        <goal name="VC with_permutation.18.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC with_permutation.18.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="H10">
          <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="permutation_circuit_spec1">
           <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="(inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i)" arg2="(inv_func f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) i)">
            <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
             <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
             <proof prover="2"><result status="valid" time="1.92"/></proof>
             </goal>
             <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="6.31"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.93" steps="431"/></proof>
           </goal>
           <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.95" steps="431"/></proof>
           </goal>
           <goal name="VC with_permutation.18.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.98" steps="431"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation.18.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="5.75"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC with_permutation.18.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.90" steps="431"/></proof>
        </goal>
        <goal name="VC with_permutation.18.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="0.94" steps="431"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation.18.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="1.10" steps="431"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.19" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC with_permutation.19.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC with_permutation.19.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(inv_func f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) i)" arg2="(inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i)">
     <goal name="VC with_permutation.19.0.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_definition" proved="true" >
      <goal name="VC with_permutation.19.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
       <goal name="VC with_permutation.19.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
        <goal name="VC with_permutation.19.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC with_permutation.19.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="pps&#39;invariant1">
          <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ (f @ i))" arg2="i">
             <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
              <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <proof prover="0"><result status="valid" time="6.71"/></proof>
              </goal>
              <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.89" steps="437"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
              <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
              <proof prover="2"><result status="valid" time="2.16"/></proof>
              </goal>
              <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <transf name="assert" proved="true" arg1="(f (inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ (f @ i)) = f i)">
               <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
               <proof prover="0"><result status="valid" time="7.57"/></proof>
               </goal>
               <goal name="VC with_permutation.19.0.0.0.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="2.61"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation.19.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.06" steps="431"/></proof>
          </goal>
          <goal name="VC with_permutation.19.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_c c))" arg2="(width_c c)">
           <goal name="VC with_permutation.19.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="(mem  (inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i) (to_fset 0 (width_c c)))">
            <goal name="VC with_permutation.19.0.0.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
            <transf name="apply" proved="true" arg1="inv_f_spec2">
             <goal name="VC with_permutation.19.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="0.98" steps="431"/></proof>
             </goal>
             <goal name="VC with_permutation.19.0.0.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.81"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation.19.0.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.61"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation.19.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="1.64"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation.19.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
      <goal name="VC with_permutation.19.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="4.38" steps="463"/></proof>
      </goal>
      <goal name="VC with_permutation.19.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.72"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC with_permutation.19.1" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC with_permutation.19.1.0" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.84" steps="461"/></proof>
    </goal>
    <goal name="VC with_permutation.19.1.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.58" steps="461"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC with_permutation_get_ket" expl="VC for with_permutation_get_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC with_permutation_get_ket.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pat_sem_apply_basis_value">
   <goal name="VC with_permutation_get_ket.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pat_sem_apply_basis_value">
    <goal name="VC with_permutation_get_ket.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq_t">
     <goal name="VC with_permutation_get_ket.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.56"/></proof>
     </goal>
     <goal name="VC with_permutation_get_ket.0.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq_gen">
      <goal name="VC with_permutation_get_ket.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.78"/></proof>
      </goal>
      <goal name="VC with_permutation_get_ket.0.0.0.1.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mult_eq_t">
         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="with_permutation_spec2">
           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(ang_ind_c c
     (getbv (make_bv (fun (i:int) -&gt; getbv x1 @ (f @ i)) (width_c c)))
     (getbv x))" arg2="(ang_ind_c c (fun (i:int) -&gt; getbv x1 @ (f @ i)) (getbv x))">
            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="eliminate_definition" proved="true" >
             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
              <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant">
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                  </transf>
                  </goal>
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="0"><result status="valid" time="6.90"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="0"><result status="valid" time="6.27"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="3"><result status="valid" time="1.00" steps="400"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.65" steps="428"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_">
          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_">
           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="((make_bv
   (fun (y3:int) -&gt;
     basis_ket_c (with_permutation c f) (getbv x1) (getbv x) y3)
   (width_c (with_permutation c f))) =  y)">
            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
            <transf name="assert" proved="true" arg1="((make_bv
     (fun (y3:int) -&gt;
       basis_ket_c c
       (getbv (make_bv (fun (i:int) -&gt; getbv x1 @ (f @ i)) (width_c c)))
       (getbv x) y3)
     (width_c c))
 =   (make_bv (fun (i:int) -&gt; getbv y @ (f @ i)) (width_c c)))">
             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="apply" proved="true" arg1="set_equal_bv_make_">
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="4.23" steps="432"/></proof>
              </goal>
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="eliminate_definition" proved="true" >
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="6.67"/></proof>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="6.74"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="6.88"/></proof>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.68"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                     <proof prover="3"><result status="valid" time="1.10" steps="402"/></proof>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="6.36"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.92"/></proof>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.18"/></proof>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.81"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0.2" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0.2.0" expl="apply premises" proved="true">
                     <proof prover="3"><result status="valid" time="0.99" steps="402"/></proof>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.1.0.1.0.0.0.2.1" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="8.38"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="y" arg2="(make_bv
  (fun (y3:int) -&gt; basis_ket_c (with_permutation c f) (getbv x1) (getbv x) y3)
  (width_c (with_permutation c f)))">
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="with_permutation_spec1">
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ (f @ i))" arg2="i">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="eliminate_definition" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant1">
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="7.10"/></proof>
                             </goal>
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                             <transf name="split_vc" proved="true" >
                              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                              <transf name="compute_specified" proved="true" >
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                               <proof prover="0"><result status="valid" time="6.26"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                              <transf name="compute_specified" proved="true" >
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                               <proof prover="0"><result status="valid" time="5.64"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                             <proof prover="0"><result status="valid" time="5.49"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="0.95" steps="402"/></proof>
                          </goal>
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                          <proof prover="0"><result status="valid" time="5.46"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                      <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                       <proof prover="3"><result status="valid" time="3.69" steps="436"/></proof>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                       <proof prover="3"><result status="valid" time="3.32" steps="438"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="3"><result status="valid" time="0.50" steps="434"/></proof>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <transf name="assert" proved="true" arg1="(mem (f i) (to_fset 0 (width_c c)))">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.2.0" expl="asserted formula" proved="true">
                      <transf name="instantiate" proved="true" arg1="get_bijective3" arg2="f,(to_fset 0 (width_c c)),(to_fset 0 (width_c c))">
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
                       <transf name="apply" proved="true" arg1="Hinst">
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="0.51" steps="436"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="3.81" steps="438"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                      <proof prover="3"><result status="valid" time="3.85" steps="437"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                    <transf name="eliminate_definition" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="6.74"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="6.24"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="6.33"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="6.10"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="5.35"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.1.0.0.0.1.2" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.87"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <transf name="assert" proved="true" arg1="(mem (f i) (to_fset 0 (width_c c)))">
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.2.0" expl="asserted formula" proved="true">
                    <transf name="instantiate" proved="true" arg1="get_bijective3" arg2="f,(to_fset 0 (width_c c)),(to_fset 0 (width_c c))">
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
                     <transf name="apply" proved="true" arg1="Hinst">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="0.59" steps="436"/></proof>
                      </goal>
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                      <proof prover="3"><result status="valid" time="3.58" steps="438"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.19"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="3"><result status="valid" time="0.71" steps="434"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1" expl="true case (apply premises)" proved="true">
             <transf name="rewrite" proved="true" arg1="h">
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0" expl="true case (apply premises)" proved="true">
              <transf name="rewrite" proved="true" arg1="h1">
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0" expl="true case (apply premises)" proved="true">
               <transf name="rewrite" proved="true" arg1="indic_spec">
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                <transf name="rewrite" proved="true" arg1="indic_spec">
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
                 <transf name="eliminate_if" proved="true" >
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                   <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
                   </goal>
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
                   <transf name="assert" proved="true" arg1="(forall x:bitvec. not x = x -&gt; c_one = c_zero)">
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                    <proof prover="3"><result status="valid" time="0.83" steps="434"/></proof>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.1.1" expl="true case (apply premises)" proved="true">
                    <transf name="instantiate" proved="true" arg1="h" arg2="(make_bv (fun (i:int) -&gt; getbv y @ (f @ i)) (width_c c))">
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.1.1.0" expl="true case (apply premises)" proved="true">
                     <transf name="apply" proved="true" arg1="Hinst">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="H">
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.2" expl="true case (apply premises)" proved="true">
                   <proof prover="3"><result status="valid" time="0.65" steps="432"/></proof>
                   </goal>
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.0.1.0.0.0.0.0.3" expl="true case (apply premises)" proved="true">
                   <proof prover="3"><result status="valid" time="0.63" steps="432"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1" expl="false case (apply premises)" proved="true">
            <transf name="case" proved="true" arg1="((make_bv
     (fun (y3:int) -&gt;
       basis_ket_c c
       (getbv (make_bv (fun (i:int) -&gt; getbv x1 @ (f @ i)) (width_c c)))
       (getbv x) y3)
     (width_c c))
   = (make_bv (fun (i:int) -&gt; getbv y @ (f @ i)) (width_c c)))">
             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0" expl="false case (true case. apply premises)" proved="true">
             <transf name="assert" proved="true" arg1="((make_bv
   (fun (y3:int) -&gt;
     basis_ket_c (with_permutation c f) (getbv x1) (getbv x) y3)
   (width_c (with_permutation c f)))
= y)">
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_bv">
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="3.85" steps="434"/></proof>
                </goal>
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="eliminate_definition" proved="true" >
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                   <transf name="split_all_full" proved="true" >
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.09"/></proof>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.88"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.76"/></proof>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.78"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.73" steps="404"/></proof>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.90"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.79"/></proof>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.84"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="5.35"/></proof>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.87"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                       <proof prover="3"><result status="valid" time="0.76" steps="404"/></proof>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.1.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.84"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                <proof prover="3"><result status="valid" time="4.07" steps="434"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="instantiate" proved="true" arg1="get_equal_bv" arg2="(make_bv
  (fun (y3:int) -&gt;
    basis_ket_c c
    (getbv (make_bv (fun (i1:int) -&gt; getbv x1 @ (f @ i1)) (width_c c)))
    (getbv x) y3)
  (width_c c)),(make_bv (fun (i1:int) -&gt; getbv y @ (f @ i1)) (width_c c))">
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="destruct" proved="true" arg1="Hinst">
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.0" expl="destruct premise" proved="true">
                    <transf name="apply" proved="true" arg1="h">
                    </transf>
                    </goal>
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="Hinst">
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="instantiate" proved="true" arg1="Hinst" arg2="(inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i)">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="destruct" proved="true" arg1="Hinst">
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.0" expl="destruct premise" proved="true">
                       <transf name="assert" proved="true" arg1="(mem (inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i) (to_fset 0 (width_c c)))">
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                        <transf name="assert" proved="true" arg1="(mem ( i) (to_fset 0 (width_c c)))">
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
                         <proof prover="0"><result status="valid" time="1.48"/></proof>
                         </goal>
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.0.0.1" expl="asserted formula" proved="true">
                         <proof prover="0"><result status="valid" time="1.73"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.0.1" expl="destruct premise" proved="true">
                        <proof prover="3"><result status="valid" time="4.51" steps="440"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                       <transf name="replace" proved="true" arg1="(getbv
   (make_bv
    (fun (y3:int) -&gt;
      basis_ket_c c
      (getbv (make_bv (fun (i1:int) -&gt; getbv x1 @ (f @ i1)) (width_c c)))
      (getbv x) y3)
    (width_c c))
   @ (inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i))" arg2="(getbv
   (make_bv
    (fun (y3:int) -&gt;
      basis_ket_c (with_permutation c f) (getbv x1) (getbv x) y3)
    (width_c (with_permutation c f)))
   @ i)" arg3="in" arg4="Hinst">
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="Hinst">
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="inv_f_back">
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                            <proof prover="3"><result status="valid" time="0.61" steps="438"/></proof>
                            </goal>
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                            <proof prover="0"><result status="valid" time="1.87"/></proof>
                            </goal>
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                            <proof prover="3"><result status="valid" time="0.63" steps="438"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                           <proof prover="3"><result status="valid" time="4.11" steps="444"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                          <transf name="assert" proved="true" arg1="(mem (inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i) (to_fset 0 (width_c c)))">
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.2.0" expl="asserted formula" proved="true">
                           <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.2.0.0" expl="asserted formula" proved="true">
                            <proof prover="0"><result status="valid" time="2.04"/></proof>
                            </goal>
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.2.0.1" expl="asserted formula" proved="true">
                            <proof prover="0"><result status="valid" time="1.76"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                           <proof prover="3"><result status="valid" time="4.44" steps="442"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
                        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
                         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0" expl="equality hypothesis" proved="true">
                           <transf name="rewrite" proved="true" arg1="with_permutation_spec1">
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0" expl="equality hypothesis" proved="true">
                            <transf name="eliminate_definition" proved="true" >
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
                             <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
                              <transf name="split_all_full" proved="true" >
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
                               <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
                                <transf name="apply" proved="true" arg1="pps&#39;invariant1">
                                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                                 <transf name="split_vc" proved="true" >
                                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                                   <proof prover="2"><result status="valid" time="2.10"/></proof>
                                   </goal>
                                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                                   <transf name="compute_specified" proved="true" >
                                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                                    <proof prover="2"><result status="valid" time="2.37"/></proof>
                                    </goal>
                                   </transf>
                                   </goal>
                                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                                   <proof prover="0"><result status="valid" time="6.05"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                                 <transf name="split_vc" proved="true" >
                                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                                  <proof prover="3"><result status="valid" time="0.93" steps="410"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                                 <transf name="assert" proved="true" arg1="(mem (inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i) (to_fset 0 (width_c c)))">
                                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.2.0" expl="asserted formula" proved="true">
                                  <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
                                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
                                   <proof prover="2"><result status="valid" time="2.04"/></proof>
                                   </goal>
                                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.2.0.1" expl="asserted formula" proved="true">
                                   <proof prover="2"><result status="valid" time="2.10"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                                  <proof prover="0"><result status="valid" time="6.38"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                            <proof prover="3"><result status="valid" time="0.72" steps="438"/></proof>
                            </goal>
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                            <proof prover="0"><result status="valid" time="1.63"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
                           <transf name="eliminate_definition" proved="true" >
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0" expl="rewrite premises" proved="true">
                            <transf name="split_all_full" proved="true" >
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                             <transf name="split_vc" proved="true" >
                              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                              <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                                <proof prover="2"><result status="valid" time="1.88"/></proof>
                                </goal>
                                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                                <proof prover="2"><result status="valid" time="1.94"/></proof>
                                </goal>
                                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                                <proof prover="2"><result status="valid" time="2.19"/></proof>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                             <transf name="split_vc" proved="true" >
                              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                              <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                                <proof prover="2"><result status="valid" time="2.22"/></proof>
                                </goal>
                                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                                <proof prover="2"><result status="valid" time="1.76"/></proof>
                                </goal>
                                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
                                <proof prover="2"><result status="valid" time="1.73"/></proof>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                          <proof prover="3"><result status="valid" time="0.59" steps="438"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1" expl="rewrite premises" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                          <transf name="eliminate_definition" proved="true" >
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0" expl="rewrite premises" proved="true">
                           <transf name="split_all_full" proved="true" >
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.0" expl="rewrite premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.0.0" expl="rewrite premises" proved="true">
                             <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                              <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.02"/></proof>
                               </goal>
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.92"/></proof>
                               </goal>
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.80"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.1" expl="rewrite premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.1.0" expl="rewrite premises" proved="true">
                             <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                              <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.96"/></proof>
                               </goal>
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.90"/></proof>
                               </goal>
                               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.1.0.0.1.0.0.2" expl="apply premises" proved="true">
                               <proof prover="0"><result status="valid" time="5.61"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.2" expl="rewrite premises" proved="true">
                         <transf name="assert" proved="true" arg1="(mem (inv_f f (to_fset 0 (width_c c)) (to_fset 0 (width_c c)) @ i) (to_fset 0 (width_c c)))">
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.2.0" expl="asserted formula" proved="true">
                          <transf name="assert" proved="true" arg1="(mem i (to_fset 0 (width_c c)))">
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.2.0.0" expl="asserted formula" proved="true">
                           <proof prover="2"><result status="valid" time="2.12"/></proof>
                           </goal>
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.2.0.1" expl="asserted formula" proved="true">
                           <proof prover="0"><result status="valid" time="1.68"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.0.0.1.1.2.1" expl="rewrite premises" proved="true">
                          <proof prover="3"><result status="valid" time="4.00" steps="442"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                      <transf name="eliminate_definition" proved="true" >
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.0" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.0.0" expl="rewrite premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.95"/></proof>
                           </goal>
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.97"/></proof>
                           </goal>
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.84"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.1.0" expl="rewrite premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.18"/></proof>
                           </goal>
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.80"/></proof>
                           </goal>
                           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.1.0.0.1.0.0.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.91"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                     <proof prover="3"><result status="valid" time="3.53" steps="439"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="eliminate_definition" proved="true" >
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.89"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.81"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="5.85"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.78"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="0.70" steps="408"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.0.0.2.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.12"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.84"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.03"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.96"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="5.54"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="0.81" steps="408"/></proof>
                        </goal>
                        <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.1.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="5.74"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
                 <proof prover="3"><result status="valid" time="3.45" steps="438"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.1" expl="false case (true case. apply premises)" proved="true">
              <transf name="rewrite" proved="true" arg1="h">
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.1.0" expl="false case (true case. apply premises)" proved="true">
               <transf name="rewrite" proved="true" arg1="h1">
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.0.1.0.0" expl="false case (true case. apply premises)" proved="true">
                <proof prover="3"><result status="valid" time="0.87" steps="432"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1" expl="false case (apply premises)" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0" expl="false case (apply premises)" proved="true">
              <transf name="rewrite" proved="true" arg1="indic_spec">
               <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0" expl="false case (apply premises)" proved="true">
               <transf name="rewrite" proved="true" arg1="indic_spec">
                <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0" expl="false case (apply premises)" proved="true">
                <transf name="eliminate_if" proved="true" >
                 <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.0" expl="false case (apply premises)" proved="true">
                  <proof prover="3"><result status="valid" time="0.90" steps="400"/></proof>
                  </goal>
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.1" expl="false case (apply premises)" proved="true">
                  <proof prover="3"><result status="valid" time="0.82" steps="400"/></proof>
                  </goal>
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.2" expl="false case (apply premises)" proved="true">
                  <transf name="assert" proved="true" arg1="(forall x: bitvec. not x= x -&gt; c_zero= c_one )">
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.2.0" expl="asserted formula" proved="true">
                   <proof prover="3"><result status="valid" time="0.84" steps="402"/></proof>
                   </goal>
                   <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.2.1" expl="false case (apply premises)" proved="true">
                   <transf name="instantiate" proved="true" arg1="h" arg2="(make_bv (fun (i:int) -&gt; getbv y @ (f @ i)) (width_c c))">
                    <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.2.1.0" expl="false case (apply premises)" proved="true">
                    <transf name="apply" proved="true" arg1="Hinst">
                     <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="H" arg2="in" arg3="h1">
                      <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="h1">
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.0.1.1.0.0.0.0.3" expl="false case (apply premises)" proved="true">
                  <proof prover="3"><result status="valid" time="1.29" steps="402"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="4.92" steps="430"/></proof>
           </goal>
           <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.2" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="make_bv_length">
            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.2.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.2.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="4.76" steps="433"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.0.2.1" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="4.59" steps="430"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="4.51" steps="430"/></proof>
          </goal>
          <goal name="VC with_permutation_get_ket.0.0.0.1.1.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="3.31" steps="430"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC with_permutation_get_ket.0.0.1" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="make_bv_length">
     <goal name="VC with_permutation_get_ket.0.0.1.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC with_permutation_get_ket.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="3.42" steps="431"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation_get_ket.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="4.06" steps="428"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC with_permutation_get_ket.0.0.2" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(power_ 2 (width_c c))" arg2="(power 2 (length ((make_bv (fun (i:int) -&gt; getbv y @ (f @ i)) (width_c c)))))">
     <goal name="VC with_permutation_get_ket.0.0.2.0" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC with_permutation_get_ket.0.0.2.0.0" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="4.15" steps="428"/></proof>
      </goal>
      <goal name="VC with_permutation_get_ket.0.0.2.0.1" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="bv_to_int_bound">
       <goal name="VC with_permutation_get_ket.0.0.2.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC with_permutation_get_ket.0.0.2.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="3.95" steps="428"/></proof>
        </goal>
        <goal name="VC with_permutation_get_ket.0.0.2.0.1.0.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC with_permutation_get_ket.0.0.2.0.1.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="4.16" steps="431"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC with_permutation_get_ket.0.0.2.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="3.55" steps="428"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation_get_ket.0.0.2.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_length">
      <goal name="VC with_permutation_get_ket.0.0.2.1.0" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.22"/></proof>
      </goal>
      <goal name="VC with_permutation_get_ket.0.0.2.1.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC with_permutation_get_ket.0.0.2.1.1.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="4.53" steps="431"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC with_permutation_get_ket.0.0.2.1.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="4.15" steps="428"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC with_permutation_get_ket.0.1" expl="rewrite premises" proved="true">
   <proof prover="3"><result status="valid" time="3.41" steps="428"/></proof>
   </goal>
   <goal name="VC with_permutation_get_ket.0.2" expl="rewrite premises" proved="true">
   <transf name="replace" proved="true" arg1="(power_ 2 (width_c (with_permutation c f)))" arg2="(power 2 (length y))">
    <goal name="VC with_permutation_get_ket.0.2.0" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.83" steps="427"/></proof>
    </goal>
    <goal name="VC with_permutation_get_ket.0.2.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="power_to_">
     <goal name="VC with_permutation_get_ket.0.2.1.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="power__eq">
      <goal name="VC with_permutation_get_ket.0.2.1.0.0" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="0.65" steps="426"/></proof>
      </goal>
      <goal name="VC with_permutation_get_ket.0.2.1.0.1" expl="apply premises" proved="true">
      <proof prover="3"><result status="valid" time="3.39" steps="428"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation_get_ket.0.2.1.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="3.41" steps="428"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC with_permutation_kronecker" expl="VC for with_permutation_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC with_permutation_kronecker.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="3.08"/></proof>
  </goal>
  <goal name="VC with_permutation_kronecker.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC with_permutation_kronecker.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="(if e&#39;&lt; (n-k) then e&#39; + k else e&#39; - (n-k))">
    <goal name="VC with_permutation_kronecker.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC with_permutation_kronecker.1.0.0.0" proved="true">
     <proof prover="0"><result status="valid" time="1.81"/></proof>
     </goal>
     <goal name="VC with_permutation_kronecker.1.0.0.1" proved="true">
     <proof prover="0"><result status="valid" time="2.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.2" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC with_permutation_kronecker.2.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="with_permutation_spec4">
    <goal name="VC with_permutation_kronecker.2.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.77" steps="445"/></proof>
    </goal>
    <goal name="VC with_permutation_kronecker.2.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(width_c c)" arg2="n">
     <goal name="VC with_permutation_kronecker.2.0.1.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="H">
     </transf>
     </goal>
     <goal name="VC with_permutation_kronecker.2.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.65" steps="445"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.3" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(width_c c)" arg2="n">
   <goal name="VC with_permutation_kronecker.3.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H7">
   </transf>
   </goal>
   <goal name="VC with_permutation_kronecker.3.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="0.61" steps="455"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.4" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(width_c
   (with_permutation c (fun (i:int) -&gt; if i &lt; k then (i + n) - k else i - k)))" arg2="((n-k)+k)">
   <goal name="VC with_permutation_kronecker.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.36"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker.4.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="H4">
    <goal name="VC with_permutation_kronecker.4.1.0" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="0.78" steps="463"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.5" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="n">
   <goal name="VC with_permutation_kronecker.5.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC with_permutation_kronecker.5.0.0" proved="true">
    <transf name="rewrite" proved="true" arg1="H6" arg2="in" arg3="H1">
     <goal name="VC with_permutation_kronecker.5.0.0.0" proved="true">
     <transf name="replace" proved="true" arg1="(width_c c)" arg2="n" arg3="in" arg4="H1">
      <goal name="VC with_permutation_kronecker.5.0.0.0.0" proved="true">
      <transf name="apply" proved="true" arg1="H1">
      </transf>
      </goal>
      <goal name="VC with_permutation_kronecker.5.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.88" steps="467"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC with_permutation_kronecker.5.0.1" proved="true">
    <proof prover="0"><result status="valid" time="1.33"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.6" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker ant_d ant_c)" arg2="(bv_to_ket (concat (ket_to_bv ant_d) (ket_to_bv ant_c)))">
   <goal name="VC with_permutation_kronecker.6.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="i" arg2="(bv_to_int (int_to_bv i n))">
    <goal name="VC with_permutation_kronecker.6.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="with_permutation_get_ket">
     <goal name="VC with_permutation_kronecker.6.0.0.0" expl="precondition" proved="true">
     <transf name="replace" proved="true" arg1="(make_bv
     (fun (i1:int) -&gt;
       getbv (concat (ket_to_bv ant_d) (ket_to_bv ant_c))
       @ ((fun (i2:int) -&gt; if i2 &lt; k then (i2 + n) - k else i2 - k) @ i1))
     (width_c c))" arg2="(concat  (ket_to_bv ant_c) (ket_to_bv ant_d))">
      <goal name="VC with_permutation_kronecker.6.0.0.0.0" expl="precondition" proved="true">
      <transf name="replace" proved="true" arg1="(path_sem_c c (bv_to_ket (concat (ket_to_bv ant_c) (ket_to_bv ant_d))))" arg2="(kronecker im_c im_d)">
       <goal name="VC with_permutation_kronecker.6.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="replace" proved="true" arg1="(make_bv
    (fun (i1:int) -&gt;
      getbv (int_to_bv i n)
      @ ((fun (i2:int) -&gt; if i2 &lt; k then (i2 + n) - k else i2 - k) i1))
    (width_c c))" arg2="(concat (tpart (int_to_bv i n )(n-k)) (hpart (int_to_bv i n) (n-k)))">
        <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="ket_kronecker_values">
         <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_kronecker_values">
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0" expl="precondition" proved="true">
          <transf name="apply" proved="true" arg1="mult_eq_t_rev">
           <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(rows im_d)" arg2="(power_ 2 (n-k))">
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(rows im_c)" arg2="(power_ 2 k)">
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="bv_to_int_hpart_rev" arg2="(concat (tpart (int_to_bv i n) (n-k)) (hpart (int_to_bv i n) (n-k))),k,(n-k)
">
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="instantiate" proved="true" arg1="bv_to_int_tpart_rev" arg2="(int_to_bv i n),(n-k),k">
                <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="Hinst">
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.41"/></proof>
                 </goal>
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.16"/></proof>
                 </goal>
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.60"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.37"/></proof>
               </goal>
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.07"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="1.45"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="1.70"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="instantiate" proved="true" arg1="bv_to_int_tpart_rev" arg2="(concat (tpart (int_to_bv i n) (n-k)) (hpart (int_to_bv i n) (n-k))),k,(n-k)
">
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(rows im_d)" arg2="(power_ 2 (n-k))">
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="Hinst">
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(rows im_c)" arg2="(power_ 2 k)">
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
               <transf name="instantiate" proved="true" arg1="bv_to_int_hpart_rev" arg2="(int_to_bv i n),(n-k),k">
                <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="Hinst">
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.17"/></proof>
                 </goal>
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.40"/></proof>
                 </goal>
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.39"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="1.79"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.32"/></proof>
              </goal>
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.45"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="1.76"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="5.21" steps="479"/></proof>
          </goal>
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="4.62" steps="479"/></proof>
          </goal>
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.35"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="4.59" steps="479"/></proof>
         </goal>
         <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="5.10" steps="479"/></proof>
         </goal>
         <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.44"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_bv">
         <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="concat_length">
           <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="tpart_length">
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="hpart_spec4">
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.47"/></proof>
              </goal>
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="0.76" steps="477"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="1.03" steps="475"/></proof>
             </goal>
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.47"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.49"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="0.61" steps="477"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
           <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="concat_value_left">
                <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="tpart_value_b">
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.60" steps="481"/></proof>
                 </goal>
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="3"><result status="valid" time="0.61" steps="481"/></proof>
                 </goal>
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.40"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.47"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="concat_value_right">
                <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="hpart_value_b">
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.27"/></proof>
                 </goal>
                 <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.47"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.44"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.49"/></proof>
               </goal>
               <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.46"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="0.63" steps="479"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.41"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.62" steps="479"/></proof>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.36"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.60" steps="479"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC with_permutation_kronecker.6.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.35"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC with_permutation_kronecker.6.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC with_permutation_kronecker.6.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="concat_length">
          <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.44"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.55"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="0.75" steps="477"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
            <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="concat_value_right">
               <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="concat_value_left">
                <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.42"/></proof>
                </goal>
                <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.51"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.54"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="concat_value_left">
               <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="concat_value_right">
                <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.41"/></proof>
                </goal>
                <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.23"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.27"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.33"/></proof>
              </goal>
              <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.30"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="0.56" steps="479"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.34"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
           <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.58" steps="479"/></proof>
           </goal>
           <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.2.1" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.2.1.0" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.53"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC with_permutation_kronecker.6.0.0.0.1.0.1.0.2.2" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="0.61" steps="479"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC with_permutation_kronecker.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.69"/></proof>
     </goal>
     <goal name="VC with_permutation_kronecker.6.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="6.04" steps="479"/></proof>
     </goal>
     <goal name="VC with_permutation_kronecker.6.0.0.3" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(width_c c)" arg2="n">
      <goal name="VC with_permutation_kronecker.6.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="H19">
      </transf>
      </goal>
      <goal name="VC with_permutation_kronecker.6.0.0.3.1" expl="equality hypothesis" proved="true">
      <proof prover="3"><result status="valid" time="0.59" steps="477"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC with_permutation_kronecker.6.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
     <goal name="VC with_permutation_kronecker.6.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="0.91" steps="477"/></proof>
     </goal>
     <goal name="VC with_permutation_kronecker.6.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="0.87" steps="477"/></proof>
     </goal>
     <goal name="VC with_permutation_kronecker.6.0.1.2" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(ket_length
     (path_sem_c
      (with_permutation c
       (fun (i1:int) -&gt; if i1 &lt; k then (i1 + n) - k else i1 - k))
      (kronecker ant_d ant_c)))" arg2="n" arg3="in" arg4="H">
      <goal name="VC with_permutation_kronecker.6.0.1.2.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.02"/></proof>
      </goal>
      <goal name="VC with_permutation_kronecker.6.0.1.2.1" expl="equality hypothesis" proved="true">
      <transf name="assert" proved="true" arg1="(forall x: matrix complex. is_a_ket_l x n -&gt; ket_length x = n)">
       <goal name="VC with_permutation_kronecker.6.0.1.2.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="1.42"/></proof>
       </goal>
       <goal name="VC with_permutation_kronecker.6.0.1.2.1.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="h">
        <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="path_sem_ket_l_c">
         <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="with_permutation_spec4">
           <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.45"/></proof>
           </goal>
           <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width_c c)" arg2="n">
            <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="H19">
            </transf>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="0.60" steps="477"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="with_permutation_spec4">
           <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.95" steps="477"/></proof>
           </goal>
           <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.1.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width_c c)" arg2="n">
            <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.1.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="H19">
            </transf>
            </goal>
            <goal name="VC with_permutation_kronecker.6.0.1.2.1.1.0.1.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="3"><result status="valid" time="1.06" steps="477"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC with_permutation_kronecker.6.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC with_permutation_kronecker_gen" expl="VC for with_permutation_kronecker_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC with_permutation_kronecker_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="with_permutation_kronecker">
   <goal name="VC with_permutation_kronecker_gen.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.95"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.69"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.2" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.3" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.4" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.5" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.88"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.6" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.66"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.7" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.65"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker_gen.0.8" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.61"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cont" proved="true">
 <goal name="VC cont_zero_path_sem_kron_c" expl="VC for cont_zero_path_sem_kron_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_zero_path_sem_kron_c.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket 1 0)" arg2="(bv_to_ket (make_bv (fun _ -&gt; 0) 1))">
   <goal name="VC cont_zero_path_sem_kron_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
    <goal name="VC cont_zero_path_sem_kron_c.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="cont_zero_c_spec1">
      <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="concat_length">
       <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.96"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.58"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.74"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="concat_value_left">
       <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.80"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.68"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.76"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.94"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.97"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.0.0.0.0.1.1.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.96"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_zero_path_sem_kron_c.0.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC cont_zero_path_sem_kron_c.0.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
     <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ket_eq">
      <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.53"/></proof>
      </goal>
      <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length">
       <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.78"/></proof>
       </goal>
       <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.82"/></proof>
       </goal>
       <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.59"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
       <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_isum_one">
        <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="zero_mult_int">
          <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.70"/></proof>
          </goal>
          <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
           <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.48"/></proof>
           </goal>
           <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.76"/></proof>
           </goal>
           <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.75"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.57"/></proof>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.1.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.57"/></proof>
          </goal>
          <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.59"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.0.1.0.0.2.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.68"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_zero_path_sem_kron_c.1" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket 1 1)" arg2="(bv_to_ket (make_bv (fun _ -&gt; 1 ) 1))">
   <goal name="VC cont_zero_path_sem_kron_c.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
    <goal name="VC cont_zero_path_sem_kron_c.1.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="cont_zero_c_spec">
      <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
       <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="place_kron_right_c">
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.05"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.93"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="make_bv_length">
          <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.80"/></proof>
           </goal>
           <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.83"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.37"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.38"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="concat_length">
       <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.01"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.69"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.21"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="concat_value_left">
       <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.87"/></proof>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.82"/></proof>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.89"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.72"/></proof>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.95"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1.0" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.24"/></proof>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.30"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1.1.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.77"/></proof>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1.1.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.59"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.0.0.0.2.1.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.91"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_zero_path_sem_kron_c.1.1" expl="equality hypothesis" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC cont_zero_path_sem_kron_c.1.1.0" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
     <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="ket_eq">
      <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.59"/></proof>
      </goal>
      <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length">
       <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.59"/></proof>
       </goal>
       <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.81"/></proof>
       </goal>
       <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.58"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
       <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ind_isum_one">
        <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="one_mult">
          <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.40"/></proof>
           </goal>
           <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.73"/></proof>
           </goal>
           <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.79"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
           <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.32"/></proof>
           </goal>
           <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.80"/></proof>
           </goal>
           <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.55"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.59"/></proof>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.1.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.94"/></proof>
          </goal>
          <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.95"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_zero_path_sem_kron_c.1.1.0.0.2.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.59"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_last_qbit_c" expl="VC for cont_last_qbit_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_last_qbit_c.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC cont_last_qbit_c.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.16"/></proof>
  </goal>
  <goal name="VC cont_last_qbit_c.2" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(fun (i:int) -&gt; if i &lt; 1 then i + width_c c else i - 1)" arg2="(fun (i:int) -&gt; if i &lt; 1 then (i + (width_c c + 1)) - 1 else i - 1)">
   <goal name="VC cont_last_qbit_c.2.0" expl="assertion" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
   <goal name="VC cont_last_qbit_c.2.1" expl="equality hypothesis" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_func">
    <goal name="VC cont_last_qbit_c.2.1.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_last_qbit_c.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="set_bijective_auto">
   <goal name="VC cont_last_qbit_c.3.0" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC cont_last_qbit_c.3.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC cont_last_qbit_c.3.0.0.0" expl="apply premises" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="VC cont_last_qbit_c.3.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC cont_last_qbit_c.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.55"/></proof>
       </goal>
       <goal name="VC cont_last_qbit_c.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.54"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_last_qbit_c.3.1" expl="apply premises" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC cont_last_qbit_c.3.1.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC cont_last_qbit_c.3.1.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(if e&#39; = width_c c then 0 else e&#39;+1)">
      <goal name="VC cont_last_qbit_c.3.1.0.0.0" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC cont_last_qbit_c.3.1.0.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="1.48"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.1" proved="true">
        <transf name="replace" proved="true" arg1="(width_c (cont_zero_c c))" arg2="((width_c (c) + 1))">
         <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.1.0" proved="true">
         <proof prover="2"><result status="valid" time="4.74"/></proof>
         </goal>
         <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="1.26"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.2" proved="true">
        <proof prover="2"><result status="valid" time="1.38"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.3" proved="true">
        <proof prover="2"><result status="valid" time="2.76"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.4" proved="true">
        <proof prover="2"><result status="valid" time="1.41"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.3.1.0.0.0.0.5" proved="true">
        <proof prover="2"><result status="valid" time="1.54"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_last_qbit_c.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.20"/></proof>
  <proof prover="3"><result status="valid" time="0.80" steps="448"/></proof>
  </goal>
  <goal name="VC cont_last_qbit_c.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.77"/></proof>
  <proof prover="3"><result status="valid" time="0.92" steps="449"/></proof>
  </goal>
  <goal name="VC cont_last_qbit_c.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.57"/></proof>
  <proof prover="3"><result status="valid" time="0.75" steps="450"/></proof>
  </goal>
  <goal name="VC cont_last_qbit_c.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.05"/></proof>
  </goal>
  <goal name="VC cont_last_qbit_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cont_last_qbit_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cont_last_qbit_c.8.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H18">
     <goal name="VC cont_last_qbit_c.8.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="H19">
      <goal name="VC cont_last_qbit_c.8.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.49"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.8.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="5.26"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.8.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.83"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.8.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.21"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.8.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.94"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.8.0.0.0.5" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.32"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.8.0.0.0.6" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="4.33"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_last_qbit_c.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cont_last_qbit_c.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cont_last_qbit_c.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H19">
     <goal name="VC cont_last_qbit_c.9.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="H20">
      <goal name="VC cont_last_qbit_c.9.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.03"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.9.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.26"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.9.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.83"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.9.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.73"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.9.0.0.0.4" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.22"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.9.0.0.0.5" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.89"/></proof>
      </goal>
      <goal name="VC cont_last_qbit_c.9.0.0.0.6" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_last_qbit_c.10" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(bv_to_ket bv)" arg2="(kronecker (bv_to_ket (hpart bv (width_c c))) (bv_to_ket (tpart bv (width_c c))))">
   <goal name="VC cont_last_qbit_c.10.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(bv_to_ket (tpart bv (width_c c)))" arg2="(ket 1 0)">
    <goal name="VC cont_last_qbit_c.10.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H3">
     <goal name="VC cont_last_qbit_c.10.0.0.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC cont_last_qbit_c.10.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.71"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cont_last_qbit_c.10.0.1" expl="equality hypothesis" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cont_last_qbit_c.10.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_ket_spec">
      <goal name="VC cont_last_qbit_c.10.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_ket_def">
       <goal name="VC cont_last_qbit_c.10.0.1.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="ket_eq">
        <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.61"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.50"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="bin_to_int_def">
         <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
          <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_isum_one">
           <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(getbv
    (make_bv (getbv (tpart bv (width_c c))) (length (tpart bv (width_c c))))
    @ 0)" arg2="0">
             <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.91"/></proof>
             </goal>
             <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="1.86"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.89"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.37"/></proof>
         </goal>
         <goal name="VC cont_last_qbit_c.10.0.1.0.0.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.85"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_last_qbit_c.10.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.11"/></proof>
       </goal>
       <goal name="VC cont_last_qbit_c.10.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.87"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_last_qbit_c.10.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
    <goal name="VC cont_last_qbit_c.10.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="bv_to_ket_eq">
     <goal name="VC cont_last_qbit_c.10.1.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.60"/></proof>
     </goal>
     <goal name="VC cont_last_qbit_c.10.1.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="2.13"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_last_qbit_c.11" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(bv_to_ket bv)" arg2="(kronecker (bv_to_ket (hpart bv (width_c c))) (bv_to_ket (tpart bv (width_c c))))">
   <goal name="VC cont_last_qbit_c.11.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(bv_to_ket (tpart bv (width_c c)))" arg2="(ket 1 1)">
    <goal name="VC cont_last_qbit_c.11.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC cont_last_qbit_c.11.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC cont_last_qbit_c.11.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="place_kron_left_c">
       <goal name="VC cont_last_qbit_c.11.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.07"/></proof>
       </goal>
       <goal name="VC cont_last_qbit_c.11.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="3.46" steps="458"/></proof>
       </goal>
       <goal name="VC cont_last_qbit_c.11.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.64"/></proof>
       </goal>
       <goal name="VC cont_last_qbit_c.11.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.64"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_last_qbit_c.11.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC cont_last_qbit_c.11.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.69"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cont_last_qbit_c.11.0.1" expl="equality hypothesis" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cont_last_qbit_c.11.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_ket_spec">
      <goal name="VC cont_last_qbit_c.11.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="bin_to_ket_def">
       <goal name="VC cont_last_qbit_c.11.0.1.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="ket_eq">
        <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.51"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.58"/></proof>
        </goal>
        <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="bin_to_int_def">
         <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
          <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_isum_one">
           <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult">
             <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.58"/></proof>
             </goal>
             <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.56"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.66"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.54"/></proof>
         </goal>
         <goal name="VC cont_last_qbit_c.11.0.1.0.0.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.59"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_last_qbit_c.11.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.54"/></proof>
       </goal>
       <goal name="VC cont_last_qbit_c.11.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.58"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_last_qbit_c.11.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
    <goal name="VC cont_last_qbit_c.11.1.0" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="bv_to_ket_eq">
     <goal name="VC cont_last_qbit_c.11.1.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.47"/></proof>
     </goal>
     <goal name="VC cont_last_qbit_c.11.1.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.54"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_zero_gen_c" expl="VC for cont_zero_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_zero_gen_c.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC cont_zero_gen_c.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.68"/></proof>
  </goal>
  <goal name="VC cont_zero_gen_c.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94"/></proof>
  </goal>
  <goal name="VC cont_zero_gen_c.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.02"/></proof>
  </goal>
  <goal name="VC cont_zero_gen_c.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.00"/></proof>
  </goal>
  <goal name="VC cont_zero_gen_c.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.29"/></proof>
  </goal>
  <goal name="VC cont_zero_gen_c.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.70"/></proof>
  </goal>
  <goal name="VC cont_zero_gen_c.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.58"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_before_c" expl="VC for cont_before_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_before_c.0" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(co = 0)">
   <goal name="VC cont_before_c.0.0" expl="true case (assertion)" proved="true">
   <proof prover="2"><result status="valid" time="1.46"/></proof>
   </goal>
   <goal name="VC cont_before_c.0.1" expl="false case (assertion)" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC cont_before_c.0.1.0" expl="false case (assertion)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cont_before_c.0.1.0.0" expl="false case (assertion)" proved="true">
     <transf name="rewrite" proved="true" arg1="place_kron_gen_c1">
      <goal name="VC cont_before_c.0.1.0.0.0" expl="false case (assertion)" proved="true">
      <proof prover="2"><result status="valid" time="1.73"/></proof>
      </goal>
      <goal name="VC cont_before_c.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.88"/></proof>
      </goal>
      <goal name="VC cont_before_c.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.66"/></proof>
      </goal>
      <goal name="VC cont_before_c.0.1.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.86"/></proof>
      </goal>
      <goal name="VC cont_before_c.0.1.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.84"/></proof>
      </goal>
      <goal name="VC cont_before_c.0.1.0.0.5" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.64"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_before_c.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.06"/></proof>
  <proof prover="3"><result status="valid" time="0.49" steps="434"/></proof>
  </goal>
  <goal name="VC cont_before_c.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.71"/></proof>
  <proof prover="3"><result status="valid" time="0.51" steps="442"/></proof>
  </goal>
  <goal name="VC cont_before_c.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.24"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="442"/></proof>
  </goal>
  <goal name="VC cont_before_c.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56" steps="450"/></proof>
  </goal>
  <goal name="VC cont_before_c.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.10"/></proof>
  <proof prover="3"><result status="valid" time="0.51" steps="451"/></proof>
  </goal>
  <goal name="VC cont_before_c.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.12"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="452"/></proof>
  </goal>
  <goal name="VC cont_before_c.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.63" steps="453"/></proof>
  </goal>
  <goal name="VC cont_before_c.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC cont_before_c.8.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC cont_before_c.8.0.0" expl="VC for cont_before_c" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC cont_before_c.8.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC cont_before_c.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(width_c (cont_zero_c (place_c c ((k - co) - 1) ((n - co) - 1))) = n-co)">
       <goal name="VC cont_before_c.8.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="1.93"/></proof>
       </goal>
       <goal name="VC cont_before_c.8.0.0.0.0.1" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="1.89"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_before_c.8.0.0.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.71"/></proof>
     <proof prover="3"><result status="valid" time="0.76" steps="461"/></proof>
     </goal>
     <goal name="VC cont_before_c.8.0.0.2" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(bv_to_ket bv)" arg2="(kronecker (bv_to_ket (hpart bv co)) (bv_to_ket (tpart bv co)))">
      <goal name="VC cont_before_c.8.0.0.2.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_kron_pre_c">
       <goal name="VC cont_before_c.8.0.0.2.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H20">
        <goal name="VC cont_before_c.8.0.0.2.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC cont_before_c.8.0.0.2.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC cont_before_c.8.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ids_c_spec">
           <goal name="VC cont_before_c.8.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.97"/></proof>
           </goal>
           <goal name="VC cont_before_c.8.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.47"/></proof>
           </goal>
           <goal name="VC cont_before_c.8.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.47"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_before_c.8.0.0.2.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.95"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_before_c.8.0.0.2.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.72"/></proof>
        </goal>
        <goal name="VC cont_before_c.8.0.0.2.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.81"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_before_c.8.0.0.2.0.1" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC cont_before_c.8.0.0.2.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="ids_c_spec7">
         <goal name="VC cont_before_c.8.0.0.2.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="3.64" steps="463"/></proof>
         </goal>
         <goal name="VC cont_before_c.8.0.0.2.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.56"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_before_c.8.0.0.2.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="5.46"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_before_c.8.0.0.2.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.38"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_before_c.8.0.0.3" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.88"/></proof>
     <proof prover="2"><result status="valid" time="0.68"/></proof>
     <proof prover="3"><result status="valid" time="0.52" steps="461"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_before_c.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(place_c  (cont_zero_gen_c c  (k-co) (n-co)) co n)">
   <goal name="VC cont_before_c.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H20">
    <goal name="VC cont_before_c.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="place_place_c">
     <goal name="VC cont_before_c.9.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.66"/></proof>
     </goal>
     <goal name="VC cont_before_c.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.57"/></proof>
     </goal>
     <goal name="VC cont_before_c.9.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.09"/></proof>
     </goal>
     <goal name="VC cont_before_c.9.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.81"/></proof>
     </goal>
     <goal name="VC cont_before_c.9.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.83"/></proof>
     </goal>
     <goal name="VC cont_before_c.9.0.0.5" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.86"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cont_before_c.9.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.93"/></proof>
    </goal>
    <goal name="VC cont_before_c.9.0.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="0.54" steps="457"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_before_c.9.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="1.01"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_last_gen_c" expl="VC for cont_last_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_last_gen_c.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.33"/></proof>
  </goal>
  <goal name="VC cont_last_gen_c.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.13" steps="428"/></proof>
  </goal>
  <goal name="VC cont_last_gen_c.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.66" steps="444"/></proof>
  </goal>
  <goal name="VC cont_last_gen_c.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.13"/></proof>
  </goal>
  <goal name="VC cont_last_gen_c.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="VC cont_last_gen_c.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.18"/></proof>
  </goal>
  <goal name="VC cont_last_gen_c.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H7">
   <goal name="VC cont_last_gen_c.6.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="1.20"/></proof>
   </goal>
   <goal name="VC cont_last_gen_c.6.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="1.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_last_gen_c.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H7">
   <goal name="VC cont_last_gen_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="place_place_c">
    <goal name="VC cont_last_gen_c.7.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.13"/></proof>
    </goal>
    <goal name="VC cont_last_gen_c.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.17"/></proof>
    </goal>
    <goal name="VC cont_last_gen_c.7.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.21"/></proof>
    </goal>
    <goal name="VC cont_last_gen_c.7.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.75"/></proof>
    </goal>
    <goal name="VC cont_last_gen_c.7.0.4" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.17"/></proof>
    </goal>
    <goal name="VC cont_last_gen_c.7.0.5" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.14"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_last_gen_c.7.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.13"/></proof>
   </goal>
   <goal name="VC cont_last_gen_c.7.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.74"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_after_c" expl="VC for cont_after_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_after_c.0" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(co = n-1)">
   <goal name="VC cont_after_c.0.0" expl="true case (assertion)" proved="true">
   <proof prover="2"><result status="valid" time="2.08"/></proof>
   </goal>
   <goal name="VC cont_after_c.0.1" expl="false case (assertion)" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC cont_after_c.0.1.0" expl="false case (assertion)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cont_after_c.0.1.0.0" expl="false case (assertion)" proved="true">
     <transf name="rewrite" proved="true" arg1="place_kron_gen_c2">
      <goal name="VC cont_after_c.0.1.0.0.0" expl="false case (assertion)" proved="true">
      <transf name="rewrite" proved="true" arg1="place_place_c">
       <goal name="VC cont_after_c.0.1.0.0.0.0" expl="false case (assertion)" proved="true">
       <transf name="rewrite" proved="true" arg1="cont_last_gen_c_spec">
        <goal name="VC cont_after_c.0.1.0.0.0.0.0" expl="false case (assertion)" proved="true">
        <transf name="case" proved="true" arg1="(k=0)">
         <goal name="VC cont_after_c.0.1.0.0.0.0.0.0" expl="false case (true case. assertion)" proved="true">
         <transf name="rewrite" proved="true" arg1="place_kron_gen_c2">
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0" expl="false case (true case. assertion)" proved="true">
          <transf name="rewrite" proved="true" arg1="place_kron_gen_c2">
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0" expl="false case (true case. assertion)" proved="true">
           <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
            <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0" expl="false case (true case. assertion)" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_eq">
             <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(bv_to_ket
   (hpart (hpart bv (width_c (cont_last_gen_c c k co))) (width_c c)))" arg2="(bv_to_ket (hpart bv (width_c c)))">
              <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
              <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="bv_to_ket_eq">
               <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="2.07"/></proof>
               </goal>
               <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="hpart_value_b">
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="hpart_value_b">
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="hpart_value_b">
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.84"/></proof>
                   </goal>
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.64"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.58"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.57"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
              <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="bv_to_ket_eq">
               <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.75"/></proof>
               </goal>
               <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="case" proved="true" arg1="(i &lt; co +1 - width_c c)">
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="true case (apply premises)" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value_left">
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                  <transf name="rewrite" proved="true" arg1="tpart_value_b">
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="tpart_value_b">
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="hpart_value_b">
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                     <proof prover="2"><result status="valid" time="0.84"/></proof>
                     </goal>
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.55"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.58"/></proof>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.22"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.65"/></proof>
                   </goal>
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.58"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.88"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="false case (apply premises)" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value_right">
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0" expl="false case (apply premises)" proved="true">
                  <transf name="rewrite" proved="true" arg1="tpart_value_b">
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
                   <transf name="rewrite" proved="true" arg1="tpart_value_b">
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                    <proof prover="2"><result status="valid" time="1.95"/></proof>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.58"/></proof>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.80"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.56"/></proof>
                   </goal>
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.77"/></proof>
                   <transf name="split_vc" proved="true" >
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.2.0" proved="true">
                    <proof prover="0"><result status="valid" time="1.78"/></proof>
                    <proof prover="2"><result status="valid" time="2.21"/></proof>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.0.2.1" proved="true">
                    <proof prover="0"><result status="valid" time="1.28"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.0.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="4.31"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.83"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.27"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.80"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.81"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.26"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.87"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.28"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="3.31"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.06"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.41"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_after_c.0.1.0.0.0.0.0.1" expl="false case (assertion)" proved="true">
         <transf name="rewrite" proved="true" arg1="place_kron_gen_c">
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0" expl="false case (assertion)" proved="true">
          <transf name="rewrite" proved="true" arg1="place_kron_gen_c">
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0" expl="false case (assertion)" proved="true">
           <transf name="replace" proved="true" arg1="(hpart (hpart bv (width_c (cont_last_gen_c c k co))) k)" arg2="(hpart bv (k + 0))">
            <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0" expl="false case (assertion)" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
             <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0" expl="false case (assertion)" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_eq">
              <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.80"/></proof>
              </goal>
              <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="kronecker_assoc_use_rev">
               <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_eq">
                <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(htpart (hpart bv (width_c (cont_last_gen_c c k co))) k (width_c c))" arg2="(htpart bv (k + 0) (width_c c))">
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                 </transf>
                 </goal>
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                 <transf name="apply" proved="true" arg1="set_equal_bv">
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.88"/></proof>
                  </goal>
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="htpart_value_b">
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="htpart_value_b">
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="hpart_value_b">
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.06"/></proof>
                      </goal>
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.61"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.80"/></proof>
                     </goal>
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.60"/></proof>
                     </goal>
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.0.3" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.59"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.79"/></proof>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.57"/></proof>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.0.1.1.0.3" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.54"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.83"/></proof>
                  </goal>
                  <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                   <transf name="case" proved="true" arg1="(i &lt; co +1 - (width_c c+ k ))">
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0" expl="true case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="concat_value_left">
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0" expl="true case (apply premises)" proved="true">
                     <transf name="rewrite" proved="true" arg1="tpart_value_b">
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
                      <transf name="rewrite" proved="true" arg1="tpart_value_b">
                       <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                       <transf name="rewrite" proved="true" arg1="hpart_value_b">
                        <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                        <proof prover="2"><result status="valid" time="1.21"/></proof>
                        </goal>
                        <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.55"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.28"/></proof>
                       </goal>
                       <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.67"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.97"/></proof>
                      </goal>
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.98"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.82"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1" expl="false case (apply premises)" proved="true">
                    <transf name="rewrite" proved="true" arg1="concat_value_right">
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.0" expl="false case (apply premises)" proved="true">
                     <transf name="rewrite" proved="true" arg1="tpart_value_b">
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
                      <transf name="rewrite" proved="true" arg1="tpart_value_b">
                       <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.0.0.0" expl="false case (apply premises)" proved="true">
                       <proof prover="2"><result status="valid" time="2.01"/></proof>
                       </goal>
                       <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.61"/></proof>
                       </goal>
                       <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="1.81"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.58"/></proof>
                      </goal>
                      <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.75"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.0.0.1.0.1.0.1.0.1.1" expl="rewrite premises" proved="true">
                     <proof prover="0"><result status="valid" time="1.41"/></proof>
                     <proof prover="2"><result status="valid" time="2.08"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
            <transf name="apply" proved="true" arg1="set_equal_bv">
             <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.47"/></proof>
             </goal>
             <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="hpart_value_b">
               <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="hpart_value_b">
                <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="hpart_value_b">
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.83"/></proof>
                 </goal>
                 <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.62"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="1.60"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.0.1.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.59"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.82"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.24"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.80"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.4" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.79"/></proof>
           </goal>
           <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.0.5" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.22"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.82"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.25"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="3.26"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.4" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.81"/></proof>
          </goal>
          <goal name="VC cont_after_c.0.1.0.0.0.0.0.1.5" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.21"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_after_c.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.86"/></proof>
        </goal>
        <goal name="VC cont_after_c.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.21"/></proof>
        </goal>
        <goal name="VC cont_after_c.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.64"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_after_c.0.1.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.83"/></proof>
       </goal>
       <goal name="VC cont_after_c.0.1.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.80"/></proof>
       </goal>
       <goal name="VC cont_after_c.0.1.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.81"/></proof>
       </goal>
       <goal name="VC cont_after_c.0.1.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.26"/></proof>
       </goal>
       <goal name="VC cont_after_c.0.1.0.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.82"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_after_c.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.83"/></proof>
      </goal>
      <goal name="VC cont_after_c.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.59"/></proof>
      </goal>
      <goal name="VC cont_after_c.0.1.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.80"/></proof>
      </goal>
      <goal name="VC cont_after_c.0.1.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.82"/></proof>
      </goal>
      <goal name="VC cont_after_c.0.1.0.0.5" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.53"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_after_c.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96"/></proof>
  </goal>
  <goal name="VC cont_after_c.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="440"/></proof>
  </goal>
  <goal name="VC cont_after_c.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.20"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="440"/></proof>
  </goal>
  <goal name="VC cont_after_c.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.52" steps="448"/></proof>
  </goal>
  <goal name="VC cont_after_c.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.14"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="449"/></proof>
  </goal>
  <goal name="VC cont_after_c.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.22"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="450"/></proof>
  </goal>
  <goal name="VC cont_after_c.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.51" steps="451"/></proof>
  </goal>
  <goal name="VC cont_after_c.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H6">
   <goal name="VC cont_after_c.8.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC cont_after_c.8.0.0" expl="VC for cont_after_c" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC cont_after_c.8.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.28"/></proof>
     </goal>
     <goal name="VC cont_after_c.8.0.0.1" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(bv_to_ket bv)" arg2="(kronecker (bv_to_ket (hpart bv (co+1)))(bv_to_ket (tpart bv (co+1))))">
      <goal name="VC cont_after_c.8.0.0.1.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="path_sem_kron_c">
       <goal name="VC cont_after_c.8.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (cont_last_gen_c c k co))" arg2="(co+1)">
        <goal name="VC cont_after_c.8.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
         <goal name="VC cont_after_c.8.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="3.41" steps="461"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_after_c.8.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC cont_after_c.8.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="0.75"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_after_c.8.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="2.31"/></proof>
       </goal>
       <goal name="VC cont_after_c.8.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.04"/></proof>
       </goal>
       <goal name="VC cont_after_c.8.0.0.1.0.3" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC cont_after_c.8.0.0.1.0.3.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ids_c_spec">
         <goal name="VC cont_after_c.8.0.0.1.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.13"/></proof>
         </goal>
         <goal name="VC cont_after_c.8.0.0.1.0.3.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.28"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_after_c.8.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.12"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_after_c.8.0.0.2" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.00"/></proof>
     </goal>
     <goal name="VC cont_after_c.8.0.0.3" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.11"/></proof>
     <proof prover="2"><result status="valid" time="0.72"/></proof>
     <proof prover="3"><result status="valid" time="0.51" steps="459"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_after_c.9" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(place_c (cont_last_gen_c c k co) 0 n)">
   <goal name="VC cont_after_c.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H20">
    <goal name="VC cont_after_c.9.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="1.26"/></proof>
    </goal>
    <goal name="VC cont_after_c.9.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.59"/></proof>
    </goal>
    <goal name="VC cont_after_c.9.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.62"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC cont_after_c.9.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_c" expl="VC for cont_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_c.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="434"/></proof>
   </goal>
   <goal name="VC cont_c.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.52" steps="434"/></proof>
   </goal>
   <goal name="VC cont_c.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.71"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.71"/></proof>
   <proof prover="3"><result status="valid" time="0.68" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.71"/></proof>
   <proof prover="3"><result status="valid" time="0.60" steps="434"/></proof>
   </goal>
   <goal name="VC cont_c.3.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.47" steps="434"/></proof>
  </goal>
  <goal name="VC cont_c.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.52" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.6.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.72"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="444"/></proof>
   </goal>
   <goal name="VC cont_c.6.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.72"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.7.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="444"/></proof>
   </goal>
   <goal name="VC cont_c.7.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.8.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.60" steps="444"/></proof>
   </goal>
   <goal name="VC cont_c.8.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.9.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.50" steps="444"/></proof>
   </goal>
   <goal name="VC cont_c.9.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.10.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.51"/></proof>
   <proof prover="3"><result status="valid" time="3.05" steps="451"/></proof>
   </goal>
   <goal name="VC cont_c.10.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.51"/></proof>
   <proof prover="3"><result status="valid" time="3.52" steps="452"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_c.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_c.11.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.33"/></proof>
   </goal>
   <goal name="VC cont_c.11.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.31"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC size_cont_c" expl="VC for size_cont_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC size_cont_c.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(size_c (cont_c c co k n) &lt;= (cont_size_c * size_c c))">
   <goal name="VC size_cont_c.0.0" expl="asserted formula" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
   <goal name="VC size_cont_c.0.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="( (cont_size_c * size_c c) &lt;=  (cont_size_c * s))">
    <goal name="VC size_cont_c.0.1.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="1.22"/></proof>
    </goal>
    <goal name="VC size_cont_c.0.1.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="1.15"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_cont_c" expl="VC for path_cont_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_c.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.49"/></proof>
  </goal>
  <goal name="VC path_cont_c.1" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC path_cont_c.1.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="((k + width_c c) &lt;= co)">
    <goal name="VC path_cont_c.1.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="2"><result status="valid" time="1.87"/></proof>
    </goal>
    <goal name="VC path_cont_c.1.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="2"><result status="valid" time="1.82"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_cont_ketz_c" expl="VC for path_cont_ketz_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_ketz_c.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz_c.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.58" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_ketz_c.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.72"/></proof>
   <proof prover="3"><result status="valid" time="0.50" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz_c.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz_c.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.67" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_ketz_c.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.72"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz_c.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz_c.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.76"/></proof>
   <proof prover="3"><result status="valid" time="0.65" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz_c.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.10"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_cont_keto_c" expl="VC for path_cont_keto_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_keto_c.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto_c.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_keto_c.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.73"/></proof>
   <proof prover="3"><result status="valid" time="0.57" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto_c.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto_c.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.76"/></proof>
   <proof prover="3"><result status="valid" time="0.63" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_keto_c.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.70" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto_c.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto_c.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.58" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto_c.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_cont_ketz_gen_c" expl="VC for path_cont_ketz_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_ketz_gen_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.40"/></proof>
  <proof prover="2"><result status="valid" time="1.54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_cont_keto_gen_c" expl="VC for path_cont_keto_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_keto_gen_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.09"/></proof>
  <proof prover="2"><result status="valid" time="1.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_kron_left_bv_to_ket_c" expl="VC for cont_kron_left_bv_to_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_kron_left_bv_to_ket_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width_c c)">
   <goal name="VC cont_kron_left_bv_to_ket_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
     <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.55"/></proof>
       </goal>
       <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.66"/></proof>
       </goal>
       <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
          <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="path_cont_ketz_gen_c">
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.66"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.09"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.75"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.77"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.4" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="n" arg2="(width_c c + 1)">
              <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.4.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.67"/></proof>
               </goal>
               <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.4.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.68"/></proof>
               </goal>
               <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.4.0.2" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.36"/></proof>
               </goal>
               <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.4.0.3" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.35"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="0.60"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.5" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="2.93" steps="439"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.6" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
              <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.0.0.6.0" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.58"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width_c (cont_c c (n - 1) 0 n))" arg2="(width_c c  +1)">
            <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.63"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.67"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.56"/></proof>
             </goal>
             <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.1.0.3" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.31"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.0.2.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="0.94"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.20" steps="437"/></proof>
      </goal>
      <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.39"/></proof>
      </goal>
      <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c (cont_c c (n - 1) 0 n))" arg2="(width_c c  +1)">
         <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.68"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.67"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.61"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.62"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.03"/></proof>
         <proof prover="3"><result status="valid" time="3.51" steps="439"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.1.0.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_ket_l">
        <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.58"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.19"/></proof>
     </goal>
     <goal name="VC cont_kron_left_bv_to_ket_c.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="3.15" steps="437"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cont_kron_left_bv_to_ket_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.64"/></proof>
    </goal>
    <goal name="VC cont_kron_left_bv_to_ket_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.35"/></proof>
    </goal>
    <goal name="VC cont_kron_left_bv_to_ket_c.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.36"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_left_bv_to_ket_c.1" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width_c c)">
   <goal name="VC cont_kron_left_bv_to_ket_c.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
     <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
        <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
         <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq">
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.34"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.66"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
             <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
              <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
               <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
                <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="scalar_eq">
                 <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="path_cont_keto_gen_c">
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.41"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.12"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.74"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.73"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="n" arg2="(width_c c +1)">
                   <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="kronecker_ket_l">
                    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.4.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.66"/></proof>
                    </goal>
                    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.4.0.1" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.66"/></proof>
                    </goal>
                    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.4.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.36"/></proof>
                    </goal>
                    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.4.0.3" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.37"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="0.65"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
                  <proof prover="3"><result status="valid" time="2.99" steps="439"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.6" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="bv_to_ket_concat_rev">
                   <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.6.0" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.32"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(width_c (cont_c c (n - 1) 0 n))" arg2="(width_c c  +1)">
                 <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="kronecker_ket_l">
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.65"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.67"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.35"/></proof>
                  </goal>
                  <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.35"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="3"><result status="valid" time="2.98" steps="439"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.25"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
            <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_ket_l">
             <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.21"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.26"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.03"/></proof>
         </goal>
         <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="4.49" steps="437"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="4.58" steps="437"/></proof>
        </goal>
        <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.68"/></proof>
        </goal>
        <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_ket_l">
           <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.53"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.61" steps="437"/></proof>
      </goal>
      <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.71"/></proof>
      </goal>
      <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c (cont_c c (n - 1) 0 n))" arg2="(width_c c  +1)">
         <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.62"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.62"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.59"/></proof>
          </goal>
          <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.74"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="3"><result status="valid" time="3.74" steps="439"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.1.0.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_ket_l">
        <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.74"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.06"/></proof>
     </goal>
     <goal name="VC cont_kron_left_bv_to_ket_c.1.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="4.81" steps="437"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.20"/></proof>
    </goal>
    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="2.18"/></proof>
    </goal>
    <goal name="VC cont_kron_left_bv_to_ket_c.1.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.64"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC place_kron_left_path_c" expl="VC for place_kron_left_path_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_left_path_c.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.62"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_kron_pat_right_c" expl="VC for cont_kron_pat_right_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_kron_pat_right_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="y,(width_c c)">
   <goal name="VC cont_kron_pat_right_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC cont_kron_pat_right_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_r_rew">
     <goal name="VC cont_kron_pat_right_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC cont_kron_pat_right_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.42"/></proof>
       </goal>
       <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.67"/></proof>
       </goal>
       <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr_r">
          <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="path_cont_ketz_gen_c">
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.65"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.99"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.63"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.64"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.4" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="n" arg2="(k + width_c c)">
              <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.4.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.07"/></proof>
               </goal>
               <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.4.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.84"/></proof>
               </goal>
               <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.4.0.2" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.02"/></proof>
               </goal>
               <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.4.0.3" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.29"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="0.64"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.5" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="3.66" steps="443"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.6" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(kronecker x (bv_to_ket a))" arg2="(bv_to_ket (concat (ket_to_bv x) a))">
              <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.6.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
               <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.6.0.0" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="1.87"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.0.0.6.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="1.36"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="((width_c (cont_c c co k n)))" arg2="(k+ width_c c)">
            <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.09"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.39"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.64"/></proof>
             </goal>
             <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.1.0.3" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.37"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cont_kron_pat_right_c.0.0.0.0.0.2.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="0.99"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_kron_pat_right_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="3.01" steps="441"/></proof>
      </goal>
      <goal name="VC cont_kron_pat_right_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="( width_c (cont_c c co k n))" arg2="n">
       <goal name="VC cont_kron_pat_right_c.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H4">
        <goal name="VC cont_kron_pat_right_c.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.35"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_kron_pat_right_c.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.09"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_kron_pat_right_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="((width_c (cont_c c co k n)))" arg2="(k+ width_c c)">
         <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.08"/></proof>
          </goal>
          <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.54"/></proof>
          </goal>
          <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.67"/></proof>
          </goal>
          <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.41"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_kron_pat_right_c.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.23"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_pat_right_c.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC cont_kron_pat_right_c.0.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cont_kron_pat_right_c.0.0.0.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="0.39"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_pat_right_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.25"/></proof>
     </goal>
     <goal name="VC cont_kron_pat_right_c.0.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="3.45" steps="441"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cont_kron_pat_right_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.38" steps="440"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.21" steps="440"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_c.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.67" steps="440"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_pat_right_c.1" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="y,(width_c c)">
   <goal name="VC cont_kron_pat_right_c.1.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC cont_kron_pat_right_c.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_r_rew">
     <goal name="VC cont_kron_pat_right_c.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC cont_kron_pat_right_c.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
       <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_r_rew">
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq">
         <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.41"/></proof>
         </goal>
         <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.95"/></proof>
         </goal>
         <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr_r">
            <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
             <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
              <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr_r">
               <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="scalar_eq">
                <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="case" proved="true" arg1="(k + width_c c &lt;= co)">
                  <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
                  <proof prover="2"><result status="valid" time="1.84"/></proof>
                  </goal>
                  <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
                  <transf name="rewrite" proved="true" arg1="path_cont_keto_gen_c1">
                   <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.0" expl="false case (apply premises)" proved="true">
                   <proof prover="2"><result status="valid" time="2.30"/></proof>
                   </goal>
                   <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.73"/></proof>
                   </goal>
                   <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.20"/></proof>
                   </goal>
                   <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.76"/></proof>
                   </goal>
                   <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.4" expl="rewrite premises" proved="true">
                   <proof prover="3"><result status="valid" time="3.01" steps="445"/></proof>
                   </goal>
                   <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.5" expl="rewrite premises" proved="true">
                   <proof prover="3"><result status="valid" time="2.99" steps="445"/></proof>
                   </goal>
                   <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.6" expl="rewrite premises" proved="true">
                   <transf name="replace" proved="true" arg1="(kronecker x (bv_to_ket a))" arg2="(bv_to_ket (concat (ket_to_bv x) a))">
                    <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.6.0" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
                     <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.6.0.0" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.74"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.1.6.1" expl="equality hypothesis" proved="true">
                    <proof prover="2"><result status="valid" time="1.54"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.52"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(width_c (cont_c c co k n))" arg2="(k+width_c c)">
              <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.08"/></proof>
               </goal>
               <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.35"/></proof>
               </goal>
               <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.0.2" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.62"/></proof>
               </goal>
               <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.0.3" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.35"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <transf name="replace" proved="true" arg1="(width_c (cont_c c co k n))" arg2="n">
               <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.57"/></proof>
               </goal>
               <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.0.2.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
               <proof prover="5"><result status="valid" time="0.39"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <transf name="assert" proved="true" arg1="(is_a_ket_l ( (get_ket y (bv_to_int e) *.. bv_to_ket e))
  (width_c c))">
           <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="2"><result status="valid" time="1.64"/></proof>
           </goal>
           <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.66"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.30"/></proof>
        </goal>
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="4.11" steps="441"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="4.31" steps="441"/></proof>
       </goal>
       <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="0.46" steps="438"/></proof>
       </goal>
       <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.3.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC cont_kron_pat_right_c.1.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.79"/></proof>
         <proof prover="3"><result status="valid" time="4.05" steps="443"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_kron_pat_right_c.1.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="4.39" steps="441"/></proof>
      </goal>
      <goal name="VC cont_kron_pat_right_c.1.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(width_c (cont_c c co k n))" arg2="(k+width_c c)">
       <goal name="VC cont_kron_pat_right_c.1.0.0.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="4.21" steps="441"/></proof>
       </goal>
       <goal name="VC cont_kron_pat_right_c.1.0.0.0.2.1" expl="equality hypothesis" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (cont_c c co k n))" arg2="n">
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.2.1.0" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="0.64"/></proof>
        </goal>
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.2.1.1" expl="equality hypothesis" proved="true">
        <proof prover="5"><result status="valid" time="0.41"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cont_kron_pat_right_c.1.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c (cont_c c co k n))" arg2="(k+width_c c)">
         <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.60"/></proof>
          </goal>
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.36"/></proof>
          </goal>
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.40"/></proof>
          </goal>
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.01"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="(width_c (cont_c c co k n))" arg2="n">
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.1.0" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="1.13"/></proof>
          </goal>
          <goal name="VC cont_kron_pat_right_c.1.0.0.0.3.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="5"><result status="valid" time="0.45"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_pat_right_c.1.0.0.1" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC cont_kron_pat_right_c.1.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cont_kron_pat_right_c.1.0.0.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="0.45"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cont_kron_pat_right_c.1.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.96"/></proof>
     </goal>
     <goal name="VC cont_kron_pat_right_c.1.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="3"><result status="valid" time="4.77" steps="441"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC cont_kron_pat_right_c.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.98" steps="440"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_c.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.61" steps="440"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_c.1.0.3" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="3.02" steps="440"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cont_kron_pat_right_gen_c" expl="VC for cont_kron_pat_right_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_kron_pat_right_gen_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC cont_kron_pat_right_gen_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="cont_kron_pat_right_c1">
    <goal name="VC cont_kron_pat_right_gen_c.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.77"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.79"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.0.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.77"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.0.0.3" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.83"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.0.0.4" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.86"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.0.0.5" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="2.15"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_pat_right_gen_c.1" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC cont_kron_pat_right_gen_c.1.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="cont_kron_pat_right_c">
    <goal name="VC cont_kron_pat_right_gen_c.1.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.99"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.1.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.07"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.1.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.78"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.1.0.3" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.59"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.1.0.4" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.69"/></proof>
    </goal>
    <goal name="VC cont_kron_pat_right_gen_c.1.0.5" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.72"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Derived_circuits" proved="true">
 <goal name="Circuit.VC circ_to_pps" expl="VC for circ_to_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC width" expl="VC for width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC width.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.62" steps="428"/></proof>
  </goal>
  <goal name="VC width.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.51"/></proof>
  <proof prover="3"><result status="valid" time="3.14" steps="430"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC size" expl="VC for size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC size.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC ancillas" expl="VC for ancillas" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancillas.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC range" expl="VC for range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC range.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="426"/></proof>
  </goal>
  <goal name="VC range.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.49"/></proof>
  <proof prover="3"><result status="valid" time="2.96" steps="428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC basis_ket" expl="VC for basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_ket.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_ket.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.47"/></proof>
   <proof prover="3"><result status="valid" time="3.02" steps="428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_ket.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_ket.1.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H6">
    <goal name="VC basis_ket.1.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.38"/></proof>
    </goal>
    <goal name="VC basis_ket.1.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.40"/></proof>
    </goal>
    <goal name="VC basis_ket.1.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.61"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC basis_ket.1.1" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H5">
    <goal name="VC basis_ket.1.1.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.40"/></proof>
    </goal>
    <goal name="VC basis_ket.1.1.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.42"/></proof>
    </goal>
    <goal name="VC basis_ket.1.1.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.63"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC ang_ind" expl="VC for ang_ind" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_ind.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.69"/></proof>
  <proof prover="3"><result status="valid" time="3.02" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC path_sem_basis" expl="VC for path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="428"/></proof>
  </goal>
  <goal name="VC path_sem_basis.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="428"/></proof>
  </goal>
  <goal name="VC path_sem_basis.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
  </goal>
  <goal name="VC path_sem_basis.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC path_sem" expl="VC for path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="426"/></proof>
  </goal>
  <goal name="VC path_sem.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="430"/></proof>
  </goal>
  <goal name="VC path_sem.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="430"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC id" expl="VC for id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC id.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="424"/></proof>
  </goal>
  <goal name="VC id.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.62" steps="424"/></proof>
  </goal>
  <goal name="VC id.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="424"/></proof>
  </goal>
  <goal name="VC id.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="424"/></proof>
  </goal>
  <goal name="VC id.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="424"/></proof>
  </goal>
  <goal name="VC id.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.52"/></proof>
  <proof prover="3"><result status="valid" time="2.83" steps="426"/></proof>
  </goal>
  <goal name="VC id.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  <proof prover="3"><result status="valid" time="3.27" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC swap" expl="VC for swap" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC swap.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="424"/></proof>
  </goal>
  <goal name="VC swap.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="424"/></proof>
  </goal>
  <goal name="VC swap.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="424"/></proof>
  </goal>
  <goal name="VC swap.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="424"/></proof>
  </goal>
  <goal name="VC swap.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="424"/></proof>
  </goal>
  <goal name="VC swap.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.50"/></proof>
  <proof prover="3"><result status="valid" time="2.81" steps="426"/></proof>
  </goal>
  <goal name="VC swap.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  <proof prover="3"><result status="valid" time="3.43" steps="426"/></proof>
  </goal>
  <goal name="VC swap.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  <proof prover="3"><result status="valid" time="4.30" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC phase" expl="VC for phase" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC phase.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.71"/></proof>
  <proof prover="3"><result status="valid" time="0.76" steps="436"/></proof>
  </goal>
  <goal name="VC phase.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.03"/></proof>
  <proof prover="3"><result status="valid" time="0.61" steps="436"/></proof>
  </goal>
  <goal name="VC phase.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  <proof prover="3"><result status="valid" time="0.69" steps="436"/></proof>
  </goal>
  <goal name="VC phase.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.82" steps="436"/></proof>
  </goal>
  <goal name="VC phase.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="436"/></proof>
  </goal>
  <goal name="VC phase.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.50"/></proof>
  <proof prover="3"><result status="valid" time="3.76" steps="440"/></proof>
  </goal>
  <goal name="VC phase.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.88"/></proof>
  <proof prover="3"><result status="valid" time="3.37" steps="443"/></proof>
  </goal>
  <goal name="VC phase.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.38"/></proof>
  <proof prover="3"><result status="valid" time="3.39" steps="443"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC rz" expl="VC for rz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rz.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="436"/></proof>
  </goal>
  <goal name="VC rz.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="436"/></proof>
  </goal>
  <goal name="VC rz.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.69"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="436"/></proof>
  </goal>
  <goal name="VC rz.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.67"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="436"/></proof>
  </goal>
  <goal name="VC rz.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="436"/></proof>
  </goal>
  <goal name="VC rz.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.54"/></proof>
  <proof prover="3"><result status="valid" time="3.23" steps="441"/></proof>
  </goal>
  <goal name="VC rz.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.49"/></proof>
  <proof prover="3"><result status="valid" time="3.16" steps="445"/></proof>
  </goal>
  <goal name="VC rz.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.53"/></proof>
  <proof prover="3"><result status="valid" time="3.26" steps="445"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC hadamard" expl="VC for hadamard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC hadamard.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="424"/></proof>
  </goal>
  <goal name="VC hadamard.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="424"/></proof>
  </goal>
  <goal name="VC hadamard.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="424"/></proof>
  </goal>
  <goal name="VC hadamard.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="424"/></proof>
  </goal>
  <goal name="VC hadamard.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="424"/></proof>
  </goal>
  <goal name="VC hadamard.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.48"/></proof>
  <proof prover="3"><result status="valid" time="3.09" steps="426"/></proof>
  </goal>
  <goal name="VC hadamard.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.47"/></proof>
  <proof prover="3"><result status="valid" time="3.14" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cnot" expl="VC for cnot" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cnot.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="424"/></proof>
  </goal>
  <goal name="VC cnot.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="424"/></proof>
  </goal>
  <goal name="VC cnot.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="424"/></proof>
  </goal>
  <goal name="VC cnot.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="424"/></proof>
  </goal>
  <goal name="VC cnot.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="424"/></proof>
  </goal>
  <goal name="VC cnot.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="3.96" steps="426"/></proof>
  </goal>
  <goal name="VC cnot.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.85"/></proof>
  <proof prover="3"><result status="valid" time="3.05" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC parallel" expl="VC for parallel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="430"/></proof>
  </goal>
  <goal name="VC parallel.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.43"/></proof>
  <proof prover="3"><result status="valid" time="3.22" steps="432"/></proof>
  </goal>
  <goal name="VC parallel.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.43"/></proof>
  <proof prover="3"><result status="valid" time="3.19" steps="434"/></proof>
  </goal>
  <goal name="VC parallel.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.43"/></proof>
  <proof prover="3"><result status="valid" time="3.02" steps="436"/></proof>
  </goal>
  <goal name="VC parallel.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.51"/></proof>
  <proof prover="3"><result status="valid" time="3.05" steps="438"/></proof>
  </goal>
  <goal name="VC parallel.5" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(parallel_c d e)">
   <goal name="VC parallel.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="parallel_angle_c">
    <goal name="VC parallel.5.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC parallel.5.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.59"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC parallel.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(parallel_c d e)">
   <goal name="VC parallel.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="parallel_basis_ket_c">
    <goal name="VC parallel.6.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC parallel.6.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.58"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC sequence" expl="VC for sequence" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.64" steps="426"/></proof>
  </goal>
  <goal name="VC sequence.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
  </goal>
  <goal name="VC sequence.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.58"/></proof>
  <proof prover="3"><result status="valid" time="3.23" steps="434"/></proof>
  </goal>
  <goal name="VC sequence.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  <proof prover="3"><result status="valid" time="3.26" steps="436"/></proof>
  </goal>
  <goal name="VC sequence.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.29"/></proof>
  <proof prover="3"><result status="valid" time="3.24" steps="438"/></proof>
  </goal>
  <goal name="VC sequence.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.51"/></proof>
  <proof prover="3"><result status="valid" time="3.28" steps="440"/></proof>
  </goal>
  <goal name="VC sequence.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(sequence_c d e)">
   <goal name="VC sequence.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="sequence_angle_c">
    <goal name="VC sequence.6.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC sequence.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.56"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sequence.6.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.60"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sequence.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(sequence_c d e)">
   <goal name="VC sequence.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="sequence_basis_ket_c">
    <goal name="VC sequence.7.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC sequence.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.57"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sequence.7.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.59"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC ancilla" expl="VC for ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.63" steps="426"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC ancilla.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ancilla.1.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="H2" arg2="x">
      <goal name="VC ancilla.1.0.0.0.0" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC ancilla.1.0.0.0.0.0" expl="destruct premise" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC ancilla.1.0.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="0"><result status="valid" time="1.02"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ancilla.1.0.0.0.0.1" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC ancilla.1.0.0.0.0.1.0" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_c_spec" arg2="in" arg3="Hinst">
         <goal name="VC ancilla.1.0.0.0.0.1.0.0" proved="true">
         <transf name="apply" proved="true" arg1="Hinst">
         </transf>
         </goal>
         <goal name="VC ancilla.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.39"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.67" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.3.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="result" arg2="(ancilla_c c)">
    <goal name="VC ancilla.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ancilla_ancilla_c">
     <goal name="VC ancilla.3.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="0.64"/></proof>
     </goal>
     <goal name="VC ancilla.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.63"/></proof>
     </goal>
     <goal name="VC ancilla.3.0.0.2" expl="rewrite premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla.3.0.0.2.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ancilla.3.0.0.2.0.0" proved="true">
       <transf name="apply" proved="true" arg1="H5">
        <goal name="VC ancilla.3.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.59"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla.3.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="result" arg2="(ancilla_c c)">
    <goal name="VC ancilla.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ancilla_size_c">
     <goal name="VC ancilla.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.57"/></proof>
     </goal>
     <goal name="VC ancilla.4.0.0.1" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla.4.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ancilla.4.0.0.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="H6">
        <goal name="VC ancilla.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.57"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla.4.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.00"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC ids" expl="VC for ids" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ids.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.83"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="426"/></proof>
  </goal>
  <goal name="VC ids.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="434"/></proof>
  </goal>
  <goal name="VC ids.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
  </goal>
  <goal name="VC ids.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.82"/></proof>
  <proof prover="3"><result status="valid" time="0.66" steps="434"/></proof>
  </goal>
  <goal name="VC ids.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.64" steps="434"/></proof>
  </goal>
  <goal name="VC ids.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.62"/></proof>
  <proof prover="3"><result status="valid" time="2.97" steps="436"/></proof>
  </goal>
  <goal name="VC ids.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.58"/></proof>
  <proof prover="3"><result status="valid" time="2.90" steps="436"/></proof>
  </goal>
  <goal name="VC ids.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.50"/></proof>
  <proof prover="3"><result status="valid" time="3.06" steps="440"/></proof>
  </goal>
  <goal name="VC ids.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.47"/></proof>
  <proof prover="3"><result status="valid" time="2.98" steps="438"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place" expl="VC for place" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.85"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="428"/></proof>
  </goal>
  <goal name="VC place.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.85"/></proof>
  <proof prover="3"><result status="valid" time="0.49" steps="428"/></proof>
  </goal>
  <goal name="VC place.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="436"/></proof>
  </goal>
  <goal name="VC place.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.64" steps="436"/></proof>
  </goal>
  <goal name="VC place.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="436"/></proof>
  </goal>
  <goal name="VC place.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.62" steps="436"/></proof>
  </goal>
  <goal name="VC place.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H8">
   <goal name="VC place.6.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.68"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC place.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_kron" expl="VC for place_kron" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="436"/></proof>
  </goal>
  <goal name="VC place_kron.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="436"/></proof>
  </goal>
  <goal name="VC place_kron.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.61" steps="436"/></proof>
  </goal>
  <goal name="VC place_kron.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.67" steps="436"/></proof>
  </goal>
  <goal name="VC place_kron.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.66" steps="436"/></proof>
  </goal>
  <goal name="VC place_kron.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.61" steps="436"/></proof>
  </goal>
  <goal name="VC place_kron.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.62" steps="438"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_kron_left" expl="VC for place_kron_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_left.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="432"/></proof>
  </goal>
  <goal name="VC place_kron_left.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="432"/></proof>
  </goal>
  <goal name="VC place_kron_left.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="432"/></proof>
  </goal>
  <goal name="VC place_kron_left.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="432"/></proof>
  </goal>
  <goal name="VC place_kron_left.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.65" steps="434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_kron_right" expl="VC for place_kron_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_right.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="428"/></proof>
  </goal>
  <goal name="VC place_kron_right.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="428"/></proof>
  </goal>
  <goal name="VC place_kron_right.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.59"/></proof>
  <proof prover="3"><result status="valid" time="3.07" steps="434"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_get_ket" expl="VC for place_get_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_get_ket.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="436"/></proof>
  </goal>
  <goal name="VC place_get_ket.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="436"/></proof>
  </goal>
  <goal name="VC place_get_ket.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.61" steps="436"/></proof>
  </goal>
  <goal name="VC place_get_ket.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="436"/></proof>
  </goal>
  <goal name="VC place_get_ket.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="436"/></proof>
  </goal>
  <goal name="VC place_get_ket.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="436"/></proof>
  </goal>
  <goal name="VC place_get_ket.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_get_ket_hpart_null" expl="VC for place_get_ket_hpart_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_get_ket_hpart_null.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_hpart_null.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.81"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_hpart_null.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_hpart_null.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_hpart_null.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_hpart_null.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_get_ket_tpart_null" expl="VC for place_get_ket_tpart_null" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_get_ket_tpart_null.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_tpart_null.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_tpart_null.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_tpart_null.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_tpart_null.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="434"/></proof>
  </goal>
  <goal name="VC place_get_ket_tpart_null.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_hadamard" expl="VC for place_hadamard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_hadamard.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC place_hadamard.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.80"/></proof>
   <proof prover="3"><result status="valid" time="0.59" steps="428"/></proof>
   </goal>
   <goal name="VC place_hadamard.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.58" steps="428"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC place_hadamard.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="432"/></proof>
  </goal>
  <goal name="VC place_hadamard.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.61" steps="432"/></proof>
  </goal>
  <goal name="VC place_hadamard.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="2.94" steps="438"/></proof>
  </goal>
  <goal name="VC place_hadamard.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.61"/></proof>
  <proof prover="3"><result status="valid" time="2.90" steps="434"/></proof>
  </goal>
  <goal name="VC place_hadamard.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.41"/></proof>
  <proof prover="3"><result status="valid" time="3.29" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_place" expl="VC for place_place" proved="true">
 <proof prover="3"><result status="valid" time="0.59" steps="424"/></proof>
 </goal>
 <goal name="Circuit.VC qbit_permutes" expl="VC for qbit_permutes" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC qbit_permutes.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.63" steps="434"/></proof>
  </goal>
  <goal name="VC qbit_permutes.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.81"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="434"/></proof>
  </goal>
  <goal name="VC qbit_permutes.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.81"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="434"/></proof>
  </goal>
  <goal name="VC qbit_permutes.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.66"/></proof>
  <proof prover="3"><result status="valid" time="3.04" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC qbit_permutation" expl="VC for qbit_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC qbit_permutation.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.82"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="426"/></proof>
  </goal>
  <goal name="VC qbit_permutation.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.40"/></proof>
  <proof prover="3"><result status="valid" time="3.16" steps="434"/></proof>
  </goal>
  <goal name="VC qbit_permutation.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.67"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC permute_atom" expl="VC for permute_atom" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permute_atom.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.82"/></proof>
   <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
   </goal>
   <goal name="VC permute_atom.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC permute_atom.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
   </goal>
   <goal name="VC permute_atom.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.49" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC permute_atom.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.49" steps="440"/></proof>
  </goal>
  <goal name="VC permute_atom.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="440"/></proof>
  </goal>
  <goal name="VC permute_atom.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="440"/></proof>
  </goal>
  <goal name="VC permute_atom.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="440"/></proof>
  </goal>
  <goal name="VC permute_atom.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.69"/></proof>
  <proof prover="3"><result status="valid" time="3.13" steps="450"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC permutation_circuit" expl="VC for permutation_circuit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC permutation_circuit.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.82"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="428"/></proof>
  </goal>
  <goal name="VC permutation_circuit.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="428"/></proof>
  </goal>
  <goal name="VC permutation_circuit.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="432"/></proof>
  </goal>
  <goal name="VC permutation_circuit.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
  </goal>
  <goal name="VC permutation_circuit.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.61"/></proof>
  <proof prover="3"><result status="valid" time="2.91" steps="438"/></proof>
  </goal>
  <goal name="VC permutation_circuit.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.36"/></proof>
  <proof prover="3"><result status="valid" time="2.95" steps="438"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC with_permutation" expl="VC for with_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC with_permutation.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.76"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="426"/></proof>
  </goal>
  <goal name="VC with_permutation.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.57" steps="434"/></proof>
  </goal>
  <goal name="VC with_permutation.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="434"/></proof>
  </goal>
  <goal name="VC with_permutation.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.83"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="434"/></proof>
  </goal>
  <goal name="VC with_permutation.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.83"/></proof>
  <proof prover="3"><result status="valid" time="0.59" steps="434"/></proof>
  </goal>
  <goal name="VC with_permutation.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
  </transf>
  </goal>
  <goal name="VC with_permutation.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H8">
   <goal name="VC with_permutation.6.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.61"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H8">
   <goal name="VC with_permutation.7.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.61"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC with_permutation_get_ket" expl="VC for with_permutation_get_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC with_permutation_get_ket.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.77"/></proof>
  <proof prover="3"><result status="valid" time="0.60" steps="430"/></proof>
  </goal>
  <goal name="VC with_permutation_get_ket.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="430"/></proof>
  </goal>
  <goal name="VC with_permutation_get_ket.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.63" steps="430"/></proof>
  </goal>
  <goal name="VC with_permutation_get_ket.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC with_permutation_kronecker" expl="VC for with_permutation_kronecker" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC with_permutation_kronecker.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="444"/></proof>
  </goal>
  <goal name="VC with_permutation_kronecker.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.60" steps="444"/></proof>
   </goal>
   <goal name="VC with_permutation_kronecker.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.60" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.58" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.4.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.80"/></proof>
   <proof prover="3"><result status="valid" time="0.58" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.6.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.76"/></proof>
   <proof prover="3"><result status="valid" time="0.63" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.7" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.7.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.59" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC with_permutation_kronecker.8.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.82"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC with_permutation_kronecker.9" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cont_size" expl="VC for cont_size" proved="true">
 <proof prover="3"><result status="valid" time="0.44" steps="424"/></proof>
 </goal>
 <goal name="Circuit.VC cont_zero" expl="VC for cont_zero" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_zero.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.48" steps="432"/></proof>
  </goal>
  <goal name="VC cont_zero.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.54" steps="432"/></proof>
  </goal>
  <goal name="VC cont_zero.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.19"/></proof>
  <proof prover="3"><result status="valid" time="1.12" steps="432"/></proof>
  </goal>
  <goal name="VC cont_zero.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.50" steps="432"/></proof>
  </goal>
  <goal name="VC cont_zero.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  <proof prover="3"><result status="valid" time="3.10" steps="438"/></proof>
  </goal>
  <goal name="VC cont_zero.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.56"/></proof>
  <proof prover="3"><result status="valid" time="3.15" steps="438"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cont_zero_path_sem_kron" expl="VC for cont_zero_path_sem_kron" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_zero_path_sem_kron.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="426"/></proof>
  </goal>
  <goal name="VC cont_zero_path_sem_kron.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.75"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="430"/></proof>
  </goal>
  <goal name="VC cont_zero_path_sem_kron.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H1">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cont_last_qbit" expl="VC for cont_last_qbit" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_last_qbit.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.13"/></proof>
  </goal>
  <goal name="VC cont_last_qbit.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.58" steps="432"/></proof>
  </goal>
  <goal name="VC cont_last_qbit.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
  </goal>
  <goal name="VC cont_last_qbit.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
  </goal>
  <goal name="VC cont_last_qbit.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.54"/></proof>
  <proof prover="3"><result status="valid" time="3.05" steps="438"/></proof>
  </goal>
  <goal name="VC cont_last_qbit.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.58"/></proof>
  <proof prover="3"><result status="valid" time="3.09" steps="438"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cont" expl="VC for cont" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
   </goal>
   <goal name="VC cont.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.57" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
   </goal>
   <goal name="VC cont.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.52" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  </goal>
  <goal name="VC cont.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.73"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="440"/></proof>
  </goal>
  <goal name="VC cont.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.78"/></proof>
  <proof prover="3"><result status="valid" time="0.53" steps="440"/></proof>
  </goal>
  <goal name="VC cont.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="440"/></proof>
  </goal>
  <goal name="VC cont.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H7">
   <goal name="VC cont.7.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.68"/></proof>
   </goal>
   <goal name="VC cont.7.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.62"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont.8" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC size_cont" expl="VC for size_cont" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC size_cont.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_cont.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
   </goal>
   <goal name="VC size_cont.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.52" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_cont.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_cont.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.76"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="434"/></proof>
   </goal>
   <goal name="VC size_cont.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_cont.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_cont.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.83"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_cont.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_cont.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="434"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_cont.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.69"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC path_cont" expl="VC for path_cont" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.71"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="432"/></proof>
   </goal>
   <goal name="VC path_cont.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.80"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="432"/></proof>
   </goal>
   <goal name="VC path_cont.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.52" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.58"/></proof>
  <proof prover="3"><result status="valid" time="3.60" steps="439"/></proof>
  </goal>
  <goal name="VC path_cont.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.56"/></proof>
  <proof prover="3"><result status="valid" time="3.73" steps="439"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC path_cont_ketz" expl="VC for path_cont_ketz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_ketz.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.71" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_ketz.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.80"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_ketz.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.72"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.80"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz.4.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.76"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.80"/></proof>
  <proof prover="3"><result status="valid" time="0.56" steps="440"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC path_cont_keto" expl="VC for path_cont_keto" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_keto.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.81"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_keto.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="438"/></proof>
   </goal>
   <goal name="VC path_cont_keto.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.23"/></proof>
   <proof prover="3"><result status="valid" time="1.18" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.52" steps="442"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.82"/></proof>
   <proof prover="3"><result status="valid" time="0.57" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto.4.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.83"/></proof>
   <proof prover="3"><result status="valid" time="0.57" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.74"/></proof>
  <proof prover="3"><result status="valid" time="0.55" steps="440"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC path_cont_ketz_gen" expl="VC for path_cont_ketz_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_ketz_gen.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz_gen.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.80"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
   </goal>
   <goal name="VC path_cont_ketz_gen.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz_gen.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz_gen.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.17"/></proof>
   <proof prover="3"><result status="valid" time="1.07" steps="432"/></proof>
   </goal>
   <goal name="VC path_cont_ketz_gen.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz_gen.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_ketz_gen.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_ketz_gen.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.62"/></proof>
  <proof prover="3"><result status="valid" time="3.72" steps="441"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC path_cont_keto_gen" expl="VC for path_cont_keto_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_cont_keto_gen.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto_gen.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.87" steps="432"/></proof>
   </goal>
   <goal name="VC path_cont_keto_gen.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.53" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto_gen.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto_gen.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.75"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
   </goal>
   <goal name="VC path_cont_keto_gen.1.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.26"/></proof>
   <proof prover="3"><result status="valid" time="1.09" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto_gen.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_cont_keto_gen.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.79"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_cont_keto_gen.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.56"/></proof>
  <proof prover="3"><result status="valid" time="3.14" steps="441"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cont_kron_left_bv_to_ket" expl="VC for cont_kron_left_bv_to_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_kron_left_bv_to_ket.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_kron_left_bv_to_ket.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.52" steps="430"/></proof>
   </goal>
   <goal name="VC cont_kron_left_bv_to_ket.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.77"/></proof>
   <proof prover="3"><result status="valid" time="0.50" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_left_bv_to_ket.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_kron_left_bv_to_ket.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.81"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_left_bv_to_ket.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.55"/></proof>
  <proof prover="3"><result status="valid" time="3.46" steps="436"/></proof>
  </goal>
  <goal name="VC cont_kron_left_bv_to_ket.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.54"/></proof>
  <proof prover="3"><result status="valid" time="3.42" steps="436"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC place_kron_left_path" expl="VC for place_kron_left_path" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC place_kron_left_path.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.79"/></proof>
  <proof prover="3"><result status="valid" time="0.52" steps="426"/></proof>
  </goal>
  <goal name="VC place_kron_left_path.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.32"/></proof>
  <proof prover="3"><result status="valid" time="3.01" steps="432"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cont_kron_pat_right" expl="VC for cont_kron_pat_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_kron_pat_right.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_kron_pat_right.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.76"/></proof>
   <proof prover="3"><result status="valid" time="0.54" steps="432"/></proof>
   </goal>
   <goal name="VC cont_kron_pat_right.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.80"/></proof>
   <proof prover="3"><result status="valid" time="0.56" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_pat_right.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_kron_pat_right.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.81"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_pat_right.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_kron_pat_right.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.78"/></proof>
   <proof prover="3"><result status="valid" time="0.55" steps="432"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_pat_right.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.60"/></proof>
  <proof prover="3"><result status="valid" time="3.08" steps="440"/></proof>
  </goal>
  <goal name="VC cont_kron_pat_right.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.57"/></proof>
  <proof prover="3"><result status="valid" time="3.16" steps="440"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit.VC cont_kron_pat_right_gen" expl="VC for cont_kron_pat_right_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cont_kron_pat_right_gen.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_kron_pat_right_gen.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.71"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="430"/></proof>
   </goal>
   <goal name="VC cont_kron_pat_right_gen.0.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.72"/></proof>
   <proof prover="3"><result status="valid" time="0.51" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_pat_right_gen.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC cont_kron_pat_right_gen.1.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.74"/></proof>
   <proof prover="3"><result status="valid" time="0.58" steps="430"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cont_kron_pat_right_gen.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.50"/></proof>
  <proof prover="3"><result status="valid" time="3.07" steps="438"/></proof>
  </goal>
  <goal name="VC cont_kron_pat_right_gen.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.51"/></proof>
  <proof prover="3"><result status="valid" time="3.24" steps="438"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
