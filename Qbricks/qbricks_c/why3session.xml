<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="qbricks_c.mlw"/>
<theory name="Circuit_c">
 <goal name="VC width_pre" expl="VC for width_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC width_pre.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC width_pre.0.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.14"/></proof>
   </goal>
   <goal name="VC width_pre.0.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.08"/></proof>
   </goal>
   <goal name="VC width_pre.0.2" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.27"/></proof>
   </goal>
   <goal name="VC width_pre.0.3" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.92"/></proof>
   </goal>
   <goal name="VC width_pre.0.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.05" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.0.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.95" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.0.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.05"/></proof>
   </goal>
   <goal name="VC width_pre.0.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.11"/></proof>
   </goal>
   <goal name="VC width_pre.0.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC width_pre.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC width_pre.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.59"/></proof>
   </goal>
   <goal name="VC width_pre.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.50"/></proof>
   </goal>
   <goal name="VC width_pre.1.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.48" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.1.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.67" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.1.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.35" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.1.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.29" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
   <goal name="VC width_pre.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.15"/></proof>
   </goal>
   <goal name="VC width_pre.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.90"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC width_pre.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC width_pre.2.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC width_pre.2.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC width_pre.2.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.77" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.2.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.13" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.2.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.44" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.2.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.39" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.2.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC width_pre.2.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.26"/></proof>
   </goal>
   <goal name="VC width_pre.2.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC width_pre.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC width_pre.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.07"/></proof>
   </goal>
   <goal name="VC width_pre.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC width_pre.3.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.34" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.3.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.43" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.3.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.35" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.3.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.91" steps="238"/></proof>
   </goal>
   <goal name="VC width_pre.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
   <goal name="VC width_pre.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.84"/></proof>
   </goal>
   <goal name="VC width_pre.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.84"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC build_correct" expl="VC for build_correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC build_correct.0" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC build_correct.0.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC build_correct.0.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.32"/></proof>
   </goal>
   <goal name="VC build_correct.0.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.49" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.0.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.62" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.0.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.32" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.0.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.76" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.0.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.18"/></proof>
   </goal>
   <goal name="VC build_correct.0.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.27"/></proof>
   </goal>
   <goal name="VC build_correct.0.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.25"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_correct.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC build_correct.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.21"/></proof>
   </goal>
   <goal name="VC build_correct.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC build_correct.1.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.42" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.1.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.24" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.1.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.41" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.1.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.25" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC build_correct.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.20"/></proof>
   </goal>
   <goal name="VC build_correct.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_correct.2" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC build_correct.2.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.97"/></proof>
   </goal>
   <goal name="VC build_correct.2.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC build_correct.2.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.11" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.2.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.34" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.2.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.45" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.2.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.14" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.2.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.97"/></proof>
   </goal>
   <goal name="VC build_correct.2.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
   <goal name="VC build_correct.2.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_correct.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC build_correct.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC build_correct.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.89"/></proof>
   </goal>
   <goal name="VC build_correct.3.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.16" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.3.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.41" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.3.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.17" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.3.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.24" steps="246"/></proof>
   </goal>
   <goal name="VC build_correct.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
   <goal name="VC build_correct.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.86"/></proof>
   </goal>
   <goal name="VC build_correct.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_correct.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC build_correct.4.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC build_correct.4.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC build_correct.4.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.30" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.4.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.35" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.4.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.09" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.4.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.08" steps="248"/></proof>
   </goal>
   <goal name="VC build_correct.4.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC build_correct.4.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.84"/></proof>
   </goal>
   <goal name="VC build_correct.4.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circuit_c" expl="VC for circuit_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circuit_c.0" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="250"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC to_qc" expl="VC for to_qc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC to_qc.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="252"/></proof>
  </goal>
  <goal name="VC to_qc.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.43" steps="254"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC to_qc_rev" expl="VC for to_qc_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC to_qc_rev.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="5.51"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC to_qc_pre" expl="VC for to_qc_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC to_qc_pre.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.07" steps="252"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pre_rev" expl="VC for pre_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pre_rev.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.73" steps="254"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pre_to_qc" expl="VC for pre_to_qc" proved="true">
 <proof prover="4"><result status="valid" time="1.94" steps="254"/></proof>
 </goal>
 <goal name="VC circ_to_pps_c" expl="VC for circ_to_pps_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_c.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.96"/></proof>
  </goal>
  <goal name="VC circ_to_pps_c.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_c.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.86"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.38"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.58" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.44" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.88" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.94" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.91"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.06"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.91"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_c.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.12"/></proof>
  </goal>
  <goal name="VC circ_to_pps_c.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_c.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.92"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.28" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.30" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.92" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.87" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.28"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.02"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.11"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_c.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.03"/></proof>
  </goal>
  <goal name="VC circ_to_pps_c.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91"/></proof>
  </goal>
  <goal name="VC circ_to_pps_c.6" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_c.6.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.91"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.26"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.58" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.98" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.40" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.22" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.09"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.6.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_c.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00"/></proof>
  </goal>
  <goal name="VC circ_to_pps_c.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_c.8.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.10"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.39" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.44" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.49" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.84" steps="262"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.11"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.09"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.8.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_c.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.37"/></proof>
  </goal>
  <goal name="VC circ_to_pps_c.10" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_c.10.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.14"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.32"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="4.21" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="3.39" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="4.55" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="3.00" steps="256"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.46"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.10.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_c.11" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="258"/></proof>
  </goal>
  <goal name="VC circ_to_pps_c.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_c.12.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.88"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="4.98" steps="260"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.22" steps="254"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.05" steps="254"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.98" steps="254"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.03" steps="254"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.6" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.89"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.7" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.12.8" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="4.52" steps="266"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_c.13" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_c.13.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.07" steps="260"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="1.04" steps="260"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.94" steps="255"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.46" steps="255"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.61" steps="255"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.41" steps="255"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.6" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.67" steps="272"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.7" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.34" steps="272"/></proof>
   </goal>
   <goal name="VC circ_to_pps_c.13.8" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC width_c" expl="VC for width_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC width_c.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC width_c.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.53" steps="254"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC width_c.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC width_c.1.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.38" steps="254"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_c" expl="VC for mat_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_c.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC mat_sem_c.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sem_c.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.96"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.89" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.85" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.83" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.81" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.75"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
   <goal name="VC mat_sem_c.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_c.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94"/></proof>
  </goal>
  <goal name="VC mat_sem_c.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sem_c.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.90" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.31" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.91" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.91" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.95"/></proof>
   </goal>
   <goal name="VC mat_sem_c.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_c.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC mat_sem_c.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC mat_sem_c.6" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sem_c.6.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.94"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.83" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.80" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.91" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.12" steps="256"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
   <goal name="VC mat_sem_c.6.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_c.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.78"/></proof>
  </goal>
  <goal name="VC mat_sem_c.8" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sem_c.8.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.83" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.89" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.96" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.21" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.96"/></proof>
   </goal>
   <goal name="VC mat_sem_c.8.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_c.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="VC mat_sem_c.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.32" steps="258"/></proof>
  </goal>
  <goal name="VC mat_sem_c.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sem_c.11.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
   <goal name="VC mat_sem_c.11.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.86"/></proof>
   </goal>
   <goal name="VC mat_sem_c.11.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.36" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.11.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.38" steps="260"/></proof>
   </goal>
   <goal name="VC mat_sem_c.11.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.49" steps="258"/></proof>
   </goal>
   <goal name="VC mat_sem_c.11.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="260"/></proof>
   </goal>
   <goal name="VC mat_sem_c.11.6" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC mat_sem_c.11.7" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_sem_c.11.7.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC mat_sem_c.11.7.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H7">
      <goal name="VC mat_sem_c.11.7.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H12">
       <goal name="VC mat_sem_c.11.7.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pre_to_qc">
        <goal name="VC mat_sem_c.11.7.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H14">
         <goal name="VC mat_sem_c.11.7.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(width_pre (Parallel x1 x))" arg2="((width_pre x1 + width_pre x))">
          <goal name="VC mat_sem_c.11.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="power__sum">
           <goal name="VC mat_sem_c.11.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <proof prover="4"><result status="valid" time="0.36" steps="270"/></proof>
           </goal>
           <goal name="VC mat_sem_c.11.7.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.82"/></proof>
           </goal>
           <goal name="VC mat_sem_c.11.7.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.82"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_c.11.7.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="1.97" steps="272"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_c.11.7.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="2.12" steps="272"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sem_c.11.8" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_sem_c.11.8.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC mat_sem_c.11.8.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="power__eq">
      <goal name="VC mat_sem_c.11.8.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.35" steps="272"/></proof>
      </goal>
      <goal name="VC mat_sem_c.11.8.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="2.43" steps="274"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_c.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sem_c.12.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="260"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="260"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="263"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.34" steps="261"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.34" steps="259"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="261"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.6" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.7" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.36" steps="272"/></proof>
   </goal>
   <goal name="VC mat_sem_c.12.8" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.34" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_c.13" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC mat_sem_c.13.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC mat_sem_c.13.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.97"/></proof>
   </goal>
   <goal name="VC mat_sem_c.13.2" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.90"/></proof>
   </goal>
   <goal name="VC mat_sem_c.13.3" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.93"/></proof>
   </goal>
   <goal name="VC mat_sem_c.13.4" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC mat_sem_c.13.5" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.99"/></proof>
   </goal>
   <goal name="VC mat_sem_c.13.6" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_sem_c.13.6.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC mat_sem_c.13.6.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sem_c.13.6.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="circ_to_pps_c_def2" arg2="c,x2,x1">
       <goal name="VC mat_sem_c.13.6.0.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC mat_sem_c.13.6.0.0.0.0.0" expl="destruct premise" proved="true">
        <proof prover="4"><result status="valid" time="0.35" steps="276"/></proof>
        </goal>
        <goal name="VC mat_sem_c.13.6.0.0.0.0.1" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="VC mat_sem_c.13.6.0.0.0.0.1.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_apply_basis_seq">
          <goal name="VC mat_sem_c.13.6.0.0.0.0.1.0.0" expl="postcondition" proved="true">
          <proof prover="0"><result status="valid" time="1.03"/></proof>
          </goal>
          <goal name="VC mat_sem_c.13.6.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.91"/></proof>
          </goal>
          <goal name="VC mat_sem_c.13.6.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.92"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sem_c.13.7" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_sem_c.13.7.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC mat_sem_c.13.7.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC mat_sem_c.13.7.0.0.0" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="circ_to_pps_c_def1" arg2="c,x2,x1">
       <goal name="VC mat_sem_c.13.7.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC mat_sem_c.13.7.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_basis_par">
         <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(kronecker (bv_to_ket (hpart x (h_width (circ_to_pps_c (to_qc x2))))) (bv_to_ket(tpart x (h_width (circ_to_pps_c (to_qc x2))))))">
          <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="kronecker_mult_commut_p">
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="kronecker_eq">
            <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.43"/></proof>
            </goal>
            <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="H13">
             <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.29"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="1.24"/></proof>
           </goal>
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="bv_to_ket_spec2">
            <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="tpart_length">
             <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.12"/></proof>
             </goal>
             <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="0.89"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="pow2dim_def">
             <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.3.0.0" proved="true">
             <transf name="exists" proved="true" arg1="(width_pre x2)">
              <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.3.0.0.0" proved="true">
              <transf name="exists" proved="true" arg1="(width_pre x2)">
               <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.3.0.0.0.0" proved="true">
               <proof prover="3"><result status="valid" time="1.20"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.4.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="pow2dim_def">
             <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.4.0.0" proved="true">
             <transf name="exists" proved="true" arg1="(width_pre x1)">
              <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.4.0.0.0" proved="true">
              <transf name="exists" proved="true" arg1="(width_pre x1)">
               <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.4.0.0.0.0" proved="true">
               <proof prover="3"><result status="valid" time="1.18"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.5" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.69"/></proof>
           </goal>
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.0.6" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.68"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(bv_to_ket (concat (hpart x (h_width (circ_to_pps_c (to_qc x2)))) (tpart x (h_width (circ_to_pps_c (to_qc x2))))))">
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="ket_to_bv_concat">
           </transf>
           </goal>
           <goal name="VC mat_sem_c.13.7.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="3"><result status="valid" time="1.38"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sem_c.13.7.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.07"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_c.13.7.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.35" steps="277"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sem_c.13.8" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC mat_sem_c.13.8.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H4">
     <goal name="VC mat_sem_c.13.8.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="0.95"/></proof>
     </goal>
     <goal name="VC mat_sem_c.13.8.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="1.89" steps="279"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_c.14" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
   <goal name="VC mat_sem_c.14.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_pps_apply">
    <goal name="VC mat_sem_c.14.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="VC mat_sem_c.14.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="1.88" steps="262"/></proof>
     </goal>
     <goal name="VC mat_sem_c.14.0.0.1" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.16"/></proof>
     </goal>
     <goal name="VC mat_sem_c.14.0.0.2" expl="apply premises" proved="true">
     <proof prover="3"><result status="valid" time="1.14"/></proof>
     </goal>
     <goal name="VC mat_sem_c.14.0.0.3" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC mat_sem_c.14.0.0.3.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sem_c.14.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.03"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.1" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.08"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.2" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.10"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.3" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.06"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.4" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.03"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.5" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.26"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.6" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.27"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.7" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.17"/></proof>
       </goal>
       <goal name="VC mat_sem_c.14.0.0.3.0.8" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.10"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sem_c.14.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.78"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_sem_c.14.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.17" steps="262"/></proof>
   </goal>
   <goal name="VC mat_sem_c.14.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_to_mat_mat_sem_c" expl="VC for pps_to_mat_mat_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_to_mat_mat_sem_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.39" steps="269"/></proof>
  </goal>
  <goal name="VC pps_to_mat_mat_sem_c.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.42" steps="270"/></proof>
  </goal>
  <goal name="VC pps_to_mat_mat_sem_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.36" steps="271"/></proof>
  </goal>
  <goal name="VC pps_to_mat_mat_sem_c.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.63" steps="272"/></proof>
  </goal>
  <goal name="VC pps_to_mat_mat_sem_c.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.80"/></proof>
  </goal>
  <goal name="VC pps_to_mat_mat_sem_c.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="271"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_correction_gen" expl="VC for sem_correction_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sem_correction_gen.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="mat_sem_c_spec" arg2="c">
   <goal name="VC sem_correction_gen.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC sem_correction_gen.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC sem_correction_gen.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.82"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_correction_gen_rev" expl="VC for sem_correction_gen_rev" proved="true">
 <proof prover="4"><result status="valid" time="1.84" steps="254"/></proof>
 </goal>
 <goal name="VC size_c" expl="VC for size_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC size_c.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="VC size_c.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_c.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.96"/></proof>
   </goal>
   <goal name="VC size_c.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.82"/></proof>
   </goal>
   <goal name="VC size_c.1.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.85" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.1.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.84" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.1.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.04" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.1.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.08" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC size_c.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.93"/></proof>
   </goal>
   <goal name="VC size_c.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_c.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.83"/></proof>
  </goal>
  <goal name="VC size_c.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_c.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.96"/></proof>
   </goal>
   <goal name="VC size_c.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC size_c.3.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.47" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.3.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.84" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.3.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.47" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.3.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.12" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC size_c.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC size_c.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_c.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.79"/></proof>
  </goal>
  <goal name="VC size_c.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_c.5.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
   <goal name="VC size_c.5.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC size_c.5.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.89" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.5.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.91" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.5.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.93" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.5.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.97" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.5.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
   <goal name="VC size_c.5.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
   <goal name="VC size_c.5.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_c.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.77"/></proof>
  </goal>
  <goal name="VC size_c.7" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_c.7.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC size_c.7.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC size_c.7.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.97" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.7.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.98" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.7.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.99" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.7.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.96" steps="260"/></proof>
   </goal>
   <goal name="VC size_c.7.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC size_c.7.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC size_c.7.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_c.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.80"/></proof>
  </goal>
  <goal name="VC size_c.9" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_c.9.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC size_c.9.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC size_c.9.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.90" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.9.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.94" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.9.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.94" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.9.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.90" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.9.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.03"/></proof>
   </goal>
   <goal name="VC size_c.9.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.88"/></proof>
   </goal>
   <goal name="VC size_c.9.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC size_c.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC size_c.10.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.36" steps="262"/></proof>
   </goal>
   <goal name="VC size_c.10.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="262"/></proof>
   </goal>
   <goal name="VC size_c.10.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.36" steps="256"/></proof>
   </goal>
   <goal name="VC size_c.10.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.37" steps="254"/></proof>
   </goal>
   <goal name="VC size_c.10.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="254"/></proof>
   </goal>
   <goal name="VC size_c.10.5" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.37" steps="252"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancillas_c" expl="VC for ancillas_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancillas_c.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.84"/></proof>
  </goal>
  <goal name="VC ancillas_c.1" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancillas_c.1.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.29"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.95"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.25" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.98" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.84" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.97" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.89"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
   <goal name="VC ancillas_c.1.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancillas_c.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94"/></proof>
  </goal>
  <goal name="VC ancillas_c.3" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancillas_c.3.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.78"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.94"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.01" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.02" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.00" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.97" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC ancillas_c.3.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.82"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancillas_c.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00"/></proof>
  </goal>
  <goal name="VC ancillas_c.5" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancillas_c.5.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.85"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.89" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.83" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="1.91" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.11" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.79"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.89"/></proof>
   </goal>
   <goal name="VC ancillas_c.5.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancillas_c.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.94"/></proof>
  </goal>
  <goal name="VC ancillas_c.7" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancillas_c.7.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.95"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.36" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.46" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.38" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.34" steps="260"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC ancillas_c.7.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.19"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancillas_c.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.31"/></proof>
  </goal>
  <goal name="VC ancillas_c.9" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancillas_c.9.0" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.18"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.87"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.2" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.64" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.3" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="2.93" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.4" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="3.50" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.5" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="3.23" steps="256"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.6" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.95"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.7" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.82"/></proof>
   </goal>
   <goal name="VC ancillas_c.9.8" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancillas_c.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancillas_c.10.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
   <goal name="VC ancillas_c.10.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.42" steps="262"/></proof>
   </goal>
   <goal name="VC ancillas_c.10.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.37" steps="258"/></proof>
   </goal>
   <goal name="VC ancillas_c.10.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.36" steps="252"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC range_c" expl="VC for range_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC range_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.75" steps="256"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC basis_ket_c" expl="VC for basis_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_ket_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC basis_ket_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC basis_ket_c.0.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC basis_ket_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC basis_ket_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
       <goal name="VC basis_ket_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.56"/></proof>
       </goal>
       <goal name="VC basis_ket_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket_c.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.36"/></proof>
        </goal>
        <goal name="VC basis_ket_c.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.85"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_ket_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="4.84"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC basis_ket_c.0.0.0.1" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC basis_ket_c.0.0.0.1.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
       <goal name="VC basis_ket_c.0.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.27"/></proof>
       </goal>
       <goal name="VC basis_ket_c.0.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket_c.0.0.0.1.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.03"/></proof>
        </goal>
        <goal name="VC basis_ket_c.0.0.0.1.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="5.95"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_ket_c.0.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="4.76"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC phase_c" expl="VC for phase_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC phase_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.22" steps="252"/></proof>
  </goal>
  <goal name="VC phase_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.38" steps="252"/></proof>
  </goal>
  <goal name="VC phase_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.37" steps="254"/></proof>
  </goal>
  <goal name="VC phase_c.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.53" steps="256"/></proof>
  </goal>
  <goal name="VC phase_c.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.37" steps="258"/></proof>
  </goal>
  <goal name="VC phase_c.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.87"/></proof>
  </goal>
  <goal name="VC phase_c.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.03"/></proof>
  </goal>
  <goal name="VC phase_c.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC phase_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC phase_c.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC phase_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC phase_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC phase_c.8.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="4.43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC phase_c.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC phase_c.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC phase_c.9.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.21"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rz_c" expl="VC for rz_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rz_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.99" steps="252"/></proof>
  </goal>
  <goal name="VC rz_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.35" steps="252"/></proof>
  </goal>
  <goal name="VC rz_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.02" steps="254"/></proof>
  </goal>
  <goal name="VC rz_c.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.82" steps="256"/></proof>
  </goal>
  <goal name="VC rz_c.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.83" steps="258"/></proof>
  </goal>
  <goal name="VC rz_c.5" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.23"/></proof>
  </goal>
  <goal name="VC rz_c.6" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.85"/></proof>
  </goal>
  <goal name="VC rz_c.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rz_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC rz_c.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.32"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rz_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rz_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC rz_c.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.09"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rz_c.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rz_c.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC rz_c.9.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.44"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC hadamard_c" expl="VC for hadamard_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC hadamard_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="250"/></proof>
  </goal>
  <goal name="VC hadamard_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="252"/></proof>
  </goal>
  <goal name="VC hadamard_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.98" steps="254"/></proof>
  </goal>
  <goal name="VC hadamard_c.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.56" steps="256"/></proof>
  </goal>
  <goal name="VC hadamard_c.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.93" steps="258"/></proof>
  </goal>
  <goal name="VC hadamard_c.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.88" steps="260"/></proof>
  </goal>
  <goal name="VC hadamard_c.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.83" steps="262"/></proof>
  </goal>
  <goal name="VC hadamard_c.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC hadamard_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC hadamard_c.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.23"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC hadamard_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC hadamard_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC hadamard_c.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.10"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cnot_c" expl="VC for cnot_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cnot_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.40" steps="262"/></proof>
  </goal>
  <goal name="VC cnot_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="264"/></proof>
  </goal>
  <goal name="VC cnot_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.22" steps="266"/></proof>
  </goal>
  <goal name="VC cnot_c.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.21" steps="268"/></proof>
  </goal>
  <goal name="VC cnot_c.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.94" steps="270"/></proof>
  </goal>
  <goal name="VC cnot_c.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.92" steps="272"/></proof>
  </goal>
  <goal name="VC cnot_c.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.05" steps="274"/></proof>
  </goal>
  <goal name="VC cnot_c.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cnot_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC cnot_c.7.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(circ_to_pps_c result)" arg2="pps_cnot">
     <goal name="VC cnot_c.7.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC cnot_c.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_cnot_def1">
       <goal name="VC cnot_c.7.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="4"><result status="valid" time="0.57" steps="290"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_c.7.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="0.55" steps="290"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cnot_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC cnot_c.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.30"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC id_c" expl="VC for id_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC id_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.39" steps="274"/></proof>
  </goal>
  <goal name="VC id_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.39" steps="276"/></proof>
  </goal>
  <goal name="VC id_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.54" steps="278"/></proof>
  </goal>
  <goal name="VC id_c.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.40" steps="280"/></proof>
  </goal>
  <goal name="VC id_c.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.92" steps="282"/></proof>
  </goal>
  <goal name="VC id_c.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.90" steps="284"/></proof>
  </goal>
  <goal name="VC id_c.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.96" steps="286"/></proof>
  </goal>
  <goal name="VC id_c.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC id_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC id_c.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.23"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC id_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC id_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC id_c.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.26"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC swap_c" expl="VC for swap_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC swap_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="286"/></proof>
  </goal>
  <goal name="VC swap_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.41" steps="288"/></proof>
  </goal>
  <goal name="VC swap_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.00" steps="290"/></proof>
  </goal>
  <goal name="VC swap_c.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.94" steps="292"/></proof>
  </goal>
  <goal name="VC swap_c.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.70" steps="294"/></proof>
  </goal>
  <goal name="VC swap_c.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.62" steps="296"/></proof>
  </goal>
  <goal name="VC swap_c.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.98" steps="298"/></proof>
  </goal>
  <goal name="VC swap_c.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC swap_c.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.46"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC swap_c.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.30"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_c.9" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_c.9.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC swap_c.9.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.31"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_c" expl="VC for sequence_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_c.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.27"/></proof>
  </goal>
  <goal name="VC sequence_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.41" steps="302"/></proof>
  </goal>
  <goal name="VC sequence_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.13" steps="304"/></proof>
  </goal>
  <goal name="VC sequence_c.3" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sequence_c.3.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="circ_to_pps_c_def2" arg2="result,(pre d),(pre e)">
    <goal name="VC sequence_c.3.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.25"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_c" expl="VC for ancilla_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_c.0" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ancilla_c.0.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="306"/></proof>
  </goal>
  <goal name="VC ancilla_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.17" steps="308"/></proof>
  </goal>
  <goal name="VC ancilla_c.3" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ancilla_c.3.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="circ_to_pps_c_def" arg2="result,(pre d)">
    <goal name="VC ancilla_c.3.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.27"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_c" expl="VC for parallel_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.02" steps="300"/></proof>
  </goal>
  <goal name="VC parallel_c.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="300"/></proof>
  </goal>
  <goal name="VC parallel_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.00" steps="302"/></proof>
  </goal>
  <goal name="VC parallel_c.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_width_c" expl="VC for circ_to_pps_width_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_width_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.98" steps="300"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_range_c" expl="VC for circ_to_pps_range_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_range_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.91" steps="300"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_basis_ket_c" expl="VC for circ_to_pps_basis_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_basis_ket_c.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_basis_ket_c.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="2.00" steps="300"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_basis_ket_gen_c" expl="VC for circ_to_pps_basis_ket_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_basis_ket_gen_c.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_angle_c" expl="VC for circ_to_pps_angle_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_angle_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.98" steps="300"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_basis_c" expl="VC for path_sem_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="308"/></proof>
  </goal>
  <goal name="VC path_sem_basis_c.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H2">
   <goal name="VC path_sem_basis_c.1.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.66" steps="325"/></proof>
   </goal>
   <goal name="VC path_sem_basis_c.1.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.74" steps="325"/></proof>
   </goal>
   <goal name="VC path_sem_basis_c.1.2" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.38" steps="320"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_sem_basis_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.38" steps="316"/></proof>
  </goal>
  <goal name="VC path_sem_basis_c.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.39" steps="330"/></proof>
  </goal>
  <goal name="VC path_sem_basis_c.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.38" steps="308"/></proof>
  </goal>
  <goal name="VC path_sem_basis_c.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.38" steps="310"/></proof>
  </goal>
  <goal name="VC path_sem_basis_c.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.40" steps="318"/></proof>
  </goal>
  <goal name="VC path_sem_basis_c.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.00" steps="330"/></proof>
  </goal>
  <goal name="VC path_sem_basis_c.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC path_sem_basis_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC path_sem_basis_c.8.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="VC path_sem_basis_c.8.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(width_c c)">
      <goal name="VC path_sem_basis_c.8.0.0.0.0" proved="true">
      <proof prover="0"><result status="valid" time="5.57"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_basis_c.8.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_basis_c.8.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
       <goal name="VC path_sem_basis_c.8.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_hyp" proved="true" >
        <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="circ_to_pps_width_c">
          <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="circ_to_pps_range_c">
           <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="circ_to_pps_angle_c">
            <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(forall x x&#39; i. x = x&#39; -&gt;get_ket x i = get_ket x&#39; i)">
             <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="4"><result status="valid" time="0.78" steps="352"/></proof>
             </goal>
             <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="h">
              <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_eq_gen">
               <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.71" steps="350"/></proof>
                </goal>
                <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.52" steps="350"/></proof>
                </goal>
                <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.52" steps="350"/></proof>
                </goal>
                <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.0.3.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.0.3.0.0" expl="apply premises" proved="true">
                  <proof prover="3"><result status="valid" time="1.73"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC path_sem_basis_c.8.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.68" steps="350"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_basis_c.8.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="4.25"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_c" expl="VC for path_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.40" steps="318"/></proof>
  </goal>
  <goal name="VC path_sem_c.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.41" steps="319"/></proof>
  </goal>
  <goal name="VC path_sem_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.36" steps="304"/></proof>
  </goal>
  <goal name="VC path_sem_c.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.42" steps="308"/></proof>
  </goal>
  <goal name="VC path_sem_c.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.40" steps="318"/></proof>
  </goal>
  <goal name="VC path_sem_c.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_def">
   <goal name="VC path_sem_c.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC path_sem_c.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC path_sem_c.5.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="VC path_sem_c.5.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.87" steps="334"/></proof>
      </goal>
      <goal name="VC path_sem_c.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="5.89"/></proof>
      </goal>
      <goal name="VC path_sem_c.5.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="5.65"/></proof>
      </goal>
      <goal name="VC path_sem_c.5.0.0.0.3" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_c.5.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_c.5.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem_c.5.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_basis_c_spec">
          <goal name="VC path_sem_c.5.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.29"/></proof>
          </goal>
          <goal name="VC path_sem_c.5.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="4.42"/></proof>
          </goal>
          <goal name="VC path_sem_c.5.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="1.32"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_c.5.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.87"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_to_path_c" expl="VC for mat_sem_to_path_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_to_path_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_to_mat_c" expl="VC for path_sem_to_mat_c" proved="true">
 <proof prover="4"><result status="valid" time="2.31" steps="302"/></proof>
 </goal>
 <goal name="VC path_sem_basis_apply_c" expl="VC for path_sem_basis_apply_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis_apply_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.96" steps="304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC apply_path_sem_basis_c" expl="VC for apply_path_sem_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC apply_path_sem_basis_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.44" steps="304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_apply_c" expl="VC for path_sem_apply_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_apply_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.02" steps="302"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC apply_path_sem_c" expl="VC for apply_path_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC apply_path_sem_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.66" steps="302"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_mat_sem_c_path_sem_c" expl="VC for set_mat_sem_c_path_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_mat_sem_c_path_sem_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.83" steps="310"/></proof>
  </goal>
  <goal name="VC set_mat_sem_c_path_sem_c.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.98" steps="311"/></proof>
  </goal>
  <goal name="VC set_mat_sem_c_path_sem_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.81" steps="312"/></proof>
  </goal>
  <goal name="VC set_mat_sem_c_path_sem_c.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.90" steps="312"/></proof>
  </goal>
  <goal name="VC set_mat_sem_c_path_sem_c.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H11">
   <goal name="VC set_mat_sem_c_path_sem_c.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.37"/></proof>
   </goal>
   <goal name="VC set_mat_sem_c_path_sem_c.4.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.48" steps="316"/></proof>
   </goal>
   <goal name="VC set_mat_sem_c_path_sem_c.4.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.05" steps="316"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_mat_sem_c_path_sem_c.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.39" steps="312"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_basis_ket_l_c" expl="VC for path_sem_basis_ket_l_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis_ket_l_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.06" steps="306"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_ket_l_c" expl="VC for path_sem_ket_l_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket_l_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.06" steps="304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_ket_c" expl="VC for path_sem_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC path_sem_ket_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_l_to_ket_gen">
    <goal name="VC path_sem_ket_c.0.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(width_c c)">
     <goal name="VC path_sem_ket_c.0.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_ket_l_c">
      <goal name="VC path_sem_ket_c.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.39" steps="300"/></proof>
      </goal>
      <goal name="VC path_sem_ket_c.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.41" steps="300"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_ket_length_c" expl="VC for path_sem_ket_length_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket_length_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC path_sem_ket_length_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_l_to_ket">
    <goal name="VC path_sem_ket_length_c.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="2.06" steps="304"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_to_ket_l_c" expl="VC for path_sem_to_ket_l_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_to_ket_l_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.05" steps="304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_path_sem_c" expl="VC for get_path_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_path_sem_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_c_def">
   <goal name="VC get_path_sem_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="VC get_path_sem_c.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="2.38" steps="302"/></proof>
    </goal>
    <goal name="VC get_path_sem_c.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.41" steps="300"/></proof>
    </goal>
    <goal name="VC get_path_sem_c.0.0.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.44" steps="300"/></proof>
    </goal>
    <goal name="VC get_path_sem_c.0.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC get_path_sem_c.0.0.3.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC get_path_sem_c.0.0.3.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(length a)" arg2="(width_c c)">
       <goal name="VC get_path_sem_c.0.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.41" steps="302"/></proof>
       </goal>
       <goal name="VC get_path_sem_c.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="1.91" steps="304"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_path_sem_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.43" steps="300"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_path_sem_basis_c" expl="VC for get_path_sem_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_path_sem_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_c">
   <goal name="VC get_path_sem_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(width_c c &gt; 0)">
    <goal name="VC get_path_sem_basis_c.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_sum_l_null_but_maybe_one_elt" arg2="(fun y -&gt; get_ket x (bv_to_int y) *.. path_sem_basis_c c (bv_to_ket y)),(n_bvs (width_c c)),(ket_to_bv x),(width_c c)
">
     <goal name="VC get_path_sem_basis_c.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC get_path_sem_basis_c.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_ket (ket_to_bv x))" arg2="x">
        <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(get_ket x (bv_to_int (ket_to_bv x)))" arg2="c_one">
         <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_ket_l">
          <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="(width_c c)">
           <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.0.0.0" proved="true">
            <proof prover="4"><result status="valid" time="2.21" steps="307"/></proof>
            </goal>
            <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.0.0.1" proved="true">
            <proof prover="4"><result status="valid" time="2.19" steps="307"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_ket_l">
            <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="3"><result status="valid" time="1.24"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.39" steps="308"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="0.89"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC get_path_sem_basis_c.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="2.24" steps="307"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC get_path_sem_basis_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.41" steps="304"/></proof>
      </goal>
      <goal name="VC get_path_sem_basis_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="n_bvs_card">
       <goal name="VC get_path_sem_basis_c.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="2.94" steps="307"/></proof>
       </goal>
       <goal name="VC get_path_sem_basis_c.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.39" steps="304"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC get_path_sem_basis_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.16"/></proof>
      </goal>
      <goal name="VC get_path_sem_basis_c.0.0.0.0.4" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_scalar">
         <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="zero_mult_t">
          <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0" expl="apply premises" proved="true">
          <transf name="case" proved="true" arg1="(bv_to_int e&#39; = ket_to_int x)">
           <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.0" expl="true case (apply premises)" proved="true">
           <proof prover="2"><result status="valid" time="6.75"/></proof>
           </goal>
           <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1" expl="false case (apply premises)" proved="true">
           <transf name="replace" proved="true" arg1="x" arg2="(ket (width_c c) (ket_to_int x))">
            <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0" expl="false case (apply premises)" proved="true">
            <transf name="rewrite" proved="true" arg1="get__ket_value">
             <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
             <proof prover="4"><result status="valid" time="2.39" steps="317"/></proof>
             </goal>
             <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.61" steps="314"/></proof>
             </goal>
             <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="power_to_">
              <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width_c c)" arg2="(ket_length x)">
               <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.2.0.0" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.2.0.0.0" proved="true">
                <proof prover="4"><result status="valid" time="2.32" steps="317"/></proof>
                </goal>
                <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.2.0.0.1" proved="true">
                <proof prover="0"><result status="valid" time="0.87"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.2.0.1" expl="equality hypothesis" proved="true">
               <proof prover="4"><result status="valid" time="2.11" steps="317"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="0.41" steps="314"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(width_c c)" arg2="(length e&#39;)">
              <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.3.0" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="2.08" steps="316"/></proof>
              </goal>
              <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.0.3.1" expl="equality hypothesis" proved="true">
              <proof prover="4"><result status="valid" time="2.06" steps="317"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC get_path_sem_basis_c.0.0.0.0.4.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="0.88"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC get_path_sem_basis_c.0.0.1" expl="false case (postcondition)" proved="true">
    <proof prover="4"><result status="valid" time="2.04" steps="306"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_path_sem_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_parallel_c" expl="VC for circ_to_pps_parallel_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_parallel_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.03" steps="300"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_width_c" expl="VC for parallel_width_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_width_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_width_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="width_c_def">
    <goal name="VC parallel_width_c.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC parallel_width_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel_c">
      <goal name="VC parallel_width_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="4.50"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_range_c" expl="VC for parallel_range_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_range_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_range_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="range_c_def">
    <goal name="VC parallel_range_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel_c">
     <goal name="VC parallel_range_c.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="3.10"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_size_c" expl="VC for parallel_size_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_size_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_size_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC parallel_size_c.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="size_c_def7" arg2="(parallel_c d e),(pre d),(pre e)">
     <goal name="VC parallel_size_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC parallel_size_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="1.40"/></proof>
      </goal>
      <goal name="VC parallel_size_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.30"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_ancilla_c" expl="VC for parallel_ancilla_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_ancilla_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_ancilla_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC parallel_ancilla_c.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ancillas_c_def7" arg2="(parallel_c d e),(pre d),(pre e)">
     <goal name="VC parallel_ancilla_c.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="1.50"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_basis_ket_c" expl="VC for parallel_basis_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_basis_ket_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_basis_ket_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC parallel_basis_ket_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel_c">
     <goal name="VC parallel_basis_ket_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="eliminate_if" proved="true" >
      <goal name="VC parallel_basis_ket_c.0.0.0.0.0" expl="VC for parallel_basis_ket_c" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC parallel_basis_ket_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="4.72"/></proof>
       </goal>
       <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_par_spec1">
         <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
          <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_c d))" arg2="(width_c d)">
           <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="(h_range (circ_to_pps_c d))" arg2="(range_c d)">
            <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="5.25"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="4.56"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC parallel_basis_ket_c.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="4.74"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_angle_c" expl="VC for parallel_angle_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_angle_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_angle_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC parallel_angle_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
     <goal name="VC parallel_angle_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC parallel_angle_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_angle_c">
       <goal name="VC parallel_angle_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
        <goal name="VC parallel_angle_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel_c">
         <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_par_spec">
          <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="ang_add_eq">
           <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.52" steps="314"/></proof>
           </goal>
           <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_c d))" arg2="(width_c d)">
            <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(h_range (circ_to_pps_c d))" arg2="(range_c d)">
             <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
              <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="4.50"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC parallel_angle_c.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="4.48"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_sequence_c" expl="VC for circ_to_pps_sequence_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_sequence_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.00" steps="302"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_width_c" expl="VC for sequence_width_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_width_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sequence_width_c.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC sequence_width_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="width_c_def">
     <goal name="VC sequence_width_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="width_c_def">
      <goal name="VC sequence_width_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence_c">
       <goal name="VC sequence_width_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="1.29"/></proof>
       </goal>
       <goal name="VC sequence_width_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.53" steps="316"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_size_c" expl="VC for sequence_size_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_size_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sequence_size_c.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC sequence_size_c.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="size_c_def8" arg2="(sequence_c d e),(pre d),(pre e)">
     <goal name="VC sequence_size_c.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="1.24"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_ancillas_c" expl="VC for sequence_ancillas_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_ancillas_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sequence_ancillas_c.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ancillas_c_def8" arg2="(sequence_c d e),(pre d),(pre e)">
    <goal name="VC sequence_ancillas_c.0.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.27"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_range_c" expl="VC for sequence_range_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_range_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sequence_range_c.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC sequence_range_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="range_c_def">
     <goal name="VC sequence_range_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="range_c_def">
      <goal name="VC sequence_range_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence_c">
       <goal name="VC sequence_range_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="4.22"/></proof>
       </goal>
       <goal name="VC sequence_range_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.52" steps="316"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_basis_ket_c" expl="VC for sequence_basis_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_basis_ket_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sequence_basis_ket_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC sequence_basis_ket_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
     <goal name="VC sequence_basis_ket_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence_c">
      <goal name="VC sequence_basis_ket_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_seq_spec1">
        <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
         <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="replace" proved="true" arg1="(h_range (circ_to_pps_c d))" arg2="(range_c d)">
          <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(fun (y3:int) -&gt; basis_ket_c d x y y3)" arg2="((h_basis_ket (circ_to_pps_c d) @ x) @ y)">
           <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="5.17"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="4.73"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sequence_basis_ket_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="4.01"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sequence_basis_ket_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.56" steps="316"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_angle_c" expl="VC for sequence_angle_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_angle_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sequence_angle_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC sequence_angle_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
     <goal name="VC sequence_angle_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence_c">
      <goal name="VC sequence_angle_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sequence_angle_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_seq_spec">
        <goal name="VC sequence_angle_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ang_add_eq">
         <goal name="VC sequence_angle_c.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="5.51"/></proof>
         </goal>
         <goal name="VC sequence_angle_c.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
          <goal name="VC sequence_angle_c.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(fun (y3:int) -&gt; basis_ket_c d x y y3)" arg2="((h_basis_ket (circ_to_pps_c d) @ x) @ y)">
           <goal name="VC sequence_angle_c.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_range (circ_to_pps_c d))" arg2="(range_c d)">
            <goal name="VC sequence_angle_c.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC sequence_angle_c.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="5.46"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC sequence_angle_c.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="4.95"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sequence_angle_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="4.42"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sequence_angle_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.56" steps="316"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_ancilla_c" expl="VC for circ_to_pps_ancilla_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_ancilla_c.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_ancilla_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC circ_to_pps_ancilla_c.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ancilla_c_spec">
     <goal name="VC circ_to_pps_ancilla_c.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.38" steps="300"/></proof>
     </goal>
     <goal name="VC circ_to_pps_ancilla_c.0.0.0.1" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0" proved="true">
       <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps_c c) (kronecker x (ket 1 0)))" arg2="(path_sem_c c (kronecker x (ket 1 0)))">
        <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.0" proved="true">
        <proof prover="4"><result status="valid" time="2.01" steps="304"/></proof>
        </goal>
        <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="apply_path_sem_c">
         <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c -1+1)">
          <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.36" steps="302"/></proof>
           </goal>
           <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
           </goal>
           <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
           </goal>
           <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="2.33" steps="304"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC circ_to_pps_ancilla_c.0.0.0.1.0.0.1.0.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_width_c" expl="VC for ancilla_width_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_width_c.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_width_c.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ancilla_width_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="width_c_def">
     <goal name="VC ancilla_width_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="width_c_def">
      <goal name="VC ancilla_width_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ancilla_width_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla_c">
        <goal name="VC ancilla_width_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_anc_spec3">
         <goal name="VC ancilla_width_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC ancilla_width_c.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="1.30"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_width_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.53" steps="316"/></proof>
        </goal>
        <goal name="VC ancilla_width_c.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="exists" proved="true" arg1="path_sem_target">
         <goal name="VC ancilla_width_c.0.0.0.0.0.0.2.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ancilla_width_c.0.0.0.0.0.0.2.0.0" proved="true">
          <transf name="apply" proved="true" arg1="H1">
           <goal name="VC ancilla_width_c.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.52" steps="318"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_size_c" expl="VC for ancilla_size_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_size_c.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_size_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ancilla_size_c.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="size_c_def6" arg2="(ancilla_c c),(pre c)">
     <goal name="VC ancilla_size_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC ancilla_size_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="1.50"/></proof>
      </goal>
      <goal name="VC ancilla_size_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ancilla_c_spec2">
       <goal name="VC ancilla_size_c.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.64" steps="320"/></proof>
       </goal>
       <goal name="VC ancilla_size_c.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.60" steps="320"/></proof>
       </goal>
       <goal name="VC ancilla_size_c.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <transf name="destruct" proved="true" arg1="H">
        <goal name="VC ancilla_size_c.0.0.0.0.1.2.0" expl="rewrite premises" proved="true">
        <transf name="exists" proved="true" arg1="path_sem_target">
         <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0" proved="true">
          <transf name="instantiate" proved="true" arg1="H1" arg2="x">
           <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0" proved="true">
           <transf name="rewrite" proved="true" arg1="path_sem_c_spec" arg2="in" arg3="Hinst">
            <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.0" proved="true">
            <proof prover="3"><result status="valid" time="0.86"/></proof>
            </goal>
            <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c -1 +1)">
             <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="kronecker_ket_l">
              <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.27"/></proof>
              </goal>
              <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.1.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.75"/></proof>
              </goal>
              <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.1.0.2" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="0.78"/></proof>
              </goal>
              <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.1.0.3" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.22"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ancilla_size_c.0.0.0.0.1.2.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="3"><result status="valid" time="0.79"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_range_c" expl="VC for ancilla_range_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_range_c.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_range_c.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ancilla_range_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="range_c_def">
     <goal name="VC ancilla_range_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="range_c_def">
      <goal name="VC ancilla_range_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ancilla_range_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla_c">
        <goal name="VC ancilla_range_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_anc_spec2">
         <goal name="VC ancilla_range_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="4"><result status="valid" time="0.51" steps="316"/></proof>
         </goal>
         <goal name="VC ancilla_range_c.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="4.77"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_range_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.56" steps="316"/></proof>
        </goal>
        <goal name="VC ancilla_range_c.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="exists" proved="true" arg1="path_sem_target">
         <goal name="VC ancilla_range_c.0.0.0.0.0.0.2.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ancilla_range_c.0.0.0.0.0.0.2.0.0" proved="true">
          <transf name="apply" proved="true" arg1="H1">
           <goal name="VC ancilla_range_c.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.57" steps="318"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_ancilla_c" expl="VC for ancilla_ancilla_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_ancilla_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ancilla_ancilla_c.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ancillas_c_def6" arg2="(ancilla_c c),(pre c)">
    <goal name="VC ancilla_ancilla_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC ancilla_ancilla_c.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="1.32"/></proof>
     </goal>
     <goal name="VC ancilla_ancilla_c.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="ancilla_c_spec2">
      <goal name="VC ancilla_ancilla_c.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.67" steps="304"/></proof>
      </goal>
      <goal name="VC ancilla_ancilla_c.0.0.0.1.1" expl="apply premises" proved="true">
      <transf name="destruct" proved="true" arg1="H">
       <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0" proved="true">
         <transf name="instantiate" proved="true" arg1="H1" arg2="x">
          <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_c_spec" arg2="in" arg3="Hinst">
           <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.0" proved="true">
           <proof prover="4"><result status="valid" time="0.59" steps="304"/></proof>
           </goal>
           <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
            <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.55" steps="304"/></proof>
             </goal>
             <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.35" steps="304"/></proof>
             </goal>
             <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.53" steps="304"/></proof>
             </goal>
             <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.1.0.3" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.07" steps="307"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC ancilla_ancilla_c.0.0.0.1.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="4"><result status="valid" time="0.39" steps="304"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_basis_ket_c" expl="VC for ancilla_basis_ket_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_basis_ket_c.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_basis_ket_c.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ancilla_basis_ket_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
     <goal name="VC ancilla_basis_ket_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla_c">
      <goal name="VC ancilla_basis_ket_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ancilla_basis_ket_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_anc_spec1">
        <goal name="VC ancilla_basis_ket_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_c c))" arg2="(width_c c)">
         <goal name="VC ancilla_basis_ket_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
          <goal name="VC ancilla_basis_ket_c.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ancilla_basis_ket_c.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="5.11"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_basis_ket_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="4.60"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ancilla_basis_ket_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.51" steps="316"/></proof>
      </goal>
      <goal name="VC ancilla_basis_ket_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="exists" proved="true" arg1="path_sem_target">
       <goal name="VC ancilla_basis_ket_c.0.0.0.0.2.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ancilla_basis_ket_c.0.0.0.0.2.0.0" proved="true">
        <transf name="apply" proved="true" arg1="H1">
         <goal name="VC ancilla_basis_ket_c.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.51" steps="318"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_angle_c" expl="VC for ancilla_angle_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_angle_c.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_angle_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ancilla_angle_c.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ancilla_angle_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
      <goal name="VC ancilla_angle_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla_c">
       <goal name="VC ancilla_angle_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC ancilla_angle_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_anc_spec">
         <goal name="VC ancilla_angle_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
          <goal name="VC ancilla_angle_c.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(h_width (circ_to_pps_c c))" arg2="(width_c c)">
           <goal name="VC ancilla_angle_c.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC ancilla_angle_c.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="4.33"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC ancilla_angle_c.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="5.29"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ancilla_angle_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.49" steps="316"/></proof>
       </goal>
       <goal name="VC ancilla_angle_c.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="VC ancilla_angle_c.0.0.0.0.0.2.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ancilla_angle_c.0.0.0.0.0.2.0.0" proved="true">
         <transf name="apply" proved="true" arg1="H1">
          <goal name="VC ancilla_angle_c.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.51" steps="318"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_eq_c" expl="VC for sequence_eq_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_eq_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.39" steps="304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_eq_c" expl="VC for ancilla_eq_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_eq_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="302"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_eq_c" expl="VC for parallel_eq_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_eq_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="302"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_decomp_c" expl="VC for path_sem_decomp_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_decomp_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_c_def">
   <goal name="VC path_sem_decomp_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="VC path_sem_decomp_c.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="2.07" steps="302"/></proof>
    </goal>
    <goal name="VC path_sem_decomp_c.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.41" steps="300"/></proof>
    </goal>
    <goal name="VC path_sem_decomp_c.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC path_sem_decomp_c.0.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_decomp_c.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC path_sem_decomp_c.0.0.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_decomp_c.0.0.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_path_sem_basis_c">
         <goal name="VC path_sem_decomp_c.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.36" steps="304"/></proof>
         </goal>
         <goal name="VC path_sem_decomp_c.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.10" steps="306"/></proof>
         </goal>
         <goal name="VC path_sem_decomp_c.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.00" steps="306"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_decomp_c.0.0.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="2.03" steps="306"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_decomp_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.39" steps="300"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal__c" expl="VC for path_sem_scal__c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal__c.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="y" arg2="(path_sem_c c x)">
   <goal name="VC path_sem_scal__c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_path_sem_c">
    <goal name="VC path_sem_scal__c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="VC path_sem_scal__c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_assoc_rev">
      <goal name="VC path_sem_scal__c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="get_path_sem_c">
       <goal name="VC path_sem_scal__c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
        <goal name="VC path_sem_scal__c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq">
         <goal name="VC path_sem_scal__c.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="1.91" steps="304"/></proof>
         </goal>
         <goal name="VC path_sem_scal__c.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
         </goal>
         <goal name="VC path_sem_scal__c.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_scal__c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="2.00" steps="304"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_scal__c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.33" steps="302"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_scal__c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="2.07" steps="304"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_scal__c.0.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_c" expl="VC for path_sem_scal_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.01" steps="302"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_rev_c" expl="VC for path_sem_scal_rev_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_rev_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.06" steps="302"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_add_c" expl="VC for path_sem_add_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_add_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_add_ket_l_c" expl="VC for path_sem_scal_add_ket_l_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_add_ket_l_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal_rev_c">
   <goal name="VC path_sem_scal_add_ket_l_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_scal_rev_c">
    <goal name="VC path_sem_scal_add_ket_l_c.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="n" arg2="(width_c c)">
     <goal name="VC path_sem_scal_add_ket_l_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_add_c">
      <goal name="VC path_sem_scal_add_ket_l_c.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="2.04" steps="306"/></proof>
      </goal>
      <goal name="VC path_sem_scal_add_ket_l_c.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="2.02" steps="306"/></proof>
      </goal>
      <goal name="VC path_sem_scal_add_ket_l_c.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.35" steps="304"/></proof>
      </goal>
      <goal name="VC path_sem_scal_add_ket_l_c.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.38" steps="304"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_scal_add_ket_l_c.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="0.37" steps="304"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_scal_add_ket_l_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.38" steps="304"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_scal_add_ket_l_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.37" steps="304"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_substr_c" expl="VC for path_sem_substr_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_substr_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_substr_def">
   <goal name="VC path_sem_substr_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_substr_def">
    <goal name="VC path_sem_substr_c.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(add_mat x ((-. c_one) *.. x&#39;))" arg2="(add_ket_l x ((-. c_one) *.. x&#39;) (width_c c))">
     <goal name="VC path_sem_substr_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add_mat y ((-. c_one) *.. y&#39;))" arg2="(add_ket_l y ((-. c_one) *.. y&#39;) (width_c c))">
      <goal name="VC path_sem_substr_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="path_sem_add_c">
       <goal name="VC path_sem_substr_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.38" steps="306"/></proof>
       </goal>
       <goal name="VC path_sem_substr_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="1.98" steps="308"/></proof>
       </goal>
       <goal name="VC path_sem_substr_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.38" steps="306"/></proof>
       </goal>
       <goal name="VC path_sem_substr_c.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="2.15" steps="308"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_substr_c.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_to_add_mat">
       <goal name="VC path_sem_substr_c.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <proof prover="4"><result status="valid" time="0.38" steps="306"/></proof>
       </goal>
       <goal name="VC path_sem_substr_c.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="2.06" steps="308"/></proof>
       </goal>
       <goal name="VC path_sem_substr_c.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="2.10" steps="308"/></proof>
       </goal>
       <goal name="VC path_sem_substr_c.0.0.0.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.94"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_substr_c.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="add_ket_l_to_add_mat">
      <goal name="VC path_sem_substr_c.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.36" steps="306"/></proof>
      </goal>
      <goal name="VC path_sem_substr_c.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="2.19" steps="308"/></proof>
      </goal>
      <goal name="VC path_sem_substr_c.0.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.36" steps="306"/></proof>
      </goal>
      <goal name="VC path_sem_substr_c.0.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="2.11" steps="308"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_substr_c.0.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(rows y)" arg2="(power_ 2 (ket_length y))">
     <goal name="VC path_sem_substr_c.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(rows y&#39;)" arg2="(power_ 2 (ket_length y&#39;))">
      <goal name="VC path_sem_substr_c.0.0.1.0.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="power__eq">
       <goal name="VC path_sem_substr_c.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.47" steps="306"/></proof>
       </goal>
       <goal name="VC path_sem_substr_c.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(ket_length y)" arg2="(width_c c)">
        <goal name="VC path_sem_substr_c.0.0.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="VC path_sem_substr_c.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC path_sem_substr_c.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_l_to_ket">
           <goal name="VC path_sem_substr_c.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="2.01" steps="308"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_substr_c.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem_substr_c.0.0.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ket_l_to_ket">
          <goal name="VC path_sem_substr_c.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="1.99" steps="308"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_substr_c.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="0.93"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_substr_c.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.87"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_substr_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.98"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_substr_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.06"/></proof>
   </goal>
   <goal name="VC path_sem_substr_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_add_c" expl="VC for path_sem_scal_add_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_add_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.88"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pat_sem_apply_basis_value" expl="VC for pat_sem_apply_basis_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pat_sem_apply_basis_value.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_basis_c">
   <goal name="VC pat_sem_apply_basis_value.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pat_sem_apply_basis_value.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis_c_spec">
     <goal name="VC pat_sem_apply_basis_value.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis_value">
      <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="mult_eq_t">
       <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="3"><result status="valid" time="1.29"/></proof>
       </goal>
       <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq_gen">
        <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="3"><result status="valid" time="1.29"/></proof>
        </goal>
        <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mult_eq_t">
           <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.53"/></proof>
           </goal>
           <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_basis_ket_bv (circ_to_pps_c c) (ket_to_bv (bv_to_ket x1)) x)" arg2="(make_bv (fun (y3:int) -&gt; basis_ket_c c (getbv x1) (getbv x) y3) (width_c c))">
            <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.05"/></proof>
            </goal>
            <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
             <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
             <transf name="apply" proved="true" arg1="make_bv_eq">
              <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="2.17" steps="308"/></proof>
              </goal>
              <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.1" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="2.15" steps="308"/></proof>
              </goal>
              <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.2" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.58"/></proof>
              </goal>
              <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="2.19" steps="315"/></proof>
                </goal>
                <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="2.19" steps="315"/></proof>
                </goal>
                <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.0.2" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.41" steps="310"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.1" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.1.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="2.23" steps="315"/></proof>
                </goal>
                <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.1.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="2.23" steps="315"/></proof>
                </goal>
                <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.0.3.1.2" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.42" steps="310"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.1" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="1.41"/></proof>
             </goal>
             <goal name="VC pat_sem_apply_basis_value.0.0.0.0.0.1.1.0.0.1.1.2" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="2.18" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pat_sem_apply_basis_value.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.24"/></proof>
      </goal>
      <goal name="VC pat_sem_apply_basis_value.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.10"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pat_sem_apply_basis_value.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.12" steps="306"/></proof>
     </goal>
     <goal name="VC pat_sem_apply_basis_value.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.15" steps="306"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pat_sem_apply_basis_value.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.17" steps="306"/></proof>
   </goal>
   <goal name="VC pat_sem_apply_basis_value.0.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.19" steps="306"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_substr_c" expl="VC for path_sem_scal_substr_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_substr_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
   <goal name="VC path_sem_scal_substr_c.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="2.11" steps="308"/></proof>
   </goal>
   <goal name="VC path_sem_scal_substr_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.91"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum_c" expl="VC for path_sem_sum_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.03" steps="309"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.89"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.36" steps="310"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.11" steps="311"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.37" steps="312"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.6" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_sem_sum_c.6.0" expl="variant decrease" proved="true">
   <proof prover="4"><result status="valid" time="0.38" steps="310"/></proof>
   </goal>
   <goal name="VC path_sem_sum_c.6.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="1.01"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_sem_sum_c.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.00"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.8" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.38" steps="312"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.9" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.44" steps="317"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.10" steps="317"/></proof>
  </goal>
  <goal name="VC path_sem_sum_c.11" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.06"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum_diag_c" expl="VC for path_sem_sum_diag_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_diag_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_diag_def">
   <goal name="VC path_sem_sum_diag_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC path_sem_sum_diag_c.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_sum_c">
     <goal name="VC path_sem_sum_diag_c.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.90"/></proof>
     </goal>
     <goal name="VC path_sem_sum_diag_c.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.36" steps="302"/></proof>
     </goal>
     <goal name="VC path_sem_sum_diag_c.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_sum_diag_c.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_sum_diag_c.0.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.95"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_sum_diag_c.0.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_sum_diag_c.0.0.0.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_sum_diag_c.0.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.99"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_sum_diag_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.07" steps="304"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum__c" expl="VC for path_sem_sum__c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum__c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_sum_c">
   <goal name="VC path_sem_sum__c.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.37" steps="302"/></proof>
   </goal>
   <goal name="VC path_sem_sum__c.0.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
   </goal>
   <goal name="VC path_sem_sum__c.0.2" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.02" steps="306"/></proof>
   </goal>
   <goal name="VC path_sem_sum__c.0.3" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.04" steps="306"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum_gen_c" expl="VC for path_sem_sum_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_gen_c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_sum_c">
   <goal name="VC path_sem_sum_gen_c.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
   </goal>
   <goal name="VC path_sem_sum_gen_c.0.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
   </goal>
   <goal name="VC path_sem_sum_gen_c.0.2" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="1.96" steps="306"/></proof>
   </goal>
   <goal name="VC path_sem_sum_gen_c.0.3" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.23" steps="306"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_path_sem_sum_gen_c" expl="VC for scal_path_sem_sum_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_path_sem_sum_gen_c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="VC scal_path_sem_sum_gen_c.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC scal_path_sem_sum_gen_c.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_sum_gen_c">
     <goal name="VC scal_path_sem_sum_gen_c.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.39" steps="306"/></proof>
     </goal>
     <goal name="VC scal_path_sem_sum_gen_c.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.39" steps="306"/></proof>
     </goal>
     <goal name="VC scal_path_sem_sum_gen_c.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.08" steps="310"/></proof>
     </goal>
     <goal name="VC scal_path_sem_sum_gen_c.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.03" steps="310"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC scal_path_sem_sum_gen_c.0.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.55" steps="306"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_path_sem_sum_c" expl="VC for scal_path_sem_sum_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_path_sem_sum_c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="VC scal_path_sem_sum_c.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_sum_c">
    <goal name="VC scal_path_sem_sum_c.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.42" steps="302"/></proof>
    </goal>
    <goal name="VC scal_path_sem_sum_c.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.52" steps="302"/></proof>
    </goal>
    <goal name="VC scal_path_sem_sum_c.0.0.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="2.19" steps="306"/></proof>
    </goal>
    <goal name="VC scal_path_sem_sum_c.0.0.3" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="2.14" steps="306"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC scal_path_sem_sum_c.0.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.37" steps="302"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_sum_c" expl="VC for path_sem_scal_sum_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_sum_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
   <goal name="VC path_sem_scal_sum_c.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="scal_path_sem_sum_c">
    <goal name="VC path_sem_scal_sum_c.0.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.52" steps="302"/></proof>
    </goal>
    <goal name="VC path_sem_scal_sum_c.0.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.53" steps="302"/></proof>
    </goal>
    <goal name="VC path_sem_scal_sum_c.0.0.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="1.98" steps="306"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_scal_sum_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.91"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_comp_basis_c" expl="VC for path_sem_comp_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_comp_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply_c">
   <goal name="VC path_sem_comp_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply_c">
    <goal name="VC path_sem_comp_basis_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence_c">
     <goal name="VC path_sem_comp_basis_c.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="5.98"/></proof>
     </goal>
     <goal name="VC path_sem_comp_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.38" steps="304"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_comp_basis_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.90"/></proof>
    </goal>
    <goal name="VC path_sem_comp_basis_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.38" steps="304"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_comp_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.45" steps="306"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_comp_pre_c" expl="VC for path_sem_comp_pre_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_comp_pre_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_c">
   <goal name="VC path_sem_comp_pre_c.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="get_path_sem_c" arg2="d,x">
    <goal name="VC path_sem_comp_pre_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC path_sem_comp_pre_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC path_sem_comp_pre_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="2.16" steps="306"/></proof>
       </goal>
       <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.83"/></proof>
       </goal>
       <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="2.04" steps="306"/></proof>
       </goal>
       <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_comp_basis_c">
          <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width_c e)" arg2="(width_c d)">
            <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="path_sem_basis_c_spec1">
              <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.91"/></proof>
              </goal>
              <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="2.05" steps="308"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="4"><result status="valid" time="0.37" steps="306"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.05"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="2.03" steps="308"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre_c.0.0.0.0.0.3.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.38" steps="306"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_comp_pre_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="1.99" steps="306"/></proof>
      </goal>
      <goal name="VC path_sem_comp_pre_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.39" steps="304"/></proof>
      </goal>
      <goal name="VC path_sem_comp_pre_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_comp_pre_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_comp_pre_c.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="VC path_sem_comp_pre_c.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="path_sem_basis_ket_l_c">
          <goal name="VC path_sem_comp_pre_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="2.12" steps="308"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre_c.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.34" steps="306"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre_c.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="2.07" steps="308"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_comp_pre_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.34" steps="304"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_comp_pre_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.93"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_comp_c" expl="VC for path_sem_comp_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_comp_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.07" steps="308"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_kron_basis_c" expl="VC for path_sem_kron_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_basis_apply_c">
   <goal name="VC path_sem_kron_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply_c">
    <goal name="VC path_sem_kron_basis_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis_apply_c">
     <goal name="VC path_sem_kron_basis_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_to_bv_kronecker">
      <goal name="VC path_sem_kron_basis_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel_c">
       <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_apply_basis_par">
        <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(hpart (concat (ket_to_bv x) (ket_to_bv y)) (h_width (circ_to_pps_c d)))" arg2="(ket_to_bv x)
">
          <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.37" steps="306"/></proof>
          </goal>
          <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.44"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(tpart (concat (ket_to_bv x) (ket_to_bv y)) (h_width (circ_to_pps_c d)))" arg2="(ket_to_bv y)
">
          <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.36" steps="306"/></proof>
          </goal>
          <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.30"/></proof>
           </goal>
           <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.44"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_kron_basis_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="3"><result status="valid" time="1.20"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_kron_basis_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.39" steps="306"/></proof>
      </goal>
      <goal name="VC path_sem_kron_basis_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.37" steps="306"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_kron_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.40" steps="306"/></proof>
     </goal>
     <goal name="VC path_sem_kron_basis_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.42" steps="306"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_kron_basis_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.41" steps="306"/></proof>
    </goal>
    <goal name="VC path_sem_kron_basis_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.43" steps="306"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_kron_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.24" steps="308"/></proof>
   </goal>
   <goal name="VC path_sem_kron_basis_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.21" steps="308"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_kron_pre_c" expl="VC for path_sem_kron_pre_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron_pre_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply_c">
   <goal name="VC path_sem_kron_pre_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_apply_c">
    <goal name="VC path_sem_kron_pre_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_apply_c">
     <goal name="VC path_sem_kron_pre_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel_c">
      <goal name="VC path_sem_kron_pre_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="1.34"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_kron_pre_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_kron_pre_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_kron_pre_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="2.02" steps="304"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_kron_c" expl="VC for path_sem_kron_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="1.94" steps="308"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_kron_c_" expl="VC for path_sem_kron_c_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron_c_.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.04" steps="304"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sequence_parallel_basis_c" expl="VC for path_sem_sequence_parallel_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sequence_parallel_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_comp_pre_c">
   <goal name="VC path_sem_sequence_parallel_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="x" arg2="(kronecker (bv_to_ket (hpart (ket_to_bv x) (width_c a))) (bv_to_ket (tpart (ket_to_bv x) (width_c a))))">
    <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_kron_c_">
     <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_kron_c_">
      <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_kron_c_">
       <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_comp_pre_c">
         <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.97"/></proof>
         </goal>
         <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.48" steps="306"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.87"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.86"/></proof>
       </goal>
       <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.87"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.80"/></proof>
      </goal>
      <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.99"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.82"/></proof>
     </goal>
     <goal name="VC path_sem_sequence_parallel_basis_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.93"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_sequence_parallel_basis_c.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.83"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_sequence_parallel_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC path_sem_sequence_parallel_basis_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.86"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sequence_parallel_c" expl="VC for path_sem_sequence_parallel_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sequence_parallel_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(width_c a + width_c b)">
   <goal name="VC path_sem_sequence_parallel_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC path_sem_sequence_parallel_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
     <goal name="VC path_sem_sequence_parallel_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="2.14" steps="306"/></proof>
       </goal>
       <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.43" steps="304"/></proof>
       </goal>
       <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.46" steps="304"/></proof>
       </goal>
       <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
          <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="path_sem_sequence_parallel_basis_c">
             <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.12" steps="309"/></proof>
             </goal>
             <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.39" steps="306"/></proof>
             </goal>
             <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.39" steps="306"/></proof>
             </goal>
             <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.02" steps="309"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.89"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.91"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="2.10" steps="307"/></proof>
      </goal>
      <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.84"/></proof>
      </goal>
      <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="parallel_width_c">
          <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="sequence_width_c">
           <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="sequence_width_c">
            <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="2.21" steps="309"/></proof>
            </goal>
            <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.43" steps="306"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_sequence_parallel_c.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.46" steps="306"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_sequence_parallel_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.00" steps="307"/></proof>
     </goal>
     <goal name="VC path_sem_sequence_parallel_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.83"/></proof>
     </goal>
     <goal name="VC path_sem_sequence_parallel_c.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_ket_l">
        <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="sequence_width_c">
         <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="parallel_width_c">
          <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="2.27" steps="309"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="parallel_width_c">
          <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="parallel_width_c">
           <goal name="VC path_sem_sequence_parallel_c.0.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.43" steps="306"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_sequence_parallel_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="2.00" steps="306"/></proof>
    </goal>
    <goal name="VC path_sem_sequence_parallel_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="1.97" steps="306"/></proof>
    </goal>
    <goal name="VC path_sem_sequence_parallel_c.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="2.03" steps="306"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_id_basis_c" expl="VC for path_sem_id_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_id_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_basis_c_def">
   <goal name="VC path_sem_id_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
    <goal name="VC path_sem_id_basis_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC path_sem_id_basis_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_id_basis_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
       <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(make_bv
   (fun (y3:int) -&gt;
     basis_ket_c id_c (getbv (ket_to_bv x))
     (getbv (choose (n_bvs (range_c id_c)))) y3)
   (width_c id_c))" arg2="(ket_to_bv x)">
        <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="4"><result status="valid" time="2.32" steps="304"/></proof>
        </goal>
        <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_bv">
         <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.88"/></proof>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.46"/></proof>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.22"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.41" steps="302"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
            <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.09" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="1.48"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.49" steps="306"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.36"/></proof>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.31"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.0.0.0.1.1.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_id_basis_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="2.13" steps="304"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_id_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.39" steps="302"/></proof>
     </goal>
     <goal name="VC path_sem_id_basis_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.13" steps="304"/></proof>
     </goal>
     <goal name="VC path_sem_id_basis_c.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_id_basis_c.0.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(make_bv
   (fun (y3:int) -&gt;
     basis_ket_c id_c (getbv (ket_to_bv x))
     (getbv (choose (n_bvs (range_c id_c)))) y3)
   (width_c id_c))" arg2="(ket_to_bv x)">
        <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.85"/></proof>
        </goal>
        <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_bv">
         <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.89"/></proof>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.20"/></proof>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.33"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
            <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.10" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="1.49"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.39" steps="306"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.18"/></proof>
            </goal>
            <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="3"><result status="valid" time="1.20"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_id_basis_c.0.0.0.3.0.0.1.1.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.37" steps="302"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_id_basis_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.37"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_id_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.40" steps="302"/></proof>
   </goal>
   <goal name="VC path_sem_id_basis_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.47" steps="302"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_id_c" expl="VC for path_sem_id_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_id_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,1">
   <goal name="VC path_sem_id_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC path_sem_id_c.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_sum_c">
     <goal name="VC path_sem_id_c.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.14" steps="303"/></proof>
     </goal>
     <goal name="VC path_sem_id_c.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.38" steps="300"/></proof>
     </goal>
     <goal name="VC path_sem_id_c.0.0.0.2" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_id_c.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC path_sem_id_c.0.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="2.21" steps="305"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_id_c.0.0.0.3" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_id_c.0.0.0.3.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC path_sem_id_c.0.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
        <goal name="VC path_sem_id_c.0.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_path_sem_basis_c">
         <goal name="VC path_sem_id_c.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_id_basis_c">
          <goal name="VC path_sem_id_c.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.40" steps="302"/></proof>
          </goal>
          <goal name="VC path_sem_id_c.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="2.16" steps="305"/></proof>
          </goal>
          <goal name="VC path_sem_id_c.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="2.10" steps="305"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_id_c.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.10" steps="305"/></proof>
         </goal>
         <goal name="VC path_sem_id_c.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.06" steps="305"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_id_c.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="2.08" steps="305"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_id_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.39" steps="300"/></proof>
    </goal>
    <goal name="VC path_sem_id_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="1.99" steps="302"/></proof>
    </goal>
    <goal name="VC path_sem_id_c.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="1.96" steps="302"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_phase_basis_c" expl="VC for path_sem_phase_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_phase_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_basis_c">
   <goal name="VC path_sem_phase_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_c_def">
    <goal name="VC path_sem_phase_basis_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
     <goal name="VC path_sem_phase_basis_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_zero">
      <goal name="VC path_sem_phase_basis_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(width_c (phase_c k))" arg2="1">
        <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(make_bv
        (fun (y3:int) -&gt;
          basis_ket_c (phase_c k) (getbv (ket_to_bv x))
          (getbv (int_to_bv 0 0)) y3)
        1)" arg2="(ket_to_bv x)">
         <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="3"><result status="valid" time="1.13"/></proof>
         </goal>
         <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_bv">
          <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(length
  (make_bv
   (fun (y3:int) -&gt;
     basis_ket_c (phase_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0)) y3)
   1))" arg2="1">
           <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.82"/></proof>
           </goal>
           <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="make_bv_length">
            <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.87"/></proof>
              </goal>
              <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.16"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.35" steps="302"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
            <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.38" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="0.88"/></proof>
              </goal>
              <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="1.17"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.37" steps="306"/></proof>
             </goal>
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="0.93"/></proof>
               </goal>
               <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.2.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="3"><result status="valid" time="1.18"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.50" steps="306"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_phase_basis_c.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="2.00" steps="304"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_phase_basis_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="1.96" steps="304"/></proof>
      </goal>
      <goal name="VC path_sem_phase_basis_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="1.94" steps="304"/></proof>
      </goal>
      <goal name="VC path_sem_phase_basis_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_ket_l">
        <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
         <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="make_bv_length">
          <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(basis_ket_c (phase_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0)) i )" arg2="((getbv (ket_to_bv x))  i)">
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.00" steps="308"/></proof>
             </goal>
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="4"><result status="valid" time="1.98" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(basis_ket_c (phase_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0)) i )" arg2="((getbv (ket_to_bv x))  i)">
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="1.96" steps="308"/></proof>
             </goal>
             <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="4"><result status="valid" time="2.00" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_phase_basis_c.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="1.94" steps="304"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_phase_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.89"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_phase_basis_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.93"/></proof>
    </goal>
    <goal name="VC path_sem_phase_basis_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.48" steps="302"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_phase_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.94"/></proof>
   </goal>
   <goal name="VC path_sem_phase_basis_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.48" steps="302"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_phase_basis_inv_c" expl="VC for path_sem_phase_basis_inv_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_phase_basis_inv_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="path_sem_phase_basis_c" arg2="x,(-k)">
   <goal name="VC path_sem_phase_basis_inv_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC path_sem_phase_basis_inv_c.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0" expl="VC for path_sem_phase_basis_inv_c" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
       <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="instantiate" proved="true" arg1="path_sem_phase_basis_c" arg2="x,k">
        <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="case" proved="true" arg1="(k = 0)">
          <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst1">
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_assoc">
            <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
            <transf name="apply" proved="true" arg1="scalar_c_one_gen">
             <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.01"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.56" steps="308"/></proof>
           </goal>
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.41" steps="308"/></proof>
           </goal>
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.43" steps="308"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1" expl="false case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="Hinst">
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1.0" expl="false case (postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_assoc">
            <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1.0.0" expl="false case (postcondition)" proved="true">
            <transf name="apply" proved="true" arg1="scalar_c_one_gen">
             <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ang_exp_mult">
              <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="2.81" steps="314"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.42" steps="308"/></proof>
           </goal>
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.56" steps="308"/></proof>
           </goal>
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.53" steps="308"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.94"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="path_sem_phase_basis_c" arg2="x,k">
       <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
         <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst1">
          <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_assoc">
           <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="scalar_c_one_gen">
            <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(- (- k))" arg2="k">
             <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ang_exp_mult">
              <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.00"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="4"><result status="valid" time="0.45" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.52" steps="308"/></proof>
          </goal>
          <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="308"/></proof>
          </goal>
          <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.41" steps="308"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_phase_basis_inv_c.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.97"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_phase_basis_inv_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.49" steps="302"/></proof>
    </goal>
    <goal name="VC path_sem_phase_basis_inv_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.52" steps="302"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_phase_inv_c" expl="VC for path_sem_phase_inv_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_phase_inv_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.40" steps="300"/></proof>
  </goal>
  <goal name="VC path_sem_phase_inv_c.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.23" steps="302"/></proof>
  </goal>
  <goal name="VC path_sem_phase_inv_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.21" steps="304"/></proof>
  </goal>
  <goal name="VC path_sem_phase_inv_c.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC path_sem_phase_inv_c.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
    <goal name="VC path_sem_phase_inv_c.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
     <goal name="VC path_sem_phase_inv_c.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_phase_inv_c.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.52" steps="302"/></proof>
       </goal>
       <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.55" steps="302"/></proof>
       </goal>
       <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
          <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="2.12" steps="306"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.96"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_phase_inv_c.3.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.01"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_phase_inv_c.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="3.70" steps="304"/></proof>
     </goal>
     <goal name="VC path_sem_phase_inv_c.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="3.47" steps="304"/></proof>
     </goal>
     <goal name="VC path_sem_phase_inv_c.3.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_phase_inv_c.3.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_phase_inv_c.3.0.0.3.0.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
        <goal name="VC path_sem_phase_inv_c.3.0.0.3.0.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="VC path_sem_phase_inv_c.3.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.27"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_phase_inv_c.3.0.0.3.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.63"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_phase_inv_c.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="3.92" steps="304"/></proof>
    </goal>
    <goal name="VC path_sem_phase_inv_c.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="5.15" steps="304"/></proof>
    </goal>
    <goal name="VC path_sem_phase_inv_c.3.0.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC path_sem_phase_inv_c.3.0.3.0" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_phase_inv_c.3.0.3.0.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC path_sem_phase_inv_c.3.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.26"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_rz_basis_c" expl="VC for path_sem_rz_basis_c">
 <transf name="split_vc" >
  <goal name="VC path_sem_rz_basis_c.0" expl="postcondition">
  <transf name="rewrite" arg1="get_path_sem_basis_c">
   <goal name="VC path_sem_rz_basis_c.0.0" expl="postcondition">
   <transf name="rewrite" arg1="path_sem_basis_c_def">
    <goal name="VC path_sem_rz_basis_c.0.0.0" expl="postcondition">
    <transf name="rewrite" arg1="scalar_c_one_gen">
     <goal name="VC path_sem_rz_basis_c.0.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="ket_sum_bitvec_zero">
      <goal name="VC path_sem_rz_basis_c.0.0.0.0.0" expl="postcondition">
      <transf name="compute_specified" >
       <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0" expl="postcondition">
       <transf name="replace" arg1="(width_c (rz_c k))" arg2="1">
        <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(make_bv
        (fun (y3:int) -&gt;
          basis_ket_c (rz_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0))
          y3)
        1)" arg2="(((ket_to_bv x)) )">
         <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0" expl="VC for path_sem_rz_basis_c" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="((ang_ind_c (rz_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0))))" arg2="(ang_zero)">
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <proof prover="3"><result status="valid" time="1.54"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="1.75"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="((ang_ind_c (rz_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0))))" arg2="(int_to_ang 1 k)">
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.1.0" expl="postcondition" proved="true">
            <proof prover="4"><result status="valid" time="4.08" steps="308"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="1.83"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="((ang_ind_c (rz_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0))))" arg2="(int_to_ang (-1) (-k))">
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.2.0" expl="postcondition" proved="true">
            <proof prover="4"><result status="valid" time="4.04" steps="308"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="1.35"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_bv">
          <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(length
  (make_bv
   (fun (y3:int) -&gt;
     basis_ket_c (rz_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0)) y3)
   1))" arg2="1">
           <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.52"/></proof>
           </goal>
           <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
           <transf name="apply" proved="true" arg1="make_bv_length">
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.52"/></proof>
              </goal>
              <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.98"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.62" steps="302"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="3.26" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.76"/></proof>
              </goal>
              <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="2.36"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.64" steps="306"/></proof>
             </goal>
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.19"/></proof>
               </goal>
               <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.2.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="3"><result status="valid" time="2.21"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.83" steps="306"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_rz_basis_c.0.0.0.0.0.0.1" expl="equality hypothesis">
        <proof prover="4"><result status="timeout" time="5.00"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_rz_basis_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="4.76" steps="304"/></proof>
      </goal>
      <goal name="VC path_sem_rz_basis_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="2.64" steps="304"/></proof>
      </goal>
      <goal name="VC path_sem_rz_basis_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_ket_l">
        <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
         <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="make_bv_length">
          <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(basis_ket_c (rz_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0)) i)" arg2="((getbv (ket_to_bv x)) i)">
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="2.53" steps="308"/></proof>
             </goal>
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="4"><result status="valid" time="1.96" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(basis_ket_c (rz_c k) (getbv (ket_to_bv x)) (getbv (int_to_bv 0 0)) i)" arg2="((getbv (ket_to_bv x)) i)">
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="1.96" steps="308"/></proof>
             </goal>
             <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
             <proof prover="4"><result status="valid" time="1.99" steps="308"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_rz_basis_c.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="1.93" steps="304"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_rz_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_rz_basis_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.91"/></proof>
    </goal>
    <goal name="VC path_sem_rz_basis_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_rz_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.08"/></proof>
   </goal>
   <goal name="VC path_sem_rz_basis_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.37" steps="302"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_rz_basis_inv_c" expl="VC for path_sem_rz_basis_inv_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_rz_basis_inv_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="path_sem_rz_basis_c" arg2="x,(-k)">
   <goal name="VC path_sem_rz_basis_inv_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC path_sem_rz_basis_inv_c.0.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0" expl="VC for path_sem_rz_basis_inv_c" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="4"><result status="valid" time="2.15" steps="308"/></proof>
      </goal>
      <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
       <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0" expl="postcondition" proved="true">
       <transf name="instantiate" proved="true" arg1="path_sem_rz_basis_c" arg2="x,k">
        <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
         <transf name="case" proved="true" arg1="(ket_to_int x = 0)">
          <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.0" expl="true case (postcondition)" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="308"/></proof>
          </goal>
          <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1" expl="false case (postcondition)" proved="true">
          <transf name="case" proved="true" arg1="(k= 0)">
           <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="Hinst1">
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_assoc">
             <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0.0.0" expl="false case (true case. postcondition)" proved="true">
             <transf name="apply" proved="true" arg1="scalar_c_one_gen">
              <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.99"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.41" steps="310"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.43" steps="310"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0.3" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.45" steps="310"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.0.4" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.46" steps="310"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1" expl="false case (postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="Hinst">
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.0" expl="false case (postcondition)" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_assoc">
             <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.0.0" expl="false case (postcondition)" proved="true">
             <transf name="apply" proved="true" arg1="scalar_c_one_gen">
              <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ang_exp_mult">
               <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="2.46" steps="316"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.43" steps="310"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.42" steps="310"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.3" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.42" steps="310"/></proof>
            </goal>
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.0.0.0.1.1.4" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.42" steps="310"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.06"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2" expl="postcondition" proved="true">
      <transf name="instantiate" proved="true" arg1="path_sem_rz_basis_c" arg2="x,k">
       <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
         <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst1">
          <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_assoc">
           <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="scalar_c_one_gen">
            <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(- (- k))" arg2="k">
             <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ang_exp_mult">
              <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.19"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="4"><result status="valid" time="0.44" steps="310"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.44" steps="310"/></proof>
          </goal>
          <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.52" steps="310"/></proof>
          </goal>
          <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.48" steps="310"/></proof>
          </goal>
          <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.0.4" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.48" steps="310"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_rz_basis_inv_c.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.20"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_rz_basis_inv_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.37" steps="302"/></proof>
    </goal>
    <goal name="VC path_sem_rz_basis_inv_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.56" steps="302"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_rz_inv_c" expl="VC for path_sem_rz_inv_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_rz_inv_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.41" steps="300"/></proof>
  </goal>
  <goal name="VC path_sem_rz_inv_c.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.46" steps="302"/></proof>
  </goal>
  <goal name="VC path_sem_rz_inv_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.48" steps="304"/></proof>
  </goal>
  <goal name="VC path_sem_rz_inv_c.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H">
   <goal name="VC path_sem_rz_inv_c.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
    <goal name="VC path_sem_rz_inv_c.3.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
     <goal name="VC path_sem_rz_inv_c.3.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_rz_inv_c.3.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.38" steps="302"/></proof>
       </goal>
       <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.41" steps="302"/></proof>
       </goal>
       <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
          <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="2.04" steps="306"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.83"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_rz_inv_c.3.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.03"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_rz_inv_c.3.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.02" steps="304"/></proof>
     </goal>
     <goal name="VC path_sem_rz_inv_c.3.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.01" steps="304"/></proof>
     </goal>
     <goal name="VC path_sem_rz_inv_c.3.0.0.3" expl="rewrite premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_rz_inv_c.3.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_rz_inv_c.3.0.0.3.0.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
        <goal name="VC path_sem_rz_inv_c.3.0.0.3.0.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="VC path_sem_rz_inv_c.3.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.08"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_rz_inv_c.3.0.0.3.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.92"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_rz_inv_c.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="2.11" steps="304"/></proof>
    </goal>
    <goal name="VC path_sem_rz_inv_c.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="2.10" steps="304"/></proof>
    </goal>
    <goal name="VC path_sem_rz_inv_c.3.0.3" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC path_sem_rz_inv_c.3.0.3.0" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_rz_inv_c.3.0.3.0.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC path_sem_rz_inv_c.3.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.89"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_hadamard_zero_c" expl="VC for path_sem_hadamard_zero_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_hadamard_zero_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.94" steps="364"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_hadamard_one_c" expl="VC for path_sem_hadamard_one_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_hadamard_one_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.01" steps="366"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_hadamard_plus_c" expl="VC for path_sem_hadamard_plus_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_hadamard_plus_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.00" steps="368"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_hadamard_minus_c" expl="VC for path_sem_hadamard_minus_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_hadamard_minus_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.04" steps="370"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_cnot_basis_c" expl="VC for path_sem_cnot_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_cnot_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_basis_c">
   <goal name="VC path_sem_cnot_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC path_sem_cnot_basis_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis_c_spec">
     <goal name="VC path_sem_cnot_basis_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(circ_to_pps_c cnot_c)" arg2="pps_cnot">
      <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_cnot_apply_basis">
       <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_int (ket_to_bv x))" arg2="(ket_to_int x)">
        <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0" expl="VC for path_sem_cnot_basis_c" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.51" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.69" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.57" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.3" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.55" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.4" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.5" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.52" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.6" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.7" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.52" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.8" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.9" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.10" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.11" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.12" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.13" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.14" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.0.0.15" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.56" steps="378"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="3.10" steps="374"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_cnot_basis_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.20"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_cnot_basis_c.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_cnot_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.51" steps="372"/></proof>
     </goal>
     <goal name="VC path_sem_cnot_basis_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.52" steps="372"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_cnot_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.46" steps="372"/></proof>
   </goal>
   <goal name="VC path_sem_cnot_basis_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.58" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_swap_basis_c" expl="VC for path_sem_swap_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_swap_basis_c.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem_basis_c">
   <goal name="VC path_sem_swap_basis_c.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC path_sem_swap_basis_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis_c_spec">
     <goal name="VC path_sem_swap_basis_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(circ_to_pps_c swap_c)" arg2="pps_swap">
      <goal name="VC path_sem_swap_basis_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_swap_apply_basis">
       <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_int (ket_to_bv x))" arg2="(ket_to_int x)">
        <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0" expl="VC for path_sem_swap_basis_c" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.62" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.61" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.59" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.3" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.49" steps="374"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.4" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.47" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.5" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.48" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.6" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.7" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.62" steps="376"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.8" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.56" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.9" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.60" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.10" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.63" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.11" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.12" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.13" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.14" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
          </goal>
          <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.0.0.15" expl="postcondition" proved="true">
          <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="0"><result status="valid" time="1.32"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_swap_basis_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.36"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_swap_basis_c.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_swap_basis_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.49" steps="372"/></proof>
     </goal>
     <goal name="VC path_sem_swap_basis_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_swap_basis_c.0.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.49" steps="372"/></proof>
   </goal>
   <goal name="VC path_sem_swap_basis_c.0.2" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC hadamard_invol_c" expl="VC for hadamard_invol_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC hadamard_invol_c.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(path_sem_c hadamard_c x)" arg2="(pps_apply pps_hadamard x)">
   <goal name="VC hadamard_invol_c.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(path_sem_c hadamard_c (pps_apply pps_hadamard x))" arg2="(pps_apply pps_hadamard (pps_apply pps_hadamard x))">
    <goal name="VC hadamard_invol_c.0.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,1">
     <goal name="VC hadamard_invol_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC hadamard_invol_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_apply_sum">
       <goal name="VC hadamard_invol_c.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_apply_sum">
        <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq">
         <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.48" steps="370"/></proof>
         </goal>
         <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.43" steps="370"/></proof>
         </goal>
         <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="pps_apply_scal">
            <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="pps_apply_scal">
             <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="scalar_eq">
              <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.32"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="3"><result status="valid" time="1.39"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC hadamard_invol_c.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="3.19" steps="375"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC hadamard_invol_c.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="3.11" steps="373"/></proof>
        </goal>
        <goal name="VC hadamard_invol_c.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC hadamard_invol_c.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC hadamard_invol_c.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC hadamard_invol_c.0.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps_apply_spec">
            <goal name="VC hadamard_invol_c.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="3.13" steps="375"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC hadamard_invol_c.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.49" steps="370"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC hadamard_invol_c.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="3.00" steps="373"/></proof>
       </goal>
       <goal name="VC hadamard_invol_c.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC hadamard_invol_c.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC hadamard_invol_c.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="3.19" steps="375"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC hadamard_invol_c.0.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.51" steps="370"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC hadamard_invol_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.49" steps="370"/></proof>
      </goal>
      <goal name="VC hadamard_invol_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="3.23" steps="372"/></proof>
      </goal>
      <goal name="VC hadamard_invol_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="2.85" steps="372"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC hadamard_invol_c.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="3"><result status="valid" time="1.41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC hadamard_invol_c.0.1" expl="equality hypothesis" proved="true">
   <proof prover="4"><result status="valid" time="3.53" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_g_c" expl="VC for ancilla_g_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_g_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="370"/></proof>
  </goal>
  <goal name="VC ancilla_g_c.1" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="path_sem_target">
   <goal name="VC ancilla_g_c.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ancilla_g_c.1.0.0" proved="true">
    <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps_c c) (kronecker x (ket 1 0)))" arg2="(path_sem_c c (kronecker x (ket 1 0)))">
     <goal name="VC ancilla_g_c.1.0.0.0" proved="true">
     <proof prover="4"><result status="valid" time="3.34" steps="374"/></proof>
     </goal>
     <goal name="VC ancilla_g_c.1.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="apply_path_sem_c">
      <goal name="VC ancilla_g_c.1.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
      </goal>
      <goal name="VC ancilla_g_c.1.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="2.93" steps="374"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g_c.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_g_c.2.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ancilla_g_c.2.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ancillas_c_def6" arg2="(ancilla_c c),(pre c)">
     <goal name="VC ancilla_g_c.2.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="result" arg2="(ancilla_c c)">
      <goal name="VC ancilla_g_c.2.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="1.68"/></proof>
      </goal>
      <goal name="VC ancilla_g_c.2.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.70" steps="348"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g_c.3" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC ancilla_g_c.3.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC ancilla_g_c.3.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="size_c_def6" arg2="(ancilla_c c),(pre c)">
     <goal name="VC ancilla_g_c.3.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(to_qc (Ancilla (pre c)))" arg2="(ancilla_c c)">
      <goal name="VC ancilla_g_c.3.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="1.51"/></proof>
      </goal>
      <goal name="VC ancilla_g_c.3.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="4"><result status="valid" time="0.50" steps="380"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g_c.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.53"/></proof>
  </goal>
  <goal name="VC ancilla_g_c.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.99"/></proof>
  </goal>
  <goal name="VC ancilla_g_c.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_g_c.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC ancilla_g_c.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ancilla_basis_ket_c">
     <goal name="VC ancilla_g_c.6.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC ancilla_g_c.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.69" steps="354"/></proof>
     </goal>
     <goal name="VC ancilla_g_c.6.0.0.2" expl="rewrite premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla_g_c.6.0.0.2.0" proved="true">
      <proof prover="0"><result status="valid" time="5.12"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g_c.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_g_c.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC ancilla_g_c.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ancilla_angle_c">
     <goal name="VC ancilla_g_c.7.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC ancilla_g_c.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.66" steps="354"/></proof>
     </goal>
     <goal name="VC ancilla_g_c.7.0.0.2" expl="rewrite premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla_g_c.7.0.0.2.0" proved="true">
      <proof prover="0"><result status="valid" time="4.83"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g_c.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply_c">
   <goal name="VC ancilla_g_c.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_apply_c">
    <goal name="VC ancilla_g_c.8.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ancilla_g_c.8.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="result_def">
      <goal name="VC ancilla_g_c.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla_c">
       <goal name="VC ancilla_g_c.8.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps_c c) (kronecker x (ket 1 0)))" arg2="(path_sem_c c (kronecker x (ket 1 0)))
">
        <goal name="VC ancilla_g_c.8.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H10">
         <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="pps_apply_anc">
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="4.01"/></proof>
           </goal>
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="4.41"/></proof>
           </goal>
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps_c c) (kronecker x (ket 1 0)))" arg2="( path_sem_c c (kronecker x (ket 1 0)))
">
             <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="H11">
              <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="4.07"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="apply_path_sem_c">
              <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
              <proof prover="4"><result status="valid" time="0.73" steps="358"/></proof>
              </goal>
              <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c -1 +1)">
               <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.70" steps="358"/></proof>
                </goal>
                <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.1.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.73" steps="358"/></proof>
                </goal>
                <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.1.0.2" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="3.98"/></proof>
                </goal>
                <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.1.0.3" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="4.09"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.2.0.1.1.1" expl="equality hypothesis" proved="true">
               <proof prover="4"><result status="valid" time="0.72" steps="358"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="3.94"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.68" steps="356"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ancilla_g_c.8.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.67" steps="356"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_g_c.8.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="apply_path_sem_c">
         <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="0.71" steps="356"/></proof>
         </goal>
         <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c -1 +1)">
          <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.72" steps="356"/></proof>
           </goal>
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.70" steps="356"/></proof>
           </goal>
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.69" steps="356"/></proof>
           </goal>
           <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.1.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="4.57"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ancilla_g_c.8.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="0.68" steps="356"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ancilla_g_c.8.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.71" steps="356"/></proof>
       </goal>
       <goal name="VC ancilla_g_c.8.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="VC ancilla_g_c.8.0.0.0.0.2.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ancilla_g_c.8.0.0.0.0.2.0.0" proved="true">
         <transf name="apply" proved="true" arg1="H11">
          <goal name="VC ancilla_g_c.8.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.72" steps="358"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla_g_c.8.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c -1 +1)">
     <goal name="VC ancilla_g_c.8.0.1.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC ancilla_g_c.8.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.50" steps="386"/></proof>
      </goal>
      <goal name="VC ancilla_g_c.8.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.48" steps="386"/></proof>
      </goal>
      <goal name="VC ancilla_g_c.8.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.51" steps="386"/></proof>
      </goal>
      <goal name="VC ancilla_g_c.8.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.53" steps="386"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ancilla_g_c.8.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="0.53" steps="386"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ancilla_g_c.8.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.51" steps="386"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g_c.9" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="kronecker_injec_eq_left" arg2="(path_sem_c result x),(path_sem_target @ x),(ket 1 0)
">
   <goal name="VC ancilla_g_c.9.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC ancilla_g_c.9.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC ancilla_g_c.9.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H11">
      <goal name="VC ancilla_g_c.9.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.51" steps="386"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ancilla_g_c.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.53" steps="386"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla_g_c.9.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(get (ket 1 0) 0 0 = c_one)">
     <goal name="VC ancilla_g_c.9.0.1.0" expl="asserted formula" proved="true">
     <proof prover="4"><result status="valid" time="0.53" steps="386"/></proof>
     </goal>
     <goal name="VC ancilla_g_c.9.0.1.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(valid_index (ket 1 0) 0 0 )">
      <goal name="VC ancilla_g_c.9.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="set_valid_index">
       <goal name="VC ancilla_g_c.9.0.1.1.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.51" steps="386"/></proof>
       </goal>
       <goal name="VC ancilla_g_c.9.0.1.1.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.49" steps="386"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC ancilla_g_c.9.0.1.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.25"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_seq_c" expl="VC for mat_sem_seq_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_seq_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_sem_seq_c.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="mat_sem_c_def2" arg2="(sequence_c d e),(pre d),(pre e)">
    <goal name="VC mat_sem_seq_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC mat_sem_seq_c.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="1.81"/></proof>
     </goal>
     <goal name="VC mat_sem_seq_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="3.08" steps="372"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_par_c" expl="VC for mat_sem_par_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_par_c.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC mat_sem_par_c.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="mat_sem_c_def1" arg2="(parallel_c d e),(pre d),(pre e)">
    <goal name="VC mat_sem_par_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC mat_sem_par_c.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.17"/></proof>
     </goal>
     <goal name="VC mat_sem_par_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="3.09" steps="370"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_anc_c" expl="VC for mat_sem_anc_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_anc_c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC mat_sem_anc_c.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="set_mat_sem_c_path_sem_c">
    <goal name="VC mat_sem_anc_c.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC mat_sem_anc_c.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla_width_c">
      <goal name="VC mat_sem_anc_c.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.51" steps="374"/></proof>
      </goal>
      <goal name="VC mat_sem_anc_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.52" steps="374"/></proof>
      </goal>
      <goal name="VC mat_sem_anc_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="exists" proved="true" arg1="(fun x -&gt; mat_mult mat_sem_target x)">
       <goal name="VC mat_sem_anc_c.0.0.0.0.2.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
         <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.0" proved="true">
         <proof prover="0"><result status="valid" time="1.28"/></proof>
         </goal>
         <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
          <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.50" steps="376"/></proof>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.1.0.3" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.50" steps="376"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_anc_c.0.0.0.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="0.47" steps="376"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sem_anc_c.0.0.1" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC mat_sem_anc_c.0.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla_width_c">
      <goal name="VC mat_sem_anc_c.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.46" steps="374"/></proof>
      </goal>
      <goal name="VC mat_sem_anc_c.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.47" steps="374"/></proof>
      </goal>
      <goal name="VC mat_sem_anc_c.0.0.1.0.2" expl="rewrite premises" proved="true">
      <transf name="exists" proved="true" arg1="(fun x -&gt; mat_mult mat_sem_target x)">
       <goal name="VC mat_sem_anc_c.0.0.1.0.2.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
         <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.0" proved="true">
         <proof prover="0"><result status="valid" time="1.51"/></proof>
         </goal>
         <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
          <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.47" steps="376"/></proof>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.1.0.3" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_anc_c.0.0.1.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="0.46" steps="376"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC mat_sem_anc_c.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC mat_sem_anc_c.0.0.2.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(ancilla_c c)" arg2="(ancilla_g_c c (fun x -&gt; mat_mult mat_sem_target x))">
      <goal name="VC mat_sem_anc_c.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="kronecker_injec_eq_left" arg2="(mat_mult mat_sem_target ket),(path_sem_c
    (ancilla_g_c c (fun (x:matrix complex) -&gt; mat_mult mat_sem_target x)) ket),(ket1 1 0)">
       <goal name="VC mat_sem_anc_c.0.0.2.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ancilla_g_c_spec1">
          <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H2">
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.60" steps="378"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="ancilla_width_c" arg2="in" arg3="H1">
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.56" steps="378"/></proof>
             </goal>
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="0.61" steps="378"/></proof>
             </goal>
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
             <transf name="exists" proved="true" arg1="(fun x -&gt; mat_mult mat_sem_target x)">
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0" proved="true">
               <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.0" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.0.0" proved="true">
                 <transf name="apply" proved="true" arg1="H3">
                  <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.1" expl="rewrite premises" proved="true">
                <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="kronecker_ket_l">
                  <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.46" steps="380"/></proof>
                  </goal>
                  <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.1.0.1" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.55" steps="380"/></proof>
                  </goal>
                  <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.1.0.2" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
                  </goal>
                  <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.1.0.3" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.51" steps="380"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.0.1.2.0.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
             </goal>
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
             </goal>
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ancilla_width_c" arg2="in" arg3="H1">
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
              </goal>
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
              </goal>
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
              <transf name="exists" proved="true" arg1="(fun x -&gt; mat_mult mat_sem_target x)">
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0" proved="true">
                <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.0" proved="true">
                 <proof prover="0"><result status="valid" time="1.31"/></proof>
                 </goal>
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
                  <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="kronecker_ket_l">
                   <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.1.0.0" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.50" steps="380"/></proof>
                   </goal>
                   <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.1.0.1" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
                   </goal>
                   <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.1.0.2" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.48" steps="380"/></proof>
                   </goal>
                   <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.1.0.3" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.63" steps="380"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.2.2.0.0.1.1" expl="equality hypothesis" proved="true">
                  <proof prover="4"><result status="valid" time="0.49" steps="380"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
             <proof prover="4"><result status="valid" time="0.47" steps="378"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="4"><result status="valid" time="0.46" steps="378"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="0.59" steps="378"/></proof>
          </goal>
          <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="H3">
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="4"><result status="valid" time="0.47" steps="380"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_ket_l">
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.50" steps="380"/></proof>
               </goal>
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.1.0.1" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.48" steps="380"/></proof>
               </goal>
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.1.0.2" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.47" steps="380"/></proof>
               </goal>
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.1.0.3" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.48" steps="380"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="4"><result status="valid" time="0.64" steps="380"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ancilla_g_c_spec4">
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="ancilla_width_c" arg2="in" arg3="H1">
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="H1">
            </transf>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="0.47" steps="378"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2" expl="rewrite premises" proved="true">
            <transf name="exists" proved="true" arg1="(fun x -&gt; mat_mult mat_sem_target x)">
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.0" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.0.0" proved="true">
                <transf name="apply" proved="true" arg1="H3">
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.48" steps="380"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.1" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.63" steps="380"/></proof>
                 </goal>
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
                 </goal>
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.1.0.2" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
                 </goal>
                 <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.1.0.3" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.0.2.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="H3">
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
                </goal>
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.52" steps="380"/></proof>
                </goal>
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.1.0.2" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.52" steps="380"/></proof>
                </goal>
                <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.1.0.3" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.0.0.3.2.0.0.1.1" expl="equality hypothesis" proved="true">
               <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1" expl="apply premises" proved="true">
        <transf name="assert" proved="true" arg1="(get (ket1 1 0) 0 0 &lt;&gt; c_zero)">
         <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.0" expl="asserted formula" proved="true">
         <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
         </goal>
         <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="assert" proved="true" arg1="(valid_index (ket1 1 0) 0 0)">
          <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.0" expl="asserted formula" proved="true">
          <transf name="apply" proved="true" arg1="set_valid_index">
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.0.0.0" proved="true">
            <proof prover="4"><result status="valid" time="0.50" steps="379"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.0.0.1" proved="true">
            <proof prover="4"><result status="valid" time="0.51" steps="379"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.0.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.0.1.0" proved="true">
            <proof prover="4"><result status="valid" time="0.50" steps="379"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.0.1.1" proved="true">
            <proof prover="4"><result status="valid" time="0.52" steps="379"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_anc_c.0.0.2.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.13"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sem_anc_c.0.0.2.0.1" expl="equality hypothesis" proved="true">
      <transf name="eliminate_definition" proved="true" >
       <goal name="VC mat_sem_anc_c.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="ancilla_g_c_def">
        <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.0" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="0.73" steps="346"/></proof>
        </goal>
        <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.74" steps="346"/></proof>
        </goal>
        <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
          <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="H3">
            <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.75" steps="348"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.1" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
           <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.1.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="kronecker_ket_l">
            <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.1.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.75" steps="348"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.1.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.75" steps="348"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.1.0.2" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.67" steps="348"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.1.0.3" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.32"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC mat_sem_anc_c.0.0.2.0.1.0.2.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="4"><result status="valid" time="0.70" steps="348"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_anc__c" expl="VC for mat_sem_anc__c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_anc__c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="374"/></proof>
  </goal>
  <goal name="VC mat_sem_anc__c.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H4">
  </transf>
  </goal>
  <goal name="VC mat_sem_anc__c.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H4">
  </transf>
  </goal>
  <goal name="VC mat_sem_anc__c.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H4">
  </transf>
  </goal>
  <goal name="VC mat_sem_anc__c.4" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x">
   <goal name="VC mat_sem_anc__c.4.0" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(width_c c -1)">
    <goal name="VC mat_sem_anc__c.4.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC mat_sem_anc__c.4.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
      <goal name="VC mat_sem_anc__c.4.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_mult_ket_sum_l">
       <goal name="VC mat_sem_anc__c.4.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_mult_ket_sum_l">
        <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq">
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="3.36" steps="380"/></proof>
          </goal>
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.50" steps="376"/></proof>
          </goal>
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_mut_scal">
             <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
              <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
               <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(kronecker (mat_mult mat_sem_target (bv_to_ket a)) (ket 1 0))" arg2="(mat_mult (mat_sem_c c) (kronecker (bv_to_ket a) (ket 1 0)))
">
                <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_mut_scal">
                 <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
                 </goal>
                 <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="kronecker_rows">
                  <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(rows (bv_to_ket a))" arg2="(power_ 2 (width_c c - 1))
">
                   <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="replace" proved="true" arg1="(rows (ket 1 0))" arg2="(power_ 2 1)">
                    <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="power__sum_rev">
                     <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="replace" proved="true" arg1="(columns (mat_sem_c c))" arg2="(power_ 2 (width_c c))">
                      <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="power__eq">
                       <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
                       </goal>
                       <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                       <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
                        <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
                        <transf name="apply" proved="true" arg1="power__eq">
                         <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="4"><result status="valid" time="0.54" steps="378"/></proof>
                         </goal>
                         <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                         <proof prover="4"><result status="valid" time="3.09" steps="382"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
                     </goal>
                     <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="4"><result status="valid" time="3.04" steps="382"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                   <transf name="split_all_full" proved="true" >
                    <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_spec2">
                     <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
                     <proof prover="0"><result status="valid" time="1.17"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="4"><result status="valid" time="3.11" steps="382"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_to_ket_spec2">
               <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.0.2.0.0.1.0.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.21"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="mat_mult_ket_l">
            <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="3.10" steps="382"/></proof>
            </goal>
            <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="3.05" steps="382"/></proof>
            </goal>
            <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="3.00" steps="382"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.92" steps="380"/></proof>
         </goal>
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.93" steps="380"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="2.98" steps="380"/></proof>
        </goal>
        <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="3.41" steps="382"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_anc__c.4.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.47" steps="376"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sem_anc__c.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="3.39" steps="380"/></proof>
       </goal>
       <goal name="VC mat_sem_anc__c.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sem_anc__c.4.0.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.55" steps="378"/></proof>
          </goal>
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="3.32" steps="382"/></proof>
          </goal>
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="3.07" steps="382"/></proof>
          </goal>
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.2.0.0.3" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="2.96" steps="382"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sem_anc__c.4.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.0" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.0.0" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.0.0.0" proved="true">
          <proof prover="4"><result status="valid" time="3.06" steps="380"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.1" proved="true">
        <transf name="replace" proved="true" arg1="(ket_length (ket 1 0))" arg2="1">
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.1.0" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.1.0.0" proved="true">
          <transf name="rewrite" proved="true" arg1="mat_sem_c_spec3">
           <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.1.0.0.0" proved="true">
           <proof prover="0"><result status="valid" time="1.08"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sem_anc__c.4.0.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="2.86" steps="380"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sem_anc__c.4.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sem_anc__c.4.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sem_anc__c.4.0.0.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="2.90" steps="382"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sem_anc__c.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="2.99" steps="380"/></proof>
      </goal>
      <goal name="VC mat_sem_anc__c.4.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="3.05" steps="380"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sem_anc__c.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
     </goal>
     <goal name="VC mat_sem_anc__c.4.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="3.21" steps="378"/></proof>
     </goal>
     <goal name="VC mat_sem_anc__c.4.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.78" steps="379"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_anc__c.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.59" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_id_c" expl="VC for mat_sem_id_c">
 <transf name="split_vc" >
  <goal name="VC mat_sem_id_c.0" expl="postcondition">
  <proof prover="3"><result status="timeout" time="5.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_path_sum_basis_c" expl="VC for correct_path_sum_basis_c" proved="true">
 <proof prover="4"><result status="valid" time="3.32" steps="404"/></proof>
 </goal>
 <goal name="VC set_correct_path_sum_c" expl="VC for set_correct_path_sum_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_path_sum_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.98"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_correct_path_sum_c" expl="VC for get_correct_path_sum_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_correct_path_sum_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_correct_path_sum_basis_c" expl="VC for set_correct_path_sum_basis_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_path_sum_basis_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="372"/></proof>
  </goal>
  <goal name="VC set_correct_path_sum_basis_c.1" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_pps_apply">
   <goal name="VC set_correct_path_sum_basis_c.1.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
    <goal name="VC set_correct_path_sum_basis_c.1.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="VC set_correct_path_sum_basis_c.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.94" steps="376"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_basis_c.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.99"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_basis_c.1.0.0.2" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.95" steps="376"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_basis_c.1.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis_rev">
          <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="3.11" steps="378"/></proof>
          </goal>
          <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="3.11" steps="378"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.02"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC set_correct_path_sum_basis_c.1.0.0.3.0.0.1" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.50" steps="376"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_correct_path_sum_basis_c.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="3.05" steps="376"/></proof>
    </goal>
    <goal name="VC set_correct_path_sum_basis_c.1.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_correct_path_sum_basis_c.1.0.2.0" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC set_correct_path_sum_basis_c.1.0.2.0.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
       <goal name="VC set_correct_path_sum_basis_c.1.0.2.0.0.0" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_sem_c_spec3">
        <goal name="VC set_correct_path_sum_basis_c.1.0.2.0.0.0.0" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_correct_path_sum_basis_c.1.0.2.1" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC set_correct_path_sum_basis_c.1.0.2.1.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sem_c_spec3">
       <goal name="VC set_correct_path_sum_basis_c.1.0.2.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="3"><result status="valid" time="1.72"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_correct_path_sum_basis_c.1.1" expl="rewrite premises" proved="true">
   <proof prover="4"><result status="valid" time="0.59" steps="374"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_correct_path_sum_basis_c.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.58" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_correct_pps_c" expl="VC for set_correct_pps_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_pps_c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis_c">
   <goal name="VC set_correct_pps_c.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.51" steps="372"/></proof>
   </goal>
   <goal name="VC set_correct_pps_c.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_correct_pps_c.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC set_correct_pps_c.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.12"/></proof>
     </goal>
     <goal name="VC set_correct_pps_c.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.48" steps="376"/></proof>
     </goal>
     <goal name="VC set_correct_pps_c.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.64" steps="376"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_seq_c" expl="VC for correct_seq_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_seq_c.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_seq_c.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.11"/></proof>
   </goal>
   <goal name="VC correct_seq_c.0.1" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="2.83" steps="382"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq_c.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_seq_c.1.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.53" steps="384"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq_c.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_seq_c.2.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H7">
    <goal name="VC correct_seq_c.2.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="2.96" steps="393"/></proof>
    </goal>
    <goal name="VC correct_seq_c.2.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.23" steps="393"/></proof>
    </goal>
    <goal name="VC correct_seq_c.2.0.2" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.51" steps="388"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq_c.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_seq_c.3.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H7">
    <goal name="VC correct_seq_c.3.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.05" steps="389"/></proof>
    </goal>
    <goal name="VC correct_seq_c.3.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.08" steps="389"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq_c.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC correct_seq_c.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="correct_path_sum_c_spec">
    <goal name="VC correct_seq_c.4.0.0" expl="VC for correct_seq_c" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC correct_seq_c.4.0.0.0" expl="VC for correct_seq_c" proved="true">
     <proof prover="3"><result status="valid" time="1.29"/></proof>
     </goal>
     <goal name="VC correct_seq_c.4.0.0.1" expl="VC for correct_seq_c" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sem_seq_c">
      <goal name="VC correct_seq_c.4.0.0.1.0" expl="VC for correct_seq_c" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_mult_assoc">
       <goal name="VC correct_seq_c.4.0.0.1.0.0" expl="VC for correct_seq_c" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC correct_seq_c.4.0.0.1.0.0.0" expl="VC for correct_seq_c" proved="true">
        <transf name="replace" proved="true" arg1="(pps_apply h x)" arg2="(mat_mult (mat_sem_c c) x)">
         <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0" expl="VC for correct_seq_c" proved="true">
         <transf name="apply" proved="true" arg1="get_correct_path_sum_c">
          <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.31"/></proof>
          </goal>
          <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_is_a_ket_l">
           <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.32"/></proof>
           </goal>
           <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_mult_columns">
            <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="3"><result status="valid" time="1.28"/></proof>
            </goal>
            <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
              <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.1.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="1.67"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.2" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.2.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_mult_rows">
             <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mat_sem_c_spec3">
              <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.2.0.0.0" expl="apply premises" proved="true">
              <proof prover="3"><result status="valid" time="1.68"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.2.0.1" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
              <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.1.2.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="3"><result status="valid" time="1.71"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_seq_c.4.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.63" steps="352"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_seq_c.4.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="3.98"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_seq_c.4.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.70" steps="352"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_seq_c.4.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC correct_seq_c.4.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
         <goal name="VC correct_seq_c.4.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sem_c_spec3">
          <goal name="VC correct_seq_c.4.0.0.1.0.1.0.0.0" expl="rewrite premises" proved="true">
          <proof prover="3"><result status="valid" time="1.46"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_seq_c.4.0.0.1.0.2" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC correct_seq_c.4.0.0.1.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
         <goal name="VC correct_seq_c.4.0.0.1.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="3"><result status="valid" time="1.46"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC correct_seq_c.4.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.65" steps="352"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC seq_pps_c" expl="VC for seq_pps_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC seq_pps_c.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="VC seq_pps_c.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="VC seq_pps_c.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.55"/></proof>
  </goal>
  <goal name="VC seq_pps_c.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="VC seq_pps_c.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="VC seq_pps_c.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H8">
   <goal name="VC seq_pps_c.5.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="1.32"/></proof>
   </goal>
   <goal name="VC seq_pps_c.5.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="1.33"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC seq_pps_c.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H10">
   <goal name="VC seq_pps_c.6.0" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="1.29"/></proof>
   </goal>
   <goal name="VC seq_pps_c.6.1" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="1.28"/></proof>
   </goal>
   <goal name="VC seq_pps_c.6.2" expl="apply premises" proved="true">
   <proof prover="3"><result status="valid" time="0.50"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC seq_pps_c.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.09"/></proof>
  <proof prover="3"><result status="valid" time="0.54"/></proof>
  </goal>
  <goal name="VC seq_pps_c.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.24"/></proof>
  </goal>
  <goal name="VC seq_pps_c.9" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.22"/></proof>
  </goal>
  <goal name="VC seq_pps_c.10" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.29"/></proof>
  </goal>
  <goal name="VC seq_pps_c.11" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_par_c" expl="VC for correct_par_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_par_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.93" steps="380"/></proof>
  </goal>
  <goal name="VC correct_par_c.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="380"/></proof>
  </goal>
  <goal name="VC correct_par_c.2" expl="precondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC correct_par_c.2.0" expl="VC for correct_par_c" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par_c.2.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="H8">
     <goal name="VC correct_par_c.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.88" steps="391"/></proof>
     </goal>
     <goal name="VC correct_par_c.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.90" steps="391"/></proof>
     </goal>
     <goal name="VC correct_par_c.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.47" steps="386"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC correct_par_c.2.0.1" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="H7">
     <goal name="VC correct_par_c.2.0.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.86" steps="391"/></proof>
     </goal>
     <goal name="VC correct_par_c.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="3.03" steps="391"/></proof>
     </goal>
     <goal name="VC correct_par_c.2.0.1.2" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="0.62" steps="386"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_par_c.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H7">
   <goal name="VC correct_par_c.3.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.98" steps="385"/></proof>
   </goal>
   <goal name="VC correct_par_c.3.1" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.93" steps="385"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_par_c.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis_c">
   <goal name="VC correct_par_c.4.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.81" steps="380"/></proof>
   </goal>
   <goal name="VC correct_par_c.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par_c.4.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="x" arg2="(kronecker (hpart_ket x (width_c c)) (tpart_ket x (width_c c)))">
     <goal name="VC correct_par_c.4.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC correct_par_c.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sem_par_c">
       <goal name="VC correct_par_c.4.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_mult_commut_p">
        <goal name="VC correct_par_c.4.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC correct_par_c.4.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="get_correct_path_sum_c">
          <goal name="VC correct_par_c.4.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="2.87" steps="384"/></proof>
          </goal>
          <goal name="VC correct_par_c.4.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.36"/></proof>
          </goal>
          <goal name="VC correct_par_c.4.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.46" steps="382"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_par_c.4.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="get_correct_path_sum_c">
          <goal name="VC correct_par_c.4.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="2.95" steps="384"/></proof>
          </goal>
          <goal name="VC correct_par_c.4.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.30"/></proof>
          </goal>
          <goal name="VC correct_par_c.4.1.0.0.0.0.0.1.2" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par_c.4.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="hpart_ket_rows">
         <goal name="VC correct_par_c.4.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="power_to_">
          <goal name="VC correct_par_c.4.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC correct_par_c.4.1.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
            <goal name="VC correct_par_c.4.1.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="3.24" steps="384"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_par_c.4.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="2.87" steps="384"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_par_c.4.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.53" steps="382"/></proof>
         </goal>
         <goal name="VC correct_par_c.4.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.18"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par_c.4.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="tpart_ket_rows">
         <goal name="VC correct_par_c.4.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="power_to_">
          <goal name="VC correct_par_c.4.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="(ket_length x - width_c c)" arg2="(width_c c&#39;)">
           <goal name="VC correct_par_c.4.1.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC correct_par_c.4.1.0.0.0.0.2.0.0.0.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
             <goal name="VC correct_par_c.4.1.0.0.0.0.2.0.0.0.0.0" expl="rewrite premises" proved="true">
             <proof prover="4"><result status="valid" time="3.53" steps="384"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_par_c.4.1.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.10"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_par_c.4.1.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.22"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_par_c.4.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.46" steps="382"/></proof>
         </goal>
         <goal name="VC correct_par_c.4.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.09"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par_c.4.1.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par_c.4.1.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width_c c)">
           <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(width_c c)">
            <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0.0.0" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_c_spec3">
               <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0.0.0.0.0" proved="true">
               <proof prover="3"><result status="valid" time="1.53"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0.0.1" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0.0.1.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
               <goal name="VC correct_par_c.4.1.0.0.0.0.3.0.0.0.0.1.0.0" proved="true">
               <proof prover="3"><result status="valid" time="1.44"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par_c.4.1.0.0.0.0.4" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par_c.4.1.0.0.0.0.4.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width_c c&#39;)">
           <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(width_c c&#39;)">
            <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0.0.0" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_c_spec3">
               <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0.0.0.0.0" proved="true">
               <proof prover="3"><result status="valid" time="1.70"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0.0.1" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0.0.1.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_c_spec2">
               <goal name="VC correct_par_c.4.1.0.0.0.0.4.0.0.0.0.1.0.0" proved="true">
               <proof prover="3"><result status="valid" time="1.46"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par_c.4.1.0.0.0.0.5" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par_c.4.1.0.0.0.0.5.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width_c c)">
           <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="0">
            <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.0" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="hpart_ket_rows">
               <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.0.0.0" proved="true">
               <proof prover="4"><result status="valid" time="0.71" steps="350"/></proof>
               </goal>
               <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="4"><result status="valid" time="0.61" steps="350"/></proof>
               </goal>
               <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <proof prover="3"><result status="valid" time="1.71"/></proof>
                </goal>
                <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                <proof prover="3"><result status="valid" time="1.43"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0" proved="true">
              <transf name="replace" proved="true" arg1="(power 2 0)" arg2="1">
               <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.0" proved="true">
               <transf name="assert" proved="true" arg1="(forall x. is_a_ket x -&gt; columns x = 1)">
                <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="3"><result status="valid" time="1.47"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1" proved="true">
                <transf name="apply" proved="true" arg1="h">
                 <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="ket_l_to_ket_gen">
                  <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(width_c c)">
                   <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1.0.0.0" proved="true">
                   <proof prover="3"><result status="valid" time="1.60"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_par_c.4.1.0.0.0.0.5.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
               <proof prover="3"><result status="valid" time="1.46"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par_c.4.1.0.0.0.0.6" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par_c.4.1.0.0.0.0.6.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width_c c&#39;)">
           <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="0">
            <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="tpart_ket_rows">
              <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.0.0" proved="true">
              <proof prover="0"><result status="valid" time="5.42"/></proof>
              </goal>
              <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="4"><result status="valid" time="0.81" steps="350"/></proof>
              </goal>
              <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="5.78"/></proof>
               </goal>
               <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
               <proof prover="3"><result status="valid" time="1.69"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1" proved="true">
             <transf name="replace" proved="true" arg1="(power 2 0)" arg2="1">
              <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.0" proved="true">
              <transf name="assert" proved="true" arg1="(forall x. is_a_ket x -&gt; columns x = 1)">
               <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <proof prover="3"><result status="valid" time="1.42"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.0.1" proved="true">
               <transf name="apply" proved="true" arg1="h">
                <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="ket_l_to_ket_gen">
                 <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="exists" proved="true" arg1="(width_c c&#39;)">
                  <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.0.1.0.0.0" proved="true">
                  <proof prover="3"><result status="valid" time="1.68"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC correct_par_c.4.1.0.0.0.0.6.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="3"><result status="valid" time="1.48"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC correct_par_c.4.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.66"/></proof>
      </goal>
      <goal name="VC correct_par_c.4.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="3"><result status="valid" time="1.35"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC correct_par_c.4.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="3"><result status="valid" time="1.35"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_ancilla_c" expl="VC for correct_ancilla_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_ancilla_c.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla_c.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.51" steps="386"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla_c.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla_c.1.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.52" steps="387"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla_c.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla_c.2.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.50" steps="388"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla_c.3" expl="precondition" proved="true">
  <transf name="destruct" proved="true" arg1="H15">
   <goal name="VC correct_ancilla_c.3.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_mult (pps_to_mat h&#39;) x)" arg2="(path_sem_target @ x)">
    <goal name="VC correct_ancilla_c.3.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="( mat_mult (mat_sem_c c) (kronecker x (ket 1 0)))" arg2="(path_sem_c c (kronecker x (ket 1 0)))">
     <goal name="VC correct_ancilla_c.3.0.0.0" expl="precondition" proved="true">
     <proof prover="4"><result status="valid" time="3.12" steps="394"/></proof>
     </goal>
     <goal name="VC correct_ancilla_c.3.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC correct_ancilla_c.3.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_c_spec">
       <goal name="VC correct_ancilla_c.3.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="sem_correction_gen_rev">
         <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
          <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.52" steps="392"/></proof>
           </goal>
           <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.60" steps="392"/></proof>
           </goal>
           <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.47" steps="392"/></proof>
           </goal>
           <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="4"><result status="valid" time="0.51" steps="392"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_ancilla_c.3.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="0.60" steps="392"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_ancilla_c.3.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
        <goal name="VC correct_ancilla_c.3.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="VC correct_ancilla_c.3.0.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.63" steps="392"/></proof>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.0.1.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.56" steps="392"/></proof>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.0.1.0.1.0.2" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.62" steps="392"/></proof>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.0.1.0.1.0.3" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.54" steps="392"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_ancilla_c.3.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="4"><result status="valid" time="0.61" steps="392"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC correct_ancilla_c.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC correct_ancilla_c.3.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="instantiate" proved="true" arg1="pps_anc_pred" arg2="h,h&#39;">
      <goal name="VC correct_ancilla_c.3.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
       <goal name="VC correct_ancilla_c.3.0.1.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="(fun x -&gt; path_sem_target (bv_to_ket x))">
        <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.33"/></proof>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.29"/></proof>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="(pps_apply_basis h (concat y (make_bv (fun (_:int) -&gt; 0) 1)))" arg2="(path_sem_c c (kronecker (bv_to_ket y) (ket 1 0)))
">
           <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H16">
            <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="4.37" steps="397"/></proof>
            </goal>
            <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.19"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(path_sem_c c (kronecker (bv_to_ket y) (ket 1 0)))" arg2="(mat_mult (mat_sem_c c) (kronecker (bv_to_ket y) (ket 1 0)))
">
             <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis_rev">
              <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0" expl="equality hypothesis" proved="true">
              <transf name="replace" proved="true" arg1="(bv_to_ket (concat y (make_bv (fun (_:int) -&gt; 0) 1)))" arg2="(kronecker (bv_to_ket y) (ket 1 0))
">
               <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="get_correct_path_sum_c">
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="4.91" steps="397"/></proof>
                </goal>
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
                 <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="kronecker_ket_l">
                  <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.74" steps="394"/></proof>
                  </goal>
                  <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.69" steps="394"/></proof>
                  </goal>
                  <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.24"/></proof>
                  </goal>
                  <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="0.52" steps="394"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="4"><result status="valid" time="0.58" steps="394"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.60" steps="394"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_eq">
                 <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="4"><result status="valid" time="0.59" steps="394"/></proof>
                 </goal>
                 <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_equal_ket_l">
                  <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="1">
                   <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bvs">
                     <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.61" steps="394"/></proof>
                     </goal>
                     <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="in_n_bvs">
                      <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="0.57" steps="394"/></proof>
                      </goal>
                      <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="make_bv_length">
                       <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.34"/></proof>
                       </goal>
                       <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.1.1" expl="apply premises" proved="true">
                       <proof prover="4"><result status="valid" time="0.51" steps="394"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.1" proved="true">
                    <proof prover="4"><result status="valid" time="0.59" steps="394"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                   <transf name="eliminate_definition" proved="true" >
                    <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
                     <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                       <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="ind_isum_one">
                        <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                          <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                          </transf>
                          </goal>
                          <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="3"><result status="valid" time="2.82"/></proof>
                          </goal>
                          <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="4"><result status="valid" time="0.70" steps="366"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="make_bv_length">
                         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                         <proof prover="4"><result status="valid" time="0.77" steps="366"/></proof>
                         </goal>
                         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                         <proof prover="3"><result status="valid" time="2.73"/></proof>
                         </goal>
                         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                         <proof prover="4"><result status="valid" time="0.73" steps="366"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="3"><result status="valid" time="2.96"/></proof>
                      </goal>
                      <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="4"><result status="valid" time="0.73" steps="366"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.1" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="concat_length">
               <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="4"><result status="valid" time="0.62" steps="394"/></proof>
                </goal>
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.53"/></proof>
                </goal>
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
                <proof prover="4"><result status="valid" time="0.67" steps="394"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="path_sem_to_mat_c">
              <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.0" expl="equality hypothesis" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
              <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
               <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.71" steps="394"/></proof>
                </goal>
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.67" steps="394"/></proof>
                </goal>
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.17"/></proof>
                </goal>
                <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.1.0.3" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.53" steps="394"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.2.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
               <proof prover="4"><result status="valid" time="0.55" steps="394"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="3.19" steps="394"/></proof>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.51" steps="392"/></proof>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.5" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.5.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H16">
           <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.5.0.0" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width h)" arg2="(width_c c)">
            <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.5.0.0.0" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.5.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="4"><result status="valid" time="3.09" steps="399"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.5.0.1" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="3.11" steps="402"/></proof>
           </goal>
           <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.5.0.2" expl="rewrite premises" proved="true">
           <proof prover="4"><result status="valid" time="3.14" steps="402"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.6" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(h_width h)" arg2="(width_c c)">
          <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.6.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H11">
           <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.6.0.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.6.1" expl="equality hypothesis" proved="true">
          <proof prover="4"><result status="valid" time="3.13" steps="395"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_ancilla_c.3.0.1.0.0.0.0.7" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.05"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_ancilla_c.3.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.66" steps="392"/></proof>
       </goal>
       <goal name="VC correct_ancilla_c.3.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.53" steps="392"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC correct_ancilla_c.3.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.51" steps="392"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla_c.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla_c.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ancilla_c c)" arg2="(ancilla_g_c c path_sem_target)
">
    <goal name="VC correct_ancilla_c.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_correct_path_sum_basis_c">
     <goal name="VC correct_ancilla_c.4.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla_g_c_def">
      <goal name="VC correct_ancilla_c.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ancilla_width_c">
       <goal name="VC correct_ancilla_c.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.65" steps="388"/></proof>
       </goal>
       <goal name="VC correct_ancilla_c.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.67" steps="388"/></proof>
       </goal>
       <goal name="VC correct_ancilla_c.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="VC correct_ancilla_c.4.0.0.0.0.2.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC correct_ancilla_c.4.0.0.0.0.2.0.0" proved="true">
         <transf name="apply" proved="true" arg1="H12">
          <goal name="VC correct_ancilla_c.4.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.68" steps="390"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC correct_ancilla_c.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.51" steps="388"/></proof>
      </goal>
      <goal name="VC correct_ancilla_c.4.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC correct_ancilla_c.4.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="H12">
        <goal name="VC correct_ancilla_c.4.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="4"><result status="valid" time="0.58" steps="390"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC correct_ancilla_c.4.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC correct_ancilla_c.4.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ancilla_g_c_def">
       <goal name="VC correct_ancilla_c.4.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC correct_ancilla_c.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC correct_ancilla_c.4.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_to_mat_spec">
          <goal name="VC correct_ancilla_c.4.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.69" steps="392"/></proof>
          </goal>
          <goal name="VC correct_ancilla_c.4.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.41"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_ancilla_c.4.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ancilla_g_c_def" arg2="in" arg3="H1">
        <goal name="VC correct_ancilla_c.4.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.65" steps="392"/></proof>
        </goal>
        <goal name="VC correct_ancilla_c.4.0.0.1.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="0.67" steps="392"/></proof>
        </goal>
        <goal name="VC correct_ancilla_c.4.0.0.1.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="4"><result status="valid" time="4.25" steps="396"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_ancilla_c.4.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="4.17" steps="396"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC correct_ancilla_c.4.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.64"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_correct_main_path_sum_c" expl="VC for set_correct_main_path_sum_c">
 <transf name="split_vc" >
  <goal name="VC set_correct_main_path_sum_c.0" expl="postcondition">
  <transf name="apply" arg1="set_correct_path_sum_basis_c">
   <goal name="VC set_correct_main_path_sum_c.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.70" steps="374"/></proof>
   </goal>
   <goal name="VC set_correct_main_path_sum_c.0.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC set_correct_main_path_sum_c.0.1.0" expl="apply premises">
    <transf name="replace" arg1="(mat_mult (mat_sem_c c) x)" arg2="(pps_apply (circ_to_pps_c c) x)
">
     <goal name="VC set_correct_main_path_sum_c.0.1.0.0" expl="apply premises">
     <transf name="rewrite" arg1="rewrite_pps_apply_basis">
      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0" expl="apply premises">
      <transf name="split_all_full" >
       <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="pps_apply_basis_def">
        <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0" expl="apply premises">
        <transf name="rewrite" arg1="rewrite_pps_apply_basis">
         <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0" expl="apply premises">
         <transf name="rewrite" arg1="pps_apply_basis_def">
          <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0" expl="apply premises">
          <transf name="apply" arg1="scalar_eq_gen">
           <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="apply" arg1="ket_sum_eq_gen">
            <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="5.57" steps="380"/></proof>
            </goal>
            <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.72"/></proof>
            </goal>
            <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="6.27" steps="380"/></proof>
            </goal>
            <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3" expl="apply premises">
            <transf name="compute_specified" >
             <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0" expl="apply premises">
             <transf name="split_vc" >
              <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises">
              <transf name="apply" arg1="scalar_eq_gen">
               <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises">
               <transf name="apply" arg1="bv_to_ket_eq">
                <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises">
                <transf name="rewrite" arg1="make_bv_length">
                 <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="4"><result status="valid" time="6.22" steps="382"/></proof>
                  </goal>
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="6.87" steps="389"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="6.68" steps="389"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="0.93" steps="384"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="6.13" steps="389"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="6.70" steps="389"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="1.22" steps="384"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="4"><result status="valid" time="6.90" steps="382"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises">
                 <transf name="split_vc" >
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises">
                  <transf name="apply" arg1="pps&#39;invariant3">
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="apply premises">
                   <proof prover="4"><result status="timeout" time="7.00"/></proof>
                   <transf name="split_vc" >
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="apply premises">
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.1" expl="apply premises">
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="6.54" steps="389"/></proof>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="1.08" steps="384"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1" expl="rewrite premises">
                  <transf name="apply" arg1="pps&#39;invariant2">
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.0" expl="apply premises">
                   <proof prover="4"><result status="timeout" time="7.00"/></proof>
                   <transf name="split_vc" >
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.0.0" expl="apply premises">
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.0.1" expl="apply premises">
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.1" expl="apply premises">
                   <proof prover="4"><result status="timeout" time="7.00"/></proof>
                   <transf name="split_vc" >
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.1.0" expl="apply premises">
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.1.1" expl="apply premises">
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                   <proof prover="4"><result status="valid" time="1.08" steps="384"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="4"><result status="valid" time="6.91" steps="382"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="H5">
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="6.93" steps="386"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.98" steps="384"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                       <proof prover="4"><result status="valid" time="6.78" steps="393"/></proof>
                       </goal>
                       <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                       <proof prover="4"><result status="valid" time="5.72" steps="393"/></proof>
                       </goal>
                       <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                       <proof prover="4"><result status="valid" time="0.79" steps="388"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="5.80" steps="394"/></proof>
                        </goal>
                        <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="6.61" steps="394"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.1.0" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="6.68" steps="394"/></proof>
                        </goal>
                        <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.1.1" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="5.83" steps="394"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.2" expl="apply premises" proved="true">
                       <proof prover="4"><result status="valid" time="0.53" steps="388"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.2" expl="rewrite premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.41" steps="386"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.16"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
                    <proof prover="4"><result status="valid" time="3.42" steps="386"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.57" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.1" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.40" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.2" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.59" steps="388"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.60" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.1" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.25" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.2" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.51" steps="388"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.14"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="3.28" steps="393"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.1" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="3.38" steps="393"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.2" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="0.51" steps="388"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="3.50" steps="393"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.1" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="3.45" steps="393"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.2" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="0.55" steps="388"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
                    <proof prover="4"><result status="valid" time="3.25" steps="386"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="4.28" steps="393"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="3.95" steps="393"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.2" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="0.52" steps="388"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="3.30" steps="393"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.1" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="3.37" steps="393"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.2" expl="apply premises" proved="true">
                    <proof prover="4"><result status="valid" time="0.54" steps="388"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="4"><result status="valid" time="0.53" steps="384"/></proof>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.71" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.1" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.78" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.2" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.58" steps="388"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.11" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.1" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="3.56" steps="393"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.2" expl="apply premises" proved="true">
                     <proof prover="4"><result status="valid" time="0.50" steps="388"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
                   <proof prover="4"><result status="valid" time="3.12" steps="386"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.43"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.28"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.13"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.20"/></proof>
         </goal>
         <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="0.66" steps="378"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC set_correct_main_path_sum_c.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.19"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
      </goal>
      <goal name="VC set_correct_main_path_sum_c.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.61" steps="378"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_correct_main_path_sum_c.0.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="3.55" steps="380"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_to_mat_sem_c" expl="VC for path_to_mat_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_to_mat_sem_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.56" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_to_mat_sem_rev_c" expl="VC for path_to_mat_sem_rev_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_to_mat_sem_rev_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.35" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_to_path_sem_c" expl="VC for mat_to_path_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_to_path_sem_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.38" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_to_mat_sem_exp_c" expl="VC for path_to_mat_sem_exp_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_to_mat_sem_exp_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.48" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_to_path_sem_exp_c" expl="VC for mat_to_path_sem_exp_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_to_path_sem_exp_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.49" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_path_sem_by_correct_pps_c" expl="VC for set_path_sem_by_correct_pps_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_path_sem_by_correct_pps_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_path_sem_by_correct_pps_gen_c" expl="VC for set_path_sem_by_correct_pps_gen_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_path_sem_by_correct_pps_gen_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.19" steps="378"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_correct_path_sum_sim_c" expl="VC for set_correct_path_sum_sim_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_path_sum_sim_c.0" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_correct_path_sum_sim_c.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_correct_path_sum_c">
    <goal name="VC set_correct_path_sum_sim_c.0.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="1.57"/></proof>
    </goal>
    <goal name="VC set_correct_path_sum_sim_c.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_correct_path_sum_sim_c.0.0.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(mat_mult (mat_sem_c c) x)" arg2="(pps_apply h x )
">
      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_pps_apply">
       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_pps_apply">
        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="3"><result status="valid" time="1.25"/></proof>
         </goal>
         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.69" steps="346"/></proof>
         </goal>
         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.70" steps="346"/></proof>
         </goal>
         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
             <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
              <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_eq_gen">
               <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="3"><result status="valid" time="1.29"/></proof>
                </goal>
                <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.63" steps="348"/></proof>
                </goal>
                <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="4"><result status="valid" time="0.65" steps="348"/></proof>
                </goal>
                <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="scalar_eq_gen">
                   <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                    <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length">
                     <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="4"><result status="valid" time="0.82" steps="350"/></proof>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.73"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.70"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                         <proof prover="4"><result status="valid" time="0.88" steps="354"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.56"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.63"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                         <proof prover="4"><result status="valid" time="0.82" steps="354"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="0"><result status="valid" time="4.19"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="1.63"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="1.54"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="0.74" steps="354"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="1.75"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="3"><result status="valid" time="1.73"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="0.73" steps="354"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="0"><result status="valid" time="5.22"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="H6">
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="4"><result status="valid" time="0.71" steps="354"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="0"><result status="valid" time="5.32"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.74"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.0" expl="rewrite premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.35"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1" expl="rewrite premises" proved="true">
                         <transf name="split_all_full" proved="true" >
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                            <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
                            <proof prover="3"><result status="valid" time="1.50"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.1" expl="apply premises" proved="true">
                            <proof prover="3"><result status="valid" time="1.53"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.2" expl="apply premises" proved="true">
                            <proof prover="4"><result status="valid" time="0.87" steps="358"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                            <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
                            <proof prover="3"><result status="valid" time="1.53"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.1" expl="apply premises" proved="true">
                            <proof prover="3"><result status="valid" time="1.53"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.2" expl="apply premises" proved="true">
                            <proof prover="4"><result status="valid" time="0.72" steps="358"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.2" expl="rewrite premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.52"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.59"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.77"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
                          <proof prover="4"><result status="valid" time="0.71" steps="358"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.54"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.83"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.2" expl="apply premises" proved="true">
                          <proof prover="4"><result status="valid" time="0.71" steps="358"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                        <proof prover="4"><result status="valid" time="0.72" steps="354"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                           <proof prover="3"><result status="valid" time="2.04"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.1" expl="apply premises" proved="true">
                           <proof prover="3"><result status="valid" time="1.71"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.2" expl="apply premises" proved="true">
                           <proof prover="4"><result status="valid" time="0.68" steps="358"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.0" expl="apply premises" proved="true">
                           <proof prover="3"><result status="valid" time="1.96"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.1" expl="apply premises" proved="true">
                           <proof prover="3"><result status="valid" time="1.71"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.2" expl="apply premises" proved="true">
                           <proof prover="4"><result status="valid" time="0.74" steps="358"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
                        <proof prover="3"><result status="valid" time="1.67"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.52"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.61"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                         <proof prover="4"><result status="valid" time="0.71" steps="358"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.55"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                         <proof prover="3"><result status="valid" time="1.69"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                         <proof prover="4"><result status="valid" time="0.87" steps="358"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
                       <proof prover="4"><result status="valid" time="0.72" steps="354"/></proof>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.0" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.72"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.1" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.53"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.2" expl="apply premises" proved="true">
                          <proof prover="4"><result status="valid" time="0.79" steps="358"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.53"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.1" expl="apply premises" proved="true">
                          <proof prover="3"><result status="valid" time="1.54"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.2" expl="apply premises" proved="true">
                          <proof prover="4"><result status="valid" time="0.78" steps="358"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
                       <proof prover="0"><result status="valid" time="4.86"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="4.78"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="4"><result status="valid" time="0.90" steps="348"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="5.32"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="5.44"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="5.04"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="5.02"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_correct_path_sum_sim_c.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="4.55"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_correct_path_sum_sim_c.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis_c">
   <goal name="VC set_correct_path_sum_sim_c.1.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="3.04" steps="378"/></proof>
   </goal>
   <goal name="VC set_correct_path_sum_sim_c.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_correct_path_sum_sim_c.1.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(pps_apply h&#39; x)" arg2="(path_sem_c c x)
">
     <goal name="VC set_correct_path_sum_sim_c.1.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="3.22" steps="382"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_sim_c.1.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="4"><result status="valid" time="3.17" steps="382"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sum_equiv_c" expl="VC for path_sum_equiv_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sum_equiv_c.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.60" steps="382"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.58" steps="382"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.45" steps="388"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.64"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.80" steps="382"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.62" steps="384"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="384"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.22" steps="391"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.60"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.9" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="384"/></proof>
  </goal>
  <goal name="VC path_sum_equiv_c.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_sum_equiv_c.10.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.48" steps="384"/></proof>
   </goal>
   <goal name="VC path_sum_equiv_c.10.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.52" steps="384"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_to_path_sem_c" expl="VC for correct_to_path_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_to_path_sem_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.16"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_to_mat_sem_c" expl="VC for correct_to_mat_sem_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_to_mat_sem_c.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.46" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC swap_invol_c_basis" expl="VC for swap_invol_c_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC swap_invol_c_basis.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.10"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.58" steps="376"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.33" steps="387"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.29" steps="389"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="384"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.41" steps="400"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.42" steps="402"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.68" steps="392"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.8" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.66" steps="413"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.50"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="400"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.11" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.41" steps="426"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.55"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.13" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="3.34" steps="431"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.14" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="3.40" steps="431"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.15" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.37"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.16" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.39"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.17" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="416"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.18" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="426"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.19" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="428"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.20" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.38"/></proof>
  </goal>
  <goal name="VC swap_invol_c_basis.21" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.65" steps="428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC cnot_invol_c_basis" expl="VC for cnot_invol_c_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cnot_invol_c_basis.0" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="1.06"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="376"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.11" steps="387"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.05" steps="389"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.64" steps="384"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.46" steps="400"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.47" steps="402"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.45" steps="392"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.8" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.75" steps="413"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.48"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.62" steps="400"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.11" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.59" steps="426"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.43"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.13" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="3.33" steps="431"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.14" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="3.48" steps="431"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.15" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.35"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.16" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC cnot_invol_c_basis.16.0" expl="assertion" proved="true">
   <transf name="assert" proved="true" arg1="(ket_to_int (ket 2 3) = 3)">
    <goal name="VC cnot_invol_c_basis.16.0.0" expl="asserted formula" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC cnot_invol_c_basis.16.0.0.0" expl="asserted formula" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC cnot_invol_c_basis.16.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="assert" proved="true" arg1="(3 &lt; power_ 2 2)">
       <goal name="VC cnot_invol_c_basis.16.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="3"><result status="valid" time="1.44"/></proof>
       </goal>
       <goal name="VC cnot_invol_c_basis.16.0.0.0.0.1" expl="asserted formula" proved="true">
       <proof prover="5"><result status="valid" time="1.59"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cnot_invol_c_basis.16.0.1" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.65" steps="418"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_invol_c_basis.17" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.68" steps="416"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.18" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="426"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.19" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.62" steps="428"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.20" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.65"/></proof>
  </goal>
  <goal name="VC cnot_invol_c_basis.21" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.60" steps="428"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC swap_invol_c" expl="VC for swap_invol_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC swap_invol_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,2">
   <goal name="VC swap_invol_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC swap_invol_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
     <goal name="VC swap_invol_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC swap_invol_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="VC swap_invol_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.52" steps="372"/></proof>
       </goal>
       <goal name="VC swap_invol_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.58" steps="372"/></proof>
       </goal>
       <goal name="VC swap_invol_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC swap_invol_c.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
          <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="swap_invol_c_basis">
            <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.60" steps="374"/></proof>
            </goal>
            <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="3.35" steps="377"/></proof>
            </goal>
            <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="3.04" steps="377"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="1.30"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC swap_invol_c.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="2.99" steps="377"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC swap_invol_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="3.55" steps="375"/></proof>
      </goal>
      <goal name="VC swap_invol_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.51" steps="372"/></proof>
      </goal>
      <goal name="VC swap_invol_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC swap_invol_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC swap_invol_c.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
         <goal name="VC swap_invol_c.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="scalar_ket_l">
          <goal name="VC swap_invol_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.52"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC swap_invol_c.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.95" steps="377"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_invol_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.90" steps="375"/></proof>
     </goal>
     <goal name="VC swap_invol_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.58" steps="372"/></proof>
     </goal>
     <goal name="VC swap_invol_c.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC swap_invol_c.0.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC swap_invol_c.0.0.0.3.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="3.58" steps="377"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC swap_invol_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.63" steps="372"/></proof>
    </goal>
    <goal name="VC swap_invol_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="3.11" steps="374"/></proof>
    </goal>
    <goal name="VC swap_invol_c.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="3.52" steps="374"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cnot_invol_c" expl="VC for cnot_invol_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cnot_invol_c.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,2">
   <goal name="VC cnot_invol_c.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC cnot_invol_c.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
     <goal name="VC cnot_invol_c.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum__c">
      <goal name="VC cnot_invol_c.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq">
       <goal name="VC cnot_invol_c.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
       </goal>
       <goal name="VC cnot_invol_c.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.60" steps="372"/></proof>
       </goal>
       <goal name="VC cnot_invol_c.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cnot_invol_c.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
          <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
           <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="cnot_invol_c_basis">
            <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
            </goal>
            <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="3.54" steps="377"/></proof>
            </goal>
            <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="4"><result status="valid" time="3.24" steps="377"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="3"><result status="valid" time="1.33"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cnot_invol_c.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="4"><result status="valid" time="3.23" steps="377"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC cnot_invol_c.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="3.08" steps="375"/></proof>
      </goal>
      <goal name="VC cnot_invol_c.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="4"><result status="valid" time="0.54" steps="372"/></proof>
      </goal>
      <goal name="VC cnot_invol_c.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC cnot_invol_c.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cnot_invol_c.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="path_sem_scal_c">
         <goal name="VC cnot_invol_c.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="scalar_ket_l">
          <goal name="VC cnot_invol_c.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="1.59"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC cnot_invol_c.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="4"><result status="valid" time="2.98" steps="377"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_invol_c.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="2.98" steps="375"/></proof>
     </goal>
     <goal name="VC cnot_invol_c.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.60" steps="372"/></proof>
     </goal>
     <goal name="VC cnot_invol_c.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC cnot_invol_c.0.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC cnot_invol_c.0.0.0.3.0.0" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="3.42" steps="377"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC cnot_invol_c.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="0.53" steps="372"/></proof>
    </goal>
    <goal name="VC cnot_invol_c.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="3.07" steps="374"/></proof>
    </goal>
    <goal name="VC cnot_invol_c.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="4"><result status="valid" time="3.17" steps="374"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_to_correct_c" expl="VC for mat_sem_to_correct_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_to_correct_c.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_to_correct_c" expl="VC for path_sem_to_correct_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_to_correct_c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_sem_to_correct_c">
   <goal name="VC path_sem_to_correct_c.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="0.55" steps="372"/></proof>
   </goal>
   <goal name="VC path_sem_to_correct_c.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC path_sem_to_correct_c.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC path_sem_to_correct_c.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.67" steps="378"/></proof>
     </goal>
     <goal name="VC path_sem_to_correct_c.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.43" steps="376"/></proof>
     </goal>
     <goal name="VC path_sem_to_correct_c.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="4"><result status="valid" time="0.57" steps="376"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_main_path_sum_c" expl="VC for correct_main_path_sum_c" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_main_path_sum_c.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_c">
   <goal name="VC correct_main_path_sum_c.0.0" expl="apply premises" proved="true">
   <proof prover="4"><result status="valid" time="2.62" steps="372"/></proof>
   </goal>
   <goal name="VC correct_main_path_sum_c.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_main_path_sum_c.0.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="2.57" steps="374"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_path_sum_bv_c" expl="VC for correct_path_sum_bv_c">
 <transf name="split_vc" >
  <goal name="VC correct_path_sum_bv_c.0" expl="precondition">
  </goal>
  <goal name="VC correct_path_sum_bv_c.1" expl="precondition">
  </goal>
  <goal name="VC correct_path_sum_bv_c.2" expl="precondition">
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_path_sum_bv_main_c" expl="VC for correct_path_sum_bv_main_c">
 <transf name="split_vc" >
  <goal name="VC correct_path_sum_bv_main_c.0" expl="postcondition">
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_path_sum_bv_apply_c" expl="VC for correct_path_sum_bv_apply_c">
 <transf name="split_vc" >
  <goal name="VC correct_path_sum_bv_apply_c.0" expl="postcondition">
  </goal>
 </transf>
 </goal>
 <goal name="VC seq_pps_bv_c" expl="VC for seq_pps_bv_c">
 <transf name="split_vc" >
  <goal name="VC seq_pps_bv_c.0" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.1" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.2" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.3" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.4" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.5" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.6" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.7" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.8" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.9" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.10" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.11" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.12" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.13" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.14" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.15" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.16" expl="precondition">
  </goal>
  <goal name="VC seq_pps_bv_c.17" expl="postcondition">
  </goal>
  <goal name="VC seq_pps_bv_c.18" expl="postcondition">
  </goal>
  <goal name="VC seq_pps_bv_c.19" expl="postcondition">
  </goal>
  <goal name="VC seq_pps_bv_c.20" expl="postcondition">
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Circuit_elem_c">
 <goal name="Circuit_elem.VC circ_to_pps" expl="VC for circ_to_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC width" expl="VC for width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC width.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="374"/></proof>
  </goal>
  <goal name="VC width.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.80" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC size" expl="VC for size" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC size.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ancillas" expl="VC for ancillas" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancillas.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.61" steps="372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC range" expl="VC for range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC range.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="372"/></proof>
  </goal>
  <goal name="VC range.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.47" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC basis_ket" expl="VC for basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_ket.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_ket.0.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="3.15" steps="374"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_ket.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC basis_ket.1.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.15"/></proof>
   </goal>
   <goal name="VC basis_ket.1.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.41"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ang_ind" expl="VC for ang_ind" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ang_ind.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.35" steps="372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_basis" expl="VC for path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_basis.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_basis.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.59" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_basis.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem" expl="VC for path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="372"/></proof>
  </goal>
  <goal name="VC path_sem.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="376"/></proof>
  </goal>
  <goal name="VC path_sem.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC id" expl="VC for id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC id.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="370"/></proof>
  </goal>
  <goal name="VC id.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="370"/></proof>
  </goal>
  <goal name="VC id.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="370"/></proof>
  </goal>
  <goal name="VC id.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="370"/></proof>
  </goal>
  <goal name="VC id.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="370"/></proof>
  </goal>
  <goal name="VC id.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC id.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC id.5.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.73"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC id.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC id.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC id.6.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.52"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC swap" expl="VC for swap" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC swap.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="370"/></proof>
  </goal>
  <goal name="VC swap.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="370"/></proof>
  </goal>
  <goal name="VC swap.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="370"/></proof>
  </goal>
  <goal name="VC swap.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="370"/></proof>
  </goal>
  <goal name="VC swap.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="370"/></proof>
  </goal>
  <goal name="VC swap.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC swap.5.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC swap.6.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC swap.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.69"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC phase" expl="VC for phase" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC phase.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
  </goal>
  <goal name="VC phase.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
  </goal>
  <goal name="VC phase.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
  </goal>
  <goal name="VC phase.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
  </goal>
  <goal name="VC phase.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="382"/></proof>
  </goal>
  <goal name="VC phase.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC phase.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC phase.5.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.67"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC phase.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC phase.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC phase.6.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC phase.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC phase.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC phase.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC rz" expl="VC for rz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rz.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
  </goal>
  <goal name="VC rz.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
  </goal>
  <goal name="VC rz.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="382"/></proof>
  </goal>
  <goal name="VC rz.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="382"/></proof>
  </goal>
  <goal name="VC rz.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="382"/></proof>
  </goal>
  <goal name="VC rz.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rz.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC rz.5.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.48"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rz.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rz.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC rz.6.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.44"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rz.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC rz.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC rz.7.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.46"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC hadamard" expl="VC for hadamard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC hadamard.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="370"/></proof>
  </goal>
  <goal name="VC hadamard.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="370"/></proof>
  </goal>
  <goal name="VC hadamard.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="370"/></proof>
  </goal>
  <goal name="VC hadamard.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="370"/></proof>
  </goal>
  <goal name="VC hadamard.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="370"/></proof>
  </goal>
  <goal name="VC hadamard.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC hadamard.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC hadamard.5.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.50"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC hadamard.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC hadamard.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC hadamard.6.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC cnot" expl="VC for cnot" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cnot.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="370"/></proof>
  </goal>
  <goal name="VC cnot.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="370"/></proof>
  </goal>
  <goal name="VC cnot.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.63" steps="370"/></proof>
  </goal>
  <goal name="VC cnot.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="370"/></proof>
  </goal>
  <goal name="VC cnot.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="370"/></proof>
  </goal>
  <goal name="VC cnot.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cnot.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_c_def">
    <goal name="VC cnot.5.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cnot.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="result_def">
      <goal name="VC cnot.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC cnot.5.0.0.0.0.0" expl="VC for cnot" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cnot.5.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="3"><result status="valid" time="1.71"/></proof>
        </goal>
        <goal name="VC cnot.5.0.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="3"><result status="valid" time="1.72"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cnot.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_c_def">
    <goal name="VC cnot.6.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.51"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC parallel" expl="VC for parallel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
  </goal>
  <goal name="VC parallel.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.11" steps="378"/></proof>
  </goal>
  <goal name="VC parallel.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.10" steps="380"/></proof>
  </goal>
  <goal name="VC parallel.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.13" steps="382"/></proof>
  </goal>
  <goal name="VC parallel.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="range_c_def">
    <goal name="VC parallel.4.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="1.26"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC parallel.5" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(parallel_c d e)">
   <goal name="VC parallel.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="parallel_angle_c">
   </transf>
   </goal>
   <goal name="VC parallel.5.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="0.55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC parallel.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(parallel_c d e)">
   <goal name="VC parallel.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="parallel_basis_ket_c">
   </transf>
   </goal>
   <goal name="VC parallel.6.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="0.54"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC sequence" expl="VC for sequence" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
  </goal>
  <goal name="VC sequence.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
  <goal name="VC sequence.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.07" steps="380"/></proof>
  </goal>
  <goal name="VC sequence.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.78" steps="382"/></proof>
  </goal>
  <goal name="VC sequence.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.81" steps="384"/></proof>
  </goal>
  <goal name="VC sequence.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.11" steps="386"/></proof>
  </goal>
  <goal name="VC sequence.6" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(sequence_c d e)">
   <goal name="VC sequence.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="sequence_angle_c">
    <goal name="VC sequence.6.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.53"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sequence.6.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="0.53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sequence.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="result" arg2="(sequence_c d e)">
   <goal name="VC sequence.7.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="sequence_basis_ket_c">
    <goal name="VC sequence.7.0.0" expl="apply premises" proved="true">
    <proof prover="3"><result status="valid" time="0.53"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sequence.7.1" expl="equality hypothesis" proved="true">
   <proof prover="3"><result status="valid" time="0.53"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ancilla" expl="VC for ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.59" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC ancilla.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ancilla.1.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="H2" arg2="x">
      <goal name="VC ancilla.1.0.0.0.0" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ancilla.1.0.0.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="path_sem_c_spec" arg2="in" arg3="Hinst">
        <goal name="VC ancilla.1.0.0.0.0.0.0" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="VC ancilla.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="4"><result status="valid" time="0.64" steps="376"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(width_c c)" arg2="(width_c c-1+1)">
         <goal name="VC ancilla.1.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.53" steps="376"/></proof>
          </goal>
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.54" steps="376"/></proof>
          </goal>
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.55" steps="376"/></proof>
          </goal>
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.3" expl="apply premises" proved="true">
          <proof prover="4"><result status="valid" time="0.57" steps="376"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ancilla.1.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="4"><result status="valid" time="0.54" steps="376"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.3.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC ancilla.3.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC ancilla.3.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="ancillas_c_def6" arg2="(ancilla_c c),(pre c)">
      <goal name="VC ancilla.3.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="1.47"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="result" arg2="(ancilla_c c)">
    <goal name="VC ancilla.4.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC ancilla.4.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="size_c_def6" arg2="(ancilla_c c),(pre c)">
      <goal name="VC ancilla.4.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC ancilla.4.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="3"><result status="valid" time="1.42"/></proof>
       </goal>
       <goal name="VC ancilla.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.56" steps="382"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla.4.0.1" expl="equality hypothesis" proved="true">
    <proof prover="4"><result status="valid" time="0.57" steps="380"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC correct_main_path_sum" expl="VC for correct_main_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_main_path_sum.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.58" steps="372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_basis_apply" expl="VC for path_sem_basis_apply" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis_apply.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.58" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_basis_apply.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_basis_apply.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC apply_path_sem_basis" expl="VC for apply_path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC apply_path_sem_basis.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
  </goal>
  <goal name="VC apply_path_sem_basis.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="374"/></proof>
  </goal>
  <goal name="VC apply_path_sem_basis.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_apply" expl="VC for path_sem_apply" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_apply.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="372"/></proof>
  </goal>
  <goal name="VC path_sem_apply.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC apply_path_sem" expl="VC for apply_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC apply_path_sem.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.63" steps="372"/></proof>
  </goal>
  <goal name="VC apply_path_sem.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_ket_l" expl="VC for path_sem_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket_l.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_ket_l.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.58" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_ket_l.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_ket_length" expl="VC for path_sem_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket_length.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_ket_length.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_ket_length.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.44" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC get_path_sem" expl="VC for get_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_path_sem.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="372"/></proof>
  </goal>
  <goal name="VC get_path_sem.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC get_path_sem_basis" expl="VC for get_path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_path_sem_basis.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="374"/></proof>
  </goal>
  <goal name="VC get_path_sem_basis.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="374"/></proof>
  </goal>
  <goal name="VC get_path_sem_basis.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC circ_to_pps_parallel" expl="VC for circ_to_pps_parallel" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_parallel.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC parallel_width" expl="VC for parallel_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_width.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC parallel_range" expl="VC for parallel_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_range.0" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="372"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC parallel_basis_ket" expl="VC for parallel_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_basis_ket.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_basis_ket.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC parallel_angle" expl="VC for parallel_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_angle.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC circ_to_pps_sequence" expl="VC for circ_to_pps_sequence" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_sequence.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="372"/></proof>
  </goal>
  <goal name="VC circ_to_pps_sequence.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC sequence_width" expl="VC for sequence_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_width.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="372"/></proof>
  </goal>
  <goal name="VC sequence_width.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC sequence_range" expl="VC for sequence_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_range.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.60" steps="372"/></proof>
  </goal>
  <goal name="VC sequence_range.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC sequence_basis_ket" expl="VC for sequence_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_basis_ket.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="372"/></proof>
  </goal>
  <goal name="VC sequence_basis_ket.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC sequence_angle" expl="VC for sequence_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_angle.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="372"/></proof>
  </goal>
  <goal name="VC sequence_angle.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC circ_to_pps_ancilla" expl="VC for circ_to_pps_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_ancilla.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_ancilla.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.52" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_ancilla.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_ancilla.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC circ_to_pps_ancilla.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC circ_to_pps_ancilla.1.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="H2">
      <goal name="VC circ_to_pps_ancilla.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC circ_to_pps_ancilla.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC circ_to_pps_ancilla.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.52" steps="374"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ancilla_width" expl="VC for ancilla_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_width.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_width.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.51" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_width.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_width.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC ancilla_width.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ancilla_width.1.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="H2">
      <goal name="VC ancilla_width.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_width.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_width.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ancilla_range" expl="VC for ancilla_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_range.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_range.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.56" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_range.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_range.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC ancilla_range.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ancilla_range.1.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="H2">
      <goal name="VC ancilla_range.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_range.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_range.2.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ancilla_basis_ket" expl="VC for ancilla_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_basis_ket.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_basis_ket.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_basis_ket.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_basis_ket.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC ancilla_basis_ket.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ancilla_basis_ket.1.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="H2">
      <goal name="VC ancilla_basis_ket.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.50" steps="374"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_basis_ket.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_basis_ket.2.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ancilla_angle" expl="VC for ancilla_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_angle.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_angle.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.51" steps="372"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_angle.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_angle.1.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC ancilla_angle.1.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC ancilla_angle.1.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="H2">
      <goal name="VC ancilla_angle.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="4"><result status="valid" time="0.52" steps="374"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_angle.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_angle.2.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="H">
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC sequence_eq" expl="VC for sequence_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_eq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="376"/></proof>
  </goal>
  <goal name="VC sequence_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="376"/></proof>
  </goal>
  <goal name="VC sequence_eq.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
  </goal>
  <goal name="VC sequence_eq.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="377"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC ancilla_eq" expl="VC for ancilla_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_eq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.04" steps="378"/></proof>
  </goal>
  <goal name="VC ancilla_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="374"/></proof>
  </goal>
  <goal name="VC ancilla_eq.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="374"/></proof>
  </goal>
  <goal name="VC ancilla_eq.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="375"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC parallel_eq" expl="VC for parallel_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_eq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
  </goal>
  <goal name="VC parallel_eq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="374"/></proof>
  </goal>
  <goal name="VC parallel_eq.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="375"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_decomp" expl="VC for path_sem_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_decomp.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="372"/></proof>
  </goal>
  <goal name="VC path_sem_decomp.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_scal_" expl="VC for path_sem_scal_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_scal_.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_scal_.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_scal" expl="VC for path_sem_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="372"/></proof>
  </goal>
  <goal name="VC path_sem_scal.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_scal_rev" expl="VC for path_sem_scal_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_rev.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
  </goal>
  <goal name="VC path_sem_scal_rev.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_add" expl="VC for path_sem_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_add.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_add.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_add.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_add.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_add.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_scal_add_ket_l" expl="VC for path_sem_scal_add_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_add_ket_l.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.56" steps="376"/></proof>
  </goal>
  <goal name="VC path_sem_scal_add_ket_l.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
  <goal name="VC path_sem_scal_add_ket_l.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="376"/></proof>
  </goal>
  <goal name="VC path_sem_scal_add_ket_l.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="378"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_substr" expl="VC for path_sem_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_substr.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_substr.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_substr.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_substr.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_substr.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_scal_add" expl="VC for path_sem_scal_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_add.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_add.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_add.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_add.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_add.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_scal_substr" expl="VC for path_sem_scal_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_substr.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_substr.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_substr.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_substr.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_substr.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_sum" expl="VC for path_sem_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.45" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.94" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_sum.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.96" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_sum.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_sum_diag" expl="VC for path_sem_sum_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_diag.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum_diag.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum_diag.2" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_sum_" expl="VC for path_sem_sum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum_.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum_.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.89" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_sum_.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_sum_gen" expl="VC for path_sem_sum_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum_gen.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_sum_gen.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.85" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_sum_gen.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.91" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_sum_gen.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC scal_path_sem_sum_gen" expl="VC for scal_path_sem_sum_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_path_sem_sum_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum_gen.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum_gen.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.08" steps="382"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum_gen.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.28" steps="382"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum_gen.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum_gen.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.45" steps="378"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum_gen.6" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC scal_path_sem_sum" expl="VC for scal_path_sem_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_path_sem_sum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="374"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="374"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.05" steps="378"/></proof>
  </goal>
  <goal name="VC scal_path_sem_sum.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_scal_sum" expl="VC for path_sem_scal_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_sum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_scal_sum.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="374"/></proof>
  </goal>
  <goal name="VC path_sem_scal_sum.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.87" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_scal_sum.3" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H">
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_comp" expl="VC for path_sem_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_comp.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_comp.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_comp.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_comp.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_comp.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_kron" expl="VC for path_sem_kron" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_kron.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_kron.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_kron.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_kron.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_sequence_parallel" expl="VC for path_sem_sequence_parallel">
 </goal>
 <goal name="Circuit_elem.VC path_sem_id_basis" expl="VC for path_sem_id_basis">
 </goal>
 <goal name="Circuit_elem.VC path_sem_id" expl="VC for path_sem_id">
 </goal>
 <goal name="Circuit_elem.VC path_sem_phase_basis" expl="VC for path_sem_phase_basis">
 </goal>
 <goal name="Circuit_elem.VC path_sem_phase_basis_inv" expl="VC for path_sem_phase_basis_inv">
 </goal>
 <goal name="Circuit_elem.VC path_sem_phase_inv" expl="VC for path_sem_phase_inv">
 </goal>
 <goal name="Circuit_elem.VC path_sem_rz_basis" expl="VC for path_sem_rz_basis">
 </goal>
 <goal name="Circuit_elem.VC path_sem_rz_basis_inv" expl="VC for path_sem_rz_basis_inv">
 </goal>
 <goal name="Circuit_elem.VC path_sem_rz_inv" expl="VC for path_sem_rz_inv">
 </goal>
 <goal name="Circuit_elem.VC path_sem_hadamard_zero" expl="VC for path_sem_hadamard_zero">
 </goal>
 <goal name="Circuit_elem.VC path_sem_hadamard_one" expl="VC for path_sem_hadamard_one">
 </goal>
 <goal name="Circuit_elem.VC path_sem_hadamard_plus" expl="VC for path_sem_hadamard_plus">
 </goal>
 <goal name="Circuit_elem.VC path_sem_hadamard_minus" expl="VC for path_sem_hadamard_minus">
 </goal>
 <goal name="Circuit_elem.VC path_sem_cnot_basis" expl="VC for path_sem_cnot_basis">
 </goal>
 <goal name="Circuit_elem.VC path_sem_swap_basis" expl="VC for path_sem_swap_basis">
 </goal>
 <goal name="Circuit_elem.VC hadamard_invol" expl="VC for hadamard_invol">
 </goal>
 <goal name="Circuit_elem.VC ancilla_g" expl="VC for ancilla_g" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_g.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="372"/></proof>
  </goal>
  <goal name="VC ancilla_g.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.07" steps="376"/></proof>
  </goal>
  <goal name="VC ancilla_g.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="380"/></proof>
  </goal>
  <goal name="VC ancilla_g.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="380"/></proof>
  </goal>
  <goal name="VC ancilla_g.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="380"/></proof>
  </goal>
  <goal name="VC ancilla_g.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="380"/></proof>
  </goal>
  <goal name="VC ancilla_g.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H7">
  </transf>
  </goal>
  <goal name="VC ancilla_g.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="H7">
  </transf>
  </goal>
  <goal name="VC ancilla_g.8" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.97" steps="384"/></proof>
  </goal>
  <goal name="VC ancilla_g.9" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.98" steps="384"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC correct_seq" expl="VC for correct_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_seq.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="380"/></proof>
  </goal>
  <goal name="VC correct_seq.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="380"/></proof>
  </goal>
  <goal name="VC correct_seq.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
  </goal>
  <goal name="VC correct_seq.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
  </goal>
  <goal name="VC correct_seq.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.53" steps="380"/></proof>
  </goal>
  <goal name="VC correct_seq.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H8">
   <goal name="VC correct_seq.5.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.5.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.18" steps="386"/></proof>
    </goal>
    <goal name="VC correct_seq.5.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.16" steps="386"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_seq.5.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.5.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.18" steps="386"/></proof>
    </goal>
    <goal name="VC correct_seq.5.1.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.16" steps="386"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H10">
   <goal name="VC correct_seq.6.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.6.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.20" steps="390"/></proof>
    </goal>
    <goal name="VC correct_seq.6.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.24" steps="390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_seq.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.6.1.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.01" steps="390"/></proof>
    </goal>
    <goal name="VC correct_seq.6.1.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.02" steps="390"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_seq.6.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.6.2.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.53" steps="384"/></proof>
    </goal>
    <goal name="VC correct_seq.6.2.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.54" steps="384"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.68" steps="382"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC correct_par" expl="VC for correct_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_par.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.65" steps="378"/></proof>
  </goal>
  <goal name="VC correct_par.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="378"/></proof>
  </goal>
  <goal name="VC correct_par.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="378"/></proof>
  </goal>
  <goal name="VC correct_par.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.67" steps="378"/></proof>
  </goal>
  <goal name="VC correct_par.4" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H8">
   <goal name="VC correct_par.4.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par.4.0.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.37" steps="384"/></proof>
    </goal>
    <goal name="VC correct_par.4.0.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="3.33" steps="384"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_par.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par.4.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.04"/></proof>
    </goal>
    <goal name="VC correct_par.4.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.05"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_par.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.11"/></proof>
  </goal>
  <goal name="VC correct_par.6" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H10">
   <goal name="VC correct_par.6.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par.6.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.04"/></proof>
    </goal>
    <goal name="VC correct_par.6.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.10"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_par.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par.6.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.08"/></proof>
    </goal>
    <goal name="VC correct_par.6.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.05"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_par.6.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par.6.2.0" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.54" steps="382"/></proof>
    </goal>
    <goal name="VC correct_par.6.2.1" expl="apply premises" proved="true">
    <proof prover="4"><result status="valid" time="0.68" steps="382"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_par.7" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="380"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC correct_ancilla" expl="VC for correct_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_ancilla.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.52" steps="378"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.1" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.1.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.55" steps="378"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.2" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.2.0" expl="precondition" proved="true">
   <transf name="exists" proved="true" arg1="path_sem_target">
    <goal name="VC correct_ancilla.2.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC correct_ancilla.2.0.0.0" proved="true">
     <transf name="instantiate" proved="true" arg1="H7" arg2="x">
      <goal name="VC correct_ancilla.2.0.0.0.0" proved="true">
      <transf name="apply" proved="true" arg1="Hinst">
       <goal name="VC correct_ancilla.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="4"><result status="valid" time="0.56" steps="382"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.3" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.3.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.55" steps="378"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.4.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.56" steps="378"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.5.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H8">
    <goal name="VC correct_ancilla.5.0.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC correct_ancilla.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="3.01" steps="384"/></proof>
     </goal>
     <goal name="VC correct_ancilla.5.0.0.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="3.02" steps="384"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC correct_ancilla.5.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC correct_ancilla.5.0.1.0" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.99" steps="384"/></proof>
     </goal>
     <goal name="VC correct_ancilla.5.0.1.1" expl="apply premises" proved="true">
     <proof prover="4"><result status="valid" time="2.99" steps="384"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.6" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.6.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="H6">
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.7.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.54" steps="380"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC set_correct_main_path_sum" expl="VC for set_correct_main_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_main_path_sum.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
  <goal name="VC set_correct_main_path_sum.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.54" steps="374"/></proof>
  </goal>
  <goal name="VC set_correct_main_path_sum.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.10" steps="380"/></proof>
  </goal>
  <goal name="VC set_correct_main_path_sum.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.12" steps="384"/></proof>
  </goal>
  <goal name="VC set_correct_main_path_sum.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC set_path_sem_by_correct_pps" expl="VC for set_path_sem_by_correct_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_path_sem_by_correct_pps.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
  </goal>
  <goal name="VC set_path_sem_by_correct_pps.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
  <goal name="VC set_path_sem_by_correct_pps.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
  <goal name="VC set_path_sem_by_correct_pps.3" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="378"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC set_path_sem_by_correct_pps_gen" expl="VC for set_path_sem_by_correct_pps_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_path_sem_by_correct_pps_gen.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="372"/></proof>
  </goal>
  <goal name="VC set_path_sem_by_correct_pps_gen.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="3.44" steps="378"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC set_correct_pps" expl="VC for set_correct_pps">
 <transf name="split_vc" >
  <goal name="VC set_correct_pps.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.57" steps="372"/></proof>
  </goal>
  <goal name="VC set_correct_pps.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.44" steps="378"/></proof>
  </goal>
  <goal name="VC set_correct_pps.2" expl="postcondition">
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC set_correct_path_sum_sim" expl="VC for set_correct_path_sum_sim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_path_sum_sim.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
  <goal name="VC set_correct_path_sum_sim.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.49" steps="376"/></proof>
  </goal>
  <goal name="VC set_correct_path_sum_sim.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.88" steps="382"/></proof>
  </goal>
  <goal name="VC set_correct_path_sum_sim.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="3.35" steps="386"/></proof>
  </goal>
  <goal name="VC set_correct_path_sum_sim.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.64" steps="376"/></proof>
  </goal>
  <goal name="VC set_correct_path_sum_sim.5" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.47" steps="378"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sum_equiv" expl="VC for path_sum_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sum_equiv.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.51" steps="376"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="376"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.52" steps="376"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.97" steps="382"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.76"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_sum_equiv.5.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.51" steps="380"/></proof>
   </goal>
   <goal name="VC path_sum_equiv.5.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.51" steps="380"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC correct_to_path_sem" expl="VC for correct_to_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_to_path_sem.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.48" steps="372"/></proof>
  </goal>
  <goal name="VC correct_to_path_sem.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="2.85" steps="376"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC path_sem_to_correct" expl="VC for path_sem_to_correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_to_correct.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.45" steps="372"/></proof>
  </goal>
  <goal name="VC path_sem_to_correct.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="2.83" steps="378"/></proof>
  </goal>
  <goal name="VC path_sem_to_correct.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.46" steps="374"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Circuit_elem.VC correct_path_sum_bv" expl="VC for correct_path_sum_bv">
 </goal>
 <goal name="Circuit_elem.VC correct_path_sum_bv_main" expl="VC for correct_path_sum_bv_main">
 </goal>
 <goal name="Circuit_elem.VC correct_path_sum_bv_apply" expl="VC for correct_path_sum_bv_apply">
 </goal>
 <goal name="Circuit_elem.VC seq_pps_bv" expl="VC for seq_pps_bv">
 </goal>
</theory>
<theory name="Mat_sem_c">
 <goal name="Semantics.VC circ_to_pps" expl="VC for circ_to_pps">
 <transf name="split_vc" >
  <goal name="VC circ_to_pps.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="422"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC width" expl="VC for width">
 <transf name="split_vc" >
  <goal name="VC width.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="422"/></proof>
  </goal>
  <goal name="VC width.1" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="1.04"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC size" expl="VC for size">
 <transf name="split_vc" >
  <goal name="VC size.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="420"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC ancillas" expl="VC for ancillas">
 <transf name="split_vc" >
  <goal name="VC ancillas.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="420"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC range" expl="VC for range">
 <transf name="split_vc" >
  <goal name="VC range.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="420"/></proof>
  </goal>
  <goal name="VC range.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="2.96" steps="422"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC basis_ket" expl="VC for basis_ket">
 <transf name="split_vc" >
  <goal name="VC basis_ket.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC basis_ket.0.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="3.00" steps="422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC basis_ket.1" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC basis_ket.1.0" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="1.12"/></proof>
   </goal>
   <goal name="VC basis_ket.1.1" expl="postcondition">
   <proof prover="0" obsolete="true"><result status="valid" time="1.11"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC ang_ind" expl="VC for ang_ind">
 <transf name="split_vc" >
  <goal name="VC ang_ind.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.14" steps="420"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC path_sem_basis" expl="VC for path_sem_basis">
 <transf name="split_vc" >
  <goal name="VC path_sem_basis.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="422"/></proof>
  </goal>
  <goal name="VC path_sem_basis.1" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.67" steps="422"/></proof>
  </goal>
  <goal name="VC path_sem_basis.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.58" steps="426"/></proof>
  </goal>
  <goal name="VC path_sem_basis.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="426"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC path_sem" expl="VC for path_sem">
 <transf name="split_vc" >
  <goal name="VC path_sem.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.57" steps="420"/></proof>
  </goal>
  <goal name="VC path_sem.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.57" steps="424"/></proof>
  </goal>
  <goal name="VC path_sem.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.58" steps="424"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC id" expl="VC for id">
 <transf name="split_vc" >
  <goal name="VC id.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="418"/></proof>
  </goal>
  <goal name="VC id.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="418"/></proof>
  </goal>
  <goal name="VC id.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="418"/></proof>
  </goal>
  <goal name="VC id.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="418"/></proof>
  </goal>
  <goal name="VC id.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="418"/></proof>
  </goal>
  <goal name="VC id.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC id.5.0" expl="postcondition">
   <transf name="rewrite" arg1="basis_ket_c_def">
    <goal name="VC id.5.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC id.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC id.6.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC id.6.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.46"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC swap" expl="VC for swap">
 <transf name="split_vc" >
  <goal name="VC swap.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="418"/></proof>
  </goal>
  <goal name="VC swap.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="418"/></proof>
  </goal>
  <goal name="VC swap.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.61" steps="418"/></proof>
  </goal>
  <goal name="VC swap.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.57" steps="418"/></proof>
  </goal>
  <goal name="VC swap.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="418"/></proof>
  </goal>
  <goal name="VC swap.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap.5.0" expl="postcondition">
   <transf name="rewrite" arg1="basis_ket_c_def">
    <goal name="VC swap.5.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.43"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap.6.0" expl="postcondition">
   <transf name="rewrite" arg1="basis_ket_c_def">
    <goal name="VC swap.6.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap.7" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap.7.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC swap.7.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.42"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC phase" expl="VC for phase">
 <transf name="split_vc" >
  <goal name="VC phase.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="430"/></proof>
  </goal>
  <goal name="VC phase.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="430"/></proof>
  </goal>
  <goal name="VC phase.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="430"/></proof>
  </goal>
  <goal name="VC phase.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="430"/></proof>
  </goal>
  <goal name="VC phase.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="430"/></proof>
  </goal>
  <goal name="VC phase.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC phase.5.0" expl="postcondition">
   <transf name="rewrite" arg1="basis_ket_c_def">
    <goal name="VC phase.5.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.47"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC phase.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC phase.6.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC phase.6.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.45"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC phase.7" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC phase.7.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC phase.7.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.42"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC rz" expl="VC for rz">
 <transf name="split_vc" >
  <goal name="VC rz.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="430"/></proof>
  </goal>
  <goal name="VC rz.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="430"/></proof>
  </goal>
  <goal name="VC rz.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="430"/></proof>
  </goal>
  <goal name="VC rz.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="430"/></proof>
  </goal>
  <goal name="VC rz.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="430"/></proof>
  </goal>
  <goal name="VC rz.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC rz.5.0" expl="postcondition">
   <transf name="rewrite" arg1="basis_ket_c_def">
    <goal name="VC rz.5.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.52"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rz.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC rz.6.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC rz.6.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.50"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC rz.7" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC rz.7.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC rz.7.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.52"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC hadamard" expl="VC for hadamard">
 <transf name="split_vc" >
  <goal name="VC hadamard.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="418"/></proof>
  </goal>
  <goal name="VC hadamard.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="418"/></proof>
  </goal>
  <goal name="VC hadamard.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.49" steps="418"/></proof>
  </goal>
  <goal name="VC hadamard.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="418"/></proof>
  </goal>
  <goal name="VC hadamard.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.50" steps="418"/></proof>
  </goal>
  <goal name="VC hadamard.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC hadamard.5.0" expl="postcondition">
   <transf name="rewrite" arg1="basis_ket_c_def">
    <goal name="VC hadamard.5.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.51"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC hadamard.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC hadamard.6.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC hadamard.6.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.53"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC cnot" expl="VC for cnot">
 <transf name="split_vc" >
  <goal name="VC cnot.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="418"/></proof>
  </goal>
  <goal name="VC cnot.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="418"/></proof>
  </goal>
  <goal name="VC cnot.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="418"/></proof>
  </goal>
  <goal name="VC cnot.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="418"/></proof>
  </goal>
  <goal name="VC cnot.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="418"/></proof>
  </goal>
  <goal name="VC cnot.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC cnot.5.0" expl="postcondition">
   <transf name="rewrite" arg1="basis_ket_c_def">
    <goal name="VC cnot.5.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC cnot.5.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="result_def">
      <goal name="VC cnot.5.0.0.0.0" expl="postcondition">
      <transf name="eliminate_if" >
       <goal name="VC cnot.5.0.0.0.0.0" expl="VC for cnot">
       <transf name="split_vc" >
        <goal name="VC cnot.5.0.0.0.0.0.0" expl="postcondition">
        <proof prover="3" obsolete="true"><result status="valid" time="1.75"/></proof>
        </goal>
        <goal name="VC cnot.5.0.0.0.0.0.1" expl="postcondition">
        <proof prover="3" obsolete="true"><result status="valid" time="1.74"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC cnot.6.0" expl="postcondition">
   <transf name="rewrite" arg1="ang_ind_c_def">
    <goal name="VC cnot.6.0.0" expl="postcondition">
    <proof prover="3" obsolete="true"><result status="valid" time="1.49"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC parallel" expl="VC for parallel">
 <transf name="split_vc" >
  <goal name="VC parallel.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.52" steps="424"/></proof>
  </goal>
  <goal name="VC parallel.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.11" steps="426"/></proof>
  </goal>
  <goal name="VC parallel.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.17" steps="428"/></proof>
  </goal>
  <goal name="VC parallel.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.18" steps="430"/></proof>
  </goal>
  <goal name="VC parallel.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.20" steps="432"/></proof>
  </goal>
  <goal name="VC parallel.5" expl="postcondition">
  <transf name="replace" arg1="result" arg2="(parallel_c d e)">
   <goal name="VC parallel.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="parallel_angle_c">
   </transf>
   </goal>
   <goal name="VC parallel.5.1" expl="equality hypothesis">
   <proof prover="3" obsolete="true"><result status="valid" time="0.55"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC parallel.6" expl="postcondition">
  <transf name="replace" arg1="result" arg2="(parallel_c d e)">
   <goal name="VC parallel.6.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="parallel_basis_ket_c">
   </transf>
   </goal>
   <goal name="VC parallel.6.1" expl="equality hypothesis">
   <proof prover="3" obsolete="true"><result status="valid" time="0.53"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC sequence" expl="VC for sequence">
 <transf name="split_vc" >
  <goal name="VC sequence.0" expl="precondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="420"/></proof>
  </goal>
  <goal name="VC sequence.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.51" steps="426"/></proof>
  </goal>
  <goal name="VC sequence.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.13" steps="428"/></proof>
  </goal>
  <goal name="VC sequence.3" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.21" steps="430"/></proof>
  </goal>
  <goal name="VC sequence.4" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.21" steps="432"/></proof>
  </goal>
  <goal name="VC sequence.5" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.23" steps="434"/></proof>
  </goal>
  <goal name="VC sequence.6" expl="postcondition">
  <transf name="replace" arg1="result" arg2="(sequence_c d e)">
   <goal name="VC sequence.6.0" expl="postcondition">
   <transf name="apply" arg1="sequence_angle_c">
    <goal name="VC sequence.6.0.0" expl="apply premises">
    <proof prover="3" obsolete="true"><result status="valid" time="0.56"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sequence.6.1" expl="equality hypothesis">
   <proof prover="3" obsolete="true"><result status="valid" time="0.54"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sequence.7" expl="postcondition">
  <transf name="replace" arg1="result" arg2="(sequence_c d e)">
   <goal name="VC sequence.7.0" expl="postcondition">
   <transf name="apply" arg1="sequence_basis_ket_c">
    <goal name="VC sequence.7.0.0" expl="apply premises">
    <proof prover="3" obsolete="true"><result status="valid" time="0.53"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sequence.7.1" expl="equality hypothesis">
   <proof prover="3" obsolete="true"><result status="valid" time="0.55"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC ancilla" expl="VC for ancilla">
 <transf name="split_vc" >
  <goal name="VC ancilla.0" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC ancilla.0.0" expl="precondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="420"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.1" expl="precondition">
  <transf name="split_vc" >
   <goal name="VC ancilla.1.0" expl="precondition">
   <transf name="exists" arg1="path_sem_target">
    <goal name="VC ancilla.1.0.0">
    <transf name="split_vc" >
     <goal name="VC ancilla.1.0.0.0">
     <transf name="instantiate" arg1="H2" arg2="x">
      <goal name="VC ancilla.1.0.0.0.0">
      <transf name="split_all_full" >
       <goal name="VC ancilla.1.0.0.0.0.0">
       <transf name="rewrite" arg1="path_sem_c_spec" arg2="in" arg3="Hinst">
        <goal name="VC ancilla.1.0.0.0.0.0.0">
        <transf name="apply" arg1="Hinst">
         <goal name="VC ancilla.1.0.0.0.0.0.0.0" expl="apply premises">
         <proof prover="4" obsolete="true"><result status="valid" time="0.58" steps="424"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla.1.0.0.0.0.0.1" expl="rewrite premises">
        <transf name="replace" arg1="(width_c c)" arg2="(width_c c-1+1)">
         <goal name="VC ancilla.1.0.0.0.0.0.1.0" expl="rewrite premises">
         <transf name="apply" arg1="kronecker_ket_l">
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.0" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.60" steps="424"/></proof>
          </goal>
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.1" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.57" steps="424"/></proof>
          </goal>
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.2" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.60" steps="424"/></proof>
          </goal>
          <goal name="VC ancilla.1.0.0.0.0.0.1.0.3" expl="apply premises">
          <proof prover="4" obsolete="true"><result status="valid" time="0.60" steps="424"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ancilla.1.0.0.0.0.0.1.1" expl="equality hypothesis">
         <proof prover="4" obsolete="true"><result status="valid" time="0.61" steps="424"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.2" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC ancilla.2.0" expl="postcondition">
   <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="426"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.3" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC ancilla.3.0" expl="postcondition">
   <transf name="rewrite" arg1="H2">
    <goal name="VC ancilla.3.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC ancilla.3.0.0.0" expl="postcondition">
     <transf name="instantiate" arg1="ancillas_c_def6" arg2="(ancilla_c c),(pre c)">
      <goal name="VC ancilla.3.0.0.0.0" expl="postcondition">
      <proof prover="3" obsolete="true"><result status="valid" time="1.48"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla.4" expl="postcondition">
  <transf name="split_vc" >
   <goal name="VC ancilla.4.0" expl="postcondition">
   <transf name="replace" arg1="result" arg2="(ancilla_c c)">
    <goal name="VC ancilla.4.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC ancilla.4.0.0.0" expl="postcondition">
     <transf name="instantiate" arg1="size_c_def6" arg2="(ancilla_c c),(pre c)">
      <goal name="VC ancilla.4.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="Hinst">
       <goal name="VC ancilla.4.0.0.0.0.0" expl="postcondition">
       <proof prover="3" obsolete="true"><result status="valid" time="1.46"/></proof>
       </goal>
       <goal name="VC ancilla.4.0.0.0.0.1" expl="rewrite premises">
       <proof prover="4" obsolete="true"><result status="valid" time="0.54" steps="430"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla.4.0.1" expl="equality hypothesis">
    <proof prover="4" obsolete="true"><result status="valid" time="0.53" steps="428"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.VC mat_sem" expl="VC for mat_sem">
 <transf name="split_vc" >
  <goal name="VC mat_sem.0" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.35" steps="424"/></proof>
  </goal>
  <goal name="VC mat_sem.1" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="0.56" steps="424"/></proof>
  </goal>
  <goal name="VC mat_sem.2" expl="postcondition">
  <proof prover="4" obsolete="true"><result status="valid" time="3.33" steps="429"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.mat_sem_sequence">
 <transf name="split_vc" >
  <goal name="mat_sem_sequence.0">
  <proof prover="4" obsolete="true"><result status="valid" time="3.09" steps="422"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.mat_sem_parallel">
 <transf name="split_vc" >
  <goal name="mat_sem_parallel.0">
  <proof prover="4" obsolete="true"><result status="valid" time="3.11" steps="420"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.mat_sem_ancilla">
 <transf name="split_vc" >
  <goal name="mat_sem_ancilla.0">
  <transf name="apply" arg1="mat_sem_anc_c">
   <goal name="mat_sem_ancilla.0.0" expl="apply premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.55" steps="424"/></proof>
   </goal>
   <goal name="mat_sem_ancilla.0.1" expl="apply premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.57" steps="424"/></proof>
   </goal>
   <goal name="mat_sem_ancilla.0.2" expl="apply premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.58" steps="424"/></proof>
   </goal>
   <goal name="mat_sem_ancilla.0.3" expl="apply premises">
   <proof prover="4" obsolete="true"><result status="valid" time="0.58" steps="424"/></proof>
   </goal>
   <goal name="mat_sem_ancilla.0.4" expl="apply premises">
   <transf name="split_vc" >
    <goal name="mat_sem_ancilla.0.4.0" expl="apply premises">
    <proof prover="4" obsolete="true"><result status="valid" time="3.27" steps="428"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.mat_sem_identity">
 <proof prover="4" obsolete="true"><result status="valid" time="3.04" steps="420"/></proof>
 </goal>
 <goal name="Semantics.mat_sem_rz">
 <transf name="split_vc" >
  <goal name="mat_sem_rz.0">
  <proof prover="0" obsolete="true"><result status="valid" time="1.00"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.mat_sem_phase">
 <transf name="split_vc" >
  <goal name="mat_sem_phase.0">
  <proof prover="0" obsolete="true"><result status="valid" time="1.02"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Semantics.mat_sem_hadamard">
 <proof prover="4" obsolete="true"><result status="valid" time="3.04" steps="422"/></proof>
 </goal>
 <goal name="Semantics.mat_sem_cnot">
 <proof prover="4" obsolete="true"><result status="valid" time="3.02" steps="424"/></proof>
 </goal>
 <goal name="Semantics.mat_sem_swap">
 <proof prover="4" obsolete="true"><result status="valid" time="2.95" steps="426"/></proof>
 </goal>
</theory>
</file>
</why3session>
