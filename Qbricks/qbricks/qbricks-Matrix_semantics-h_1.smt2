;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(set-option :produce-models true)
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

(declare-fun int () ty)

(declare-fun real () ty)

(declare-fun bool () ty)

(declare-fun match_bool (ty Bool uni uni) uni)

(declare-fun index_bool (Bool) Int)

(declare-sort tuple0 0)

(declare-fun tuple01 () ty)

(declare-fun Tuple0 () tuple0)

(declare-sort t 0)

(declare-fun t1 () ty)

(declare-fun tzero () t)

(declare-fun tone () t)

(declare-fun prefix_mndt (t) t)

(declare-fun infix_mndt (t t) t)

(declare-fun infix_sldt (t t) t)

(declare-fun infix_pldt (t t) t)

(declare-fun infix_asdt (t t) t)

(declare-fun infix_lseqdt (t t) Bool)

(declare-fun infix_lsdt (t t) Bool)

(declare-fun infix_gteqdt (t t) Bool)

(declare-fun infix_gtdt (t t) Bool)

(declare-fun prefix_mnas (Real) Real)

(declare-fun infix_mnas (Real Real) Real)

(declare-fun infix_slas (Real Real) Real)

(declare-fun infix_plas (Real Real) Real)

(declare-fun infix_asas (Real Real) Real)

(declare-fun infix_lseqas (Real Real) Bool)

(declare-fun infix_lsas (Real Real) Bool)

(declare-fun inv (Real) Real)

(declare-fun from_int (Int) Real)

(declare-fun inv1 (t) t)

(declare-fun im () t)

(declare-fun r_to_t (Real) t)

(declare-fun real_part (t) Real)

(declare-fun im_part (t) Real)

(declare-fun real_ (t) Bool)

(declare-fun pure_im_ (t) Bool)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun is_empty (ty uni) Bool)

(declare-fun empty (ty) uni)

(declare-fun add (ty uni uni) uni)

(declare-fun remove (ty uni uni) uni)

(declare-fun union1 (ty uni uni) uni)

(declare-fun inter (ty uni uni) uni)

(declare-fun diff (ty uni uni) uni)

(declare-fun choose (ty uni) uni)

(declare-fun cardinal (ty uni) Int)

(declare-fun infix_mngt (ty ty) ty)

(declare-fun infix_at (ty ty uni uni) uni)

(declare-fun filter (ty uni uni) uni)

(declare-fun t2tb (Bool) uni)

(declare-fun tb2t (uni) Bool)

(declare-fun map1 (ty ty uni uni) uni)

(declare-sort tuple2 2)

(declare-fun tuple21 (ty ty) ty)

(declare-fun Tuple2 (ty ty uni uni) uni)

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

(declare-fun fir (ty ty uni) uni)

(declare-fun sec (ty ty uni) uni)

(declare-fun ref (ty) ty)

(declare-fun mk_ref (ty uni) uni)

(declare-fun contents (ty uni) uni)

(declare-fun p_injective (ty ty uni uni) Bool)

(declare-fun antec_set (ty ty uni uni uni) uni)

(declare-fun result (ty ty uni uni) uni)

(declare-fun remove_s (ty uni uni) uni)

(declare-fun result1 (ty uni) uni)

(declare-fun remove_antecs (ty ty uni uni uni) uni)

(declare-fun right_injections (ty ty uni uni) uni)

(declare-fun Tuple2_closure (ty ty) uni)

(declare-fun left_injections (ty ty uni uni) uni)

(declare-fun fc (ty ty uni) uni)

(declare-fun fc1 (ty ty uni) uni)

(declare-fun cartesian_product (ty ty uni uni) uni)

(declare-fun commute (ty ty uni) uni)

(declare-fun commute_closure (ty ty) uni)

(declare-fun commute_product (ty ty uni uni) uni)

(declare-fun commute_product_el (ty ty uni uni) uni)

(declare-fun fc2 (ty ty uni) uni)

(declare-fun to_fset (Int Int) (set Int))

(declare-fun t2tb1 ((set Int)) uni)

(declare-fun tb2t1 (uni) (set Int))

(declare-fun t2tb2 (Int) uni)

(declare-fun tb2t2 (uni) Int)

(declare-sort base_element 0)

(declare-fun base_element1 () ty)

(declare-fun Identity () base_element)

(declare-fun Hadamard () base_element)

(declare-fun Cont_R (Int) base_element)

(declare-fun Swap () base_element)

(declare-fun match_base_element (ty base_element uni uni uni uni) uni)

(declare-fun index_base_element (base_element) Int)

(declare-fun Cont_R_proj_1 (base_element) Int)

(declare-sort quantum_circuit 0)

(declare-fun quantum_circuit1 () ty)

(declare-fun Unit (base_element) quantum_circuit)

(declare-fun Sequence (quantum_circuit quantum_circuit) quantum_circuit)

(declare-fun Parallel (quantum_circuit quantum_circuit) quantum_circuit)

(declare-fun match_quantum_circuit (ty quantum_circuit uni uni uni) uni)

(declare-fun index_quantum_circuit (quantum_circuit) Int)

(declare-fun Unit_proj_1 (quantum_circuit) base_element)

(declare-fun Sequence_proj_1 (quantum_circuit) quantum_circuit)

(declare-fun Sequence_proj_2 (quantum_circuit) quantum_circuit)

(declare-fun Parallel_proj_1 (quantum_circuit) quantum_circuit)

(declare-fun Parallel_proj_2 (quantum_circuit) quantum_circuit)

(declare-fun subterms (quantum_circuit) (set quantum_circuit))

(declare-fun t2tb3 ((set quantum_circuit)) uni)

(declare-fun tb2t3 (uni) (set quantum_circuit))

(declare-fun t2tb4 (quantum_circuit) uni)

(declare-fun tb2t4 (uni) quantum_circuit)

(declare-fun depth (quantum_circuit) Int)

(declare-fun sequence_correct (quantum_circuit) Bool)

(declare-fun constant_depth (ty uni uni) Bool)

(declare-fun iter_sequence (Int Int
  (Array Int quantum_circuit)) quantum_circuit)

(declare-fun t2tb5 ((Array Int quantum_circuit)) uni)

(declare-fun tb2t5 (uni) (Array Int quantum_circuit))

(declare-fun iter_parallel (Int Int
  (Array Int quantum_circuit)) quantum_circuit)

(declare-fun set2 (ty ty uni uni uni) uni)

(declare-sort matrix 1)

(declare-fun matrix1 (ty) ty)

(declare-fun elts (ty uni) uni)

(declare-fun rows (ty uni) Int)

(declare-fun columns (ty uni) Int)

(declare-fun valid_index (ty uni Int Int) Bool)

(declare-fun equal_size (ty uni uni) Bool)

(declare-fun get (ty uni Int Int) uni)

(declare-fun make (ty Int Int uni) uni)

(declare-fun mat_indices (ty uni) (set (tuple2 Int Int)))

(declare-fun t2tb6 ((set (tuple2 Int Int))) uni)

(declare-fun tb2t6 (uni) (set (tuple2 Int Int)))

(declare-fun t2tb7 ((tuple2 Int Int)) uni)

(declare-fun tb2t7 (uni) (tuple2 Int Int))

(declare-fun set3 (ty uni Int Int uni) uni)

(declare-fun make_f (ty Int Int uni) uni)

(declare-fun to_indexes (ty uni) (set (tuple2 Int Int)))

(declare-fun op (ty uni uni) uni)

(declare-fun po (ty uni uni) uni)

(declare-fun inver (ty uni) uni)

(declare-fun op_neutral_left (ty uni uni) Bool)

(declare-fun op_neutral_right (ty uni uni) Bool)

(declare-fun op_assoc (ty uni) Bool)

(declare-fun op_neutral_left_comm (ty uni uni) Bool)

(declare-fun commut (ty uni) Bool)

(declare-fun assoc (ty uni) Bool)

(declare-fun opposite_n (ty uni uni uni) Bool)

(declare-fun inverse (ty uni uni uni) Bool)

(declare-fun opposite (ty uni uni) Bool)

(declare-fun opposite_com (ty uni uni) Bool)

(declare-fun neutral (ty uni uni) Bool)

(declare-fun has_neutral (ty uni) Bool)

(declare-fun iterates (ty uni uni) Bool)

(declare-fun iterable (ty uni) Bool)

(declare-fun neutral_elt (ty uni) uni)

(declare-fun inverse_tuple (ty uni uni uni) Bool)

(declare-fun iterate (ty ty uni uni uni) uni)

(declare-fun int_iterate (ty uni uni Int Int) uni)

(declare-fun int_int_iterate (ty uni uni Int Int Int Int) uni)

(declare-fun identity (ty) uni)

(declare-fun element (ty uni) uni)

(declare-fun p_injective_in (ty ty uni uni uni) Bool)

(declare-fun equal_func (ty ty uni uni) Bool)

(declare-fun p_surjective (ty ty uni uni uni) Bool)

(declare-fun p_bijective (ty ty uni uni uni) Bool)

(declare-fun fc3 (ty ty ty uni uni) uni)

(declare-fun po_closure (ty) uni)

(declare-fun fc4 (ty ty uni uni uni) uni)

(declare-fun fc5 (ty ty uni uni uni) uni)

(declare-fun fc6 (ty ty ty uni uni) uni)

(declare-fun fc7 (ty ty ty uni) uni)

(declare-fun fc8 (ty ty ty uni uni uni) uni)

(declare-fun fc9 (ty ty ty uni) uni)

(declare-fun fc10 (ty uni uni uni) uni)

(declare-fun fc11 (ty ty uni uni) uni)

(declare-fun fc12 (ty ty uni uni) uni)

(declare-fun fc13 (ty uni Int Int) uni)

(declare-fun fc14 (ty (Array Int Int) uni) uni)

(declare-fun t2tb8 ((Array Int Int)) uni)

(declare-fun tb2t8 (uni) (Array Int Int))

(declare-fun fc15 (ty uni Int) uni)

(declare-fun fc16 (ty (Array Int Int) uni) uni)

(declare-fun nonn_part (ty ty uni uni uni) uni)

(declare-fun result2 (ty ty uni uni) uni)

(declare-fun n_part (ty ty uni uni uni) uni)

(declare-fun result3 (ty ty uni uni) uni)

(declare-fun couple (ty ty ty uni uni) uni)

(declare-fun infix_pldt_closure () (Array t (Array t t)))

(declare-fun t2tb9 (t) uni)

(declare-fun tb2t9 (uni) t)

(declare-fun t2tb10 ((Array t (Array t t))) uni)

(declare-fun tb2t10 (uni) (Array t (Array t t)))

(declare-fun t2tb11 ((Array t t)) uni)

(declare-fun tb2t11 (uni) (Array t t))

(declare-fun sum (ty uni uni) t)

(declare-fun fc17 (ty ty uni uni) uni)

(declare-fun fc18 (ty uni uni) uni)

(declare-fun infix_mndt_closure () (Array t (Array t t)))

(declare-fun fc19 (ty ty uni uni) uni)

(declare-fun fc20 (ty ty uni) uni)

(declare-fun fc21 (ty ty uni) uni)

(declare-fun fc22 (ty ty uni uni) uni)

(declare-fun ind_sum ((Array Int t) Int Int) t)

(declare-fun t2tb12 ((Array Int t)) uni)

(declare-fun tb2t12 (uni) (Array Int t))

(declare-fun fc23 ((Array Int t) t Int Int) (Array Int t))

(declare-fun fc24 ((Array Int t) t Int Int) (Array Int t))

(declare-fun fc25 ((Array Int t) (Array Int t)) (Array Int t))

(declare-fun fc26 ((Array Int Int) (Array Int t)) (Array Int t))

(declare-fun fc27 (ty uni t) uni)

(declare-fun fc28 ((Array Int t) t) (Array Int t))

(declare-fun fc29 ((Array Int t) t) (Array Int t))

(declare-fun fc30 ((Array Int t) t) (Array Int t))

(declare-fun fc31 ((Array Int t) t) (Array Int t))

(declare-fun fc32 (ty uni uni Int Int) uni)

(declare-fun fc33 (ty uni uni Int Int) uni)

(declare-fun fc34 (ty uni) uni)

(declare-fun fc35 (ty ty ty uni) uni)

(declare-fun fc36 (ty ty ty uni) uni)

(declare-fun fc37 (ty uni) uni)

(declare-fun fc38 (ty uni uni Int Int) uni)

(declare-fun fc39 (ty uni Int) uni)

(declare-fun fc40 (ty uni uni Int Int) uni)

(declare-fun fc41 ((Array Int (Array Int t)) Int Int) (Array Int t))

(declare-fun fc42 ((Array Int (Array Int t)) Int) (Array Int t))

(declare-fun fc43 ((Array Int (Array Int t)) Int Int) (Array Int t))

(declare-fun t2tb13 ((Array Int (Array Int t))) uni)

(declare-fun tb2t13 (uni) (Array Int (Array Int t)))

(declare-fun non_tzero (ty uni uni) uni)

(declare-fun fc44 (ty uni uni) uni)

(declare-fun fc45 (ty uni uni) uni)

(declare-fun fc46 (ty uni uni) uni)

(declare-fun fc47 (ty uni uni) uni)

(declare-fun infix_asdt_closure () (Array t (Array t t)))

(declare-fun product (ty uni uni) t)

(declare-fun ind_product ((Array Int t) Int Int) t)

(declare-fun fc48 (ty ty uni uni) uni)

(declare-fun fc49 ((Array Int Int) (Array Int t)) (Array Int t))

(declare-fun t2tb14 ((set t)) uni)

(declare-fun tb2t14 (uni) (set t))

(declare-fun nonn_part1 (ty ty uni uni uni) uni)

(declare-fun result4 (ty ty uni uni) uni)

(declare-fun n_part1 (ty ty uni uni uni) uni)

(declare-fun result5 (ty ty uni uni) uni)

(declare-fun indic (ty uni uni) t)

(declare-fun indic_bool (ty uni uni) Bool)

(declare-fun indic_2 (ty ty uni uni uni uni) t)

(declare-fun sum_indic (ty uni uni uni) t)

(declare-fun result6 (ty uni uni) uni)

(declare-fun ind_sum_indic ((Array Int t) Int Int Int) t)

(declare-fun result7 ((Array Int t) Int) (Array Int t))

(declare-fun fc50 (ty uni uni) uni)

(declare-fun fc51 ((Array Int t) Int) (Array Int t))

(declare-fun fc52 ((Array Int t) Int) (Array Int t))

(declare-fun abs1 (Int) Int)

(declare-fun antisym (ty uni) Bool)

(declare-fun transitive (ty uni) Bool)

(declare-fun reflexive (ty uni) Bool)

(declare-fun pre_order (ty uni) Bool)

(declare-fun partial_order (ty uni) Bool)

(declare-fun recip (ty uni uni) Bool)

(declare-fun strict (ty uni uni) Bool)

(declare-fun compat_order_mult (ty uni uni uni) Bool)

(declare-fun infix_pl_closure () (Array Int (Array Int Int)))

(declare-fun infix_as_closure () (Array Int (Array Int Int)))

(declare-fun t2tb15 ((Array Int (Array Int Int))) uni)

(declare-fun tb2t15 (uni) (Array Int (Array Int Int)))

(declare-fun isum (ty uni uni) Int)

(declare-fun infix_mn_closure () (Array Int (Array Int Int)))

(declare-fun ind_isum ((Array Int Int) Int Int) Int)

(declare-fun fc53 () (Array Int (Array Int Int)))

(declare-fun fc54 ((Array Int Int) (Array Int Int)
  (Array Int Bool)) (Array Int Int))

(declare-fun t2tb16 ((Array Int Bool)) uni)

(declare-fun tb2t16 (uni) (Array Int Bool))

(declare-fun fc55 ((Array Int Int) (Array Int Int)
  (Array Int Bool)) (Array Int Int))

(declare-fun ind_iproduct ((Array Int Int) Int Int) Int)

(declare-fun fc56 ((Array Int Int) (Array Int Int)) (Array Int Int))

(declare-fun fc57 ((Array Int Int) (Array Int Int)) (Array Int Int))

(declare-fun fc58 ((Array Int Int) (Array Int Int)) (Array Int Int))

(declare-fun fc59 ((Array Int Int) (Array Int Int)) (Array Int Int))

(declare-fun fc60 ((Array Int Int) Int Int) (Array Int Int))

(declare-fun fc61 ((Array Int Int) (Array Int Int)) (Array Int Int))

(declare-fun fc62 ((Array Int Int) (Array Int Int)) (Array Int Int))

(declare-fun fc63 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc64 ((Array Int Int)) (Array Int Int))

(declare-fun fc65 ((Array Int Int)) (Array Int Int))

(declare-fun fc66 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc67 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc68 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc69 ((Array Int Int) Int) (Array Int Int))

(declare-fun fc70 ((Array Int Int) Int) (Array Int Int))

(declare-fun power (Int Int) Int)

(declare-fun fc71 () (Array Int (Array Int Int)))

(declare-fun fc72 () (Array Int (Array Int Int)))

(declare-fun fc73 () (Array Int (Array Int Int)))

(declare-fun fc74 () (Array Int (Array Int Int)))

(declare-fun fc75 () (Array Int Int))

(declare-fun fc76 (Int) (Array Int Int))

(declare-fun power_closure () (Array Int (Array Int Int)))

(declare-fun fc77 () (Array Int Int))

(declare-fun kth_right (Int Int Int (Array Int Int)) Int)

(declare-fun kth_left (Int Int Int Int (Array Int Int)) Int)

(declare-fun divp (Int Int) Int)

(declare-fun weighted_kth_right (Int Int Int (Array Int Int)) Int)

(declare-fun fc78 (Int Int (Array Int Int)) (Array Int Int))

(declare-fun weighted_kth_left (Int Int Int Int (Array Int Int)) Int)

(declare-fun fc79 (Int Int Int (Array Int Int)) (Array Int Int))

(declare-fun fc80 (Int Int Int (Array Int Int)) (Array Int Int))

(declare-fun kth_nit_r (Int Int Int) Int)

(declare-fun fc81 () (Array Int (Array Int Int)))

(declare-fun fc82 () (Array Int (Array Int Int)))

(declare-fun kth_nit_l (Int Int Int Int) Int)

(declare-fun fc83 () (Array Int (Array Int Int)))

(declare-fun fc84 () (Array Int (Array Int Int)))

(declare-fun weighted_kth_nit_r (Int Int Int) Int)

(declare-fun fc85 () (Array Int (Array Int Int)))

(declare-fun nary_length (Int Int) Int)

(declare-fun weighted_kth_nit_l (Int Int Int Int) Int)

(declare-fun fc86 () (Array Int (Array Int Int)))

(declare-fun weighted_kth_left1 (Int Int Int Int (Array Int Int)) Int)

(declare-fun fc87 (Int Int) (Array Int Int))

(declare-fun fc88 (Int Int) (Array Int Int))

(declare-fun fc89 (Int Int) (Array Int Int))

(declare-fun fc90 (Int Int) (Array Int Int))

(declare-fun fc91 (Int Int Int) (Array Int Int))

(declare-fun fc92 (Int Int Int) (Array Int Int))

(declare-fun is_nary ((Array Int Int) Int Int Int) Bool)

(declare-fun fc93 (Int Int) (Array Int Int))

(declare-fun equal (ty uni uni) Bool)

(declare-fun square (ty uni) Bool)

(declare-fun equal_funct (ty uni uni) Bool)

(declare-fun null_mat ((matrix t)) Bool)

(declare-fun t2tb17 ((matrix t)) uni)

(declare-fun tb2t17 (uni) (matrix t))

(declare-fun kronecker_neutral () (matrix t))

(declare-fun kronecker ((matrix t) (matrix t)) (matrix t))

(declare-fun result8 ((matrix t) (matrix t)) (Array Int (Array Int t)))

(declare-fun fc94 ((matrix t) (matrix t)) (Array Int (Array Int t)))

(declare-fun kronecker_closure () (Array (matrix t) (Array (matrix t) (matrix t))))

(declare-fun t2tb18 ((Array (matrix t) (Array (matrix t) (matrix t)))) uni)

(declare-fun tb2t18 (uni) (Array (matrix t) (Array (matrix t) (matrix t))))

(declare-fun t2tb19 ((Array (matrix t) (matrix t))) uni)

(declare-fun tb2t19 (uni) (Array (matrix t) (matrix t)))

(declare-fun frows ((Array Int (matrix t)) Int) Int)

(declare-fun t2tb20 ((Array Int (matrix t))) uni)

(declare-fun tb2t20 (uni) (Array Int (matrix t)))

(declare-fun fcolumns ((Array Int (matrix t)) Int) Int)

(declare-fun fc95 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun t2tb21 ((Array (matrix t) (Array Int (matrix t)))) uni)

(declare-fun tb2t21 (uni) (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc96 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun k_iter ((Array Int (matrix t)) Int Int) (matrix t))

(declare-fun frows_closure () (Array (Array Int (matrix t)) (Array Int Int)))

(declare-fun fcolumns_closure () (Array (Array Int (matrix t)) (Array Int Int)))

(declare-fun t2tb22 ((Array (Array Int (matrix t)) (Array Int Int))) uni)

(declare-fun tb2t22 (uni) (Array (Array Int (matrix t)) (Array Int Int)))

(declare-fun kproj ((Array Int (matrix t)) Int Int Int Int Int) t)

(declare-fun fc97 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc98 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc99 ((matrix t) Int Int Int Int) (Array Int t))

(declare-fun fc100 ((matrix t) Int Int Int Int) (Array Int t))

(declare-fun kproj_kth_right ((Array Int (matrix t)) Int Int Int Int
  Int) tuple0)

(declare-fun fc101 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc102 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc103 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc104 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc105 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc106 ((Array Int (matrix t)) Int Int Int Int) (Array Int t))

(declare-fun fc107 ((Array Int (matrix t)) Int Int Int Int) (Array Int t))

(declare-fun fc108 ((Array Int (matrix t)) Int Int Int Int) (Array Int t))

(declare-fun pow ((matrix t) Int) (matrix t))

(declare-fun fc109 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc110 () (Array (matrix t) (Array Int (matrix t))))

(declare-fun fc111 ((matrix t) Int Int Int) (Array Int t))

(declare-fun kth_bit_r (Int Int) Int)

(declare-fun kth_bit_l (Int Int Int) Int)

(declare-fun fc112 () (Array Int (Array Int Int)))

(declare-fun head_bit (Int Int) Int)

(declare-fun tail_bits (Int Int) Int)

(declare-fun ht_to_int (Int Int Int) Int)

(declare-fun kth_weigh (Int Int) Int)

(declare-fun binary_length (Int) Int)

(declare-fun fc113 (Int) (Array Int Int))

(declare-fun fc114 (Int Int) (Array Int Int))

(declare-fun fc115 (Int Int) (Array Int Int))

(declare-fun fc116 (Int Int) (Array Int Int))

(declare-fun fc117 (Int Int) (Array Int Int))

(declare-fun fc118 (Int Int) (Array Int Int))

(declare-fun fc119 (Int Int) (Array Int Int))

(declare-fun fc120 (Int Int) (Array Int Int))

(declare-fun fc121 (Int Int) (Array Int Int))

(declare-fun is_binary ((Array Int Int) Int Int) Bool)

(declare-fun is_all_binary ((Array Int Int)) Bool)

(declare-fun kth_bit_r_closure () (Array Int (Array Int Int)))

(declare-fun mat_mult_no_bound ((matrix t) (matrix t)) (matrix t))

(declare-fun result9 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun result10 ((matrix t) (matrix t)) (Array Int (Array Int t)))

(declare-fun result11 () (Array Int (Array Int t)))

(declare-fun fc122 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun mat_mult ((matrix t) (matrix t)) (matrix t))

(declare-fun fc123 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun fc124 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun fc125 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun int_mat_prod ((Array Int (matrix t)) Int Int) (matrix t))

(declare-fun int_mat_prod_plus_one ((Array Int (matrix t)) Int Int) tuple0)

(declare-fun diag_mat (Int (Array Int t)) (matrix t))

(declare-fun result12 ((Array Int t)) (Array Int (Array Int t)))

(declare-fun fc126 ((matrix t) (Array Int t)) (Array Int (Array Int t)))

(declare-fun fc127 ((matrix t) (Array Int t)) (Array Int (Array Int t)))

(declare-fun fc128 ((Array Int t) (Array Int t)) (Array Int t))

(declare-fun fc129 ((Array Int (Array Int t)) Int) (Array Int t))

(declare-fun fc130 ((Array Int (Array Int t)) Int) (Array Int t))

(declare-fun fc131 ((Array Int (Array Int t)) Int) (Array Int (matrix t)))

(declare-fun fc132 ((Array Int (Array Int t)) Int) (Array Int t))

(declare-fun fc133 ((Array Int (Array Int t)) Int Int) (Array Int t))

(declare-fun diag_two_mat (Int
  (Array Int (Array Int (Array Int t)))) (matrix t))

(declare-fun result13 (Int
  (Array Int (Array Int (Array Int t)))) (Array Int (Array Int t)))

(declare-fun t2tb23 ((Array Int (Array Int (Array Int t)))) uni)

(declare-fun tb2t23 (uni) (Array Int (Array Int (Array Int t))))

(declare-fun fc134 (Int
  (Array Int (Array Int (Array Int t)))) (Array Int (Array Int t)))

(declare-fun two_bloc_diag_mat (Int
  (Array Int (Array Int (Array Int t)))) (matrix t))

(declare-fun result14 (Int
  (Array Int (Array Int (Array Int t)))) (Array Int (Array Int t)))

(declare-fun fc135 (Int
  (Array Int (Array Int (Array Int t)))) (Array Int (Array Int t)))

(declare-fun fc136 (Int (Array Int (Array Int (Array Int t)))
  (Array Int (Array Int (Array Int t)))) (Array Int (Array Int t)))

(declare-fun fc137 (Int (Array Int (Array Int (Array Int t)))
  (Array Int t)) (Array Int (Array Int (Array Int t))))

(declare-fun qbit_id () (matrix t))

(declare-fun indic_closure (ty) uni)

(declare-fun identity1 (Int) (matrix t))

(declare-fun fc138 () (Array t (Array Int t)))

(declare-fun t2tb24 ((Array t (Array Int t))) uni)

(declare-fun tb2t24 (uni) (Array t (Array Int t)))

(declare-fun add_mat ((matrix t) (matrix t)) (matrix t))

(declare-fun result15 ((matrix t) (matrix t)) (Array Int (Array Int t)))

(declare-fun add_neutral (tuple0) (matrix t))

(declare-fun infix_asdtdt (t (matrix t)) (matrix t))

(declare-fun result16 (t (matrix t)) (Array Int (Array Int t)))

(declare-fun fc139 ((matrix t) (matrix t) t Int Int) (Array Int t))

(declare-fun fc140 ((matrix t) (matrix t) t Int Int) (Array Int t))

(declare-fun fc141 ((Array Int (Array Int t)) (Array Int t) Int
  Int) (Array Int t))

(declare-fun fc142 ((Array Int (Array Int t)) (Array Int t)
  Int) (Array Int t))

(declare-fun fc143 ((Array Int (Array Int t)) (Array Int t) Int
  Int) (Array Int t))

(declare-fun constant_size (ty uni uni) Bool)

(declare-fun fc144 (ty uni uni (matrix t)) uni)

(declare-fun fc145 (ty uni (matrix t) Int Int) uni)

(declare-fun s_rows (ty uni uni) Int)

(declare-fun s_columns (ty uni uni) Int)

(declare-fun mat_sum (ty uni uni) (matrix t))

(declare-fun fc146 (ty uni Int Int) uni)

(declare-fun fc147 (ty uni Int Int) uni)

(declare-fun fc148 (ty uni uni) (Array Int (Array Int t)))

(declare-fun fc149 (ty uni uni) uni)

(declare-fun fc150 (ty uni uni) uni)

(declare-fun fc151 (ty uni uni) uni)

(declare-fun fc152 (ty ty uni uni Int Int) uni)

(declare-fun fc153 (ty ty uni Int Int uni) uni)

(declare-fun fc154 (ty ty uni uni Int Int) uni)

(declare-fun fc155 (ty ty uni uni) uni)

(declare-fun fc156 (ty ty uni Int Int uni) uni)

(declare-fun fc157 (ty ty uni uni Int Int) uni)

(declare-fun mat_sum_dim (ty uni uni Int Int) (matrix t))

(declare-fun fc158 (ty uni t) uni)

(declare-fun fc159 (ty uni t) uni)

(declare-fun fc160 (ty uni (matrix t) Int Int) uni)

(declare-fun fc161 (ty ty uni uni) uni)

(declare-fun fc162 (ty ty uni uni) uni)

(declare-fun fc163 (ty ty uni uni) uni)

(declare-fun fc164 (ty ty uni uni) uni)

(declare-fun fc165 (ty ty uni uni) uni)

(declare-fun t2tb25 ((set (matrix t))) uni)

(declare-fun tb2t25 (uni) (set (matrix t)))

(declare-fun nonn_mat_subset (ty uni uni) uni)

(declare-fun result17 (ty uni uni) uni)

(declare-fun fc166 (ty ty uni uni) uni)

(declare-fun fc167 (ty ty uni uni) uni)

(declare-fun fc168 (ty ty uni uni uni) uni)

(declare-fun fc169 (ty uni uni) uni)

(declare-fun inv_func (ty ty uni uni uni uni) uni)

(declare-fun result18 (ty ty uni uni) uni)

(declare-fun inv_ (ty ty uni uni uni uni) uni)

(declare-fun inv__closure (ty ty) uni)

(declare-fun inv_f (ty ty uni uni uni) uni)

(declare-sort bitvec 0)

(declare-fun bitvec1 () ty)

(declare-fun value (bitvec) (Array Int Int))

(declare-fun length (bitvec) Int)

(declare-fun bvlength ((Array Int Int) Int) Bool)

(declare-fun getbv (bitvec Int) Int)

(declare-fun setbv ((Array Int Int) Int Int) (Array Int Int))

(declare-fun setbv_int ((Array Int Int) (Array Int Int) Int
  Int) (Array Int Int))

(declare-fun getbv_closure () (Array bitvec (Array Int Int)))

(declare-fun t2tb26 ((Array bitvec (Array Int Int))) uni)

(declare-fun tb2t26 (uni) (Array bitvec (Array Int Int)))

(declare-fun t2tb27 (bitvec) uni)

(declare-fun tb2t27 (uni) bitvec)

(declare-fun in_range (bitvec Int) Bool)

(declare-fun make_bv ((Array Int Int) Int) bitvec)

(declare-fun make_bv_m ((Array Int Int) Int) bitvec)

(declare-fun result19 ((Array Int Int)) (Array Int Int))

(declare-fun head (bitvec) Int)

(declare-fun tail (bitvec) bitvec)

(declare-fun result20 (bitvec) (Array Int Int))

(declare-fun concat_l (bitvec Int) bitvec)

(declare-fun result21 (bitvec Int) (Array Int Int))

(declare-fun bv_to_int (bitvec) Int)

(declare-fun result22 (bitvec) (Array Int Int))

(declare-fun fc170 (bitvec) (Array Int Int))

(declare-fun fc171 (bitvec) (Array Int Int))

(declare-fun fc172 (bitvec) (Array Int Int))

(declare-fun fc173 (bitvec) (Array Int Int))

(declare-fun fc174 (bitvec) (Array Int Int))

(declare-fun fc175 (bitvec) (Array Int Int))

(declare-fun fc176 (bitvec) (Array Int Int))

(declare-fun i_to_t (Int) t)

(declare-fun infix_lseqdt_closure () (Array t (Array t Bool)))

(declare-fun t2tb28 ((Array t (Array t Bool))) uni)

(declare-fun tb2t28 (uni) (Array t (Array t Bool)))

(declare-fun t2tb29 ((Array t Bool)) uni)

(declare-fun tb2t29 (uni) (Array t Bool))

(declare-fun infix_lsdt_closure () (Array t (Array t Bool)))

(declare-fun cpower (t Int) t)

(declare-fun fc177 () (Array t (Array Int t)))

(declare-fun exp (t) t)

(declare-fun pi1 () t)

(declare-fun unity_rt (Int) t)

(declare-fun p_unity (Int Int) t)

(declare-fun exp_p_unity (Int Int) tuple0)

(declare-fun omega (Int) t)

(declare-fun p_omega (Int Int) t)

(declare-fun fc178 (ty Int uni) uni)

(declare-fun fc179 (Int (Array Int Int) Int Int) (Array Int t))

(declare-fun odd (Int) Bool)

(declare-fun even (Int) Bool)

(declare-fun squarert_two () t)

(declare-fun mop (Int) t)

(declare-fun pow_inv_sqrt_2 (Int) t)

(declare-fun neg_pow_inv_sqrt_2 (Int) t)

(declare-fun pow_inv_sqrt_2_neg (Int) t)

(declare-fun fc180 (bitvec) (Array Int Int))

(declare-fun fc181 (bitvec) (Array Int Int))

(declare-fun fc182 (bitvec) (Array Int Int))

(declare-fun fc183 (bitvec Int) (Array Int Int))

(declare-fun fc184 (bitvec) (Array Int Int))

(declare-fun int_to_bv (Int Int) bitvec)

(declare-fun result23 (Int Int) (Array Int Int))

(declare-fun kth_bit_l_closure () (Array Int (Array Int (Array Int Int))))

(declare-fun fc185 (Int Int) (Array Int Int))

(declare-fun t2tb30 ((Array Int (Array Int (Array Int Int)))) uni)

(declare-fun tb2t30 (uni) (Array Int (Array Int (Array Int Int))))

(declare-fun int_to_sum (Int Int) tuple0)

(declare-fun fc186 (Int Int) (Array Int Int))

(declare-fun fc187 (bitvec) (Array Int Int))

(declare-fun fc188 (Int Int) (Array Int Int))

(declare-fun fc189 (bitvec) (Array Int Int))

(declare-fun fc190 (bitvec) (Array Int Int))

(declare-fun fc191 (bitvec) (Array Int Int))

(declare-fun n_bvs (Int) (set bitvec))

(declare-fun result24 () (Array Int Int))

(declare-fun result25 () (Array bitvec bitvec))

(declare-fun result26 () (Array bitvec bitvec))

(declare-fun t2tb31 ((Array bitvec bitvec)) uni)

(declare-fun tb2t31 (uni) (Array bitvec bitvec))

(declare-fun t2tb32 ((set bitvec)) uni)

(declare-fun tb2t32 (uni) (set bitvec))

(declare-fun fc192 () (Array bitvec bitvec))

(declare-fun fc193 () (Array bitvec bitvec))

(declare-fun bv_to_int_closure () (Array bitvec Int))

(declare-fun t2tb33 ((Array bitvec Int)) uni)

(declare-fun tb2t33 (uni) (Array bitvec Int))

(declare-fun first_div (bitvec bitvec) Int)

(declare-fun fc194 (Int) (Array bitvec bitvec))

(declare-fun fc195 (bitvec) (Array Int Int))

(declare-fun fc196 (bitvec) (Array Int Int))

(declare-fun fc197 (Int Int Int) (Array Int t))

(declare-fun fc198 (Int Int Int) (Array Int t))

(declare-fun fc199 (bitvec) (Array Int Int))

(declare-fun fc200 (bitvec) (Array Int Int))

(declare-fun fc201 (bitvec) (Array Int Int))

(declare-fun fc202 (bitvec) (Array Int Int))

(declare-fun bin_and (Int Int) Int)

(declare-fun bin_andv (bitvec bitvec) bitvec)

(declare-fun result27 (bitvec bitvec) (Array Int Int))

(declare-fun fc203 (bitvec bitvec) (Array Int Int))

(declare-fun int_bin_and_seq (Int Int Int) bitvec)

(declare-fun popcount ((Array Int Int) Int Int) Int)

(declare-fun hadamard () (matrix t))

(declare-fun fc204 () (Array Int (Array Int t)))

(declare-fun fc205 (Int Int Int) (Array Int t))

(declare-fun fc206 (Int Int Int) (Array Int t))

(declare-fun fc207 (Int Int Int) (Array Int t))

(declare-fun fc208 (bitvec bitvec) (Array Int t))

(declare-fun fc209 (bitvec bitvec t) (Array Int t))

(declare-fun fc210 (Int Int Int) (Array Int t))

(declare-fun bv_inversion (bitvec) bitvec)

(declare-fun result28 (bitvec) (Array Int Int))

(declare-fun int_bit_inversion (Int Int) Int)

(declare-fun fc211 (bitvec) (Array Int Int))

(declare-fun fc212 (bitvec) (Array Int Int))

(declare-fun fc213 (Int Int) (Array Int Int))

(declare-fun fc214 (bitvec) (Array Int Int))

(declare-fun fc215 (bitvec) (Array Int Int))

(declare-fun fc216 (Int Int) (Array Int Int))

(declare-fun fc217 ((Array Int Int) Int) (Array Int Int))

(declare-fun qqft (Int) (matrix t))

(declare-fun result29 (Int) (Array Int (Array Int t)))

(declare-fun fc218 (Int) (Array Int (Array Int t)))

(declare-fun id_qqft (Int) (matrix t))

(declare-fun fc219 (Int) (Array Int (Array Int t)))

(declare-fun fc220 (Int) (Array Int (Array Int (Array Int t))))

(declare-fun fc221 (Int) (Array Int (Array Int (Array Int t))))

(declare-fun cont_R (Int Int Int) (matrix t))

(declare-fun result30 (Int Int Int) (Array Int t))

(declare-fun fc222 (Int Int Int) (Array Int t))

(declare-fun fc223 (Int Int Int) (Array Int t))

(declare-fun ctrlR (Int Int) (matrix t))

(declare-fun fc224 (Int Int) (Array Int t))

(declare-fun fc225 (Int Int) (Array Int t))

(declare-fun casCtrlR (Int) (matrix t))

(declare-fun result31 (Int) (Array Int (matrix t)))

(declare-fun fc226 (Int Int) (Array Int t))

(declare-fun fc227 (Int) (Array Int t))

(declare-fun fc228 (Int Int) (Array Int t))

(declare-fun fc229 (Int) (Array Int t))

(declare-fun fc230 (Int) (Array Int t))

(declare-fun id_qqft_cas (Int) (matrix t))

(declare-fun fc231 (Int) (Array Int (Array Int (Array Int t))))

(declare-fun had_identity (Int) (matrix t))

(declare-fun fc232 (Int) (Array Int (Array Int t)))

(declare-fun fc233 (Int) (Array Int (Array Int (Array Int t))))

(declare-fun fc234 (Int) (Array Int (Array Int t)))

(declare-fun fc235 (Int) (Array Int (Array Int t)))

(declare-fun qqft_mat (Int) (matrix t))

(declare-fun comp_func (ty uni uni) uni)

(declare-fun comp_func_closure (ty) uni)

(declare-fun iter_comp (ty uni Int Int) uni)

(declare-fun fc236 (ty uni Int) uni)

(declare-fun fc237 (ty uni) uni)

(declare-fun swap_plus_one (Int Int) Int)

(declare-fun swap_plus_one_closure () (Array Int (Array Int Int)))

(declare-fun set_exchange_growing (Int Int) (Array Int Int))

(declare-fun fc238 (Int) (Array Int (Array Int Int)))

(declare-fun set_exchange_decreasing (Int Int) (Array Int Int))

(declare-fun is_a_permutation ((set Int) (Array Int Int)) Bool)

(declare-fun exchange_growing (Int Int) (Array Int Int))

(declare-fun exchange (Int Int) (Array Int Int))

(declare-fun reverse ((set Int) (Array Int Int)) (Array Int Int))

(declare-fun permut_equal ((set Int) (Array Int Int) (Array Int Int)) Bool)

(declare-fun permut_reverse ((set Int) (Array Int Int) (Array Int Int)) Bool)

(declare-fun permut_reverse_step (Int (Array Int Int) Int) (Array Int Int))

(declare-fun result32 (Int (Array Int Int) Int) (Array Int (Array Int Int)))

(declare-fun permut_reverse_iter (Int (Array Int Int) Int) (Array Int Int))

(declare-fun fc239 (Int (Array Int Int) Int) (Array Int (Array Int Int)))

(declare-fun fc240 (Int (Array Int Int) Int) (Array Int (Array Int Int)))

(declare-fun swap () (matrix t))

(declare-fun fc241 () (Array Int (Array Int t)))

(declare-fun isa_square ((matrix t)) Bool)

(declare-fun pow2dim ((matrix t)) Bool)

(declare-fun pow2dim_square ((matrix t)) Bool)

(declare-fun lnr ((matrix t)) Int)

(declare-fun lnc ((matrix t)) Int)

(declare-fun mat_size ((matrix t)) Int)

(declare-fun ln_size ((matrix t)) Int)

(declare-fun is_a_q_bra ((matrix t)) Bool)

(declare-fun is_a_ket ((matrix t)) Bool)

(declare-fun bra_to_ket ((matrix t)) (matrix t))

(declare-fun ket_to_bra ((matrix t)) (matrix t))

(declare-fun bra_length ((matrix t)) Int)

(declare-fun ket_length ((matrix t)) Int)

(declare-fun is_a_q_bra_qbit ((matrix t)) Bool)

(declare-fun is_a_ket_qbit ((matrix t)) Bool)

(declare-fun mat_k_id ((matrix t) Int) (matrix t))

(declare-fun fc242 ((matrix t) Int) (Array Int (Array Int t)))

(declare-fun id_k_mat ((matrix t) Int) (matrix t))

(declare-fun fc243 ((matrix t)) (Array Int (Array Int t)))

(declare-fun mat_prod_k_id ((matrix t) (matrix t) Int) (matrix t))

(declare-fun fc244 ((matrix t) (matrix t) Int Int Int) (Array Int t))

(declare-fun fc245 ((matrix t) (matrix t) Int) (Array Int (Array Int t)))

(declare-fun id_k_mat_prod ((matrix t) (matrix t) Int) (matrix t))

(declare-fun fc246 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun fc247 ((matrix t) (matrix t)) (Array Int (Array Int t)))

(declare-fun fc248 (Int Int (Array Int t)) (Array Int t))

(declare-fun fc249 (Int Int (Array Int t)) (Array Int t))

(declare-fun fc250 (Int Int (Array Int t)) (Array Int t))

(declare-fun fc251 (Int Int (Array Int t)) (Array Int t))

(declare-fun fc252 ((matrix t) (matrix t) Int Int Int) (Array Int t))

(declare-fun prod_mat_k_id ((matrix t) (matrix t) Int) (matrix t))

(declare-fun fc253 ((matrix t) (matrix t) Int Int Int) (Array Int t))

(declare-fun fc254 ((matrix t) (matrix t) Int) (Array Int (Array Int t)))

(declare-fun fc255 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun k_id_prod_mat ((matrix t) (matrix t) Int) (matrix t))

(declare-fun fc256 ((matrix t) (matrix t) Int Int) (Array Int t))

(declare-fun fc257 ((matrix t) (matrix t)) (Array Int (Array Int t)))

(assert
;; h
  (not false))
(push)
(check-sat)
(get-model)
;; swap_def
  (assert (= swap (tb2t17 (make_f t1 4 4 (t2tb13 fc241)))))

;; qqft_one
  (assert (= (qqft 1) hadamard))

;; hadamard_def
  (assert (= hadamard (tb2t17 (make_f t1 2 2 (t2tb13 fc204)))))

;; coeffs
  (assert
  (= (infix_sldt (prefix_mndt tone) squarert_two) (prefix_mndt
                                                  (infix_sldt tone
                                                  squarert_two))))

;; squarertTwo
  (assert (= (cpower squarert_two 2) (infix_pldt tone tone)))

;; unity_rt_two
  (assert (= (unity_rt 2) (prefix_mndt tone)))

;; exp_two_pi
  (assert
  (= (exp (infix_asdt (infix_asdt im pi1) (infix_pldt tone tone))) tone))

;; exp_pi
  (assert (= (exp (infix_asdt im pi1)) (prefix_mndt tone)))

;; Exp_h_pi
  (assert
  (= (exp (infix_sldt (infix_asdt im pi1) (infix_pldt tone tone))) im))

;; exp_one
  (assert (real_ (exp tone)))

;; Exp_zero
  (assert (= (exp tzero) tone))

;; Exp_one
  (assert (real_ (exp tone)))

;; pre_cond_int
  (assert
  (and (compat_order_mult t1 (t2tb28 infix_lsdt_closure)
  (t2tb10 infix_asdt_closure) (t2tb9 tzero))
  (and (compat_order_mult t1 (t2tb28 infix_lseqdt_closure)
  (t2tb10 infix_asdt_closure) (t2tb9 tzero))
  (and (infix_lsdt tzero tone)
  (and (partial_order t1 (t2tb28 infix_lseqdt_closure))
  (and (neutral t1 (t2tb10 infix_asdt_closure) (t2tb9 tone))
  (and (iterable t1 (t2tb10 infix_asdt_closure)) (strict t1
  (t2tb28 infix_lsdt_closure) (t2tb28 infix_lseqdt_closure)))))))))

;; reflexive_infeq_t
  (assert
  (and (forall ((a t)) (infix_lseqdt a a)) (reflexive t1
  (t2tb28 infix_lseqdt_closure))))

;; transitive_inf_t
  (assert
  (and
  (forall ((a t) (b t) (c t))
  (=> (infix_lsdt a b) (=> (infix_lsdt b c) (infix_lsdt a c)))) (transitive
  t1 (t2tb28 infix_lsdt_closure))))

;; transitive_infeq_t
  (assert
  (and
  (forall ((a t) (b t) (c t))
  (=> (infix_lseqdt a b) (=> (infix_lseqdt b c) (infix_lseqdt a c))))
  (transitive t1 (t2tb28 infix_lseqdt_closure))))

;; antisym_infeq_t
  (assert
  (and
  (forall ((a t) (b t))
  (=> (infix_lseqdt a b) (=> (infix_lseqdt b a) (= a b)))) (antisym t1
  (t2tb28 infix_lseqdt_closure))))

;; i_to_t_one
  (assert (= (i_to_t 1) tone))

;; i_to_t_zero
  (assert (= (i_to_t 0) tzero))

;; ttwo_dec
  (assert
  (and (= (real_part (infix_pldt tone tone)) 2.0)
  (= (im_part (infix_pldt tone tone)) 0.0)))

;; tzero_dec
  (assert (and (= (real_part tzero) 0.0) (= (im_part tzero) 0.0)))

;; tone_dec
  (assert (and (= (real_part tone) 1.0) (= (im_part tone) 0.0)))

;; im_dec
  (assert (and (= (real_part im) 0.0) (= (im_part im) 1.0)))

;; ident_atom
  (assert (= qbit_id (tb2t17 (make_f t1 2 2 (indic_closure int)))))

;; lambda_int_seq_comm
  (assert true)

;; lambda_int_seq
  (assert true)

;; iterable_kronecker
  (assert (iterable (matrix1 t1) (t2tb18 kronecker_closure)))

;; neutral
  (assert
  (and
  (= kronecker_neutral (tb2t17
                       (neutral_elt (matrix1 t1) (t2tb18 kronecker_closure))))
  (and (has_neutral (matrix1 t1) (t2tb18 kronecker_closure)) (iterable
  (matrix1 t1) (t2tb18 kronecker_closure)))))

;; kronecker_assoc
  (assert (op_assoc (matrix1 t1) (t2tb18 kronecker_closure)))

;; kronecker_neutral
  (assert (= kronecker_neutral (tb2t17 (make t1 1 1 (t2tb9 tone)))))

;; iterable_imult
  (assert (iterable int (t2tb15 infix_as_closure)))

;; isum_iter_
  (assert
  (and (opposite_n int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure)
  (t2tb2 0))
  (and (opposite int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure))
  (and (opposite_com int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure))
  (inverse_tuple int (t2tb15 infix_pl_closure) (t2tb15 infix_mn_closure)
  (t2tb2 0))))))

;; isum_iter__
  (assert (iterable int (t2tb15 infix_pl_closure)))

;; isum_iter
  (assert (iterates int (t2tb15 infix_pl_closure) (t2tb2 0)))

;; neutrals
  (assert
  (and (= 0 (tb2t2 (neutral_elt int (t2tb15 infix_pl_closure))))
  (and (= 1 (tb2t2 (neutral_elt int (t2tb15 infix_as_closure))))
  (and (iterable int (t2tb15 infix_pl_closure)) (iterable int
  (t2tb15 infix_as_closure))))))

;; neutral_one
  (assert (= (tb2t9 (neutral_elt t1 (t2tb10 infix_asdt_closure))) tone))

;; product_iter_
  (assert (iterable t1 (t2tb10 infix_asdt_closure)))

;; product_iter
  (assert
  (and (op_neutral_left t1 (t2tb10 infix_asdt_closure) (t2tb9 tone))
  (and
  (and (op_neutral_right t1 (t2tb10 infix_asdt_closure) (t2tb9 tone))
  (op_assoc t1 (t2tb10 infix_asdt_closure)))
  (and (commut t1 (t2tb10 infix_asdt_closure)) (iterates t1
  (t2tb10 infix_asdt_closure) (t2tb9 tone))))))

;; neutral_tone
  (assert
  (and (neutral t1 (t2tb10 infix_asdt_closure) (t2tb9 tone)) (iterable 
  t1 (t2tb10 infix_asdt_closure))))

;; neutral_zero
  (assert (= (tb2t9 (neutral_elt t1 (t2tb10 infix_pldt_closure))) tzero))

;; sum_iter_
  (assert
  (and (opposite_n t1 (t2tb10 infix_pldt_closure) (t2tb10 infix_mndt_closure)
  (t2tb9 tzero))
  (and (opposite t1 (t2tb10 infix_pldt_closure) (t2tb10 infix_mndt_closure))
  (and (opposite_com t1 (t2tb10 infix_pldt_closure)
  (t2tb10 infix_mndt_closure)) (inverse_tuple t1 (t2tb10 infix_pldt_closure)
  (t2tb10 infix_mndt_closure) (t2tb9 tzero))))))

;; neutral_tzero
  (assert
  (and (neutral t1 (t2tb10 infix_pldt_closure) (t2tb9 tzero)) (iterable 
  t1 (t2tb10 infix_pldt_closure))))

;; index_base_element_Swap
  (assert (= (index_base_element Swap) 3))

;; index_base_element_Hadamard
  (assert (= (index_base_element Hadamard) 1))

;; index_base_element_Identity
  (assert (= (index_base_element Identity) 0))

;; zeroLessOne
  (assert (infix_lseqdt tzero tone))

;; r_to_t_one
  (assert (= (r_to_t 1.0) tone))

;; r_to_t_zero
  (assert (= (r_to_t 0.0) tzero))

;; im_Def
  (assert (= (infix_asdt im im) (prefix_mndt tone)))

;; NonTrivialRing
  (assert (not (= tzero tone)))

;; r_zeroLessOne
  (assert (infix_lseqas 0.0 1.0))

;; One
  (assert (= (from_int 1) 1.0))

;; Zero
  (assert (= (from_int 0) 0.0))

;; ZeroLessOne
  (assert (infix_lseqas 0.0 1.0))

;; NonTrivialRing
  (assert (not (= 0.0 1.0)))

;; two
  (assert (= (infix_plas 1.0 1.0) 2.0))

;; Two
  (assert (= (infix_plas 1.0 1.0) 2.0))

;; index_bool_False
  (assert (= (index_bool false) 1))

;; index_bool_True
  (assert (= (index_bool true) 0))

(push)
(check-sat)
(get-model)
;; kronecker_mult_commut_p
  (assert
  (forall ((a (matrix t)) (b (matrix t)) (c (matrix t)) (d (matrix t)))
  (=> (= (columns t1 (t2tb17 a)) (rows t1 (t2tb17 c)))
  (=> (= (columns t1 (t2tb17 b)) (rows t1 (t2tb17 d)))
  (=> (pow2dim a)
  (=> (pow2dim b)
  (=> (pow2dim c)
  (=> (pow2dim d)
  (= (mat_mult (kronecker a b) (kronecker c d)) (kronecker (mat_mult a c)
                                                (mat_mult b d)))))))))))

;; kronecker_mult_commut
  (assert
  (forall ((a (matrix t)) (b (matrix t)) (c (matrix t)) (d (matrix t))
  (ra Int) (ca Int) (cc Int) (rb Int) (cb Int) (cd Int))
  (=> (<= 0 ra)
  (=> (<= 0 ca)
  (=> (<= 0 cc)
  (=> (<= 0 rb)
  (=> (<= 0 cb)
  (=> (<= 0 cd)
  (=> (= (rows t1 (t2tb17 a)) (power 2 ra))
  (=> (= (columns t1 (t2tb17 a)) (power 2 ca))
  (=> (= (rows t1 (t2tb17 c)) (power 2 ca))
  (=> (= (columns t1 (t2tb17 c)) (power 2 cc))
  (=> (= (rows t1 (t2tb17 b)) (power 2 rb))
  (=> (= (columns t1 (t2tb17 b)) (power 2 cb))
  (=> (= (rows t1 (t2tb17 d)) (power 2 cb))
  (=> (= (columns t1 (t2tb17 d)) (power 2 cd))
  (= (mat_mult (kronecker a b) (kronecker c d)) (kronecker (mat_mult a c)
                                                (mat_mult b d)))))))))))))))))))

;; shift_k_id
  (assert
  (forall ((m1 (matrix t)) (m2 (matrix t)) (nc1 Int) (nc2 Int) (nr1 Int)
  (nr2 Int))
  (=> (<= 0 nr1)
  (=> (<= 0 nr2)
  (=> (<= 0 nc1)
  (=> (<= 0 nc2)
  (=> (= (columns t1 (t2tb17 m1)) (power 2 nc1))
  (=> (= (columns t1 (t2tb17 m2)) (power 2 nc2))
  (=> (= (rows t1 (t2tb17 m1)) (power 2 nr1))
  (=> (= (rows t1 (t2tb17 m2)) (power 2 nr2))
  (= (mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1)) (mat_mult
                                                    (id_k_mat m2 nr1)
                                                    (mat_k_id m1 nc2)))))))))))))

;; split_nw
  (assert
  (forall ((m1 (matrix t)) (m2 (matrix t)) (nc1 Int) (nc2 Int) (nr1 Int)
  (nr2 Int))
  (=> (<= 0 nr1)
  (=> (<= 0 nr2)
  (=> (<= 0 nc1)
  (=> (<= 0 nc2)
  (=> (= (columns t1 (t2tb17 m1)) (power 2 nc1))
  (=> (= (columns t1 (t2tb17 m2)) (power 2 nc2))
  (=> (= (rows t1 (t2tb17 m1)) (power 2 nr1))
  (=> (= (rows t1 (t2tb17 m2)) (power 2 nr2))
  (= (mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1)) (kronecker m1 m2))))))))))))

;; split_ne
  (assert
  (forall ((m1 (matrix t)) (m2 (matrix t)) (nc1 Int) (nc2 Int) (nr1 Int)
  (nr2 Int))
  (=> (<= 0 nr1)
  (=> (<= 0 nr2)
  (=> (<= 0 nc1)
  (=> (<= 0 nc2)
  (=> (= (columns t1 (t2tb17 m1)) (power 2 nc1))
  (=> (= (columns t1 (t2tb17 m2)) (power 2 nc2))
  (=> (= (rows t1 (t2tb17 m1)) (power 2 nr1))
  (=> (= (rows t1 (t2tb17 m2)) (power 2 nr2))
  (= (mat_mult (id_k_mat m1 nr2) (mat_k_id m2 nc1)) (kronecker m2 m1))))))))))))

;; split_nw_pre
  (assert
  (forall ((m1 (matrix t)) (m2 (matrix t)) (nc1 Int) (nc2 Int) (nr1 Int)
  (nr2 Int) (i Int) (j Int))
  (=> (<= 0 nr1)
  (=> (<= 0 nr2)
  (=> (<= 0 nc1)
  (=> (<= 0 nc2)
  (=> (= (columns t1 (t2tb17 m1)) (power 2 nc1))
  (=> (= (columns t1 (t2tb17 m2)) (power 2 nc2))
  (=> (= (rows t1 (t2tb17 m1)) (power 2 nr1))
  (=> (= (rows t1 (t2tb17 m2)) (power 2 nr2))
  (=> (and (<= 0 i) (< i (* (power 2 nr1) (power 2 nr2))))
  (=> (and (<= 0 j) (< j (* (power 2 nc1) (power 2 nc2))))
  (= (tb2t9
     (get t1 (t2tb17 (mat_mult (mat_k_id m1 nr2) (id_k_mat m2 nc1))) i j)) 
  (tb2t9 (get t1 (t2tb17 (kronecker m1 m2)) i j)))))))))))))))

;; split_ne_pre
  (assert
  (forall ((m1 (matrix t)) (m2 (matrix t)) (nc1 Int) (nc2 Int) (nr1 Int)
  (nr2 Int) (i Int) (j Int))
  (=> (<= 0 nr1)
  (=> (<= 0 nr2)
  (=> (<= 0 nc1)
  (=> (<= 0 nc2)
  (=> (= (columns t1 (t2tb17 m1)) (power 2 nc1))
  (=> (= (columns t1 (t2tb17 m2)) (power 2 nc2))
  (=> (= (rows t1 (t2tb17 m1)) (power 2 nr1))
  (=> (= (rows t1 (t2tb17 m2)) (power 2 nr2))
  (=> (and (<= 0 i) (< i (* (power 2 nr1) (power 2 nr2))))
  (=> (and (<= 0 j) (< j (* (power 2 nc1) (power 2 nc2))))
  (= (tb2t9
     (get t1 (t2tb17 (mat_mult (id_k_mat m1 nr2) (mat_k_id m2 nc1))) i j)) 
  (tb2t9 (get t1 (t2tb17 (kronecker m2 m1)) i j)))))))))))))))

;; k_id_prod_mat_dec
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (k_id_prod_mat m o n) (id_k_mat_prod m o n))))))

;; k_id_prod_mat_spec
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (k_id_prod_mat m o n) (tb2t17
                           (make_f t1 (* (rows t1 (t2tb17 m)) (power 2 n))
                           (* (columns t1 (t2tb17 o)) (power 2 n))
                           (t2tb13 (fc257 m o)))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc257 m o)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (div i (rows t1 (t2tb17 m))))
                 (t2tb2 (div j (columns t1 (t2tb17 o)))))
                 (ind_sum (fc256 m o i j) 0 (columns t1 (t2tb17 m)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc256 m o i j)) (t2tb2 k))) (infix_asdt
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  (mod i 
                                                                  (rows 
                                                                  t1
                                                                  (t2tb17 m)))
                                                                  k))
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 o)
                                                                  k
                                                                  (mod j 
                                                                  (columns 
                                                                  t1
                                                                  (t2tb17 o)))))))))

;; k_id_prod_mat_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (k_id_prod_mat m o n) (mat_mult (id_k_mat m n) (id_k_mat o n)))))))

;; k_id_prod_mat_pre
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (=> (and (<= 0 i) (< i (* (rows t1 (t2tb17 m)) (power 2 n))))
  (=> (and (<= 0 j) (< j (* (columns t1 (t2tb17 o)) (power 2 n))))
  (= (tb2t9 (get t1 (t2tb17 (mat_mult (id_k_mat m n) (id_k_mat o n))) i j)) 
  (infix_asdt
  (indic int (t2tb2 (div i (rows t1 (t2tb17 m))))
  (t2tb2 (div j (columns t1 (t2tb17 o)))))
  (ind_sum (fc255 m o i j) 0 (columns t1 (t2tb17 m)))))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc255 m o i j)) (t2tb2 k))) (infix_asdt
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  (mod i 
                                                                  (rows 
                                                                  t1
                                                                  (t2tb17 m)))
                                                                  k))
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 o)
                                                                  k
                                                                  (mod j 
                                                                  (columns 
                                                                  t1
                                                                  (t2tb17 o)))))))))

;; prod_mat_k_id_dec
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (prod_mat_k_id m o n) (mat_prod_k_id m o n))))))

;; prod_mat_k_id_spec
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (prod_mat_k_id m o n) (tb2t17
                           (make_f t1 (* (rows t1 (t2tb17 m)) (power 2 n))
                           (* (columns t1 (t2tb17 o)) (power 2 n))
                           (t2tb13 (fc254 m o n)))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc254 m o n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (mod i (power 2 n)))
                 (t2tb2 (mod j (power 2 n))))
                 (ind_sum (fc253 m o n i j) 0 (columns t1 (t2tb17 m)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc253 m o n i j)) (t2tb2 k))) (infix_asdt
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    m)
                                                                    (div i 
                                                                    (power 2
                                                                    n)) k))
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    o) k
                                                                    (div j 
                                                                    (power 2
                                                                    n))))))))

;; prod_mat_k_id_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (prod_mat_k_id m o n) (mat_mult (mat_k_id m n) (mat_k_id o n)))))))

;; prod_mat_k_id_pre
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (=> (and (<= 0 i) (< i (* (rows t1 (t2tb17 m)) (power 2 n))))
  (=> (and (<= 0 j) (< j (* (columns t1 (t2tb17 o)) (power 2 n))))
  (= (tb2t9 (get t1 (t2tb17 (mat_mult (mat_k_id m n) (mat_k_id o n))) i j)) 
  (infix_asdt
  (indic int (t2tb2 (mod i (power 2 n))) (t2tb2 (mod j (power 2 n))))
  (ind_sum (fc252 m o i j n) 0 (columns t1 (t2tb17 m)))))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int) (n Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc252 m o i j n)) (t2tb2 k))) (infix_asdt
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    m)
                                                                    (div i 
                                                                    (power 2
                                                                    n)) k))
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    o) k
                                                                    (div j 
                                                                    (power 2
                                                                    n))))))))

;; filtered_ind_sum_indic_div
  (assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int t)))
  (=> (< 0 n)
  (=> (< 0 v)
  (=> (and (<= 0 p) (< p n))
  (= (ind_sum (fc251 v p g) 0 (* v n)) (ind_sum g 0 v)))))))

;; fc_def
  (assert
  (forall ((v Int) (p Int) (g (Array Int t)) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc251 v p g)) (t2tb2 k))) (infix_asdt
                                                                (tb2t9
                                                                (infix_at 
                                                                t1 int
                                                                (t2tb12 g)
                                                                (t2tb2
                                                                (mod k v))))
                                                                (indic 
                                                                int
                                                                (t2tb2
                                                                (div k v))
                                                                (t2tb2 p))))))

;; filtered_ind_sum_mod_indic
  (assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int t)))
  (=> (< 0 n)
  (=> (< 0 v)
  (=> (and (<= 0 p) (< p v))
  (= (ind_sum (fc250 v p g) 0 (* v n)) (ind_sum g 0 n)))))))

;; fc_def
  (assert
  (forall ((v Int) (p Int) (g (Array Int t)) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc250 v p g)) (t2tb2 k))) (infix_asdt
                                                                (indic 
                                                                int
                                                                (t2tb2
                                                                (mod k v))
                                                                (t2tb2 p))
                                                                (tb2t9
                                                                (infix_at 
                                                                t1 int
                                                                (t2tb12 g)
                                                                (t2tb2
                                                                (div k v))))))))

;; filter_sum_indic_div
  (assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int t)))
  (=> (< 0 n)
  (=> (< 0 v)
  (=> (and (<= 0 p) (< p n))
  (= (sum int (t2tb1 (to_fset 0 (* v n))) (t2tb12 (fc249 v p g))) (sum 
                                                                  int
                                                                  (t2tb1
                                                                  (to_fset 0
                                                                  v))
                                                                  (t2tb12 g))))))))

;; fc_def
  (assert
  (forall ((v Int) (p Int) (g (Array Int t)) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc249 v p g)) (t2tb2 k))) (infix_asdt
                                                                (tb2t9
                                                                (infix_at 
                                                                t1 int
                                                                (t2tb12 g)
                                                                (t2tb2
                                                                (mod k v))))
                                                                (indic 
                                                                int
                                                                (t2tb2
                                                                (div k v))
                                                                (t2tb2 p))))))

;; filter_sum_mod_indic
  (assert
  (forall ((v Int) (n Int) (p Int) (g (Array Int t)))
  (=> (< 0 n)
  (=> (< 0 v)
  (=> (and (<= 0 p) (< p v))
  (= (sum int (t2tb1 (to_fset 0 (* v n))) (t2tb12 (fc248 v p g))) (sum 
                                                                  int
                                                                  (t2tb1
                                                                  (to_fset 0
                                                                  n))
                                                                  (t2tb12 g))))))))

;; fc_def
  (assert
  (forall ((v Int) (p Int) (g (Array Int t)) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc248 v p g)) (t2tb2 k))) (infix_asdt
                                                                (indic 
                                                                int
                                                                (t2tb2
                                                                (mod k v))
                                                                (t2tb2 p))
                                                                (tb2t9
                                                                (infix_at 
                                                                t1 int
                                                                (t2tb12 g)
                                                                (t2tb2
                                                                (div k v))))))))

;; id_k_mat_prod_spec
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (id_k_mat_prod m o n) (tb2t17
                           (make_f t1 (* (rows t1 (t2tb17 m)) (power 2 n))
                           (* (columns t1 (t2tb17 o)) (power 2 n))
                           (t2tb13 (fc247 m o)))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc247 m o)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (div i (rows t1 (t2tb17 m))))
                 (t2tb2 (div j (columns t1 (t2tb17 o)))))
                 (ind_sum (fc246 m o i j) 0 (columns t1 (t2tb17 m)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc246 m o i j)) (t2tb2 k))) (infix_asdt
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  (mod i 
                                                                  (rows 
                                                                  t1
                                                                  (t2tb17 m)))
                                                                  k))
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 o)
                                                                  k
                                                                  (mod j 
                                                                  (columns 
                                                                  t1
                                                                  (t2tb17 o)))))))))

;; id_k_mat_prod_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (id_k_mat_prod m o n) (kronecker (identity1 n) (mat_mult m o)))))))

;; mat_prod_k_id_spec
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (mat_prod_k_id m o n) (tb2t17
                           (make_f t1 (* (rows t1 (t2tb17 m)) (power 2 n))
                           (* (columns t1 (t2tb17 o)) (power 2 n))
                           (t2tb13 (fc245 m o n)))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc245 m o n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (mod i (power 2 n)))
                 (t2tb2 (mod j (power 2 n))))
                 (ind_sum (fc244 m o n i j) 0 (columns t1 (t2tb17 m)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc244 m o n i j)) (t2tb2 k))) (infix_asdt
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    m)
                                                                    (div i 
                                                                    (power 2
                                                                    n)) k))
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    o) k
                                                                    (div j 
                                                                    (power 2
                                                                    n))))))))

;; mat_prod_k_id_def
  (assert
  (forall ((m (matrix t)) (o (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (mat_prod_k_id m o n) (kronecker (mat_mult m o) (identity1 n)))))))

;; id_k_mat_columns
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (= (columns t1 (t2tb17 (id_k_mat m n))) (* (columns t1 (t2tb17 m)) 
  (power 2 n))))))

;; id_k_mat_rows
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (= (rows t1 (t2tb17 (id_k_mat m n))) (* (rows t1 (t2tb17 m)) (power 2 n))))))

;; id_k_mat_values
  (assert
  (forall ((m (matrix t)) (n Int) (i Int) (j Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (* (rows t1 (t2tb17 m)) (power 2 n))))
  (=> (and (<= 0 j) (< j (* (columns t1 (t2tb17 m)) (power 2 n))))
  (= (tb2t9 (get t1 (t2tb17 (id_k_mat m n)) i j)) (infix_asdt
                                                  (indic int
                                                  (t2tb2
                                                  (div i (rows t1 (t2tb17 m))))
                                                  (t2tb2
                                                  (div j (columns t1
                                                         (t2tb17 m)))))
                                                  (tb2t9
                                                  (get t1 (t2tb17 m)
                                                  (mod i (rows t1 (t2tb17 m)))
                                                  (mod j (columns t1
                                                         (t2tb17 m))))))))))))

;; id_k_mat_spec
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (= (id_k_mat m n) (tb2t17
                    (make_f t1 (* (rows t1 (t2tb17 m)) (power 2 n))
                    (* (columns t1 (t2tb17 m)) (power 2 n))
                    (t2tb13 (fc243 m))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc243 m)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (div i (rows t1 (t2tb17 m))))
                 (t2tb2 (div j (columns t1 (t2tb17 m)))))
                 (tb2t9
                 (get t1 (t2tb17 m) (mod i (rows t1 (t2tb17 m)))
                 (mod j (columns t1 (t2tb17 m)))))))))

;; id_k_mat_def
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n) (= (id_k_mat m n) (kronecker (identity1 n) m)))))

;; mat_k_id_columns
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (= (columns t1 (t2tb17 (mat_k_id m n))) (* (columns t1 (t2tb17 m)) 
  (power 2 n))))))

;; mat_k_id_rows
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (= (rows t1 (t2tb17 (mat_k_id m n))) (* (rows t1 (t2tb17 m)) (power 2 n))))))

;; mat_k_id_values
  (assert
  (forall ((m (matrix t)) (n Int) (i Int) (j Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (* (rows t1 (t2tb17 m)) (power 2 n))))
  (=> (and (<= 0 j) (< j (* (columns t1 (t2tb17 m)) (power 2 n))))
  (= (tb2t9 (get t1 (t2tb17 (mat_k_id m n)) i j)) (infix_asdt
                                                  (indic int
                                                  (t2tb2 (mod i (power 2 n)))
                                                  (t2tb2 (mod j (power 2 n))))
                                                  (tb2t9
                                                  (get t1 (t2tb17 m)
                                                  (div i (power 2 n))
                                                  (div j (power 2 n)))))))))))

;; mat_k_id_spec
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (= (mat_k_id m n) (tb2t17
                    (make_f t1 (* (rows t1 (t2tb17 m)) (power 2 n))
                    (* (columns t1 (t2tb17 m)) (power 2 n))
                    (t2tb13 (fc242 m n))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc242 m n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (mod i (power 2 n)))
                 (t2tb2 (mod j (power 2 n))))
                 (tb2t9
                 (get t1 (t2tb17 m) (div i (power 2 n)) (div j (power 2 n))))))))

;; mat_k_id_def
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n) (= (mat_k_id m n) (kronecker m (identity1 n))))))

;; kronecker_scalars
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t) (b t))
  (= (kronecker (infix_asdtdt a m) (infix_asdtdt b n)) (infix_asdtdt
                                                       (infix_asdt a b)
                                                       (kronecker m n)))))

;; kronecker_scalar_distr_r
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t))
  (= (kronecker m (infix_asdtdt a n)) (infix_asdtdt a (kronecker m n)))))

;; kronecker_scalar_distr
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t))
  (= (kronecker (infix_asdtdt a m) n) (infix_asdtdt a (kronecker m n)))))

;; q_ket_qbit_kronecker
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (is_a_ket m)
  (=> (is_a_ket n)
  (and (is_a_ket (kronecker m n))
  (= (ket_length (kronecker m n)) (+ (ket_length m) (ket_length n))))))))

;; is_a_ket_qbit_def
  (assert
  (forall ((m (matrix t)))
  (= (is_a_ket_qbit m) (and (is_a_ket m) (= (rows t1 (t2tb17 m)) 2)))))

;; is_a_q_bra_qbit_def
  (assert
  (forall ((m (matrix t)))
  (= (is_a_q_bra_qbit m) (and (is_a_q_bra m) (= (columns t1 (t2tb17 m)) 2)))))

;; get_ket_rows_length
  (assert
  (forall ((m (matrix t)) (l Int))
  (=> (is_a_ket m)
  (=> (= (ket_length m) l) (= (rows t1 (t2tb17 m)) (power 2 l))))))

;; get_ket_rows_gen
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (is_a_ket m)
  (=> (= i (power 2 (ket_length m))) (= (rows t1 (t2tb17 m)) i)))))

;; get_ket_rows
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_ket m) (= (rows t1 (t2tb17 m)) (power 2 (ket_length m))))))

;; get_ket_columns
  (assert
  (forall ((m (matrix t))) (=> (is_a_ket m) (= (columns t1 (t2tb17 m)) 1))))

;; get_is_a_ket
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_ket m)
  (and (= (columns t1 (t2tb17 m)) 1)
  (= (rows t1 (t2tb17 m)) (power 2 (ket_length m)))))))

;; set_is_a_ket
  (assert
  (forall ((m (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) 1)
  (=> (exists ((s Int)) (and (<= 0 s) (= (rows t1 (t2tb17 m)) (power 2 s))))
  (is_a_ket m)))))

;; get_ket_length
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (=> (is_a_ket m)
  (=> (= (rows t1 (t2tb17 m)) (power 2 n)) (= (ket_length m) n))))))

;; ket_length_spec
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_ket m)
  (and (<= 0 (ket_length m))
  (= (rows t1 (t2tb17 m)) (power 2 (ket_length m)))))))

;; ket_length_def
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_ket m) (= (ket_length m) (bra_length (ket_to_bra m))))))

;; bra_length_spec
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_q_bra m)
  (and (<= 0 (bra_length m))
  (= (columns t1 (t2tb17 m)) (power 2 (bra_length m)))))))

;; bra_length_def
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_q_bra m)
  (= (bra_length m) (- (binary_length (columns t1 (t2tb17 m))) 1)))))

;; bra_to_ket_to_bra
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_q_bra m) (equal t1 (t2tb17 m)
  (t2tb17 (ket_to_bra (bra_to_ket m)))))))

;; ket_to_bra_to_ket
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_ket m) (equal t1 (t2tb17 (bra_to_ket (ket_to_bra m)))
  (t2tb17 m)))))

;; ket_to_bra_spec
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_ket m)
  (and (= (columns t1 (t2tb17 (ket_to_bra m))) (rows t1 (t2tb17 m)))
  (and (= (rows t1 (t2tb17 (ket_to_bra m))) (columns t1 (t2tb17 m)))
  (and (is_a_q_bra (ket_to_bra m))
  (and
  (forall ((i Int) (j Int))
  (= (valid_index t1 (t2tb17 m) i j) (valid_index t1 (t2tb17 (ket_to_bra m))
  j i)))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 m) i j)
  (= (tb2t9 (get t1 (t2tb17 m) i j)) (tb2t9
                                     (get t1 (t2tb17 (ket_to_bra m)) j i))))))))))))

;; bra_to_ket_spec
  (assert
  (forall ((m (matrix t)))
  (=> (is_a_q_bra m)
  (and (is_a_ket (bra_to_ket m))
  (and
  (forall ((i Int) (j Int))
  (= (valid_index t1 (t2tb17 m) i j) (valid_index t1 (t2tb17 (bra_to_ket m))
  j i)))
  (and (= (rows t1 (t2tb17 (bra_to_ket m))) (columns t1 (t2tb17 m)))
  (and (= (columns t1 (t2tb17 (bra_to_ket m))) (rows t1 (t2tb17 m)))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 m) i j)
  (= (tb2t9 (get t1 (t2tb17 m) i j)) (tb2t9
                                     (get t1 (t2tb17 (bra_to_ket m)) j i))))))))))))

;; is_a_ket
  (assert
  (forall ((m (matrix t)))
  (= (is_a_ket m)
  (and (= (columns t1 (t2tb17 m)) 1)
  (exists ((s Int)) (and (<= 0 s) (= (rows t1 (t2tb17 m)) (power 2 s))))))))

;; is_a_q_bra
  (assert
  (forall ((m (matrix t)))
  (= (is_a_q_bra m)
  (and (= (rows t1 (t2tb17 m)) 1)
  (exists ((s Int)) (and (<= 0 s) (= (columns t1 (t2tb17 m)) (power 2 s))))))))

;; get_pow2dim_square_elt
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (pow2dim_square m)
  (=> (= (ln_size m) i)
  (and (= (rows t1 (t2tb17 m)) (power 2 i))
  (= (columns t1 (t2tb17 m)) (power 2 i)))))))

;; set_pow2dim_square_elt
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (<= 0 i)
  (=>
  (and (= (rows t1 (t2tb17 m)) (columns t1 (t2tb17 m)))
  (= (columns t1 (t2tb17 m)) (power 2 i)))
  (and (pow2dim_square m) (= (ln_size m) i))))))

;; set_pow2dim_square
  (assert
  (forall ((m (matrix t)))
  (=>
  (exists ((i Int))
  (and (= (rows t1 (t2tb17 m)) (columns t1 (t2tb17 m)))
  (= (columns t1 (t2tb17 m)) (power 2 i)))) (pow2dim_square m))))

;; set_ln_size_rows
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (<= 0 i)
  (=> (pow2dim_square m)
  (=> (= (rows t1 (t2tb17 m)) (power 2 i)) (= (ln_size m) i))))))

;; set_ln_size_columns
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (<= 0 i)
  (=> (pow2dim_square m)
  (=> (= (columns t1 (t2tb17 m)) (power 2 i)) (= (ln_size m) i))))))

;; set_ln_size_lnr
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (pow2dim_square m) (=> (= (lnr m) i) (= (ln_size m) i)))))

;; set_ln_size_lnc
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (pow2dim_square m) (=> (= (lnc m) i) (= (ln_size m) i)))))

;; ln_size_spec
  (assert
  (forall ((m (matrix t)))
  (=> (pow2dim_square m)
  (and (= (ln_size m) (lnc m))
  (and (= (rows t1 (t2tb17 m)) (power 2 (ln_size m)))
  (= (columns t1 (t2tb17 m)) (power 2 (ln_size m))))))))

;; ln_size_def
  (assert
  (forall ((m (matrix t))) (=> (pow2dim_square m) (= (ln_size m) (lnr m)))))

;; dec_pow2dim_square
  (assert
  (forall ((m (matrix t)))
  (=> (pow2dim_square m) (and (isa_square m) (pow2dim m)))))

;; pow2dim_square_dec
  (assert
  (forall ((m (matrix t)))
  (=> (isa_square m) (=> (pow2dim m) (pow2dim_square m)))))

;; get_square_elt
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (isa_square m)
  (=> (= (mat_size m) i)
  (and (= (rows t1 (t2tb17 m)) i) (= (columns t1 (t2tb17 m)) i))))))

;; set_square_elt
  (assert
  (forall ((m (matrix t)) (i Int))
  (=> (= (rows t1 (t2tb17 m)) i)
  (=> (= (columns t1 (t2tb17 m)) i) (and (isa_square m) (= (mat_size m) i))))))

;; set_square
  (assert
  (forall ((m (matrix t)))
  (=> (= (rows t1 (t2tb17 m)) (columns t1 (t2tb17 m))) (isa_square m))))

;; get_square
  (assert
  (forall ((m (matrix t)))
  (=> (isa_square m) (= (rows t1 (t2tb17 m)) (columns t1 (t2tb17 m))))))

;; mat_size_spec
  (assert
  (forall ((m (matrix t)))
  (=> (isa_square m)
  (and (= (mat_size m) (rows t1 (t2tb17 m)))
  (= (mat_size m) (columns t1 (t2tb17 m)))))))

;; mat_size_def
  (assert
  (forall ((m (matrix t)))
  (=> (isa_square m) (= (mat_size m) (rows t1 (t2tb17 m))))))

;; set_pow2dim_elt
  (assert
  (forall ((m (matrix t)) (i Int) (j Int))
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (= (rows t1 (t2tb17 m)) (power 2 i))
  (=> (= (columns t1 (t2tb17 m)) (power 2 j))
  (and (pow2dim m) (and (= (lnr m) i) (= (lnc m) j)))))))))

;; get_pow2dim_elt
  (assert
  (forall ((m (matrix t)) (i Int) (j Int))
  (=> (pow2dim m)
  (=> (= (lnr m) i)
  (=> (= (lnc m) j)
  (and (= (rows t1 (t2tb17 m)) (power 2 i))
  (= (columns t1 (t2tb17 m)) (power 2 j))))))))

;; set_pow2dim
  (assert
  (forall ((m (matrix t)))
  (=>
  (exists ((i Int) (j Int))
  (and (= (rows t1 (t2tb17 m)) (power 2 i))
  (= (columns t1 (t2tb17 m)) (power 2 j)))) (pow2dim m))))

;; get_pow2dim
  (assert
  (forall ((m (matrix t)))
  (=> (pow2dim m)
  (exists ((i Int) (j Int))
  (and (= (rows t1 (t2tb17 m)) (power 2 i))
  (= (columns t1 (t2tb17 m)) (power 2 j)))))))

;; lnc_spec
  (assert
  (forall ((m (matrix t)))
  (=> (pow2dim m)
  (and (= (columns t1 (t2tb17 m)) (power 2 (lnc m))) (<= 0 (lnc m))))))

;; lnr_spec
  (assert
  (forall ((m (matrix t)))
  (=> (pow2dim m)
  (and (= (rows t1 (t2tb17 m)) (power 2 (lnr m))) (<= 0 (lnr m))))))

;; pow2dim_square_def
  (assert
  (forall ((m (matrix t)))
  (= (pow2dim_square m)
  (exists ((i Int))
  (and (= (rows t1 (t2tb17 m)) (power 2 i))
  (= (columns t1 (t2tb17 m)) (power 2 i)))))))

;; pow2dim_def
  (assert
  (forall ((m (matrix t)))
  (= (pow2dim m)
  (exists ((i Int) (j Int))
  (and (= (rows t1 (t2tb17 m)) (power 2 i))
  (= (columns t1 (t2tb17 m)) (power 2 j)))))))

;; isa_square_def
  (assert
  (forall ((m (matrix t)))
  (= (isa_square m) (= (rows t1 (t2tb17 m)) (columns t1 (t2tb17 m))))))

;; fc_def
  (assert
  (forall ((i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 fc241) (t2tb2 i)) (t2tb2 j))) 
  (indic int (t2tb2 i) (infix_at int int (t2tb8 (exchange 2 3)) (t2tb2 j))))))

;; permut_decomp
  (assert
  (forall ((n Int) (f (Array Int Int)))
  (=> (< 1 n)
  (=> (is_a_permutation (to_fset 1 (+ n 1)) f) (permut_equal
  (to_fset 1 (+ n 1))
  (permut_reverse_iter n (reverse (to_fset 1 (+ n 1)) f) n) f)))))

;; permut_decomp_rev
  (assert
  (forall ((n Int) (f (Array Int Int)))
  (=> (< 1 n)
  (=> (is_a_permutation (to_fset 1 (+ n 1)) f) (permut_reverse
  (to_fset 1 (+ n 1)) (permut_reverse_iter n f n) f)))))

;; permut_reverse_iter_assoc
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int))
  (=> (and (<= 1 i) (<= i n))
  (=> (is_a_permutation (to_fset 1 (+ n 1)) f)
  (and
  (=> (< 1 i)
  (= (tb2t8 (comp_func int (t2tb8 (permut_reverse_iter n f i)) (t2tb8 f))) 
  (tb2t8
  (comp_func int (t2tb8 (permut_reverse_step (+ n 1) f (- i 1)))
  (comp_func int (t2tb8 (permut_reverse_iter n f (- i 1))) (t2tb8 f))))))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (< k i))
  (= (tb2t2
     (infix_at int int
     (comp_func int (t2tb8 (permut_reverse_iter n f i)) (t2tb8 f)) (t2tb2 k))) k)))
  (forall ((k Int))
  (=> (and (<= i k) (< k n))
  (<= i (tb2t2
        (infix_at int int
        (comp_func int (t2tb8 (permut_reverse_iter n f i)) (t2tb8 f))
        (t2tb2 k))))))))))))

;; permut_reverse_iter_spec
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int))
  (=> (is_a_permutation (to_fset 1 (+ n 1)) f)
  (=> (and (<= 1 i) (<= i n))
  (and (is_a_permutation (to_fset 1 (+ n 1)) (permut_reverse_iter n f i))
  (and (is_a_permutation (to_fset 1 (+ n 1))
  (tb2t8 (comp_func int (t2tb8 (permut_reverse_iter n f i)) (t2tb8 f))))
  (and
  (= (permut_reverse_iter n f i) (tb2t8
                                 (iter_comp int (t2tb15 (fc239 n f i)) 1 i)))
  (and
  (= (permut_reverse_iter n f i) (tb2t8
                                 (iter_comp int (t2tb15 (fc240 n f i)) 1 i)))
  (and
  (= (permut_reverse_step (+ n 1) f i) (exchange i
                                       (tb2t2
                                       (infix_at int int
                                       (t2tb8 (permut_reverse_iter n f i))
                                       (infix_at int int (t2tb8 f) (t2tb2 i))))))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k n))
  (=> (not (= k i))
  (=>
  (not
  (= k (tb2t2
       (infix_at int int
       (comp_func int (t2tb8 (permut_reverse_iter n f i)) (t2tb8 f))
       (t2tb2 i)))))
  (= (tb2t2
     (infix_at int int (t2tb8 (permut_reverse_step (+ n 1) f i)) (t2tb2 k))) k)))))
  (and
  (= (tb2t2
     (infix_at int int (t2tb8 (permut_reverse_step (+ n 1) f i)) (t2tb2 i))) 
  (tb2t2
  (infix_at int int (t2tb8 (permut_reverse_iter n f i))
  (infix_at int int (t2tb8 f) (t2tb2 i)))))
  (and
  (= (tb2t2
     (infix_at int int (t2tb8 (permut_reverse_step (+ n 1) f i))
     (infix_at int int (t2tb8 (permut_reverse_iter n f i))
     (infix_at int int (t2tb8 f) (t2tb2 i))))) i)
  (is_a_permutation (to_fset 1 (+ n 1)) (permut_reverse_iter n f i))))))))))))))

;; fc_def
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int) (k Int))
  (= (tb2t8
     (infix_at (infix_mngt int int) int (t2tb15 (fc240 n f i)) (t2tb2 k))) 
  (ite (and (<= 1 k) (< k i)) (permut_reverse_step (+ n 1) f (- i k))
  (tb2t8 (identity int))))))

;; fc_def
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int) (k Int))
  (= (tb2t8
     (infix_at (infix_mngt int int) int (t2tb15 (fc239 n f i)) (t2tb2 k))) 
  (permut_reverse_step (+ n 1) f (- i k)))))

;; permut_reverse_iter_def
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int))
  (=> (is_a_permutation (to_fset 1 (+ n 1)) f)
  (=> (and (<= 1 i) (<= i n))
  (ite (= i 1) (= (permut_reverse_iter n f i) (tb2t8 (identity int)))
  (= (permut_reverse_iter n f i) (tb2t8
                                 (comp_func int
                                 (t2tb8
                                 (permut_reverse_step (+ n 1) f (- i 1)))
                                 (t2tb8 (permut_reverse_iter n f (- i 1)))))))))))

;; permut_reverse_step_spec
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int))
  (=> (mem int (t2tb2 i) (t2tb1 (to_fset 1 n)))
  (=> (is_a_permutation (to_fset 1 n) f) (is_a_permutation (to_fset 1 n)
  (permut_reverse_step n f i))))))

;; permut_reverse_step_def
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int))
  (=> (mem int (t2tb2 i) (t2tb1 (to_fset 1 n)))
  (=> (is_a_permutation (to_fset 1 n) f)
  (ite (= i 1)
  (= (permut_reverse_step n f i) (exchange 1
                                 (tb2t2
                                 (infix_at int int (t2tb8 f) (t2tb2 1)))))
  (= (permut_reverse_step n f i) (exchange i
                                 (tb2t2
                                 (infix_at int int
                                 (comp_func int
                                 (iter_comp int (t2tb15 (result32 n f i)) 1
                                 i) (t2tb8 f)) (t2tb2 i))))))))))

;; result_def
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int) (k Int))
  (= (tb2t8
     (infix_at (infix_mngt int int) int (t2tb15 (result32 n f i)) (t2tb2 k))) 
  (ite (and (<= 1 k) (< k i)) (permut_reverse_step n f (- i k))
  (tb2t8 (identity int))))))

;; permut_reverse_inv
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int))
  (h1 (Array Int Int)))
  (=> (permut_reverse s f g)
  (=> (permut_reverse s g h1) (permut_equal s f h1)))))

;; permut_reverse_equal
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int))
  (h1 (Array Int Int)))
  (=> (permut_reverse s f g)
  (=> (permut_equal s g h1) (permut_reverse s f h1)))))

;; permut_equal_reverse
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int))
  (h1 (Array Int Int)))
  (=> (permut_equal s f g)
  (=> (permut_reverse s g h1) (permut_reverse s f h1)))))

;; get_permut_reverse
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int)))
  (=> (permut_reverse s f g)
  (and (is_a_permutation s f)
  (and (is_a_permutation s g)
  (and
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2
     (infix_at int int (t2tb8 f) (infix_at int int (t2tb8 g) (t2tb2 e)))) e)))
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2
     (infix_at int int (t2tb8 g) (infix_at int int (t2tb8 f) (t2tb2 e)))) e)))))))))

;; set_permut_reverse
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int)))
  (=> (is_a_permutation s f)
  (=> (is_a_permutation s g)
  (=>
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2
     (infix_at int int (t2tb8 f) (infix_at int int (t2tb8 g) (t2tb2 e)))) e)))
  (permut_reverse s f g))))))

;; get_permut_equal
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int)))
  (=> (permut_equal s f g)
  (and (is_a_permutation s f)
  (and (is_a_permutation s g)
  (and
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 e))))))
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2 (infix_at int int (t2tb8 g) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 f) (t2tb2 e))))))))))))

;; set_permut_equal
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int)))
  (=> (is_a_permutation s f)
  (=>
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 e))))))
  (and (permut_equal s f g) (is_a_permutation s g))))))

;; permut_reverse_sym
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int)))
  (=> (permut_reverse s f g) (permut_reverse s g f))))

;; Permut_reverse
  (assert
  (forall ((s (set Int)))
  (forall ((f (Array Int Int)) (g (Array Int Int)))
  (= (permut_reverse s f g)
  (and (is_a_permutation s f)
  (and (is_a_permutation s g)
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2
     (infix_at int int (t2tb8 f) (infix_at int int (t2tb8 g) (t2tb2 e)))) e)))))))))

;; Permut_equal
  (assert
  (forall ((s (set Int)))
  (forall ((f (Array Int Int)) (g (Array Int Int)))
  (= (permut_equal s f g)
  (and (is_a_permutation s f)
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 e)))))))))))

;; reverse_spec
  (assert
  (forall ((s (set Int)) (f (Array Int Int)))
  (=> (is_a_permutation s f)
  (and (is_a_permutation s (reverse s f))
  (and
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2
     (infix_at int int (t2tb8 (reverse s f))
     (infix_at int int (t2tb8 f) (t2tb2 e)))) e)))
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (= (tb2t2
     (infix_at int int (t2tb8 f)
     (infix_at int int (t2tb8 (reverse s f)) (t2tb2 e)))) e))))))))

;; reverse_def
  (assert
  (forall ((s (set Int)) (f (Array Int Int)))
  (=> (is_a_permutation s f)
  (= (reverse s f) (tb2t8 (inv_f int int (t2tb8 f) (t2tb1 s) (t2tb1 s)))))))

;; assoc_permut_comm
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (h1 (Array Int Int)))
  (= (tb2t8 (comp_func int (comp_func int (t2tb8 f) (t2tb8 g)) (t2tb8 h1))) 
  (tb2t8 (comp_func int (t2tb8 f) (comp_func int (t2tb8 g) (t2tb8 h1)))))))

;; assoc_permut
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (h1 (Array Int Int)))
  (= (tb2t8 (comp_func int (t2tb8 f) (comp_func int (t2tb8 g) (t2tb8 h1)))) 
  (tb2t8 (comp_func int (comp_func int (t2tb8 f) (t2tb8 g)) (t2tb8 h1))))))

;; associative_permutation
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (h1 (Array Int Int))
  (e Int))
  (= (tb2t2
     (infix_at int int
     (comp_func int (t2tb8 f) (comp_func int (t2tb8 g) (t2tb8 h1)))
     (t2tb2 e))) (tb2t2
                 (infix_at int int
                 (comp_func int (comp_func int (t2tb8 f) (t2tb8 g))
                 (t2tb8 h1)) (t2tb2 e))))))

;; is_a_permut_exchange
  (assert
  (forall ((i Int) (j Int) (s (set Int)))
  (=> (mem int (t2tb2 i) (t2tb1 s))
  (=> (mem int (t2tb2 j) (t2tb1 s)) (is_a_permutation s (exchange i j))))))

;; set_last_val_permut
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (i Int) (j Int))
  (=> (is_a_permutation s f)
  (=> (mem int (t2tb2 i) (t2tb1 s))
  (=> (mem int (t2tb2 j) (t2tb1 s))
  (=>
  (forall ((i1 Int))
  (=> (mem int (t2tb2 i1) (t2tb1 s))
  (=> (not (= i1 i))
  (not (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i1))) j)))))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) j)))))))

;; get_permutation
  (assert
  (forall ((s (set Int)) (f (Array Int Int)))
  (=> (is_a_permutation s f)
  (and (p_bijective int int (t2tb8 f) (t2tb1 s) (t2tb1 s))
  (and
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s)) (mem int
  (infix_at int int (t2tb8 f) (t2tb2 e)) (t2tb1 s))))
  (and
  (forall ((e Int) (eqt Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (=> (mem int (t2tb2 eqt) (t2tb1 s))
  (=> (not (= e eqt))
  (not
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 f) (t2tb2 eqt)))))))))
  (and
  (forall ((e Int) (eqt Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (=> (mem int (t2tb2 eqt) (t2tb1 s))
  (=>
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 f) (t2tb2 eqt))))
  (= e eqt)))))
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (exists ((eqt Int))
  (and (mem int (t2tb2 eqt) (t2tb1 s))
  (= e (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 eqt)))))))))))))))

;; get_permutation_bij
  (assert
  (forall ((s (set Int)) (f (Array Int Int)))
  (=> (is_a_permutation s f) (p_bijective int int (t2tb8 f) (t2tb1 s)
  (t2tb1 s)))))

;; exchange_output
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (= j k)
  (= (tb2t2 (infix_at int int (t2tb8 (exchange i j)) (t2tb2 k))) i))))

;; exchange_input
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (= i k)
  (= (tb2t2 (infix_at int int (t2tb8 (exchange i j)) (t2tb2 k))) j))))

;; exchange_id
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (not (= i k))
  (=> (not (= j k))
  (= (tb2t2 (infix_at int int (t2tb8 (exchange i j)) (t2tb2 k))) k)))))

;; exchange_spec
  (assert
  (forall ((i Int) (j Int))
  (and
  (forall ((k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (exchange i j)) (t2tb2 k))) (ite (= k i)
                                                                 j
                                                                 (ite (= k j)
                                                                 i k))))
  (forall ((s (set Int)))
  (=> (mem int (t2tb2 i) (t2tb1 s))
  (=> (mem int (t2tb2 j) (t2tb1 s)) (is_a_permutation s (exchange i j))))))))

;; exchange_def
  (assert
  (forall ((i Int) (j Int))
  (ite (= i j) (= (exchange i j) (tb2t8 (identity int)))
  (ite (< i j) (= (exchange i j) (exchange_growing i j))
  (= (exchange i j) (exchange_growing j i))))))

;; exchange_growing_spec
  (assert
  (forall ((i Int) (j Int))
  (=> (< i j)
  (forall ((k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (exchange_growing i j)) (t2tb2 k))) 
  (ite (= k i) j (ite (= k j) i k)))))))

;; exchange_growing_def
  (assert
  (forall ((i Int) (j Int))
  (=> (< i j)
  (= (exchange_growing i j) (tb2t8
                            (comp_func int
                            (t2tb8 (set_exchange_decreasing i (- j 1)))
                            (t2tb8 (set_exchange_growing i j))))))))

;; permut_iter_comp
  (assert
  (forall ((s (set Int)) (f (Array Int (Array Int Int))) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j)) (is_a_permutation s
  (tb2t8 (infix_at (infix_mngt int int) int (t2tb15 f) (t2tb2 k))))))
  (=> (<= i j) (is_a_permutation s (tb2t8 (iter_comp int (t2tb15 f) i j)))))))

;; permut_transitive
  (assert
  (forall ((s (set Int)) (f (Array Int Int)) (g (Array Int Int)))
  (=> (is_a_permutation s f)
  (=> (is_a_permutation s g) (is_a_permutation s
  (tb2t8 (comp_func int (t2tb8 f) (t2tb8 g))))))))

;; set_permutation
  (assert
  (forall ((s (set Int)) (f (Array Int Int)))
  (=>
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s)) (mem int
  (infix_at int int (t2tb8 f) (t2tb2 e)) (t2tb1 s))))
  (=>
  (forall ((e Int))
  (=> (mem int (t2tb2 e) (t2tb1 s))
  (exists ((eqt Int))
  (and (mem int (t2tb2 eqt) (t2tb1 s))
  (= e (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 eqt))))))))
  (is_a_permutation s f)))))

;; is_a_permutation_def
  (assert
  (forall ((s (set Int)) (f (Array Int Int)))
  (= (is_a_permutation s f) (p_bijective int int (t2tb8 f) (t2tb1 s)
  (t2tb1 s)))))

;; set_exchange_decreasing_spec
  (assert
  (forall ((i Int) (j Int))
  (=> (<= i j)
  (and
  (forall ((k Int))
  (= (tb2t2
     (infix_at int int (t2tb8 (set_exchange_decreasing i j)) (t2tb2 k))) 
  (ite (= k j) i (ite (and (<= i k) (< k j)) (+ k 1) k))))
  (= (set_exchange_decreasing i j) (tb2t8
                                   (iter_comp int
                                   (t2tb15 swap_plus_one_closure) i j)))))))

;; set_exchange_growing_spec
  (assert
  (forall ((i Int) (j Int))
  (=> (<= i j)
  (and
  (forall ((k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (set_exchange_growing i j)) (t2tb2 k))) 
  (ite (= k i) j (ite (and (< i k) (<= k j)) (- k 1) k))))
  (= (set_exchange_growing i j) (tb2t8
                                (iter_comp int (t2tb15 (fc238 j)) 1
                                (+ (- j i) 1))))))))

;; fc_def
  (assert
  (forall ((j Int) (l Int))
  (= (tb2t8 (infix_at (infix_mngt int int) int (t2tb15 (fc238 j)) (t2tb2 l))) 
  (tb2t8
  (infix_at (infix_mngt int int) int (t2tb15 swap_plus_one_closure)
  (t2tb2 (- j l)))))))

;; swap_plus_one_apply
  (assert
  (forall ((i Int))
  (forall ((k Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 swap_plus_one_closure)
     (t2tb2 i)) (t2tb2 k))) (ite (= k i) (+ k 1)
                            (ite (= k (+ i 1)) (- k 1) k))))))

;; swap_plus_one_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 swap_plus_one_closure)
     (t2tb2 y)) (t2tb2 y1))) (swap_plus_one y y1))))

;; get_swap_plus_one_valtn
  (assert
  (forall ((i Int) (k Int))
  (=> (not (= k (+ i 1))) (=> (not (= k i)) (= (swap_plus_one i k) k)))))

;; get_swap_plus_one_valtp
  (assert
  (forall ((i Int) (k Int))
  (=> (= k (+ i 1)) (= (swap_plus_one i k) (- k 1)))))

;; get_swap_plus_one_valt
  (assert
  (forall ((i Int) (k Int)) (=> (= i k) (= (swap_plus_one i k) (+ k 1)))))

;; get_swap_plus_one
  (assert
  (forall ((i Int) (k Int))
  (= (swap_plus_one i k) (ite (= k i) (+ k 1) (ite (= k (+ i 1)) (- k 1) k)))))

;; swap_plus_one_def
  (assert
  (forall ((i Int) (k Int))
  (ite (= k i) (= (swap_plus_one i k) (+ k 1))
  (ite (= k (+ i 1)) (= (swap_plus_one i k) (- k 1))
  (= (swap_plus_one i k) k)))))

;; iter_comp_transl_plus_one
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int))
  (= (iter_comp a f i j) (iter_comp a (fc237 a f) (+ i 1) (+ j 1))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (b Int))
  (= (infix_at (infix_mngt a a) int (fc237 a f) (t2tb2 b)) (infix_at
                                                           (infix_mngt a a)
                                                           int f
                                                           (t2tb2 (- b 1)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni)) (sort (infix_mngt int (infix_mngt a a)) (fc237 a x)))))

;; iter_comp_transl
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (k Int))
  (= (iter_comp a f i j) (iter_comp a (fc236 a f k) (- i k) (- j k))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (k Int) (b Int))
  (= (infix_at (infix_mngt a a) int (fc236 a f k) (t2tb2 b)) (infix_at
                                                             (infix_mngt a a)
                                                             int f
                                                             (t2tb2 (+ b k)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int)) (sort (infix_mngt int (infix_mngt a a))
  (fc236 a x x1)))))

;; iter_comp_eq_gen
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni) (i Int) (i1 Int) (j Int) (j1 Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (infix_at (infix_mngt a a) int f (t2tb2 k)) (infix_at (infix_mngt a a)
                                                 int g (t2tb2 k)))))
  (=> (= i i1) (=> (= j j1) (= (iter_comp a f i j) (iter_comp a g i1 j1))))))))

;; iter_comp_eq
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (infix_at (infix_mngt a a) int f (t2tb2 k)) (infix_at (infix_mngt a a)
                                                 int g (t2tb2 k)))))
  (= (iter_comp a f i j) (iter_comp a g i j))))))

;; iter_comp_transitivity
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (iter_comp a f i j) (comp_func a (iter_comp a f i k)
                         (iter_comp a f k j)))))))

;; iter_comp_right_extension_value
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (e uni))
  (=> (< i j)
  (= (infix_at a a (iter_comp a f i j) e) (infix_at a a
                                          (iter_comp a f i (- j 1))
                                          (infix_at a a
                                          (infix_at (infix_mngt a a) 
                                          int f (t2tb2 (- j 1))) e)))))))

;; iter_comp_right_extension
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int))
  (=> (< i j)
  (= (iter_comp a f i j) (comp_func a (iter_comp a f i (- j 1))
                         (infix_at (infix_mngt a a) int f (t2tb2 (- j 1)))))))))

;; iter_comp_def_plus_one_com
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int))
  (=> (< i j)
  (= (comp_func a (infix_at (infix_mngt a a) int f (t2tb2 i))
     (iter_comp a f (+ i 1) j)) (iter_comp a f i j))))))

;; iter_comp_cardone
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int))
  (=> (= j (+ i 1))
  (= (iter_comp a f i j) (infix_at (infix_mngt a a) int f (t2tb2 i)))))))

;; iter_comp_plus_one_value
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (e uni))
  (=> (< i j)
  (= (infix_at a a (iter_comp a f i j) e) (infix_at a a
                                          (infix_at (infix_mngt a a) 
                                          int f (t2tb2 i))
                                          (infix_at a a
                                          (iter_comp a f (+ i 1) j) e)))))))

;; iter_comp_plus_one
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int))
  (=> (< i j)
  (= (iter_comp a f i j) (comp_func a
                         (infix_at (infix_mngt a a) int f (t2tb2 i))
                         (iter_comp a f (+ i 1) j)))))))

;; iter_comp_empty
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int))
  (=> (<= j i) (= (iter_comp a f i j) (identity a))))))

;; comp_func_neutral_right
  (assert
  (forall ((a ty))
  (forall ((f uni))
  (=> (sort (infix_mngt a a) f) (= (comp_func a f (identity a)) f)))))

;; comp_func_neutral_left
  (assert
  (forall ((a ty))
  (forall ((f uni))
  (=> (sort (infix_mngt a a) f) (= (comp_func a (identity a) f) f)))))

;; iter_comp_def
  (assert
  (forall ((a ty))
  (forall ((t2 uni) (i Int) (j Int))
  (= (iter_comp a t2 i j) (int_iterate (infix_mngt a a) (comp_func_closure a)
                          t2 i j)))))

;; iter_comp_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt a a)
  (iter_comp a x x1 x2)))))

;; neutral_id
  (assert
  (forall ((a ty))
  (and (neutral (infix_mngt a a) (comp_func_closure a) (identity a))
  (iterable (infix_mngt a a) (comp_func_closure a)))))

;; comp_func_closure_def
  (assert
  (forall ((a ty))
  (forall ((y uni) (y1 uni))
  (= (infix_at (infix_mngt a a) (infix_mngt a a)
     (infix_at (infix_mngt (infix_mngt a a) (infix_mngt a a))
     (infix_mngt a a) (comp_func_closure a) y) y1) (comp_func a y y1)))))

;; comp_func_closure_sort
  (assert
  (forall ((a ty)) (sort
  (infix_mngt (infix_mngt a a)
  (infix_mngt (infix_mngt a a) (infix_mngt a a))) (comp_func_closure a))))

;; comp_func_eq
  (assert
  (forall ((a ty))
  (forall ((f1 uni) (f2 uni) (g1 uni) (g2 uni))
  (=> (= f1 f2) (=> (= g1 g2) (= (comp_func a f1 g1) (comp_func a f2 g2)))))))

;; comp_func_apply
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni))
  (forall ((a1 uni))
  (= (infix_at a a (comp_func a f g) a1) (infix_at a a f (infix_at a a g a1)))))))

;; comp_func_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni))
  (forall ((a1 uni))
  (= (infix_at a a (comp_func a f g) a1) (infix_at a a f (infix_at a a g a1)))))))

;; comp_func_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a a) (comp_func a x x1)))))

;; qqft_mat_spec
  (assert (forall ((n Int)) (=> (<= 1 n) (= (qqft_mat n) (qqft n)))))

;; qqft_mat_def
  (assert
  (forall ((n Int))
  (=> (<= 1 n)
  (ite (= n 1) (= (qqft_mat n) hadamard)
  (= (qqft_mat n) (mat_mult
                  (mat_mult (kronecker qbit_id (qqft_mat (- n 1)))
                  (casCtrlR n)) (had_identity n)))))))

;; qqft_plus_one
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (mat_mult (id_qqft_cas n) (had_identity n)) (qqft n)))))

;; qqft_plus_one_indexes
  (assert
  (forall ((n Int))
  (=> (< 1 n)
  (= (mat_mult (id_qqft_cas n) (had_identity n)) (tb2t17
                                                 (make_f t1 (power 2 n)
                                                 (power 2 n)
                                                 (t2tb13 (fc235 n))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc235 n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt (cpower (infix_sldt tone squarert_two) n)
                 (p_omega n (* (int_bit_inversion i n) j))))))

;; qft_indexes_rew
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 1 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (infix_asdt
     (infix_asdt
     (p_omega (- n 1)
     (* (int_bit_inversion (tail_bits i n) (- n 1)) (tail_bits j n)))
     (p_omega n (* (head_bit i n) (tail_bits j n))))
     (p_omega n (* (* (head_bit i n) (head_bit j n)) (power 2 (- n 1))))) 
  (p_omega n (* (int_bit_inversion i n) j))))))))

;; omega_indexes_prod
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 1 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (p_omega n (* (int_bit_inversion i n) j)) (p_omega n
                                               (+ (+ (* (* (int_bit_inversion
                                                           (tail_bits i n)
                                                           (- n 1)) 2) 
                                               (tail_bits j n)) (* (* 
                                               (head_bit i n) (head_bit j n)) 
                                               (power 2 (- n 1)))) (* 
                                               (head_bit i n) (tail_bits j n))))))))))

;; indexes_prod
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 1 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (* (int_bit_inversion i n) j) (+ (+ (+ (* (* (int_bit_inversion
                                                  (tail_bits i n) (- n 1)) 2) (* 
  (power 2 (- n 1)) (head_bit j n))) (* (* (int_bit_inversion (tail_bits i n)
                                           (- n 1)) 2) (tail_bits j n))) (* (* 
  (head_bit i n) (head_bit j n)) (power 2 (- n 1)))) (* (head_bit i n) 
  (tail_bits j n)))))))))

;; qqft_rec
  (assert
  (forall ((n Int))
  (=> (< 1 n)
  (= (mat_mult (id_qqft_cas n) (had_identity n)) (tb2t17
                                                 (make_f t1 (power 2 n)
                                                 (power 2 n)
                                                 (t2tb13 (fc234 n))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc234 n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (infix_asdt
                 (infix_asdt (cpower (infix_sldt tone squarert_two) n)
                 (p_omega (- n 1)
                 (* (int_bit_inversion (tail_bits i n) (- n 1)) (tail_bits j
                                                                n))))
                 (p_omega n (* (head_bit i n) (tail_bits j n))))
                 (p_omega n
                 (* (* (head_bit i n) (head_bit j n)) (power 2 (- n 1))))))))

;; had_identity_diag_two
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (had_identity n) (diag_two_mat n (fc233 n))))))

;; fc_def
  (assert
  (forall ((n Int) (hi Int) (hj Int) (us Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int
     (infix_at (infix_mngt int (infix_mngt int t1)) int (t2tb23 (fc233 n))
     (t2tb2 hi)) (t2tb2 hj)) (t2tb2 us))) (infix_asdt
                                          (infix_sldt tone squarert_two)
                                          (p_omega n
                                          (* (* hi hj) (power 2 (- n 1))))))))

;; had_identity_spec
  (assert
  (forall ((n Int))
  (=> (< 1 n)
  (= (had_identity n) (tb2t17
                      (make_f t1 (power 2 n) (power 2 n) (t2tb13 (fc232 n))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc232 n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (infix_asdt
                 (indic int (t2tb2 (tail_bits i n)) (t2tb2 (tail_bits j n)))
                 (infix_sldt tone squarert_two))
                 (p_omega n
                 (* (* (head_bit i n) (head_bit j n)) (power 2 (- n 1))))))))

;; had_identity_def
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (had_identity n) (kronecker hadamard (identity1 (- n 1)))))))

;; id_qqft_cas_spec
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (id_qqft_cas n) (two_bloc_diag_mat n (fc231 n))))))

;; fc_def
  (assert
  (forall ((n Int) (hj Int) (ti Int) (tj Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int
     (infix_at (infix_mngt int (infix_mngt int t1)) int (t2tb23 (fc231 n))
     (t2tb2 hj)) (t2tb2 ti)) (t2tb2 tj))) (infix_asdt
                                          (infix_asdt
                                          (cpower
                                          (infix_sldt tone squarert_two)
                                          (- n 1))
                                          (p_omega (- n 1)
                                          (* (int_bit_inversion ti (- n 1)) tj)))
                                          (p_omega n (* hj tj))))))

;; id_qqft_cas_def
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (id_qqft_cas n) (mat_mult (id_qqft n) (casCtrlR n))))))

;; casCtrlR_rew_guarded
  (assert
  (forall ((n Int))
  (=> (<= 2 n) (= (casCtrlR n) (diag_mat (power 2 n) (fc230 n))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc230 n)) (t2tb2 i))) (ite (and
                                                                 (<= 0 i)
                                                                 (< i 
                                                                 (power 2 n)))
                                                            (p_omega n
                                                            (* (head_bit i n) 
                                                            (tail_bits i n)))
                                                            tone))))

;; casCtrlR_rew
  (assert
  (forall ((n Int))
  (=> (<= 2 n) (= (casCtrlR n) (diag_mat (power 2 n) (fc229 n))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc229 n)) (t2tb2 i))) (p_omega n
                                                            (* (head_bit i n) 
                                                            (tail_bits i n))))))

;; cas_coeffs
  (assert
  (forall ((n Int) (i Int))
  (=> (<= 2 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (ind_product (fc228 n i) 2 (+ n 1)) (p_omega n
                                         (* (head_bit i n) (tail_bits i n))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc228 n i)) (t2tb2 k))) (p_omega n
                                                              (* (head_bit i
                                                                 n) (* 
                                                              (kth_bit_l i n
                                                              k) (power 2
                                                                 (- n k))))))))

;; casCtrlR_spec
  (assert
  (forall ((n Int))
  (=> (<= 1 n)
  (=> (<= 2 n) (= (casCtrlR n) (diag_mat (power 2 n) (fc227 n)))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc227 n)) (t2tb2 i))) (ind_product
                                                            (fc226 n i) 2
                                                            (+ n 1)))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc226 n i)) (t2tb2 k))) (p_omega n
                                                              (* (head_bit i
                                                                 n) (* 
                                                              (kth_bit_l i n
                                                              k) (power 2
                                                                 (- n k))))))))

;; casCtrlR_def
  (assert
  (forall ((n Int))
  (=> (<= 1 n)
  (=> (<= 2 n) (= (casCtrlR n) (int_mat_prod (result31 n) 2 n))))))

;; result_def
  (assert
  (forall ((n Int) (k Int))
  (= (tb2t17 (infix_at (matrix1 t1) int (t2tb20 (result31 n)) (t2tb2 k))) 
  (ite (and (<= 1 k) (<= k n)) (ctrlR k n) qbit_id))))

;; ctrlR_spec
  (assert
  (forall ((t2 Int) (n Int))
  (=> (and (<= 1 t2) (<= t2 n))
  (and (= (ctrlR t2 n) (diag_mat (power 2 n) (fc224 t2 n)))
  (and (= (ctrlR t2 n) (diag_mat (power 2 n) (fc225 t2 n)))
  (and (= (rows t1 (t2tb17 (ctrlR t2 n))) (power 2 n))
  (= (columns t1 (t2tb17 (ctrlR t2 n))) (power 2 n))))))))

;; fc_def
  (assert
  (forall ((t2 Int) (n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc225 t2 n)) (t2tb2 i))) (p_omega n
                                                               (* (head_bit i
                                                                  n) (* 
                                                               (kth_bit_l i n
                                                               t2) (power 2
                                                                   (- n t2))))))))

;; fc_def
  (assert
  (forall ((t2 Int) (n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc224 t2 n)) (t2tb2 i))) (p_omega t2
                                                               (* (head_bit i
                                                                  n) 
                                                               (kth_bit_l i n
                                                               t2))))))

;; ctrlR_def
  (assert
  (forall ((t2 Int) (n Int))
  (=> (and (<= 1 t2) (<= t2 n)) (= (ctrlR t2 n) (cont_R 1 t2 n)))))

;; cont_R_spec
  (assert
  (forall ((c Int) (t2 Int) (n Int))
  (=> (and (<= 1 t2) (<= t2 n))
  (=> (and (<= 1 c) (<= c n))
  (and (= (cont_R c t2 n) (diag_mat (power 2 n) (fc222 c t2 n)))
  (and (= (cont_R c t2 n) (diag_mat (power 2 n) (fc223 c t2 n)))
  (and (= (rows t1 (t2tb17 (cont_R c t2 n))) (power 2 n))
  (= (columns t1 (t2tb17 (cont_R c t2 n))) (power 2 n)))))))))

;; fc_def
  (assert
  (forall ((c Int) (t2 Int) (n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc223 c t2 n)) (t2tb2 i))) (p_omega n
                                                                 (* (kth_bit_l
                                                                    i n c) (* 
                                                                 (kth_bit_l i
                                                                 n t2) 
                                                                 (power 2
                                                                 (- n t2))))))))

;; fc_def
  (assert
  (forall ((c Int) (t2 Int) (n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc222 c t2 n)) (t2tb2 i))) (p_omega t2
                                                                 (* (kth_bit_l
                                                                    i n c) 
                                                                 (kth_bit_l i
                                                                 n t2))))))

;; cont_R_def
  (assert
  (forall ((c Int) (t2 Int) (n Int))
  (=> (and (<= 1 t2) (<= t2 n))
  (=> (and (<= 1 c) (<= c n))
  (= (cont_R c t2 n) (diag_mat (power 2 n) (result30 c t2 n)))))))

;; result_def
  (assert
  (forall ((c Int) (t2 Int) (n Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (result30 c t2 n)) (t2tb2 i))) (ite 
                                                                    (and
                                                                    (<= 0 i)
                                                                    (< i 
                                                                    (power 2
                                                                    n)))
                                                                    (p_omega
                                                                    t2
                                                                    (* 
                                                                    (kth_bit_l
                                                                    i n c) 
                                                                    (kth_bit_l
                                                                    i n t2)))
                                                                    tzero))))

;; id_qqft_bloc_diag_guarded
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (id_qqft n) (two_bloc_diag_mat n (fc221 n))))))

;; fc_def
  (assert
  (forall ((n Int) (us Int) (ti Int) (tj Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int
     (infix_at (infix_mngt int (infix_mngt int t1)) int (t2tb23 (fc221 n))
     (t2tb2 us)) (t2tb2 ti)) (t2tb2 tj))) (ite (and (<= 0 ti) (<= 0 tj))
                                          (infix_asdt
                                          (cpower
                                          (infix_sldt tone squarert_two)
                                          (- n 1))
                                          (p_omega (- n 1)
                                          (* (int_bit_inversion ti (- n 1)) tj)))
                                          tone))))

;; id_qqft_bloc_diag
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (id_qqft n) (two_bloc_diag_mat n (fc220 n))))))

;; fc_def
  (assert
  (forall ((n Int) (us Int) (ti Int) (tj Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int
     (infix_at (infix_mngt int (infix_mngt int t1)) int (t2tb23 (fc220 n))
     (t2tb2 us)) (t2tb2 ti)) (t2tb2 tj))) (infix_asdt
                                          (cpower
                                          (infix_sldt tone squarert_two)
                                          (- n 1))
                                          (p_omega (- n 1)
                                          (* (int_bit_inversion ti (- n 1)) tj))))))

;; id_qqft_spec
  (assert
  (forall ((n Int))
  (=> (< 1 n)
  (= (id_qqft n) (tb2t17
                 (make_f t1 (power 2 n) (power 2 n) (t2tb13 (fc219 n))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc219 n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (infix_asdt (cpower (infix_sldt tone squarert_two) (- n 1))
                 (indic int (t2tb2 (head_bit i n)) (t2tb2 (head_bit j n))))
                 (p_omega (- n 1)
                 (* (int_bit_inversion (tail_bits i n) (- n 1)) (tail_bits j
                                                                n)))))))

;; id_qqft_def
  (assert
  (forall ((n Int))
  (=> (< 1 n) (= (id_qqft n) (kronecker qbit_id (qqft (- n 1)))))))

;; qqft_val
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (tb2t9 (get t1 (t2tb17 (qqft n)) i j)) (infix_asdt
                                            (cpower
                                            (infix_sldt tone squarert_two) n)
                                            (p_omega n
                                            (* (int_bit_inversion i n) j))))))))))

;; ht_qbit_id
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i (power 2 n))) (and (<= 0 j) (< j (power 2 n))))
  (= (tb2t9
     (get t1 (t2tb17 qbit_id) (div i (power 2 (- n 1)))
     (div j (power 2 (- n 1))))) (indic int (t2tb2 (head_bit i n))
                                 (t2tb2 (head_bit j n)))))))))

;; ht_qbit_id_values
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (tb2t9
     (get t1 (t2tb17 qbit_id) (div i (power 2 (- n 1)))
     (div j (power 2 (- n 1))))) (indic int (t2tb2 (head_bit i n))
                                 (t2tb2 (head_bit j n)))))))))

;; qqft_spec
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (= (qqft n) (tb2t17 (make_f t1 (power 2 n) (power 2 n) (t2tb13 (fc218 n))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc218 n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt (cpower (infix_sldt tone squarert_two) n)
                 (p_omega n (* (int_bit_inversion i n) j))))))

;; qqft_def
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (= (qqft n) (tb2t17
              (make_f t1 (power 2 n) (power 2 n) (t2tb13 (result29 n))))))))

;; result_def
  (assert
  (forall ((n Int) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result29 n)) (t2tb2 i))
     (t2tb2 j))) (ite (and (and (<= 0 i) (< i (power 2 n))) (<= 0 j))
                 (infix_asdt (cpower (infix_sldt tone squarert_two) n)
                 (p_omega n (* (int_bit_inversion i n) j))) tone))))

;; bv_inversion_mult_ht
  (assert
  (forall ((fx (Array Int Int)) (fy (Array Int Int)) (n Int))
  (=> (< 1 n)
  (= (* (bv_to_int (make_bv_m fx n)) (bv_to_int
                                     (bv_inversion (make_bv_m fy n)))) (+ (+ (* 
  (head (make_bv_m fy n)) (bv_to_int (make_bv_m fx n))) (* (bv_to_int
                                                           (tail
                                                           (make_bv_m fx n))) (* 2 
  (bv_to_int (bv_inversion (tail (make_bv_m fy n))))))) (* (power 2 n) (* 
  (head (make_bv_m fx n)) (bv_to_int (bv_inversion (tail (make_bv_m fy n)))))))))))

;; bv_to_int_ht
  (assert
  (forall ((f (Array Int Int)) (n Int))
  (=> (< 1 n)
  (= (bv_to_int (make_bv_m f n)) (+ (* (power 2 (- n 1)) (head
                                                         (make_bv_m f n))) 
  (bv_to_int (tail (make_bv_m f n))))))))

;; bv_inversion_ht
  (assert
  (forall ((f (Array Int Int)) (n Int))
  (=> (< 1 n)
  (= (bv_to_int (bv_inversion (make_bv_m f n))) (+ (head (make_bv_m f n)) (* 2 
  (bv_to_int (bv_inversion (tail (make_bv_m f n))))))))))

;; int_bit_inversion_ht
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_bit_inversion i n) (+ (* 2 (int_bit_inversion (tail_bits i n)
                                     (- n 1))) (head_bit i n)))))))

;; tail_bits_int_bit_inversion
  (assert
  (forall ((bv1 (Array Int Int)) (n Int))
  (=> (< 1 n)
  (= (tail_bits (int_bit_inversion (bv_to_int (make_bv_m bv1 n)) n) n) 
  (ind_isum (fc217 bv1 n) 2 (+ n 1))))))

;; fc_def
  (assert
  (forall ((bv1 (Array Int Int)) (n Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc217 bv1 n)) (t2tb2 k))) (* (mod 
  (tb2t2 (infix_at int int (t2tb8 bv1) (t2tb2 (+ (- n k) 1)))) 2) (power 2
                                                                  (- n k))))))

;; int_bit_inversion_tail_bits
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_bit_inversion (tail_bits i n) (- n 1)) (ind_isum (fc216 i n) 1 n))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc216 i n)) (t2tb2 k))) (* (getbv
                                                                 (int_to_bv i
                                                                 n)
                                                                 (+ (- n k) 1)) 
  (power 2 (- (- n k) 1))))))

;; bv_m_to_int_bit_inversion
  (assert
  (forall ((f (Array Int Int)) (n Int))
  (=> (< 0 n)
  (= (bv_to_int (bv_inversion (make_bv_m f n))) (int_bit_inversion
                                                (bv_to_int (make_bv_m f n))
                                                n)))))

;; bv_to_int_inversion_sum_inc
  (assert
  (forall ((bv1 bitvec))
  (=> (< 0 (length bv1))
  (= (bv_to_int (bv_inversion bv1)) (ind_isum (fc215 bv1) 1
                                    (+ (length bv1) 1))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc215 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 k) (power 2
                                                                    (- k 1))))))

;; bv_to_int_bit_inversion
  (assert
  (forall ((bv1 bitvec))
  (=> (< 0 (length bv1))
  (= (bv_to_int (bv_inversion bv1)) (int_bit_inversion (bv_to_int bv1)
                                    (length bv1))))))

;; bv_to_int_inversion_sum
  (assert
  (forall ((bv1 bitvec))
  (= (bv_to_int (bv_inversion bv1)) (ind_isum (fc214 bv1) 1
                                    (+ (length bv1) 1)))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc214 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 (+ (- 
                                                                 (length bv1) k) 1)) 
  (power 2 (- (length bv1) k))))))

;; bv_inversion_sum
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_bit_inversion i n) (ind_isum (fc213 i n) 1 (+ n 1)))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc213 i n)) (t2tb2 k))) (* (getbv
                                                                 (int_to_bv i
                                                                 n)
                                                                 (+ (- n k) 1)) 
  (power 2 (- n k))))))

;; inversion_to_int_comm
  (assert
  (forall ((bv1 bitvec))
  (=> (< 0 (length bv1))
  (= (int_to_bv (int_bit_inversion (bv_to_int bv1) (length bv1))
     (length bv1)) (bv_inversion bv1)))))

;; bv_to_int_sum_inversion_inc
  (assert
  (forall ((bv1 bitvec))
  (=> (< 0 (length bv1))
  (= (int_bit_inversion (bv_to_int bv1) (length bv1)) (ind_isum (fc212 bv1) 1
                                                      (+ (length bv1) 1))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc212 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 k) (power 2
                                                                    (- k 1))))))

;; bv_to_int_sum_inversion
  (assert
  (forall ((bv1 bitvec))
  (=> (< 0 (length bv1))
  (= (int_bit_inversion (bv_to_int bv1) (length bv1)) (ind_isum (fc211 bv1) 1
                                                      (+ (length bv1) 1))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc211 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 (+ (- 
                                                                 (length bv1) k) 1)) 
  (power 2 (- (length bv1) k))))))

;; int_bit_inversion_onebit
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 2)) (= (int_bit_inversion i 1) i))))

;; int_bit_inversion_spec
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (and (<= 0 (int_bit_inversion i n))
  (< (int_bit_inversion i n) (power 2 n)))))))

;; int_bit_inversion_def
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_bit_inversion i n) (bv_to_int (bv_inversion (int_to_bv i n))))))))

;; bv_inversion_spec
  (assert
  (forall ((bv1 bitvec))
  (and (= (length (bv_inversion bv1)) (length bv1))
  (forall ((k Int))
  (=> (in_range (bv_inversion bv1) k)
  (= (getbv (bv_inversion bv1) k) (getbv bv1 (+ (- (length bv1) k) 1))))))))

;; bv_inversion_def
  (assert
  (forall ((bv1 bitvec))
  (= (bv_inversion bv1) (make_bv (result28 bv1) (length bv1)))))

;; result_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (result28 bv1)) (t2tb2 k))) (getbv bv1
                                                                 (+ (- 
                                                                 (length bv1) k) 1)))))

;; pow_hadamard_values_popcount
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (<= 0 n)
  (= (tb2t9 (get t1 (t2tb17 (pow hadamard n)) i j)) (infix_asdt
                                                    (pow_inv_sqrt_2 n)
                                                    (mop
                                                    (popcount
                                                    (tb2t8
                                                    (infix_at
                                                    (infix_mngt int int)
                                                    bitvec1
                                                    (t2tb26 getbv_closure)
                                                    (t2tb27
                                                    (int_bin_and_seq i j n))))
                                                    1 n))))))))))

;; bin_and_popcount
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (< 0 n)
  (= (ind_product (fc210 n i j) 1 (+ n 1)) (infix_asdt (pow_inv_sqrt_2 n)
                                           (mop
                                           (popcount
                                           (tb2t8
                                           (infix_at (infix_mngt int int)
                                           bitvec1 (t2tb26 getbv_closure)
                                           (t2tb27 (int_bin_and_seq i j n))))
                                           1 n)))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc210 n i j)) (t2tb2 k))) (infix_asdt
                                                                (infix_sldt
                                                                tone
                                                                squarert_two)
                                                                (mop
                                                                (bin_and
                                                                (getbv
                                                                (int_to_bv i
                                                                n) k)
                                                                (getbv
                                                                (int_to_bv j
                                                                n) k)))))))

;; mop_popcount_const
  (assert
  (forall ((t2 bitvec) (tqt bitvec) (j Int) (c t))
  (=> (<= 1 j)
  (=> (and (= (length t2) (length tqt)) (<= j (length tqt)))
  (= (ind_product (fc209 t2 tqt c) 1 (+ j 1)) (infix_asdt (cpower c j)
                                              (mop
                                              (popcount
                                              (tb2t8
                                              (infix_at (infix_mngt int int)
                                              bitvec1 (t2tb26 getbv_closure)
                                              (t2tb27 (bin_andv t2 tqt)))) 1
                                              j))))))))

;; fc_def
  (assert
  (forall ((t2 bitvec) (tqt bitvec) (c t) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc209 t2 tqt c)) (t2tb2 k))) (infix_asdt
                                                                   c
                                                                   (mop
                                                                   (bin_and
                                                                   (getbv t2
                                                                   k)
                                                                   (getbv tqt
                                                                   k)))))))

;; mop_popcount
  (assert
  (forall ((t2 bitvec) (tqt bitvec) (j Int))
  (=> (<= 1 j)
  (=> (and (= (length t2) (length tqt)) (<= j (length tqt)))
  (= (ind_product (fc208 t2 tqt) 1 (+ j 1)) (mop
                                            (popcount
                                            (tb2t8
                                            (infix_at (infix_mngt int int)
                                            bitvec1 (t2tb26 getbv_closure)
                                            (t2tb27 (bin_andv t2 tqt)))) 1 j)))))))

;; fc_def
  (assert
  (forall ((t2 bitvec) (tqt bitvec) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc208 t2 tqt)) (t2tb2 k))) (mop
                                                                 (bin_and
                                                                 (getbv t2 k)
                                                                 (getbv tqt
                                                                 k))))))

;; pow_hadamard_values_bin_and
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (< 0 n)
  (= (tb2t9 (get t1 (t2tb17 (pow hadamard n)) i j)) (ind_product
                                                    (fc207 n i j) 1 (+ n 1))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc207 n i j)) (t2tb2 k))) (infix_asdt
                                                                (infix_sldt
                                                                tone
                                                                squarert_two)
                                                                (mop
                                                                (bin_and
                                                                (getbv
                                                                (int_to_bv i
                                                                n) k)
                                                                (getbv
                                                                (int_to_bv j
                                                                n) k)))))))

;; pow_hadamard_values_bv
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (< 0 n)
  (= (tb2t9 (get t1 (t2tb17 (pow hadamard n)) i j)) (ind_product
                                                    (fc206 n i j) 1 (+ n 1))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc206 n i j)) (t2tb2 k))) (tb2t9
                                                                (get 
                                                                t1
                                                                (t2tb17
                                                                hadamard)
                                                                (getbv
                                                                (int_to_bv i
                                                                n) k)
                                                                (getbv
                                                                (int_to_bv j
                                                                n) k))))))

;; pow_hadamard_values_bit
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (< 0 n)
  (= (tb2t9 (get t1 (t2tb17 (pow hadamard n)) i j)) (ind_product
                                                    (fc205 n i j) 1 (+ n 1))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc205 n i j)) (t2tb2 k))) (tb2t9
                                                                (get 
                                                                t1
                                                                (t2tb17
                                                                hadamard)
                                                                (kth_bit_l i
                                                                n k)
                                                                (kth_bit_l j
                                                                n k))))))

;; had_values_omega_gen
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 hadamard) i j)
  (= (tb2t9 (get t1 (t2tb17 hadamard) i j)) (infix_asdt
                                            (infix_sldt tone squarert_two)
                                            (p_omega n
                                            (* (* i j) (power 2 (- n 1)))))))))))

;; had_values_omega
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (< 0 n)
  (=> (valid_index t1 (t2tb17 hadamard) i j)
  (= (tb2t9 (get t1 (t2tb17 hadamard) i j)) (infix_asdt
                                            (infix_sldt tone squarert_two)
                                            (p_omega n
                                            (* (* i j) (power 2 (- n 1))))))))))

;; had_values_bin_and
  (assert
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 hadamard) i j)
  (= (tb2t9 (get t1 (t2tb17 hadamard) i j)) (infix_asdt
                                            (infix_sldt tone squarert_two)
                                            (mop (bin_and i j)))))))

;; had_values
  (assert
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 hadamard) i j)
  (= (tb2t9 (get t1 (t2tb17 hadamard) i j)) (ite (and (= i j) (= j 1))
                                            (infix_sldt (prefix_mndt tone)
                                            squarert_two)
                                            (infix_sldt tone squarert_two))))))

;; fc_def
  (assert
  (forall ((i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 fc204) (t2tb2 i)) (t2tb2 j))) 
  (infix_asdt (infix_sldt tone squarert_two)
  (cpower (prefix_mndt tone) (* i j))))))

;; popcount_eq
  (assert
  (forall ((t2 (Array Int Int)) (tqt (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (<= k j))
  (= (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) (tb2t2
                                                     (infix_at int int
                                                     (t2tb8 tqt) (t2tb2 k))))))
  (=> (<= i j)
  (=> (is_binary t2 i (+ j 1)) (= (popcount t2 i j) (popcount tqt i j)))))))

;; popcount_right_extension_comm
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=> (is_binary t2 i (+ j 1))
  (= (+ (popcount t2 i (- j 1)) (tb2t2
                                (infix_at int int (t2tb8 t2) (t2tb2 j)))) 
  (popcount t2 i j))))))

;; popcount_one
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (is_binary t2 i (+ j 1))
  (=> (= j i)
  (= (popcount t2 i j) (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 i))))))))

;; popcount_zero
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (<= k j))
  (= (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) 0)))
  (=> (<= i j) (= (popcount t2 i j) 0)))))

;; popcount_left_extension
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=> (is_binary t2 i (+ j 1))
  (= (popcount t2 i j) (+ (popcount t2 (+ i 1) j) (tb2t2
                                                  (infix_at int int
                                                  (t2tb8 t2) (t2tb2 i)))))))))

;; popcount_right_extension
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=> (is_binary t2 i (+ j 1))
  (= (popcount t2 i j) (+ (popcount t2 i (- j 1)) (tb2t2
                                                  (infix_at int int
                                                  (t2tb8 t2) (t2tb2 j)))))))))

;; positive_popcount
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (<= i j) (=> (is_binary t2 i (+ j 1)) (<= 0 (popcount t2 i j))))))

;; popcount_spec
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (=> (is_binary t2 i (+ j 1))
  (and (= (popcount t2 i j) (ind_isum t2 i (+ j 1)))
  (<= 0 (popcount t2 i j)))))))

;; popcount_def
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (=> (is_binary t2 i (+ j 1))
  (ite (= j i)
  (= (popcount t2 i j) (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 i))))
  (= (popcount t2 i j) (+ (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 i))) 
  (popcount t2 (+ i 1) j))))))))

;; int_bin_and_seq_zero
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (=> (not (= 0 i)) (= j 0))
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k n)) (= (getbv (int_bin_and_seq i j n) k) 0)))))))))

;; int_bin_and_seq_inst
  (assert
  (forall ((i Int) (j Int) (n Int) (k Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (and (<= 1 k) (<= k n))
  (= (getbv (int_bin_and_seq i j n) k) (bin_and (getbv (int_to_bv i n) k)
                                       (getbv (int_to_bv j n) k)))))))))

;; int_bin_and_seq_spec
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k n))
  (= (getbv (int_bin_and_seq i j n) k) (bin_and (getbv (int_to_bv i n) k)
                                       (getbv (int_to_bv j n) k)))))
  (bvlength
  (tb2t8
  (infix_at (infix_mngt int int) bitvec1 (t2tb26 getbv_closure)
  (t2tb27 (int_bin_and_seq i j n)))) n)))))))

;; int_bin_and_seq_def
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (int_bin_and_seq i j n) (bin_andv (int_to_bv i n) (int_to_bv j n))))))))

;; bin_andv_values
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec) (k Int))
  (=> (= (length bv1) (length bv2))
  (=> (and (<= 1 k) (<= k (length bv1)))
  (= (getbv (bin_andv bv1 bv2) k) (bin_and (getbv bv1 k) (getbv bv2 k)))))))

;; bin_andv_spec
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (and (= (length (bin_andv bv1 bv2)) (length bv1))
  (and (= (bin_andv bv1 bv2) (make_bv (fc203 bv1 bv2) (length bv1)))
  (and (bvlength
  (tb2t8
  (infix_at (infix_mngt int int) bitvec1 (t2tb26 getbv_closure)
  (t2tb27 (bin_andv bv1 bv2)))) (length bv1))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i (length (bin_andv bv1 bv2))))
  (= (getbv (bin_andv bv1 bv2) i) (ite (and (= (getbv bv1 i) 1)
                                       (= (getbv bv2 i) 1))
                                  1 0))))))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc203 bv1 bv2)) (t2tb2 i))) (bin_and
                                                                  (getbv bv1
                                                                  i)
                                                                  (getbv bv2
                                                                  i)))))

;; bin_andv_def
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (= (bin_andv bv1 bv2) (make_bv (result27 bv1 bv2) (length bv1))))))

;; result_def
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (result27 bv1 bv2)) (t2tb2 i))) 
  (ite (and (<= 1 i) (<= i (length bv1)))
  (bin_and (getbv bv1 i) (getbv bv2 i)) 0))))

;; bin_and_spec
  (assert
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i 2))
  (=> (and (<= 0 j) (< j 2))
  (and (and (<= 0 (bin_and i j)) (< (bin_and i j) 2))
  (and (= (= (bin_and i j) 1) (and (= i 1) (= j 1)))
  (= (= (bin_and i j) 0) (or (= i 0) (= j 0)))))))))

;; bin_and_def
  (assert
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i 2))
  (=> (and (<= 0 j) (< j 2))
  (ite (and (= i 1) (= j 1)) (= (bin_and i j) 1) (= (bin_and i j) 0))))))

;; kth_decomp_bound_one
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 1 k) (<= k (length bv1)))
  (=> (= (getbv bv1 k) 1)
  (and
  (<= (+ (ind_isum (fc201 bv1) 1 k) (power 2 (- (length bv1) k))) (bv_to_int
                                                                  bv1))
  (< (bv_to_int bv1) (+ (ind_isum (fc202 bv1) 1 k) (power 2
                                                   (+ (- (length bv1) k) 1)))))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc202 bv1)) (t2tb2 l))) (ite (<= l 
                                                              (length bv1))
                                                              (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l)))
                                                              0))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc201 bv1)) (t2tb2 l))) (ite (<= l 
                                                              (length bv1))
                                                              (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l)))
                                                              0))))

;; kth_decomp_bound_zero
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 1 k) (<= k (length bv1)))
  (=> (= (getbv bv1 k) 0)
  (and (<= (ind_isum (fc199 bv1) 1 k) (bv_to_int bv1))
  (< (bv_to_int bv1) (+ (ind_isum (fc200 bv1) 1 k) (power 2
                                                   (- (length bv1) k)))))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc200 bv1)) (t2tb2 l))) (ite (<= l 
                                                              (length bv1))
                                                              (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l)))
                                                              0))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc199 bv1)) (t2tb2 l))) (ite (<= l 
                                                              (length bv1))
                                                              (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l)))
                                                              0))))

;; int_to_bv_prod_gen
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (forall ((j Int))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (ind_product (fc198 i n j) 1 (+ n 1)) (indic int (t2tb2 i) (t2tb2 j)))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc198 i n j)) (t2tb2 k))) (indic 
                                                                int
                                                                (t2tb2
                                                                (getbv
                                                                (int_to_bv i
                                                                n) k))
                                                                (t2tb2
                                                                (getbv
                                                                (int_to_bv j
                                                                n) k))))))

;; int_to_bv_prod
  (assert
  (forall ((i Int) (j Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (ind_product (fc197 i j n) 1 (+ n 1)) (indic int (t2tb2 i) (t2tb2 j))))))))

;; fc_def
  (assert
  (forall ((i Int) (j Int) (n Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc197 i j n)) (t2tb2 k))) (indic 
                                                                int
                                                                (t2tb2
                                                                (getbv
                                                                (int_to_bv i
                                                                n) k))
                                                                (t2tb2
                                                                (getbv
                                                                (int_to_bv j
                                                                n) k))))))

;; kth_decomp
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 1 k) (<= k (length bv1)))
  (= (bv_to_int bv1) (+ (+ (ind_isum (fc195 bv1) 1 k) (* (getbv bv1 k) 
  (power 2 (- (length bv1) k)))) (ind_isum (fc196 bv1) (+ k 1)
                                 (+ (length bv1) 1)))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc196 bv1)) (t2tb2 l))) (ite (<= l 
                                                              (length bv1))
                                                              (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l)))
                                                              0))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc195 bv1)) (t2tb2 l))) (ite (<= l 
                                                              (length bv1))
                                                              (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l)))
                                                              0))))

;; set_diff_val
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec) (i Int))
  (=> (= (length bv1) (length bv2))
  (=> (and (<= 1 i) (<= i (length bv1)))
  (=> (not (= (getbv bv1 i) (getbv bv2 i))) (not (= bv1 bv2)))))))

;; set_diff_length
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (not (= (length bv1) (length bv2))) (not (= bv1 bv2)))))

;; exists_first_div
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (=> (not (= bv1 bv2))
  (exists ((i Int))
  (and (and (<= 1 i) (<= i (length bv1))) (= i (first_div bv1 bv2))))))))

;; inf_first_div
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (=> (not (= bv1 bv2))
  (forall ((j Int))
  (=> (<= 1 j)
  (=> (not (= (getbv bv1 j) (getbv bv2 j))) (<= (first_div bv1 bv2) j))))))))

;; injective_concat
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (<= i 1)) (p_injective bitvec1 bitvec1 (t2tb31 (fc194 i))
  (t2tb32 (n_bvs n)))))))

;; fc_def
  (assert
  (forall ((i Int) (bv1 bitvec))
  (= (tb2t27 (infix_at bitvec1 bitvec1 (t2tb31 (fc194 i)) (t2tb27 bv1))) 
  (concat_l bv1 i))))

;; first_div_spec
  (assert
  (forall ((bv1 bitvec) (bv2 bitvec))
  (=> (= (length bv1) (length bv2))
  (=> (not (= bv1 bv2))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (< j (first_div bv1 bv2)))
  (= (getbv bv1 j) (getbv bv2 j))))
  (and
  (=> (<= (first_div bv1 bv2) (length bv1))
  (not (= (getbv bv1 (first_div bv1 bv2)) (getbv bv2 (first_div bv1 bv2)))))
  (and
  (and (<= 1 (first_div bv1 bv2))
  (<= (first_div bv1 bv2) (+ (length bv1) 1)))
  (=> (= (first_div bv1 bv2) (+ (length bv1) 1)) (= bv1 bv2)))))))))

;; map_n_bvs
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (= (to_fset 0 (power 2 n)) (tb2t1
                             (map1 int bitvec1 (t2tb33 bv_to_int_closure)
                             (t2tb32 (n_bvs n))))))))

;; bv_to_int_closure_def
  (assert
  (forall ((y bitvec))
  (= (tb2t2 (infix_at int bitvec1 (t2tb33 bv_to_int_closure) (t2tb27 y))) 
  (bv_to_int y))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb33 (tb2t33 j)) j) :pattern ((t2tb33 (tb2t33 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array bitvec Int)))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array bitvec Int))) (sort (infix_mngt bitvec1 int)
  (t2tb33 x))))

;; n_bvs_def_pos
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (= (n_bvs n) (tb2t32
               (union1 bitvec1
               (map1 bitvec1 bitvec1 (t2tb31 fc192) (t2tb32 (n_bvs (- n 1))))
               (map1 bitvec1 bitvec1 (t2tb31 fc193) (t2tb32 (n_bvs (- n 1))))))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t27 (infix_at bitvec1 bitvec1 (t2tb31 fc193) (t2tb27 bv1))) 
  (concat_l bv1 1))))

;; fc_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t27 (infix_at bitvec1 bitvec1 (t2tb31 fc192) (t2tb27 bv1))) 
  (concat_l bv1 0))))

;; mem_n_bvs
  (assert
  (forall ((n Int) (bv1 bitvec))
  (=> (= (length bv1) n) (mem bitvec1 (t2tb27 bv1) (t2tb32 (n_bvs n))))))

;; n_bvs_spec
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (and
  (forall ((f bitvec))
  (= (mem bitvec1 (t2tb27 f) (t2tb32 (n_bvs n))) (= (length f) n)))
  (< 0 (cardinal bitvec1 (t2tb32 (n_bvs n))))))))

;; n_bvs_def
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (ite (= n 0)
  (= (n_bvs n) (tb2t32
               (add bitvec1 (t2tb27 (make_bv result24 0)) (empty bitvec1))))
  (= (n_bvs n) (tb2t32
               (union1 bitvec1
               (map1 bitvec1 bitvec1 (t2tb31 result25)
               (t2tb32 (n_bvs (- n 1))))
               (map1 bitvec1 bitvec1 (t2tb31 result26)
               (t2tb32 (n_bvs (- n 1)))))))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 bitvec1) j) (= (t2tb32 (tb2t32 j)) j)) :pattern (
  (t2tb32 (tb2t32 j))) )))

;; BridgeL
  (assert
  (forall ((i (set bitvec)))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; t2tb_sort
  (assert (forall ((x (set bitvec))) (sort (set1 bitvec1) (t2tb32 x))))

;; result_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t27 (infix_at bitvec1 bitvec1 (t2tb31 result26) (t2tb27 bv1))) 
  (concat_l bv1 1))))

;; result_def
  (assert
  (forall ((bv1 bitvec))
  (= (tb2t27 (infix_at bitvec1 bitvec1 (t2tb31 result25) (t2tb27 bv1))) 
  (concat_l bv1 0))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt bitvec1 bitvec1) j) (= (t2tb31 (tb2t31 j)) j)) :pattern (
  (t2tb31 (tb2t31 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array bitvec bitvec)))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array bitvec bitvec))) (sort (infix_mngt bitvec1 bitvec1)
  (t2tb31 x))))

;; result_def
  (assert
  (forall ((i Int))
  (= (tb2t2 (infix_at int int (t2tb8 result24) (t2tb2 i))) 0)))

;; to_int_head_tail
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1))
  (and
  (= (bv_to_int bv1) (+ (bv_to_int (tail bv1)) (* (head bv1) (power 2
                                                             (- (length bv1) 1)))))
  (= (bv_to_int (tail bv1)) (mod (bv_to_int bv1) (power 2 (- (length bv1) 1))))))))

;; bv_to_int_mod_gen
  (assert
  (forall ((k Int) (n Int))
  (=> (and (<= 0 k) (< k n))
  (forall ((bv1 bitvec))
  (=> (= (length bv1) n)
  (= (mod (bv_to_int bv1) (power 2 (- (length bv1) k))) (ind_isum (fc191 bv1)
                                                        (+ k 1)
                                                        (+ (length bv1) 1))))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc191 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l))))))

;; bv_to_int_mod_rev
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (length bv1)))
  (= (ind_isum (fc190 bv1) (+ k 1) (+ (length bv1) 1)) (mod (bv_to_int bv1) 
  (power 2 (- (length bv1) k)))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc190 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l))))))

;; bv_to_int_mod
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 0 k) (< k (length bv1)))
  (= (mod (bv_to_int bv1) (power 2 (- (length bv1) k))) (ind_isum (fc189 bv1)
                                                        (+ k 1)
                                                        (+ (length bv1) 1))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc189 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l))))))

;; bounded_to_int
  (assert (forall ((bv1 bitvec)) (< (bv_to_int bv1) (power 2 (length bv1)))))

;; concat_to_int
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i 1))
  (= (bv_to_int (concat_l bv1 i)) (+ (bv_to_int bv1) (* i (power 2
                                                          (length bv1))))))))

;; int_to_bv_to_int_gen
  (assert
  (forall ((bv1 bitvec) (n Int))
  (=> (<= 1 (length bv1))
  (=> (= n (length bv1)) (= (int_to_bv (bv_to_int bv1) n) bv1)))))

;; int_to_bv_to_int
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (= (int_to_bv (bv_to_int bv1) (length bv1)) bv1))))

;; tail_bits_sum
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (<= 0 i)
  (=> (<= (binary_length i) n)
  (= (tail_bits i n) (ind_isum (fc188 i n) 2 (+ n 1))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc188 i n)) (t2tb2 l))) (* (getbv
                                                                 (int_to_bv i
                                                                 n) l) 
  (power 2 (- n l))))))

;; bv_to_int_to_bv
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (= (bv_to_int (int_to_bv i n)) i)))))

;; bound_sum_dec
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 1 i) (<= i (length bv1)))
  (< (ind_isum (fc187 bv1) i (+ (length bv1) 1)) (power 2
                                                 (+ (- (length bv1) i) 1))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc187 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l))))))

;; int_to_bv_tail
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_to_bv (tail_bits i n) (- n 1)) (tail (int_to_bv i n)))))))

;; int_to_bv_transl
  (assert
  (forall ((i Int) (k Int) (n Int) (t2 Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 1 t2) (and (< t2 k) (<= k n)))
  (= (getbv (int_to_bv (mod i (power 2 (- n t2))) (- n t2)) (- k t2)) 
  (getbv (int_to_bv i n) k))))))

;; int_to_sum_spec
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= i (ind_isum (fc186 i n) 1 (+ n 1)))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc186 i n)) (t2tb2 k))) (* (getbv
                                                                 (int_to_bv i
                                                                 n) k) 
  (power 2 (- n k))))))

;; int_to_sum_def
  (assert
  (forall ((i Int) (n Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n))) (= (int_to_sum i n) Tuple0)))))

;; int_to_bv_zero
  (assert
  (forall ((n Int))
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k n)) (= (getbv (int_to_bv 0 n) k) 0)))))

;; int_to_bv_value
  (assert
  (forall ((i Int) (n Int) (k Int))
  (=> (< 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 1 k) (<= k n))
  (= (getbv (int_to_bv i n) k) (kth_bit_l i n k)))))))

;; int_to_bv_spec
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (and
  (= (int_to_bv i n) (make_bv
                     (tb2t8
                     (infix_at (infix_mngt int int) int
                     (infix_at (infix_mngt int (infix_mngt int int)) 
                     int (t2tb30 kth_bit_l_closure) (t2tb2 i)) (t2tb2 n))) n))
  (and (= i (ind_isum (fc185 i n) 1 (+ n 1))) (= (length (int_to_bv i n)) n)))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc185 i n)) (t2tb2 k))) (* (getbv
                                                                 (int_to_bv i
                                                                 n) k) 
  (power 2 (- n k))))))

;; kth_bit_l_closure_def
  (assert
  (forall ((y Int) (y1 Int) (y2 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int
     (infix_at (infix_mngt int (infix_mngt int int)) int
     (t2tb30 kth_bit_l_closure) (t2tb2 y)) (t2tb2 y1)) (t2tb2 y2))) (kth_bit_l
                                                                    y y1 y2))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb30 (tb2t30 j)) j) :pattern ((t2tb30 (tb2t30 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int (Array Int (Array Int Int)))))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int (Array Int (Array Int Int))))) (sort
  (infix_mngt int (infix_mngt int (infix_mngt int int))) (t2tb30 x))))

;; int_to_bv_def
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (int_to_bv i n) (make_bv (result23 i n) n))))))

;; result_def
  (assert
  (forall ((i Int) (n Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (result23 i n)) (t2tb2 k))) (ite 
                                                                 (and
                                                                 (<= 1 k)
                                                                 (<= k n))
                                                                 (kth_bit_l i
                                                                 n k) 0))))

;; bv_to_int_kth_gen
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (<= 1 k) (<= k (length bv1)))
  (= (getbv bv1 k) (kth_bit_l (bv_to_int bv1) (length bv1) k)))))

;; bv_to_int_kth
  (assert
  (forall ((bv1 bitvec) (k Int))
  (=> (and (< 1 k) (<= k (length bv1)))
  (= (getbv bv1 k) (kth_bit_l (bv_to_int bv1) (length bv1) k)))))

;; bv_to_int_kth_pre
  (assert
  (forall ((bv1 bitvec) (n Int))
  (=> (and (<= 1 n) (<= n (length bv1)))
  (= (div (ind_isum (fc184 bv1) 1 (+ n 1)) (power 2 (- n 1))) (getbv bv1 n)))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc184 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- l 1))))))

;; ind_isum_mod_div
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 1 i) (< i (length bv1)))
  (and
  (= (mod (ind_isum (fc180 bv1) 1 (+ (length bv1) 1)) (power 2
                                                      (- (length bv1) i))) 
  (ind_isum (fc181 bv1) (+ i 1) (+ (length bv1) 1)))
  (= (div (ind_isum (fc182 bv1) 1 (+ (length bv1) 1)) (power 2
                                                      (- (length bv1) i))) 
  (ind_isum (fc183 bv1 i) 1 (+ i 1)))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (i Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc183 bv1 i)) (t2tb2 k))) (* (getbv bv1
                                                                   k) 
  (power 2 (- i k))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc182 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 k) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) k))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc181 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 k) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) k))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc180 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 k) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) k))))))

;; pow_inv_sqrt_2_neg_def
  (assert
  (forall ((i Int))
  (=> (<= 0 i) (= (pow_inv_sqrt_2_neg i) (prefix_mndt (pow_inv_sqrt_2 i))))))

;; ppos_neg_coeff_values
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (and (=> (= (even i) true) (= (pow_inv_sqrt_2 i) (neg_pow_inv_sqrt_2 i)))
  (and
  (=> (= (odd i) true)
  (= (pow_inv_sqrt_2 i) (prefix_mndt (neg_pow_inv_sqrt_2 i))))
  (= (neg_pow_inv_sqrt_2 i) (infix_asdt (mop i) (pow_inv_sqrt_2 i))))))))

;; neg_pow_inv_sqrt_2_values
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (= (neg_pow_inv_sqrt_2 i) (infix_asdt (mop i)
                            (infix_sldt tone (cpower squarert_two i)))))))

;; pow_inv_sqrt_2_values
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (= (pow_inv_sqrt_2 i) (infix_sldt tone (cpower squarert_two i))))))

;; neg_pow_inv_sqrt_2_def
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (= (neg_pow_inv_sqrt_2 i) (cpower
                            (infix_sldt (prefix_mndt tone) squarert_two) i)))))

;; pow_inv_sqrt_2_def
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (= (pow_inv_sqrt_2 i) (cpower (infix_sldt tone squarert_two) i)))))

;; factors_mop_rev
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (<= 0 j) (= (infix_asdt (mop i) (mop j)) (mop (+ i j)))))))

;; factors_mop
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (<= 0 j) (= (mop (+ i j)) (infix_asdt (mop i) (mop j)))))))

;; minus_one_power_values
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (and (=> (= (even i) true) (= (mop i) tone))
  (=> (= (odd i) true) (= (mop i) (prefix_mndt tone)))))))

;; mop_def
  (assert
  (forall ((i Int)) (=> (<= 0 i) (= (mop i) (cpower (prefix_mndt tone) i)))))

;; not_null_powers_squarert_two
  (assert
  (forall ((i Int)) (=> (<= 0 i) (not (= (cpower squarert_two i) tzero)))))

;; even_or_odd
  (assert (forall ((n Int)) (or (= (even n) true) (= (odd n) true))))

;; even_spec
  (assert (forall ((n Int)) (= (= (even n) true) (not (= (odd n) true)))))

;; even_def
  (assert
  (forall ((n Int))
  (ite (= (mod n 2) 0) (= (even n) true) (= (even n) false))))

;; odd_spec
  (assert
  (forall ((n Int))
  (and (=> (= (odd n) true) (= n (+ (* 2 (div n 2)) 1)))
  (=> (= (odd n) false) (= n (* 2 (div n 2)))))))

;; odd_def
  (assert
  (forall ((n Int)) (ite (= (mod n 2) 1) (= (odd n) true) (= (odd n) false))))

;; omega_ind_sum_to_prod
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int) (j Int))
  (=> (<= 0 n)
  (=> (<= 0 n)
  (= (p_omega n (ind_isum f i j)) (ind_product (fc179 n f i j) i j))))))

;; fc_def
  (assert
  (forall ((n Int) (f (Array Int Int)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc179 n f i j)) (t2tb2 k))) (ite 
                                                                  (and
                                                                  (<= i k)
                                                                  (< k j))
                                                                  (p_omega n
                                                                  (tb2t2
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb8 f)
                                                                  (t2tb2 k))))
                                                                  tone))))

;; omega_sum_to_prod
  (assert
  (forall ((a ty))
  (forall ((n Int) (f uni) (s uni))
  (=> (<= 0 n) (= (p_omega n (isum a s f)) (product a s (fc178 a n f)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((n Int) (f uni) (k uni))
  (= (tb2t9 (infix_at t1 a (fc178 a n f) k)) (p_omega n
                                             (tb2t2 (infix_at int a f k)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x Int) (x1 uni)) (sort (infix_mngt a t1) (fc178 a x x1)))))

;; p_omega_equiv_rev
  (assert
  (forall ((n Int) (k Int) (a Int))
  (=> (<= 0 n) (= (p_omega n (+ k (* (power 2 n) a))) (p_omega n k)))))

;; p_omega_equiv
  (assert
  (forall ((n Int) (k Int) (a Int))
  (=> (<= 0 n) (= (p_omega n k) (p_omega n (+ k (* a (power 2 n))))))))

;; p_omega_add
  (assert
  (forall ((n Int) (k Int) (nqt Int) (kqt Int))
  (=> (<= 0 n)
  (=> (<= 0 nqt)
  (= (infix_asdt (p_omega n k) (p_omega nqt kqt)) (ite (<= nqt n)
                                                  (p_omega n
                                                  (+ k (* kqt (power 2
                                                              (- n nqt)))))
                                                  (p_omega nqt
                                                  (+ kqt (* k (power 2
                                                              (- nqt n)))))))))))

;; p_omega_add_ord
  (assert
  (forall ((n Int) (k Int) (nqt Int) (kqt Int))
  (=> (and (<= n nqt) (<= 0 n))
  (= (infix_asdt (p_omega n k) (p_omega nqt kqt)) (p_omega nqt
                                                  (+ kqt (* k (power 2
                                                              (- nqt n)))))))))

;; p_omega_sum_units
  (assert
  (forall ((n Int) (nqt Int))
  (=> (<= 0 n)
  (=> (<= 0 nqt)
  (=> (<= n nqt)
  (= (infix_asdt (omega n) (omega nqt)) (p_omega nqt
                                        (+ 1 (power 2 (- nqt n))))))))))

;; p_omega_rt_two
  (assert
  (forall ((n Int))
  (=> (< 0 n) (= (p_omega n (power 2 (- n 1))) (prefix_mndt tone)))))

;; p_omega_minus_one
  (assert
  (forall ((n Int) (k Int))
  (=> (< 0 n) (= (p_omega n k) (p_omega (+ n 1) (* k 2))))))

;; p_omega_plus_one
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (= (p_omega n k) (p_omega (+ n 1) (* k 2))))))

;; p_omega_transl
  (assert
  (forall ((n Int) (nqt Int) (k Int))
  (=> (<= 0 n)
  (=> (<= 0 nqt)
  (=> (<= n nqt) (= (p_omega n k) (p_omega nqt (* k (power 2 (- nqt n))))))))))

;; omega_transl
  (assert
  (forall ((n Int) (nqt Int))
  (=> (<= 0 n)
  (=> (<= 0 nqt)
  (=> (<= n nqt) (= (omega n) (p_omega nqt (power 2 (- nqt n)))))))))

;; p_omega_mod_rest
  (assert
  (forall ((n Int) (k Int) (i Int))
  (=> (<= 0 n) (= (p_omega n (+ (* k (power 2 n)) i)) (p_omega n i)))))

;; p_omega_mod
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (= (p_omega n k) (p_omega n (mod k (power 2 n)))))))

;; p_omega_neut
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (=> (<= 0 k) (= (p_omega n (* (power 2 n) k)) tone)))))

;; p_omega_sum_rev_gen
  (assert
  (forall ((n Int) (nqt Int) (k Int) (kqt Int))
  (=> (<= 0 n)
  (=> (= n nqt)
  (= (infix_asdt (p_omega n k) (p_omega nqt kqt)) (p_omega n (+ k kqt)))))))

;; p_omega_sum_gen
  (assert
  (forall ((n Int) (nqt Int) (k Int) (kqt Int))
  (=> (<= 0 n)
  (=> (= n nqt)
  (= (p_omega n (+ k kqt)) (infix_asdt (p_omega n k) (p_omega nqt kqt)))))))

;; p_omega_sum_rev
  (assert
  (forall ((n Int) (k Int) (kqt Int))
  (=> (<= 0 n)
  (= (infix_asdt (p_omega n k) (p_omega n kqt)) (p_omega n (+ k kqt))))))

;; p_omega_sum
  (assert
  (forall ((n Int) (k Int) (kqt Int))
  (=> (<= 0 n)
  (= (p_omega n (+ k kqt)) (infix_asdt (p_omega n k) (p_omega n kqt))))))

;; exp_p_omega
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n)
  (= (p_omega n k) (exp
                   (infix_sldt
                   (infix_asdt
                   (infix_asdt (infix_asdt (i_to_t k) (infix_pldt tone tone))
                   pi1) im) (i_to_t (power 2 n))))))))

;; exp_omega
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (= (omega n) (exp
               (infix_sldt
               (infix_asdt (infix_asdt (infix_pldt tone tone) pi1) im)
               (i_to_t (power 2 n))))))))

;; p_unity_omega
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (= (p_unity (power 2 n) k) (p_omega n k)))))

;; p_omega_unity
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (= (p_omega n k) (p_unity (power 2 n) k)))))

;; p_omega_eq_gen
  (assert
  (forall ((n Int) (nqt Int) (k Int) (kqt Int))
  (=> (<= 0 n)
  (=> (= k kqt) (=> (= n nqt) (= (p_omega n k) (p_omega nqt kqt)))))))

;; p_omega_eq
  (assert
  (forall ((n Int) (k Int) (kqt Int))
  (=> (<= 0 n) (=> (= k kqt) (= (p_omega n k) (p_omega n kqt))))))

;; p_omega_to_omega
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (= (p_omega n k) (cpower (omega n) (mod k (power 2 n)))))))

;; p_omega_spec
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (= (p_omega n k) (p_unity (power 2 n) k)))))

;; p_omega_def
  (assert
  (forall ((n Int) (k Int))
  (=> (<= 0 n) (= (p_omega n k) (cpower (omega n) (mod k (power 2 n)))))))

;; omega_def
  (assert
  (forall ((n Int)) (=> (<= 0 n) (= (omega n) (unity_rt (power 2 n))))))

;; p_unity_neut
  (assert
  (forall ((n Int) (k Int))
  (=> (< 0 n) (=> (<= 0 k) (= (p_unity n (* n k)) tone)))))

;; unity_rt_trans
  (assert
  (forall ((n Int) (k Int))
  (=> (< 0 n) (=> (< 0 k) (= (unity_rt n) (cpower (unity_rt (* n k)) k))))))

;; exp_p_unity_spec
  (assert
  (forall ((n Int) (k Int))
  (=> (< 0 n)
  (= (p_unity n k) (exp
                   (infix_sldt
                   (infix_asdt
                   (infix_asdt
                   (infix_asdt (i_to_t (mod k n)) (infix_pldt tone tone))
                   pi1) im) (i_to_t n)))))))

;; exp_p_unity_def
  (assert
  (forall ((n Int) (k Int)) (=> (< 0 n) (= (exp_p_unity n k) Tuple0))))

;; p_unity_sum
  (assert
  (forall ((n Int) (k Int) (kqt Int))
  (=> (< 0 n)
  (= (p_unity n (+ k kqt)) (infix_asdt (p_unity n k) (p_unity n kqt))))))

;; p_unity_mod
  (assert
  (forall ((n Int) (k Int))
  (=> (< 0 n) (= (p_unity n k) (p_unity n (mod k n))))))

;; p_unity_def
  (assert
  (forall ((n Int) (k Int))
  (=> (< 0 n) (= (p_unity n k) (cpower (unity_rt n) (mod k n))))))

;; exp_mod
  (assert
  (forall ((k Int) (n Int))
  (=> (< 0 n)
  (= (exp
     (infix_sldt
     (infix_asdt (i_to_t k)
     (infix_asdt (infix_asdt im pi1) (infix_pldt tone tone))) (i_to_t n))) 
  (exp
  (infix_sldt
  (infix_asdt (i_to_t (mod k n))
  (infix_asdt (infix_asdt im pi1) (infix_pldt tone tone))) (i_to_t n)))))))

;; unity_rt_spec
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (and (= (cpower (unity_rt n) n) tone) (not (= (unity_rt n) tzero))))))

;; unity_rt_def
  (assert
  (forall ((n Int))
  (=> (< 0 n)
  (= (unity_rt n) (exp
                  (infix_sldt
                  (infix_asdt (infix_asdt im pi1) (infix_pldt tone tone))
                  (i_to_t n)))))))

;; comp_exp_cpower
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i)
  (=> (<= 0 j)
  (and (= (cpower (exp (i_to_t i)) j) (cpower (exp tone) (* i j)))
  (= (cpower (exp (i_to_t i)) j) (exp (i_to_t (* i j)))))))))

;; exp_two_pi_mul_den_add
  (assert
  (forall ((k Int) (l Int) (m Int))
  (=> (<= 0 (* k m))
  (= (exp
     (infix_asdt (i_to_t (+ (* k m) l))
     (infix_asdt (infix_asdt im pi1) (infix_pldt tone tone)))) (exp
                                                               (infix_asdt
                                                               (i_to_t l)
                                                               (infix_asdt
                                                               (infix_asdt 
                                                               im pi1)
                                                               (infix_pldt
                                                               tone tone))))))))

;; exp_two_pi_mul_den
  (assert
  (forall ((k Int) (l Int))
  (=> (not (= k 0))
  (= (exp
     (infix_sldt
     (infix_asdt (i_to_t (* k l))
     (infix_asdt (infix_asdt im pi1) (infix_pldt tone tone))) (i_to_t k))) 
  tone))))

;; exp_two_pi_mul
  (assert
  (forall ((k Int))
  (=> (<= 0 k)
  (= (exp
     (infix_asdt (i_to_t k)
     (infix_asdt (infix_asdt im pi1) (infix_pldt tone tone)))) tone))))

;; exp_mult
  (assert
  (forall ((x t) (y Int))
  (= (exp (infix_asdt x (i_to_t y))) (cpower (exp x) y))))

;; exp_inv
  (assert
  (forall ((i t))
  (=> (not (= (exp i) tzero))
  (= (exp (prefix_mndt i)) (infix_sldt tone (exp i))))))

;; exp_sum
  (assert
  (forall ((x t) (y t))
  (= (exp (infix_pldt x y)) (infix_asdt (exp x) (exp y)))))

;; Exp_sum
  (assert
  (forall ((x t) (y t))
  (= (exp (infix_pldt x y)) (infix_asdt (exp x) (exp y)))))

;; unicity_exp
  (assert
  (forall ((k t) (m Int) (n Int))
  (=> (infix_lsdt tone k) (= (= (cpower k m) (cpower k n)) (= m n)))))

;; cpower_comm
  (assert
  (forall ((x t) (y t) (n Int))
  (=> (infix_lseqdt tone x)
  (=> (infix_lseqdt tone y)
  (= (cpower (infix_asdt x y) n) (infix_asdt (cpower x n) (cpower y n)))))))

;; cpower_comm_pos
  (assert
  (forall ((x t) (y t) (n Int))
  (=> (infix_lseqdt tone x)
  (=> (infix_lseqdt tone y)
  (=> (<= 0 n)
  (= (cpower (infix_asdt x y) n) (infix_asdt (cpower x n) (cpower y n))))))))

;; positive_exp
  (assert
  (forall ((k t) (m Int))
  (=> (infix_lseqdt tone k) (infix_lsdt tzero (cpower k m)))))

;; strict_growing_exp
  (assert
  (forall ((k t) (m Int) (n Int))
  (=> (infix_lsdt tone k)
  (=> (< m n) (infix_lsdt (cpower k m) (cpower k n))))))

;; growing_exp
  (assert
  (forall ((k t) (m Int) (n Int))
  (=> (infix_lseqdt tone k)
  (=> (<= m n) (infix_lseqdt (cpower k m) (cpower k n))))))

;; growing_exp_pos
  (assert
  (forall ((k t) (m Int) (n Int))
  (=> (infix_lseqdt tone k)
  (=> (and (<= 0 m) (<= m n)) (infix_lseqdt (cpower k m) (cpower k n))))))

;; int_exp_neg
  (assert
  (forall ((k t) (n Int))
  (=> (infix_lseqdt tone k)
  (=> (< n 0)
  (and (infix_lseqdt (cpower k n) tone)
  (and (infix_gtdt (cpower k n) tzero) (infix_lseqdt (cpower k n)
  (cpower k (+ n 1)))))))))

;; strict_int_exp_neg
  (assert
  (forall ((k t) (n Int))
  (=> (infix_lsdt tone k)
  (=> (< n 0)
  (and (infix_lsdt (cpower k n) tone)
  (and (infix_lsdt (cpower k (- n 1)) (cpower k n)) (infix_lsdt (cpower k n)
  (cpower k (+ n 1)))))))))

;; strict_int_exp_pos
  (assert
  (forall ((k t) (n Int))
  (=> (infix_lsdt tone k)
  (=> (< 0 n)
  (and (infix_gtdt (cpower k n) tone)
  (and (infix_lsdt (cpower k (- n 1)) (cpower k n)) (infix_lsdt (cpower k n)
  (cpower k (+ n 1)))))))))

;; int_exp_pos
  (assert
  (forall ((k t) (n Int))
  (=> (infix_lseqdt tone k)
  (=> (<= 0 n)
  (and (infix_gteqdt (cpower k n) tone)
  (and (infix_gtdt (cpower k n) tzero) (infix_lseqdt (cpower k n)
  (cpower k (+ n 1)))))))))

;; init_exp
  (assert
  (forall ((k t))
  (and (= (cpower k 0) tone)
  (and (= (cpower k 1) k) (= (cpower k 2) (infix_asdt k k))))))

;; strict_growing_mult_pos
  (assert
  (forall ((n t) (m t))
  (=> (infix_lsdt tone n)
  (=> (infix_lsdt tone m) (infix_lsdt n (infix_asdt n m))))))

;; growing_mult
  (assert
  (forall ((n t) (m t))
  (=> (infix_lseqdt tzero n)
  (=> (infix_lseqdt tone m) (infix_lseqdt n (infix_asdt n m))))))

;; pre_cond_int_
  (assert
  (forall ((a t) (b t) (c t))
  (=> (infix_lsdt a b)
  (=> (infix_lsdt tzero c) (infix_lsdt (infix_asdt a c) (infix_asdt b c))))))

;; real_cpower
  (assert (forall ((elt t) (i Int)) (=> (real_ elt) (real_ (cpower elt i)))))

;; real_cpower_pos
  (assert
  (forall ((elt t) (i Int))
  (=> (real_ elt) (=> (<= 0 i) (real_ (cpower elt i))))))

;; non_zero_cpower
  (assert
  (forall ((i t) (n Int))
  (=> (not (= i tzero)) (not (= (cpower i n) tzero)))))

;; zero_cpower
  (assert (forall ((n Int)) (=> (not (= n 0)) (= (cpower tzero n) tzero))))

;; zero_cpower_pos
  (assert (forall ((n Int)) (=> (< 0 n) (= (cpower tzero n) tzero))))

;; non_zero_cpower_pos
  (assert
  (forall ((i t) (n Int))
  (=> (not (= i tzero)) (=> (<= 0 n) (not (= (cpower i n) tzero))))))

;; cpower_inv
  (assert
  (forall ((e t) (i Int))
  (=> (<= 0 i) (= (cpower e (- i)) (infix_sldt tone (cpower e i))))))

;; cpower_mult
  (assert
  (forall ((x t) (n Int) (m Int))
  (=> (<= 0 m) (=> (<= 0 n) (= (cpower x (* n m)) (cpower (cpower x n) m))))))

;; cpower_sum
  (assert
  (forall ((x t) (n Int) (m Int))
  (=> (<= 0 m) (= (cpower x (+ n m)) (infix_asdt (cpower x n) (cpower x m))))))

;; cpower_iterate
  (assert
  (forall ((e t) (i Int))
  (=> (<= 0 i)
  (= (cpower e i) (tb2t9
                  (int_iterate t1 (t2tb10 infix_asdt_closure)
                  (infix_at (infix_mngt int t1) t1 (t2tb24 fc177) (t2tb9 e))
                  0 i))))))

;; fc_def
  (assert
  (forall ((y0 t) (y1 Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) t1 (t2tb24 fc177) (t2tb9 y0)) (t2tb2 y1))) y0)))

;; cpower_tone_pos
  (assert (forall ((m Int)) (=> (<= 0 m) (= (cpower tone m) tone))))

;; cpower_zero
  (assert (forall ((e t)) (= (cpower e 0) tone)))

;; cpower_plus_one
  (assert
  (forall ((e t) (i Int)) (= (cpower e (+ i 1)) (infix_asdt (cpower e i) e))))

;; Cpower_plus_one
  (assert
  (forall ((i t))
  (forall ((n Int)) (= (cpower i n) (infix_asdt i (cpower i (- n 1)))))))

;; Cpower_zero
  (assert (forall ((i t)) (= (cpower i 0) tone)))

;; infix <._closure_def
  (assert
  (forall ((y t) (y1 t))
  (=
  (= (tb2t
     (infix_at bool t1
     (infix_at (infix_mngt t1 bool) t1 (t2tb28 infix_lsdt_closure) (t2tb9 y))
     (t2tb9 y1))) true)
  (infix_lsdt y y1))))

;; infix <=._closure_def
  (assert
  (forall ((y t) (y1 t))
  (=
  (= (tb2t
     (infix_at bool t1
     (infix_at (infix_mngt t1 bool) t1 (t2tb28 infix_lseqdt_closure)
     (t2tb9 y)) (t2tb9 y1))) true)
  (infix_lseqdt y y1))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt t1 bool) j) (= (t2tb29 (tb2t29 j)) j)) :pattern (
  (t2tb29 (tb2t29 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array t Bool)))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array t Bool))) (sort (infix_mngt t1 bool) (t2tb29 x))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt t1 (infix_mngt t1 bool)) j)
     (= (t2tb28 (tb2t28 j)) j)) :pattern ((t2tb28 (tb2t28 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array t (Array t Bool))))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array t (Array t Bool)))) (sort
  (infix_mngt t1 (infix_mngt t1 bool)) (t2tb28 x))))

;; inv_neg
  (assert (forall ((x Int)) (=> (< x 0) (< 0 (abs1 x)))))

;; inv_negeq
  (assert (forall ((x Int)) (=> (<= x 0) (<= 0 (abs1 x)))))

;; abs_sup
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (< y x)) (< (abs1 x) (abs1 y)))))

;; abs_eqsup
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (<= y x)) (<= (abs1 x) (abs1 y)))))

;; abs_inf
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (and (< x y) (<= y 0))) (< (abs1 y) (abs1 x)))))

;; abs_eqinf
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x y) (<= y 0)) (<= (abs1 y) (abs1 x)))))

;; i_to_t_div
  (assert
  (forall ((i Int) (j Int))
  (=> (not (= j 0)) (= (infix_sldt (i_to_t (* i j)) (i_to_t j)) (i_to_t i)))))

;; i_to_t_sub
  (assert
  (forall ((i Int) (j Int))
  (= (infix_mndt (i_to_t i) (i_to_t j)) (i_to_t (- i j)))))

;; i_to_t_mult
  (assert
  (forall ((i Int) (j Int))
  (= (infix_asdt (i_to_t i) (i_to_t j)) (i_to_t (* i j)))))

;; i_to_t_add
  (assert
  (forall ((i Int) (j Int))
  (= (infix_pldt (i_to_t i) (i_to_t j)) (i_to_t (+ i j)))))

;; i_to_t_nzero
  (assert (forall ((i Int)) (=> (not (= i 0)) (not (= (i_to_t i) tzero)))))

;; i_to_t_def
  (assert (forall ((i Int)) (= (i_to_t i) (r_to_t (from_int i)))))

;; pure_im
  (assert
  (forall ((x t))
  (=> (pure_im_ x) (= x (infix_asdt im (r_to_t (im_part x)))))))

;; real
  (assert (forall ((x t)) (=> (real_ x) (= x (r_to_t (real_part x))))))

;; ind_isum_bv_bound
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 1 i) (< i (length bv1)))
  (< (ind_isum (fc176 bv1) (+ i 1) (+ (length bv1) 1)) (power 2
                                                       (- (length bv1) i))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc176 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l))))))

;; ind_isum_bv_bound_growing
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (< 1 i) (<= i (length bv1)))
  (< (ind_isum (fc175 bv1) 1 i) (power 2 (- i 1))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc175 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- l 1))))))

;; bv_to_int_sum_rev
  (assert
  (forall ((bv1 bitvec))
  (= (ind_isum (fc174 bv1) 0 (length bv1)) (bv_to_int bv1))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc174 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 (- (length
                                                                    bv1) k)) 
  (power 2 k)))))

;; ind_isum_bv_rev
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i (length bv1)))
  (= (ind_isum (fc172 bv1) (+ i 1) (+ (length bv1) 1)) (ind_isum (fc173 bv1)
                                                       0 (- (length bv1) i))))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc173 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 (- (length
                                                                    bv1) l)) 
  (power 2 l)))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc172 bv1)) (t2tb2 l))) (* (getbv bv1
                                                                 l) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) l))))))

;; bv_to_int_onebit
  (assert
  (forall ((bv1 bitvec))
  (=> (= (length bv1) 1) (= (bv_to_int bv1) (getbv bv1 1)))))

;; bv_to_int_sum
  (assert
  (forall ((bv1 bitvec))
  (= (bv_to_int bv1) (ind_isum (fc171 bv1) 1 (+ (length bv1) 1)))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc171 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 k) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) k))))))

;; bv_to_int_spec
  (assert
  (forall ((bv1 bitvec))
  (and (= (bv_to_int bv1) (ind_isum (fc170 bv1) 1 (+ (length bv1) 1)))
  (<= 0 (bv_to_int bv1)))))

;; fc_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc170 bv1)) (t2tb2 k))) (* (getbv bv1
                                                                 k) (power 2
                                                                    (- 
                                                                    (length
                                                                    bv1) k))))))

;; bv_to_int_def
  (assert
  (forall ((bv1 bitvec))
  (= (bv_to_int bv1) (ind_isum (result22 bv1) 1 (+ (length bv1) 1)))))

;; result_def
  (assert
  (forall ((bv1 bitvec) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (result22 bv1)) (t2tb2 k))) (ite (in_range
                                                                 bv1 k)
                                                                 (* (getbv
                                                                    bv1 k) 
                                                                 (power 2
                                                                 (- (length
                                                                    bv1) k)))
                                                                 1))))

;; concat_ht_union
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 2 (length bv1))
  (=> (not (= bv1 (concat_l (tail bv1) 0))) (= bv1 (concat_l (tail bv1) 1))))))

;; concat_ht
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (= bv1 (concat_l (tail bv1) (head bv1))))))

;; concat_l_spec
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i 1))
  (and (= (length (concat_l bv1 i)) (+ (length bv1) 1))
  (and (= (getbv (concat_l bv1 i) 1) i)
  (forall ((j Int))
  (=> (in_range bv1 j) (= (getbv (concat_l bv1 i) (+ j 1)) (getbv bv1 j)))))))))

;; concat_l_def
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i 1))
  (= (concat_l bv1 i) (make_bv (result21 bv1 i) (+ (length bv1) 1))))))

;; result_def
  (assert
  (forall ((bv1 bitvec) (i Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (result21 bv1 i)) (t2tb2 k))) (ite (= k 1)
                                                                   i
                                                                   (getbv bv1
                                                                   (- k 1))))))

;; tail_spec
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1))
  (and (= (length (tail bv1)) (- (length bv1) 1))
  (forall ((i Int))
  (=> (in_range (tail bv1) i) (= (getbv (tail bv1) i) (getbv bv1 (+ i 1)))))))))

;; tail_def
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1))
  (= (tail bv1) (make_bv (result20 bv1) (- (length bv1) 1))))))

;; result_def
  (assert
  (forall ((bv1 bitvec) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (result20 bv1)) (t2tb2 i))) (getbv bv1
                                                                 (+ i 1)))))

;; head_spec
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (and (<= 0 (head bv1)) (<= (head bv1) 1)))))

;; head_def
  (assert
  (forall ((bv1 bitvec))
  (=> (<= 1 (length bv1)) (= (head bv1) (getbv bv1 1)))))

;; set_equal_bv_m_make
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s Int))
  (=> (<= 0 s)
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i s))
  (= (mod (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) 2) (mod (tb2t2
                                                                 (infix_at
                                                                 int 
                                                                 int
                                                                 (t2tb8 g)
                                                                 (t2tb2 i))) 2))))
  (= (make_bv_m f s) (make_bv_m g s))))))

;; set_equal_bv_make
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (s Int))
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i s))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) 2))))
  (=> (<= 0 s)
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i s))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 g) (t2tb2 i))))
  (< (tb2t2 (infix_at int int (t2tb8 g) (t2tb2 i))) 2))))
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i s))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 i))))))
  (= (make_bv f s) (make_bv g s))))))))

;; make_m_length
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s) (= (length (make_bv_m f s)) s))))

;; make_m_bv_length
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=> (<= 0 s) (bvlength
  (tb2t8
  (infix_at (infix_mngt int int) bitvec1 (t2tb26 getbv_closure)
  (t2tb27 (make_bv_m f s)))) i))))

;; assert_make_m
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=> (<= 0 s)
  (= (getbv (make_bv_m f s) i) (mod (tb2t2
                                    (infix_at int int (t2tb8 f) (t2tb2 i))) 2)))))

;; assert_make_bv
  (assert
  (forall ((f (Array Int Int)) (s Int) (i Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 s))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i1))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i1))) 2))))
  (=> (<= 0 s)
  (= (getbv (make_bv f s) i) (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))))))))

;; make_bv_length
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i s))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) 2))))
  (=> (<= 0 s) (= (length (make_bv f s)) s)))))

;; assert_make_bv_no_bound
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (= (getbv (make_bv f 0) i) (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))))))

;; make_bv_m_spec
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s)
  (and (= (length (make_bv_m f s)) s)
  (and
  (forall ((i Int)) (bvlength
  (tb2t8
  (infix_at (infix_mngt int int) bitvec1 (t2tb26 getbv_closure)
  (t2tb27 (make_bv_m f s)))) i))
  (forall ((k Int))
  (= (getbv (make_bv_m f s) k) (mod (tb2t2
                                    (infix_at int int (t2tb8 f) (t2tb2 k))) 2))))))))

;; make_bv_m_def
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=> (<= 0 s) (= (make_bv_m f s) (make_bv (result19 f) s)))))

;; result_def
  (assert
  (forall ((f (Array Int Int)) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (result19 f)) (t2tb2 k))) (mod (tb2t2
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb8 f)
                                                                    (t2tb2 k))) 2))))

;; make_bv_spec
  (assert
  (forall ((f (Array Int Int)) (s Int))
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i s))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) 2))))
  (=> (<= 0 s)
  (and (= (length (make_bv f s)) s)
  (forall ((i Int))
  (= (getbv (make_bv f s) i) (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))))))))))

;; set_equal_bv
  (assert
  (forall ((bv1 bitvec) (bvqt bitvec))
  (=> (= (length bv1) (length bvqt))
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i (length bv1))) (= (getbv bv1 i) (getbv bvqt i))))
  (= bv1 bvqt)))))

;; equal_bv
  (assert
  (forall ((m bitvec) (n bitvec))
  (= (= m n)
  (and (= (length m) (length n))
  (forall ((i Int)) (=> (in_range m i) (= (getbv m i) (getbv n i))))))))

;; binary_bv
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (in_range bv1 i) (and (<= 0 (getbv bv1 i)) (<= (getbv bv1 i) 1)))))

;; in_range_def
  (assert
  (forall ((bv1 bitvec) (r Int))
  (= (in_range bv1 r) (and (<= 1 r) (<= r (length bv1))))))

;; bvlengthm
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 0 i) (<= i (length bv1))) (bvlength
  (tb2t8
  (infix_at (infix_mngt int int) bitvec1 (t2tb26 getbv_closure) (t2tb27 bv1)))
  i))))

;; set_in_range_val
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= 1 i) (<= i (length bv1)))
  (and (<= 0 (getbv bv1 i)) (< (getbv bv1 i) 2)))))

;; set_bv_to
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (=> (< 0 i)
  (=>
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j i))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 j))))
  (<= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 j))) 1)))) (bvlength f i)))))

;; get_bvlength
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (=> (bvlength f i)
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k i))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) 2)))))))

;; set_flength
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (=>
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k i))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) 2)))) (bvlength f i))))

;; set_bvlength
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=>
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k i)) (and (<= 0 (getbv bv1 k)) (< (getbv bv1 k) 2))))
  (bvlength
  (tb2t8
  (infix_at (infix_mngt int int) bitvec1 (t2tb26 getbv_closure) (t2tb27 bv1)))
  i))))

;; getbv_closure_def
  (assert
  (forall ((y bitvec) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) bitvec1 (t2tb26 getbv_closure)
     (t2tb27 y)) (t2tb2 y1))) (getbv y y1))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort bitvec1 j) (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27
                                                               (tb2t27 j))) )))

;; BridgeL
  (assert
  (forall ((i bitvec)) (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; t2tb_sort
  (assert (forall ((x bitvec)) (sort bitvec1 (t2tb27 x))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb26 (tb2t26 j)) j) :pattern ((t2tb26 (tb2t26 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array bitvec (Array Int Int))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array bitvec (Array Int Int)))) (sort
  (infix_mngt bitvec1 (infix_mngt int int)) (t2tb26 x))))

;; setbv_int_spec
  (assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)) (i Int) (j Int))
  (and
  (forall ((k Int))
  (=> (and (< i k) (<= k j))
  (= (tb2t2 (infix_at int int (t2tb8 (setbv_int bv1 bv2 i j)) (t2tb2 k))) 
  (tb2t2 (infix_at int int (t2tb8 bv2) (t2tb2 (- k i)))))))
  (and
  (forall ((k Int))
  (=> (<= k i)
  (= (tb2t2 (infix_at int int (t2tb8 (setbv_int bv1 bv2 i j)) (t2tb2 k))) 
  (tb2t2 (infix_at int int (t2tb8 bv1) (t2tb2 k))))))
  (forall ((k Int))
  (=> (< j k)
  (= (tb2t2 (infix_at int int (t2tb8 (setbv_int bv1 bv2 i j)) (t2tb2 k))) 
  (tb2t2 (infix_at int int (t2tb8 bv1) (t2tb2 k))))))))))

;; setbv_int_def
  (assert
  (forall ((bv1 (Array Int Int)) (bv2 (Array Int Int)) (i Int) (j Int))
  (forall ((k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (setbv_int bv1 bv2 i j)) (t2tb2 k))) 
  (ite (and (< i k) (<= k j))
  (tb2t2 (infix_at int int (t2tb8 bv2) (t2tb2 (- k i))))
  (tb2t2 (infix_at int int (t2tb8 bv1) (t2tb2 k))))))))

;; setbv_spec
  (assert
  (forall ((bv1 (Array Int Int)) (i Int) (j Int))
  (and
  (forall ((k Int))
  (=> (not (= k i))
  (= (tb2t2 (infix_at int int (t2tb8 (setbv bv1 i j)) (t2tb2 k))) (tb2t2
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb8 bv1)
                                                                  (t2tb2 k))))))
  (= (tb2t2 (infix_at int int (t2tb8 (setbv bv1 i j)) (t2tb2 i))) j))))

;; setbv_def
  (assert
  (forall ((bv1 (Array Int Int)) (i Int) (j Int))
  (forall ((k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (setbv bv1 i j)) (t2tb2 k))) (ite (= k i)
                                                                  j
                                                                  (tb2t2
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb8 bv1)
                                                                  (t2tb2 k))))))))

;; getbv_bound
  (assert
  (forall ((bv1 bitvec) (i Int))
  (=> (and (<= i i) (<= i (length bv1)))
  (and (<= 0 (getbv bv1 i)) (< (getbv bv1 i) 2)))))

;; bounded_getbv
  (assert
  (forall ((a bitvec) (i Int)) (and (<= 0 (getbv a i)) (< (getbv a i) 2))))

;; getbv_spec
  (assert
  (forall ((a bitvec) (i Int))
  (and
  (=> (and (<= i i) (<= i (length a)))
  (and (<= 0 (getbv a i)) (< (getbv a i) 2)))
  (= (getbv a i) (tb2t2 (infix_at int int (t2tb8 (value a)) (t2tb2 i)))))))

;; binary_mult
  (assert
  (forall ((a Int) (b Int)) (= (mod (* a b) 2) (* (mod a 2) (mod b 2)))))

;; bvlength_def
  (assert
  (forall ((f (Array Int Int)) (i Int))
  (= (bvlength f i) (is_binary f 1 (+ i 1)))))

;; bitvec'invariant
  (assert
  (forall ((self bitvec))
  (! (and (<= 0 (length self))
     (forall ((i Int))
     (and (<= 0 (tb2t2 (infix_at int int (t2tb8 (value self)) (t2tb2 i))))
     (< (tb2t2 (infix_at int int (t2tb8 (value self)) (t2tb2 i))) 2)))) :pattern (
  (length self)) :pattern ((value self)) )))

;; inv_f_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (and
  (forall ((e uni))
  (=> (mem b e sqt) (mem a (infix_at a b (inv_f b a f s sqt) e) s)))
  (and
  (forall ((e uni))
  (=> (sort b e)
  (=> (mem b e sqt)
  (= (infix_at b a f (infix_at a b (inv_f b a f s sqt) e)) e)))) (p_bijective
  a b (inv_f b a f s sqt) sqt s)))))))

;; inv_f_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt b a)
  (inv_f b a x x1 x2)))))

;; set_bij_inv
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt (map1 b a f s))
  (and (mem a (infix_at a b g eqt) s)
  (= (infix_at b a f (infix_at a b g eqt)) eqt)))))
  (and (p_bijective b a f s (map1 b a f s))
  (and (p_bijective a b g (map1 b a f s) s)
  (forall ((b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (inv_func b a f s (map1 b a f s) b1) (infix_at a b g b1)))))))))))

;; set_bijective_inv
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt (map1 b a f s))
  (and (mem a (infix_at a b g eqt) s)
  (= (infix_at b a f (infix_at a b g eqt)) eqt)))))
  (and (p_bijective b a f s (map1 b a f s))
  (= (inv_func b a f s (map1 b a f s) b1) (infix_at a b g b1)))))))))

;; inv_bijective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt) (p_bijective a b
  (infix_at (infix_mngt b a) (set1 b)
  (infix_at (infix_mngt (set1 b) (infix_mngt b a)) (set1 a)
  (infix_at (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
  (infix_mngt a b) (inv__closure b a) f) s) sqt) sqt s)))))

;; inv__closure_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((y uni) (y1 uni) (y2 uni) (y3 uni))
  (= (infix_at a b
     (infix_at (infix_mngt b a) (set1 b)
     (infix_at (infix_mngt (set1 b) (infix_mngt b a)) (set1 a)
     (infix_at (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a)))
     (infix_mngt a b) (inv__closure b a) y) y1) y2) y3) (inv_ b a y y1 y2 y3)))))

;; inv__closure_sort
  (assert
  (forall ((a ty) (b ty)) (sort
  (infix_mngt (infix_mngt a b)
  (infix_mngt (set1 a) (infix_mngt (set1 b) (infix_mngt b a))))
  (inv__closure b a))))

;; inv__spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (e uni))
  (=> (sort b e)
  (=> (p_bijective b a f s sqt)
  (=> (mem b e sqt)
  (and (mem a (inv_ b a f s sqt e) s)
  (= (infix_at b a f (inv_ b a f s sqt e)) e))))))))

;; inv__def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (e uni))
  (=> (p_bijective b a f s sqt)
  (=> (mem b e sqt) (= (inv_ b a f s sqt e) (inv_func b a f s sqt e)))))))

;; inv__sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni) (x3 uni)) (sort a
  (inv_ b a x x1 x2 x3)))))

;; inv_rec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (e uni))
  (=> (sort a e)
  (=> (p_bijective b a f s sqt)
  (=> (mem a e s) (= (inv_func b a f s sqt (infix_at b a f e)) e)))))))

;; inv_func_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (eqt uni))
  (=> (sort b eqt)
  (=> (p_bijective b a f s sqt)
  (=> (mem b eqt sqt)
  (and (mem a (inv_func b a f s sqt eqt) s)
  (= (infix_at b a f (inv_func b a f s sqt eqt)) eqt))))))))

;; inv_func_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni) (eqt uni))
  (=> (p_bijective b a f s sqt)
  (=> (mem b eqt sqt)
  (= (inv_func b a f s sqt eqt) (element a (filter a (result18 b a f eqt) s))))))))

;; result_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (eqt uni) (e uni))
  (= (tb2t (infix_at bool a (result18 b a f eqt) e)) (indic_bool b
                                                     (infix_at b a f e) eqt)))))

;; result_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result18 b a x x1)))))

;; inv_func_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni) (x3 uni)) (sort a
  (inv_func b a x x1 x2 x3)))))

;; map_add_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (s1 uni) (s2 uni) (sqt uni) (f uni) (g uni) (h1 uni))
  (=> (constant_size a sqt h1)
  (=> (constant_size a s f)
  (=> (constant_size a s g)
  (=>
  (and (= (s_rows a sqt h1) (s_rows a s f))
  (= (s_rows a s f) (s_rows a s g)))
  (=>
  (and (= (s_columns a sqt h1) (s_columns a s f))
  (= (s_columns a s f) (s_columns a s g)))
  (=> (< 0 (cardinal a s))
  (=> (p_injective (matrix1 t1) a f s)
  (=> (p_injective (matrix1 t1) a g s)
  (=> (p_injective (matrix1 t1) a h1 sqt)
  (=>
  (= (tb2t25 (map1 (matrix1 t1) a f s)) (tb2t25 (map1 (matrix1 t1) a h1 s1)))
  (=>
  (= (tb2t25 (map1 (matrix1 t1) a g s)) (tb2t25 (map1 (matrix1 t1) a h1 s2)))
  (=> (= (inter a s1 s2) (empty a))
  (=> (= (union1 a s1 s2) sqt)
  (= (mat_sum a s (fc169 a f g)) (mat_sum a sqt h1))))))))))))))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni) (e uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc169 a f g) e)) (add_mat
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) a f e))
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) a g e)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc169 a x x1)))))

;; map_add_mat_sum_t
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (sqt uni) (f uni) (injz uni) (injo uni))
  (=> (constant_size b sqt f)
  (=> (< 0 (cardinal a s))
  (=> (= (inter b (map1 b a injz s) (map1 b a injo s)) (empty b))
  (=> (= (union1 b (map1 b a injz s) (map1 b a injo s)) sqt)
  (=> (p_injective b a injo s)
  (=> (p_injective b a injz s)
  (= (mat_sum a s (fc168 b a f injz injo)) (mat_sum b sqt f)))))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (injz uni) (injo uni) (e uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc168 b a f injz injo) e)) (add_mat
                                                                  (tb2t17
                                                                  (infix_at
                                                                  (matrix1
                                                                  t1) b f
                                                                  (infix_at b
                                                                  a injz e)))
                                                                  (tb2t17
                                                                  (infix_at
                                                                  (matrix1
                                                                  t1) b f
                                                                  (infix_at b
                                                                  a injo e))))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc168 b a x x1 x2)))))

;; mat_sum_disjoint_transitivity
  (assert
  (forall ((a ty))
  (forall ((s uni) (s1 uni) (s2 uni) (f uni))
  (=> (constant_size a s f)
  (=> (= (inter a s1 s2) (empty a))
  (=> (= (union1 a s1 s2) s)
  (=> (< 0 (cardinal a s1))
  (=> (< 0 (cardinal a s2))
  (= (add_mat (mat_sum a s1 f) (mat_sum a s2 f)) (mat_sum a s f))))))))))

;; mat_sum_map_map
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((s1 uni) (s2 uni) (t11 uni) (t2 uni) (f uni))
  (=> (< 0 (cardinal a s1))
  (=> (p_injective c a t11 s1)
  (=> (constant_size a s1 (fc166 c a t11 f))
  (=> (< 0 (cardinal b s2))
  (=> (p_injective c b t2 s2)
  (=> (constant_size b s2 (fc167 c b t2 f))
  (=> (= (map1 c a t11 s1) (map1 c b t2 s2))
  (= (mat_sum c (map1 c a t11 s1) f) (mat_sum c (map1 c b t2 s2) f))))))))))))

;; fc_def
  (assert
  (forall ((b ty) (c ty))
  (forall ((t2 uni) (f uni) (a uni))
  (= (tb2t17 (infix_at (matrix1 t1) b (fc167 c b t2 f) a)) (tb2t17
                                                           (infix_at
                                                           (matrix1 t1) c f
                                                           (infix_at c b t2
                                                           a)))))))

;; fc_def
  (assert
  (forall ((a ty) (c ty))
  (forall ((t11 uni) (f uni) (a1 uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc166 c a t11 f) a1)) (tb2t17
                                                             (infix_at
                                                             (matrix1 t1) c f
                                                             (infix_at c a
                                                             t11 a1)))))))

;; fc_sort
  (assert
  (forall ((b ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 t1))
  (fc167 c b x x1)))))

;; fc_sort
  (assert
  (forall ((a ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc166 c a x x1)))))

;; nonn_mat_sum
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c)))))))))

;; nonn_mat_sum_plus_one
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (< 1 (cardinal a s))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (=>
  (= (mat_sum_dim a (remove a (choose a s) s) f r c) (mat_sum_dim a
                                                     (nonn_mat_subset a f
                                                     (remove a (choose a s)
                                                     s)) f r c))
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c)))))))))))

;; mat_sum_null_but_maybe_one_elt
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (e uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (=> (mem a e s)
  (=>
  (forall ((eqt uni))
  (=> (sort a eqt)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (null_mat (tb2t17 (infix_at (matrix1 t1) a f eqt)))))))
  (= (mat_sum a s f) (tb2t17 (infix_at (matrix1 t1) a f e))))))))))

;; nonn_mat_sum_cardone
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (= (cardinal a s) 1)
  (=> (< 0 r)
  (=> (< 0 c)
  (=> (= (rows t1 (infix_at (matrix1 t1) a f (choose a s))) r)
  (=> (= (columns t1 (infix_at (matrix1 t1) a f (choose a s))) c)
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c))))))))))

;; nonn_mat_sum_cardzero
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (r Int) (c Int))
  (=> (= (cardinal a s) 0)
  (=> (< 0 r)
  (=> (< 0 c)
  (= (mat_sum_dim a s f r c) (mat_sum_dim a (nonn_mat_subset a f s) f r c))))))))

;; mat_subset_nonn_elt
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (forall ((e uni))
  (=> (mem a e (nonn_mat_subset a f s))
  (not
  (= (tb2t17 (infix_at (matrix1 t1) a f e)) (tb2t17
                                            (make t1 (s_rows a s f)
                                            (s_columns a s f) (t2tb9 tzero)))))))))))

;; mat_subset_elt
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (forall ((e uni)) (=> (mem a e (nonn_mat_subset a f s)) (mem a e s)))))))

;; nonn_mat_subset_spec
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (and (subset1 a (nonn_mat_subset a f s) s)
  (and (forall ((e uni)) (=> (mem a e (nonn_mat_subset a f s)) (mem a e s)))
  (and (constant_size a (nonn_mat_subset a f s) f)
  (and
  (=> (not (= (nonn_mat_subset a f s) (empty a)))
  (= (s_rows a (nonn_mat_subset a f s) f) (s_rows a s f)))
  (=> (not (= (nonn_mat_subset a f s) (empty a)))
  (= (s_columns a (nonn_mat_subset a f s) f) (s_columns a s f)))))))))))

;; nonn_mat_subset_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (constant_size a s f)
  (= (nonn_mat_subset a f s) (filter a (result17 a f s) s))))))

;; result_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (e uni))
  (= (= (tb2t (infix_at bool a (result17 a f s) e)) true)
  (not (equal t1 (infix_at (matrix1 t1) a f e)
  (make t1 (s_rows a s f) (s_columns a s f) (t2tb9 tzero))))))))

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result17 a x x1)))))

;; nonn_mat_subset_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (nonn_mat_subset a x x1)))))

;; mat_sum_id
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=> (constant_size (matrix1 t1) (map1 (matrix1 t1) a f s)
  (identity (matrix1 t1)))
  (=> (p_injective (matrix1 t1) a f s)
  (= (mat_sum (matrix1 t1) (map1 (matrix1 t1) a f s) (identity (matrix1 t1))) 
  (mat_sum a s f)))))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (matrix1 t1)) j) (= (t2tb25 (tb2t25 j)) j)) :pattern (
  (t2tb25 (tb2t25 j))) )))

;; BridgeL
  (assert
  (forall ((i (set (matrix t))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (set (matrix t)))) (sort (set1 (matrix1 t1)) (t2tb25 x))))

;; map_mat_sum_rec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (t2 uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s (fc164 b a f t2))
  (=> (p_injective b a t2 s)
  (= (mat_sum a s (fc165 b a f t2)) (mat_sum b (map1 b a t2 s) f))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t2 uni) (a1 uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc165 b a f t2) a1)) (tb2t17
                                                            (infix_at
                                                            (matrix1 t1) b f
                                                            (infix_at b a t2
                                                            a1)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t2 uni) (a1 uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc164 b a f t2) a1)) (tb2t17
                                                            (infix_at
                                                            (matrix1 t1) b f
                                                            (infix_at b a t2
                                                            a1)))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc165 b a x x1)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc164 b a x x1)))))

;; map_mat_sum
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (t2 uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s (fc162 b a f t2))
  (=> (p_injective b a t2 s)
  (= (mat_sum b (map1 b a t2 s) f) (mat_sum a s (fc163 b a f t2)))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t2 uni) (a1 uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc163 b a f t2) a1)) (tb2t17
                                                            (infix_at
                                                            (matrix1 t1) b f
                                                            (infix_at b a t2
                                                            a1)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t2 uni) (a1 uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc162 b a f t2) a1)) (tb2t17
                                                            (infix_at
                                                            (matrix1 t1) b f
                                                            (infix_at b a t2
                                                            a1)))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc163 b a x x1)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc162 b a x x1)))))

;; constant_size_map
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (t2 uni))
  (=> (constant_size a s (fc161 b a f t2)) (constant_size b (map1 b a t2 s)
  f)))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t2 uni) (a1 uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc161 b a f t2) a1)) (tb2t17
                                                            (infix_at
                                                            (matrix1 t1) b f
                                                            (infix_at b a t2
                                                            a1)))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc161 b a x x1)))))

;; mat_sum_dim_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t17 (infix_at (matrix1 t1) a f e)) (tb2t17
                                            (infix_at (matrix1 t1) a g e))))))
  (= (mat_sum_dim a s f r c) (mat_sum_dim a s g r c))))))))))

;; mat_sum_comp_eq
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni) (h1 uni))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (constant_size b s h1)
  (=>
  (and (= (s_rows b s f) (s_rows b s g)) (= (s_rows b s g) (s_rows b s h1)))
  (=>
  (and (= (s_columns b s f) (s_columns b s g))
  (= (s_columns b s g) (s_columns b s h1)))
  (=> (< 0 (cardinal b s))
  (=>
  (forall ((e uni))
  (=> (sort b e)
  (forall ((i Int) (j Int))
  (=> (mem b e s)
  (=> (and (<= 0 i) (< i (s_rows b s f)))
  (=> (and (<= 0 j) (< j (s_columns b s f)))
  (= (infix_pldt (tb2t9 (get t1 (infix_at (matrix1 t1) b f e) i j))
     (tb2t9 (get t1 (infix_at (matrix1 t1) b g e) i j))) (tb2t9
                                                         (get t1
                                                         (infix_at
                                                         (matrix1 t1) b h1 e)
                                                         i j)))))))))
  (= (add_mat (mat_sum b s f) (mat_sum b s g)) (mat_sum b s h1))))))))))))

;; mat_sum_eq_gen_int
  (assert
  (forall ((i1 Int) (i2 Int) (o1 Int) (o2 Int) (f (Array Int (matrix t)))
  (g (Array Int (matrix t))))
  (=> (< i1 o1)
  (=> (= i1 o1)
  (=> (= i2 o2)
  (=> (constant_size int (t2tb1 (to_fset i1 o1)) (t2tb20 f))
  (=>
  (forall ((a Int))
  (=> (mem int (t2tb2 a) (t2tb1 (to_fset i1 o1)))
  (= (tb2t17 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 a))) (tb2t17
                                                               (infix_at
                                                               (matrix1 t1)
                                                               int (t2tb20 g)
                                                               (t2tb2 a))))))
  (= (mat_sum int (t2tb1 (to_fset i1 o1)) (t2tb20 f)) (mat_sum int
                                                      (t2tb1 (to_fset i2 o2))
                                                      (t2tb20 g))))))))))

;; mat_sum_eq_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (f uni) (g uni))
  (=> (< 0 (cardinal a s))
  (=> (= s sqt)
  (=> (constant_size a s f)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s)
  (= (tb2t17 (infix_at (matrix1 t1) a f a1)) (tb2t17
                                             (infix_at (matrix1 t1) a g a1))))))
  (= (mat_sum a s f) (mat_sum a s g)))))))))

;; mat_sum_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s)
  (= (tb2t17 (infix_at (matrix1 t1) a f a1)) (tb2t17
                                             (infix_at (matrix1 t1) a g a1))))))
  (= (mat_sum a s f) (mat_sum a s g))))))))

;; mat_sum_scalar_right
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (m (matrix t)) (i Int) (j Int))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=> (and (<= 0 i) (< i (s_rows a s f)))
  (=> (and (<= 0 j) (< j (s_columns a s f)))
  (= (infix_asdtdt (tb2t9 (get t1 (t2tb17 (mat_sum a s f)) i j)) m) (mat_sum
                                                                    a s
                                                                    (fc160 a
                                                                    f m i j))))))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (m (matrix t)) (i Int) (j Int) (k uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc160 a f m i j) k)) (infix_asdtdt
                                                            (tb2t9
                                                            (get t1
                                                            (infix_at
                                                            (matrix1 t1) a f
                                                            k) i j)) m)))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 (matrix t)) (x2 Int) (x3 Int)) (sort
  (infix_mngt a (matrix1 t1)) (fc160 a x x1 x2 x3)))))

;; mat_sum_scalar_rev
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (a1 t))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (= (infix_asdtdt a1 (mat_sum a s f)) (mat_sum a s (fc159 a f a1))))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (a1 t) (k uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc159 a f a1) k)) (infix_asdtdt a1
                                                         (tb2t17
                                                         (infix_at
                                                         (matrix1 t1) a f k)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 t)) (sort (infix_mngt a (matrix1 t1)) (fc159 a x x1)))))

;; mat_sum_scalar
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (a1 t))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (= (mat_sum a s (fc158 a f a1)) (infix_asdtdt a1 (mat_sum a s f))))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (a1 t) (k uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc158 a f a1) k)) (infix_asdtdt a1
                                                         (tb2t17
                                                         (infix_at
                                                         (matrix1 t1) a f k)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 t)) (sort (infix_mngt a (matrix1 t1)) (fc158 a x x1)))))

;; mat_sum_dim_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni) (r Int) (c Int))
  (=> (<= 0 (cardinal a s))
  (=> (not (mem a x s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e (add a x s)) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e (add a x s)) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (=> (< 0 r)
  (=> (< 0 c)
  (= (mat_sum_dim a (add a x s) f r c) (add_mat
                                       (tb2t17 (infix_at (matrix1 t1) a f x))
                                       (mat_sum_dim a s f r c))))))))))))

;; mat_sum_dim_to_make_zero
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (= (cardinal a s) 0)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (=> (< 0 r)
  (=> (< 0 c)
  (= (mat_sum_dim a s f r c) (tb2t17 (make t1 r c (t2tb9 tzero))))))))))))

;; mat_sum_dim_to_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (< 0 (cardinal a s))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (= (mat_sum_dim a s f r c) (mat_sum a s f))))))))))

;; mat_sum_dim_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (and (=> (< 0 (cardinal a s)) (= (mat_sum_dim a s f r c) (mat_sum a s f)))
  (and
  (=> (= (cardinal a s) 0)
  (= (mat_sum_dim a s f r c) (tb2t17 (make t1 r c (t2tb9 tzero)))))
  (and (= (rows t1 (t2tb17 (mat_sum_dim a s f r c))) r)
  (= (columns t1 (t2tb17 (mat_sum_dim a s f r c))) c)))))))))))

;; mat_sum_dim_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (ite (= (cardinal a s) 0)
  (= (mat_sum_dim a s f r c) (tb2t17 (make t1 r c (t2tb9 tzero))))
  (= (mat_sum_dim a s f r c) (mat_sum a s f))))))))))

;; mat_sum_to_sum_double_pre
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (sqt uni) (f uni) (r Int) (c Int) (i Int) (j Int))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort b eqt)
  (=> (mem a e s)
  (=> (mem b eqt sqt)
  (= (rows t1
     (infix_at (matrix1 t1) b (infix_at (infix_mngt b (matrix1 t1)) a f e)
     eqt)) r))))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort b eqt)
  (=> (mem a e s)
  (=> (mem b eqt sqt)
  (= (columns t1
     (infix_at (matrix1 t1) b (infix_at (infix_mngt b (matrix1 t1)) a f e)
     eqt)) c))))))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (=> (< 0 (cardinal a s))
  (=> (< 0 (cardinal b sqt))
  (= (tb2t9 (get t1 (t2tb17 (mat_sum a s (fc155 b a sqt f))) i j)) (sum a s
                                                                   (fc157 b a
                                                                   sqt f i j))))))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
  (= (tb2t9 (infix_at t1 a (fc157 b a sqt f i j) e)) (sum b sqt
                                                     (fc156 b a f i j e))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (i Int) (j Int) (e uni) (eqt uni))
  (= (tb2t9 (infix_at t1 b (fc156 b a f i j e) eqt)) (tb2t9
                                                     (get t1
                                                     (infix_at (matrix1 t1) b
                                                     (infix_at
                                                     (infix_mngt b
                                                     (matrix1 t1)) a f e)
                                                     eqt) i j))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (e uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc155 b a sqt f) e)) (mat_sum b sqt
                                                            (infix_at
                                                            (infix_mngt b
                                                            (matrix1 t1)) a f
                                                            e))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt a t1)
  (fc157 b a x x1 x2 x3)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 Int) (x2 Int) (x3 uni)) (sort (infix_mngt b t1)
  (fc156 b a x x1 x2 x3)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a (matrix1 t1))
  (fc155 b a x x1)))))

;; mat_sum_to_sum_fun
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (sqt uni) (f uni) (r Int) (c Int) (i Int) (j Int))
  (=> (< 0 (cardinal a s))
  (=> (< 0 (cardinal b sqt))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (forall ((e1 uni))
  (=> (sort b e1)
  (=> (mem a e s)
  (=> (mem b e1 sqt)
  (= (rows t1
     (infix_at (matrix1 t1) b (infix_at (infix_mngt b (matrix1 t1)) a f e)
     e1)) r)))))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (forall ((e1 uni))
  (=> (sort b e1)
  (=> (mem a e s)
  (=> (mem b e1 sqt)
  (= (columns t1
     (infix_at (matrix1 t1) b (infix_at (infix_mngt b (matrix1 t1)) a f e)
     e1)) c)))))))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (sum a s (fc152 b a sqt f i j)) (sum a s (fc154 b a sqt f i j))))))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
  (= (tb2t9 (infix_at t1 a (fc154 b a sqt f i j) e)) (sum b sqt
                                                     (fc153 b a f i j e))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (i Int) (j Int) (e uni) (e1 uni))
  (= (tb2t9 (infix_at t1 b (fc153 b a f i j e) e1)) (tb2t9
                                                    (get t1
                                                    (infix_at (matrix1 t1) b
                                                    (infix_at
                                                    (infix_mngt b
                                                    (matrix1 t1)) a f e) e1)
                                                    i j))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((sqt uni) (f uni) (i Int) (j Int) (e uni))
  (= (tb2t9 (infix_at t1 a (fc152 b a sqt f i j) e)) (tb2t9
                                                     (get t1
                                                     (t2tb17
                                                     (mat_sum b sqt
                                                     (infix_at
                                                     (infix_mngt b
                                                     (matrix1 t1)) a f e))) i
                                                     j))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt a t1)
  (fc154 b a x x1 x2 x3)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 Int) (x2 Int) (x3 uni)) (sort (infix_mngt b t1)
  (fc153 b a x x1 x2 x3)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt a t1)
  (fc152 b a x x1 x2 x3)))))

;; mat_sum_comp_rec
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (= (s_rows b s f) (s_rows b s g))
  (=> (= (s_columns b s f) (s_columns b s g))
  (=> (< 0 (cardinal b s))
  (= (add_mat (mat_sum b s f) (mat_sum b s g)) (mat_sum b s (fc151 b f g)))))))))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t17 (infix_at (matrix1 t1) b (fc151 b f g) k)) (add_mat
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) b f k))
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) b g k)))))))

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 t1))
  (fc151 b x x1)))))

;; mat_sum_comp
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (= (s_rows b s f) (s_rows b s g))
  (=> (= (s_columns b s f) (s_columns b s g))
  (=> (< 0 (cardinal b s))
  (= (mat_sum b s (fc150 b f g)) (add_mat (mat_sum b s f) (mat_sum b s g)))))))))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t17 (infix_at (matrix1 t1) b (fc150 b f g) k)) (add_mat
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) b f k))
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) b g k)))))))

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 t1))
  (fc150 b x x1)))))

;; mat_sum_comp_pre
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni) (i Int) (j Int))
  (=> (constant_size b s f)
  (=> (constant_size b s g)
  (=> (and (<= 0 i) (< i (s_rows b s f)))
  (=> (and (<= 0 j) (< j (s_columns b s f)))
  (=> (= (s_rows b s f) (s_rows b s g))
  (=> (= (s_columns b s f) (s_columns b s g))
  (=> (< 0 (cardinal b s))
  (= (tb2t9 (get t1 (t2tb17 (mat_sum b s (fc149 b f g))) i j)) (tb2t9
                                                               (get t1
                                                               (t2tb17
                                                               (add_mat
                                                               (mat_sum b s
                                                               f)
                                                               (mat_sum b s
                                                               g))) i j)))))))))))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t17 (infix_at (matrix1 t1) b (fc149 b f g) k)) (add_mat
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) b f k))
                                                        (tb2t17
                                                        (infix_at
                                                        (matrix1 t1) b g k)))))))

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b (matrix1 t1))
  (fc149 b x x1)))))

;; mat_sum_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=> (= (rows t1 (infix_at (matrix1 t1) a f x)) (s_rows a s f))
  (=> (= (columns t1 (infix_at (matrix1 t1) a f x)) (s_columns a s f))
  (=> (not (mem a x s))
  (= (mat_sum a (add a x s) f) (add_mat
                               (tb2t17 (infix_at (matrix1 t1) a f x))
                               (mat_sum a s f)))))))))))

;; mat_sum_to_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (= (mat_sum a s f) (tb2t17
                     (make_f t1 (s_rows a s f) (s_columns a s f)
                     (t2tb13 (fc148 a s f))))))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc148 a s f)) (t2tb2 i))
     (t2tb2 j))) (sum a s (fc147 a f i j))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (e uni))
  (= (tb2t9 (infix_at t1 a (fc147 a f i j) e)) (tb2t9
                                               (get t1
                                               (infix_at (matrix1 t1) a f e)
                                               i j))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt a t1)
  (fc147 a x x1 x2)))))

;; mat_sum_to_sum_pre
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (i Int) (j Int))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=> (and (<= 0 i) (< i (s_rows a s f)))
  (=> (and (<= 0 j) (< j (s_columns a s f)))
  (= (tb2t9 (get t1 (t2tb17 (mat_sum a s f)) i j)) (sum a s (fc146 a f i j))))))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (i Int) (j Int) (e uni))
  (= (tb2t9 (infix_at t1 a (fc146 a f i j) e)) (tb2t9
                                               (get t1
                                               (infix_at (matrix1 t1) a f e)
                                               i j))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt a t1)
  (fc146 a x x1 x2)))))

;; mat_sum_cardone
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (= (cardinal a s) 1)
  (= (mat_sum a s f) (tb2t17 (infix_at (matrix1 t1) a f (element a s))))))))

;; rows_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (n Int))
  (=> (not (= (cardinal a s) 0))
  (=> (constant_size a s f)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) n))))
  (= (rows t1 (t2tb17 (mat_sum a s f))) n)))))))

;; columns_mat_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (n Int))
  (=> (not (= (cardinal a s) 0))
  (=> (constant_size a s f)
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) n))))
  (= (columns t1 (t2tb17 (mat_sum a s f))) n)))))))

;; mat_sum_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (and (= (rows t1 (t2tb17 (mat_sum a s f))) (s_rows a s f))
  (and (= (columns t1 (t2tb17 (mat_sum a s f))) (s_columns a s f))
  (and
  (forall ((e uni))
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) (s_rows a s f))))
  (forall ((e uni))
  (=> (mem a e s)
  (= (columns t1 (infix_at (matrix1 t1) a f e)) (s_columns a s f))))))))))))

;; mat_sum_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (ite (= (cardinal a s) 1)
  (= (mat_sum a s f) (tb2t17 (infix_at (matrix1 t1) a f (element a s))))
  (= (mat_sum a s f) (add_mat
                     (tb2t17 (infix_at (matrix1 t1) a f (choose a s)))
                     (mat_sum a (remove a (choose a s) s) f)))))))))

;; set_s_rows_columns_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=> (= (columns t1 (infix_at (matrix1 t1) a f x)) (s_columns a s f))
  (=> (= (rows t1 (infix_at (matrix1 t1) a f x)) (s_rows a s f))
  (and (= (s_columns a (add a x s) f) (s_columns a s f))
  (= (s_rows a (add a x s) f) (s_rows a s f))))))))))

;; set_s_columns_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=> (= (columns t1 (infix_at (matrix1 t1) a f x)) (s_columns a s f))
  (=> (= (rows t1 (infix_at (matrix1 t1) a f x)) (s_rows a s f))
  (= (s_columns a (add a x s) f) (s_columns a s f)))))))))

;; set_s_rows_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (< 0 (cardinal a s))
  (=> (constant_size a s f)
  (=> (= (columns t1 (infix_at (matrix1 t1) a f x)) (s_columns a s f))
  (=> (= (rows t1 (infix_at (matrix1 t1) a f x)) (s_rows a s f))
  (= (s_rows a (add a x s) f) (s_rows a s f)))))))))

;; set_s_columns_rem
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (and (constant_size a (remove a (choose a s) s) f)
  (= (s_columns a (remove a (choose a s) s) f) (columns t1
                                               (infix_at (matrix1 t1) a f
                                               (choose a s))))))))))

;; set_s_rows_rem
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (< 1 (cardinal a s))
  (=> (constant_size a s f)
  (and (constant_size a (remove a (choose a s) s) f)
  (= (s_rows a (remove a (choose a s) s) f) (rows t1
                                            (infix_at (matrix1 t1) a f
                                            (choose a s))))))))))

;; subset_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (f uni))
  (=> (constant_size a s f)
  (=> (not (is_empty a sqt))
  (=> (subset1 a sqt s)
  (and (constant_size a sqt f)
  (and (= (s_rows a sqt f) (s_rows a s f))
  (= (s_columns a sqt f) (s_columns a s f))))))))))

;; s_columns_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t17 (infix_at (matrix1 t1) a f e)) (tb2t17
                                            (infix_at (matrix1 t1) a g e))))))
  (= (s_columns a s f) (s_columns a s g))))))))

;; s_rows_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=> (constant_size a s f)
  (=> (< 0 (cardinal a s))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (tb2t17 (infix_at (matrix1 t1) a f e)) (tb2t17
                                            (infix_at (matrix1 t1) a g e))))))
  (= (s_rows a s f) (s_rows a s g))))))))

;; set_s_columns_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (elt uni))
  (=> (constant_size a s f)
  (=> (mem a elt s)
  (= (s_columns a s f) (columns t1 (infix_at (matrix1 t1) a f elt))))))))

;; set_s_columns
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int))
  (=> (constant_size a s f)
  (=> (= (columns t1 (infix_at (matrix1 t1) a f (choose a s))) r)
  (= (s_columns a s f) r))))))

;; set_s_rows_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (elt uni))
  (=> (constant_size a s f)
  (=> (mem a elt s)
  (= (s_rows a s f) (rows t1 (infix_at (matrix1 t1) a f elt))))))))

;; set_s_rows
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int))
  (=> (constant_size a s f)
  (=> (= (rows t1 (infix_at (matrix1 t1) a f (choose a s))) r)
  (= (s_rows a s f) r))))))

;; s_columns_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (and (< 0 (s_columns a s f))
  (and
  (forall ((e uni))
  (=> (mem a e s)
  (= (columns t1 (infix_at (matrix1 t1) a f e)) (s_columns a s f))))
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (columns t1 (infix_at (matrix1 t1) a f e)) (columns t1
                                                (infix_at (matrix1 t1) a f
                                                eqt))))))))))))

;; s_columns_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (= (s_columns a s f) (columns t1 (infix_at (matrix1 t1) a f (choose a s))))))))

;; s_rows_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (and (< 0 (s_rows a s f))
  (and
  (forall ((e uni))
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) (s_rows a s f))))
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (rows t1 (infix_at (matrix1 t1) a f e)) (rows t1
                                             (infix_at (matrix1 t1) a f eqt))))))))))))

;; s_rows_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (= (s_rows a s f) (rows t1 (infix_at (matrix1 t1) a f (choose a s))))))))

;; get_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_size a s f)
  (and
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (rows t1 (infix_at (matrix1 t1) a f e)) (rows t1
                                             (infix_at (matrix1 t1) a f eqt))))))
  (forall ((e uni) (eqt uni))
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (columns t1 (infix_at (matrix1 t1) a f e)) (columns t1
                                                (infix_at (matrix1 t1) a f
                                                eqt)))))))))))

;; set_constant_size_set
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (m (matrix t)) (i Int) (j Int))
  (=> (valid_index t1 (t2tb17 m) i j) (constant_size a s (fc145 a f m i j))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (m (matrix t)) (i Int) (j Int) (e uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc145 a f m i j) e)) (tb2t17
                                                            (set3 t1
                                                            (t2tb17 m) i j
                                                            (infix_at 
                                                            t1 a f e)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 (matrix t)) (x2 Int) (x3 Int)) (sort
  (infix_mngt a (matrix1 t1)) (fc145 a x x1 x2 x3)))))

;; guarded_set_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (p uni) (m (matrix t)))
  (=> (constant_size a s f)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (tb2t (infix_at bool a p e)) true))))
  (constant_size a s (fc144 a f p m)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (p uni) (m (matrix t)) (j uni))
  (= (tb2t17 (infix_at (matrix1 t1) a (fc144 a f p m) j)) (ite (= (tb2t
                                                                  (infix_at
                                                                  bool a p j)) true)
                                                          (tb2t17
                                                          (infix_at
                                                          (matrix1 t1) a f j))
                                                          m)))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni) (x2 (matrix t))) (sort
  (infix_mngt a (matrix1 t1)) (fc144 a x x1 x2)))))

;; set_constant_size_t
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (r Int) (c Int))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (rows t1 (infix_at (matrix1 t1) a f e)) r))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s) (= (columns t1 (infix_at (matrix1 t1) a f e)) c))))
  (constant_size a s f))))))

;; set_constant_size
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (rows t1 (infix_at (matrix1 t1) a f e)) (rows t1
                                             (infix_at (matrix1 t1) a f eqt))))))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (= (columns t1 (infix_at (matrix1 t1) a f e)) (columns t1
                                                (infix_at (matrix1 t1) a f
                                                eqt))))))))
  (constant_size a s f))))))

;; constant_size_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (and
  (=> (constant_size a s f)
  (forall ((e uni))
  (=> (mem a e s)
  (and
  (= (rows t1 (infix_at (matrix1 t1) a f e)) (rows t1
                                             (infix_at (matrix1 t1) a f
                                             (choose a s))))
  (= (columns t1 (infix_at (matrix1 t1) a f e)) (columns t1
                                                (infix_at (matrix1 t1) a f
                                                (choose a s))))))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (and
  (= (rows t1 (infix_at (matrix1 t1) a f e)) (rows t1
                                             (infix_at (matrix1 t1) a f
                                             (choose a s))))
  (= (columns t1 (infix_at (matrix1 t1) a f e)) (columns t1
                                                (infix_at (matrix1 t1) a f
                                                (choose a s))))))))
  (constant_size a s f))))))

;; scalar_assoc
  (assert
  (forall ((m (matrix t)) (a t) (b t))
  (= (infix_asdtdt a (infix_asdtdt b m)) (infix_asdtdt (infix_asdt a b) m))))

;; scalar_add
  (assert
  (forall ((m (matrix t)) (a t) (b t))
  (= (infix_asdtdt (infix_pldt a b) m) (add_mat (infix_asdtdt a m)
                                       (infix_asdtdt b m)))))

;; scalar_eq_gen
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t) (b t))
  (=> (= m n) (=> (= a b) (= (infix_asdtdt a m) (infix_asdtdt b n))))))

;; scalar_eq
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t))
  (=> (= m n) (= (infix_asdtdt a m) (infix_asdtdt a n)))))

;; mat_mult_assoc_comm
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 n)) (rows t1 (t2tb17 o)))
  (= (mat_mult m (mat_mult n o)) (mat_mult (mat_mult m n) o))))))

;; mat_mult_assoc
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 n)) (rows t1 (t2tb17 o)))
  (= (mat_mult (mat_mult m n) o) (mat_mult m (mat_mult n o)))))))

;; mat_mult_assoc_pre
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)) (i Int) (j Int))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 n)) (rows t1 (t2tb17 o)))
  (=> (and (<= 0 i) (< i (rows t1 (t2tb17 m))))
  (=> (and (<= 0 j) (< j (columns t1 (t2tb17 o))))
  (= (tb2t9 (get t1 (t2tb17 (mat_mult (mat_mult m n) o)) i j)) (tb2t9
                                                               (get t1
                                                               (t2tb17
                                                               (mat_mult m
                                                               (mat_mult n o)))
                                                               i j)))))))))

;; ind_sum_commute_scal_r
  (assert
  (forall ((f (Array Int (Array Int t))) (g (Array Int t)) (i Int) (j Int)
  (k Int) (l Int))
  (=> (<= i j)
  (=> (<= k l)
  (= (ind_sum (fc141 f g k l) i j) (ind_sum (fc143 f g i j) k l))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (g (Array Int t)) (i Int) (j Int)
  (k1 Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc143 f g i j)) (t2tb2 k1))) (ind_sum
                                                                   (fc142 f g
                                                                   k1) i j))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (g (Array Int t)) (k1 Int) (k2 Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc142 f g k1)) (t2tb2 k2))) (infix_asdt
                                                                  (tb2t9
                                                                  (infix_at
                                                                  t1 
                                                                  int
                                                                  (infix_at
                                                                  (infix_mngt
                                                                  int 
                                                                  t1) 
                                                                  int
                                                                  (t2tb13 f)
                                                                  (t2tb2 k2))
                                                                  (t2tb2 k1)))
                                                                  (tb2t9
                                                                  (infix_at
                                                                  t1 
                                                                  int
                                                                  (t2tb12 g)
                                                                  (t2tb2 k2)))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (g (Array Int t)) (k Int) (l Int)
  (k1 Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc141 f g k l)) (t2tb2 k1))) (infix_asdt
                                                                   (ind_sum
                                                                   (tb2t12
                                                                   (infix_at
                                                                   (infix_mngt
                                                                   int 
                                                                   t1) 
                                                                   int
                                                                   (t2tb13 f)
                                                                   (t2tb2 k1)))
                                                                   k l)
                                                                   (tb2t9
                                                                   (infix_at
                                                                   t1 
                                                                   int
                                                                   (t2tb12 g)
                                                                   (t2tb2 k1)))))))

;; mat_mult_scal_values_r
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t) (i Int) (j Int))
  (=> (= (rows t1 (t2tb17 n)) (columns t1 (t2tb17 m)))
  (=> (= (rows t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (and (<= 0 i) (< i (rows t1 (t2tb17 m))))
  (=> (and (<= 0 j) (< j (columns t1 (t2tb17 n))))
  (= (infix_asdt (tb2t9 (get t1 (t2tb17 (mat_mult m n)) i j)) a) (ind_sum
                                                                 (fc140 m n a
                                                                 i j) 0
                                                                 (columns 
                                                                 t1
                                                                 (t2tb17 m)))))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc140 m n a i j)) (t2tb2 k))) (infix_asdt
                                                                    (infix_asdt
                                                                    a
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    m) i k)))
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    n) k j))))))

;; mat_mult_scal_values_l
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t) (i Int) (j Int))
  (=> (= (rows t1 (t2tb17 n)) (columns t1 (t2tb17 m)))
  (=> (and (<= 0 i) (< i (rows t1 (t2tb17 m))))
  (=> (and (<= 0 j) (< j (columns t1 (t2tb17 n))))
  (= (infix_asdt a (tb2t9 (get t1 (t2tb17 (mat_mult m n)) i j))) (ind_sum
                                                                 (fc139 m n a
                                                                 i j) 0
                                                                 (columns 
                                                                 t1
                                                                 (t2tb17 m)))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc139 m n a i j)) (t2tb2 k))) (infix_asdt
                                                                    (infix_asdt
                                                                    a
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    m) i k)))
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    n) k j))))))

;; add_scal
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (a t))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (= (infix_asdtdt a (add_mat m n)) (add_mat (infix_asdtdt a m)
                                    (infix_asdtdt a n)))))))

;; scalar_plus_rev
  (assert
  (forall ((m (matrix t)) (a t) (b t))
  (= (add_mat (infix_asdtdt a m) (infix_asdtdt b m)) (infix_asdtdt
                                                     (infix_pldt a b) m))))

;; scalar_plus
  (assert
  (forall ((m (matrix t)) (a t) (b t))
  (= (infix_asdtdt (infix_pldt a b) m) (add_mat (infix_asdtdt a m)
                                       (infix_asdtdt b m)))))

;; scalar_null_gen
  (assert
  (forall ((m (matrix t)) (a t))
  (=> (= a tzero) (null_mat (infix_asdtdt a m)))))

;; scalar_tone_gen
  (assert
  (forall ((m (matrix t)) (a t)) (=> (= a tone) (= (infix_asdtdt a m) m))))

;; scalar_tone
  (assert (forall ((m (matrix t))) (= (infix_asdtdt tone m) m)))

;; scalar_null
  (assert (forall ((m (matrix t))) (null_mat (infix_asdtdt tzero m))))

;; scalar_rows
  (assert
  (forall ((m (matrix t)) (a t))
  (= (rows t1 (t2tb17 (infix_asdtdt a m))) (rows t1 (t2tb17 m)))))

;; scalar_values
  (assert
  (forall ((m (matrix t)) (a t) (i Int) (j Int))
  (= (tb2t9 (get t1 (t2tb17 (infix_asdtdt a m)) i j)) (infix_asdt a
                                                      (tb2t9
                                                      (get t1 (t2tb17 m) i j))))))

;; scalar_columns
  (assert
  (forall ((m (matrix t)) (a t))
  (= (columns t1 (t2tb17 (infix_asdtdt a m))) (columns t1 (t2tb17 m)))))

;; infix *.._spec
  (assert
  (forall ((s t) (m (matrix t)))
  (and (= (columns t1 (t2tb17 (infix_asdtdt s m))) (columns t1 (t2tb17 m)))
  (and (= (rows t1 (t2tb17 (infix_asdtdt s m))) (rows t1 (t2tb17 m)))
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (infix_asdtdt s m)) i j)
  (= (tb2t9 (get t1 (t2tb17 (infix_asdtdt s m)) i j)) (infix_asdt s
                                                      (tb2t9
                                                      (get t1 (t2tb17 m) i j))))))
  (forall ((i Int) (j Int))
  (= (valid_index t1 (t2tb17 (infix_asdtdt s m)) i j) (valid_index t1
  (t2tb17 m) i j))))))))

;; infix *.._def
  (assert
  (forall ((s t) (m (matrix t)))
  (= (infix_asdtdt s m) (tb2t17
                        (make_f t1 (rows t1 (t2tb17 m))
                        (columns t1 (t2tb17 m)) (t2tb13 (result16 s m)))))))

;; result_def
  (assert
  (forall ((s t) (m (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result16 s m)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt s (tb2t9 (get t1 (t2tb17 m) i j))))))

;; distr_r
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)))
  (=> (= (rows t1 (t2tb17 n)) (rows t1 (t2tb17 o)))
  (=> (= (columns t1 (t2tb17 n)) (columns t1 (t2tb17 o)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (mat_mult m (add_mat n o)) (add_mat (mat_mult m n) (mat_mult m o))))))))

;; distr_2_pre
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)) (i Int) (j Int))
  (=> (= (rows t1 (t2tb17 n)) (rows t1 (t2tb17 o)))
  (=> (= (columns t1 (t2tb17 n)) (columns t1 (t2tb17 o)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (and (<= 0 i) (< i (rows t1 (t2tb17 m))))
  (=> (and (<= 0 j) (< j (columns t1 (t2tb17 n))))
  (and (valid_index t1 (t2tb17 (mat_mult m (add_mat n o))) i j)
  (= (tb2t9 (get t1 (t2tb17 (mat_mult m (add_mat n o))) i j)) (tb2t9
                                                              (get t1
                                                              (t2tb17
                                                              (add_mat
                                                              (mat_mult m n)
                                                              (mat_mult m o)))
                                                              i j)))))))))))

;; distr_l
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (= (mat_mult (add_mat m n) o) (add_mat (mat_mult m o) (mat_mult n o))))))))

;; distr_1_pre
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)) (i Int) (j Int))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 o)))
  (=> (and (<= 0 i) (< i (rows t1 (t2tb17 m))))
  (=> (and (<= 0 j) (< j (columns t1 (t2tb17 o))))
  (= (tb2t9 (get t1 (t2tb17 (mat_mult (add_mat m n) o)) i j)) (tb2t9
                                                              (get t1
                                                              (t2tb17
                                                              (add_mat
                                                              (mat_mult m o)
                                                              (mat_mult n o)))
                                                              i j))))))))))

;; add_neutral_spec
  (assert
  (forall ((us tuple0))
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (add_neutral us)) i j)
  (= (tb2t9 (get t1 (t2tb17 (add_neutral us)) i j)) tzero)))
  (and (< 0 (rows t1 (t2tb17 (add_neutral us))))
  (< 0 (columns t1 (t2tb17 (add_neutral us))))))))

;; add_mat_comm
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (= (add_mat m n) (add_mat n m))))))

;; add_mat_eq
  (assert
  (forall ((m (matrix t)) (m1 (matrix t)) (n (matrix t)) (n1 (matrix t)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= m m1) (=> (= n n1) (= (add_mat m n) (add_mat m1 n1))))))))

;; set_dim_add
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (=>
  (and (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (rows t1 (t2tb17 n)) i))
  (=>
  (and (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (= (columns t1 (t2tb17 n)) j))
  (and (= (rows t1 (t2tb17 (add_mat m n))) i)
  (= (columns t1 (t2tb17 (add_mat m n))) j))))))

;; set_equal_dim_elt
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (=>
  (and (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (rows t1 (t2tb17 n)) i))
  (=>
  (and (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (= (columns t1 (t2tb17 n)) j))
  (and (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n))))))))

;; add_rows
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (rows t1 (t2tb17 (add_mat m n))) (rows t1 (t2tb17 m)))))))

;; add_columns
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (columns t1 (t2tb17 (add_mat m n))) (columns t1 (t2tb17 m)))))))

;; set_equal_rows_elt
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int))
  (=>
  (and (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (rows t1 (t2tb17 n)) i)) (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n))))))

;; set_equal_columns_elt
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int))
  (=>
  (and (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (= (columns t1 (t2tb17 n)) i))
  (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n))))))

;; add_mat_null_right
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (null_mat n) (= (add_mat m n) m))))))

;; add_mat_null_left
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (null_mat m) (= (add_mat m n) n))))))

;; add_values
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (tb2t9 (get t1 (t2tb17 (add_mat m n)) i j)) (infix_pldt
                                                 (tb2t9
                                                 (get t1 (t2tb17 m) i j))
                                                 (tb2t9
                                                 (get t1 (t2tb17 n) i j))))))))

;; add_value
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows t1 (t2tb17 m))))
  (=> (and (<= 0 j) (< j (columns t1 (t2tb17 m))))
  (= (tb2t9 (get t1 (t2tb17 (add_mat m n)) i j)) (infix_pldt
                                                 (tb2t9
                                                 (get t1 (t2tb17 m) i j))
                                                 (tb2t9
                                                 (get t1 (t2tb17 n) i j))))))))))))

;; add_mat_equal
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (mqt (matrix t)) (nqt (matrix t)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (=> (= m mqt) (=> (= n nqt) (= (add_mat m n) (add_mat mqt nqt))))))))

;; add_mat_spec
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (and
  (and (= (columns t1 (t2tb17 (add_mat m n))) (columns t1 (t2tb17 m)))
  (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n))))
  (and
  (and (= (rows t1 (t2tb17 (add_mat m n))) (rows t1 (t2tb17 m)))
  (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n))))
  (forall ((i Int) (j Int))
  (= (tb2t9 (get t1 (t2tb17 (add_mat m n)) i j)) (infix_pldt
                                                 (tb2t9
                                                 (get t1 (t2tb17 m) i j))
                                                 (tb2t9
                                                 (get t1 (t2tb17 n) i j)))))))))))

;; add_mat_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (= (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
  (= (add_mat m n) (tb2t17
                   (make_f t1 (rows t1 (t2tb17 m)) (columns t1 (t2tb17 m))
                   (t2tb13 (result15 m n)))))))))

;; result_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result15 m n)) (t2tb2 i))
     (t2tb2 j))) (infix_pldt (tb2t9 (get t1 (t2tb17 m) i j))
                 (tb2t9 (get t1 (t2tb17 n) i j))))))

;; identity_product_right
  (assert
  (forall ((n Int) (m (matrix t)))
  (=> (<= 0 n)
  (=> (= (columns t1 (t2tb17 m)) (power 2 n))
  (= (mat_mult m (identity1 n)) m)))))

;; identity_product_left
  (assert
  (forall ((n Int) (m (matrix t)))
  (=> (<= 0 n)
  (=> (= (rows t1 (t2tb17 m)) (power 2 n)) (= (mat_mult (identity1 n) m) m)))))

;; diag_identity
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (= (identity1 n) (diag_mat (power 2 n)
                   (tb2t12
                   (infix_at (infix_mngt int t1) t1 (t2tb24 fc138)
                   (t2tb9 tone))))))))

;; fc_def
  (assert
  (forall ((y0 t) (y1 Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) t1 (t2tb24 fc138) (t2tb9 y0)) (t2tb2 y1))) y0)))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt t1 (infix_mngt int t1)) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array t (Array Int t))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array t (Array Int t)))) (sort
  (infix_mngt t1 (infix_mngt int t1)) (t2tb24 x))))

;; identity_values
  (assert
  (forall ((n Int) (i Int) (j Int))
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (= (tb2t9 (get t1 (t2tb17 (identity1 n)) i j)) (indic int (t2tb2 i)
                                                 (t2tb2 j))))))))

;; identity_indic
  (assert
  (forall ((n Int))
  (=> (<= 0 n)
  (and (= (rows t1 (t2tb17 (identity1 n))) (power 2 n))
  (and (= (columns t1 (t2tb17 (identity1 n))) (power 2 n))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (identity1 n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (identity1 n)) i j)) (indic int (t2tb2 i)
                                                 (t2tb2 j))))))))))

;; identity_z
  (assert
  (and (= (identity1 0) (tb2t17 (make t1 1 1 (t2tb9 tone))))
  (and (= (rows t1 (t2tb17 (identity1 0))) 1)
  (and (= (rows t1 (t2tb17 (identity1 0))) 1)
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (identity1 0)) i j)
  (= (tb2t9 (get t1 (t2tb17 (identity1 0)) i j)) tone)))))))

;; identity_def
  (assert (forall ((n Int)) (=> (<= 0 n) (= (identity1 n) (pow qbit_id n)))))

;; qbit_id_values
  (assert
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i 2))
  (=> (and (<= 0 j) (< j 2))
  (= (tb2t9 (get t1 (t2tb17 qbit_id) i j)) (indic int (t2tb2 i) (t2tb2 j)))))))

;; indic_closure_def
  (assert
  (forall ((a ty))
  (forall ((y uni) (y1 uni))
  (= (tb2t9
     (infix_at t1 a (infix_at (infix_mngt a t1) a (indic_closure a) y) y1)) 
  (indic a y y1)))))

;; indic_closure_sort
  (assert
  (forall ((a ty)) (sort (infix_mngt a (infix_mngt a t1)) (indic_closure a))))

;; two_bloc_mult_diag
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t))))
  (g (Array Int t)))
  (=> (<= 2 n)
  (= (mat_mult (two_bloc_diag_mat n f) (diag_mat (power 2 n) g)) (two_bloc_diag_mat
                                                                 n
                                                                 (fc137 n f
                                                                 g))))))

;; fc_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t))))
  (g (Array Int t)) (hi Int) (ti Int) (tj Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int
     (infix_at (infix_mngt int (infix_mngt int t1)) int
     (t2tb23 (fc137 n f g)) (t2tb2 hi)) (t2tb2 ti)) (t2tb2 tj))) (infix_asdt
                                                                 (tb2t9
                                                                 (infix_at 
                                                                 t1 int
                                                                 (infix_at
                                                                 (infix_mngt
                                                                 int 
                                                                 t1) 
                                                                 int
                                                                 (infix_at
                                                                 (infix_mngt
                                                                 int
                                                                 (infix_mngt
                                                                 int 
                                                                 t1)) 
                                                                 int
                                                                 (t2tb23 f)
                                                                 (t2tb2 hi))
                                                                 (t2tb2 ti))
                                                                 (t2tb2 tj)))
                                                                 (tb2t9
                                                                 (infix_at 
                                                                 t1 int
                                                                 (t2tb12 g)
                                                                 (t2tb2
                                                                 (ht_to_int
                                                                 hi tj n))))))))

;; two_bloc_diag_two
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t))))
  (g (Array Int (Array Int (Array Int t)))))
  (=> (<= 2 n)
  (= (mat_mult (two_bloc_diag_mat n f) (diag_two_mat n g)) (tb2t17
                                                           (make_f t1
                                                           (power 2 n)
                                                           (power 2 n)
                                                           (t2tb13
                                                           (fc136 n f g))))))))

;; fc_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t))))
  (g (Array Int (Array Int (Array Int t)))) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc136 n f g)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (tb2t9
                 (infix_at t1 int
                 (infix_at (infix_mngt int t1) int
                 (infix_at (infix_mngt int (infix_mngt int t1)) int
                 (t2tb23 f) (t2tb2 (head_bit i n))) (t2tb2 (tail_bits i n)))
                 (t2tb2 (tail_bits j n))))
                 (tb2t9
                 (infix_at t1 int
                 (infix_at (infix_mngt int t1) int
                 (infix_at (infix_mngt int (infix_mngt int t1)) int
                 (t2tb23 g) (t2tb2 (head_bit i n))) (t2tb2 (head_bit j n)))
                 (t2tb2 (tail_bits j n))))))))

;; two_bloc_diag_two_val
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t))))
  (g (Array Int (Array Int (Array Int t)))) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (=> (<= 2 n)
  (= (tb2t9
     (get t1 (t2tb17 (mat_mult (two_bloc_diag_mat n f) (diag_two_mat n g))) i
     j)) (infix_asdt
         (tb2t9
         (infix_at t1 int
         (infix_at (infix_mngt int t1) int
         (infix_at (infix_mngt int (infix_mngt int t1)) int (t2tb23 f)
         (t2tb2 (head_bit i n))) (t2tb2 (tail_bits i n)))
         (t2tb2 (tail_bits j n))))
         (tb2t9
         (infix_at t1 int
         (infix_at (infix_mngt int t1) int
         (infix_at (infix_mngt int (infix_mngt int t1)) int (t2tb23 g)
         (t2tb2 (head_bit i n))) (t2tb2 (head_bit j n)))
         (t2tb2 (tail_bits j n)))))))))))

;; two_bloc_diag_mat_spec
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))))
  (=> (<= 2 n)
  (and (= (rows t1 (t2tb17 (two_bloc_diag_mat n f))) (power 2 n))
  (and (= (columns t1 (t2tb17 (two_bloc_diag_mat n f))) (power 2 n))
  (= (two_bloc_diag_mat n f) (tb2t17
                             (make_f t1 (power 2 n) (power 2 n)
                             (t2tb13 (fc135 n f))))))))))

;; fc_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc135 n f)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (head_bit i n)) (t2tb2 (head_bit j n)))
                 (tb2t9
                 (infix_at t1 int
                 (infix_at (infix_mngt int t1) int
                 (infix_at (infix_mngt int (infix_mngt int t1)) int
                 (t2tb23 f) (t2tb2 (head_bit i n))) (t2tb2 (tail_bits i n)))
                 (t2tb2 (tail_bits j n))))))))

;; two_bloc_diag_mat_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))))
  (=> (<= 2 n)
  (= (two_bloc_diag_mat n f) (tb2t17
                             (make_f t1 (power 2 n) (power 2 n)
                             (t2tb13 (result14 n f))))))))

;; result_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result14 n f)) (t2tb2 i))
     (t2tb2 j))) (ite (and (and (<= 0 i) (< i (power 2 n)))
                      (and (<= 0 j) (< j (power 2 n))))
                 (infix_asdt
                 (indic int (t2tb2 (head_bit i n)) (t2tb2 (head_bit j n)))
                 (tb2t9
                 (infix_at t1 int
                 (infix_at (infix_mngt int t1) int
                 (infix_at (infix_mngt int (infix_mngt int t1)) int
                 (t2tb23 f) (t2tb2 (head_bit i n))) (t2tb2 (tail_bits i n)))
                 (t2tb2 (tail_bits j n))))) tzero))))

;; diag_two_mat_spec
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))))
  (=> (<= 2 n)
  (and (= (rows t1 (t2tb17 (diag_two_mat n f))) (power 2 n))
  (and (= (columns t1 (t2tb17 (diag_two_mat n f))) (power 2 n))
  (= (diag_two_mat n f) (tb2t17
                        (make_f t1 (power 2 n) (power 2 n)
                        (t2tb13 (fc134 n f))))))))))

;; fc_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc134 n f)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (indic int (t2tb2 (tail_bits i n)) (t2tb2 (tail_bits j n)))
                 (tb2t9
                 (infix_at t1 int
                 (infix_at (infix_mngt int t1) int
                 (infix_at (infix_mngt int (infix_mngt int t1)) int
                 (t2tb23 f) (t2tb2 (head_bit i n))) (t2tb2 (head_bit j n)))
                 (t2tb2 (tail_bits i n))))))))

;; diag_two_mat_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))))
  (=> (<= 2 n)
  (= (diag_two_mat n f) (tb2t17
                        (make_f t1 (power 2 n) (power 2 n)
                        (t2tb13 (result13 n f))))))))

;; result_def
  (assert
  (forall ((n Int) (f (Array Int (Array Int (Array Int t)))) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result13 n f)) (t2tb2 i))
     (t2tb2 j))) (ite (and (and (<= 0 i) (< i (power 2 n)))
                      (and (<= 0 j) (< j (power 2 n))))
                 (infix_asdt
                 (indic int (t2tb2 (tail_bits i n)) (t2tb2 (tail_bits j n)))
                 (tb2t9
                 (infix_at t1 int
                 (infix_at (infix_mngt int t1) int
                 (infix_at (infix_mngt int (infix_mngt int t1)) int
                 (t2tb23 f) (t2tb2 (head_bit i n))) (t2tb2 (head_bit j n)))
                 (t2tb2 (tail_bits i n))))) tzero))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int (infix_mngt int (infix_mngt int t1))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int (Array Int (Array Int t)))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int (Array Int (Array Int t))))) (sort
  (infix_mngt int (infix_mngt int (infix_mngt int t1))) (t2tb23 x))))

;; int_mat_diag_prod
  (assert
  (forall ((f (Array Int (Array Int t))) (i Int) (j Int) (n Int))
  (=> (< 0 n)
  (=> (<= i j) (= (int_mat_prod (fc131 f n) i j) (diag_mat n (fc133 f i j)))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc133 f i j)) (t2tb2 k))) (ind_product
                                                                (fc132 f k) i
                                                                (+ j 1)))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (k Int) (l Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc132 f k)) (t2tb2 l))) (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (infix_at
                                                              (infix_mngt 
                                                              int t1) 
                                                              int (t2tb13 f)
                                                              (t2tb2 l))
                                                              (t2tb2 k))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (n Int) (k Int))
  (= (tb2t17 (infix_at (matrix1 t1) int (t2tb20 (fc131 f n)) (t2tb2 k))) 
  (diag_mat n
  (tb2t12 (infix_at (infix_mngt int t1) int (t2tb13 f) (t2tb2 k)))))))

;; ind_product_re
  (assert
  (forall ((f (Array Int (Array Int t))) (i Int) (j Int) (n Int))
  (=> (< i j)
  (forall ((k Int))
  (=> (and (<= 0 k) (< k n))
  (= (ind_product (fc129 f k) i (+ j 1)) (infix_asdt
                                         (ind_product (fc130 f k) i j)
                                         (tb2t9
                                         (infix_at t1 int
                                         (infix_at (infix_mngt int t1) 
                                         int (t2tb13 f) (t2tb2 j)) (t2tb2 k))))))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (k Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc130 f k)) (t2tb2 i))) (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (infix_at
                                                              (infix_mngt 
                                                              int t1) 
                                                              int (t2tb13 f)
                                                              (t2tb2 i))
                                                              (t2tb2 k))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (k Int) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc129 f k)) (t2tb2 i))) (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (infix_at
                                                              (infix_mngt 
                                                              int t1) 
                                                              int (t2tb13 f)
                                                              (t2tb2 i))
                                                              (t2tb2 k))))))

;; diag_mult_diag
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (n Int))
  (=> (< 0 n)
  (= (mat_mult (diag_mat n f) (diag_mat n g)) (diag_mat n (fc128 f g))))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc128 f g)) (t2tb2 i))) (infix_asdt
                                                              (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (t2tb12 f)
                                                              (t2tb2 i)))
                                                              (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (t2tb12 g)
                                                              (t2tb2 i)))))))

;; diag_mult_mat
  (assert
  (forall ((m (matrix t)) (f (Array Int t)))
  (= (mat_mult (diag_mat (rows t1 (t2tb17 m)) f) m) (tb2t17
                                                    (make_f t1
                                                    (rows t1 (t2tb17 m))
                                                    (columns t1 (t2tb17 m))
                                                    (t2tb13 (fc127 m f)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (f (Array Int t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc127 m f)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt (tb2t9 (get t1 (t2tb17 m) i j))
                 (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 i)))))))

;; mat_mult_diag
  (assert
  (forall ((m (matrix t)) (f (Array Int t)))
  (= (mat_mult m (diag_mat (columns t1 (t2tb17 m)) f)) (tb2t17
                                                       (make_f t1
                                                       (rows t1 (t2tb17 m))
                                                       (columns t1
                                                       (t2tb17 m))
                                                       (t2tb13 (fc126 m f)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (f (Array Int t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc126 m f)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt (tb2t9 (get t1 (t2tb17 m) i j))
                 (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 j)))))))

;; diag_mat_eq
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (n Int))
  (=> (< 0 n)
  (=>
  (forall ((i Int))
  (=> (and (<= 0 i) (< i n))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 i))) (tb2t9
                                                    (infix_at t1 int
                                                    (t2tb12 g) (t2tb2 i))))))
  (= (diag_mat n f) (diag_mat n g))))))

;; diag_mat_values
  (assert
  (forall ((n Int) (f (Array Int t)) (i Int) (j Int))
  (=> (and (<= 0 i) (< i n))
  (=> (and (<= 0 j) (< j n))
  (= (tb2t9 (get t1 (t2tb17 (diag_mat n f)) i j)) (infix_asdt
                                                  (tb2t9
                                                  (infix_at t1 int (t2tb12 f)
                                                  (t2tb2 i)))
                                                  (indic int (t2tb2 i)
                                                  (t2tb2 j))))))))

;; diag_mat_spec
  (assert
  (forall ((n Int) (f (Array Int t)))
  (=> (< 0 n)
  (and
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i n)) (and (<= 0 j) (< j n)))
  (=> (not (= i j)) (= (tb2t9 (get t1 (t2tb17 (diag_mat n f)) i j)) tzero))))
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i n)) (and (<= 0 j) (< j n)))
  (=> (= i j)
  (= (tb2t9 (get t1 (t2tb17 (diag_mat n f)) i j)) (tb2t9
                                                  (infix_at t1 int (t2tb12 f)
                                                  (t2tb2 i)))))))))))

;; diag_mat_def
  (assert
  (forall ((n Int) (f (Array Int t)))
  (=> (< 0 n)
  (= (diag_mat n f) (tb2t17 (make_f t1 n n (t2tb13 (result12 f))))))))

;; result_def
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result12 f)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 i)))
                 (indic int (t2tb2 i) (t2tb2 j))))))

;; int_mat_prod_eq
  (assert
  (forall ((f (Array Int (matrix t))) (g (Array Int (matrix t))) (i Int)
  (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (<= i k) (<= k j))
  (=> (and (<= i kqt) (<= kqt j))
  (and
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))) (rows 
                                                                t1
                                                                (infix_at
                                                                (matrix1 t1)
                                                                int
                                                                (t2tb20 f)
                                                                (t2tb2 kqt))))
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 kqt))) (columns 
                                                                  t1
                                                                  (infix_at
                                                                  (matrix1
                                                                  t1) 
                                                                  int
                                                                  (t2tb20 f)
                                                                  (t2tb2 kqt))))))))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (<= k j))
  (= (tb2t17 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))) (tb2t17
                                                               (infix_at
                                                               (matrix1 t1)
                                                               int (t2tb20 g)
                                                               (t2tb2 k))))))
  (= (int_mat_prod f i j) (int_mat_prod g i j)))))))

;; int_mat_prod_plus_one_spec
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))) (rows 
                                                                t1
                                                                (infix_at
                                                                (matrix1 t1)
                                                                int
                                                                (t2tb20 f)
                                                                (t2tb2 kqt))))
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 kqt))) (columns 
                                                                  t1
                                                                  (infix_at
                                                                  (matrix1
                                                                  t1) 
                                                                  int
                                                                  (t2tb20 f)
                                                                  (t2tb2 kqt)))))))
  (= (int_mat_prod f i j) (mat_mult (int_mat_prod f i (- j 1))
                          (tb2t17
                          (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 j)))))))))

;; int_mat_prod_plus_one_def
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))) (rows 
                                                                t1
                                                                (infix_at
                                                                (matrix1 t1)
                                                                int
                                                                (t2tb20 f)
                                                                (t2tb2 kqt))))
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 kqt))) (columns 
                                                                  t1
                                                                  (infix_at
                                                                  (matrix1
                                                                  t1) 
                                                                  int
                                                                  (t2tb20 f)
                                                                  (t2tb2 kqt)))))))
  (= (int_mat_prod_plus_one f i j) Tuple0)))))

;; int_mat_prod_zero
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=>
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 i))) (columns 
                                                                t1
                                                                (infix_at
                                                                (matrix1 t1)
                                                                int
                                                                (t2tb20 f)
                                                                (t2tb2 i))))
  (=> (= i j)
  (= (int_mat_prod f i j) (tb2t17
                          (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 i))))))))

;; int_mat_prod_spec
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))) (rows 
                                                                t1
                                                                (infix_at
                                                                (matrix1 t1)
                                                                int
                                                                (t2tb20 f)
                                                                (t2tb2 kqt))))
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 kqt))) (columns 
                                                                  t1
                                                                  (infix_at
                                                                  (matrix1
                                                                  t1) 
                                                                  int
                                                                  (t2tb20 f)
                                                                  (t2tb2 kqt)))))))
  (and
  (= (rows t1 (t2tb17 (int_mat_prod f i j))) (rows t1
                                             (infix_at (matrix1 t1) int
                                             (t2tb20 f) (t2tb2 i))))
  (and
  (= (columns t1 (t2tb17 (int_mat_prod f i j))) (columns t1
                                                (infix_at (matrix1 t1) 
                                                int (t2tb20 f) (t2tb2 i))))
  (= (columns t1 (t2tb17 (int_mat_prod f i j))) (rows t1
                                                (infix_at (matrix1 t1) 
                                                int (t2tb20 f) (t2tb2 i))))))))))

;; int_mat_prod_def
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int) (kqt Int))
  (=> (and (and (<= i k) (<= k j)) (and (<= i kqt) (<= kqt j)))
  (and
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))) (rows 
                                                                t1
                                                                (infix_at
                                                                (matrix1 t1)
                                                                int
                                                                (t2tb20 f)
                                                                (t2tb2 kqt))))
  (= (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 kqt))) (columns 
                                                                  t1
                                                                  (infix_at
                                                                  (matrix1
                                                                  t1) 
                                                                  int
                                                                  (t2tb20 f)
                                                                  (t2tb2 kqt)))))))
  (ite (= (- j i) 0)
  (= (int_mat_prod f i j) (tb2t17
                          (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 i))))
  (= (int_mat_prod f i j) (mat_mult_no_bound (int_mat_prod f i (- j 1))
                          (tb2t17
                          (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 j))))))))))

;; mat_mult_values_quant
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (mat_mult m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (mat_mult m n)) i j)) (ind_sum (fc125 m n i j) 0
                                                  (columns t1 (t2tb17 m)))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc125 m n i j)) (t2tb2 k))) (infix_asdt
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  i k))
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 n)
                                                                  k j))))))

;; mat_mult_values
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (=> (valid_index t1 (t2tb17 (mat_mult m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (mat_mult m n)) i j)) (ind_sum (fc124 m n i j) 0
                                                  (columns t1 (t2tb17 m))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc124 m n i j)) (t2tb2 k))) (infix_asdt
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  i k))
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 n)
                                                                  k j))))))

;; mat_mult_spec
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (and (= (rows t1 (t2tb17 (mat_mult m n))) (rows t1 (t2tb17 m)))
  (and (= (columns t1 (t2tb17 (mat_mult m n))) (columns t1 (t2tb17 n)))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (mat_mult m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (mat_mult m n)) i j)) (ind_sum (fc123 m n i j) 0
                                                  (columns t1 (t2tb17 m)))))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc123 m n i j)) (t2tb2 k))) (infix_asdt
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  i k))
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 n)
                                                                  k j))))))

;; mat_mult_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (mat_mult m n) (mat_mult_no_bound m n)))))

;; mat_mult_no_bound_spec
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (and
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (rows t1 (t2tb17 (mat_mult_no_bound m n))) (rows t1 (t2tb17 m))))
  (and
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (columns t1 (t2tb17 (mat_mult_no_bound m n))) (columns t1 (t2tb17 n))))
  (=> (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (mat_mult_no_bound m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (mat_mult_no_bound m n)) i j)) (ind_sum
                                                           (fc122 m n i j) 0
                                                           (columns t1
                                                           (t2tb17 m)))))))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc122 m n i j)) (t2tb2 k))) (infix_asdt
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  i k))
                                                                  (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 n)
                                                                  k j))))))

;; mat_mult_no_bound_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (ite (= (columns t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
  (= (mat_mult_no_bound m n) (tb2t17
                             (make_f t1 (rows t1 (t2tb17 m))
                             (columns t1 (t2tb17 n)) (t2tb13 (result10 m n)))))
  (= (mat_mult_no_bound m n) (tb2t17 (make_f t1 1 1 (t2tb13 result11)))))))

;; result_def
  (assert
  (forall ((i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 result11) (t2tb2 i))
     (t2tb2 j))) tzero)))

;; result_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result10 m n)) (t2tb2 i))
     (t2tb2 j))) (ind_sum (result9 m n i j) 0 (columns t1 (t2tb17 m))))))

;; result_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (result9 m n i j)) (t2tb2 k))) (infix_asdt
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    m) i k))
                                                                    (tb2t9
                                                                    (get 
                                                                    t1
                                                                    (t2tb17
                                                                    n) k j))))))

;; subset_closure_binaries
  (assert
  (forall ((i Int) (j Int) (k Int) (m Int) (t2 (Array Int Int)))
  (=> (and (<= i k) (and (< k m) (< m j)))
  (=> (is_binary t2 i j) (is_binary t2 k m)))))

;; is_binary_kth_bit_r
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i) (is_binary
  (tb2t8
  (infix_at (infix_mngt int int) int (t2tb15 kth_bit_r_closure) (t2tb2 i))) 1
  (+ k 1)))))

;; kth_bit_r_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 kth_bit_r_closure) (t2tb2 y))
     (t2tb2 y1))) (kth_bit_r y y1))))

;; nary_to_binary
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (is_nary t2 i j 2) (is_binary t2 i j))))

;; binary_to_nary
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (is_binary t2 i j) (is_nary t2 i j 2))))

;; get_is_binary
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=> (is_binary t2 i j)
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) 2)))))))

;; set_is_binary
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) 2)))) (is_binary t2 i
  j))))

;; set_is_all_binary
  (assert
  (forall ((t2 (Array Int Int)))
  (=>
  (forall ((k Int))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) 2))) (is_all_binary t2))))

;; is_all_binary_def
  (assert
  (forall ((t2 (Array Int Int)))
  (= (is_all_binary t2)
  (forall ((k Int))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) 2))))))

;; is_binary_def
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int))
  (= (is_binary t2 i j)
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) 2)))))))

;; tail_bits_mod
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (<= 0 i)
  (=> (<= (binary_length i) n)
  (= (tail_bits i n) (ind_isum (fc121 i n) 2 (+ n 1))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc121 i n)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n l) 
  (power 2 (- n l))))))

;; binary_decomposition_l_mod_gen
  (assert
  (forall ((k Int) (n Int))
  (=> (and (<= 1 k) (< k n))
  (=> (and (<= 0 k) (< k n))
  (forall ((i Int))
  (=> (and (<= 0 i) (< i (power 2 n)))
  (= (mod i (power 2 (- n k))) (ind_isum (fc120 n i) (+ k 1) (+ n 1)))))))))

;; fc_def
  (assert
  (forall ((n Int) (i Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc120 n i)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n l) 
  (power 2 (- n l))))))

;; binary_decomposition_l_mod
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (and (<= 1 k) (< k n))
  (=> (<= 0 i)
  (=> (and (<= 0 k) (< k n))
  (= (mod i (power 2 (- n k))) (ind_isum (fc119 i n) (+ k 1) (+ n 1))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc119 i n)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n l) 
  (power 2 (- n l))))))

;; binary_decomposition_inv
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (and (<= 0 k) (<= k n))
  (=> (<= (binary_length i) n)
  (= (ind_isum (fc117 i n) 1 (+ (- n k) 1)) (ind_isum (fc118 i n) k n)))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc118 i n)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n (- n l)) 
  (power 2 l)))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc117 i n)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n l) 
  (power 2 (- n l))))))

;; binary_dec_inv
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (and (<= 0 k) (< k n))
  (=> (<= (binary_length i) n)
  (= (ind_isum (fc115 i n) (- n k) n) (ind_isum (fc116 i n) 1 (+ k 1))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc116 i n)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n (- n l)) 
  (power 2 l)))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc115 i n)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n l) 
  (power 2 (- n l))))))

;; binary_decomposition_l
  (assert
  (forall ((i Int) (n Int))
  (=> (<= 0 i)
  (=> (<= (binary_length i) n) (= i (ind_isum (fc114 i n) 1 (+ n 1)))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc114 i n)) (t2tb2 l))) (* (kth_bit_l i
                                                                 n l) 
  (power 2 (- n l))))))

;; binary_decomposition
  (assert
  (forall ((i Int))
  (=> (<= 0 i) (= i (ind_isum (fc113 i) 1 (+ (binary_length i) 1))))))

;; fc_def
  (assert
  (forall ((i Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc113 i)) (t2tb2 l))) (* (kth_bit_r i
                                                               l) (power 2
                                                                  (- l 1))))))

;; mod_binary_comm
  (assert
  (forall ((i Int) (l Int) (k Int))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k l))
  (=> (and (<= 0 k) (< k l))
  (= (kth_bit_r i k) (kth_bit_r (mod i (power 2 l)) k))))))))

;; mod_binary
  (assert
  (forall ((i Int) (l Int) (k Int))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (<= k l))
  (= (kth_bit_r (mod i (power 2 l)) k) (kth_bit_r i k))))))

;; no_rest_bin_length
  (assert
  (forall ((i Int) (l Int))
  (=> (< 0 i)
  (=> (<= 0 l) (=> (= i (power 2 l)) (= (binary_length i) (+ l 1)))))))

;; set_binary_length_b
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i) (=> (< 0 k) (=> (< i (power 2 k)) (<= (binary_length i) k))))))

;; set_binary_length
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i)
  (=> (<= 0 k)
  (=> (=> (< 0 i) (and (<= (power 2 (- k 1)) i) (< i (power 2 k))))
  (=> (=> (< i 2) (= k 1)) (= k (binary_length i))))))))

;; binary_length_spec
  (assert
  (forall ((i Int))
  (=> (<= 0 i)
  (and
  (=> (< 0 i)
  (and (<= (power 2 (- (binary_length i) 1)) i)
  (< i (power 2 (binary_length i)))))
  (and (=> (< i 2) (= (binary_length i) 1))
  (and (<= 1 (binary_length i)) (= i (mod i (power 2 (binary_length i))))))))))

;; binary_length_def
  (assert
  (forall ((i Int)) (=> (<= 0 i) (= (binary_length i) (nary_length i 2)))))

;; kth_weigh_spec
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i)
  (=> (< 0 k)
  (=> (< (power 2 (- k 1)) i)
  (and (<= 0 (kth_weigh i k)) (<= (kth_weigh i k) i)))))))

;; kth_weigh_def
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i) (=> (< 0 k) (= (kth_weigh i k) (weighted_kth_nit_r i k 2))))))

;; ht_to_int_tail
  (assert
  (forall ((hi Int) (i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (=> (and (<= 0 hi) (< hi 2))
  (= (tail_bits (ht_to_int hi (tail_bits i k) k) k) (tail_bits i k)))))))

;; ht_to_int_head
  (assert
  (forall ((i Int) (ti Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (=> (and (<= 0 ti) (< ti (power 2 (- k 1))))
  (= (head_bit (ht_to_int (head_bit i k) ti k) k) (head_bit i k)))))))

;; head_tail_inv
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (= (ht_to_int (head_bit i k) (tail_bits i k) k) i)))))

;; ht_to_int_def
  (assert
  (forall ((hi Int) (ti Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 hi) (< hi 2))
  (=> (and (<= 0 ti) (< ti (power 2 (- k 1))))
  (= (ht_to_int hi ti k) (+ (* hi (power 2 (- k 1))) ti)))))))

;; tail_bits_spec
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (and (<= 0 (tail_bits i k)) (<= (tail_bits i k) (power 2 (- k 1))))))))

;; tail_bits_def
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (= (tail_bits i k) (mod i (power 2 (- k 1))))))))

;; head_bit_spec
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (and (and (<= 0 (head_bit i k)) (<= (head_bit i k) 1))
  (= (head_bit i k) (kth_bit_l i k 1)))))))

;; head_bit_def
  (assert
  (forall ((i Int) (k Int))
  (=> (< 0 k)
  (=> (and (<= 0 i) (< i (power 2 k)))
  (= (head_bit i k) (div i (power 2 (- k 1))))))))

;; kth_bit_l_transl_gen
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (< k n))
  (forall ((l Int))
  (=> (and (< k l) (<= l n))
  (= (kth_bit_l i n l) (kth_bit_l (mod i (power 2 (- n k))) (- n k) (- l k)))))))))

;; kth_bit_l_transl
  (assert
  (forall ((i Int) (l Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (and (< k l) (<= l n)))
  (= (kth_bit_l i n l) (kth_bit_l (mod i (power 2 (- n k))) (- n k) (- l k)))))))

;; kth_bit_l_div_mod
  (assert
  (forall ((i Int) (h1 Int) (k Int))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (<= k h1))
  (= (kth_bit_l i h1 k) (div (mod i (power 2 (+ (- h1 k) 1))) (power 2
                                                              (- h1 k))))))))

;; kth_bit_l_mod_div
  (assert
  (forall ((i Int) (h1 Int) (k Int))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (<= k h1))
  (= (kth_bit_l i h1 k) (mod (div i (power 2 (- h1 k))) 2))))))

;; kth_bit_div_mod
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (= (kth_bit_r i k) (div (mod i (power 2 k)) (power 2 (- k 1))))))))

;; kth_bit_l_spec
  (assert
  (forall ((i Int) (h1 Int) (k Int))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (<= k h1))
  (and (= (kth_bit_l i h1 k) (mod (div i (power 2 (- h1 k))) 2))
  (and (and (<= 0 (kth_bit_l i h1 k)) (<= (kth_bit_l i h1 k) 1))
  (and (= (kth_bit_l i h1 k) (kth_bit_r i (+ (- h1 k) 1)))
  (= (kth_bit_l i h1 k) (kth_right i (+ (- h1 k) 1) (- h1 k)
                        (tb2t8
                        (infix_at (infix_mngt int int) int (t2tb15 fc112)
                        (t2tb2 2))))))))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc112) (t2tb2 y0))
     (t2tb2 y1))) y0)))

;; kth_bit_l_def
  (assert
  (forall ((i Int) (h1 Int) (k Int))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (<= k h1)) (= (kth_bit_l i h1 k) (kth_nit_l i k 2 h1))))))

;; kth_bit_r_spec
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i)
  (=> (<= 1 k) (= (kth_bit_r i k) (mod (div i (power 2 (- k 1))) 2))))))

;; kth_bit_r_def
  (assert
  (forall ((i Int) (k Int))
  (=> (<= 0 i) (=> (<= 1 k) (= (kth_bit_r i k) (kth_nit_r i k 2))))))

;; pow_values
  (assert
  (forall ((m (matrix t)) (i Int) (j Int) (n Int))
  (=> (valid_index t1 (t2tb17 (pow m n)) i j)
  (=> (< 0 n)
  (= (tb2t9 (get t1 (t2tb17 (pow m n)) i j)) (ind_product (fc111 m i j n) 1
                                             (+ n 1)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (i Int) (j Int) (n Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc111 m i j n)) (t2tb2 k))) (tb2t9
                                                                  (get 
                                                                  t1
                                                                  (t2tb17 m)
                                                                  (kth_nit_l
                                                                  i k
                                                                  (rows 
                                                                  t1
                                                                  (t2tb17 m))
                                                                  n)
                                                                  (kth_nit_l
                                                                  j k
                                                                  (columns 
                                                                  t1
                                                                  (t2tb17 m))
                                                                  n))))))

;; pow_plus_one_left
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (< 0 n) (= (pow m n) (kronecker m (pow m (- n 1)))))))

;; pow_transl
  (assert
  (forall ((m (matrix t)) (i Int) (k Int))
  (=> (<= 0 k)
  (=> (<= 0 i)
  (= (pow m k) (k_iter
               (tb2t20
               (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1)
               (t2tb21 fc110) (t2tb17 m))) i (+ k i)))))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc110)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; pow_plus_one_right
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (< 0 n) (= (pow m n) (kronecker (pow m (- n 1)) m)))))

;; pow_z
  (assert
  (forall ((m (matrix t)))
  (and (= (pow m 0) (tb2t17 (make t1 1 1 (t2tb9 tone))))
  (and (= (rows t1 (t2tb17 (pow m 0))) 1)
  (and (= (rows t1 (t2tb17 (pow m 0))) 1)
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (pow m 0)) i j)
  (= (tb2t9 (get t1 (t2tb17 (pow m 0)) i j)) tone))))))))

;; pow_spec
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (and (= (rows t1 (t2tb17 (pow m n))) (power (rows t1 (t2tb17 m)) n))
  (= (columns t1 (t2tb17 (pow m n))) (power (columns t1 (t2tb17 m)) n))))))

;; pow_def
  (assert
  (forall ((m (matrix t)) (n Int))
  (=> (<= 0 n)
  (= (pow m n) (k_iter
               (tb2t20
               (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1)
               (t2tb21 fc109) (t2tb17 m))) 0 n)))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc109)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; k_iter_values_gen
  (assert
  (forall ((f (Array Int (matrix t))) (l Int) (h1 Int))
  (=> (and (<= 0 l) (< l h1))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (k_iter f l h1)) i j)
  (= (tb2t9 (get t1 (t2tb17 (k_iter f l h1)) i j)) (ind_product
                                                   (fc108 f l h1 i j) 1
                                                   (+ (- h1 l) 1))))))))

;; fc_def
  (assert
  (forall ((f (Array Int (matrix t))) (l Int) (h1 Int) (i Int) (j Int)
  (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc108 f l h1 i j)) (t2tb2 k))) 
  (kproj f i j k l h1))))

;; k_iter_values
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (l Int) (h1 Int))
  (=> (valid_index t1 (t2tb17 (k_iter f l h1)) i j)
  (=> (and (<= 0 l) (< l h1))
  (= (tb2t9 (get t1 (t2tb17 (k_iter f l h1)) i j)) (ind_product
                                                   (fc107 f i j l h1) 1
                                                   (+ (- h1 l) 1)))))))

;; fc_def
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (l Int) (h1 Int)
  (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc107 f i j l h1)) (t2tb2 k))) 
  (kproj f i j k l h1))))

;; k_iter_values_guarded
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (l Int) (h1 Int))
  (=>
  (and (<= 0 i)
  (< i (ind_iproduct
       (tb2t8
       (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
       (t2tb22 frows_closure) (t2tb20 f))) l h1)))
  (=>
  (and (<= 0 j)
  (< j (ind_iproduct
       (tb2t8
       (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
       (t2tb22 fcolumns_closure) (t2tb20 f))) l h1)))
  (=> (and (<= 0 l) (< l h1))
  (= (tb2t9 (get t1 (t2tb17 (k_iter f l h1)) i j)) (ind_product
                                                   (fc106 f i j l h1) 1
                                                   (+ (- h1 l) 1))))))))

;; fc_def
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (l Int) (h1 Int)
  (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc106 f i j l h1)) (t2tb2 k))) 
  (kproj f i j k l h1))))

;; k_iter_values_pre_proj
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (l Int) (h1 Int))
  (=>
  (and (<= 0 i)
  (< i (ind_iproduct
       (tb2t8
       (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
       (t2tb22 frows_closure) (t2tb20 f))) l h1)))
  (=>
  (and (<= 0 j)
  (< j (ind_iproduct
       (tb2t8
       (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
       (t2tb22 fcolumns_closure) (t2tb20 f))) l h1)))
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 1 h1)
  (= (tb2t9 (get t1 (t2tb17 (k_iter f l h1)) i j)) (infix_asdt
                                                   (tb2t9
                                                   (get t1
                                                   (t2tb17
                                                   (k_iter f l (- h1 1)))
                                                   (div i (frows f (- h1 1)))
                                                   (div j (fcolumns f
                                                          (- h1 1)))))
                                                   (kproj f i j (- h1 l) l
                                                   h1)))))))))

;; k_iter_values_pre
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (l Int) (h1 Int))
  (=>
  (and (<= 0 i)
  (< i (ind_iproduct
       (tb2t8
       (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
       (t2tb22 frows_closure) (t2tb20 f))) l h1)))
  (=>
  (and (<= 0 j)
  (< j (ind_iproduct
       (tb2t8
       (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
       (t2tb22 fcolumns_closure) (t2tb20 f))) l h1)))
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 1 h1)
  (and
  (= (tb2t9 (get t1 (t2tb17 (k_iter f l h1)) i j)) (infix_asdt
                                                   (tb2t9
                                                   (get t1
                                                   (t2tb17
                                                   (k_iter f l (- h1 1)))
                                                   (div i (frows f (- h1 1)))
                                                   (div j (fcolumns f
                                                          (- h1 1)))))
                                                   (tb2t9
                                                   (get t1
                                                   (infix_at (matrix1 t1) 
                                                   int (t2tb20 f)
                                                   (t2tb2 (- h1 1)))
                                                   (kth_right i 1 h1
                                                   (tb2t8
                                                   (infix_at
                                                   (infix_mngt int int)
                                                   (infix_mngt int
                                                   (matrix1 t1))
                                                   (t2tb22 frows_closure)
                                                   (t2tb20 f))))
                                                   (kth_right j 1 h1
                                                   (tb2t8
                                                   (infix_at
                                                   (infix_mngt int int)
                                                   (infix_mngt int
                                                   (matrix1 t1))
                                                   (t2tb22 fcolumns_closure)
                                                   (t2tb20 f))))))))
  (= (tb2t9 (get t1 (t2tb17 (k_iter f l h1)) i j)) (infix_asdt
                                                   (tb2t9
                                                   (get t1
                                                   (t2tb17
                                                   (k_iter f l (- h1 1)))
                                                   (div i (frows f (- h1 1)))
                                                   (div j (fcolumns f
                                                          (- h1 1)))))
                                                   (tb2t9
                                                   (get t1
                                                   (infix_at (matrix1 t1) 
                                                   int (t2tb20 f)
                                                   (t2tb2 (- h1 1)))
                                                   (kth_left i (- h1 l) l h1
                                                   (tb2t8
                                                   (infix_at
                                                   (infix_mngt int int)
                                                   (infix_mngt int
                                                   (matrix1 t1))
                                                   (t2tb22 frows_closure)
                                                   (t2tb20 f))))
                                                   (kth_left j (- h1 l) l h1
                                                   (tb2t8
                                                   (infix_at
                                                   (infix_mngt int int)
                                                   (infix_mngt int
                                                   (matrix1 t1))
                                                   (t2tb22 fcolumns_closure)
                                                   (t2tb20 f)))))))))))))))

;; kproj_transl_minus_one
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (k Int) (l Int)
  (h1 Int))
  (=> (<= 0 i)
  (=> (and (<= 1 l) (< l h1))
  (=> (<= 0 j)
  (=> (and (<= 1 k) (< k (- h1 l)))
  (and
  (= (kproj f (div i (frows f (- h1 1))) (div j (fcolumns f (- h1 1)))
     (+ k 1) (- l 1) (- h1 1)) (kproj f i j k l h1))
  (= (kproj f (div i (frows f (- h1 1))) (div j (fcolumns f (- h1 1))) k l
     (- h1 1)) (kproj f i j k l h1)))))))))

;; kproj_trans
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (k Int) (l Int)
  (h1 Int) (t2 Int))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 0 j)
  (=> (and (<= 0 t2) (< t2 k))
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj f
     (div i (ind_iproduct
            (tb2t8
            (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
            (t2tb22 frows_closure) (t2tb20 f))) h1 (+ h1 t2)))
     (div j (ind_iproduct
            (tb2t8
            (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
            (t2tb22 fcolumns_closure) (t2tb20 f))) h1 (+ h1 t2)))
     k l h1) (kproj f i j (- k t2) (+ l t2) (+ h1 t2))))))))))

;; kproj_div_mod_genk
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (l Int) (h1 Int))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 0 j)
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj f i j k l h1) (tb2t9
                          (get t1
                          (infix_at (matrix1 t1) int (t2tb20 f)
                          (t2tb2 (- (+ l k) 1)))
                          (div (mod i (ind_iproduct
                                      (tb2t8
                                      (infix_at (infix_mngt int int)
                                      (infix_mngt int (matrix1 t1))
                                      (t2tb22 frows_closure) (t2tb20 f)))
                                      (- (+ l k) 1) h1)) (ind_iproduct
                                                         (tb2t8
                                                         (infix_at
                                                         (infix_mngt int int)
                                                         (infix_mngt 
                                                         int (matrix1 t1))
                                                         (t2tb22
                                                         frows_closure)
                                                         (t2tb20 f))) (+ l k)
                                                         h1))
                          (div (mod j (ind_iproduct
                                      (tb2t8
                                      (infix_at (infix_mngt int int)
                                      (infix_mngt int (matrix1 t1))
                                      (t2tb22 fcolumns_closure) (t2tb20 f)))
                                      (- (+ l k) 1) h1)) (ind_iproduct
                                                         (tb2t8
                                                         (infix_at
                                                         (infix_mngt int int)
                                                         (infix_mngt 
                                                         int (matrix1 t1))
                                                         (t2tb22
                                                         fcolumns_closure)
                                                         (t2tb20 f))) (+ l k)
                                                         h1))))))))))))

;; kproj_const_transl_gen
  (assert
  (forall ((c (matrix t)) (i Int) (j Int) (t2 Int) (l Int) (h1 Int))
  (=> (<= 1 l)
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (<= 0 t2)
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj
     (tb2t20
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc104)
     (t2tb17 c))) i j k l h1) (kproj
                              (tb2t20
                              (infix_at (infix_mngt int (matrix1 t1))
                              (matrix1 t1) (t2tb21 fc105) (t2tb17 c))) i j k
                              (+ l t2) (+ h1 t2)))))))))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc105)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc104)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; kproj_const_transl
  (assert
  (forall ((c (matrix t)) (i Int) (j Int) (k Int) (t2 Int) (l Int) (h1 Int))
  (=> (<= 1 l)
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (<= 0 t2)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj
     (tb2t20
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc102)
     (t2tb17 c))) i j k l h1) (kproj
                              (tb2t20
                              (infix_at (infix_mngt int (matrix1 t1))
                              (matrix1 t1) (t2tb21 fc103) (t2tb17 c))) i j k
                              (+ l t2) (+ h1 t2))))))))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc103)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc102)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; kproj_const_div_mod
  (assert
  (forall ((c (matrix t)) (i Int) (j Int) (k Int) (l Int) (h1 Int))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 0 j)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj
     (tb2t20
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc101)
     (t2tb17 c))) i j k l h1) (tb2t9
                              (get t1 (t2tb17 c)
                              (div (mod i (power (rows t1 (t2tb17 c))
                                          (+ (- (- h1 l) k) 1))) (power
                                                                 (rows 
                                                                 t1
                                                                 (t2tb17 c))
                                                                 (- (- h1 l) k)))
                              (div (mod j (power (columns t1 (t2tb17 c))
                                          (+ (- (- h1 l) k) 1))) (power
                                                                 (columns 
                                                                 t1
                                                                 (t2tb17 c))
                                                                 (- (- h1 l) k))))))))))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc101)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; kproj_div_mod
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (k Int) (l Int)
  (h1 Int))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 0 j)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj f i j k l h1) (tb2t9
                          (get t1
                          (infix_at (matrix1 t1) int (t2tb20 f)
                          (t2tb2 (- (+ l k) 1)))
                          (div (mod i (ind_iproduct
                                      (tb2t8
                                      (infix_at (infix_mngt int int)
                                      (infix_mngt int (matrix1 t1))
                                      (t2tb22 frows_closure) (t2tb20 f)))
                                      (- (+ l k) 1) h1)) (ind_iproduct
                                                         (tb2t8
                                                         (infix_at
                                                         (infix_mngt int int)
                                                         (infix_mngt 
                                                         int (matrix1 t1))
                                                         (t2tb22
                                                         frows_closure)
                                                         (t2tb20 f))) (+ l k)
                                                         h1))
                          (div (mod j (ind_iproduct
                                      (tb2t8
                                      (infix_at (infix_mngt int int)
                                      (infix_mngt int (matrix1 t1))
                                      (t2tb22 fcolumns_closure) (t2tb20 f)))
                                      (- (+ l k) 1) h1)) (ind_iproduct
                                                         (tb2t8
                                                         (infix_at
                                                         (infix_mngt int int)
                                                         (infix_mngt 
                                                         int (matrix1 t1))
                                                         (t2tb22
                                                         fcolumns_closure)
                                                         (t2tb20 f))) (+ l k)
                                                         h1)))))))))))

;; kproj_kth_right_spec
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (k Int) (l Int)
  (h1 Int))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 0 j)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj f i j k l h1) (tb2t9
                          (get t1
                          (infix_at (matrix1 t1) int (t2tb20 f)
                          (t2tb2 (- (+ l k) 1)))
                          (kth_right i (+ (- (- h1 l) k) 1) h1
                          (tb2t8
                          (infix_at (infix_mngt int int)
                          (infix_mngt int (matrix1 t1))
                          (t2tb22 frows_closure) (t2tb20 f))))
                          (kth_right j (+ (- (- h1 l) k) 1) h1
                          (tb2t8
                          (infix_at (infix_mngt int int)
                          (infix_mngt int (matrix1 t1))
                          (t2tb22 fcolumns_closure) (t2tb20 f)))))))))))))

;; kproj_kth_right_def
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (k Int) (l Int)
  (h1 Int))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (< l h1))
  (=> (<= 0 j)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj_kth_right f i j k l h1) Tuple0)))))))

;; kproj_const_prod
  (assert
  (forall ((c (matrix t)) (i Int) (j Int) (l Int) (h1 Int))
  (=> (<= 1 l)
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (<= 1 (- h1 l))
  (= (ind_product (fc99 c i j l h1) 1 (+ (- h1 l) 1)) (ind_product
                                                      (fc100 c i j l h1) 1
                                                      (+ (- h1 l) 1)))))))))

;; fc_def
  (assert
  (forall ((c (matrix t)) (i Int) (j Int) (l Int) (h1 Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc100 c i j l h1)) (t2tb2 k))) 
  (tb2t9
  (get t1 (t2tb17 c) (kth_nit_l i k (rows t1 (t2tb17 c)) (- h1 l))
  (kth_nit_l j k (columns t1 (t2tb17 c)) (- h1 l)))))))

;; fc_def
  (assert
  (forall ((c (matrix t)) (i Int) (j Int) (l Int) (h1 Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc99 c i j l h1)) (t2tb2 k))) (kproj
                                                                    (tb2t20
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    int
                                                                    (matrix1
                                                                    t1))
                                                                    (matrix1
                                                                    t1)
                                                                    (t2tb21
                                                                    fc98)
                                                                    (t2tb17
                                                                    c))) i j
                                                                    k l h1))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc98)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; kproj_const
  (assert
  (forall ((c (matrix t)) (i Int) (j Int) (k Int) (l Int) (h1 Int))
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj
     (tb2t20
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc97)
     (t2tb17 c))) i j k l h1) (tb2t9
                              (get t1 (t2tb17 c)
                              (kth_nit_l i k (rows t1 (t2tb17 c)) (- h1 l))
                              (kth_nit_l j k (columns t1 (t2tb17 c))
                              (- h1 l)))))))))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc97)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; kproj_def
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int) (k Int) (l Int)
  (h1 Int))
  (=> (<= 0 l)
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (< l h1)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (= (kproj f i j k l h1) (tb2t9
                          (get t1
                          (infix_at (matrix1 t1) int (t2tb20 f)
                          (t2tb2 (- (+ l k) 1)))
                          (kth_left i k l h1
                          (tb2t8
                          (infix_at (infix_mngt int int)
                          (infix_mngt int (matrix1 t1))
                          (t2tb22 frows_closure) (t2tb20 f))))
                          (kth_left j k l h1
                          (tb2t8
                          (infix_at (infix_mngt int int)
                          (infix_mngt int (matrix1 t1))
                          (t2tb22 fcolumns_closure) (t2tb20 f))))))))))))))

;; k_iter_left_extension
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (< i j)
  (= (k_iter f i j) (kronecker
                    (tb2t17 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 i)))
                    (k_iter f (+ i 1) j))))))

;; k_iter_right_extension
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (< i j)
  (= (k_iter f i j) (kronecker (k_iter f i (- j 1))
                    (tb2t17
                    (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 (- j 1)))))))))

;; k_iter_cardzero
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (<= j i) (= (k_iter f i j) kronecker_neutral))))

;; k_iter_cardone
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (=> (= j (+ i 1))
  (= (k_iter f i j) (tb2t17 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 i)))))))

;; k_iter_spec
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (and
  (= (rows t1 (t2tb17 (k_iter f i j))) (ind_iproduct
                                       (tb2t8
                                       (infix_at (infix_mngt int int)
                                       (infix_mngt int (matrix1 t1))
                                       (t2tb22 frows_closure) (t2tb20 f))) i
                                       j))
  (= (columns t1 (t2tb17 (k_iter f i j))) (ind_iproduct
                                          (tb2t8
                                          (infix_at (infix_mngt int int)
                                          (infix_mngt int (matrix1 t1))
                                          (t2tb22 fcolumns_closure)
                                          (t2tb20 f))) i j)))))

;; fcolumns_closure_def
  (assert
  (forall ((y (Array Int (matrix t))) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
     (t2tb22 fcolumns_closure) (t2tb20 y)) (t2tb2 y1))) (fcolumns y y1))))

;; frows_closure_def
  (assert
  (forall ((y (Array Int (matrix t))) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) (infix_mngt int (matrix1 t1))
     (t2tb22 frows_closure) (t2tb20 y)) (t2tb2 y1))) (frows y y1))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb22 (tb2t22 j)) j) :pattern ((t2tb22 (tb2t22 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array (Array Int (matrix t)) (Array Int Int))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array (Array Int (matrix t)) (Array Int Int)))) (sort
  (infix_mngt (infix_mngt int (matrix1 t1)) (infix_mngt int int))
  (t2tb22 x))))

;; k_iter_def
  (assert
  (forall ((f (Array Int (matrix t))) (i Int) (j Int))
  (= (k_iter f i j) (tb2t17
                    (int_iterate (matrix1 t1) (t2tb18 kronecker_closure)
                    (t2tb20 f) i j)))))

;; const_frows
  (assert
  (forall ((m (matrix t)) (k Int))
  (= (frows
     (tb2t20
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc96)
     (t2tb17 m))) k) (rows t1 (t2tb17 m)))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc96)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; const_fcol
  (assert
  (forall ((m (matrix t)) (k Int))
  (= (fcolumns
     (tb2t20
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc95)
     (t2tb17 m))) k) (columns t1 (t2tb17 m)))))

;; fc_def
  (assert
  (forall ((y0 (matrix t)) (y1 Int))
  (= (tb2t17
     (infix_at (matrix1 t1) int
     (infix_at (infix_mngt int (matrix1 t1)) (matrix1 t1) (t2tb21 fc95)
     (t2tb17 y0)) (t2tb2 y1))) y0)))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt (matrix1 t1) (infix_mngt int (matrix1 t1))) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array (matrix t) (Array Int (matrix t)))))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array (matrix t) (Array Int (matrix t))))) (sort
  (infix_mngt (matrix1 t1) (infix_mngt int (matrix1 t1))) (t2tb21 x))))

;; fcolumns_spec
  (assert (forall ((f (Array Int (matrix t))) (k Int)) (< 0 (fcolumns f k))))

;; fcolumns_def
  (assert
  (forall ((f (Array Int (matrix t))) (k Int))
  (= (fcolumns f k) (columns t1
                    (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))))))

;; frows_spec
  (assert (forall ((f (Array Int (matrix t))) (k Int)) (< 0 (frows f k))))

;; frows_def
  (assert
  (forall ((f (Array Int (matrix t))) (k Int))
  (= (frows f k) (rows t1 (infix_at (matrix1 t1) int (t2tb20 f) (t2tb2 k))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int (matrix1 t1)) j) (= (t2tb20 (tb2t20 j)) j)) :pattern (
  (t2tb20 (tb2t20 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int (matrix t))))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int (matrix t)))) (sort (infix_mngt int (matrix1 t1))
  (t2tb20 x))))

;; kronecker_equal
  (assert
  (forall ((m (matrix t)) (ml (matrix t)) (n (matrix t)) (nl (matrix t)))
  (=> (equal t1 (t2tb17 m) (t2tb17 ml))
  (=> (equal t1 (t2tb17 n) (t2tb17 nl)) (equal t1 (t2tb17 (kronecker m n))
  (t2tb17 (kronecker ml nl)))))))

;; neutral_
  (assert
  (forall ((m (matrix t)))
  (and (= (kronecker m kronecker_neutral) m)
  (= (kronecker kronecker_neutral m) m))))

;; kronecker_closure_def
  (assert
  (forall ((y (matrix t)) (y1 (matrix t)))
  (= (tb2t17
     (infix_at (matrix1 t1) (matrix1 t1)
     (infix_at (infix_mngt (matrix1 t1) (matrix1 t1)) (matrix1 t1)
     (t2tb18 kronecker_closure) (t2tb17 y)) (t2tb17 y1))) (kronecker y y1))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt (matrix1 t1) (matrix1 t1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array (matrix t) (matrix t))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array (matrix t) (matrix t)))) (sort
  (infix_mngt (matrix1 t1) (matrix1 t1)) (t2tb19 x))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (infix_mngt (matrix1 t1) (infix_mngt (matrix1 t1) (matrix1 t1))) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array (matrix t) (Array (matrix t) (matrix t)))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array (matrix t) (Array (matrix t) (matrix t))))) (sort
  (infix_mngt (matrix1 t1) (infix_mngt (matrix1 t1) (matrix1 t1)))
  (t2tb18 x))))

;; kronecker_assoc_pre
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (o (matrix t)) (i Int) (j Int))
  (=>
  (and (<= 0 i)
  (< i (* (* (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n))) (rows t1 (t2tb17 o)))))
  (=>
  (and (<= 0 j)
  (< j (* (* (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n))) (columns 
                                                              t1 (t2tb17 o)))))
  (= (tb2t9 (get t1 (t2tb17 (kronecker (kronecker m n) o)) i j)) (tb2t9
                                                                 (get 
                                                                 t1
                                                                 (t2tb17
                                                                 (kronecker m
                                                                 (kronecker n
                                                                 o))) i j)))))))

;; kronecker_indexes_com
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (kronecker m n)) i j)
  (and (valid_index t1 (t2tb17 m) (div i (rows t1 (t2tb17 n)))
  (div j (columns t1 (t2tb17 n)))) (valid_index t1 (t2tb17 n)
  (mod i (rows t1 (t2tb17 n))) (mod j (columns t1 (t2tb17 n))))))))

;; kronecker_indexes
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int) (k Int) (l Int))
  (=> (valid_index t1 (t2tb17 m) i j)
  (=> (valid_index t1 (t2tb17 n) k l) (valid_index t1
  (t2tb17 (kronecker m n)) (+ (* i (rows t1 (t2tb17 n))) k)
  (+ (* j (columns t1 (t2tb17 n))) l))))))

;; kronecker_mod_values
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (kronecker m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (kronecker m n)) i j)) (infix_asdt
                                                   (tb2t9
                                                   (get t1 (t2tb17 m)
                                                   (div (mod i (rows 
                                                               t1
                                                               (t2tb17
                                                               (kronecker m
                                                               n)))) 
                                                   (rows t1 (t2tb17 n)))
                                                   (div (mod j (columns 
                                                               t1
                                                               (t2tb17
                                                               (kronecker m
                                                               n)))) 
                                                   (columns t1 (t2tb17 n)))))
                                                   (tb2t9
                                                   (get t1 (t2tb17 n)
                                                   (mod (mod i (rows 
                                                               t1
                                                               (t2tb17
                                                               (kronecker m
                                                               n)))) 
                                                   (rows t1 (t2tb17 n)))
                                                   (mod (mod j (columns 
                                                               t1
                                                               (t2tb17
                                                               (kronecker m
                                                               n)))) 
                                                   (columns t1 (t2tb17 n))))))))))

;; kronecker_values_gen
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (kronecker m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (kronecker m n)) i j)) (infix_asdt
                                                   (tb2t9
                                                   (get t1 (t2tb17 m)
                                                   (div i (rows t1
                                                          (t2tb17 n)))
                                                   (div j (columns t1
                                                          (t2tb17 n)))))
                                                   (tb2t9
                                                   (get t1 (t2tb17 n)
                                                   (mod i (rows t1
                                                          (t2tb17 n)))
                                                   (mod j (columns t1
                                                          (t2tb17 n)))))))))))

;; kronecker_values
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (kronecker m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (kronecker m n)) i j)) (infix_asdt
                                                   (tb2t9
                                                   (get t1 (t2tb17 m)
                                                   (div i (rows t1
                                                          (t2tb17 n)))
                                                   (div j (columns t1
                                                          (t2tb17 n)))))
                                                   (tb2t9
                                                   (get t1 (t2tb17 n)
                                                   (mod i (rows t1
                                                          (t2tb17 n)))
                                                   (mod j (columns t1
                                                          (t2tb17 n))))))))))

;; get_kronecker
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (= (kronecker m n) (tb2t17
                     (make_f t1 (* (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
                     (* (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
                     (t2tb13 (fc94 m n)))))))

;; fc_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (fc94 m n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (tb2t9
                 (get t1 (t2tb17 m) (div i (rows t1 (t2tb17 n)))
                 (div j (columns t1 (t2tb17 n)))))
                 (tb2t9
                 (get t1 (t2tb17 n) (mod i (rows t1 (t2tb17 n)))
                 (mod j (columns t1 (t2tb17 n)))))))))

;; kronecker_eq
  (assert
  (forall ((m1 (matrix t)) (n1 (matrix t)) (m2 (matrix t)) (n2 (matrix t)))
  (=> (= m1 m2) (=> (= n1 n2) (= (kronecker m1 n1) (kronecker m2 n2))))))

;; kronecker_spec
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (and
  (= (rows t1 (t2tb17 (kronecker m n))) (* (rows t1 (t2tb17 m)) (rows 
                                                                t1
                                                                (t2tb17 n))))
  (and
  (= (columns t1 (t2tb17 (kronecker m n))) (* (columns t1 (t2tb17 m)) 
  (columns t1 (t2tb17 n))))
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 (kronecker m n)) i j)
  (= (tb2t9 (get t1 (t2tb17 (kronecker m n)) i j)) (infix_asdt
                                                   (tb2t9
                                                   (get t1 (t2tb17 m)
                                                   (div i (rows t1
                                                          (t2tb17 n)))
                                                   (div j (columns t1
                                                          (t2tb17 n)))))
                                                   (tb2t9
                                                   (get t1 (t2tb17 n)
                                                   (mod i (rows t1
                                                          (t2tb17 n)))
                                                   (mod j (columns t1
                                                          (t2tb17 n)))))))))))))

;; kronecker_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)))
  (= (kronecker m n) (tb2t17
                     (make_f t1 (* (rows t1 (t2tb17 m)) (rows t1 (t2tb17 n)))
                     (* (columns t1 (t2tb17 m)) (columns t1 (t2tb17 n)))
                     (t2tb13 (result8 m n)))))))

;; result_def
  (assert
  (forall ((m (matrix t)) (n (matrix t)) (i Int) (j Int))
  (= (tb2t9
     (infix_at t1 int
     (infix_at (infix_mngt int t1) int (t2tb13 (result8 m n)) (t2tb2 i))
     (t2tb2 j))) (infix_asdt
                 (tb2t9
                 (get t1 (t2tb17 m) (div i (rows t1 (t2tb17 n)))
                 (div j (columns t1 (t2tb17 n)))))
                 (tb2t9
                 (get t1 (t2tb17 n) (mod i (rows t1 (t2tb17 n)))
                 (mod j (columns t1 (t2tb17 n)))))))))

;; get_null_mat
  (assert
  (forall ((a (matrix t)))
  (=> (null_mat a)
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 a) i j)
  (= (tb2t9 (get t1 (t2tb17 a) i j)) tzero))))))

;; set_null_mat
  (assert
  (forall ((a (matrix t)))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 a) i j)
  (= (tb2t9 (get t1 (t2tb17 a) i j)) tzero))) (null_mat a))))

;; null_mat_def
  (assert
  (forall ((a (matrix t)))
  (= (null_mat a)
  (forall ((i Int) (j Int))
  (=> (valid_index t1 (t2tb17 a) i j)
  (= (tb2t9 (get t1 (t2tb17 a) i j)) tzero))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (matrix1 t1) j) (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17
                                                                    (tb2t17
                                                                    j))) )))

;; BridgeL
  (assert
  (forall ((i (matrix t)))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; t2tb_sort
  (assert (forall ((x (matrix t))) (sort (matrix1 t1) (t2tb17 x))))

;; equal_functions_mat
  (assert
  (forall ((a ty))
  (forall ((f uni) (m uni))
  (=> (sort (matrix1 a) m)
  (=>
  (forall ((i Int) (j Int))
  (=>
  (and (and (<= 0 i) (< i (rows a m))) (and (<= 0 j) (< j (columns a m))))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb2 i)) (t2tb2 j)) 
  (get a m i j)))) (= m (make_f a (rows a m) (columns a m) f)))))))

;; equal_functions
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni) (g uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb2 i)) (t2tb2 j)) 
  (infix_at a int (infix_at (infix_mngt int a) int g (t2tb2 i)) (t2tb2 j)))))
  (= (make_f a r c f) (make_f a r c g))))))))

;; get_equal_mat
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (equal a m n)
  (and (= (rows a m) (rows a n))
  (and (= (columns a m) (columns a n))
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j))))))))))

;; set_equal_mat_make_t
  (assert
  (forall ((a ty))
  (forall ((r Int) (rqt Int) (c Int) (cqt Int) (f uni) (g uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (=> (= r rqt)
  (=> (= c cqt)
  (=>
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb2 i)) (t2tb2 j)) 
  (infix_at a int (infix_at (infix_mngt int a) int g (t2tb2 i)) (t2tb2 j))))))
  (= (make_f a r c f) (make_f a rqt cqt g))))))))))

;; set_equal_mat_make
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni) (g uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (=>
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (infix_at a int (infix_at (infix_mngt int a) int f (t2tb2 i)) (t2tb2 j)) 
  (infix_at a int (infix_at (infix_mngt int a) int g (t2tb2 i)) (t2tb2 j))))))
  (= (make_f a r c f) (make_f a r c g))))))))

;; set_equal_mat
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (sort (matrix1 a) m)
  (=> (sort (matrix1 a) n)
  (=> (= (rows a m) (rows a n))
  (=> (= (columns a m) (columns a n))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j)))) (= m n)))))))))

;; equal_mat_funct
  (assert
  (forall ((a ty))
  (forall ((f uni) (g uni))
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (< i j))
  (= (equal_funct a f g)
  (forall ((k Int))
  (=> (and (<= i k) (< k j)) (equal a (infix_at (matrix1 a) int f (t2tb2 k))
  (infix_at (matrix1 a) int g (t2tb2 k)))))))))))

;; equal_trans
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni) (o uni))
  (=> (equal a m n) (=> (equal a n o) (equal a m o))))))

;; equal_rex
  (assert (forall ((a ty)) (forall ((m uni)) (equal a m m))))

;; equal_sym
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni)) (= (equal a m n) (equal a n m)))))

;; square_mat
  (assert
  (forall ((a ty))
  (forall ((m uni)) (= (square a m) (= (rows a m) (columns a m))))))

;; mat_equality
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (= (rows a m) (rows a n))
  (=> (= (columns a m) (columns a n))
  (=>
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j)))) (equal a m n)))))))

;; equality
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (=> (sort (matrix1 a) m)
  (=> (sort (matrix1 a) n) (= (equal a m n) (= m n)))))))

;; equal_mat
  (assert
  (forall ((a ty))
  (forall ((m uni) (n uni))
  (= (equal a m n)
  (and (and (= (rows a m) (rows a n)) (= (columns a m) (columns a n)))
  (forall ((i Int) (j Int))
  (=> (valid_index a m i j) (= (get a m i j) (get a n i j)))))))))

;; subset_closure_naries
  (assert
  (forall ((i Int) (j Int) (k Int) (m Int) (n Int) (t2 (Array Int Int)))
  (=> (and (<= i k) (and (< k m) (< m j)))
  (=> (< 0 n) (=> (is_nary t2 i j n) (is_nary t2 k m n))))))

;; is_nary_kth_nit_r
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i) (=> (< 0 n) (is_nary (fc93 i n) 1 (+ k 1) n)))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (j Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc93 i n)) (t2tb2 j))) (kth_nit_r i j
                                                             n))))

;; is_nary_def
  (assert
  (forall ((t2 (Array Int Int)) (i Int) (j Int) (n Int))
  (= (is_nary t2 i j n)
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (and (<= 0 (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))))
  (< (tb2t2 (infix_at int int (t2tb8 t2) (t2tb2 k))) n)))))))

;; nary_decomposition_l
  (assert
  (forall ((i Int) (n Int) (h1 Int))
  (=> (<= 0 i)
  (=> (< 1 n)
  (=> (<= (nary_length i n) h1)
  (and (= i (ind_isum (fc91 i n h1) 1 (+ h1 1)))
  (= i (ind_isum (fc92 i n h1) 1 (+ h1 1)))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (h1 Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc92 i n h1)) (t2tb2 l))) (* (kth_nit_l
                                                                   i l n h1) 
  (power n (- h1 l))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (h1 Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc91 i n h1)) (t2tb2 l))) (weighted_kth_nit_l
                                                                i l n h1))))

;; nary_decomposition
  (assert
  (forall ((i Int) (n Int) (h1 Int))
  (=> (<= 0 i)
  (=> (< 1 n)
  (=> (<= (nary_length i n) h1)
  (and (= i (ind_isum (fc89 i n) 1 (+ h1 1)))
  (= i (ind_isum (fc90 i n) 1 (+ h1 1)))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc90 i n)) (t2tb2 l))) (weighted_kth_nit_r
                                                             i l n))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc89 i n)) (t2tb2 l))) (* (kth_nit_r i
                                                                l n) 
  (power n (- l 1))))))

;; nary_decomposition_pre
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (< 0 n)
  (=> (<= 1 k)
  (and (= (mod i (power n k)) (ind_isum (fc87 i n) 1 (+ k 1)))
  (= (mod i (power n k)) (ind_isum (fc88 i n) 1 (+ k 1)))))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc88 i n)) (t2tb2 l))) (* (kth_nit_r i
                                                                l n) 
  (power n (- l 1))))))

;; fc_def
  (assert
  (forall ((i Int) (n Int) (l Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc87 i n)) (t2tb2 l))) (ite (<= 1 l)
                                                             (* (kth_nit_r i
                                                                l n) 
                                                             (power n
                                                             (- l 1))) 0))))

;; mod_nary_comm
  (assert
  (forall ((i Int) (l Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (< 1 n)
  (=> (and (<= 1 k) (<= k l))
  (= (kth_nit_r i k n) (kth_nit_r (mod i (power n l)) k n))))))))

;; mod_nary
  (assert
  (forall ((i Int) (l Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (< 1 n)
  (=> (and (<= 1 k) (<= k l))
  (= (kth_nit_r (mod i (power n l)) k n) (kth_nit_r i k n)))))))

;; no_rest_length
  (assert
  (forall ((i Int) (l Int) (n Int))
  (=> (< 0 i)
  (=> (< 1 n)
  (=> (<= 0 l) (=> (= i (power n l)) (= (nary_length i n) (+ l 1))))))))

;; weighted_kth_left_def
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= l h1)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (weighted_kth_left1 i k l h1 f) (weighted_kth_right i
                                     (+ (- (- h1 l) k) 1) h1 f))))))))

;; weighted_kth_nit_l_spec
  (assert
  (forall ((i Int) (k Int) (n Int) (h1 Int))
  (=> (<= 0 i)
  (=> (and (< 0 k) (<= k h1))
  (=> (< 0 n)
  (=> (<= (nary_length i n) h1)
  (and
  (= (weighted_kth_nit_l i k n h1) (weighted_kth_nit_r i (+ (- h1 k) 1) n))
  (and
  (=> (< 1 k)
  (= (weighted_kth_nit_l i k n h1) (weighted_kth_right i (+ (- h1 k) 1) h1
                                   (tb2t8
                                   (infix_at (infix_mngt int int) int
                                   (t2tb15 fc86) (t2tb2 n))))))
  (=> (< (power n (- n k)) i)
  (and (<= 0 (weighted_kth_nit_l i k n h1))
  (<= (weighted_kth_nit_l i k n h1) i)))))))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc86) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; weighted_kth_nit_l_def
  (assert
  (forall ((i Int) (k Int) (n Int) (h1 Int))
  (=> (<= 0 i)
  (=> (and (< 0 k) (<= k h1))
  (=> (< 0 n)
  (=> (<= (nary_length i n) h1)
  (= (weighted_kth_nit_l i k n h1) (* (kth_nit_l i k n h1) (power n (- h1 k))))))))))

;; nary_length_spec
  (assert
  (forall ((i Int) (n Int))
  (=> (< 1 n)
  (=> (<= 0 i)
  (and
  (=> (< 0 i)
  (and (<= (power n (- (nary_length i n) 1)) i)
  (< i (power n (nary_length i n)))))
  (and (=> (< i n) (= (nary_length i n) 1))
  (and (<= 1 (nary_length i n)) (= i (mod i (power n (nary_length i n)))))))))))

;; decreasing_div_n
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (< 0 k) (=> (< 1 n) (=> (< (power n k) i) (<= (div i (power n k)) i)))))))

;; decreasing_div_gen
  (assert
  (forall ((i Int) (k Int) (kqt Int) (n Int))
  (=> (<= 0 i)
  (=> (< 1 n)
  (=> (and (<= 0 k) (< k kqt))
  (=> (< (power n kqt) i) (< (div i (power n kqt)) (div i (power n k)))))))))

;; decreasing_div
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (<= 0 k)
  (=> (< 1 n)
  (=> (< (power n (+ k 1)) i)
  (and
  (= (div i (power n k)) (+ (* (div i (power n (+ k 1))) n) (kth_nit_r i
                                                            (+ k 1) n)))
  (< (div i (power n (+ k 1))) (div i (power n k))))))))))

;; weighted_kth_nit_r_spec
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (< 0 n)
  (=> (< 0 k)
  (and
  (=> (< (power n (- k 1)) i)
  (and (<= 0 (weighted_kth_nit_r i k n)) (<= (weighted_kth_nit_r i k n) i)))
  (forall ((h1 Int))
  (=> (< k h1)
  (= (weighted_kth_nit_r i k n) (weighted_kth_right i k h1
                                (tb2t8
                                (infix_at (infix_mngt int int) int
                                (t2tb15 fc85) (t2tb2 n)))))))))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc85) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; weighted_kth_nit_r_def
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (< 0 n)
  (=> (< 0 k)
  (= (weighted_kth_nit_r i k n) (* (kth_nit_r i k n) (power n (- k 1)))))))))

;; kth_nit_div_mod
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=> (< 0 n)
  (= (kth_nit_r i k n) (div (mod i (power n k)) (power n (- k 1)))))))))

;; kth_nit_l_val
  (assert
  (forall ((i Int) (k Int) (n Int) (h1 Int) (l Int))
  (=> (<= 0 i)
  (=> (< 0 n)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k h1))
  (= (kth_nit_l i k n h1) (kth_left i k l (+ h1 l)
                          (tb2t8
                          (infix_at (infix_mngt int int) int (t2tb15 fc84)
                          (t2tb2 n)))))))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc84) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; kth_nit_l_spec
  (assert
  (forall ((i Int) (k Int) (n Int) (h1 Int))
  (=> (<= 0 i)
  (=> (< 0 n)
  (=> (and (<= 1 k) (<= k h1))
  (and (= (kth_nit_l i k n h1) (kth_nit_r i (+ (- h1 k) 1) n))
  (= (kth_nit_l i k n h1) (kth_right i (+ (- h1 k) 1) (- h1 k)
                          (tb2t8
                          (infix_at (infix_mngt int int) int (t2tb15 fc83)
                          (t2tb2 n)))))))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc83) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; kth_nit_l_def
  (assert
  (forall ((i Int) (k Int) (n Int) (h1 Int))
  (=> (<= 0 i)
  (=> (< 0 n)
  (=> (and (<= 1 k) (<= k h1))
  (= (kth_nit_l i k n h1) (mod (div i (power n (- h1 k))) n)))))))

;; kth_nit_r_spec
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=> (< 0 n)
  (and (= (kth_nit_r i k n) (mod (div i (power n (- k 1))) n))
  (forall ((h1 Int))
  (=> (< k h1)
  (= (kth_nit_r i k n) (kth_right i k h1
                       (tb2t8
                       (infix_at (infix_mngt int int) int (t2tb15 fc82)
                       (t2tb2 n)))))))))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc82) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; kth_nit_r_def
  (assert
  (forall ((i Int) (k Int) (n Int))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=> (< 0 n)
  (= (kth_nit_r i k n) (kth_right i k (- k 1)
                       (tb2t8
                       (infix_at (infix_mngt int int) int (t2tb15 fc81)
                       (t2tb2 n))))))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc81) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; kth_left_decomposition
  (assert
  (forall ((i Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (and (<= 0 i) (< i (ind_iproduct f l h1)))
  (=> (< l h1)
  (=> (forall ((k Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k)))))
  (= i (ind_isum (fc80 i l h1 f) 1 (+ (- h1 l) 1))))))))

;; fc_def
  (assert
  (forall ((i Int) (l Int) (h1 Int) (f (Array Int Int)) (a Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc80 i l h1 f)) (t2tb2 a))) (weighted_kth_left
                                                                  i a l h1 f))))

;; bounded_kth_left_decomposition
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= l h1)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (mod i (ind_iproduct f (- (+ l k) 1) h1)) (ind_isum (fc79 i l h1 f) k
                                               (+ (- h1 l) 1)))))))))

;; fc_def
  (assert
  (forall ((i Int) (l Int) (h1 Int) (f (Array Int Int)) (a Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc79 i l h1 f)) (t2tb2 a))) (weighted_kth_left
                                                                  i a l h1 f))))

;; weighted_kth_left_
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= l h1)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (mod i (ind_iproduct f (- (+ l k) 1) h1)) (+ (weighted_kth_left i k l h1
                                                  f) (mod i (ind_iproduct f
                                                            (+ l k) h1))))))))))

;; weighted_kth_left_def
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= l h1)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (weighted_kth_left i k l h1 f) (weighted_kth_right i
                                    (+ (- (- h1 l) k) 1) h1 f))))))))

;; kth_left_div_mod
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (and (<= 0 l) (<= l h1))
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (kth_left i k l h1 f) (div (mod i (ind_iproduct f (- (+ l k) 1) h1)) 
  (ind_iproduct f (+ l k) h1)))))))))

;; kth_right_decomposition
  (assert
  (forall ((i Int) (k Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (mod i (ind_iproduct f (- h1 k) h1)) (ind_isum (fc78 i h1 f) 1 (+ k 1))))))))

;; fc_def
  (assert
  (forall ((i Int) (h1 Int) (f (Array Int Int)) (a Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc78 i h1 f)) (t2tb2 a))) (weighted_kth_right
                                                                i a h1 f))))

;; weighted_kth_right_
  (assert
  (forall ((i Int) (k Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 1 k)
  (=> (<= 0 i)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (mod i (ind_iproduct f (- h1 k) h1)) (+ (weighted_kth_right i k h1 f) (mod i 
  (ind_iproduct f (+ (- h1 k) 1) h1)))))))))

;; weighted_kth_right_def
  (assert
  (forall ((i Int) (k Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (=> (<= 1 k)
  (= (weighted_kth_right i k h1 f) (* (kth_right i k h1 f) (ind_iproduct f
                                                           (+ (- h1 k) 1) h1))))))))

;; kth_head
  (assert
  (forall ((i Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 h1)
  (=> (forall ((k Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k)))))
  (= (kth_right i 1 h1 f) (mod i (tb2t2
                                 (infix_at int int (t2tb8 f)
                                 (t2tb2 (- h1 1)))))))))))

;; kth_right_div_mod
  (assert
  (forall ((i Int) (k Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((k1 Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k1)))))
  (= (kth_right i k h1 f) (div (mod i (ind_iproduct f (- h1 k) h1)) (ind_iproduct
                                                                    f
                                                                    (+ (- h1 k) 1)
                                                                    h1))))))))

;; divp_spec
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i)
  (=> (< 0 j)
  (and (= i (+ (divp i j) (mod i j)))
  (and (and (<= (divp i j) i) (< i (* (+ (divp i j) 1) j)))
  (=> (< j i) (< 0 (divp i j)))))))))

;; divp_def
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (= (divp i j) (* (div i j) j))))))

;; div_isum_exponents
  (assert
  (forall ((i Int) (k Int) (n Int) (m Int))
  (=> (<= 0 i)
  (=> (< 0 k)
  (=> (<= 0 n)
  (=> (<= 0 m)
  (and (= (power k (+ n m)) (* (power k n) (power k m)))
  (and (= (power k (+ n 1)) (* (power k n) k))
  (and (= (power k 1) k)
  (and (= (div (div i (power k n)) (power k m)) (div i (power k (+ n m))))
  (= (div (div i (power k n)) k) (div i (power k (+ n 1))))))))))))))

;; kth_left_trans
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (< k (- h1 l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (<= ind h1))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 ind))))))
  (= (kth_left i k l h1 f) (kth_left
                           (div i (tb2t2
                                  (infix_at int int (t2tb8 f)
                                  (t2tb2 (- h1 1)))))
                           k l (- h1 1) f))))))))

;; kth_left_to_mod_div
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (<= ind h1))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 ind))))))
  (= (kth_left i k l h1 f) (mod (div i (ind_iproduct f (+ l k) h1)) (tb2t2
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb8 f)
                                                                    (t2tb2
                                                                    (- (+ l k) 1))))))))))))

;; kth_left_eq
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int))
  (g (Array Int Int)))
  (=> (<= 0 i)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=> (<= 0 l)
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (< ind h1))
  (and
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 ind))) (tb2t2
                                                      (infix_at int int
                                                      (t2tb8 g) (t2tb2 ind))))
  (< 0 (tb2t2 (infix_at int int (t2tb8 g) (t2tb2 ind)))))))
  (= (kth_left i k l h1 f) (kth_left i k l h1 g))))))))

;; kth_left_spec
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (< ind h1))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 ind))))))
  (and
  (= (kth_left i k l h1 f) (mod (div i (ind_iproduct f (+ l k) h1)) (tb2t2
                                                                    (infix_at
                                                                    int 
                                                                    int
                                                                    (t2tb8 f)
                                                                    (t2tb2
                                                                    (- (+ l k) 1))))))
  (and (<= 0 (kth_left i k l h1 f))
  (< (kth_left i k l h1 f) (tb2t2
                           (infix_at int int (t2tb8 f) (t2tb2 (- (+ l k) 1)))))))))))))

;; kth_left_def
  (assert
  (forall ((i Int) (k Int) (l Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 0 l)
  (=> (and (<= 1 k) (<= k (- h1 l)))
  (=>
  (forall ((ind Int))
  (=> (and (<= l ind) (< ind h1))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 ind))))))
  (= (kth_left i k l h1 f) (kth_right i (+ (- (- h1 l) k) 1) h1 f))))))))

;; kth_right_trans
  (assert
  (forall ((i Int) (k Int) (h1 Int) (t2 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=> (forall ((l Int)) (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 l)))))
  (=> (<= 0 h1)
  (=> (<= 0 t2)
  (= (kth_right (div i (ind_iproduct f h1 (+ h1 t2))) k h1 f) (kth_right i
                                                              (+ k t2)
                                                              (+ h1 t2) f)))))))))

;; kth_right_eq
  (assert
  (forall ((i Int) (k Int) (h1 Int) (f (Array Int Int)) (g (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((l Int))
  (=> (and (<= (- h1 k) l) (<= l h1))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 l))))))
  (=>
  (forall ((l Int))
  (=> (and (<= (- h1 k) l) (<= l h1))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 l))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 l))))))
  (= (kth_right i k h1 f) (kth_right i k h1 g))))))))

;; kth_right_spec
  (assert
  (forall ((i Int) (k Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((l Int))
  (=> (and (<= (- h1 k) l) (< l h1))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 l))))))
  (and (<= 0 (kth_right i k h1 f))
  (< (kth_right i k h1 f) (tb2t2
                          (infix_at int int (t2tb8 f) (t2tb2 (- h1 k)))))))))))

;; kth_right_def
  (assert
  (forall ((i Int) (k Int) (h1 Int) (f (Array Int Int)))
  (=> (<= 0 i)
  (=> (<= 1 k)
  (=>
  (forall ((l Int))
  (=> (and (<= (- h1 k) l) (< l h1))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 l))))))
  (= (kth_right i k h1 f) (mod (div i (ind_iproduct f (+ (- h1 k) 1) h1)) 
  (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 (- h1 k)))))))))))

;; bounded_sum_exp
  (assert
  (forall ((i Int) (j Int) (m Int) (n Int))
  (=> (<= 0 m)
  (=> (<= 0 n)
  (=> (and (<= 0 i) (< i (power 2 m)))
  (=> (and (<= 0 j) (< j (power 2 n)))
  (< (+ (* i (power 2 n)) j) (power 2 (+ m n)))))))))

;; unicity_exp
  (assert
  (forall ((k Int) (m Int) (n Int))
  (=> (< 1 k)
  (=> (<= 0 m) (=> (<= 0 n) (= (= (power k m) (power k n)) (= m n)))))))

;; strict_growing_exp
  (assert
  (forall ((k Int) (m Int) (n Int))
  (=> (< 1 k) (=> (and (<= 0 m) (< m n)) (< (power k m) (power k n))))))

;; growing_exp
  (assert
  (forall ((k Int) (m Int) (n Int))
  (=> (<= 1 k) (=> (and (<= 0 m) (<= m n)) (<= (power k m) (power k n))))))

;; strict_positive_int_exp
  (assert
  (forall ((k Int) (n Int))
  (=> (< 1 k)
  (=> (< 0 n)
  (and (< 1 (power k n))
  (and (< (power k (- n 1)) (power k n)) (< (power k n) (power k (+ n 1)))))))))

;; positive_int_exp
  (assert
  (forall ((k Int) (n Int))
  (=> (<= 1 k)
  (=> (<= 0 n)
  (and (<= 1 (power k n))
  (and (< 0 (power k n)) (<= (power k n) (power k (+ n 1)))))))))

;; init_exp
  (assert
  (forall ((k Int))
  (and (= (power k 0) 1) (and (= (power k 1) k) (= (power k 2) (* k k))))))

;; strict_growing_mult
  (assert (forall ((n Int) (m Int)) (=> (< 1 n) (=> (< 1 m) (< n (* n m))))))

;; growing_mult
  (assert
  (forall ((n Int) (m Int)) (=> (<= 0 n) (=> (<= 1 m) (<= n (* n m))))))

;; power_decomp_one_
  (assert
  (forall ((i Int))
  (=> (<= 1 i)
  (< (ind_isum
     (tb2t8
     (infix_at (infix_mngt int int) int (t2tb15 power_closure) (t2tb2 2))) 1
     i) (power 2 i)))))

;; power_decomp_one
  (assert
  (forall ((i Int)) (=> (<= 1 i) (< (ind_isum fc77 1 i) (power 2 (+ i 1))))))

;; fc_def
  (assert
  (forall ((k Int))
  (= (tb2t2 (infix_at int int (t2tb8 fc77) (t2tb2 k))) (power 2 (+ k 1)))))

;; power_decomp_
  (assert
  (forall ((i Int))
  (=> (<= 1 i)
  (< (ind_isum
     (tb2t8
     (infix_at (infix_mngt int int) int (t2tb15 power_closure) (t2tb2 2))) 0
     i) (power 2 i)))))

;; power_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 power_closure) (t2tb2 y))
     (t2tb2 y1))) (power y y1))))

;; power_decomp_minus_one
  (assert
  (forall ((i Int))
  (=> (<= 1 i) (< (ind_isum (fc76 i) 1 i) (power 2 (- i 1))))))

;; fc_def
  (assert
  (forall ((i Int) (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc76 i)) (t2tb2 k))) (ite (and (<= 1 k)
                                                                (< k (+ i 1)))
                                                           (power 2 (- k 1))
                                                           0))))

;; power_decomp
  (assert
  (forall ((i Int)) (=> (<= 1 i) (< (ind_isum fc75 0 i) (power 2 (+ i 1))))))

;; fc_def
  (assert
  (forall ((k Int))
  (= (tb2t2 (infix_at int int (t2tb8 fc75) (t2tb2 k))) (power 2 (+ k 1)))))

;; power_sum
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n)
  (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))

;; ind_iproduct_to_power_gen
  (assert
  (forall ((e Int))
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (<= i j))
  (= (ind_iproduct
     (tb2t8 (infix_at (infix_mngt int int) int (t2tb15 fc74) (t2tb2 e))) i j) 
  (power e (- j i)))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc74) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; ind_iproduct_to_power
  (assert
  (forall ((e Int) (i Int) (j Int))
  (=> (and (<= 0 i) (<= i j))
  (= (ind_iproduct
     (tb2t8 (infix_at (infix_mngt int int) int (t2tb15 fc73) (t2tb2 e))) i j) 
  (power e (- j i))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc73) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; power_transl
  (assert
  (forall ((e Int) (k Int) (i Int))
  (=> (<= 0 i)
  (= (power e i) (ind_iproduct
                 (tb2t8
                 (infix_at (infix_mngt int int) int (t2tb15 fc72) (t2tb2 e)))
                 k (+ k i))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc72) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; power_to_ind_iproduct
  (assert
  (forall ((e Int) (i Int))
  (=> (<= 0 i)
  (= (power e i) (ind_iproduct
                 (tb2t8
                 (infix_at (infix_mngt int int) int (t2tb15 fc71) (t2tb2 e)))
                 0 i)))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc71) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; power_plus_one
  (assert
  (forall ((e Int) (i Int))
  (=> (<= 0 i) (= (power e (+ i 1)) (* e (power e i))))))

;; Power_mult
  (assert
  (forall ((x Int) (y Int) (i Int))
  (=> (<= 0 x) (=> (<= 0 y) (= (power i (* x y)) (power (power i x) y))))))

;; Power_sum
  (assert
  (forall ((x Int) (y Int) (i Int))
  (=> (<= 0 x)
  (=> (<= 0 y) (= (power i (+ x y)) (* (power i x) (power i y)))))))

;; Power_one
  (assert (forall ((i Int)) (= (power i 1) i)))

;; Power_zero
  (assert (forall ((i Int)) (= (power i 0) 1)))

;; ind_isum_trans
  (assert
  (forall ((f (Array Int Int)) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (ind_isum f i j) (+ (ind_isum f i k) (ind_isum f k j))))))

;; ind_isum_scal_gen
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (forall ((a Int))
  (=> (and (<= i a) (< a j))
  (= (ind_isum (fc70 f a) i j) (* a (ind_isum f i j)))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc70 f a)) (t2tb2 i))) (* a (tb2t2
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb8 f)
                                                                  (t2tb2 i)))))))

;; ind_isum_bound_eq
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (<= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) (tb2t2
                                                     (infix_at int int
                                                     (t2tb8 g) (t2tb2 k))))))
  (<= (ind_isum f i j) (ind_isum g i j))))))

;; comp_trans_sum
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (< b c) (< (+ a b) (+ a c)))))

;; compeq_trans_sum_zero
  (assert (forall ((a Int) (b Int)) (=> (<= 0 b) (<= a (+ a b)))))

;; compeq_trans_sum
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= b c) (<= (+ a b) (+ a c)))))

;; comp_trans_equal_strict
  (assert
  (forall ((a Int) (b Int) (c Int)) (=> (<= a b) (=> (< b c) (< a c)))))

;; ind_isum_bound
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 k))))))
  (< (ind_isum f i j) (ind_isum g i j))))))

;; ind_isum_scal_right
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (ind_isum (fc69 f a) i j) (* (ind_isum f i j) a)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc69 f a)) (t2tb2 i))) (* (tb2t2
                                                                (infix_at 
                                                                int int
                                                                (t2tb8 f)
                                                                (t2tb2 i))) a))))

;; ind_isum_scal_rev_right
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (* (ind_isum f i j) a) (ind_isum (fc68 f a) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc68 f a)) (t2tb2 i))) (* (tb2t2
                                                                (infix_at 
                                                                int int
                                                                (t2tb8 f)
                                                                (t2tb2 i))) a))))

;; ind_isum_scal_rev
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (* a (ind_isum f i j)) (ind_isum (fc67 f a) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc67 f a)) (t2tb2 i))) (* a (tb2t2
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb8 f)
                                                                  (t2tb2 i)))))))

;; ind_isum_scal
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (a Int))
  (=> (<= i j) (= (ind_isum (fc66 f a) i j) (* a (ind_isum f i j))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (a Int) (i Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc66 f a)) (t2tb2 i))) (* a (tb2t2
                                                                  (infix_at
                                                                  int 
                                                                  int
                                                                  (t2tb8 f)
                                                                  (t2tb2 i)))))))

;; ind_isum_transl_minus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_isum f i j) (ind_isum (fc65 f) (- i 1) (- j 1)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc65 f)) (t2tb2 b))) (tb2t2
                                                           (infix_at 
                                                           int int (t2tb8 f)
                                                           (t2tb2 (+ b 1)))))))

;; ind_isum_transl_plus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_isum f i j) (ind_isum (fc64 f) (+ i 1) (+ j 1)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc64 f)) (t2tb2 b))) (tb2t2
                                                           (infix_at 
                                                           int int (t2tb8 f)
                                                           (t2tb2 (- b 1)))))))

;; ind_isum_transl
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int) (k Int))
  (= (ind_isum f i j) (ind_isum (fc63 f k) (- i k) (- j k)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (k Int) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc63 f k)) (t2tb2 b))) (tb2t2
                                                             (infix_at 
                                                             int int
                                                             (t2tb8 f)
                                                             (t2tb2 (+ b k)))))))

;; ind_iproduct_trans
  (assert
  (forall ((f (Array Int Int)) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (ind_iproduct f i j) (* (ind_iproduct f i k) (ind_iproduct f k j))))))

;; ind_iproduct_map
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t2 (Array Int Int)))
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset k l)))
  (= (ind_iproduct t2 k l) (ind_iproduct (fc62 f t2) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc62 f t2)) (t2tb2 b))) (tb2t2
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; ind_iproduct_map_auto
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t2 (Array Int Int)))
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset i j)))
  (= (ind_iproduct t2 i j) (ind_iproduct (fc61 f t2) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc61 f t2)) (t2tb2 b))) (tb2t2
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; ind_iproduct_left_right
  (assert
  (forall ((f (Array Int Int)) (l Int) (k Int) (h1 Int))
  (=> (and (<= l k) (<= k h1))
  (= (ind_iproduct f l k) (ind_iproduct (fc60 f l h1) (+ (- h1 k) l) h1)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (l Int) (h1 Int) (a Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc60 f l h1)) (t2tb2 a))) (tb2t2
                                                                (infix_at 
                                                                int int
                                                                (t2tb8 f)
                                                                (t2tb2
                                                                (+ (- h1 (+ a 1)) l)))))))

;; positive_iproduct
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (< 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))))))
  (< 0 (ind_iproduct f i j)))))

;; ind_iproduct_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) 1)))
  (= (ind_iproduct f i j) 1))))

;; ind_iproduct_right_extension_comm
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (* (ind_iproduct f i (- j 1)) (tb2t2
                                   (infix_at int int (t2tb8 f)
                                   (t2tb2 (- j 1))))) (ind_iproduct f i j)))))

;; ind_iproduct_right_extension
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_iproduct f i j) (* (ind_iproduct f i (- j 1)) (tb2t2
                                                        (infix_at int 
                                                        int (t2tb8 f)
                                                        (t2tb2 (- j 1)))))))))

;; ind_iproduct_plus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_iproduct f i j) (* (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) 
  (ind_iproduct f (+ i 1) j))))))

;; ind_iproduct_empty
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= j i) (= (ind_iproduct f i j) 1))))

;; ind_isum_map_bij
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t2 (Array Int Int)))
  (=>
  (forall ((e Int))
  (=> (and (<= i e) (< e j))
  (and (<= k (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) l))))
  (=>
  (forall ((e Int) (eqt Int))
  (=> (and (<= i e) (< e j))
  (=> (and (<= i eqt) (< eqt j))
  (=> (not (= e eqt))
  (not
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 f) (t2tb2 eqt)))))))))
  (=>
  (forall ((eqt Int))
  (=> (and (<= k eqt) (< eqt l))
  (exists ((e Int))
  (and (and (<= i e) (< e j))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) eqt)))))
  (= (ind_isum t2 k l) (ind_isum (fc59 f t2) i j)))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc59 f t2)) (t2tb2 b))) (tb2t2
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; ind_isum_map_auto_bij
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t2 (Array Int Int)))
  (=>
  (forall ((e Int))
  (=> (and (<= i e) (< e j))
  (and (<= i (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))))
  (< (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) j))))
  (=>
  (forall ((e Int) (eqt Int))
  (=> (and (<= i e) (< e j))
  (=> (and (<= i eqt) (< eqt j))
  (=> (not (= e eqt))
  (not
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 f) (t2tb2 eqt)))))))))
  (=>
  (forall ((eqt Int))
  (=> (and (<= i eqt) (< eqt j))
  (exists ((e Int))
  (and (and (<= i e) (< e j))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 e))) eqt)))))
  (= (ind_isum t2 i j) (ind_isum (fc58 f t2) i j)))))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc58 f t2)) (t2tb2 b))) (tb2t2
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; ind_isum_map
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t2 (Array Int Int)))
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset k l))) (= (ind_isum t2 k l) (ind_isum (fc57 f t2) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc57 f t2)) (t2tb2 b))) (tb2t2
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; ind_isum_map_auto
  (assert
  (forall ((i Int) (j Int) (f (Array Int Int)) (t2 (Array Int Int)))
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset i j))) (= (ind_isum t2 i j) (ind_isum (fc56 f t2) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int Int)) (b Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc56 f t2)) (t2tb2 b))) (tb2t2
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; iproduct_to_iterate
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_iproduct f i j) (tb2t2
                          (int_iterate int (t2tb15 infix_as_closure)
                          (t2tb8 f) i j)))))

;; ind_iproduct_eq_gen
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i1 Int) (j1 Int) (i2 Int)
  (j2 Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i1 k) (< k j1))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 k))))))
  (=> (= i1 i2)
  (=> (= j1 j2) (= (ind_iproduct f i1 j1) (ind_iproduct g i2 j2)))))))

;; ind_iproduct_eq
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 k))))))
  (= (ind_iproduct f i j) (ind_iproduct g i j)))))

;; ind_iproduct_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_iproduct f i j) (tb2t2
                          (int_iterate int (t2tb15 infix_as_closure)
                          (t2tb8 f) i j)))))

;; ind_isum_pos
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (<= 0 (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))))))
  (<= 0 (ind_isum f i j))))))

;; ind_isum_func_const
  (assert
  (forall ((k Int) (f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (=>
  (forall ((l Int))
  (=> (and (<= i l) (< l j))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 l))) k)))
  (= (ind_isum f i j) (* k (- j i)))))))

;; ind_isum_eq_gen
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (i1 Int) (j Int)
  (j1 Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 k))))))
  (=> (= i i1) (=> (= j j1) (= (ind_isum f i j) (ind_isum g i1 j1)))))))

;; ind_isum_no_guard
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (not (= (tb2t (infix_at bool int (t2tb16 p) (t2tb2 k))) true))))
  (= (ind_isum (fc55 f g p) i j) (ind_isum f i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc55 f g p)) (t2tb2 k))) (ite (= 
                                                               (tb2t
                                                               (infix_at 
                                                               bool int
                                                               (t2tb16 p)
                                                               (t2tb2 k))) true)
                                                               (tb2t2
                                                               (infix_at 
                                                               int int
                                                               (t2tb8 g)
                                                               (t2tb2 k)))
                                                               (tb2t2
                                                               (infix_at 
                                                               int int
                                                               (t2tb8 f)
                                                               (t2tb2 k)))))))

;; ind_isum_to_guard
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t (infix_at bool int (t2tb16 p) (t2tb2 k))) true)))
  (= (ind_isum (fc54 f g p) i j) (ind_isum f i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (p (Array Int Bool))
  (k Int))
  (= (tb2t2 (infix_at int int (t2tb8 (fc54 f g p)) (t2tb2 k))) (ite (= 
                                                               (tb2t
                                                               (infix_at 
                                                               bool int
                                                               (t2tb16 p)
                                                               (t2tb2 k))) true)
                                                               (tb2t2
                                                               (infix_at 
                                                               int int
                                                               (t2tb8 f)
                                                               (t2tb2 k)))
                                                               (tb2t2
                                                               (infix_at 
                                                               int int
                                                               (t2tb8 g)
                                                               (t2tb2 k)))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int bool) j) (= (t2tb16 (tb2t16 j)) j)) :pattern (
  (t2tb16 (tb2t16 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int Bool)))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int Bool))) (sort (infix_mngt int bool) (t2tb16 x))))

;; ind_isum_eq
  (assert
  (forall ((f (Array Int Int)) (g (Array Int Int)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 k))) (tb2t2
                                                    (infix_at int int
                                                    (t2tb8 g) (t2tb2 k))))))
  (= (ind_isum f i j) (ind_isum g i j)))))

;; ind_isum_right_extension
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= i j)
  (= (ind_isum f i (+ j 1)) (+ (ind_isum f i j) (tb2t2
                                                (infix_at int int (t2tb8 f)
                                                (t2tb2 j))))))))

;; ind_isum_const
  (assert
  (forall ((k Int) (i Int) (j Int))
  (=> (< i j)
  (= (ind_isum
     (tb2t8 (infix_at (infix_mngt int int) int (t2tb15 fc53) (t2tb2 k))) i j) (* k (- j i))))))

;; fc_def
  (assert
  (forall ((y0 Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 fc53) (t2tb2 y0)) (t2tb2 y1))) y0)))

;; ind_isum_plus_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_isum f i j) (+ (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i))) 
  (ind_isum f (+ i 1) j))))))

;; ind_isum_one
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (= j (+ i 1))
  (= (ind_isum f i j) (tb2t2 (infix_at int int (t2tb8 f) (t2tb2 i)))))))

;; ind_isum_empty
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (=> (<= j i) (= (ind_isum f i j) 0))))

;; ind_isum_def
  (assert
  (forall ((f (Array Int Int)) (i Int) (j Int))
  (= (ind_isum f i j) (tb2t2
                      (int_iterate int (t2tb15 infix_pl_closure) (t2tb8 f) i
                      j)))))

;; infix -_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 infix_mn_closure) (t2tb2 y))
     (t2tb2 y1))) (- y y1))))

;; isum_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni)) (=> (is_empty a s) (= (isum a s f) 0)))))

;; add_assoc_rev
  (assert (forall ((a Int) (b Int) (c Int)) (= (+ a (+ b c)) (+ (+ a b) c))))

;; add_assoc
  (assert (forall ((a Int) (b Int) (c Int)) (= (+ (+ a b) c) (+ a (+ b c)))))

;; mul_assoc_rev_comm
  (assert (forall ((a Int) (b Int) (c Int)) (= (* a (* b c)) (* (* a c) b))))

;; mul_assoc_comm
  (assert (forall ((a Int) (b Int) (c Int)) (= (* (* a b) c) (* b (* a c)))))

;; mult_add_distr_rev
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int))
  (= (+ (+ (+ (* a c) (* a d)) (* b c)) (* b d)) (* (+ a b) (+ c d)))))

;; mult_add_left_rev
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (+ (* a b) (* a c)) (* a (+ b c)))))

;; mult_add_left
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (* a (+ b c)) (+ (* a b) (* a c)))))

;; mult_add_right_rev
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (+ (* a c) (* b c)) (* (+ a b) c))))

;; mult_add_right
  (assert
  (forall ((a Int) (b Int) (c Int)) (= (* (+ a b) c) (+ (* a c) (* b c)))))

;; mult_add_distr
  (assert
  (forall ((a Int) (b Int) (c Int) (d Int))
  (= (* (+ a b) (+ c d)) (+ (+ (+ (* a c) (* a d)) (* b c)) (* b d)))))

;; mul_assoc_rev
  (assert (forall ((a Int) (b Int) (c Int)) (= (* a (* b c)) (* (* a b) c))))

;; mul_assoc
  (assert (forall ((a Int) (b Int) (c Int)) (= (* (* a b) c) (* a (* b c)))))

;; isum_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (= (isum a s t2) (tb2t2 (iterate int a (t2tb15 infix_pl_closure) s t2))))))

;; infix *_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 infix_as_closure) (t2tb2 y))
     (t2tb2 y1))) (* y y1))))

;; infix +_closure_def
  (assert
  (forall ((y Int) (y1 Int))
  (= (tb2t2
     (infix_at int int
     (infix_at (infix_mngt int int) int (t2tb15 infix_pl_closure) (t2tb2 y))
     (t2tb2 y1))) (+ y y1))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb15 (tb2t15 j)) j) :pattern ((t2tb15 (tb2t15 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int (Array Int Int))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int (Array Int Int)))) (sort
  (infix_mngt int (infix_mngt int int)) (t2tb15 x))))

;; set_compat_order_mul
  (assert
  (forall ((a ty))
  (forall ((rel uni) (mul uni) (tzero1 uni))
  (=>
  (forall ((a1 uni) (b uni) (c uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=> (sort a c)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel tzero1) c)) true)
  (= (tb2t
     (infix_at bool a
     (infix_at (infix_mngt a bool) a rel
     (infix_at a a (infix_at (infix_mngt a a) a mul a1) c))
     (infix_at a a (infix_at (infix_mngt a a) a mul b) c))) true)))))))
  (compat_order_mult a rel mul tzero1)))))

;; compat_order_mul
  (assert
  (forall ((a ty))
  (forall ((rel uni) (mul uni) (tzero1 uni))
  (=> (compat_order_mult a rel mul tzero1)
  (forall ((a1 uni) (b uni) (c uni))
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel tzero1) c)) true)
  (= (tb2t
     (infix_at bool a
     (infix_at (infix_mngt a bool) a rel
     (infix_at a a (infix_at (infix_mngt a a) a mul a1) c))
     (infix_at a a (infix_at (infix_mngt a a) a mul b) c))) true))))))))

;; set_partial_order
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (=>
  (forall ((a1 uni) (b uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) a1)) true)
  (= a1 b))))))
  (=>
  (forall ((a1 uni) (b uni) (c uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=> (sort a c)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) c)) true)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) c)) true)))))))
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) a1)) true)))
  (partial_order a rel)))))))

;; set_strict
  (assert
  (forall ((a ty))
  (forall ((srel uni) (rel uni))
  (=>
  (forall ((a1 uni) (b uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a srel a1) b)) true)
  (and
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (not (= a1 b))))))) (strict a srel rel)))))

;; set_reflexive
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) a1)) true)))
  (reflexive a rel)))))

;; set_transitive
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (=>
  (forall ((a1 uni) (b uni) (c uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=> (sort a c)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) c)) true)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) c)) true)))))))
  (transitive a rel)))))

;; set_antisym
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (=>
  (forall ((a1 uni) (b uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) a1)) true)
  (= a1 b)))))) (antisym a rel)))))

;; compat_order_mult_def
  (assert
  (forall ((a ty))
  (forall ((rel uni) (mul uni) (tzero1 uni))
  (and
  (=> (compat_order_mult a rel mul tzero1)
  (forall ((a1 uni) (b uni) (c uni))
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel tzero1) c)) true)
  (= (tb2t
     (infix_at bool a
     (infix_at (infix_mngt a bool) a rel
     (infix_at a a (infix_at (infix_mngt a a) a mul a1) c))
     (infix_at a a (infix_at (infix_mngt a a) a mul b) c))) true)))))
  (=>
  (forall ((a1 uni) (b uni) (c uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=> (sort a c)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel tzero1) c)) true)
  (= (tb2t
     (infix_at bool a
     (infix_at (infix_mngt a bool) a rel
     (infix_at a a (infix_at (infix_mngt a a) a mul a1) c))
     (infix_at a a (infix_at (infix_mngt a a) a mul b) c))) true)))))))
  (compat_order_mult a rel mul tzero1))))))

;; strict_def
  (assert
  (forall ((a ty))
  (forall ((srel uni) (rel uni))
  (= (strict a srel rel)
  (forall ((a1 uni) (b uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a srel a1) b)) true)
  (and
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (not (= a1 b)))))))))))

;; recip_def
  (assert
  (forall ((a ty))
  (forall ((rrel uni) (rel uni))
  (and
  (=> (recip a rrel rel)
  (forall ((a1 uni) (b uni))
  (=
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rrel a1) b)) true)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) a1)) true))))
  (=>
  (forall ((a1 uni) (b uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rrel a1) b)) true)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) a1)) true)))))
  (recip a rrel rel))))))

;; partial_order_def
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (= (partial_order a rel) (and (antisym a rel) (pre_order a rel))))))

;; pre_order_def
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (= (pre_order a rel) (and (transitive a rel) (reflexive a rel))))))

;; reflexive_def
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (and
  (=> (reflexive a rel)
  (forall ((a1 uni))
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) a1)) true)))
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) a1)) true)))
  (reflexive a rel))))))

;; transitive_def
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (and
  (=> (transitive a rel)
  (forall ((a1 uni) (b uni) (c uni))
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) c)) true)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) c)) true)))))
  (=>
  (forall ((a1 uni) (b uni) (c uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=> (sort a c)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) c)) true)
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) c)) true)))))))
  (transitive a rel))))))

;; antisym_def
  (assert
  (forall ((a ty))
  (forall ((rel uni))
  (= (antisym a rel)
  (forall ((a1 uni) (b uni))
  (=> (sort a a1)
  (=> (sort a b)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel a1) b)) true)
  (=>
  (= (tb2t (infix_at bool a (infix_at (infix_mngt a bool) a rel b) a1)) true)
  (= a1 b))))))))))

;; set_infeq
  (assert (forall ((i Int) (j Int)) (=> (<= i j) (<= i j))))

;; set_inf
  (assert (forall ((i Int) (j Int)) (=> (< i j) (< i j))))

;; indic_div_mod_gen
  (assert
  (forall ((q Int))
  (=> (< 0 q)
  (forall ((i Int) (j Int))
  (=> (and (<= 0 i) (<= 0 j))
  (= (indic int (t2tb2 i) (t2tb2 j)) (infix_asdt
                                     (indic int (t2tb2 (mod i q))
                                     (t2tb2 (mod j q)))
                                     (indic int (t2tb2 (div i q))
                                     (t2tb2 (div j q))))))))))

;; indic_div_mod
  (assert
  (forall ((i Int) (j Int) (q Int))
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (< 0 q)
  (= (indic int (t2tb2 i) (t2tb2 j)) (infix_asdt
                                     (indic int (t2tb2 (mod i q))
                                     (t2tb2 (mod j q)))
                                     (indic int (t2tb2 (div i q))
                                     (t2tb2 (div j q))))))))))

;; inf_mul_comm
  (assert
  (forall ((i Int) (bi Int) (quot Int) (rest Int))
  (=> (and (<= 0 i) (< i bi))
  (=> (< 0 rest)
  (=> (< 0 quot) (=> (= bi (* quot rest)) (< (mod i rest) rest)))))))

;; inf_mul_gen_b
  (assert
  (forall ((n Int) (v Int) (p Int))
  (=> (and (<= 0 p) (< p n))
  (forall ((k Int)) (=> (and (<= 0 k) (< k v)) (< (+ (* p v) k) (* n v)))))))

;; inf_mul_gen
  (assert
  (forall ((n Int) (v Int) (p Int))
  (=> (and (<= 0 p) (< p v))
  (forall ((k Int)) (=> (and (<= 0 k) (< k n)) (< (+ (* k v) p) (* n v)))))))

;; inf_mul
  (assert
  (forall ((ia Int) (ib Int) (a Int) (b Int))
  (=> (and (<= 0 ia) (< ia a))
  (=> (and (<= 0 ib) (< ib b))
  (and (< (+ (* a ib) ia) (* a b)) (< (+ (* ib a) ia) (* b a)))))))

;; mod_div
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (<= 0 i)
  (=> (< 0 j) (=> (< 0 k) (= (div (mod i (* j k)) j) (mod (div i j) k)))))))

;; div_div
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (<= 0 i)
  (=> (< 0 j)
  (=> (< 0 k)
  (and (= (div (div i k) j) (div i (* k j)))
  (= (div (div i k) j) (div i (* j k)))))))))

;; mult_assoc
  (assert
  (forall ((i Int) (q Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 q)
  (=> (< 0 f) (= (* q (* f (div i (* q f)))) (* (* q f) (div i (* q f)))))))))

;; mod_mod_plus
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (= (mod i j) (mod (mod i (+ j j)) j))))))

;; mod_mod_rev
  (assert
  (forall ((i Int) (j Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 j)
  (=> (< 0 f)
  (and (= (mod i j) (mod (mod i (* j f)) j))
  (= (mod i j) (mod (mod i (* f j)) j))))))))

;; mod_mod_right
  (assert
  (forall ((i Int) (j Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 j) (=> (< 0 f) (= (mod (mod i (* j f)) j) (mod i j)))))))

;; add_mod
  (assert
  (forall ((a Int) (b Int) (c Int))
  (=> (< 0 c) (= (mod (+ (mod a c) (mod b c)) c) (mod (+ a b) c)))))

;; binary_prod
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i)
  (=> (< 0 j) (= (mod (* (mod i 2) (mod j 2)) 2) (mod (* i j) 2))))))

;; mod_mod_i
  (assert
  (forall ((i Int) (j Int)) (=> (< 0 j) (= (mod (mod i j) j) (mod i j)))))

;; mod_mod_left
  (assert
  (forall ((i Int) (j Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 j) (=> (< 0 f) (= (mod (mod i (* f j)) j) (mod i j)))))))

;; mod_invariant
  (assert
  (forall ((i Int) (q Int) (f Int))
  (=> (<= 0 i)
  (=> (< 0 q)
  (=> (< 0 f)
  (= (mod (+ (* q (* f (div i (* q f)))) (mod i (* q f))) q) (mod (mod i (* q f)) q)))))))

;; bound_div_gen
  (assert
  (forall ((q Int) (f Int))
  (=> (<= 0 q)
  (=> (<= 0 f)
  (forall ((i Int)) (=> (and (<= 0 i) (< i (* q f))) (< (div i q) f)))))))

;; bound_div
  (assert
  (forall ((i Int) (q Int) (f Int))
  (=> (<= 0 i)
  (=> (<= 0 q)
  (=> (<= 0 f)
  (=> (< i (* f q))
  (and (<= 0 (div i q))
  (and
  (and (<= 0 (* (div i q) q))
  (and (<= (* (div i q) q) i) (< i (* q (+ (div i q) 1))))) (< (div i q) f)))))))))

;; mod_plus_fact_gen_mod
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (< 0 j) (= (mod (+ (* k j) i) j) (mod i j)))))

;; div_plus_fact_gen_div
  (assert
  (forall ((i Int) (j Int) (k Int))
  (=> (< 0 j) (= (div (+ i (* k j)) j) (+ (div i j) k)))))

;; div_plus_quotient
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (= (div (+ i j) j) (+ (div i j) 1))))))

;; mod_zero
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (=> (= (mod i j) 0) (= i (* j (div i j))))))))

;; div_mod_eq
  (assert
  (forall ((i Int) (j Int) (q Int))
  (=> (<= 0 i)
  (=> (<= 0 j)
  (=> (< 0 q)
  (=> (= (div i q) (div j q)) (=> (= (mod i q) (mod j q)) (= i j))))))))

;; decomp
  (assert
  (forall ((i Int) (j Int))
  (=> (not (= 0 j)) (= i (+ (* j (div i j)) (mod i j))))))

;; mod_eq
  (assert
  (forall ((a Int) (b Int) (d Int)) (=> (= a b) (= (mod a d) (mod b d)))))

;; bound_mod
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i) (=> (< 0 j) (and (<= 0 (mod i j)) (< (mod i j) j))))))

;; unicity_div_mod
  (assert
  (forall ((i Int) (j Int) (q Int) (r Int))
  (=> (<= 0 i)
  (=> (<= 0 q)
  (=> (<= 0 r)
  (=> (< 0 j)
  (=> (= i (+ (* q j) r))
  (=> (and (<= 0 r) (< r j)) (and (= q (div i j)) (= r (mod i j)))))))))))

;; bound_eq
  (assert
  (forall ((i Int) (j Int)) (=> (and (<= 0 i) (< i j)) (= i (mod i j)))))

;; mult_eq_inv
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (* a1 b1) (* b2 a2))))))

;; add_eq_inv
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (+ a1 b1) (+ b2 a2))))))

;; mult_eq
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (* a1 b1) (* a2 b2))))))

;; add_eq
  (assert
  (forall ((a1 Int) (a2 Int) (b1 Int) (b2 Int))
  (=> (= a1 a2) (=> (= b1 b2) (= (+ a1 b1) (+ a2 b2))))))

;; mult_one
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a2 1) (= (* a1 a2) a1))))

;; one_mult
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a1 1) (= (* a1 a2) a2))))

;; add_zero
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a2 0) (= (+ a1 a2) a1))))

;; zero_add
  (assert (forall ((a1 Int) (a2 Int)) (=> (= a1 0) (= (+ a1 a2) a2))))

;; div_plus_one
  (assert
  (forall ((i Int) (j Int))
  (=> (<= 0 i)
  (=> (< 0 j) (and (<= (* (div i j) j) i) (< i (* (+ (div i j) 1) j)))))))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod (- 1) y) (- y 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; abs_def
  (assert
  (forall ((x Int)) (ite (<= 0 x) (= (abs1 x) x) (= (abs1 x) (- x)))))

;; ind_sum_indic_t_quant
  (assert
  (forall ((t2 (Array Int t)) (l Int) (h1 Int))
  (forall ((i Int))
  (=> (and (<= l i) (< i h1))
  (= (ind_sum (fc52 t2 i) l h1) (tb2t9
                                (infix_at t1 int (t2tb12 t2) (t2tb2 i))))))))

;; fc_def
  (assert
  (forall ((t2 (Array Int t)) (i Int) (e Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc52 t2 i)) (t2tb2 e))) (infix_asdt
                                                              (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (t2tb12 t2)
                                                              (t2tb2 e)))
                                                              (indic 
                                                              int (t2tb2 i)
                                                              (t2tb2 e))))))

;; ind_sum_indic_t
  (assert
  (forall ((t2 (Array Int t)) (l Int) (h1 Int) (i Int))
  (=> (and (<= l i) (< i h1))
  (and
  (= (ind_sum_indic t2 l h1 i) (tb2t9
                               (infix_at t1 int (t2tb12 t2) (t2tb2 i))))
  (= (ind_sum (fc51 t2 i) l h1) (tb2t9
                                (infix_at t1 int (t2tb12 t2) (t2tb2 i))))))))

;; fc_def
  (assert
  (forall ((t2 (Array Int t)) (i Int) (e Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc51 t2 i)) (t2tb2 e))) (infix_asdt
                                                              (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (t2tb12 t2)
                                                              (t2tb2 e)))
                                                              (indic 
                                                              int (t2tb2 i)
                                                              (t2tb2 e))))))

;; sum_indic_ts
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni) (i uni))
  (=> (mem a i s) (= (sum a s (fc50 a t2 i)) (tb2t9 (infix_at t1 a t2 i)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((t2 uni) (i uni) (e uni))
  (= (tb2t9 (infix_at t1 a (fc50 a t2 i) e)) (infix_asdt
                                             (tb2t9 (infix_at t1 a t2 e))
                                             (indic a i e))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (fc50 a x x1)))))

;; sum_indic_t
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni) (i uni))
  (=> (mem a i s) (= (sum_indic a s t2 i) (tb2t9 (infix_at t1 a t2 i)))))))

;; ind_sum_indic_spec
  (assert
  (forall ((t2 (Array Int t)) (l Int) (h1 Int) (i Int))
  (=> (< l h1)
  (= (ind_sum_indic t2 l h1 i) (sum_indic int (t2tb1 (to_fset l h1))
                               (t2tb12 t2) (t2tb2 i))))))

;; ind_sum_indic_def
  (assert
  (forall ((t2 (Array Int t)) (l Int) (h1 Int) (i Int))
  (=> (< l h1) (= (ind_sum_indic t2 l h1 i) (ind_sum (result7 t2 i) l h1)))))

;; result_def
  (assert
  (forall ((t2 (Array Int t)) (i Int) (e Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (result7 t2 i)) (t2tb2 e))) (infix_asdt
                                                                 (tb2t9
                                                                 (infix_at 
                                                                 t1 int
                                                                 (t2tb12 t2)
                                                                 (t2tb2 e)))
                                                                 (indic 
                                                                 int
                                                                 (t2tb2 i)
                                                                 (t2tb2 e))))))

;; sum_indic_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni) (i uni))
  (= (sum_indic a s t2 i) (sum a s (result6 a t2 i))))))

;; result_def
  (assert
  (forall ((a ty))
  (forall ((t2 uni) (i uni) (e uni))
  (= (tb2t9 (infix_at t1 a (result6 a t2 i) e)) (infix_asdt
                                                (tb2t9 (infix_at t1 a t2 e))
                                                (indic a i e))))))

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (result6 a x x1)))))

;; indic_2_comm
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (and (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a aqt a1 b1 bqt))
  (and (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a a1 aqt bqt b1))
  (= (indic_2 b a a1 aqt b1 bqt) (indic_2 b a aqt a1 bqt b1)))))))

;; indic_2_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (and
  (= (indic_2 b a a1 aqt b1 bqt) (infix_asdt (indic a a1 aqt)
                                 (indic b b1 bqt)))
  (= (indic_2 b a a1 aqt b1 bqt) (indic (tuple21 a b) (Tuple2 a b a1 b1)
                                 (Tuple2 a b aqt bqt)))))))

;; indic_2_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (=> (sort a a1)
  (=> (sort a aqt)
  (=> (sort b b1)
  (=> (sort b bqt)
  (ite (and (= a1 aqt) (= b1 bqt)) (= (indic_2 b a a1 aqt b1 bqt) tone)
  (= (indic_2 b a a1 aqt b1 bqt) tzero)))))))))

;; indic_comm
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni)) (= (indic a a1 aqt) (indic a aqt a1)))))

;; indic_bool_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni))
  (=> (sort a a1)
  (=> (sort a aqt)
  (ite (= a1 aqt) (= (indic_bool a a1 aqt) true)
  (= (indic_bool a a1 aqt) false)))))))

;; indic_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (aqt uni))
  (=> (sort a a1)
  (=> (sort a aqt)
  (ite (= a1 aqt) (= (indic a a1 aqt) tone) (= (indic a a1 aqt) tzero)))))))

;; iterate_nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s t2) (iterate im1 a op1 (nonn_part1 im1 a op1 s t2)
                              t2)))))))

;; iterate_neutral
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s) (= (infix_at im1 a t2 a1) (neutral_elt im1 op1)))))
  (= (iterate im1 a op1 s t2) (neutral_elt im1 op1))))))))

;; nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (sort (set1 a) s)
  (=> (commut im1 op1)
  (and (= s (union1 a (nonn_part1 im1 a op1 s t2) (n_part1 im1 a op1 s t2)))
  (= (inter a (nonn_part1 im1 a op1 s t2) (n_part1 im1 a op1 s t2)) (empty a))))))))

;; n_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (forall ((e uni))
  (= (mem a e (n_part1 im1 a op1 s t2))
  (and (mem a e s) (neutral im1 op1 (infix_at im1 a t2 e))))))))

;; n_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (= (n_part1 im1 a op1 s t2) (filter a (result5 im1 a op1 t2) s)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t2 uni) (e uni))
  (= (= (tb2t (infix_at bool a (result5 im1 a op1 t2) e)) true) (neutral im1
  op1 (infix_at im1 a t2 e))))))

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result5 im1 a x x1)))))

;; n_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (n_part1 im1 a x x1 x2)))))

;; nonn_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (forall ((e uni))
  (= (mem a e (nonn_part1 im1 a op1 s t2))
  (and (mem a e s) (not (neutral im1 op1 (infix_at im1 a t2 e)))))))))

;; nonn_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (= (nonn_part1 im1 a op1 s t2) (filter a (result4 im1 a op1 t2) s)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t2 uni) (e uni))
  (= (= (tb2t (infix_at bool a (result4 im1 a op1 t2) e)) true)
  (not (neutral im1 op1 (infix_at im1 a t2 e)))))))

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result4 im1 a x x1)))))

;; nonn_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (nonn_part1 im1 a x x1 x2)))))

;; ind_product_const_tone
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (forall ((t2 Int))
  (=> (and (<= i t2) (< t2 j))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 t2))) tone)))
  (= (ind_product f i j) tone)))))

;; ind_product_zero_elt
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int) (t2 Int))
  (=> (<= i j)
  (=> (and (<= i t2) (< t2 j))
  (=> (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 t2))) tzero)
  (= (ind_product f i j) tzero))))))

;; ind_product_zero
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (=> (<= i j)
  (=>
  (exists ((t2 Int))
  (and (and (<= i t2) (< t2 j))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 t2))) tzero)))
  (= (ind_product f i j) tzero)))))

;; ind_product_zero_pre
  (assert
  (forall ((f (Array Int t)) (i Int) (t2 Int) (j Int))
  (=> (and (<= i t2) (< t2 j))
  (=> (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 t2))) tzero)
  (= (ind_product f i j) tzero)))))

;; ind_product_trans
  (assert
  (forall ((f (Array Int t)) (i Int) (k Int) (j Int))
  (=> (and (<= i k) (<= k j))
  (= (ind_product f i j) (infix_asdt (ind_product f i k) (ind_product f k j))))))

;; ind_product_eq_func
  (assert
  (forall ((i Int) (j Int) (f1 (Array Int t)) (f2 (Array Int t)))
  (=> (p_injective t1 int (t2tb12 f1) (t2tb1 (to_fset i j)))
  (=> (p_injective t1 int (t2tb12 f2) (t2tb1 (to_fset i j)))
  (=>
  (= (tb2t14 (map1 t1 int (t2tb12 f1) (t2tb1 (to_fset i j)))) (tb2t14
                                                              (map1 t1 
                                                              int (t2tb12 f2)
                                                              (t2tb1
                                                              (to_fset i j)))))
  (= (ind_product f1 i j) (ind_product f2 i j)))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 t1) j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14
                                                                 (tb2t14 j))) )))

;; BridgeL
  (assert
  (forall ((i (set t))) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; t2tb_sort
  (assert (forall ((x (set t))) (sort (set1 t1) (t2tb14 x))))

;; ind_product_right_extension_comm
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (=> (< i j)
  (= (infix_asdt (ind_product f i (- j 1))
     (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 (- j 1))))) (ind_product f i
                                                           j)))))

;; map_ind_product_eq
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t2 (Array Int t)))
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset k l)))
  (= (ind_product t2 k l) (ind_product (fc49 f t2) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int t)) (b Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc49 f t2)) (t2tb2 b))) (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (t2tb12 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; map_product_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (t2 uni))
  (=> (p_injective a b f s)
  (= (product a (map1 a b f s) t2) (product b s (fc48 b a f t2)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t2 uni) (b1 uni))
  (= (tb2t9 (infix_at t1 b (fc48 b a f t2) b1)) (tb2t9
                                                (infix_at t1 a t2
                                                (infix_at a b f b1)))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b t1) (fc48 b a x x1)))))

;; ind_product_to_product
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (= (ind_product f i j) (product int (t2tb1 (to_fset i j)) (t2tb12 f)))))

;; ind_product_left_extension
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_product f i j) (infix_asdt
                         (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 i)))
                         (ind_product f (+ i 1) j))))))

;; ind_product_right_extension
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_product f i j) (infix_asdt (ind_product f i (- j 1))
                         (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 (- j 1)))))))))

;; ind_product_eq_gen
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (i1 Int) (j1 Int) (i2 Int)
  (j2 Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i1 k) (< k j1))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 k))) (tb2t9
                                                    (infix_at t1 int
                                                    (t2tb12 g) (t2tb2 k))))))
  (=> (= i1 i2)
  (=> (= j1 j2) (= (ind_product f i1 j1) (ind_product g i2 j2)))))))

;; ind_product_eq
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 k))) (tb2t9
                                                    (infix_at t1 int
                                                    (t2tb12 g) (t2tb2 k))))))
  (= (ind_product f i j) (ind_product g i j)))))

;; ind_product_def
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (= (ind_product f i j) (tb2t9
                         (int_iterate t1 (t2tb10 infix_asdt_closure)
                         (t2tb12 f) i j)))))

;; product_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni)) (=> (is_empty a s) (= (product a s f) tone)))))

;; product_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (= (product a s t2) (tb2t9 (iterate t1 a (t2tb10 infix_asdt_closure) s t2))))))

;; infix *._closure_def
  (assert
  (forall ((y t) (y1 t))
  (= (tb2t9
     (infix_at t1 t1
     (infix_at (infix_mngt t1 t1) t1 (t2tb10 infix_asdt_closure) (t2tb9 y))
     (t2tb9 y1))) (infix_asdt y y1))))

;; ind_sum_null_but_maybe_one_elt
  (assert
  (forall ((t2 (Array Int t)) (i Int) (j Int) (ind Int))
  (=> (and (<= i ind) (< ind j))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (=> (not (= k ind))
  (= (tb2t9 (infix_at t1 int (t2tb12 t2) (t2tb2 k))) tzero))))
  (= (ind_sum t2 i j) (tb2t9 (infix_at t1 int (t2tb12 t2) (t2tb2 ind))))))))

;; sum_null_but_maybe_one_elt
  (assert
  (forall ((a ty))
  (forall ((t2 uni) (s uni) (elt uni))
  (=> (mem a elt s)
  (=>
  (forall ((k uni))
  (=> (sort a k)
  (=> (mem a k s)
  (=> (not (= k elt)) (= (tb2t9 (infix_at t1 a t2 k)) tzero)))))
  (= (sum a s t2) (tb2t9 (infix_at t1 a t2 elt))))))))

;; sum_null_but_one_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni) (elt uni))
  (=> (and (mem a elt s) (not (= (tb2t9 (infix_at t1 a t2 elt)) tzero)))
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s)
  (=> (not (= a1 elt)) (= (tb2t9 (infix_at t1 a t2 a1)) tzero)))))
  (= (sum a s t2) (tb2t9 (infix_at t1 a t2 elt))))))))

;; ind_sum_null
  (assert
  (forall ((t2 (Array Int t)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t9 (infix_at t1 int (t2tb12 t2) (t2tb2 k))) tzero)))
  (= (ind_sum t2 i j) tzero))))

;; sum_null
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (=> (= (cardinal a (non_tzero a s t2)) 0) (= (sum a s t2) tzero)))))

;; sum_null_but_one
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (=> (= (cardinal a (non_tzero a s t2)) 1)
  (= (sum a s t2) (tb2t9 (infix_at t1 a t2 (element a (non_tzero a s t2)))))))))

;; map_sum_eq_nonnull
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (t2 uni))
  (=> (p_bijective a a f (non_tzero a s (fc45 a f t2))
  (non_tzero a (map1 a a f s) t2))
  (= (sum a (non_tzero a (map1 a a f s) t2) t2) (sum a
                                                (non_tzero a s (fc46 a f t2))
                                                (fc47 a f t2)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t2 uni) (b uni))
  (= (tb2t9 (infix_at t1 a (fc47 a f t2) b)) (tb2t9
                                             (infix_at t1 a t2
                                             (infix_at a a f b)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t2 uni) (b uni))
  (= (tb2t9 (infix_at t1 a (fc46 a f t2) b)) (tb2t9
                                             (infix_at t1 a t2
                                             (infix_at a a f b)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t2 uni) (b uni))
  (= (tb2t9 (infix_at t1 a (fc45 a f t2) b)) (tb2t9
                                             (infix_at t1 a t2
                                             (infix_at a a f b)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (fc47 a x x1)))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (fc46 a x x1)))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (fc45 a x x1)))))

;; non_null_map
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (t2 uni))
  (= (non_tzero a (map1 a a f s) t2) (map1 a a f
                                     (non_tzero a s (fc44 a f t2)))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (t2 uni) (b uni))
  (= (tb2t9 (infix_at t1 a (fc44 a f t2) b)) (tb2t9
                                             (infix_at t1 a t2
                                             (infix_at a a f b)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (fc44 a x x1)))))

;; sum_nullity_partition
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni)) (= (sum a s t2) (sum a (non_tzero a s t2) t2)))))

;; set_non_tzero_member_gen_
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (forall ((e uni))
  (=> (and (mem a e s) (not (= (tb2t9 (infix_at t1 a t2 e)) tzero))) (mem a e
  (non_tzero a s t2)))))))

;; set_non_tzero_member_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (forall ((e uni))
  (=> (and (mem a e s) (not (= (tb2t9 (infix_at t1 a t2 e)) tzero))) (mem a e
  (non_tzero a s t2)))))))

;; set_non_tzero_member
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni) (e uni))
  (=> (mem a e s)
  (=> (not (= (tb2t9 (infix_at t1 a t2 e)) tzero)) (mem a e
  (non_tzero a s t2)))))))

;; get_non_tzero_member
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni) (e uni))
  (=> (mem a e (non_tzero a s t2))
  (and (mem a e s) (not (= (tb2t9 (infix_at t1 a t2 e)) tzero)))))))

;; non_tzero_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (forall ((e uni))
  (= (mem a e (non_tzero a s t2))
  (and (mem a e s) (not (= (tb2t9 (infix_at t1 a t2 e)) tzero))))))))

;; non_tzero_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (= (non_tzero a s t2) (nonn_part t1 a (t2tb10 infix_pldt_closure) s t2)))))

;; non_tzero_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (non_tzero a x x1)))))

;; ind_sum_commute
  (assert
  (forall ((f (Array Int (Array Int t))) (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (<= k l) (= (ind_sum (fc41 f k l) i j) (ind_sum (fc43 f i j) k l))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (i Int) (j Int) (k1 Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc43 f i j)) (t2tb2 k1))) (ind_sum
                                                                (fc42 f k1) i
                                                                j))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (k1 Int) (k2 Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc42 f k1)) (t2tb2 k2))) (tb2t9
                                                               (infix_at 
                                                               t1 int
                                                               (infix_at
                                                               (infix_mngt
                                                               int t1) 
                                                               int (t2tb13 f)
                                                               (t2tb2 k2))
                                                               (t2tb2 k1))))))

;; fc_def
  (assert
  (forall ((f (Array Int (Array Int t))) (k Int) (l Int) (k1 Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc41 f k l)) (t2tb2 k1))) (ind_sum
                                                                (tb2t12
                                                                (infix_at
                                                                (infix_mngt
                                                                int t1) 
                                                                int
                                                                (t2tb13 f)
                                                                (t2tb2 k1)))
                                                                k l))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int (infix_mngt int t1)) j)
     (= (t2tb13 (tb2t13 j)) j)) :pattern ((t2tb13 (tb2t13 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int (Array Int t))))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int (Array Int t)))) (sort
  (infix_mngt int (infix_mngt int t1)) (t2tb13 x))))

;; int_iterate_commute
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (<= i j)
  (=> (<= k l)
  (= (int_iterate im1 op1 (fc38 im1 op1 f k l) i j) (int_iterate im1 op1
                                                    (fc40 im1 op1 f i j) k l)))))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (a Int))
  (= (infix_at im1 int (fc40 im1 op1 f i j) (t2tb2 a)) (int_iterate im1 op1
                                                       (fc39 im1 f a) i j)))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (a Int) (b Int))
  (= (infix_at im1 int (fc39 im1 f a) (t2tb2 b)) (infix_at im1 int
                                                 (infix_at
                                                 (infix_mngt int im1) 
                                                 int f (t2tb2 b)) (t2tb2 a))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
  (= (infix_at im1 int (fc38 im1 op1 f k l) (t2tb2 a)) (int_iterate im1 op1
                                                       (infix_at
                                                       (infix_mngt int im1)
                                                       int f (t2tb2 a)) k l)))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc40 im1 x x1 x2 x3)))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 Int)) (sort (infix_mngt int im1) (fc39 im1 x x1)))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc38 im1 x x1 x2 x3)))))

;; int_int_iterate_commute
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (<= i j)
  (=> (<= k l)
  (= (int_int_iterate im1 op1 f i j k l) (int_int_iterate im1 op1
                                         (fc37 im1 f) k l i j)))))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (a Int) (b Int))
  (= (infix_at im1 int
     (infix_at (infix_mngt int im1) int (fc37 im1 f) (t2tb2 a)) (t2tb2 b)) 
  (infix_at im1 int (infix_at (infix_mngt int im1) int f (t2tb2 b))
  (t2tb2 a))))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni)) (sort (infix_mngt int (infix_mngt int im1))
  (fc37 im1 x)))))

;; iterate_commute
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 (tuple21 a b) op1 (cartesian_product b a s1 s2)
     (fc35 im1 b a f)) (iterate im1 (tuple21 b a) op1
                       (cartesian_product a b s2 s1) (fc36 im1 b a f))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 b a) (fc36 im1 b a f) o) (infix_at im1 b
                                                     (infix_at
                                                     (infix_mngt b im1) a f
                                                     (sec a b o))
                                                     (fir a b o))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 a b) (fc35 im1 b a f) o) (infix_at im1 b
                                                     (infix_at
                                                     (infix_mngt b im1) a f
                                                     (fir b a o))
                                                     (sec b a o))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 b a) im1) (fc36 im1 b a x)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc35 im1 b a x)))))

;; int_int_iterate_to_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (iterate im1 (tuple21 int int) op1
                                         (cartesian_product int int
                                         (t2tb1 (to_fset i j))
                                         (t2tb1 (to_fset k l))) (fc34 im1 f)))))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (o (tuple2 Int Int)))
  (= (infix_at im1 (tuple21 int int) (fc34 im1 f) (t2tb7 o)) (infix_at im1
                                                             int
                                                             (infix_at
                                                             (infix_mngt 
                                                             int im1) 
                                                             int f
                                                             (fir int 
                                                             int (t2tb7 o)))
                                                             (sec int 
                                                             int (t2tb7 o)))))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 int int) im1) (fc34 im1 x)))))

;; int_iterate_to_int_int_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 (fc33 im1 op1 f k l) i j) (int_int_iterate im1 op1
                                                    f i j k l)))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
  (= (infix_at im1 int (fc33 im1 op1 f k l) (t2tb2 a)) (int_iterate im1 op1
                                                       (infix_at
                                                       (infix_mngt int im1)
                                                       int f (t2tb2 a)) k l)))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc33 im1 x x1 x2 x3)))))

;; int_int_iterate_to_int_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= i j)
  (=> (iterable im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (int_iterate im1 op1
                                         (fc32 im1 op1 f k l) i j)))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (k Int) (l Int) (a Int))
  (= (infix_at im1 int (fc32 im1 op1 f k l) (t2tb2 a)) (int_iterate im1 op1
                                                       (infix_at
                                                       (infix_mngt int im1)
                                                       int f (t2tb2 a)) k l)))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort (infix_mngt int im1)
  (fc32 im1 x x1 x2 x3)))))

;; int_int_iterate_def_plus_one
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (< i j)
  (=> (iterable im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (infix_at im1 im1
                                         (infix_at (infix_mngt im1 im1) im1
                                         op1
                                         (int_iterate im1 op1
                                         (infix_at (infix_mngt int im1) 
                                         int f (t2tb2 i)) k l))
                                         (int_int_iterate im1 op1 f (+ i 1) j
                                         k l))))))))

;; int_int_iterate_def_empty
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (<= j i)
  (=> (iterable im1 op1)
  (= (int_int_iterate im1 op1 f i j k l) (neutral_elt im1 op1)))))))

;; ind_sum_scal_gen
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (forall ((a t))
  (= (ind_sum (fc31 f a) i j) (infix_asdt a (ind_sum f i j))))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (a t) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc31 f a)) (t2tb2 i))) (infix_asdt a
                                                             (tb2t9
                                                             (infix_at 
                                                             t1 int
                                                             (t2tb12 f)
                                                             (t2tb2 i)))))))

;; sum_scal_gen
  (assert
  (forall ((f (Array Int t)) (s (set Int)))
  (forall ((a t))
  (= (sum int (t2tb1 s) (t2tb12 (fc30 f a))) (infix_asdt a
                                             (sum int (t2tb1 s) (t2tb12 f)))))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (a t) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc30 f a)) (t2tb2 i))) (infix_asdt a
                                                             (tb2t9
                                                             (infix_at 
                                                             t1 int
                                                             (t2tb12 f)
                                                             (t2tb2 i)))))))

;; ind_sum_scal_rev
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int) (a t))
  (= (infix_asdt a (ind_sum f i j)) (ind_sum (fc29 f a) i j))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (a t) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc29 f a)) (t2tb2 i))) (infix_asdt a
                                                             (tb2t9
                                                             (infix_at 
                                                             t1 int
                                                             (t2tb12 f)
                                                             (t2tb2 i)))))))

;; ind_sum_scal
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int) (a t))
  (= (ind_sum (fc28 f a) i j) (infix_asdt a (ind_sum f i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (a t) (i Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc28 f a)) (t2tb2 i))) (infix_asdt a
                                                             (tb2t9
                                                             (infix_at 
                                                             t1 int
                                                             (t2tb12 f)
                                                             (t2tb2 i)))))))

;; sum_scal
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (c t))
  (= (sum a s (fc27 a f c)) (infix_asdt c (sum a s f))))))

;; fc_def
  (assert
  (forall ((a ty))
  (forall ((f uni) (c t) (x uni))
  (= (tb2t9 (infix_at t1 a (fc27 a f c) x)) (infix_asdt c
                                            (tb2t9 (infix_at t1 a f x)))))))

;; fc_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 t)) (sort (infix_mngt a t1) (fc27 a x x1)))))

;; map_ind_sum_eq
  (assert
  (forall ((i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t2 (Array Int t)))
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset k l))) (= (ind_sum t2 k l) (ind_sum (fc26 f t2) i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int Int)) (t2 (Array Int t)) (b Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc26 f t2)) (t2tb2 b))) (tb2t9
                                                              (infix_at 
                                                              t1 int
                                                              (t2tb12 t2)
                                                              (infix_at 
                                                              int int
                                                              (t2tb8 f)
                                                              (t2tb2 b)))))))

;; ind_sum_to_sum
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (= (ind_sum f i j) (sum int (t2tb1 (to_fset i j)) (t2tb12 f)))))

;; ind_sum_to_iterate
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (= (ind_sum f i j) (tb2t9
                     (iterate t1 int (t2tb10 infix_pldt_closure)
                     (t2tb1 (to_fset i j)) (t2tb12 f))))))

;; ind_sum_comp
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (i Int) (j Int))
  (= (ind_sum (fc25 f g) i j) (infix_pldt (ind_sum f i j) (ind_sum g i j)))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc25 f g)) (t2tb2 k))) (infix_pldt
                                                             (tb2t9
                                                             (infix_at 
                                                             t1 int
                                                             (t2tb12 f)
                                                             (t2tb2 k)))
                                                             (tb2t9
                                                             (infix_at 
                                                             t1 int
                                                             (t2tb12 g)
                                                             (t2tb2 k)))))))

;; ind_sum_eq_bound
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (i Int) (j Int))
  (=> (= i j)
  (=>
  (forall ((k Int))
  (=> (and (<= 0 k) (< k j))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 k))) (tb2t9
                                                    (infix_at t1 int
                                                    (t2tb12 g) (t2tb2 k))))))
  (= (ind_sum f 0 i) (ind_sum g 0 j))))))

;; ind_sum_eq_gen
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (i1 Int) (j1 Int) (i2 Int)
  (j2 Int))
  (=> (= i1 i2)
  (=> (= j1 j2)
  (=>
  (forall ((k Int))
  (=> (and (<= i1 k) (< k j1))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 k))) (tb2t9
                                                    (infix_at t1 int
                                                    (t2tb12 g) (t2tb2 k))))))
  (= (ind_sum f i1 j1) (ind_sum g i2 j2)))))))

;; ind_sum_eq_del_bound_rev
  (assert
  (forall ((f (Array Int t)) (g t) (i Int) (j Int))
  (= (ind_sum f i j) (ind_sum (fc24 f g i j) i j))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (g t) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc24 f g i j)) (t2tb2 k))) (ite 
                                                                 (and
                                                                 (<= i k)
                                                                 (< k j))
                                                                 (tb2t9
                                                                 (infix_at 
                                                                 t1 int
                                                                 (t2tb12 f)
                                                                 (t2tb2 k)))
                                                                 g))))

;; ind_sum_eq_del_bound
  (assert
  (forall ((f (Array Int t)) (g t) (i Int) (j Int))
  (= (ind_sum (fc23 f g i j) i j) (ind_sum f i j))))

;; fc_def
  (assert
  (forall ((f (Array Int t)) (g t) (i Int) (j Int) (k Int))
  (= (tb2t9 (infix_at t1 int (t2tb12 (fc23 f g i j)) (t2tb2 k))) (ite 
                                                                 (and
                                                                 (<= i k)
                                                                 (< k j))
                                                                 (tb2t9
                                                                 (infix_at 
                                                                 t1 int
                                                                 (t2tb12 f)
                                                                 (t2tb2 k)))
                                                                 g))))

;; ind_sum_eq
  (assert
  (forall ((f (Array Int t)) (g (Array Int t)) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 k))) (tb2t9
                                                    (infix_at t1 int
                                                    (t2tb12 g) (t2tb2 k))))))
  (= (ind_sum f i j) (ind_sum g i j)))))

;; ind_sum_plus_one
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_sum f i j) (infix_pldt
                     (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 i)))
                     (ind_sum f (+ i 1) j))))))

;; ind_sum_right_extension
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (=> (< i j)
  (= (ind_sum f i j) (infix_pldt (ind_sum f i (- j 1))
                     (tb2t9 (infix_at t1 int (t2tb12 f) (t2tb2 (- j 1)))))))))

;; ind_sum_to_int_iterate
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (= (ind_sum f i j) (tb2t9
                     (int_iterate t1 (t2tb10 infix_pldt_closure) (t2tb12 f) i
                     j)))))

;; ind_sum_def
  (assert
  (forall ((f (Array Int t)) (i Int) (j Int))
  (= (ind_sum f i j) (tb2t9
                     (int_iterate t1 (t2tb10 infix_pldt_closure) (t2tb12 f) i
                     j)))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt int t1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern (
  (t2tb12 (tb2t12 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int t)))
  (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; t2tb_sort
  (assert (forall ((x (Array Int t))) (sort (infix_mngt int t1) (t2tb12 x))))

;; sum_from_cartesian_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (f uni))
  (= (sum (tuple21 a b) (cartesian_product b a s1 s2) (fc21 b a f)) (sum a s1
                                                                    (fc22 b a
                                                                    s2 f))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s2 uni) (f uni) (a1 uni))
  (= (tb2t9 (infix_at t1 a (fc22 b a s2 f) a1)) (sum b s2
                                                (infix_at (infix_mngt b t1) a
                                                f a1))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (o uni))
  (= (tb2t9 (infix_at t1 (tuple21 a b) (fc21 b a f) o)) (tb2t9
                                                        (infix_at t1 b
                                                        (infix_at
                                                        (infix_mngt b t1) a f
                                                        (fir b a o))
                                                        (sec b a o)))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (fc22 b a x x1)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) t1) (fc21 b a x)))))

;; sum_to_cartesian_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (f uni))
  (= (sum a s1 (fc19 b a s2 f)) (sum (tuple21 a b)
                                (cartesian_product b a s1 s2) (fc20 b a f))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (o uni))
  (= (tb2t9 (infix_at t1 (tuple21 a b) (fc20 b a f) o)) (tb2t9
                                                        (infix_at t1 b
                                                        (infix_at
                                                        (infix_mngt b t1) a f
                                                        (fir b a o))
                                                        (sec b a o)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s2 uni) (f uni) (a1 uni))
  (= (tb2t9 (infix_at t1 a (fc19 b a s2 f) a1)) (sum b s2
                                                (infix_at (infix_mngt b t1) a
                                                f a1))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) t1) (fc20 b a x)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a t1) (fc19 b a x x1)))))

;; sum_disjoint_transitivity
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni) (t2 uni))
  (=> (= (inter a s1 s2) (empty a))
  (= (sum a (union1 a s1 s2) t2) (infix_pldt (sum a s1 t2) (sum a s2 t2)))))))

;; sum_eq_gen
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (f uni) (g uni))
  (=> (= s sqt)
  (=>
  (forall ((x uni))
  (=> (sort a x)
  (=> (mem a x s)
  (= (tb2t9 (infix_at t1 a f x)) (tb2t9 (infix_at t1 a g x))))))
  (= (sum a s f) (sum a sqt g)))))))

;; sum_eq
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni) (g uni))
  (=>
  (forall ((x uni))
  (=> (sort a x)
  (=> (mem a x s)
  (= (tb2t9 (infix_at t1 a f x)) (tb2t9 (infix_at t1 a g x))))))
  (= (sum a s f) (sum a s g))))))

;; infix -._closure_def
  (assert
  (forall ((y t) (y1 t))
  (= (tb2t9
     (infix_at t1 t1
     (infix_at (infix_mngt t1 t1) t1 (t2tb10 infix_mndt_closure) (t2tb9 y))
     (t2tb9 y1))) (infix_mndt y y1))))

;; sum_comp
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (g uni))
  (= (sum b s (fc18 b f g)) (infix_pldt (sum b s f) (sum b s g))))))

;; fc_def
  (assert
  (forall ((b ty))
  (forall ((f uni) (g uni) (k uni))
  (= (tb2t9 (infix_at t1 b (fc18 b f g) k)) (infix_pldt
                                            (tb2t9 (infix_at t1 b f k))
                                            (tb2t9 (infix_at t1 b g k)))))))

;; fc_sort
  (assert
  (forall ((b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b t1) (fc18 b x x1)))))

;; map_sum_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (t2 uni))
  (=> (p_injective a b f s)
  (= (sum a (map1 a b f s) t2) (sum b s (fc17 b a f t2)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (t2 uni) (b1 uni))
  (= (tb2t9 (infix_at t1 b (fc17 b a f t2) b1)) (tb2t9
                                                (infix_at t1 a t2
                                                (infix_at a b f b1)))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b t1) (fc17 b a x x1)))))

;; sum_add
  (assert
  (forall ((b ty))
  (forall ((s uni) (f uni) (x uni))
  (=> (not (mem b x s))
  (= (sum b (add b x s) f) (infix_pldt (tb2t9 (infix_at t1 b f x))
                           (sum b s f)))))))

;; sum_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni)) (=> (is_empty a s) (= (sum a s t2) tzero)))))

;; sum_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (t2 uni))
  (= (sum a s t2) (tb2t9 (iterate t1 a (t2tb10 infix_pldt_closure) s t2))))))

;; infix +._closure_def
  (assert
  (forall ((y t) (y1 t))
  (= (tb2t9
     (infix_at t1 t1
     (infix_at (infix_mngt t1 t1) t1 (t2tb10 infix_pldt_closure) (t2tb9 y))
     (t2tb9 y1))) (infix_pldt y y1))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt t1 t1) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array t t)))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; t2tb_sort
  (assert (forall ((x (Array t t))) (sort (infix_mngt t1 t1) (t2tb11 x))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (infix_mngt t1 (infix_mngt t1 t1)) j)
     (= (t2tb10 (tb2t10 j)) j)) :pattern ((t2tb10 (tb2t10 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array t (Array t t))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array t (Array t t)))) (sort
  (infix_mngt t1 (infix_mngt t1 t1)) (t2tb10 x))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort t1 j) (= (t2tb9 (tb2t9 j)) j)) :pattern ((t2tb9 (tb2t9 j))) )))

;; BridgeL
  (assert (forall ((i t)) (! (= (tb2t9 (t2tb9 i)) i) :pattern ((t2tb9 i)) )))

;; t2tb_sort
  (assert (forall ((x t)) (sort t1 (t2tb9 x))))

;; null_product
  (assert
  (forall ((a t) (b t))
  (=> (= (infix_asdt a b) tzero) (or (= a tzero) (= b tzero)))))

;; couple_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni))
  (forall ((a1 uni) (b1 uni))
  (= (couple im1 b a f (Tuple2 a b a1 b1)) (infix_at im1 b
                                           (infix_at (infix_mngt b im1) a f
                                           a1) b1))))))

;; couple_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort im1 (couple im1 b a x x1)))))

;; iterate_nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s t2) (iterate im1 a op1 (nonn_part im1 a op1 s t2)
                              t2)))))))

;; iterate_neutral
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=>
  (forall ((a1 uni))
  (=> (sort a a1)
  (=> (mem a a1 s) (= (infix_at im1 a t2 a1) (neutral_elt im1 op1)))))
  (= (iterate im1 a op1 s t2) (neutral_elt im1 op1))))))))

;; nullity_partition
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (sort (set1 a) s)
  (=> (commut im1 op1)
  (and (= s (union1 a (nonn_part im1 a op1 s t2) (n_part im1 a op1 s t2)))
  (= (inter a (nonn_part im1 a op1 s t2) (n_part im1 a op1 s t2)) (empty a))))))))

;; n_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (forall ((e uni))
  (= (mem a e (n_part im1 a op1 s t2))
  (and (mem a e s) (neutral im1 op1 (infix_at im1 a t2 e))))))))

;; n_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (= (n_part im1 a op1 s t2) (filter a (result3 im1 a op1 t2) s)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t2 uni) (e uni))
  (= (= (tb2t (infix_at bool a (result3 im1 a op1 t2) e)) true) (neutral im1
  op1 (infix_at im1 a t2 e))))))

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result3 im1 a x x1)))))

;; n_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a) (n_part im1 a x x1 x2)))))

;; nonn_part_spec
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (forall ((e uni))
  (= (mem a e (nonn_part im1 a op1 s t2))
  (and (mem a e s) (not (neutral im1 op1 (infix_at im1 a t2 e)))))))))

;; nonn_part_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (= (nonn_part im1 a op1 s t2) (filter a (result2 im1 a op1 t2) s)))))

;; result_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (t2 uni) (e uni))
  (= (= (tb2t (infix_at bool a (result2 im1 a op1 t2) e)) true)
  (not (neutral im1 op1 (infix_at im1 a t2 e)))))))

;; result_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result2 im1 a x x1)))))

;; nonn_part_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (nonn_part im1 a x x1 x2)))))

;; int_iterate_map_auto
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (i Int) (j Int) (f (Array Int Int)) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset i j)))
  (= (int_iterate im1 op1 t2 i j) (int_iterate im1 op1 (fc16 im1 f t2) i j))))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f (Array Int Int)) (t2 uni) (b Int))
  (= (infix_at im1 int (fc16 im1 f t2) (t2tb2 b)) (infix_at im1 int t2
                                                  (infix_at int int (t2tb8 f)
                                                  (t2tb2 b)))))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x (Array Int Int)) (x1 uni)) (sort (infix_mngt int im1)
  (fc16 im1 x x1)))))

;; int_iterate_transl
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int))
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 (fc15 im1 f k) (- i k)
                                 (- j k)))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (k Int) (b Int))
  (= (infix_at im1 int (fc15 im1 f k) (t2tb2 b)) (infix_at im1 int f
                                                 (t2tb2 (+ b k)))))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 Int)) (sort (infix_mngt int im1) (fc15 im1 x x1)))))

;; int_iterate_map
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (i Int) (j Int) (k Int) (l Int) (f (Array Int Int))
  (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (p_bijective int int (t2tb8 f) (t2tb1 (to_fset i j))
  (t2tb1 (to_fset k l)))
  (= (int_iterate im1 op1 t2 k l) (int_iterate im1 op1 (fc14 im1 f t2) i j))))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f (Array Int Int)) (t2 uni) (b Int))
  (= (infix_at im1 int (fc14 im1 f t2) (t2tb2 b)) (infix_at im1 int t2
                                                  (infix_at int int (t2tb8 f)
                                                  (t2tb2 b)))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb8 (tb2t8 j)) j) :pattern ((t2tb8 (tb2t8 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int Int)))
  (! (= (tb2t8 (t2tb8 i)) i) :pattern ((t2tb8 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int Int))) (sort (infix_mngt int int) (t2tb8 x))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x (Array Int Int)) (x1 uni)) (sort (infix_mngt int im1)
  (fc14 im1 x x1)))))

;; int_iterate_eq_func
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (i Int) (j Int) (f uni) (g uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (p_injective im1 int f (t2tb1 (to_fset i j)))
  (=> (p_injective im1 int g (t2tb1 (to_fset i j)))
  (=>
  (= (map1 im1 int f (t2tb1 (to_fset i j))) (map1 im1 int g
                                            (t2tb1 (to_fset i j))))
  (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 g i j))))))))))

;; int_iterate_left_right
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (l Int) (k Int) (h1 Int))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (and (<= l k) (<= k h1))
  (= (int_iterate im1 op1 f l k) (int_iterate im1 op1 (fc13 im1 f l h1)
                                 (+ (- h1 k) l) h1))))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((f uni) (l Int) (h1 Int) (a Int))
  (= (infix_at im1 int (fc13 im1 f l h1) (t2tb2 a)) (infix_at im1 int f
                                                    (t2tb2
                                                    (+ (- h1 (+ a 1)) l)))))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (infix_mngt int im1)
  (fc13 im1 x x1 x2)))))

;; int_iterate_eq
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (i Int) (j Int))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j))
  (= (infix_at im1 int f (t2tb2 k)) (infix_at im1 int g (t2tb2 k)))))
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 f i j) (int_iterate im1 op1 g i j)))))))

;; int_iterate_attr_comm
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((op1 uni) (op2 uni) (t2 uni) (f uni) (i Int) (j Int))
  (=>
  (forall ((x Int))
  (forall ((y uni))
  (=> (sort im1 y)
  (= (infix_at im2 im2
     (infix_at (infix_mngt im2 im2) im2 op2
     (infix_at im2 im1 f (infix_at im1 int t2 (t2tb2 x))))
     (infix_at im2 im1 f y)) (infix_at im2 im1 f
                             (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 int t2 (t2tb2 x))) y))))))
  (=> (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
  (=> (iterable im1 op1)
  (=> (iterable im2 op2)
  (= (infix_at im2 im1 f (int_iterate im1 op1 t2 i j)) (int_iterate im2 op2
                                                       (fc12 im2 im1 t2 f) i
                                                       j)))))))))

;; fc_def
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((t2 uni) (f uni) (e Int))
  (= (infix_at im2 int (fc12 im2 im1 t2 f) (t2tb2 e)) (infix_at im2 im1 f
                                                      (infix_at im1 int t2
                                                      (t2tb2 e)))))))

;; fc_sort
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt int im2) (fc12 im2 im1 x x1)))))

;; int_iterate_attr
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((op1 uni) (op2 uni) (t2 uni) (f uni) (i Int) (j Int))
  (=>
  (forall ((x Int))
  (forall ((y uni))
  (=> (sort im1 y)
  (= (infix_at im2 im2
     (infix_at (infix_mngt im2 im2) im2 op2
     (infix_at im2 im1 f (infix_at im1 int t2 (t2tb2 x))))
     (infix_at im2 im1 f y)) (infix_at im2 im1 f
                             (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 int t2 (t2tb2 x))) y))))))
  (=> (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
  (=> (iterable im1 op1)
  (=> (iterable im2 op2)
  (= (int_iterate im2 op2 (fc11 im2 im1 t2 f) i j) (infix_at im2 im1 f
                                                   (int_iterate im1 op1 t2 i
                                                   j))))))))))

;; fc_def
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((t2 uni) (f uni) (e Int))
  (= (infix_at im2 int (fc11 im2 im1 t2 f) (t2tb2 e)) (infix_at im2 im1 f
                                                      (infix_at im1 int t2
                                                      (t2tb2 e)))))))

;; fc_sort
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt int im2) (fc11 im2 im1 x x1)))))

;; int_iterate_attr_no_f
  (assert
  (forall ((im1 ty) (im2 ty))
  (forall ((op1 uni) (op2 uni) (t11 uni) (t2 uni) (f uni) (i Int) (j Int))
  (=>
  (forall ((x Int))
  (forall ((y uni))
  (=> (sort im1 y)
  (= (infix_at im2 im2
     (infix_at (infix_mngt im2 im2) im2 op2 (infix_at im2 int t2 (t2tb2 x)))
     (infix_at im2 im1 f y)) (infix_at im2 im1 f
                             (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 int t11 (t2tb2 x))) y))))))
  (=> (= (infix_at im2 im1 f (neutral_elt im1 op1)) (neutral_elt im2 op2))
  (=> (iterable im1 op1)
  (=> (iterable im2 op2)
  (=>
  (forall ((i1 Int))
  (= (infix_at im2 im1 f (infix_at im1 int t11 (t2tb2 i1))) (infix_at im2 
                                                            int t2
                                                            (t2tb2 i1))))
  (= (int_iterate im2 op2 t2 i j) (infix_at im2 im1 f
                                  (int_iterate im1 op1 t11 i j)))))))))))

;; int_iterate_comp_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (i Int) (j Int))
  (=> (iterable im1 op1)
  (=> (op_neutral_right im1 op1 (neutral_elt im1 op1))
  (=> (commut im1 op1)
  (= (int_iterate im1 op1 (fc10 im1 op1 f g) i j) (infix_at im1 im1
                                                  (infix_at
                                                  (infix_mngt im1 im1) im1
                                                  op1
                                                  (int_iterate im1 op1 f i j))
                                                  (int_iterate im1 op1 g i j)))))))))

;; fc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (k Int))
  (= (infix_at im1 int (fc10 im1 op1 f g) (t2tb2 k)) (infix_at im1 im1
                                                     (infix_at
                                                     (infix_mngt im1 im1) im1
                                                     op1
                                                     (infix_at im1 int f
                                                     (t2tb2 k)))
                                                     (infix_at im1 int g
                                                     (t2tb2 k)))))))

;; fc_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt int im1)
  (fc10 im1 x x1 x2)))))

;; int_iterate_transitivity
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (k Int) (j Int))
  (=> (iterable im1 op1)
  (=> (op_neutral_left im1 op1 (neutral_elt im1 op1))
  (=> (and (<= i k) (<= k j))
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (int_iterate im1 op1 f i k))
                                 (int_iterate im1 op1 f k j)))))))))

;; int_iterate_right_extension
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (iterable im1 op1)
  (=> (< i j)
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (int_iterate im1 op1 f i (- j 1)))
                                 (infix_at im1 int f (t2tb2 (- j 1))))))))))

;; int_iterate_to_iterate
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (int_iterate im1 op1 f i j) (iterate im1 int op1 (t2tb1 (to_fset i j))
                                 f)))))))

;; int_iterate_def_plus_one_com
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (< i j)
  (=> (iterable im1 op1)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1 (infix_at im1 int f (t2tb2 i)))
     (int_iterate im1 op1 f (+ i 1) j)) (int_iterate im1 op1 f i j)))))))

;; int_iterate_cardone
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (= j (+ i 1))
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 f i j) (infix_at im1 int f (t2tb2 i))))))))

;; int_iterate_def_plus_one
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (< i j)
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (infix_at im1 int f (t2tb2 i)))
                                 (int_iterate im1 op1 f (+ i 1) j))))))))

;; int_iterate_def_empty
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (<= j i)
  (=> (iterable im1 op1)
  (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1)))))))

;; iterate_eq_func
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f1 uni) (f2 uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (p_injective im1 a f1 s)
  (=> (p_injective im1 a f2 s)
  (=> (= (map1 im1 a f1 s) (map1 im1 a f2 s))
  (= (iterate im1 a op1 s f1) (iterate im1 a op1 s f2))))))))))

;; iterate_cartesian_product
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (s2 uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 a op1 s1 (fc8 im1 b a op1 s2 f)) (iterate im1 (tuple21 a b)
                                                   op1
                                                   (cartesian_product b a s1
                                                   s2) (fc9 im1 b a f))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 a b) (fc9 im1 b a f) o) (infix_at im1 b
                                                    (infix_at
                                                    (infix_mngt b im1) a f
                                                    (fir b a o)) (sec b a o))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s2 uni) (f uni) (a1 uni))
  (= (infix_at im1 a (fc8 im1 b a op1 s2 f) a1) (iterate im1 b op1 s2
                                                (infix_at (infix_mngt b im1)
                                                a f a1))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc9 im1 b a x)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a im1)
  (fc8 im1 b a x x1 x2)))))

;; injec_iterate
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (a1 uni) (s uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (iterate im1 b op1 s (infix_at (infix_mngt b im1) a f a1)) (iterate im1
                                                                (tuple21 a b)
                                                                op1
                                                                (cartesian_product
                                                                b a
                                                                (add a a1
                                                                (empty a)) s)
                                                                (fc7 im1 b a
                                                                f))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (o uni))
  (= (infix_at im1 (tuple21 a b) (fc7 im1 b a f) o) (infix_at im1 b
                                                    (infix_at
                                                    (infix_mngt b im1) a f
                                                    (fir b a o)) (sec b a o))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni)) (sort (infix_mngt (tuple21 a b) im1) (fc7 im1 b a x)))))

;; iterate_cardzero
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (= (cardinal a s) 0)
  (= (iterate im1 a op1 s t2) (neutral_elt im1 op1))))))))

;; iterate_cardone
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (= (cardinal a s) 1)
  (= (iterate im1 a op1 s t2) (infix_at im1 a t2 (element a s)))))))))

;; iterate_map
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (p_injective a b f s)
  (= (iterate im1 a op1 (map1 a b f s) t2) (iterate im1 b op1 s
                                           (fc6 im1 b a f t2)))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((f uni) (t2 uni) (b1 uni))
  (= (infix_at im1 b (fc6 im1 b a f t2) b1) (infix_at im1 a t2
                                            (infix_at a b f b1))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (im1 ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt b im1) (fc6 im1 b a x x1)))))

;; iterate_eq
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (g uni))
  (=>
  (forall ((x uni))
  (=> (sort a x)
  (=> (mem a x s) (= (infix_at im1 a f x) (infix_at im1 a g x)))))
  (=> (commut im1 op1)
  (=> (iterable im1 op1) (= (iterate im1 a op1 s f) (iterate im1 a op1 s g))))))))

;; iterate_disjoint_transitivity
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (s2 uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (= (inter a s1 s2) (empty a))
  (= (iterate im1 a op1 (union1 a s1 s2) t2) (infix_at im1 im1
                                             (infix_at (infix_mngt im1 im1)
                                             im1 op1
                                             (iterate im1 a op1 s1 t2))
                                             (iterate im1 a op1 s2 t2)))))))))

;; iterate_transitivity
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (po1 uni) (s1 uni) (s2 uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
  (= (iterate im1 a op1 (union1 a s1 s2) f) (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 po1
                                            (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 op1 (iterate im1 a op1 s1 f))
                                            (iterate im1 a op1 s2 f)))
                                            (iterate im1 a op1
                                            (inter a s1 s2) f)))))))))

;; iterate_comp_iterate_com
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (f uni) (g uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1 (iterate im1 a op1 s1 f))
     (iterate im1 a op1 s1 g)) (iterate im1 a op1 s1 (fc5 im1 a op1 f g))))))))

;; fc_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (k uni))
  (= (infix_at im1 a (fc5 im1 a op1 f g) k) (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 op1 (infix_at im1 a f k))
                                            (infix_at im1 a g k))))))

;; fc_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a im1)
  (fc5 im1 a x x1 x2)))))

;; iterate_comp_iterate
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s1 uni) (f uni) (g uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (assoc im1 op1)
  (= (iterate im1 a op1 s1 (fc4 im1 a op1 f g)) (infix_at im1 im1
                                                (infix_at
                                                (infix_mngt im1 im1) im1 op1
                                                (iterate im1 a op1 s1 f))
                                                (iterate im1 a op1 s1 g)))))))))

;; fc_def
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (f uni) (g uni) (k uni))
  (= (infix_at im1 a (fc4 im1 a op1 f g) k) (infix_at im1 im1
                                            (infix_at (infix_mngt im1 im1)
                                            im1 op1 (infix_at im1 a f k))
                                            (infix_at im1 a g k))))))

;; fc_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a im1)
  (fc4 im1 a x x1 x2)))))

;; choose_any
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (t2 uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (mem a t2 s)
  (= (iterate im1 a op1 s f) (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 a f t2))
                             (iterate im1 a op1 (remove a t2 s) f)))))))))

;; iterate_def_choose
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni))
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (not (is_empty a s))
  (= (iterate im1 a op1 s f) (infix_at im1 im1
                             (infix_at (infix_mngt im1 im1) im1 op1
                             (infix_at im1 a f (choose a s)))
                             (iterate im1 a op1 (remove a (choose a s) s) f)))))))))

;; iterate_remove
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (x uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (inverse_tuple im1 op1 (po_closure im1) (neutral_elt im1 op1))
  (=> (mem a x s)
  (= (iterate im1 a op1 (remove a x s) f) (po im1 (iterate im1 a op1 s f)
                                          (infix_at im1 a f x))))))))))

;; po_closure_def
  (assert
  (forall ((im1 ty))
  (forall ((y uni) (y1 uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 (po_closure im1) y)
     y1) (po im1 y y1)))))

;; po_closure_sort
  (assert
  (forall ((im1 ty)) (sort (infix_mngt im1 (infix_mngt im1 im1))
  (po_closure im1))))

;; iterate_add
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (f uni) (x uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (not (mem a x s))
  (= (iterate im1 a op1 (add a x s) f) (infix_at im1 im1
                                       (infix_at (infix_mngt im1 im1) im1 op1
                                       (infix_at im1 a f x))
                                       (iterate im1 a op1 s f)))))))))

;; iterate_empty
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni) (s uni) (t2 uni))
  (=> (is_empty a s)
  (=> (commut im1 op1)
  (=> (iterable im1 op1) (= (iterate im1 a op1 s t2) (neutral_elt im1 op1))))))))

;; set_bijective_auto
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem a (infix_at a a f e) s))))
  (=>
  (forall ((eqt uni))
  (=> (sort a eqt)
  (=> (mem a eqt s)
  (exists ((e uni)) (and (mem a e s) (= (infix_at a a f e) eqt))))))
  (p_bijective a a f s s))))))

;; bij_equal_card
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (= (cardinal a s) (cardinal b (map1 b a f s))) (p_bijective b a f s
  (map1 b a f s))))))

;; bijective_eq_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (forall ((g uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
  (p_bijective b a g s sqt)))))))

;; bijective_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
  (p_bijective b a g s sqt))))))

;; get_bijective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (and
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (and
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni))
  (and (sort a e) (and (mem a e s) (= (infix_at b a f e) eqt)))))))
  (= (cardinal a s) (cardinal b sqt)))))))))

;; bijective_image
  (assert
  (forall ((a ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (sort (set1 a) sqt)
  (=> (p_bijective a a f s sqt)
  (and (= (cardinal a s) (cardinal a sqt)) (= sqt (map1 a a f s))))))))

;; bijectivity_is_transitive
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((f uni) (g uni) (s uni) (sqt uni) (sqtqt uni))
  (=> (p_bijective b a f s sqt)
  (=> (p_bijective c b g sqt sqtqt) (p_bijective c a (fc3 c b a f g) s
  sqtqt))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((f uni) (g uni) (k uni))
  (= (infix_at c a (fc3 c b a f g) k) (infix_at c b g (infix_at b a f k))))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a c) (fc3 c b a x x1)))))

;; set_bijective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (sort (set1 b) sqt)
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni)) (and (mem a e s) (= (infix_at b a f e) eqt))))))
  (and (p_bijective b a f s sqt) (= (map1 b a f s) sqt)))))))))

;; bijective_is_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt) (p_surjective b a f s sqt)))))

;; bijective_is_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_bijective b a f s sqt) (p_injective b a f s)))))

;; p_bijective_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (= (p_bijective b a f s sqt)
  (and (p_injective_in b a f s sqt) (p_surjective b a f s sqt))))))

;; image_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (sort (set1 b) sqt)
  (=> (p_surjective b a f s sqt) (= (map1 b a f s) sqt))))))

;; get_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_surjective b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni))
  (and (sort a e) (and (mem a e s) (= (infix_at b a f e) eqt))))))))))))

;; set_surjective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (=>
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni)) (and (mem a e s) (= (infix_at b a f e) eqt))))))
  (p_surjective b a f s sqt))))))

;; p_surjective_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (and
  (=> (p_surjective b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni))
  (and (sort a e) (and (mem a e s) (= (infix_at b a f e) eqt)))))))))
  (=>
  (and
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (forall ((eqt uni))
  (=> (sort b eqt)
  (=> (mem b eqt sqt)
  (exists ((e uni)) (and (mem a e s) (= (infix_at b a f e) eqt)))))))
  (p_surjective b a f s sqt))))))

;; get_injective_in
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=> (p_injective_in b a f s sqt)
  (and (forall ((e uni)) (=> (mem a e s) (mem b (infix_at b a f e) sqt)))
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt))))))))))))))

;; set_injective_in
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (mem b (infix_at b a f e) sqt))))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (p_injective b a f s))))))

;; get_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (p_injective b a f s)
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))))))

;; card_image_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (p_injective b a f s) (= (cardinal b (map1 b a f s)) (cardinal a s))))))

;; card_image
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni)) (<= (cardinal b (map1 b a f s)) (cardinal a s)))))

;; image_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (forall ((a1 uni))
  (=> (sort b a1)
  (and
  (=> (mem b a1 (map1 b a f s))
  (exists ((antec_a uni))
  (and (sort a antec_a)
  (and (mem a antec_a s) (= a1 (infix_at b a f antec_a))))))
  (=>
  (exists ((antec_a uni))
  (and (mem a antec_a s) (= a1 (infix_at b a f antec_a)))) (mem b a1
  (map1 b a f s)))))))))

;; set_injective
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=>
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))
  (p_injective b a f s)))))

;; get_equal_func
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni))
  (=> (equal_func b a f g)
  (forall ((e uni)) (= (infix_at b a f e) (infix_at b a g e)))))))

;; set_equal_func
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni))
  (=> (sort (infix_mngt a b) f)
  (=> (sort (infix_mngt a b) g)
  (=>
  (forall ((e uni))
  (=> (sort a e) (= (infix_at b a f e) (infix_at b a g e)))) (= f g)))))))

;; equal_func_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni))
  (and
  (=> (equal_func b a f g)
  (forall ((e uni)) (= (infix_at b a f e) (infix_at b a g e))))
  (=>
  (forall ((e uni))
  (=> (sort a e) (= (infix_at b a f e) (infix_at b a g e)))) (equal_func b a
  f g))))))

;; p_injective_in_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (sqt uni))
  (and
  (=> (p_injective_in b a f s sqt)
  (forall ((e uni))
  (=> (mem a e s)
  (and (mem b (infix_at b a f e) sqt)
  (forall ((e1 uni) (eqt uni))
  (=> (sort a e1)
  (=> (sort a eqt)
  (=> (mem a e1 s)
  (=> (mem a eqt s)
  (=> (not (= e1 eqt)) (not (= (infix_at b a f e1) (infix_at b a f eqt)))))))))))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (and (mem b (infix_at b a f e) sqt)
  (forall ((e1 uni) (eqt uni))
  (=> (sort a e1)
  (=> (sort a eqt)
  (=> (mem a e1 s)
  (=> (mem a eqt s)
  (=> (not (= e1 eqt)) (not (= (infix_at b a f e1) (infix_at b a f eqt)))))))))))))
  (p_injective_in b a f s sqt))))))

;; cardzero
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (forall ((b uni)) (=> (sort a b) (not (mem a b s))))
  (= (cardinal a s) 0)))))

;; set_cardone_elt
  (assert
  (forall ((a ty))
  (forall ((s uni) (a1 uni))
  (=> (sort a a1)
  (=> (< 0 (cardinal a s))
  (=> (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
  (= (cardinal a s) 1)))))))

;; get_cardone
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (= (cardinal a s) 1)
  (exists ((a1 uni))
  (and (sort a a1)
  (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))))))))

;; set_cardone
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (< 0 (cardinal a s))
  (=>
  (exists ((a1 uni))
  (and (sort a a1)
  (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))))
  (= (cardinal a s) 1))))))

;; cardone
  (assert
  (forall ((a ty))
  (forall ((s uni) (a1 uni))
  (=> (sort a a1)
  (=> (forall ((b uni)) (=> (sort a b) (= (mem a b s) (= b a1))))
  (=> (< 0 (cardinal a s)) (and (= (cardinal a s) 1) (= (element a s) a1))))))))

;; element_def
  (assert
  (forall ((a ty))
  (forall ((s uni)) (=> (= (cardinal a s) 1) (= (element a s) (choose a s))))))

;; element_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (element a x)))))

;; int_int_iterate_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int) (k Int) (l Int))
  (=> (iterable im1 op1)
  (ite (<= j i) (= (int_int_iterate im1 op1 f i j k l) (neutral_elt im1 op1))
  (= (int_int_iterate im1 op1 f i j k l) (infix_at im1 im1
                                         (infix_at (infix_mngt im1 im1) im1
                                         op1
                                         (int_iterate im1 op1
                                         (infix_at (infix_mngt int im1)
                                         (infix_mngt int im1)
                                         (identity (infix_mngt int im1))
                                         (infix_at (infix_mngt int im1) 
                                         int f (t2tb2 i))) k l))
                                         (int_int_iterate im1 op1 f (+ i 1) j
                                         k l))))))))

;; identity_def
  (assert
  (forall ((a ty))
  (forall ((y uni)) (=> (sort a y) (= (infix_at a a (identity a) y) y)))))

;; identity_sort
  (assert (forall ((a ty)) (sort (infix_mngt a a) (identity a))))

;; int_int_iterate_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int) (x4 Int) (x5 Int)) (sort im1
  (int_int_iterate im1 x x1 x2 x3 x4 x5)))))

;; int_iterate_spec
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (iterable im1 op1)
  (=> (<= j i) (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1)))))))

;; int_iterate_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (f uni) (i Int) (j Int))
  (=> (iterable im1 op1)
  (ite (<= j i) (= (int_iterate im1 op1 f i j) (neutral_elt im1 op1))
  (= (int_iterate im1 op1 f i j) (infix_at im1 im1
                                 (infix_at (infix_mngt im1 im1) im1 op1
                                 (infix_at im1 int f (t2tb2 i)))
                                 (int_iterate im1 op1 f (+ i 1) j))))))))

;; int_iterate_sort
  (assert
  (forall ((im1 ty))
  (forall ((x uni) (x1 uni) (x2 Int) (x3 Int)) (sort im1
  (int_iterate im1 x x1 x2 x3)))))

;; substract_comm
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (a uni) (b uni) (c uni))
  (=> (sort im1 b)
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
  (and
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) a) b)
  (and
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) a)) a) b)
  (and
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a)
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 b) c)) 
  (infix_at im1 im1
  (infix_at (infix_mngt im1 im1) im1 op1
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b)) c))
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 b) c)))))))))))))

;; unic
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (a uni) (b uni) (c uni))
  (=> (sort im1 b)
  (=> (sort im1 c)
  (=> (iterable im1 op1)
  (=> (commut im1 op1)
  (=>
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    a) c))
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1)) (= b c))))))))))

;; minus_zero
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (a uni))
  (=> (sort im1 a)
  (=> (iterable im1 op1)
  (=> (inverse_tuple im1 op1 po1 (neutral_elt im1 op1))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a)
     (neutral_elt im1 op1)) a)))))))

;; Iterate_add
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni))
  (forall ((s uni))
  (forall ((f uni))
  (forall ((x uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (not (mem a x s))
  (= (iterate im1 a op1 (add a x s) f) (infix_at im1 im1
                                       (infix_at (infix_mngt im1 im1) im1 op1
                                       (infix_at im1 a f x))
                                       (iterate im1 a op1 s f))))))))))))

;; Iterate_def_empty
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((op1 uni))
  (forall ((s uni))
  (forall ((f uni))
  (=> (commut im1 op1)
  (=> (iterable im1 op1)
  (=> (is_empty a s)
  (= (iterate im1 a op1 (empty a) f) (neutral_elt im1 op1))))))))))

;; iterate_sort
  (assert
  (forall ((a ty) (im1 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort im1 (iterate im1 a x x1 x2)))))

;; inverse_tuple_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (neutral1 uni))
  (= (inverse_tuple im1 op1 po1 neutral1)
  (and (opposite_n im1 op1 po1 neutral1)
  (and (opposite im1 op1 po1) (opposite_com im1 op1 po1)))))))

;; neutral_elt_spec
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (forall ((e uni))
  (=> (sort im1 e) (= (neutral im1 op1 e) (= (neutral_elt im1 op1) e)))))))

;; neutral_elt_sort
  (assert
  (forall ((im1 ty)) (forall ((x uni)) (sort im1 (neutral_elt im1 x)))))

;; iterates_
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral1 uni))
  (=> (op_neutral_left im1 op1 neutral1)
  (=> (op_neutral_right im1 op1 neutral1)
  (=> (op_assoc im1 op1)
  (and (iterates im1 op1 neutral1) (iterable im1 op1))))))))

;; iterable_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (iterable im1 op1)
  (exists ((e uni)) (and (sort im1 e) (iterates im1 op1 e))))
  (=> (exists ((e uni)) (iterates im1 op1 e)) (iterable im1 op1))))))

;; iterates_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral1 uni))
  (= (iterates im1 op1 neutral1)
  (and (op_neutral_left im1 op1 neutral1)
  (and (op_neutral_right im1 op1 neutral1) (op_assoc im1 op1)))))))

;; has_neutral_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (has_neutral im1 op1)
  (exists ((e uni)) (and (sort im1 e) (neutral im1 op1 e))))
  (=> (exists ((e uni)) (neutral im1 op1 e)) (has_neutral im1 op1))))))

;; set_neutral
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neut uni))
  (=> (op_neutral_left im1 op1 neut)
  (=> (op_neutral_right im1 op1 neut)
  (=> (op_assoc im1 op1) (neutral im1 op1 neut)))))))

;; neutral_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neut uni))
  (= (neutral im1 op1 neut)
  (and (op_neutral_left im1 op1 neut)
  (and (op_neutral_right im1 op1 neut) (op_assoc im1 op1)))))))

;; refl
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (a uni) (b uni))
  (=> (commut im1 op1)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    b) a))))))

;; opposite_com_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni))
  (and
  (=> (opposite_com im1 op1 po1)
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) b) a))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 po1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) b) a))))
  (opposite_com im1 op1 po1))))))

;; opposite_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni))
  (and
  (=> (opposite im1 op1 po1)
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b)) b) a))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b)) b) a))))
  (opposite im1 op1 po1))))))

;; inverse_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (inver1 uni))
  (and
  (=> (inverse im1 op1 po1 inver1)
  (forall ((a uni) (b uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    a)
                                                                    (infix_at
                                                                    im1 im1
                                                                    inver1 b)))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    a)
                                                                    (infix_at
                                                                    im1 im1
                                                                    inver1 b))))))
  (inverse im1 op1 po1 inver1))))))

;; opposite_n_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (po1 uni) (neutral1 uni))
  (=> (sort im1 neutral1)
  (and
  (=> (opposite_n im1 op1 po1 neutral1)
  (forall ((a uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) a) neutral1)))
  (=>
  (forall ((a uni))
  (=> (sort im1 a)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 po1 a) a) neutral1)))
  (opposite_n im1 op1 po1 neutral1)))))))

;; assoc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (assoc im1 op1)
  (forall ((a uni) (b uni) (c uni))
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c)))))
  (=>
  (forall ((a uni) (b uni) (c uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (=> (sort im1 c)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c))))))) (assoc
  im1 op1))))))

;; commut_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (commut im1 op1)
  (forall ((a uni) (b uni))
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    b) a))))
  (=>
  (forall ((a uni) (b uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) (infix_at
                                                                    im1 im1
                                                                    (infix_at
                                                                    (infix_mngt
                                                                    im1 im1)
                                                                    im1 op1
                                                                    b) a)))))
  (commut im1 op1))))))

;; op_neutral_left_comm_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral1 uni))
  (=> (sort im1 neutral1)
  (= (op_neutral_left_comm im1 op1 neutral1)
  (forall ((a uni))
  (=> (sort im1 a)
  (=>
  (forall ((b uni))
  (=> (sort im1 b)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b) b)))
  (= a neutral1)))))))))

;; op_assoc_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni))
  (and
  (=> (op_assoc im1 op1)
  (forall ((a uni) (b uni) (c uni))
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c)))))
  (=>
  (forall ((a uni) (b uni) (c uni))
  (=> (sort im1 a)
  (=> (sort im1 b)
  (=> (sort im1 c)
  (= (infix_at im1 im1
     (infix_at (infix_mngt im1 im1) im1 op1
     (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a) b)) c) 
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 a)
  (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 b) c)))))))
  (op_assoc im1 op1))))))

;; op_neutral_right_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral1 uni))
  (= (op_neutral_right im1 op1 neutral1)
  (forall ((e uni))
  (=> (sort im1 e)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 e) neutral1) e)))))))

;; op_neutral_left_def
  (assert
  (forall ((im1 ty))
  (forall ((op1 uni) (neutral1 uni))
  (= (op_neutral_left im1 op1 neutral1)
  (forall ((e uni))
  (=> (sort im1 e)
  (= (infix_at im1 im1 (infix_at (infix_mngt im1 im1) im1 op1 neutral1) e) e)))))))

;; inver_sort
  (assert (forall ((im1 ty)) (forall ((x uni)) (sort im1 (inver im1 x)))))

;; po_sort
  (assert
  (forall ((im1 ty)) (forall ((x uni) (x1 uni)) (sort im1 (po im1 x x1)))))

;; op_sort
  (assert
  (forall ((im1 ty)) (forall ((x uni) (x1 uni)) (sort im1 (op im1 x x1)))))

;; get_to_indexes_mem
  (assert
  (forall ((a ty))
  (forall ((m uni) (o (tuple2 Int Int)))
  (=> (mem (tuple21 int int) (t2tb7 o) (t2tb6 (to_indexes a m)))
  (and
  (and (<= 0 (tb2t2 (fir int int (t2tb7 o))))
  (< (tb2t2 (fir int int (t2tb7 o))) (rows a m)))
  (and (<= 0 (tb2t2 (sec int int (t2tb7 o))))
  (< (tb2t2 (sec int int (t2tb7 o))) (columns a m))))))))

;; set_to_indexes_mem
  (assert
  (forall ((a ty))
  (forall ((m uni) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows a m)))
  (=> (and (<= 0 j) (< j (columns a m))) (mem (tuple21 int int)
  (Tuple2 int int (t2tb2 i) (t2tb2 j)) (t2tb6 (to_indexes a m))))))))

;; to_indexes_spec
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (= (cardinal (tuple21 int int) (t2tb6 (to_indexes a m))) (* (rows a m) 
  (columns a m))))))

;; to_indexes_def
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (= (to_indexes a m) (tb2t6
                      (cartesian_product int int
                      (t2tb1 (to_fset 0 (rows a m)))
                      (t2tb1 (to_fset 0 (columns a m)))))))))

;; assert_make_c
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (< 0 r) (=> (< 0 c) (= (columns a (make_f a r c f)) c))))))

;; assert_make_r
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (< 0 r) (=> (< 0 c) (= (rows a (make_f a r c f)) r))))))

;; assert_make
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni) (i Int) (j Int))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c))
  (= (get a (make_f a r c f) i j) (infix_at a int
                                  (infix_at (infix_mngt int a) int f
                                  (t2tb2 i)) (t2tb2 j))))))))

;; make_f_spec
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (f uni))
  (=> (< 0 r)
  (=> (< 0 c)
  (and (= (rows a (make_f a r c f)) r)
  (and (= (columns a (make_f a r c f)) c)
  (forall ((i Int) (j Int))
  (= (get a (make_f a r c f) i j) (infix_at a int
                                  (infix_at (infix_mngt int a) int f
                                  (t2tb2 i)) (t2tb2 j)))))))))))

;; make_f_sort
  (assert
  (forall ((a ty))
  (forall ((x Int) (x1 Int) (x2 uni)) (sort (matrix1 a) (make_f a x x1 x2)))))

;; set_columns
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (valid_index a a1 r c)
  (= (columns a (set3 a a1 r c v)) (columns a a1))))))

;; set_rows
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (valid_index a a1 r c) (= (rows a (set3 a a1 r c v)) (rows a a1))))))

;; set_values
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (sort a v)
  (=> (valid_index a a1 r c)
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j)
  (= (get a (set3 a a1 r c v) i j) (ite (and (= i r) (= j c)) v
                                   (get a a1 i j))))))))))

;; get_valid_index
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int))
  (=> (= (rows a a1) r)
  (=> (= (columns a a1) c)
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j) (and (<= 0 i) (< i r))))
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j) (and (<= 0 j) (< j c))))))))))

;; set_valid_index
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (i Int) (j Int))
  (=> (and (<= 0 i) (< i (rows a a1)))
  (=> (and (<= 0 j) (< j (columns a a1))) (valid_index a a1 i j))))))

;; set_spec
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int) (v uni))
  (=> (sort a v)
  (=> (valid_index a a1 r c)
  (and (= (rows a (set3 a a1 r c v)) (rows a a1))
  (and (= (columns a (set3 a a1 r c v)) (columns a a1))
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index a a1 i j)
  (= (get a (set3 a a1 r c v) i j) (ite (and (= i r) (= j c)) v
                                   (get a a1 i j)))))
  (and (= (get a (set3 a a1 r c v) r c) v)
  (and
  (forall ((i Int) (j Int))
  (=> (valid_index a (set3 a a1 r c v) i j)
  (=> (not (= i r)) (= (get a (set3 a a1 r c v) i j) (get a a1 i j)))))
  (forall ((i Int) (j Int))
  (=> (valid_index a (set3 a a1 r c v) i j)
  (=> (not (= j c)) (= (get a (set3 a a1 r c v) i j) (get a a1 i j)))))))))))))))

;; set_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int) (x3 uni)) (sort (matrix1 a)
  (set3 a x x1 x2 x3)))))

;; mat_indices_spec
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (forall ((i Int) (j Int))
  (= (valid_index a m i j) (mem (tuple21 int int)
  (Tuple2 int int (t2tb2 i) (t2tb2 j)) (t2tb6 (mat_indices a m))))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb7 (tb2t7 j)) j) :pattern ((t2tb7 (tb2t7 j))) )))

;; BridgeL
  (assert
  (forall ((i (tuple2 Int Int)))
  (! (= (tb2t7 (t2tb7 i)) i) :pattern ((t2tb7 i)) )))

;; t2tb_sort
  (assert (forall ((x (tuple2 Int Int))) (sort (tuple21 int int) (t2tb7 x))))

;; mat_indices_def
  (assert
  (forall ((a ty))
  (forall ((m uni))
  (= (mat_indices a m) (tb2t6
                       (cartesian_product int int
                       (t2tb1 (to_fset 0 (rows a m)))
                       (t2tb1 (to_fset 0 (columns a m)))))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb6 (tb2t6 j)) j) :pattern ((t2tb6 (tb2t6 j))) )))

;; BridgeL
  (assert
  (forall ((i (set (tuple2 Int Int))))
  (! (= (tb2t6 (t2tb6 i)) i) :pattern ((t2tb6 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (set (tuple2 Int Int)))) (sort (set1 (tuple21 int int))
  (t2tb6 x))))

;; make_value
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (i Int) (j Int) (v uni))
  (=> (sort a v)
  (=> (and (< 0 r) (< 0 c))
  (=> (and (<= 0 i) (< i r))
  (=> (and (<= 0 j) (< j c)) (= (get a (make a r c v) i j) v))))))))

;; make_spec
  (assert
  (forall ((a ty))
  (forall ((r Int) (c Int) (v uni))
  (=> (sort a v)
  (=> (and (< 0 r) (< 0 c))
  (and (= (rows a (make a r c v)) r)
  (and (= (columns a (make a r c v)) c)
  (forall ((i Int) (j Int))
  (=> (and (and (<= 0 i) (< i r)) (and (<= 0 j) (< j c)))
  (= (get a (make a r c v) i j) v))))))))))

;; make_sort
  (assert
  (forall ((a ty))
  (forall ((x Int) (x1 Int) (x2 uni)) (sort (matrix1 a) (make a x x1 x2)))))

;; get_spec
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int))
  (= (get a a1 r c) (infix_at a int
                    (infix_at (infix_mngt int a) int (elts a a1) (t2tb2 r))
                    (t2tb2 c))))))

;; get_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort a (get a x x1 x2)))))

;; equal_size_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni))
  (= (equal_size a a1 b)
  (and (= (rows a a1) (rows a b)) (= (columns a a1) (columns a b)))))))

;; valid_index_def
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (r Int) (c Int))
  (= (valid_index a a1 r c)
  (and (and (<= 0 r) (< r (rows a a1))) (and (<= 0 c) (< c (columns a a1))))))))

;; matrix'invariant
  (assert
  (forall ((a ty))
  (forall ((self uni))
  (! (and (< 0 (rows a self)) (< 0 (columns a self))) :pattern ((columns a
                                                                self)) :pattern (
  (rows a self)) ))))

;; elts_sort
  (assert
  (forall ((a ty))
  (forall ((x uni)) (sort (infix_mngt int (infix_mngt int a)) (elts a x)))))

;; set_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (infix_mngt a b)
  (set2 b a x x1 x2)))))

;; bound_depth
  (assert
  (forall ((c quantum_circuit) (cqt quantum_circuit))
  (=> (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms c)))
  (=> (sequence_correct c) (<= (depth cqt) (depth c))))))

;; iter_parallel_plus_one
  (assert
  (forall ((i Int) (j Int) (f (Array Int quantum_circuit)))
  (=> (< i (- j 1))
  (= (iter_parallel i j f) (Parallel (iter_parallel i (- j 1) f)
                           (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 (- j 1)))))))))

;; iter_parallel_zero
  (assert
  (forall ((i Int) (j Int) (f (Array Int quantum_circuit)))
  (=> (= i (- j 1))
  (= (iter_parallel i j f) (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 i)))))))

;; iter_parallel_def
  (assert
  (forall ((i Int) (j Int) (f (Array Int quantum_circuit)))
  (=> (< i j)
  (ite (= (- j i) 1)
  (= (iter_parallel i j f) (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 i))))
  (= (iter_parallel i j f) (Parallel (iter_parallel i (- j 1) f)
                           (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 (- j 1))))))))))

;; iter_sequence_plus_one
  (assert
  (forall ((i Int) (j Int) (f (Array Int quantum_circuit)))
  (=> (constant_depth int (t2tb1 (to_fset i j)) (t2tb5 f))
  (=> (< (+ i 1) j)
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j)) (sequence_correct
  (tb2t4 (infix_at quantum_circuit1 int (t2tb5 f) (t2tb2 k))))))
  (= (iter_sequence i j f) (Sequence
                           (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 i))) (iter_sequence (+ i 1) j f))))))))

;; iter_sequence_one
  (assert
  (forall ((i Int) (j Int) (f (Array Int quantum_circuit)))
  (=> (= j (+ i 1))
  (=> (sequence_correct
  (tb2t4 (infix_at quantum_circuit1 int (t2tb5 f) (t2tb2 i))))
  (= (iter_sequence i j f) (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 i))))))))

;; iter_sequence_spec
  (assert
  (forall ((i Int) (j Int) (f (Array Int quantum_circuit)))
  (=> (< i j)
  (=> (constant_depth int (t2tb1 (to_fset i j)) (t2tb5 f))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j)) (sequence_correct
  (tb2t4 (infix_at quantum_circuit1 int (t2tb5 f) (t2tb2 k))))))
  (and (sequence_correct (iter_sequence i j f))
  (= (depth (iter_sequence i j f)) (depth
                                   (tb2t4
                                   (infix_at quantum_circuit1 int (t2tb5 f)
                                   (t2tb2 i)))))))))))

;; iter_sequence_def
  (assert
  (forall ((i Int) (j Int) (f (Array Int quantum_circuit)))
  (=> (< i j)
  (=> (constant_depth int (t2tb1 (to_fset i j)) (t2tb5 f))
  (=>
  (forall ((k Int))
  (=> (and (<= i k) (< k j)) (sequence_correct
  (tb2t4 (infix_at quantum_circuit1 int (t2tb5 f) (t2tb2 k))))))
  (ite (= (- j i) 1)
  (= (iter_sequence i j f) (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 i))))
  (= (iter_sequence i j f) (Sequence
                           (tb2t4
                           (infix_at quantum_circuit1 int (t2tb5 f)
                           (t2tb2 i))) (iter_sequence (+ i 1) j f)))))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb5 (tb2t5 j)) j) :pattern ((t2tb5 (tb2t5 j))) )))

;; BridgeL
  (assert
  (forall ((i (Array Int quantum_circuit)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (Array Int quantum_circuit))) (sort
  (infix_mngt int quantum_circuit1) (t2tb5 x))))

;; subset_constant_depth
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (f uni))
  (=> (constant_depth a s f) (=> (subset1 a sqt s) (constant_depth a sqt f))))))

;; get_constant_depth
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=> (constant_depth a s f)
  (forall ((e uni))
  (=> (mem a e s)
  (= (depth (tb2t4 (infix_at quantum_circuit1 a f e))) (depth
                                                       (tb2t4
                                                       (infix_at
                                                       quantum_circuit1 a f
                                                       (choose a s)))))))))))

;; set_constant_depth
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (depth (tb2t4 (infix_at quantum_circuit1 a f e))) (depth
                                                       (tb2t4
                                                       (infix_at
                                                       quantum_circuit1 a f
                                                       (choose a s))))))))
  (constant_depth a s f)))))

;; constant_depth_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (f uni))
  (and
  (=> (constant_depth a s f)
  (forall ((e uni))
  (=> (mem a e s)
  (= (depth (tb2t4 (infix_at quantum_circuit1 a f e))) (depth
                                                       (tb2t4
                                                       (infix_at
                                                       quantum_circuit1 a f
                                                       (choose a s))))))))
  (=>
  (forall ((e uni))
  (=> (sort a e)
  (=> (mem a e s)
  (= (depth (tb2t4 (infix_at quantum_circuit1 a f e))) (depth
                                                       (tb2t4
                                                       (infix_at
                                                       quantum_circuit1 a f
                                                       (choose a s))))))))
  (constant_depth a s f))))))

;; sub_sequence_correct
  (assert
  (forall ((c quantum_circuit) (cqt quantum_circuit))
  (=> (sequence_correct c)
  (=> (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms c)))
  (sequence_correct cqt)))))

;; set_sequence_correct
  (assert
  (forall ((c quantum_circuit))
  (=>
  (or
  (or (exists ((x base_element)) (= c (Unit x)))
  (exists ((x quantum_circuit) (x1 quantum_circuit))
  (and (= c (Sequence x x1))
  (and (= (depth x) (depth x1))
  (and (sequence_correct x) (sequence_correct x1))))))
  (exists ((x quantum_circuit) (x1 quantum_circuit))
  (and (= c (Parallel x x1))
  (and (sequence_correct x) (sequence_correct x1))))) (sequence_correct c))))

;; sequence_correct_def
  (assert
  (and
  (and (forall ((x base_element)) (sequence_correct (Unit x)))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (= (sequence_correct (Sequence x x1))
  (and (= (depth x) (depth x1))
  (and (sequence_correct x) (sequence_correct x1))))))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (= (sequence_correct (Parallel x x1))
  (and (sequence_correct x) (sequence_correct x1))))))

;; depth_spec
  (assert (forall ((c quantum_circuit)) (<= 1 (depth c))))

;; depth_def
  (assert
  (and
  (and
  (forall ((x base_element))
  (let ((c (Unit x)))
  (and
  (and
  (and (=> (= x Identity) (= (depth c) 1))
  (=> (= x Hadamard) (= (depth c) 1)))
  (forall ((x1 Int)) (=> (= x (Cont_R x1)) (= (depth c) 2))))
  (=> (= x Swap) (= (depth c) 2)))))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (= (depth (Sequence x x1)) (depth x))))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (= (depth (Parallel x x1)) (+ (depth x) (depth x1))))))

;; transitive_subterms_gen
  (assert
  (forall ((c quantum_circuit))
  (forall ((cqt quantum_circuit) (cqtqt quantum_circuit))
  (=> (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms c)))
  (=> (mem quantum_circuit1 (t2tb4 cqtqt) (t2tb3 (subterms cqt))) (mem
  quantum_circuit1 (t2tb4 cqtqt) (t2tb3 (subterms c))))))))

;; transitive_subterms
  (assert
  (forall ((c quantum_circuit) (cqt quantum_circuit))
  (=> (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms c)))
  (forall ((cqtqt quantum_circuit))
  (=> (mem quantum_circuit1 (t2tb4 cqtqt) (t2tb3 (subterms cqt))) (mem
  quantum_circuit1 (t2tb4 cqtqt) (t2tb3 (subterms c))))))))

;; immediate_subterms
  (assert
  (and
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (let ((c (Sequence x x1)))
  (and (mem quantum_circuit1 (t2tb4 x) (t2tb3 (subterms c))) (mem
  quantum_circuit1 (t2tb4 x1) (t2tb3 (subterms c))))))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (let ((c (Parallel x x1)))
  (and (mem quantum_circuit1 (t2tb4 x) (t2tb3 (subterms c))) (mem
  quantum_circuit1 (t2tb4 x1) (t2tb3 (subterms c))))))))

;; self_subterms
  (assert
  (forall ((c quantum_circuit))
  (and (mem quantum_circuit1 (t2tb4 c) (t2tb3 (subterms c)))
  (forall ((cqt quantum_circuit))
  (=> (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms c)))
  (and
  (and (forall ((w base_element)) (=> (= c (Unit w)) (= cqt c)))
  (forall ((d quantum_circuit) (e quantum_circuit))
  (=> (= c (Sequence d e))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms d))))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms e))))
  (= cqt c))))))
  (forall ((d quantum_circuit) (e quantum_circuit))
  (=> (= c (Parallel d e))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms d))))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms e))))
  (= cqt c)))))))))))

;; self_subterms_pre
  (assert
  (forall ((c quantum_circuit) (cqt quantum_circuit))
  (=> (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms c)))
  (and
  (and (forall ((w base_element)) (=> (= c (Unit w)) (= cqt c)))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (=> (= c (Sequence x x1))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms x))))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms x1))))
  (= cqt c))))))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (=> (= c (Parallel x x1))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms x))))
  (=> (not (mem quantum_circuit1 (t2tb4 cqt) (t2tb3 (subterms x1))))
  (= cqt c)))))))))

;; subterms_def
  (assert
  (and
  (and
  (forall ((x base_element))
  (let ((c (Unit x)))
  (= (subterms c) (tb2t3
                  (add quantum_circuit1 (t2tb4 c) (empty quantum_circuit1))))))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (let ((c (Sequence x x1)))
  (= (subterms c) (tb2t3
                  (add quantum_circuit1 (t2tb4 c)
                  (union1 quantum_circuit1 (t2tb3 (subterms x))
                  (t2tb3 (subterms x1)))))))))
  (forall ((x quantum_circuit) (x1 quantum_circuit))
  (let ((c (Parallel x x1)))
  (= (subterms c) (tb2t3
                  (add quantum_circuit1 (t2tb4 c)
                  (union1 quantum_circuit1 (t2tb3 (subterms x))
                  (t2tb3 (subterms x1))))))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb4 (tb2t4 j)) j) :pattern ((t2tb4 (tb2t4 j))) )))

;; BridgeL
  (assert
  (forall ((i quantum_circuit))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; t2tb_sort
  (assert (forall ((x quantum_circuit)) (sort quantum_circuit1 (t2tb4 x))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb3 (tb2t3 j)) j) :pattern ((t2tb3 (tb2t3 j))) )))

;; BridgeL
  (assert
  (forall ((i (set quantum_circuit)))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; t2tb_sort
  (assert
  (forall ((x (set quantum_circuit))) (sort (set1 quantum_circuit1)
  (t2tb3 x))))

;; quantum_circuit_inversion
  (assert
  (forall ((u quantum_circuit))
  (or
  (or (= u (Unit (Unit_proj_1 u)))
  (= u (Sequence (Sequence_proj_1 u) (Sequence_proj_2 u))))
  (= u (Parallel (Parallel_proj_1 u) (Parallel_proj_2 u))))))

;; Parallel_proj_2_def
  (assert
  (forall ((u quantum_circuit) (u1 quantum_circuit))
  (= (Parallel_proj_2 (Parallel u u1)) u1)))

;; Parallel_proj_1_def
  (assert
  (forall ((u quantum_circuit) (u1 quantum_circuit))
  (= (Parallel_proj_1 (Parallel u u1)) u)))

;; Sequence_proj_2_def
  (assert
  (forall ((u quantum_circuit) (u1 quantum_circuit))
  (= (Sequence_proj_2 (Sequence u u1)) u1)))

;; Sequence_proj_1_def
  (assert
  (forall ((u quantum_circuit) (u1 quantum_circuit))
  (= (Sequence_proj_1 (Sequence u u1)) u)))

;; Unit_proj_1_def
  (assert (forall ((u base_element)) (= (Unit_proj_1 (Unit u)) u)))

;; index_quantum_circuit_Parallel
  (assert
  (forall ((u quantum_circuit) (u1 quantum_circuit))
  (! (= (index_quantum_circuit (Parallel u u1)) 2) :pattern ((Parallel u u1)) )))

;; index_quantum_circuit_Sequence
  (assert
  (forall ((u quantum_circuit) (u1 quantum_circuit))
  (! (= (index_quantum_circuit (Sequence u u1)) 1) :pattern ((Sequence u u1)) )))

;; index_quantum_circuit_Unit
  (assert
  (forall ((u base_element))
  (! (= (index_quantum_circuit (Unit u)) 0) :pattern ((Unit u)) )))

;; match_quantum_circuit_Parallel
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni) (z2 uni) (u quantum_circuit)
  (u1 quantum_circuit))
  (=> (sort a z2) (= (match_quantum_circuit a (Parallel u u1) z z1 z2) z2)))))

;; match_quantum_circuit_Sequence
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni) (z2 uni) (u quantum_circuit)
  (u1 quantum_circuit))
  (=> (sort a z1) (= (match_quantum_circuit a (Sequence u u1) z z1 z2) z1)))))

;; match_quantum_circuit_Unit
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni) (z2 uni) (u base_element))
  (=> (sort a z) (= (match_quantum_circuit a (Unit u) z z1 z2) z)))))

;; match_quantum_circuit_sort
  (assert
  (forall ((a ty))
  (forall ((x quantum_circuit) (x1 uni) (x2 uni) (x3 uni)) (sort a
  (match_quantum_circuit a x x1 x2 x3)))))

;; base_element_inversion
  (assert
  (forall ((u base_element))
  (or
  (or (or (= u Identity) (= u Hadamard)) (= u (Cont_R (Cont_R_proj_1 u))))
  (= u Swap))))

;; Cont_R_proj_1_def
  (assert (forall ((u Int)) (= (Cont_R_proj_1 (Cont_R u)) u)))

;; index_base_element_Cont_R
  (assert
  (forall ((u Int))
  (! (= (index_base_element (Cont_R u)) 2) :pattern ((Cont_R u)) )))

;; match_base_element_Swap
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni) (z2 uni) (z3 uni))
  (=> (sort a z3) (= (match_base_element a Swap z z1 z2 z3) z3)))))

;; match_base_element_Cont_R
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni) (z2 uni) (z3 uni) (u Int))
  (=> (sort a z2) (= (match_base_element a (Cont_R u) z z1 z2 z3) z2)))))

;; match_base_element_Hadamard
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni) (z2 uni) (z3 uni))
  (=> (sort a z1) (= (match_base_element a Hadamard z z1 z2 z3) z1)))))

;; match_base_element_Identity
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni) (z2 uni) (z3 uni))
  (=> (sort a z) (= (match_base_element a Identity z z1 z2 z3) z)))))

;; match_base_element_sort
  (assert
  (forall ((a ty))
  (forall ((x base_element) (x1 uni) (x2 uni) (x3 uni) (x4 uni)) (sort a
  (match_base_element a x x1 x2 x3 x4)))))

;; to_fset_ext
  (assert
  (forall ((i Int) (iqt Int) (j Int))
  (=> (and (<= i iqt) (<= iqt j))
  (= (to_fset i j) (tb2t1
                   (union1 int (t2tb1 (to_fset i iqt))
                   (t2tb1 (to_fset iqt j))))))))

;; to_fset_unit_ext
  (assert
  (forall ((i Int) (j Int))
  (=> (< i j)
  (= (to_fset i j) (tb2t1 (add int (t2tb2 i) (t2tb1 (to_fset (+ i 1) j))))))))

;; to_fset_spec
  (assert
  (forall ((i Int) (j Int))
  (and (=> (< i j) (= (cardinal int (t2tb1 (to_fset i j))) (- j i)))
  (and (=> (<= j i) (is_empty int (t2tb1 (to_fset i j))))
  (forall ((k Int))
  (= (mem int (t2tb2 k) (t2tb1 (to_fset i j))) (and (<= i k) (< k j))))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb2 (tb2t2 j)) j) :pattern ((t2tb2 (tb2t2 j))) )))

;; BridgeL
  (assert
  (forall ((i Int)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; t2tb_sort
  (assert (forall ((x Int)) (sort int (t2tb2 x))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (= (t2tb1 (tb2t1 j)) j) :pattern ((t2tb1 (tb2t1 j))) )))

;; BridgeL
  (assert
  (forall ((i (set Int))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; t2tb_sort
  (assert (forall ((x (set Int))) (sort (set1 int) (t2tb1 x))))

;; to_set_spec
  (assert
  (forall ((a ty))
  (forall ((e uni))
  (=> (sort a e)
  (and (= (cardinal a (add a e (empty a))) 1)
  (forall ((b uni))
  (=> (sort a b) (=> (mem a b (add a e (empty a))) (= b e)))))))))

;; disjoint_cartesian_product_r
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (=> (= (inter b s2 s3) (empty b))
  (= (inter (tuple21 a b) (cartesian_product b a s1 s2)
     (cartesian_product b a s1 s3)) (empty (tuple21 a b)))))))

;; disjoint_cartesian_product_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (=> (= (inter a s1 s2) (empty a))
  (= (inter (tuple21 a b) (cartesian_product b a s1 s3)
     (cartesian_product b a s2 s3)) (empty (tuple21 a b)))))))

;; cartesian_product_cardone_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (=> (= (cardinal b s2) 1)
  (and (infix_eqeq (tuple21 a b) (cartesian_product b a s1 s2)
  (left_injections b a s1 (choose b s2))) (infix_eqeq (tuple21 a b)
  (cartesian_product b a s1 s2)
  (map1 (tuple21 a b) a (fc2 b a (choose b s2)) s1)))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((e uni) (e1 uni))
  (= (infix_at (tuple21 a b) a (fc2 b a e) e1) (Tuple2 a b e1 e)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc2 b a x)))))

;; cartesian_product_cardone_r
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (=> (= (cardinal a s1) 1)
  (and (infix_eqeq (tuple21 a b) (cartesian_product b a s1 s2)
  (right_injections b a (choose a s1) s2)) (infix_eqeq (tuple21 a b)
  (cartesian_product b a s1 s2)
  (map1 (tuple21 a b) b
  (infix_at (infix_mngt b (tuple21 a b)) a (Tuple2_closure a b)
  (choose a s1)) s2)))))))

;; cartesian_union_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (= (cartesian_product b a (union1 a s1 s2) s3) (union1 (tuple21 a b)
                                                 (cartesian_product b a s1
                                                 s3)
                                                 (cartesian_product b a s2
                                                 s3))))))

;; cartesian_product_union
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (= (cartesian_product b a s1 (union1 b s2 s3)) (union1 (tuple21 a b)
                                                 (cartesian_product b a s1
                                                 s2)
                                                 (cartesian_product b a s1
                                                 s3))))))

;; commute_product_el_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((a1 uni) (b1 uni))
  (and
  (= (mem (tuple21 a b) (Tuple2 a b a1 b1) (cartesian_product b a s1 s2))
  (and (mem a a1 s1) (mem b b1 s2)))
  (= (and (mem a a1 s1) (mem b b1 s2)) (mem (tuple21 b a) (Tuple2 b a b1 a1)
  (commute_product_el b a s1 s2))))))))

;; commute_product_el_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (= (commute_product_el b a s1 s2) (map1 (tuple21 b a) (tuple21 a b)
                                    (commute_closure b a)
                                    (cartesian_product b a s1 s2))))))

;; commute_product_el_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 b a))
  (commute_product_el b a x x1)))))

;; commute_product_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (= (commute_product b a s1 s2) (cartesian_product a b s2 s1)))))

;; commute_product_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (= (commute_product b a s1 s2) (map1 (tuple21 b a) (tuple21 a b)
                                 (commute_closure b a)
                                 (cartesian_product b a s1 s2))))))

;; commute_product_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 b a))
  (commute_product b a x x1)))))

;; commute_inj_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni)) (p_injective (tuple21 b a) (tuple21 a b)
  (commute_closure b a) (cartesian_product b a s1 s2)))))

;; commute_closure_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((y uni))
  (= (infix_at (tuple21 b a) (tuple21 a b) (commute_closure b a) y) (commute
                                                                    b a y)))))

;; commute_closure_sort
  (assert
  (forall ((a ty) (b ty)) (sort (infix_mngt (tuple21 a b) (tuple21 b a))
  (commute_closure b a))))

;; mem_cartesian_product
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni) (a1 uni) (b1 uni))
  (=> (mem a a1 s1)
  (=> (mem b b1 s2) (mem (tuple21 a b) (Tuple2 a b a1 b1)
  (cartesian_product b a s1 s2)))))))

;; commute_inj
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (aqt uni) (b1 uni) (bqt uni))
  (=> (sort a a1)
  (=> (sort a aqt)
  (=> (sort b b1)
  (=> (sort b bqt)
  (=> (=> (= a1 aqt) (not (= b1 bqt)))
  (not
  (= (commute b a (Tuple2 a b a1 b1)) (commute b a (Tuple2 a b aqt bqt))))))))))))

;; commute_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (b1 uni))
  (= (commute b a (Tuple2 a b a1 b1)) (Tuple2 b a b1 a1)))))

;; commute_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (tuple21 b a) (commute b a x)))))

;; cartesian_product_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (= (cardinal (tuple21 a b) (cartesian_product b a s1 s2)) (* (cardinal a
                                                               s1) (cardinal
                                                                   b s2)))
  (and
  (forall ((a1 uni))
  (forall ((b1 uni))
  (= (mem (tuple21 a b) (Tuple2 a b a1 b1) (cartesian_product b a s1 s2))
  (and (mem a a1 s1) (mem b b1 s2)))))
  (forall ((o uni))
  (= (mem (tuple21 a b) o (cartesian_product b a s1 s2))
  (and (mem a (fir b a o) s1) (mem b (sec b a o) s2)))))))))

;; cartesian_product_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 a b))
  (cartesian_product b a x x1)))))

;; cardinal_sum_empty_inter
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (= (inter a s sqt) (empty a))
  (= (cardinal a (union1 a s sqt)) (+ (cardinal a s) (cardinal a sqt)))))))

;; cardinal_sum
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (= (cardinal a (union1 a s sqt)) (- (+ (cardinal a s) (cardinal a sqt)) 
  (cardinal a (inter a s sqt)))))))

;; induction
  (assert
  (forall ((a ty))
  (forall ((p uni) (t2 uni))
  (=>
  (forall ((s uni))
  (=> (sort (set1 a) s)
  (=> (is_empty a s) (= (tb2t (infix_at bool (set1 a) p s)) true))))
  (=>
  (forall ((s uni))
  (=> (sort (set1 a) s)
  (=> (= (tb2t (infix_at bool (set1 a) p s)) true)
  (forall ((t3 uni))
  (=> (sort a t3)
  (=> (not (mem a t3 s))
  (= (tb2t (infix_at bool (set1 a) p (add a t3 s))) true)))))))
  (= (tb2t (infix_at bool (set1 a) p t2)) true))))))

;; disjoint_injections
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni) (c uni))
  (=> (sort b b1)
  (=> (sort b c)
  (=> (not (= b1 c))
  (and (is_empty (tuple21 b a)
  (inter (tuple21 b a) (right_injections a b b1 s)
  (right_injections a b c s))) (is_empty (tuple21 a b)
  (inter (tuple21 a b) (left_injections b a s b1) (left_injections b a s c))))))))))

;; left_injections_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni))
  (=> (sort b b1)
  (and
  (forall ((a1 uni))
  (forall ((bqt uni))
  (=> (sort b bqt)
  (= (mem (tuple21 a b) (Tuple2 a b a1 bqt) (left_injections b a s b1))
  (and (mem a a1 s) (= bqt b1))))))
  (and (= (cardinal (tuple21 a b) (left_injections b a s b1)) (cardinal a s))
  (= (left_injections b a s b1) (map1 (tuple21 a b) a (fc1 b a b1) s))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((b1 uni) (a1 uni))
  (= (infix_at (tuple21 a b) a (fc1 b a b1) a1) (Tuple2 a b a1 b1)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc1 b a x)))))

;; right_injections_l
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (s uni))
  (=> (sort a a1)
  (and
  (= (cardinal (tuple21 a b) (right_injections b a a1 s)) (cardinal b s))
  (and
  (forall ((aqt uni))
  (=> (sort a aqt)
  (forall ((b1 uni))
  (= (mem (tuple21 a b) (Tuple2 a b aqt b1) (right_injections b a a1 s))
  (and (= aqt a1) (mem b b1 s))))))
  (= (right_injections b a a1 s) (map1 (tuple21 a b) b
                                 (infix_at (infix_mngt b (tuple21 a b)) a
                                 (Tuple2_closure a b) a1) s))))))))

;; left_injections_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni))
  (=> (sort b b1)
  (and
  (forall ((a1 uni))
  (forall ((bqt uni))
  (=> (sort b bqt)
  (= (mem (tuple21 a b) (Tuple2 a b a1 bqt) (left_injections b a s b1))
  (and (mem a a1 s) (= bqt b1))))))
  (and (= (cardinal (tuple21 a b) (left_injections b a s b1)) (cardinal a s))
  (= (left_injections b a s b1) (map1 (tuple21 a b) a (fc b a b1) s))))))))

;; fc_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((b1 uni) (a1 uni))
  (= (infix_at (tuple21 a b) a (fc b a b1) a1) (Tuple2 a b a1 b1)))))

;; fc_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni)) (sort (infix_mngt a (tuple21 a b)) (fc b a x)))))

;; left_injections_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (b1 uni))
  (ite (is_empty a s) (= (left_injections b a s b1) (empty (tuple21 a b)))
  (= (left_injections b a s b1) (add (tuple21 a b)
                                (Tuple2 a b (choose a s) b1)
                                (left_injections b a
                                (remove a (choose a s) s) b1)))))))

;; left_injections_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 a b))
  (left_injections b a x x1)))))

;; right_injections_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (s uni))
  (=> (sort a a1)
  (and
  (= (cardinal (tuple21 a b) (right_injections b a a1 s)) (cardinal b s))
  (and
  (forall ((aqt uni))
  (=> (sort a aqt)
  (forall ((b1 uni))
  (= (mem (tuple21 a b) (Tuple2 a b aqt b1) (right_injections b a a1 s))
  (and (= aqt a1) (mem b b1 s))))))
  (= (right_injections b a a1 s) (map1 (tuple21 a b) b
                                 (infix_at (infix_mngt b (tuple21 a b)) a
                                 (Tuple2_closure a b) a1) s))))))))

;; Tuple2_closure_def
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((y uni) (y1 uni))
  (= (infix_at (tuple21 a1 a) a
     (infix_at (infix_mngt a (tuple21 a1 a)) a1 (Tuple2_closure a1 a) y) y1) 
  (Tuple2 a1 a y y1)))))

;; Tuple2_closure_sort
  (assert
  (forall ((a ty) (a1 ty)) (sort
  (infix_mngt a1 (infix_mngt a (tuple21 a1 a))) (Tuple2_closure a1 a))))

;; right_injections_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((a1 uni) (s uni))
  (ite (is_empty b s) (= (right_injections b a a1 s) (empty (tuple21 a b)))
  (= (right_injections b a a1 s) (add (tuple21 a b)
                                 (Tuple2 a b a1 (choose b s))
                                 (right_injections b a a1
                                 (remove b (choose b s) s))))))))

;; right_injections_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple21 a b))
  (right_injections b a x x1)))))

;; non_empty_map
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (< 0 (cardinal b (map1 b a f s))) (< 0 (cardinal a s))))))

;; map_non_empty
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (< 0 (cardinal a s)) (< 0 (cardinal b (map1 b a f s)))))))

;; map_remove_antec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (map1 b a f (remove_antecs b a s f b1)) (remove b b1 (map1 b a f s)))))))

;; remove_antecs_spec
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (sort b b1)
  (=> (mem b b1 (map1 b a f s))
  (and
  (forall ((e uni))
  (= (mem a e (remove_antecs b a s f b1))
  (and (mem a e s) (not (= (infix_at b a f e) b1)))))
  (< (cardinal a (remove_antecs b a s f b1)) (cardinal a s))))))))

;; remove_antecs_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (remove_antecs b a s f b1) (remove_s a s (antec_set b a s f b1)))))))

;; remove_antecs_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (remove_antecs b a x x1 x2)))))

;; remove_s_spec
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (subset1 a sqt s)
  (forall ((e uni))
  (= (mem a e (remove_s a s sqt)) (and (mem a e s) (not (mem a e sqt)))))))))

;; remove_s_def
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (subset1 a sqt s) (= (remove_s a s sqt) (filter a (result1 a sqt) s))))))

;; result_def
  (assert
  (forall ((a ty))
  (forall ((sqt uni) (e uni))
  (= (= (tb2t (infix_at bool a (result1 a sqt) e)) true) (not (mem a e sqt))))))

;; result_sort
  (assert
  (forall ((a ty))
  (forall ((x uni)) (sort (infix_mngt a bool) (result1 a x)))))

;; remove_s_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (remove_s a x x1)))))

;; antec_set_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni) (b1 uni))
  (=> (mem b b1 (map1 b a f s))
  (= (antec_set b a s f b1) (filter a (result b a f b1) s))))))

;; result_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (b1 uni) (e uni))
  (=> (sort b b1)
  (= (= (tb2t (infix_at bool a (result b a f b1) e)) true)
  (= (infix_at b a f e) b1))))))

;; result_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (infix_mngt a bool) (result b a x x1)))))

;; antec_set_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (set1 a)
  (antec_set b a x x1 x2)))))

;; map_remove_choose
  (assert
  (forall ((a ty) (b ty))
  (forall ((s uni) (f uni))
  (=> (p_injective b a f s)
  (= (map1 b a f (remove a (choose a s) s)) (remove b
                                            (infix_at b a f (choose a s))
                                            (map1 b a f s)))))))

;; map_antec_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (forall ((b1 uni))
  (=> (sort b b1)
  (=> (mem b b1 (map1 b a f s))
  (exists ((a1 uni))
  (and (sort a a1) (and (mem a a1 s) (= b1 (infix_at b a f a1)))))))))))

;; map_antec
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni))
  (=> (sort b b1)
  (=> (mem b b1 (map1 b a f s))
  (exists ((a1 uni))
  (and (sort a a1) (and (mem a a1 s) (= b1 (infix_at b a f a1))))))))))

;; set_map_mem_el_gen
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni))
  (=> (exists ((a1 uni)) (and (mem a a1 s) (= b1 (infix_at b a f a1)))) (mem
  b b1 (map1 b a f s))))))

;; set_map_mem_el
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni) (a1 uni))
  (=> (mem a a1 s) (=> (= b1 (infix_at b a f a1)) (mem b b1 (map1 b a f s)))))))

;; injective_map_cardinal
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (=> (p_injective b a f s) (= (cardinal b (map1 b a f s)) (cardinal a s))))))

;; map_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (g uni) (s uni))
  (=>
  (forall ((e uni))
  (=> (sort a e) (=> (mem a e s) (= (infix_at b a f e) (infix_at b a g e)))))
  (= (map1 b a f s) (map1 b a g s))))))

;; map_add
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (x uni))
  (=> (not (mem a x s))
  (= (map1 b a f (add a x s)) (add b (infix_at b a f x) (map1 b a f s)))))))

;; set_map_mem
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni) (b1 uni))
  (=> (exists ((a1 uni)) (and (mem a a1 s) (= b1 (infix_at b a f a1)))) (mem
  b b1 (map1 b a f s))))))

;; p_injective_def
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (s uni))
  (= (p_injective b a f s)
  (forall ((e uni) (eqt uni))
  (=> (sort a e)
  (=> (sort a eqt)
  (=> (mem a e s)
  (=> (mem a eqt s)
  (=> (not (= e eqt)) (not (= (infix_at b a f e) (infix_at b a f eqt)))))))))))))

;; add_remove
  (assert
  (forall ((a ty))
  (forall ((s uni) (x uni))
  (=> (sort (set1 a) s) (=> (mem a x s) (= (add a x (remove a x s)) s))))))

;; remove_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (x uni))
  (=> (sort (set1 a) s)
  (=> (not (mem a x s)) (= (remove a x (add a x s)) s))))))

;; union_add_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (x uni))
  (=> (not (mem a x sqt))
  (= (add a x (union1 a s sqt)) (union1 a s (add a x sqt)))))))

;; union_add_mem
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (x uni) (y uni))
  (=> (sort a x)
  (=> (sort a y)
  (=> (mem a x (add a y (union1 a s sqt)))
  (=> (not (mem a x sqt)) (=> (not (mem a x s)) (= x y)))))))))

;; union_add
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (x uni))
  (=> (not (mem a x sqt))
  (= (union1 a s (add a x sqt)) (add a x (union1 a s sqt)))))))

;; set_non_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (exists ((e uni)) (mem a e s))
  (and (not (is_empty a s)) (< 0 (cardinal a s)))))))

;; get_non_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (not (is_empty a s)) (exists ((e uni)) (and (sort a e) (mem a e s)))))))

;; get_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (= s (empty a))
  (and (forall ((e uni)) (not (mem a e s))) (is_empty a s))))))

;; set_equal
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) s)
  (=> (sort (set1 a) sqt)
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e s) (mem a e sqt))))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
  (= s sqt))))))))

;; set_empty
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (sort (set1 a) s)
  (=> (forall ((e uni)) (=> (sort a e) (not (mem a e s))))
  (and (= s (empty a)) (is_empty a s)))))))

;; set_subset
  (assert
  (forall ((a ty))
  (forall ((sqt uni) (s uni))
  (=> (forall ((e uni)) (=> (sort a e) (=> (mem a e sqt) (mem a e s))))
  (subset1 a sqt s)))))

;; union_empty_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) s) (=> (is_empty a sqt) (= (union1 a s sqt) s))))))

;; union_alt
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni) (e uni))
  (=> (mem a e (union1 a s sqt)) (=> (not (mem a e s)) (mem a e sqt))))))

;; union_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) s) (=> (is_empty a sqt) (= (union1 a s sqt) s))))))

;; union_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (sort (set1 a) sqt) (=> (is_empty a s) (= (union1 a s sqt) sqt))))))

;; inter_empty_comm
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (is_empty a sqt) (is_empty a (inter a s sqt))))))

;; inter_empty
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (is_empty a s) (is_empty a (inter a s sqt))))))

;; set_filter
  (assert
  (forall ((a ty))
  (forall ((p uni) (s uni) (x uni))
  (=> (= (tb2t (infix_at bool a p x)) true)
  (=> (mem a x s) (mem a x (filter a p s)))))))

;; get_filter
  (assert
  (forall ((a ty))
  (forall ((p uni) (s uni) (x uni))
  (=> (mem a x (filter a p s))
  (and (= (tb2t (infix_at bool a p x)) true) (mem a x s))))))

;; union_exchange
  (assert
  (forall ((a ty))
  (forall ((s uni) (sqt uni))
  (=> (not (is_empty a sqt))
  (= (union1 a (add a (choose a sqt) s) (remove a (choose a sqt) sqt)) 
  (union1 a s sqt))))))

;; ref_inversion
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort (ref a) u) (= u (mk_ref a (contents a u)))))))

;; contents_def
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort a u) (= (contents a (mk_ref a u)) u)))))

;; contents_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (contents a x)))))

;; mk ref_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort (ref a) (mk_ref a x)))))

;; get_sec
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni))
  (=> (sort b x1) (= (sec b a (Tuple2 a b x x1)) x1)))))

;; get_fir
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni))
  (=> (sort a x) (= (fir b a (Tuple2 a b x x1)) x)))))

;; projections
  (assert
  (forall ((a ty) (b ty))
  (forall ((o uni))
  (=> (sort (tuple21 a b) o) (= o (Tuple2 a b (fir b a o) (sec b a o)))))))

;; sec_sort
  (assert (forall ((a ty) (b ty)) (forall ((x uni)) (sort b (sec b a x)))))

;; fir_sort
  (assert (forall ((a ty) (b ty)) (forall ((x uni)) (sort a (fir b a x)))))

;; tuple2_inversion
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((u uni))
  (=> (sort (tuple21 a1 a) u)
  (= u (Tuple2 a1 a (Tuple2_proj_1 a1 a u) (Tuple2_proj_2 a1 a u)))))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a u1) (= (Tuple2_proj_2 a1 a (Tuple2 a1 a u u1)) u1)))))

;; Tuple2_proj_2_sort
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((x uni)) (sort a (Tuple2_proj_2 a1 a x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a1 u) (= (Tuple2_proj_1 a1 a (Tuple2 a1 a u u1)) u)))))

;; Tuple2_proj_1_sort
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((x uni)) (sort a1 (Tuple2_proj_1 a1 a x)))))

;; Tuple2_sort
  (assert
  (forall ((a ty) (a1 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple21 a1 a) (Tuple2 a1 a x x1)))))

;; goal_comm
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni))
  (=> (sort a a1) (=> (sort a b) (=> (= a1 b) (= b a1)))))))

;; assert_equal
  (assert
  (forall ((a ty))
  (forall ((a1 uni) (b uni))
  (=> (sort a a1) (=> (sort a b) (=> (= a1 b) (= a1 b)))))))

;; map_cardinal
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni)) (<= (cardinal b (map1 b a f u)) (cardinal a u)))))

;; map_def2
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni))
  (forall ((x uni))
  (=> (mem a x u) (mem b (infix_at b a f x) (map1 b a f u)))))))

;; map_def1
  (assert
  (forall ((a ty) (b ty))
  (forall ((f uni) (u uni))
  (forall ((y uni))
  (=> (sort b y)
  (and
  (=> (mem b y (map1 b a f u))
  (exists ((x uni))
  (and (sort a x) (and (mem a x u) (= y (infix_at b a f x))))))
  (=> (exists ((x uni)) (and (mem a x u) (= y (infix_at b a f x)))) (mem b y
  (map1 b a f u)))))))))

;; map_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b) (map1 b a x x1)))))

;; filter_cardinal
  (assert
  (forall ((a ty))
  (forall ((p uni) (u uni)) (<= (cardinal a (filter a p u)) (cardinal a u)))))

;; filter_def
  (assert
  (forall ((a ty))
  (forall ((p uni) (u uni))
  (forall ((x uni))
  (= (mem a x (filter a p u))
  (and (= (tb2t (infix_at bool a p x)) true) (mem a x u)))))))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort bool j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb (tb2t j))) )))

;; BridgeL
  (assert (forall ((i Bool)) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; t2tb_sort
  (assert (forall ((x Bool)) (sort bool (t2tb x))))

;; filter_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (filter a x x1)))))

;; infix @_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort b (infix_at b a x x1)))))

;; cardinal1
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (=> (= (cardinal a s) 1)
  (forall ((x uni)) (=> (sort a x) (=> (mem a x s) (= x (choose a s)))))))))

;; subset_eq
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (=> (subset1 a s1 s2)
  (=> (= (cardinal a s1) (cardinal a s2)) (infix_eqeq a s1 s2))))))

;; cardinal_subset
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (=> (subset1 a s1 s2) (<= (cardinal a s1) (cardinal a s2))))))

;; cardinal_remove
  (assert
  (forall ((a ty))
  (forall ((x uni))
  (forall ((s uni))
  (=> (mem a x s) (= (cardinal a s) (+ 1 (cardinal a (remove a x s)))))))))

;; cardinal_add
  (assert
  (forall ((a ty))
  (forall ((x uni))
  (forall ((s uni))
  (=> (not (mem a x s)) (= (cardinal a (add a x s)) (+ 1 (cardinal a s))))))))

;; cardinal_empty
  (assert
  (forall ((a ty))
  (forall ((s uni)) (= (= (cardinal a s) 0) (is_empty a s)))))

;; cardinal_nonneg
  (assert (forall ((a ty)) (forall ((s uni)) (<= 0 (cardinal a s)))))

;; choose_spec
  (assert
  (forall ((a ty))
  (forall ((s uni)) (=> (not (is_empty a s)) (mem a (choose a s) s)))))

;; choose_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (choose a x)))))

;; subset_diff
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni)) (subset1 a (diff a s1 s2) s1))))

;; diff_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((x uni))
  (= (mem a x (diff a s1 s2)) (and (mem a x s1) (not (mem a x s2))))))))

;; diff_sort
  (assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (set1 a) (diff a x x1)))))

;; inter_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((x uni))
  (= (mem a x (inter a s1 s2)) (and (mem a x s1) (mem a x s2)))))))

;; inter_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (inter a x x1)))))

;; union_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (forall ((x uni))
  (= (mem a x (union1 a s1 s2)) (or (mem a x s1) (mem a x s2)))))))

;; union_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (union1 a x x1)))))

;; subset_remove
  (assert
  (forall ((a ty)) (forall ((x uni) (s uni)) (subset1 a (remove a x s) s))))

;; remove_add
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni)) (= (remove a x (add a x s)) (remove a x s)))))

;; add_remove
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (=> (sort (set1 a) s) (=> (mem a x s) (= (add a x (remove a x s)) s))))))

;; remove_spec
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (=> (sort a x)
  (forall ((y uni))
  (=> (sort a y)
  (= (mem a y (remove a x s)) (and (not (= y x)) (mem a y s)))))))))

;; remove_sort
  (assert
  (forall ((a ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a) (remove a x x1)))))

;; add_spec
  (assert
  (forall ((a ty))
  (forall ((x uni) (s uni))
  (=> (sort a x)
  (forall ((y uni))
  (=> (sort a y) (= (mem a y (add a x s)) (or (= y x) (mem a y s)))))))))

;; add_sort
  (assert
  (forall ((a ty)) (forall ((x uni) (x1 uni)) (sort (set1 a) (add a x x1)))))

;; empty_def
  (assert (forall ((a ty)) (is_empty a (empty a))))

;; empty_sort
  (assert (forall ((a ty)) (sort (set1 a) (empty a))))

;; is_empty_spec
  (assert
  (forall ((a ty))
  (forall ((s uni))
  (and (=> (is_empty a s) (forall ((x uni)) (not (mem a x s))))
  (=> (forall ((x uni)) (=> (sort a x) (not (mem a x s)))) (is_empty a s))))))

;; subset_trans
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni) (s3 uni))
  (=> (subset1 a s1 s2) (=> (subset1 a s2 s3) (subset1 a s1 s3))))))

;; subset_refl
  (assert (forall ((a ty)) (forall ((s uni)) (subset1 a s s))))

;; subset_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (=> (subset1 a s1 s2) (forall ((x uni)) (=> (mem a x s1) (mem a x s2))))
  (=> (forall ((x uni)) (=> (sort a x) (=> (mem a x s1) (mem a x s2))))
  (subset1 a s1 s2))))))

;; extensionality
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (=> (sort (set1 a) s1)
  (=> (sort (set1 a) s2) (=> (infix_eqeq a s1 s2) (= s1 s2)))))))

;; infix ==_spec
  (assert
  (forall ((a ty))
  (forall ((s1 uni) (s2 uni))
  (and
  (=> (infix_eqeq a s1 s2) (forall ((x uni)) (= (mem a x s1) (mem a x s2))))
  (=> (forall ((x uni)) (=> (sort a x) (= (mem a x s1) (mem a x s2))))
  (infix_eqeq a s1 s2))))))

;; mult_eq_inv_t
  (assert
  (forall ((a1 t) (a2 t) (b1 t) (b2 t))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt b2 a2))))))

;; add_eq_inv_t
  (assert
  (forall ((a1 t) (a2 t) (b1 t) (b2 t))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt b2 a2))))))

;; mult_comm
  (assert (forall ((a t) (b t)) (= (infix_asdt a b) (infix_asdt b a))))

;; mult_eq_t
  (assert
  (forall ((a1 t) (a2 t) (b1 t) (b2 t))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_asdt a1 b1) (infix_asdt a2 b2))))))

;; add_eq_t
  (assert
  (forall ((a1 t) (a2 t) (b1 t) (b2 t))
  (=> (= a1 a2) (=> (= b1 b2) (= (infix_pldt a1 b1) (infix_pldt a2 b2))))))

;; mult_one_t
  (assert
  (forall ((a1 t) (a2 t)) (=> (= a2 tone) (= (infix_asdt a1 a2) a1))))

;; one_mult_t_const
  (assert (forall ((a t)) (= (infix_asdt tone a) a)))

;; one_mult_t
  (assert
  (forall ((a1 t) (a2 t)) (=> (= a1 tone) (= (infix_asdt a1 a2) a2))))

;; add_zero_t
  (assert
  (forall ((a1 t) (a2 t)) (=> (= a2 tzero) (= (infix_pldt a1 a2) a1))))

;; zero_add_t
  (assert
  (forall ((a1 t) (a2 t)) (=> (= a1 tzero) (= (infix_pldt a1 a2) a2))))

;; inv_neg
  (assert
  (forall ((x t)) (=> (infix_gtdt tzero x) (infix_lsdt (inv1 x) tzero))))

;; inv_pos
  (assert
  (forall ((x t)) (=> (infix_lsdt tzero x) (infix_gtdt (inv1 x) tzero))))

;; inv_sup
  (assert
  (forall ((x t) (y t))
  (=> (and (infix_gtdt x y) (infix_gtdt y tzero)) (infix_lsdt (inv1 x)
  (inv1 y)))))

;; inv_eqsup
  (assert
  (forall ((x t) (y t))
  (=> (and (infix_gteqdt x y) (infix_gtdt y tzero)) (infix_lseqdt (inv1 x)
  (inv1 y)))))

;; inv_inf
  (assert
  (forall ((x t) (y t))
  (=> (and (infix_lsdt tzero x) (infix_lsdt x y)) (infix_gtdt (inv1 x)
  (inv1 y)))))

;; inv_eqinf
  (assert
  (forall ((x t) (y t))
  (=> (and (infix_lsdt tzero x) (infix_lseqdt x y)) (infix_gteqdt (inv1 x)
  (inv1 y)))))

;; strict_compat_order_mult
  (assert
  (forall ((x t) (y t) (z t))
  (=> (infix_lsdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lsdt tzero z) (infix_lsdt (infix_asdt x z) (infix_asdt y z)))))))))

;; compat_order_mult
  (assert
  (forall ((x t) (y t) (z t))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z)
  (=> (infix_lseqdt tzero z) (infix_lseqdt (infix_asdt x z)
  (infix_asdt y z)))))))))

;; compatOrderAdd
  (assert
  (forall ((x t) (y t) (z t))
  (=> (infix_lseqdt x y)
  (=> (real_ x)
  (=> (real_ y)
  (=> (real_ z) (infix_lseqdt (infix_pldt x z) (infix_pldt y z))))))))

;; inv_real
  (assert
  (forall ((a t))
  (=> (not (= a tzero))
  (=> (real_ a)
  (and (= (real_part (inv1 a)) (infix_slas 1.0 (real_part a))) (real_
  (inv1 a)))))))

;; decomp_mult_gen
  (assert
  (forall ((a t) (b t))
  (and
  (= (real_part (infix_asdt a b)) (infix_mnas
                                  (infix_asas (real_part a) (real_part b))
                                  (infix_asas (im_part a) (im_part b))))
  (= (im_part (infix_asdt a b)) (infix_plas
                                (infix_asas (real_part a) (im_part b))
                                (infix_asas (im_part a) (real_part b)))))))

;; mult_im_real
  (assert
  (forall ((a t) (b t))
  (=> (pure_im_ a)
  (=> (real_ b)
  (and
  (= (infix_asdt a b) (infix_asdt im
                      (infix_asdt (r_to_t (im_part a))
                      (r_to_t (real_part b)))))
  (and
  (= (infix_asdt a b) (infix_asdt im
                      (r_to_t (infix_asas (im_part a) (real_part b)))))
  (and (= (real_part (infix_asdt a b)) 0.0)
  (= (im_part (infix_asdt a b)) (infix_asas (im_part a) (real_part b))))))))))

;; mult_real_im
  (assert
  (forall ((a t) (b t))
  (=> (real_ a)
  (=> (pure_im_ b)
  (and
  (= (infix_asdt a b) (infix_asdt im
                      (infix_asdt (r_to_t (real_part a))
                      (r_to_t (im_part b)))))
  (and
  (= (infix_asdt a b) (infix_asdt im
                      (r_to_t (infix_asas (real_part a) (im_part b)))))
  (and (= (real_part (infix_asdt a b)) 0.0)
  (= (im_part (infix_asdt a b)) (infix_asas (real_part a) (im_part b))))))))))

;; mult_im_im
  (assert
  (forall ((a t) (b t))
  (=> (pure_im_ a)
  (=> (pure_im_ b)
  (and
  (= (infix_asdt a b) (infix_asdt (infix_asdt im im)
                      (infix_asdt (r_to_t (im_part a)) (r_to_t (im_part b)))))
  (and
  (= (infix_asdt a b) (prefix_mndt
                      (r_to_t (infix_asas (im_part a) (im_part b)))))
  (and
  (= (real_part (infix_asdt a b)) (prefix_mnas
                                  (infix_asas (im_part a) (im_part b))))
  (= (im_part (infix_asdt a b)) 0.0))))))))

;; mult_real_real
  (assert
  (forall ((a t) (b t))
  (=> (real_ a)
  (=> (real_ b)
  (and
  (and
  (= (infix_asdt a b) (infix_asdt (r_to_t (real_part a))
                      (r_to_t (real_part b))))
  (= (infix_asdt (r_to_t (real_part a)) (r_to_t (real_part b))) (r_to_t
                                                                (infix_asas
                                                                (real_part a)
                                                                (real_part b)))))
  (and
  (= (real_part (infix_asdt a b)) (infix_asas (real_part a) (real_part b)))
  (= (im_part (infix_asdt a b)) 0.0)))))))

;; decomp_mult_im_part
  (assert
  (forall ((a t) (b t))
  (= (im_part (infix_asdt a b)) (infix_plas
                                (infix_asas (real_part a) (im_part b))
                                (infix_asas (real_part b) (im_part a))))))

;; decomp_mult_real_part
  (assert
  (forall ((a t) (b t))
  (= (real_part (infix_asdt a b)) (infix_mnas
                                  (infix_asas (real_part a) (real_part b))
                                  (infix_asas (im_part a) (im_part b))))))

;; decomp_mult
  (assert
  (forall ((a t) (b t))
  (= (infix_asdt a b) (infix_pldt
                      (infix_pldt
                      (infix_pldt
                      (infix_asdt (r_to_t (real_part a))
                      (r_to_t (real_part b)))
                      (infix_asdt im
                      (infix_asdt (r_to_t (real_part a))
                      (r_to_t (im_part b)))))
                      (infix_asdt im
                      (infix_asdt (r_to_t (real_part b))
                      (r_to_t (im_part a)))))
                      (infix_asdt (infix_asdt im im)
                      (infix_asdt (r_to_t (im_part a)) (r_to_t (im_part b))))))))

;; sup_def
  (assert
  (forall ((x t) (y t))
  (= (infix_gtdt x y)
  (and (real_ x) (and (real_ y) (infix_lsas (real_part y) (real_part x)))))))

;; sup_eq_def
  (assert
  (forall ((x t) (y t))
  (= (infix_gteqdt x y)
  (or
  (and (real_ x) (and (real_ y) (infix_lseqas (real_part y) (real_part x))))
  (= x y)))))

;; inf_def
  (assert
  (forall ((x t) (y t))
  (= (infix_lsdt x y)
  (and (real_ x) (and (real_ y) (infix_lsas (real_part x) (real_part y)))))))

;; inf_eq_def
  (assert
  (forall ((x t) (y t))
  (= (infix_lseqdt x y)
  (or
  (and (real_ x) (and (real_ y) (infix_lseqas (real_part x) (real_part y))))
  (= x y)))))

;; Inf_eq_def
  (assert
  (forall ((x t) (y t))
  (= (infix_lseqdt x y)
  (or
  (and (real_ x) (and (real_ y) (infix_lseqas (real_part x) (real_part y))))
  (= x y)))))

;; inv_mult
  (assert
  (forall ((x t) (y t))
  (=> (not (= x tzero))
  (=> (not (= y tzero))
  (= (infix_asdt (infix_sldt tone x) (infix_sldt tone y)) (infix_sldt 
                                                          tone
                                                          (infix_asdt x y)))))))

;; fact_frac
  (assert
  (forall ((x t) (y t) (z t))
  (=> (not (= z tzero))
  (= (infix_sldt (infix_asdt x y) z) (infix_asdt x (infix_sldt y z))))))

;; simpl_frac_
  (assert
  (forall ((x t) (y t) (z t))
  (=> (not (= y tzero))
  (=> (not (= z tzero))
  (= (infix_sldt (infix_asdt x y) (infix_asdt z y)) (infix_sldt x z))))))

;; simpl_frac
  (assert
  (forall ((x t) (y t))
  (=> (not (= y tzero)) (= (infix_sldt (infix_asdt x y) y) x))))

;; r_to_t_pure_im
  (assert
  (forall ((x t))
  (=> (pure_im_ x) (= x (infix_asdt im (r_to_t (im_part x)))))))

;; r_to_t_real
  (assert (forall ((x t)) (=> (real_ x) (= x (r_to_t (real_part x))))))

;; pure_im__def
  (assert (forall ((x t)) (= (pure_im_ x) (= (real_part x) 0.0))))

;; real__def
  (assert (forall ((x t)) (= (real_ x) (= (im_part x) 0.0))))

;; unic_decomp
  (assert
  (forall ((i t) (x Real) (y Real))
  (=> (= i (infix_pldt (r_to_t x) (infix_asdt im (r_to_t y))))
  (and (= x (real_part i)) (= y (im_part i))))))

;; complex_decomp
  (assert
  (forall ((i t))
  (= i (infix_pldt (r_to_t (real_part i))
       (infix_asdt im (r_to_t (im_part i)))))))

;; injective_im_part
  (assert
  (forall ((i t) (j t)) (=> (not (= (im_part i) (im_part j))) (not (= i j)))))

;; injective_real_part
  (assert
  (forall ((i t) (j t))
  (=> (not (= (real_part i) (real_part j))) (not (= i j)))))

;; Unic_decomp
  (assert
  (forall ((i t))
  (forall ((x Real) (y Real))
  (=> (= i (infix_pldt (r_to_t x) (infix_asdt im (r_to_t y))))
  (and (= x (real_part i)) (= y (im_part i)))))))

;; Complex_decomp
  (assert
  (forall ((i t))
  (= i (infix_pldt (r_to_t (real_part i))
       (infix_asdt im (r_to_t (im_part i)))))))

;; im_part_add
  (assert
  (forall ((i t) (j t))
  (= (im_part (infix_pldt i j)) (infix_plas (im_part i) (im_part j)))))

;; real_part_add
  (assert
  (forall ((i t) (j t))
  (= (real_part (infix_pldt i j)) (infix_plas (real_part i) (real_part j)))))

;; Im_part_add
  (assert
  (forall ((i t) (j t))
  (= (im_part (infix_pldt i j)) (infix_plas (im_part i) (im_part j)))))

;; Real_part_add
  (assert
  (forall ((i t) (j t))
  (= (real_part (infix_pldt i j)) (infix_plas (real_part i) (real_part j)))))

;; r_to_t_inf
  (assert
  (forall ((i Real) (j Real))
  (= (infix_lseqdt (r_to_t i) (r_to_t j)) (infix_lseqas i j))))

;; r_to_t_div
  (assert
  (forall ((i Real) (j Real))
  (=> (not (= j 0.0))
  (= (infix_sldt (r_to_t i) (r_to_t j)) (r_to_t (infix_slas i j))))))

;; r_to_t_sub
  (assert
  (forall ((i Real) (j Real))
  (= (infix_mndt (r_to_t i) (r_to_t j)) (r_to_t (infix_mnas i j)))))

;; r_to_t_mult
  (assert
  (forall ((i Real) (j Real))
  (= (infix_asdt (r_to_t i) (r_to_t j)) (r_to_t (infix_asas i j)))))

;; r_to_t_add
  (assert
  (forall ((i Real) (j Real))
  (= (infix_pldt (r_to_t i) (r_to_t j)) (r_to_t (infix_plas i j)))))

;; notZeroAdd
  (assert
  (forall ((x t) (y t)) (=> (not (= x tzero)) (not (= (infix_pldt x y) y)))))

;; invadd
  (assert
  (forall ((i t)) (= (prefix_mndt i) (infix_asdt (prefix_mndt tone) i))))

;; non_zero_prod
  (assert
  (forall ((a t) (b t))
  (=> (not (= a tzero))
  (=> (not (= b tzero)) (not (= (infix_asdt a b) tzero))))))

;; mult_simpl
  (assert
  (forall ((a t) (b t) (c t))
  (=> (not (= c tzero))
  (=> (not (= b tzero))
  (= (infix_sldt (infix_asdt a b) (infix_asdt c b)) (infix_sldt a c))))))

;; mult_denom
  (assert
  (forall ((a t) (b t) (c t))
  (=> (not (= c tzero))
  (=> (not (= b tzero))
  (= (infix_sldt a (infix_asdt b c)) (infix_asdt (infix_sldt a b)
                                     (infix_sldt tone c)))))))

;; mult_num
  (assert
  (forall ((a t) (b t) (c t))
  (=> (not (= c tzero))
  (= (infix_sldt (infix_asdt a b) c) (infix_asdt a (infix_sldt b c))))))

;; absorbing_zero
  (assert
  (forall ((a t) (b t))
  (=> (= (infix_asdt a b) tzero)
  (and (=> (not (= a tzero)) (= b tzero)) (=> (not (= b tzero)) (= a tzero))))))

;; Absorbing_zero
  (assert
  (forall ((a t) (b t))
  (= (= (infix_asdt a b) tzero) (=> (not (= a tzero)) (= b tzero)))))

;; assoc_div_div
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (not (= y tzero)) (not (= z tzero)))
  (= (infix_sldt x (infix_sldt y z)) (infix_sldt (infix_asdt x z) y)))))

;; assoc_div_mul
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (not (= y tzero)) (not (= z tzero)))
  (= (infix_sldt (infix_sldt x y) z) (infix_sldt x (infix_asdt y z))))))

;; assoc_mul_div
  (assert
  (forall ((x t) (y t) (z t))
  (=> (not (= z tzero))
  (= (infix_sldt (infix_asdt x y) z) (infix_asdt x (infix_sldt y z))))))

;; neg_div
  (assert
  (forall ((x t) (y t))
  (=> (not (= y tzero))
  (= (infix_sldt (prefix_mndt x) y) (prefix_mndt (infix_sldt x y))))))

;; sub_div
  (assert
  (forall ((x t) (y t) (z t))
  (=> (not (= z tzero))
  (= (infix_sldt (infix_mndt x y) z) (infix_mndt (infix_sldt x z)
                                     (infix_sldt y z))))))

;; add_div
  (assert
  (forall ((x t) (y t) (z t))
  (=> (not (= z tzero))
  (= (infix_sldt (infix_pldt x y) z) (infix_pldt (infix_sldt x z)
                                     (infix_sldt y z))))))

;; absorbinf_zero
  (assert (forall ((x t)) (= (infix_asdt x tzero) tzero)))

;; div_def
  (assert
  (forall ((x t) (y t))
  (=> (not (= y tzero)) (= (infix_sldt x y) (infix_asdt x (inv1 y))))))

;; sub_def
  (assert
  (forall ((x t) (y t)) (= (infix_mndt x y) (infix_pldt x (prefix_mndt y)))))

;; Inverse
  (assert
  (forall ((x t)) (=> (not (= x tzero)) (= (infix_asdt x (inv1 x)) tone))))

;; Unitary
  (assert (forall ((x t)) (= (infix_asdt tone x) x)))

;; Comm
  (assert (forall ((x t) (y t)) (= (infix_asdt x y) (infix_asdt y x))))

;; Mul_distr_r
  (assert
  (forall ((x t) (y t) (z t))
  (= (infix_asdt (infix_pldt y z) x) (infix_pldt (infix_asdt y x)
                                     (infix_asdt z x)))))

;; Mul_distr_l
  (assert
  (forall ((x t) (y t) (z t))
  (= (infix_asdt x (infix_pldt y z)) (infix_pldt (infix_asdt x y)
                                     (infix_asdt x z)))))

;; Assoc
  (assert
  (forall ((x t) (y t) (z t))
  (= (infix_asdt (infix_asdt x y) z) (infix_asdt x (infix_asdt y z)))))

;; Comm
  (assert (forall ((x t) (y t)) (= (infix_pldt x y) (infix_pldt y x))))

;; Inv_def_r
  (assert (forall ((x t)) (= (infix_pldt x (prefix_mndt x)) tzero)))

;; Inv_def_l
  (assert (forall ((x t)) (= (infix_pldt (prefix_mndt x) x) tzero)))

;; Unit_def_r
  (assert (forall ((x t)) (= (infix_pldt x tzero) x)))

;; Unit_def_l
  (assert (forall ((x t)) (= (infix_pldt tzero x) x)))

;; Assoc
  (assert
  (forall ((x t) (y t) (z t))
  (= (infix_pldt (infix_pldt x y) z) (infix_pldt x (infix_pldt y z)))))

;; r_compatOrderMult
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (infix_lseqas x y)
  (=> (infix_lseqas 0.0 z) (infix_lseqas (infix_asas x z) (infix_asas y z))))))

;; r_compatOrderAdd
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (infix_lseqas x y) (infix_lseqas (infix_plas x z) (infix_plas y z)))))

;; Monotonic
  (assert
  (forall ((x Int) (y Int))
  (=> (<= x y) (infix_lseqas (from_int x) (from_int y)))))

;; Injective
  (assert
  (forall ((x Int) (y Int)) (=> (= (from_int x) (from_int y)) (= x y))))

;; Neg
  (assert (forall ((x Int)) (= (from_int (- x)) (prefix_mnas (from_int x)))))

;; Mul
  (assert
  (forall ((x Int) (y Int))
  (= (from_int (* x y)) (infix_asas (from_int x) (from_int y)))))

;; Sub
  (assert
  (forall ((x Int) (y Int))
  (= (from_int (- x y)) (infix_mnas (from_int x) (from_int y)))))

;; Add
  (assert
  (forall ((x Int) (y Int))
  (= (from_int (+ x y)) (infix_plas (from_int x) (from_int y)))))

;; CompatOrderMult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (=> (<= x y) (=> (<= 0 z) (<= (* x z) (* y z))))))

;; CompatOrderMult
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (infix_lseqas x y)
  (=> (infix_lseqas 0.0 z) (infix_lseqas (infix_asas x z) (infix_asas y z))))))

;; CompatOrderAdd
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (infix_lseqas x y) (infix_lseqas (infix_plas x z) (infix_plas y z)))))

;; Total
  (assert
  (forall ((x Real) (y Real)) (or (infix_lseqas x y) (infix_lseqas y x))))

;; Antisymm
  (assert
  (forall ((x Real) (y Real))
  (=> (infix_lseqas x y) (=> (infix_lseqas y x) (= x y)))))

;; Trans
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (infix_lseqas x y) (=> (infix_lseqas y z) (infix_lseqas x z)))))

;; Refl
  (assert (forall ((x Real)) (infix_lseqas x x)))

;; assoc_div_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (and (not (= y 0.0)) (not (= z 0.0)))
  (= (infix_slas x (infix_slas y z)) (infix_slas (infix_asas x z) y)))))

;; assoc_div_mul
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (and (not (= y 0.0)) (not (= z 0.0)))
  (= (infix_slas (infix_slas x y) z) (infix_slas x (infix_asas y z))))))

;; assoc_mul_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (not (= z 0.0))
  (= (infix_slas (infix_asas x y) z) (infix_asas x (infix_slas y z))))))

;; neg_div
  (assert
  (forall ((x Real) (y Real))
  (=> (not (= y 0.0))
  (= (infix_slas (prefix_mnas x) y) (prefix_mnas (infix_slas x y))))))

;; sub_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (not (= z 0.0))
  (= (infix_slas (infix_mnas x y) z) (infix_mnas (infix_slas x z)
                                     (infix_slas y z))))))

;; add_div
  (assert
  (forall ((x Real) (y Real) (z Real))
  (=> (not (= z 0.0))
  (= (infix_slas (infix_plas x y) z) (infix_plas (infix_slas x z)
                                     (infix_slas y z))))))

;; absorbinf_zero
  (assert (forall ((x Real)) (= (infix_asas x 0.0) 0.0)))

;; div_def
  (assert
  (forall ((x Real) (y Real))
  (=> (not (= y 0.0)) (= (infix_slas x y) (infix_asas x (inv y))))))

;; sub_def
  (assert
  (forall ((x Real) (y Real))
  (= (infix_mnas x y) (infix_plas x (prefix_mnas y)))))

;; Inverse
  (assert
  (forall ((x Real)) (=> (not (= x 0.0)) (= (infix_asas x (inv x)) 1.0))))

;; Unitary
  (assert (forall ((x Real)) (= (infix_asas 1.0 x) x)))

;; Comm
  (assert (forall ((x Real) (y Real)) (= (infix_asas x y) (infix_asas y x))))

;; Mul_distr_r
  (assert
  (forall ((x Real) (y Real) (z Real))
  (= (infix_asas (infix_plas y z) x) (infix_plas (infix_asas y x)
                                     (infix_asas z x)))))

;; Mul_distr_l
  (assert
  (forall ((x Real) (y Real) (z Real))
  (= (infix_asas x (infix_plas y z)) (infix_plas (infix_asas x y)
                                     (infix_asas x z)))))

;; Assoc
  (assert
  (forall ((x Real) (y Real) (z Real))
  (= (infix_asas (infix_asas x y) z) (infix_asas x (infix_asas y z)))))

;; Comm
  (assert (forall ((x Real) (y Real)) (= (infix_plas x y) (infix_plas y x))))

;; Inv_def_r
  (assert (forall ((x Real)) (= (infix_plas x (prefix_mnas x)) 0.0)))

;; Inv_def_l
  (assert (forall ((x Real)) (= (infix_plas (prefix_mnas x) x) 0.0)))

;; Unit_def_r
  (assert (forall ((x Real)) (= (infix_plas x 0.0) x)))

;; Unit_def_l
  (assert (forall ((x Real)) (= (infix_plas 0.0 x) x)))

;; Assoc
  (assert
  (forall ((x Real) (y Real) (z Real))
  (= (infix_plas (infix_plas x y) z) (infix_plas x (infix_plas y z)))))

;; infix <*_def
  (assert
  (forall ((x Real) (y Real))
  (= (infix_lsas x y) (and (infix_lseqas x y) (not (= x y))))))

;; sup_st
  (assert
  (forall ((x t) (y t))
  (= (infix_gtdt x y) (and (infix_gteqdt x y) (not (= x y))))))

;; sup_eq
  (assert (forall ((x t) (y t)) (= (infix_gteqdt x y) (infix_lseqdt y x))))

;; inf_st
  (assert
  (forall ((x t) (y t))
  (= (infix_lsdt x y) (and (infix_lseqdt x y) (not (= x y))))))

;; tuple0_inversion
  (assert (forall ((u tuple0)) (= u Tuple0)))

;; bool_inversion
  (assert (forall ((u Bool)) (or (= u true) (= u false))))

;; match_bool_False
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni))
  (=> (sort a z1) (= (match_bool a false z z1) z1)))))

;; match_bool_True
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni)) (=> (sort a z) (= (match_bool a true z z1) z)))))

;; match_bool_sort
  (assert
  (forall ((a ty))
  (forall ((x Bool) (x1 uni) (x2 uni)) (sort a (match_bool a x x1 x2)))))

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(push)
(check-sat)
(get-model)
