<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/>
<path name="qbricks.mlw"/>
<theory name="Circuit" proved="true">
 <goal name="VC width" expl="VC for width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC width.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC range" expl="VC for range" proved="true">
 <proof prover="2"><result status="valid" time="1.78" steps="214"/></proof>
 </goal>
 <goal name="VC basis_ket" expl="VC for basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC basis_ket.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC basis_ket.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC basis_ket.0.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC basis_ket.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC basis_ket.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
       <goal name="VC basis_ket.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.22"/></proof>
        </goal>
        <goal name="VC basis_ket.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.23"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_ket.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.22"/></proof>
        </goal>
        <goal name="VC basis_ket.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.25"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_ket.0.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket.0.0.0.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.41" steps="234"/></proof>
        </goal>
        <goal name="VC basis_ket.0.0.0.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.15"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC basis_ket.0.0.0.1" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC basis_ket.0.0.0.1.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
       <goal name="VC basis_ket.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.25"/></proof>
        </goal>
        <goal name="VC basis_ket.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.19"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_ket.0.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket.0.0.0.1.0.1.0" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.18"/></proof>
        </goal>
        <goal name="VC basis_ket.0.0.0.1.0.1.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.52"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC basis_ket.0.0.0.1.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC basis_ket.0.0.0.1.0.2.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.41" steps="234"/></proof>
        </goal>
        <goal name="VC basis_ket.0.0.0.1.0.2.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.19"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_width" expl="VC for circ_to_pps_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_width.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.18" steps="212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_range" expl="VC for circ_to_pps_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_range.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.19" steps="212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_basis_ket" expl="VC for circ_to_pps_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_basis_ket.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.77" steps="212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_basis_ket_gen" expl="VC for circ_to_pps_basis_ket_gen" proved="true">
 <proof prover="5"><result status="valid" time="1.22"/></proof>
 </goal>
 <goal name="VC circ_to_pps_angle" expl="VC for circ_to_pps_angle" proved="true">
 <proof prover="2"><result status="valid" time="2.02" steps="212"/></proof>
 </goal>
 <goal name="VC path_sem_basis" expl="VC for path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31" steps="218"/></proof>
  </goal>
  <goal name="VC path_sem_basis.1" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H2">
   <goal name="VC path_sem_basis.1.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="2.14" steps="235"/></proof>
   </goal>
   <goal name="VC path_sem_basis.1.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="1.93" steps="235"/></proof>
   </goal>
   <goal name="VC path_sem_basis.1.2" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.33" steps="230"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_sem_basis.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
  </goal>
  <goal name="VC path_sem_basis.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="240"/></proof>
  </goal>
  <goal name="VC path_sem_basis.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="218"/></proof>
  </goal>
  <goal name="VC path_sem_basis.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
  </goal>
  <goal name="VC path_sem_basis.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.34" steps="228"/></proof>
  </goal>
  <goal name="VC path_sem_basis.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="4.24" steps="240"/></proof>
  </goal>
  <goal name="VC path_sem_basis.8" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC path_sem_basis.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC path_sem_basis.8.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_ket_l">
     <goal name="VC path_sem_basis.8.0.0.0" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="(width c)">
      <goal name="VC path_sem_basis.8.0.0.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC path_sem_basis.8.0.0.0.0.0" proved="true">
       <proof prover="5"><result status="valid" time="1.26"/></proof>
       </goal>
       <goal name="VC path_sem_basis.8.0.0.0.0.1" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC path_sem_basis.8.0.0.0.0.1.0" proved="true">
        <transf name="replace" proved="true" arg1="(width c)" arg2="(h_width (circ_to_pps c))">
         <goal name="VC path_sem_basis.8.0.0.0.0.1.0.0" proved="true">
         <transf name="apply" proved="true" arg1="pps_apply_basis_spec1">
          <goal name="VC path_sem_basis.8.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="2.70"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_basis.8.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="5"><result status="valid" time="3.76"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_basis.8.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_basis.8.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
       <goal name="VC path_sem_basis.8.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_hyp" proved="true" >
        <goal name="VC path_sem_basis.8.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="circ_to_pps_width">
          <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="circ_to_pps_range">
           <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="circ_to_pps_angle">
            <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="assert" proved="true" arg1="(forall x x&#39; i. x = x&#39; -&gt;get_ket x i = get_ket x&#39; i)">
             <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="2"><result status="valid" time="1.95" steps="262"/></proof>
             </goal>
             <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="h">
              <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_eq_gen">
               <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.71" steps="260"/></proof>
                </goal>
                <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.66" steps="260"/></proof>
                </goal>
                <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.74" steps="260"/></proof>
                </goal>
                <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.0.3.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.0.3.0.0" expl="apply premises" proved="true">
                  <proof prover="5"><result status="valid" time="3.44"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC path_sem_basis.8.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_basis.8.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_to_bv_length">
        <goal name="VC path_sem_basis.8.0.0.1.0.1.0" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="0.53"/></proof>
        </goal>
        <goal name="VC path_sem_basis.8.0.0.1.0.1.1" expl="apply premises" proved="true">
        <proof prover="5"><result status="valid" time="1.30"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_basis_apply" expl="VC for path_sem_basis_apply" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis_apply.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.59" steps="216"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC apply_path_sem_basis" expl="VC for apply_path_sem_basis" proved="true">
 <proof prover="2"><result status="valid" time="3.16" steps="216"/></proof>
 </goal>
 <goal name="VC path_sem" expl="VC for path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.52" steps="228"/></proof>
  </goal>
  <goal name="VC path_sem.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.30" steps="229"/></proof>
  </goal>
  <goal name="VC path_sem.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.27" steps="214"/></proof>
  </goal>
  <goal name="VC path_sem.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.24" steps="218"/></proof>
  </goal>
  <goal name="VC path_sem.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.26" steps="228"/></proof>
  </goal>
  <goal name="VC path_sem.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_def">
   <goal name="VC path_sem.5.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC path_sem.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="result_def">
     <goal name="VC path_sem.5.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
      <goal name="VC path_sem.5.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.54" steps="244"/></proof>
      </goal>
      <goal name="VC path_sem.5.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="1.29"/></proof>
      </goal>
      <goal name="VC path_sem.5.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="2.67"/></proof>
      </goal>
      <goal name="VC path_sem.5.0.0.0.3" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem.5.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem.5.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem.5.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_basis_spec">
          <goal name="VC path_sem.5.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="3.27"/></proof>
          </goal>
          <goal name="VC path_sem.5.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="2.66"/></proof>
          </goal>
          <goal name="VC path_sem.5.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="2.83"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem.5.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="2.37"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_apply" expl="VC for path_sem_apply" proved="true">
 <proof prover="2"><result status="valid" time="3.08" steps="214"/></proof>
 </goal>
 <goal name="VC apply_path_sem" expl="VC for apply_path_sem" proved="true">
 <proof prover="2"><result status="valid" time="3.00" steps="214"/></proof>
 </goal>
 <goal name="VC path_sem_basis_ket_l" expl="VC for path_sem_basis_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_basis_ket_l.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.01" steps="218"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_ket_l" expl="VC for path_sem_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket_l.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.10" steps="216"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_ket" expl="VC for path_sem_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC path_sem_ket.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_l_to_ket_gen">
    <goal name="VC path_sem_ket.0.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(width c)">
     <goal name="VC path_sem_ket.0.0.0.0" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_ket_l">
      <goal name="VC path_sem_ket.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.38" steps="212"/></proof>
      </goal>
      <goal name="VC path_sem_ket.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.28" steps="212"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_ket_length" expl="VC for path_sem_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_ket_length.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC path_sem_ket_length.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_l_to_ket">
    <goal name="VC path_sem_ket_length.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.12" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_to_ket_l" expl="VC for path_sem_to_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_to_ket_l.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.54" steps="216"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_path_sem" expl="VC for get_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_path_sem.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_def">
   <goal name="VC get_path_sem.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="VC get_path_sem.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.46" steps="214"/></proof>
    </goal>
    <goal name="VC get_path_sem.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.52" steps="212"/></proof>
    </goal>
    <goal name="VC get_path_sem.0.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.64" steps="212"/></proof>
    </goal>
    <goal name="VC get_path_sem.0.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC get_path_sem.0.0.3.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC get_path_sem.0.0.3.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(length a)" arg2="(width c)">
       <goal name="VC get_path_sem.0.0.3.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.57" steps="214"/></proof>
       </goal>
       <goal name="VC get_path_sem.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="3.60" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_path_sem.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.58" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_path_sem_basis" expl="VC for get_path_sem_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_path_sem_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem">
   <goal name="VC get_path_sem_basis.0.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(width c &gt; 0)">
    <goal name="VC get_path_sem_basis.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_sum_l_null_but_maybe_one_elt" arg2="(fun y -&gt; get_ket x (bv_to_int y) *.. path_sem_basis c (bv_to_ket y)),(n_bvs (width c)),(ket_to_bv x),(width c)">
     <goal name="VC get_path_sem_basis.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC get_path_sem_basis.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC get_path_sem_basis.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_ket (ket_to_bv x))" arg2="x">
        <goal name="VC get_path_sem_basis.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(get_ket x (bv_to_int (ket_to_bv x)))" arg2="c_one">
         <goal name="VC get_path_sem_basis.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="3.31" steps="219"/></proof>
         </goal>
         <goal name="VC get_path_sem_basis.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.13"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC get_path_sem_basis.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="3.20" steps="219"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC get_path_sem_basis.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.53" steps="216"/></proof>
      </goal>
      <goal name="VC get_path_sem_basis.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="n_bvs_card">
       <goal name="VC get_path_sem_basis.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="assert" proved="true" arg1="(width c &gt; 0)">
        <goal name="VC get_path_sem_basis.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.52" steps="216"/></proof>
        </goal>
        <goal name="VC get_path_sem_basis.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.27" steps="219"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC get_path_sem_basis.0.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.53" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC get_path_sem_basis.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC get_path_sem_basis.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.43"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC get_path_sem_basis.0.0.0.0.4" expl="rewrite premises" proved="true">
      <transf name="replace" proved="true" arg1="(width c)" arg2="(length (ket_to_bv x))">
       <goal name="VC get_path_sem_basis.0.0.0.0.4.0" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.71" steps="219"/></proof>
       </goal>
       <goal name="VC get_path_sem_basis.0.0.0.0.4.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="1.23"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC get_path_sem_basis.0.0.0.0.5" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC get_path_sem_basis.0.0.0.0.5.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0" expl="rewrite premises" proved="true">
        <transf name="replace" proved="true" arg1="(get_ket x (bv_to_int e&#39;))" arg2="c_zero">
         <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="3.80" steps="223"/></proof>
         </goal>
         <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="replace" proved="true" arg1="x" arg2="(bv_to_ket (ket_to_bv x))">
          <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="get_ket_bv_to_ket_length">
           <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.0" expl="equality hypothesis" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
             <transf name="replace" proved="true" arg1="e&#39;" arg2="(ket_to_bv (bv_to_ket e&#39;))" arg3="in" arg4="H1">
              <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
              <proof prover="0"><result status="valid" time="1.31"/></proof>
              </goal>
              <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="3.51" steps="225"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="0.55" steps="222"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="3.75" steps="223"/></proof>
            </goal>
            <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.1.1" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(length (ket_to_bv x))" arg2="(length e&#39;)">
             <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="3.61" steps="223"/></proof>
             </goal>
             <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
             <proof prover="0"><result status="valid" time="1.19"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC get_path_sem_basis.0.0.0.0.5.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="3.40" steps="223"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC get_path_sem_basis.0.0.1" expl="false case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC get_path_sem_basis.0.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC get_path_sem_basis.0.0.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(choose (n_bvs (width c)))" arg2="(ket_to_bv x)">
       <goal name="VC get_path_sem_basis.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_ket (ket_to_bv x))" arg2="x">
        <goal name="VC get_path_sem_basis.0.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(get_ket x (bv_to_int (ket_to_bv x)))" arg2="c_one">
         <goal name="VC get_path_sem_basis.0.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="3.53" steps="218"/></proof>
         </goal>
         <goal name="VC get_path_sem_basis.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="3.76" steps="218"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC get_path_sem_basis.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="3.51" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC get_path_sem_basis.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="get_choose_cardone">
        <goal name="VC get_path_sem_basis.0.0.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.28" steps="218"/></proof>
        </goal>
        <goal name="VC get_path_sem_basis.0.0.1.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.27" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC get_path_sem_basis.0.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="3.57" steps="218"/></proof>
     </goal>
     <goal name="VC get_path_sem_basis.0.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="3.55" steps="218"/></proof>
     </goal>
     <goal name="VC get_path_sem_basis.0.0.1.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC get_path_sem_basis.0.0.1.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC get_path_sem_basis.0.0.1.3.0.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC get_path_sem_basis.0.0.1.3.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="path_sem_basis_spec1">
         <goal name="VC get_path_sem_basis.0.0.1.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.53" steps="218"/></proof>
         </goal>
         <goal name="VC get_path_sem_basis.0.0.1.3.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.50" steps="218"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_path_sem_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.55" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_parallel" expl="VC for circ_to_pps_parallel" proved="true">
 <proof prover="2"><result status="valid" time="3.11" steps="252"/></proof>
 </goal>
 <goal name="VC parallel_width" expl="VC for parallel_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_width.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_width.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="width_def">
    <goal name="VC parallel_width.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC parallel_width.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="parallel_spec2">
      <goal name="VC parallel_width.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="5"><result status="valid" time="1.79"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_range" expl="VC for parallel_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_range.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_range.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="range_def">
    <goal name="VC parallel_range.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="range_def">
     <goal name="VC parallel_range.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="range_def">
      <goal name="VC parallel_range.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel">
       <goal name="VC parallel_range.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="5"><result status="valid" time="1.64"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_basis_ket" expl="VC for parallel_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_basis_ket.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_basis_ket.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_def">
    <goal name="VC parallel_basis_ket.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_ket_def">
     <goal name="VC parallel_basis_ket.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel">
      <goal name="VC parallel_basis_ket.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC parallel_basis_ket.0.0.0.0.0.0" expl="VC for parallel_basis_ket" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC parallel_basis_ket.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC parallel_basis_ket.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="5"><result status="valid" time="2.11"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_par_spec1">
          <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="basis_ket_def">
           <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="(h_width (circ_to_pps d))" arg2="(width d)">
            <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0.0.0.0" expl="postcondition" proved="true">
            <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
             <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0.0.0.0.0" expl="postcondition" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="5"><result status="valid" time="1.73"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="5"><result status="valid" time="1.70"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC parallel_basis_ket.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="1.70"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_angle" expl="VC for parallel_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_angle.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC parallel_angle.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_def">
    <goal name="VC parallel_angle.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_ind_def">
     <goal name="VC parallel_angle.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC parallel_angle.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_angle">
       <goal name="VC parallel_angle.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ang_ind_def">
        <goal name="VC parallel_angle.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="parallel_spec2">
         <goal name="VC parallel_angle.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_par_spec">
          <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="ang_add_eq">
           <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.68" steps="266"/></proof>
           </goal>
           <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width (circ_to_pps d))" arg2="(width d)">
            <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
             <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ang_ind_def">
              <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="5"><result status="valid" time="1.80"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC parallel_angle.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="5"><result status="valid" time="1.90"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_sequence" expl="VC for circ_to_pps_sequence" proved="true">
 <proof prover="2"><result status="valid" time="3.71" steps="254"/></proof>
 </goal>
 <goal name="VC sequence_width" expl="VC for sequence_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_width.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sequence_width.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC sequence_width.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="width_def">
     <goal name="VC sequence_width.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="width_def">
      <goal name="VC sequence_width.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence">
       <goal name="VC sequence_width.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="5"><result status="valid" time="2.12"/></proof>
       </goal>
       <goal name="VC sequence_width.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.81" steps="268"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_range" expl="VC for sequence_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_range.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC sequence_range.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC sequence_range.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="range_def">
     <goal name="VC sequence_range.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="range_def">
      <goal name="VC sequence_range.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="range_def">
       <goal name="VC sequence_range.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence">
        <goal name="VC sequence_range.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="5"><result status="valid" time="1.80"/></proof>
        </goal>
        <goal name="VC sequence_range.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.83" steps="268"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_basis_ket" expl="VC for sequence_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_basis_ket.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sequence_basis_ket.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_def">
    <goal name="VC sequence_basis_ket.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_ket_def">
     <goal name="VC sequence_basis_ket.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence">
      <goal name="VC sequence_basis_ket.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sequence_basis_ket.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_seq_spec1">
         <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="basis_ket_def">
          <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
           <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="(fun (y3:int) -&gt; ((h_basis_ket (circ_to_pps d) @ x) @ y) @ y3)" arg2="((h_basis_ket (circ_to_pps d) @ x) @ y)">
            <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="0.71" steps="268"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="5"><result status="valid" time="1.60"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sequence_basis_ket.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="1.71"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sequence_basis_ket.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.73" steps="268"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_angle" expl="VC for sequence_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_angle.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sequence_angle.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ang_ind_def">
    <goal name="VC sequence_angle.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_ind_def">
     <goal name="VC sequence_angle.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ang_ind_def">
      <goal name="VC sequence_angle.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence">
       <goal name="VC sequence_angle.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC sequence_angle.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC sequence_angle.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_seq_spec">
          <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="basis_ket_def">
           <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="replace" proved="true" arg1="(h_range (circ_to_pps d))" arg2="(range d)">
            <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="apply" proved="true" arg1="ang_add_eq">
             <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.82" steps="268"/></proof>
             </goal>
             <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(fun (y3:int) -&gt; ((h_basis_ket (circ_to_pps d) @ x) @ y) @ y3)" arg2="((h_basis_ket (circ_to_pps d) @ x) @ y)">
              <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
              </transf>
              </goal>
              <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="0.93" steps="268"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="5"><result status="valid" time="1.64"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sequence_angle.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="1.68"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sequence_angle.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.91" steps="268"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC circ_to_pps_ancilla" expl="VC for circ_to_pps_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC circ_to_pps_ancilla.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC circ_to_pps_ancilla.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ancilla_spec2">
    <goal name="VC circ_to_pps_ancilla.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.69" steps="256"/></proof>
    </goal>
    <goal name="VC circ_to_pps_ancilla.0.0.1" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H">
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_width" expl="VC for ancilla_width" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_width.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_width.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="width_def">
    <goal name="VC ancilla_width.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="width_def">
     <goal name="VC ancilla_width.0.0.0.0" expl="postcondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC ancilla_width.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla">
       <goal name="VC ancilla_width.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_anc_spec3">
        <goal name="VC ancilla_width.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="VC ancilla_width.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.74"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ancilla_width.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.76" steps="272"/></proof>
       </goal>
       <goal name="VC ancilla_width.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="H">
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_range" expl="VC for ancilla_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_range.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC ancilla_range.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ancilla_range.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="range_def">
     <goal name="VC ancilla_range.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="range_def">
      <goal name="VC ancilla_range.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ancilla_range.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla">
        <goal name="VC ancilla_range.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_anc_spec2">
         <goal name="VC ancilla_range.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC ancilla_range.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="1.85"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_range.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.85" steps="268"/></proof>
        </goal>
        <goal name="VC ancilla_range.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="exists" proved="true" arg1="path_sem_target">
         <goal name="VC ancilla_range.0.0.0.0.0.0.2.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC ancilla_range.0.0.0.0.0.0.2.0.0" proved="true">
          <transf name="apply" proved="true" arg1="H1">
           <goal name="VC ancilla_range.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.87" steps="270"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_basis_ket" expl="VC for ancilla_basis_ket" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_basis_ket.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_basis_ket.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="basis_ket_def">
    <goal name="VC ancilla_basis_ket.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="basis_ket_def">
     <goal name="VC ancilla_basis_ket.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla">
      <goal name="VC ancilla_basis_ket.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC ancilla_basis_ket.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_anc_spec1">
        <goal name="VC ancilla_basis_ket.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(h_width (circ_to_pps c))" arg2="(width c)">
         <goal name="VC ancilla_basis_ket.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC ancilla_basis_ket.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="5"><result status="valid" time="1.73"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_basis_ket.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.76"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ancilla_basis_ket.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.73" steps="272"/></proof>
      </goal>
      <goal name="VC ancilla_basis_ket.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="6.78"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_angle" expl="VC for ancilla_angle" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_angle.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC ancilla_angle.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC ancilla_angle.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ang_ind_def">
     <goal name="VC ancilla_angle.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ang_ind_def">
      <goal name="VC ancilla_angle.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla">
       <goal name="VC ancilla_angle.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_anc_spec">
        <goal name="VC ancilla_angle.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(h_width (circ_to_pps c))" arg2="(width c)">
         <goal name="VC ancilla_angle.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC ancilla_angle.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="5"><result status="valid" time="1.91"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_angle.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.81"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ancilla_angle.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.75" steps="272"/></proof>
       </goal>
       <goal name="VC ancilla_angle.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="4"><result status="valid" time="0.14"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sequence_eq" expl="VC for sequence_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sequence_eq.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60" steps="256"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_eq" expl="VC for ancilla_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_eq.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.62" steps="254"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC parallel_eq" expl="VC for parallel_eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC parallel_eq.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.43" steps="254"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Mats_for_sem" proved="true">
 <goal name="VC sem_id_mat" expl="VC for sem_id_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sem_id_mat.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.36" steps="210"/></proof>
  </goal>
  <goal name="VC sem_id_mat.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.38" steps="210"/></proof>
  </goal>
  <goal name="VC sem_id_mat.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.24" steps="218"/></proof>
  </goal>
  <goal name="VC sem_id_mat.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.55" steps="218"/></proof>
  </goal>
  <goal name="VC sem_id_mat.4" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_id_mat.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_id_mat.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_id_mat.4.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_id_mat.4.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
       <goal name="VC sem_id_mat.4.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
        <goal name="VC sem_id_mat.4.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x )">
         <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="case" proved="true" arg1="(bv_to_int x = 0)">
          <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="add_ket_l_null">
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
            <proof prover="2"><result status="valid" time="3.59" steps="225"/></proof>
            </goal>
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H3">
             <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="3.66" steps="225"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="3.37" steps="225"/></proof>
           </goal>
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="5"><result status="valid" time="1.43"/></proof>
           </goal>
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="set_null_mat">
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="H4">
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="scalar_values">
                <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="zero_mult_t">
                 <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.98" steps="227"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1" expl="false case (postcondition)" proved="true">
          <transf name="rewrite" proved="true" arg1="H3">
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0" expl="false case (postcondition)" proved="true">
           <transf name="rewrite" proved="true" arg1="H3">
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0" expl="false case (postcondition)" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
             <transf name="rewrite" proved="true" arg1="null_add_ket_l">
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
              <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="false case (postcondition)" proved="true">
               <proof prover="0"><result status="valid" time="1.22"/></proof>
               </goal>
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.49"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="3.22" steps="225"/></proof>
              </goal>
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="5"><result status="valid" time="1.55"/></proof>
              </goal>
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="set_null_mat">
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="scalar_values">
                 <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="zero_mult_t">
                  <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="3.52" steps="227"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_id_mat.4.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="3.65" steps="223"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_id_mat.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.60" steps="221"/></proof>
        </goal>
        <goal name="VC sem_id_mat.4.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.81" steps="223"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_id_mat.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.67" steps="221"/></proof>
       </goal>
       <goal name="VC sem_id_mat.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.45" steps="223"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_id_mat.4.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.52" steps="221"/></proof>
     </goal>
     <goal name="VC sem_id_mat.4.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_id_mat.4.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_id_mat.4.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="3.12" steps="223"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_id_mat.4.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.12" steps="223"/></proof>
   </goal>
   <goal name="VC sem_id_mat.4.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.41"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_id_mat.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="1.44"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_rz_mat" expl="VC for sem_rz_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sem_rz_mat.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.49" steps="216"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.51" steps="216"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.62" steps="210"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.63" steps="210"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.41" steps="218"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.54" steps="218"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_rz_mat.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_rz_mat.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_rz_mat.6.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_rz_mat.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
       <goal name="VC sem_rz_mat.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
        <goal name="VC sem_rz_mat.6.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="H4">
          <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="H4">
           <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_rz_mat" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.55" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.56" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.58" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.59" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.57" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.57" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="add_ket_l_null">
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition" proved="true">
               <proof prover="5"><result status="valid" time="1.71"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.78" steps="228"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.91"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.40" steps="228"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.54" steps="226"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.53" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.9" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.10" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.54" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.11" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.53" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.12" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.13" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.50" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.14" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.15" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.16" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.17" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.18" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.49" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.19" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.20" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.40" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.21" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.50" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.22" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.23" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.37" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.24" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.38" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.25" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.39" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.26" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.59" steps="228"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="null_add_ket_l">
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.30"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.37" steps="230"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.61"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.36" steps="230"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.28" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.39" steps="228"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.29" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.43" steps="228"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.30" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.43" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.31" expl="postcondition" proved="true">
              <proof prover="0"><result status="valid" time="1.41"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="3.22" steps="225"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_rz_mat.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.53" steps="223"/></proof>
        </goal>
        <goal name="VC sem_rz_mat.6.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.31" steps="225"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_rz_mat.6.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.57" steps="223"/></proof>
       </goal>
       <goal name="VC sem_rz_mat.6.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.38" steps="225"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_rz_mat.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.57" steps="223"/></proof>
     </goal>
     <goal name="VC sem_rz_mat.6.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_rz_mat.6.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.57"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_rz_mat.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="4.21" steps="225"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_rz_mat.6.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="4.27" steps="225"/></proof>
   </goal>
   <goal name="VC sem_rz_mat.6.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_rz_mat.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_rz_mat.7.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_rz_mat.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_rz_mat.7.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_rz_mat.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
       <goal name="VC sem_rz_mat.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
        <goal name="VC sem_rz_mat.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="H5">
          <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="H5">
           <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_rz_mat" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.63" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.40" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.64" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.73" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.66" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.57" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="add_ket_l_null">
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition" proved="true">
               <proof prover="5"><result status="valid" time="1.60"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.33" steps="229"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.71"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.51" steps="229"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.72" steps="226"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.58" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.9" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.10" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.11" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.53" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.12" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.13" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.55" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.14" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.15" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.53" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.16" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.42" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.17" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.63" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.18" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.61" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.19" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.55" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.20" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.42" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.21" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.39" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.22" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.43" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.23" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.54" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.24" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.55" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.25" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.44" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.26" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.47" steps="234"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="null_add_ket_l">
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.23"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="2.94" steps="236"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.41"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.12" steps="236"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.28" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.47" steps="230"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="null_add_ket_l">
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.13"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.19" steps="232"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.46"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.18" steps="232"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.30" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.45" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.31" expl="postcondition" proved="true">
              <proof prover="0"><result status="valid" time="1.22"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="3.53" steps="226"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_rz_mat.7.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.66" steps="223"/></proof>
        </goal>
        <goal name="VC sem_rz_mat.7.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.45" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_rz_mat.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.57" steps="223"/></proof>
       </goal>
       <goal name="VC sem_rz_mat.7.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.11" steps="226"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_rz_mat.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.53" steps="223"/></proof>
     </goal>
     <goal name="VC sem_rz_mat.7.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_rz_mat.7.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.43"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_rz_mat.7.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="3.58" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_rz_mat.7.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.70" steps="226"/></proof>
   </goal>
   <goal name="VC sem_rz_mat.7.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_rz_mat.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_rz_apply_basis">
   <goal name="VC sem_rz_mat.8.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC sem_rz_mat.8.0.0" expl="VC for sem_rz_mat" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC sem_rz_mat.8.0.0.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.08"/></proof>
     </goal>
     <goal name="VC sem_rz_mat.8.0.0.1" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.18"/></proof>
     </goal>
     <goal name="VC sem_rz_mat.8.0.0.2" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.25"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_rz_mat.8.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.57" steps="221"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_phase_mat" expl="VC for sem_phase_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sem_phase_mat.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.61" steps="214"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.64" steps="214"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.63" steps="210"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.59" steps="210"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.35" steps="218"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.45" steps="218"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_phase_mat.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_phase_mat.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_phase_mat.6.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_phase_mat.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
       <goal name="VC sem_phase_mat.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
        <goal name="VC sem_phase_mat.6.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="H4">
          <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="H4">
           <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_phase_mat" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.60" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.56" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="add_ket_l_null">
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.36"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.14" steps="228"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.47"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.20" steps="228"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.54" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.54" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="null_add_ket_l">
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.20"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.04" steps="229"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.45"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.27" steps="229"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.58" steps="227"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition" proved="true">
              <proof prover="0"><result status="valid" time="1.30"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="3.24" steps="225"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_phase_mat.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.44" steps="223"/></proof>
        </goal>
        <goal name="VC sem_phase_mat.6.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.24" steps="225"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_phase_mat.6.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.55" steps="223"/></proof>
       </goal>
       <goal name="VC sem_phase_mat.6.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.20" steps="225"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_phase_mat.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.57" steps="223"/></proof>
     </goal>
     <goal name="VC sem_phase_mat.6.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_phase_mat.6.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.56"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_phase_mat.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="3.26" steps="225"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_phase_mat.6.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.21" steps="225"/></proof>
   </goal>
   <goal name="VC sem_phase_mat.6.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_phase_mat.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_phase_mat.7.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_phase_mat.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_phase_mat.7.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_phase_mat.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
       <goal name="VC sem_phase_mat.7.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
        <goal name="VC sem_phase_mat.7.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="H5">
          <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="H5">
           <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_phase_mat" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.39" steps="229"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.42" steps="229"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="add_ket_l_null">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.18"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="2.96" steps="232"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.44"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.23" steps="232"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.45" steps="227"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition" proved="true">
              <proof prover="2"><result status="valid" time="0.42" steps="227"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="add_ket_l_null">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.26"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.31" steps="230"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.59"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.20" steps="230"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="null_add_ket_l">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.29"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.68" steps="233"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.85"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.60" steps="233"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition" proved="true">
              <transf name="rewrite" proved="true" arg1="null_add_ket_l">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.0" expl="postcondition" proved="true">
               <proof prover="0"><result status="valid" time="1.38"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.52" steps="231"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.2" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.64"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.3" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.42" steps="231"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition" proved="true">
              <proof prover="0"><result status="valid" time="1.38"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="3.21" steps="226"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_phase_mat.7.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.53" steps="223"/></proof>
        </goal>
        <goal name="VC sem_phase_mat.7.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.19" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_phase_mat.7.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.51" steps="223"/></proof>
       </goal>
       <goal name="VC sem_phase_mat.7.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.10" steps="226"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_phase_mat.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.56" steps="223"/></proof>
     </goal>
     <goal name="VC sem_phase_mat.7.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_phase_mat.7.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.52"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_phase_mat.7.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="3.24" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_phase_mat.7.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.23" steps="226"/></proof>
   </goal>
   <goal name="VC sem_phase_mat.7.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.53"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_phase_mat.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_phase_apply_basis">
   <goal name="VC sem_phase_mat.8.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC sem_phase_mat.8.0.0" expl="VC for sem_phase_mat" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC sem_phase_mat.8.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="3.23" steps="228"/></proof>
     </goal>
     <goal name="VC sem_phase_mat.8.0.0.1" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="3.53" steps="227"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_phase_mat.8.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="221"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_hadamard_mat" expl="VC for sem_hadamard_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sem_hadamard_mat.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.66" steps="210"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.43" steps="210"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.52" steps="210"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.86" steps="218"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.61" steps="218"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_hadamard_mat.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (ket 1 0))" arg2="1">
    <goal name="VC sem_hadamard_mat.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_hadamard_mat.5.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_hadamard_mat.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_scal_rev">
       <goal name="VC sem_hadamard_mat.5.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_ket_l_eq">
        <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.68" steps="219"/></proof>
        </goal>
        <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.70" steps="221"/></proof>
         </goal>
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H2">
          <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="one_mult_t">
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.52" steps="219"/></proof>
            </goal>
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="zero_mult_int">
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="3.27" steps="221"/></proof>
             </goal>
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="3.24" steps="221"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.32" steps="221"/></proof>
         </goal>
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H2">
          <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="one_mult_int">
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult_t">
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.57" steps="219"/></proof>
             </goal>
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.28"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="3.74" steps="221"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_hadamard_mat.5.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.80" steps="221"/></proof>
       </goal>
       <goal name="VC sem_hadamard_mat.5.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.38" steps="221"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_hadamard_mat.5.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.65" steps="219"/></proof>
     </goal>
     <goal name="VC sem_hadamard_mat.5.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_hadamard_mat.5.0.0.2.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC sem_hadamard_mat.5.0.0.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.53"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_hadamard_mat.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="3.28" steps="221"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_hadamard_mat.5.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.21" steps="221"/></proof>
   </goal>
   <goal name="VC sem_hadamard_mat.5.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.78"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_hadamard_mat.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_hadamard_mat.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (ket 1 1))" arg2="1">
    <goal name="VC sem_hadamard_mat.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_hadamard_mat.6.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_hadamard_mat.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_scal_rev">
       <goal name="VC sem_hadamard_mat.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="add_ket_l_eq">
        <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.60" steps="221"/></proof>
        </goal>
        <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_eq_gen">
         <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.62" steps="223"/></proof>
         </goal>
         <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="H3">
          <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="one_mult_t">
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.67" steps="221"/></proof>
            </goal>
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="zero_mult_int">
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="3.40" steps="223"/></proof>
             </goal>
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="3.25" steps="223"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H3">
         <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_assoc">
           <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq_gen">
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="3.13" steps="223"/></proof>
            </goal>
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult_int">
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="mult_eq_t_rev">
              <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="1.49"/></proof>
              </goal>
              <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.35" steps="221"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="3.51" steps="223"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_hadamard_mat.6.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.47" steps="223"/></proof>
       </goal>
       <goal name="VC sem_hadamard_mat.6.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.43"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_hadamard_mat.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.40" steps="221"/></proof>
     </goal>
     <goal name="VC sem_hadamard_mat.6.0.0.2" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC sem_hadamard_mat.6.0.0.2.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC sem_hadamard_mat.6.0.0.2.0.0" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.63"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_hadamard_mat.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="2.81" steps="223"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_hadamard_mat.6.1" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.48"/></proof>
   </goal>
   <goal name="VC sem_hadamard_mat.6.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_hadamard_mat.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_hadamard_apply_basis">
   <goal name="VC sem_hadamard_mat.7.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC sem_hadamard_mat.7.0.0" expl="VC for sem_hadamard_mat" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC sem_hadamard_mat.7.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(ket 1 0)">
      <goal name="VC sem_hadamard_mat.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H3">
       <goal name="VC sem_hadamard_mat.7.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.45" steps="227"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_hadamard_mat.7.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.00"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_hadamard_mat.7.0.0.1" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(ket 1 1)">
      <goal name="VC sem_hadamard_mat.7.0.0.1.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H2">
      </transf>
      </goal>
      <goal name="VC sem_hadamard_mat.7.0.0.1.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.21"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_hadamard_mat.7.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.51" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cnot_func" expl="VC for cnot_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cnot_func.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.36" steps="214"/></proof>
  </goal>
  <goal name="VC cnot_func.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.51" steps="216"/></proof>
  </goal>
  <goal name="VC cnot_func.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC cnot_func.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.82" steps="227"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60" steps="224"/></proof>
  </goal>
  <goal name="VC cnot_func.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.58" steps="220"/></proof>
  </goal>
  <goal name="VC cnot_func.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="1.70"/></proof>
  </goal>
  <goal name="VC cnot_func.6" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="1.56"/></proof>
  </goal>
  <goal name="VC cnot_func.7" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H4">
   <goal name="VC cnot_func.7.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.45" steps="223"/></proof>
   </goal>
   <goal name="VC cnot_func.7.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC cnot_func.7.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cnot_func.7.1.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H7">
      <goal name="VC cnot_func.7.1.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_bv">
       <goal name="VC cnot_func.7.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC cnot_func.7.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.63" steps="234"/></proof>
        </goal>
        <goal name="VC cnot_func.7.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.89"/></proof>
        </goal>
        <goal name="VC cnot_func.7.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.55" steps="230"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cnot_func.7.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC cnot_func.7.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="int_to_bv_value">
         <goal name="VC cnot_func.7.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="case" proved="true" arg1="(i = 0)">
          <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0" expl="true case (apply premises)" proved="true">
            <transf name="replace" proved="true" arg1="(div 3 (power 2 ((2 - i) - 1)))" arg2="1">
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
             <proof prover="2"><result status="valid" time="0.61" steps="238"/></proof>
             </goal>
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="replace" proved="true" arg1="(power 2 ((2 - i) - 1))" arg2="2">
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="238"/></proof>
              </goal>
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="4.47" steps="242"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.48" steps="243"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.67" steps="238"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="i" arg2="1">
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0" expl="false case (apply premises)" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0" expl="false case (apply premises)" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0" expl="false case (apply premises)" proved="true">
             <transf name="assert" proved="true" arg1="(forall a. a= 3 -&gt; mod a 2 = 1)">
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
              <proof prover="2"><result status="valid" time="0.63" steps="240"/></proof>
              </goal>
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1" expl="false case (apply premises)" proved="true">
              <transf name="rewrite" proved="true" arg1="h">
               <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.0" expl="false case (apply premises)" proved="true">
               <transf name="replace" proved="true" arg1="(getbv x @ 1)" arg2="0">
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
                <proof prover="2"><result status="valid" time="0.60" steps="239"/></proof>
                </goal>
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                <proof prover="2"><result status="valid" time="0.64" steps="239"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
               <transf name="assert" proved="true" arg1="(forall a. a = 1 -&gt; div 3 a = 3)">
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.1.0" expl="asserted formula" proved="true">
                <proof prover="2"><result status="valid" time="0.56" steps="241"/></proof>
                </goal>
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                <proof prover="5"><result status="valid" time="1.84"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.50" steps="243"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.51" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="0.46" steps="236"/></proof>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1.1" expl="rewrite premises" proved="true">
            <proof prover="5"><result status="valid" time="2.11"/></proof>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.58" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cnot_func.7.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.49" steps="236"/></proof>
         </goal>
         <goal name="VC cnot_func.7.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="2.04"/></proof>
         </goal>
         <goal name="VC cnot_func.7.1.0.0.0.1.0.3" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
          <goal name="VC cnot_func.7.1.0.0.0.1.0.3.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.69" steps="234"/></proof>
          </goal>
          <goal name="VC cnot_func.7.1.0.0.0.1.0.3.1" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="1.93"/></proof>
          </goal>
          <goal name="VC cnot_func.7.1.0.0.0.1.0.3.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.61" steps="236"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func.8" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H5">
   <goal name="VC cnot_func.8.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.58" steps="223"/></proof>
   </goal>
   <goal name="VC cnot_func.8.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC cnot_func.8.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC cnot_func.8.1.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_bv">
      <goal name="VC cnot_func.8.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="4.13" steps="235"/></proof>
      </goal>
      <goal name="VC cnot_func.8.1.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC cnot_func.8.1.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H8">
        <goal name="VC cnot_func.8.1.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC cnot_func.8.1.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(getbv x @ i)" arg2="1">
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="int_to_bv_value">
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="replace" proved="true" arg1="(power 2 ((2 - i) - 1))" arg2="2">
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.67" steps="236"/></proof>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="4.19" steps="241"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.56" steps="236"/></proof>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="3.73" steps="241"/></proof>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.56" steps="236"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="0.49" steps="236"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="i" arg2="1">
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(1 - (getbv x @ 1))" arg2="0">
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="int_to_bv_value">
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(power 2 ((2 - 1) - 1))" arg2="1">
               <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.47" steps="236"/></proof>
               </goal>
               <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="4.04" steps="241"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.71" steps="236"/></proof>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="4.21" steps="241"/></proof>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="236"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="0.62" steps="236"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="0.62" steps="236"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cnot_func.8.1.0.0.1.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.50" steps="234"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_cnot_func" expl="VC for invol_cnot_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC invol_cnot_func.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC invol_cnot_func.0.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(bv_to_int x = 0)">
    <goal name="VC invol_cnot_func.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="cnot_func_spec3">
     <goal name="VC invol_cnot_func.0.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="2"><result status="valid" time="3.40" steps="216"/></proof>
     </goal>
     <goal name="VC invol_cnot_func.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="3.33" steps="216"/></proof>
     </goal>
     <goal name="VC invol_cnot_func.0.0.0.2" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="cnot_func_spec3">
      <goal name="VC invol_cnot_func.0.0.0.2.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.28"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.0.2.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.36" steps="214"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.0.2.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.57" steps="214"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC invol_cnot_func.0.0.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(bv_to_int x = 1)">
     <goal name="VC invol_cnot_func.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="cnot_func_spec2">
      <goal name="VC invol_cnot_func.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
      <proof prover="2"><result status="valid" time="3.12" steps="218"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="3.15" steps="218"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.1.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="cnot_func_spec2">
       <goal name="VC invol_cnot_func.0.0.1.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.38"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.46" steps="216"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.0.2.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.51" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC invol_cnot_func.0.0.1.1" expl="false case (postcondition)" proved="true">
     <transf name="case" proved="true" arg1="(bv_to_int x = 2)">
      <goal name="VC invol_cnot_func.0.0.1.1.0" expl="false case (true case. postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="cnot_func_spec">
       <goal name="VC invol_cnot_func.0.0.1.1.0.0" expl="false case (true case. postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="3.14" steps="220"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.12" steps="220"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.1.0.2" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="cnot_func_spec1">
        <goal name="VC invol_cnot_func.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="bv_to_int_to_bv_">
         <goal name="VC invol_cnot_func.0.0.1.1.0.2.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.59" steps="218"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.0.2.0.1" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="1.66"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.46" steps="218"/></proof>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.37" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC invol_cnot_func.0.0.1.1.1" expl="false case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(bv_to_int x = 3)">
       <goal name="VC invol_cnot_func.0.0.1.1.1.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="(0&lt;= bv_to_int x &lt;4)">
        <goal name="VC invol_cnot_func.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
        <transf name="replace" proved="true" arg1="4" arg2="(power  2 (length x))">
         <goal name="VC invol_cnot_func.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="3.27" steps="219"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.1.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="3.00" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.1.0.1" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="0.48" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.1.1.1" expl="false case (postcondition)" proved="true">
       <transf name="rewrite" proved="true" arg1="cnot_func_spec1">
        <goal name="VC invol_cnot_func.0.0.1.1.1.1.0" expl="false case (postcondition)" proved="true">
        <proof prover="2"><result status="valid" time="2.96" steps="222"/></proof>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.98" steps="222"/></proof>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.1.1.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="cnot_func_spec">
         <goal name="VC invol_cnot_func.0.0.1.1.1.1.2.0" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="1.71"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.1.1.2.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.48" steps="220"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.1.1.2.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.35" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cnot_func_int" expl="VC for cnot_func_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC cnot_func_int.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.37" steps="210"/></proof>
  </goal>
  <goal name="VC cnot_func_int.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.52" steps="214"/></proof>
  </goal>
  <goal name="VC cnot_func_int.2" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="4" arg2="(power 2 2)">
   <goal name="VC cnot_func_int.2.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="3.47" steps="226"/></proof>
   </goal>
   <goal name="VC cnot_func_int.2.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="3.49" steps="226"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.23"/></proof>
  </goal>
  <goal name="VC cnot_func_int.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cnot_func_int.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cnot_func_int.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC cnot_func_int.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.4.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.64" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.68" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.52"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_func_int.4.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.4.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.66" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.67" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cnot_func_int.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cnot_func_int.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC cnot_func_int.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.5.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.78" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.67" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.55"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_func_int.5.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.5.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.80" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.75" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.49"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC cnot_func_int.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC cnot_func_int.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC cnot_func_int.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.6.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.53" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.69" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.50"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_func_int.6.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.6.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.67" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.54" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.50"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.7" expl="postcondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC cnot_func_int.7.0" expl="VC for cnot_func_int" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC cnot_func_int.7.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.51" steps="239"/></proof>
    </goal>
    <goal name="VC cnot_func_int.7.0.1" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(i = 2)">
     <goal name="VC cnot_func_int.7.0.1.0" expl="true case (postcondition)" proved="true">
     <proof prover="2"><result status="valid" time="0.42" steps="232"/></proof>
     </goal>
     <goal name="VC cnot_func_int.7.0.1.1" expl="false case (postcondition)" proved="true">
     <transf name="assert" proved="true" arg1="(i =3)">
      <goal name="VC cnot_func_int.7.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.45" steps="230"/></proof>
      </goal>
      <goal name="VC cnot_func_int.7.0.1.1.1" expl="false case (postcondition)" proved="true">
      <proof prover="2"><result status="valid" time="0.55" steps="234"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_cnot_func_int" expl="VC for invol_cnot_func_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC invol_cnot_func_int.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.55" steps="224"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_cnot_mat" expl="VC for sem_cnot_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sem_cnot_mat.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.51" steps="218"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.54" steps="219"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.38" steps="226"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.55" steps="226"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC sem_cnot_mat.4.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.33" steps="229"/></proof>
   </goal>
   <goal name="VC sem_cnot_mat.4.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.07" steps="229"/></proof>
   </goal>
   <goal name="VC sem_cnot_mat.4.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC sem_cnot_mat.4.2.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H3">
     <goal name="VC sem_cnot_mat.4.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC sem_cnot_mat.4.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sem_cnot_mat.4.2.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="1.58"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_cnot_mat.4.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.43"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.4.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.51"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_cnot_mat.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="2">
    <goal name="VC sem_cnot_mat.5.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_sum_l_null_but_maybe_one_elt" arg2="(fun (bvx:bitvec) -&gt;
    get result (bv_to_int bvx) (ket_to_int (bv_to_ket x))
    *.. ket (ket_length (bv_to_ket x)) (bv_to_int bvx)),(n_bvs 2),(cnot_func x),2">
     <goal name="VC sem_cnot_mat.5.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="2" arg3="in" arg4="Hinst">
      <goal name="VC sem_cnot_mat.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="Hinst">
       <goal name="VC sem_cnot_mat.5.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="eliminate_definition" proved="true" >
          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="ket_eq">
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.66" steps="247"/></proof>
            </goal>
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.52" steps="249"/></proof>
              </goal>
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="1.57"/></proof>
              </goal>
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="int_to_bv_spec1">
                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1.0.2.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.70" steps="251"/></proof>
                </goal>
                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.1.0.2.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="0.55" steps="251"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="5.96"/></proof>
              </goal>
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="1.50"/></proof>
              </goal>
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="bv_to_int_eq">
               <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0" expl="apply premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="cnot_func_spec">
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.76" steps="251"/></proof>
                 </goal>
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1" expl="apply premises" proved="true">
                 <transf name="assert" proved="true" arg1="(2&lt;= bv_to_int x &lt;4)">
                  <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0" expl="asserted formula" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0" expl="asserted formula" proved="true">
                   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                    <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0" expl="asserted formula" proved="true">
                    <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
                     <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                     <transf name="rewrite" proved="true" arg1="ind_isum_one">
                      <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                       <transf name="rewrite" proved="true" arg1="one_mult_int">
                        <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                        <transf name="rewrite" proved="true" arg1="mult_one_int">
                         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                         <proof prover="5"><result status="valid" time="1.70"/></proof>
                         </goal>
                         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.60"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="5"><result status="valid" time="1.82"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.52" steps="251"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.54" steps="251"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.0.1" expl="asserted formula" proved="true">
                   <proof prover="5"><result status="valid" time="1.73"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.55" steps="255"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H4">
           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(bv_to_int x = cnot_func_int (bv_to_int (cnot_func x)))">
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="rewrite" proved="true" arg1="cnot_func_int_def">
               <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="5"><result status="valid" time="1.57"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.51" steps="233"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="3.04" steps="234"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.55" steps="231"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.61"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC sem_cnot_mat.5.0.0.0.0.3.0" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.70"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.4" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.94" steps="233"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.5" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="set_null_mat">
          <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_values">
            <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="zero_mult_t">
             <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="H7">
              <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="eliminate_if" proved="true" >
                <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="eliminate_definition" proved="true" >
                  <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="cnot_func_int_def" arg2="in" arg3="H">
                   <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="replace" proved="true" arg1="x" arg2="(cnot_func e&#39;)" arg3="in" arg4="H2">
                    <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="1.50"/></proof>
                    </goal>
                    <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                    <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)" arg3="in" arg4="H">
                     <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                     <proof prover="5"><result status="valid" time="1.46"/></proof>
                     </goal>
                     <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                     <proof prover="5"><result status="valid" time="1.42"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.5.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.55" steps="239"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_cnot_mat.5.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="3.58" steps="234"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="3.54" steps="233"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.5.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="2.99" steps="233"/></proof>
   </goal>
   <goal name="VC sem_cnot_mat.5.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.46"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.6" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC sem_cnot_mat.6.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(if (getbv x @ 0) = 0 then x
      else int_to_bv (if bv_to_int x = 2 then 3 else 2) 2)" arg2="(cnot_func x)">
    <goal name="VC sem_cnot_mat.6.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(getbv x 0 = 0)">
     <goal name="VC sem_cnot_mat.6.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="0"><result status="valid" time="1.29"/></proof>
     </goal>
     <goal name="VC sem_cnot_mat.6.0.0.1" expl="false case (postcondition)" proved="true">
     <transf name="instantiate" proved="true" arg1="cnot_func_def" arg2="x">
      <goal name="VC sem_cnot_mat.6.0.0.1.0" expl="false case (postcondition)" proved="true">
      <transf name="destruct" proved="true" arg1="Hinst">
       <goal name="VC sem_cnot_mat.6.0.0.1.0.0" expl="destruct premise" proved="true">
       <proof prover="2"><result status="valid" time="0.55" steps="233"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.6.0.0.1.0.1" expl="false case (postcondition)" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0" expl="false case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(make_bv
        (fun (i:int) -&gt; if i = 0 then getbv x @ i else 1 - (getbv x @ i))2 )" arg2="(cnot_func x)">
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0.0" expl="false case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="0.53" steps="233"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0.1.0" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="1.35"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_cnot_mat.6.0.0.1.0.1.1" expl="false case (postcondition)" proved="true">
        <transf name="replace" proved="true" arg1="(make_bv
          (fun (i:int) -&gt; if i = 0 then getbv x @ i else 1 - (getbv x @ i)) 2)" arg2="(cnot_func x)">
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.1.0" expl="false case (postcondition)" proved="true">
         <proof prover="2"><result status="valid" time="0.39" steps="237"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="VC sem_cnot_mat.6.0.0.1.0.1.1.1.0" expl="equality hypothesis" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.6.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC sem_cnot_mat.6.0.1.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC sem_cnot_mat.6.0.1.0.0" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="3.50" steps="235"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.6.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="3.80" steps="237"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.6.0.1.0.2" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC sem_cnot_mat.6.0.1.0.2.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="cnot_func_spec">
        <goal name="VC sem_cnot_mat.6.0.1.0.2.0.0" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="0.56" steps="235"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.6.0.1.0.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.61" steps="235"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2" expl="rewrite premises" proved="true">
        <transf name="assert" proved="true" arg1="(0 &lt;= bv_to_int x &lt; power 2 (length x))">
         <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.0" expl="asserted formula" proved="true">
         <proof prover="2"><result status="valid" time="3.58" steps="236"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(power 2 (length x))" arg2="4" arg3="in" arg4="h">
          <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.1.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="3.48" steps="241"/></proof>
          </goal>
          <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="3.34" steps="241"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.6.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.55" steps="231"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket 2 i)" arg2="(bv_to_ket (int_to_bv i 2))">
   <goal name="VC sem_cnot_mat.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H3">
    <goal name="VC sem_cnot_mat.7.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC sem_cnot_mat.7.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
      <goal name="VC sem_cnot_mat.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_eq">
       <goal name="VC sem_cnot_mat.7.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="1.46"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="1.54"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="1.54"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_cnot_mat.7.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="int_to_bv_spec1">
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.84" steps="251"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.84" steps="251"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="int_to_bv_spec1">
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.91" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.80" steps="253"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="int_to_bv_spec1">
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.80" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.69" steps="253"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_cnot_mat.7.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(getbv (int_to_bv i 2) @ 0)" arg2="(div i 2)">
        <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
         <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0" expl="apply premises" proved="true">
         <transf name="eliminate_if" proved="true" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="1.49"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="1.77"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.71" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.78" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.4" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.79" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.5" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.77" steps="254"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.6" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="1.86"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.7" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.82" steps="255"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.8" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.79" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.9" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.79" steps="254"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.10" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.72" steps="255"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.11" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="1.59"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.65" steps="249"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.75" steps="249"/></proof>
          </goal>
          <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.2.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.73" steps="249"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_cnot_mat.7.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
        <proof prover="5"><result status="valid" time="1.67"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.7.0.1" expl="rewrite premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC sem_cnot_mat.7.0.1.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="int_to_bv_spec1">
      <goal name="VC sem_cnot_mat.7.0.1.0.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.37" steps="233"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.7.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.50" steps="233"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.7.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC sem_cnot_mat.8.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(if (getbv x @ 0) = 0 then x
   else int_to_bv (if bv_to_int x = 2 then 3 else 2) 2)" arg2="(cnot_func x)">
    <goal name="VC sem_cnot_mat.8.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.8.0.1" expl="equality hypothesis" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC sem_cnot_mat.8.0.1.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC sem_cnot_mat.8.0.1.0.0" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="3.27" steps="241"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.8.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="3.43" steps="243"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.8.0.1.0.2" expl="equality hypothesis" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC sem_cnot_mat.8.0.1.0.2.0" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="cnot_func_spec">
        <goal name="VC sem_cnot_mat.8.0.1.0.2.0.0" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="0.55" steps="241"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.8.0.1.0.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.58" steps="241"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
         <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
          <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ind_isum_one">
           <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult_int">
             <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="one_mult_int">
              <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.0" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(power 2 (length x - 1) )" arg2="2">
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.0.0" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.68" steps="243"/></proof>
               </goal>
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="3.66" steps="243"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="case" proved="true" arg1="(getbv x 1 = 0)">
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0" expl="true case (rewrite premises)" proved="true">
               <transf name="replace" proved="true" arg1="(bv_to_int x)" arg2="2" arg3="in" arg4="H">
                <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.0" expl="true case (rewrite premises)" proved="true">
                <proof prover="2"><result status="valid" time="0.55" steps="239"/></proof>
                </goal>
                <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                 <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
                 <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
                  <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
                  <transf name="rewrite" proved="true" arg1="ind_isum_one">
                   <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0" expl="equality hypothesis" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="one_mult_int">
                     <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
                     <transf name="rewrite" proved="true" arg1="zero_mult_int">
                      <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
                      <transf name="replace" proved="true" arg1="(power 2 (length x - 1) )" arg2="2">
                       <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
                       <proof prover="2"><result status="valid" time="0.60" steps="243"/></proof>
                       </goal>
                       <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                       <proof prover="2"><result status="valid" time="3.82" steps="245"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.68" steps="243"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="0"><result status="valid" time="1.54"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.60" steps="243"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.59" steps="243"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.1" expl="false case (rewrite premises)" proved="true">
               <proof prover="5"><result status="valid" time="1.77"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.41"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.60" steps="241"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.61" steps="241"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.8.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.39" steps="237"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_cnot_apply_basis">
   <goal name="VC sem_cnot_mat.9.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(ket 2 (bv_to_int x) )">
    <goal name="VC sem_cnot_mat.9.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC sem_cnot_mat.9.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC sem_cnot_mat.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="5"><result status="valid" time="1.59"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.9.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="3.60" steps="239"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.9.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.61" steps="237"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC swap_func" expl="VC for swap_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC swap_func.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.44" steps="222"/></proof>
  </goal>
  <goal name="VC swap_func.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="3.72" steps="224"/></proof>
  </goal>
  <goal name="VC swap_func.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC swap_func.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.85" steps="229"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC swap_func.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.58" steps="228"/></proof>
  </goal>
  <goal name="VC swap_func.5" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="VC swap_func.5.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.33" steps="232"/></proof>
   </goal>
   <goal name="VC swap_func.5.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC swap_func.5.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC swap_func.5.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC swap_func.5.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="1.65"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.5.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.57" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.6" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="VC swap_func.6.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC swap_func.6.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="int_to_bv_spec1">
     <goal name="VC swap_func.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.59" steps="230"/></proof>
     </goal>
     <goal name="VC swap_func.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.58" steps="230"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC swap_func.6.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC swap_func.6.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H6">
     <goal name="VC swap_func.6.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC swap_func.6.1.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(getbv x 0 = 0 &amp;&amp; getbv x 1 = 1)">
       <goal name="VC swap_func.6.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.54" steps="234"/></proof>
       </goal>
       <goal name="VC swap_func.6.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="int_to_bv_value">
        <goal name="VC swap_func.6.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(i = 0)">
         <goal name="VC swap_func.6.1.0.0.0.1.0.0" expl="true case (apply premises)" proved="true">
         <transf name="replace" proved="true" arg1="(1 - (getbv x @ i))" arg2="1">
          <goal name="VC swap_func.6.1.0.0.0.1.0.0.0" expl="true case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(power 2 ((2 - i) - 1))" arg2="2">
           <goal name="VC swap_func.6.1.0.0.0.1.0.0.0.0" expl="true case (apply premises)" proved="true">
           <proof prover="2"><result status="valid" time="0.56" steps="238"/></proof>
           </goal>
           <goal name="VC swap_func.6.1.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="3.82" steps="241"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC swap_func.6.1.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.58" steps="238"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC swap_func.6.1.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
         <transf name="replace" proved="true" arg1="(1 - (getbv x @ i))" arg2="0">
          <goal name="VC swap_func.6.1.0.0.0.1.0.1.0" expl="false case (apply premises)" proved="true">
          <transf name="replace" proved="true" arg1="(power 2 ((2 - i) - 1))" arg2="1">
           <goal name="VC swap_func.6.1.0.0.0.1.0.1.0.0" expl="false case (apply premises)" proved="true">
           <proof prover="2"><result status="valid" time="0.55" steps="238"/></proof>
           </goal>
           <goal name="VC swap_func.6.1.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="3.73" steps="241"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC swap_func.6.1.0.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.59" steps="238"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC swap_func.6.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.58" steps="236"/></proof>
        </goal>
        <goal name="VC swap_func.6.1.0.0.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.63"/></proof>
        </goal>
        <goal name="VC swap_func.6.1.0.0.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.38" steps="236"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.6.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.7" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="VC swap_func.7.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC swap_func.7.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="int_to_bv_spec1">
     <goal name="VC swap_func.7.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.57" steps="230"/></proof>
     </goal>
     <goal name="VC swap_func.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.55" steps="230"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC swap_func.7.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC swap_func.7.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC swap_func.7.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC swap_func.7.1.0.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(getbv x 0 = 1 &amp;&amp; getbv x 1 = 0)">
       <goal name="VC swap_func.7.1.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="2"><result status="valid" time="0.55" steps="234"/></proof>
       </goal>
       <goal name="VC swap_func.7.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="int_to_bv_value">
        <goal name="VC swap_func.7.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="case" proved="true" arg1="(i = 0)">
         <goal name="VC swap_func.7.1.0.0.0.1.0.0" expl="true case (apply premises)" proved="true">
         <proof prover="2"><result status="valid" time="3.99" steps="242"/></proof>
         </goal>
         <goal name="VC swap_func.7.1.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
         <proof prover="0"><result status="valid" time="1.65"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC swap_func.7.1.0.0.0.1.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.57" steps="236"/></proof>
        </goal>
        <goal name="VC swap_func.7.1.0.0.0.1.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.77" steps="240"/></proof>
        </goal>
        <goal name="VC swap_func.7.1.0.0.0.1.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.58" steps="236"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.7.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.59" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.8" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_bv">
   <goal name="VC swap_func.8.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.40" steps="235"/></proof>
   </goal>
   <goal name="VC swap_func.8.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC swap_func.8.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H8">
     <goal name="VC swap_func.8.1.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC swap_func.8.1.0.0.0" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="1.69"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.8.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.54" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_swap_func" expl="VC for invol_swap_func" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC invol_swap_func.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC invol_swap_func.0.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(bv_to_int x = 0)">
    <goal name="VC invol_swap_func.0.0.0" expl="true case (postcondition)" proved="true">
    <proof prover="0"><result status="valid" time="1.06"/></proof>
    </goal>
    <goal name="VC invol_swap_func.0.0.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(bv_to_int x = 1)">
     <goal name="VC invol_swap_func.0.0.1.0" expl="false case (true case. postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="swap_func_spec1">
      <goal name="VC invol_swap_func.0.0.1.0.0" expl="false case (true case. postcondition)" proved="true">
      <proof prover="2"><result status="valid" time="3.02" steps="226"/></proof>
      </goal>
      <goal name="VC invol_swap_func.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="3.24" steps="226"/></proof>
      </goal>
      <goal name="VC invol_swap_func.0.0.1.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="swap_func_spec2">
       <goal name="VC invol_swap_func.0.0.1.0.2.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="bv_to_int_to_bv_">
        <goal name="VC invol_swap_func.0.0.1.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.54" steps="224"/></proof>
        </goal>
        <goal name="VC invol_swap_func.0.0.1.0.2.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.28" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.55" steps="224"/></proof>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.0.2.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.54" steps="224"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC invol_swap_func.0.0.1.1" expl="false case (postcondition)" proved="true">
     <transf name="case" proved="true" arg1="(bv_to_int x = 2)">
      <goal name="VC invol_swap_func.0.0.1.1.0" expl="false case (true case. postcondition)" proved="true">
      <transf name="rewrite" proved="true" arg1="swap_func_spec2">
       <goal name="VC invol_swap_func.0.0.1.1.0.0" expl="false case (true case. postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="3.22" steps="228"/></proof>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.13" steps="228"/></proof>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.1.0.2" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="swap_func_spec1">
        <goal name="VC invol_swap_func.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.66"/></proof>
        </goal>
        <goal name="VC invol_swap_func.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.35" steps="226"/></proof>
        </goal>
        <goal name="VC invol_swap_func.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.36" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC invol_swap_func.0.0.1.1.1" expl="false case (postcondition)" proved="true">
      <transf name="assert" proved="true" arg1="(bv_to_int x = 3)">
       <goal name="VC invol_swap_func.0.0.1.1.1.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
        <goal name="VC invol_swap_func.0.0.1.1.1.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
         <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0" expl="asserted formula" proved="true">
         <transf name="rewrite" proved="true" arg1="ind_isum_one">
          <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0" expl="asserted formula" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0" expl="asserted formula" proved="true">
           <transf name="rewrite" proved="true" arg1="one_mult_int">
            <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
            <transf name="rewrite" proved="true" arg1="one_mult_int">
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="5"><result status="valid" time="1.75"/></proof>
             </goal>
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="case" proved="true" arg1="(getbv x 1 = 0)">
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0" expl="true case (rewrite premises)" proved="true">
              <transf name="assert" proved="true" arg1="(mod (bv_to_int x) 2 = 0)">
               <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
               <proof prover="2"><result status="valid" time="3.22" steps="230"/></proof>
               </goal>
               <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1" expl="true case (rewrite premises)" proved="true">
               <transf name="assert" proved="true" arg1="(0&lt;= bv_to_int x &lt; 4)">
                <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.0" expl="asserted formula" proved="true">
                <transf name="replace" proved="true" arg1="4" arg2="(power 2 (length x))">
                 <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.0.0" expl="asserted formula" proved="true">
                 <proof prover="2"><result status="valid" time="3.15" steps="231"/></proof>
                 </goal>
                 <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="5"><result status="valid" time="1.72"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.1" expl="true case (rewrite premises)" proved="true">
                <proof prover="2"><result status="valid" time="0.50" steps="232"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.1" expl="false case (rewrite premises)" proved="true">
              <proof prover="5"><result status="valid" time="1.69"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="case" proved="true" arg1="((getbv x @ 0) = 0)">
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.0" expl="true case (rewrite premises)" proved="true">
             <transf name="assert" proved="true" arg1="(div (bv_to_int x) 2 = 0)">
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
              <proof prover="0"><result status="valid" time="1.14"/></proof>
              </goal>
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.0.1" expl="true case (rewrite premises)" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="228"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.1" expl="false case (rewrite premises)" proved="true">
             <proof prover="0"><result status="valid" time="1.43"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.54" steps="226"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC invol_swap_func.0.0.1.1.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.36" steps="226"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.1.1.1" expl="false case (postcondition)" proved="true">
       <proof prover="0"><result status="valid" time="1.33"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC swap_func_int" expl="VC for swap_func_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC swap_func_int.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.37" steps="218"/></proof>
  </goal>
  <goal name="VC swap_func_int.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.52" steps="222"/></proof>
  </goal>
  <goal name="VC swap_func_int.2" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_func_int.2.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="4" arg2="(power 2 (length (swap_func (int_to_bv i 2))))">
    <goal name="VC swap_func_int.2.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="1.21"/></proof>
    </goal>
    <goal name="VC swap_func_int.2.0.1" expl="equality hypothesis" proved="true">
    <proof prover="5"><result status="valid" time="1.18"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.24"/></proof>
  </goal>
  <goal name="VC swap_func_int.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_func_int.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC swap_func_int.4.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC swap_func_int.4.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.4.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.68" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.54" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.58"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func_int.4.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.4.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.68" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.67" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.55"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_func_int.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC swap_func_int.5.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC swap_func_int.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.5.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.53" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.68" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.51"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func_int.5.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.5.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.68" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.69" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.54"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_func_int.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC swap_func_int.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H7">
     <goal name="VC swap_func_int.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.6.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.52" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.54" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.55"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func_int.6.0.0.1" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.6.0.0.1.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.55" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.72" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.56"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC swap_func_int.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC swap_func_int.7.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC swap_func_int.7.0.0.0" expl="VC for swap_func_int" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC swap_func_int.7.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.62" steps="259"/></proof>
      </goal>
      <goal name="VC swap_func_int.7.0.0.0.1" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(i = 1)">
       <goal name="VC swap_func_int.7.0.0.0.1.0" expl="true case (postcondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.63" steps="258"/></proof>
       </goal>
       <goal name="VC swap_func_int.7.0.0.0.1.1" expl="false case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="i" arg2="2">
        <goal name="VC swap_func_int.7.0.0.0.1.1.0" expl="false case (postcondition)" proved="true">
        <proof prover="2"><result status="valid" time="0.85" steps="263"/></proof>
        </goal>
        <goal name="VC swap_func_int.7.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="0.82" steps="258"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_swap_func_int" expl="VC for invol_swap_func_int" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC invol_swap_func_int.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.57" steps="232"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_swap_mat" expl="VC for sem_swap_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC sem_swap_mat.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.57" steps="226"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.42" steps="227"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.2" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="1.55"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.51" steps="234"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_mat">
   <goal name="VC sem_swap_mat.4.0" expl="apply premises" proved="true">
   <proof prover="5"><result status="valid" time="1.66"/></proof>
   </goal>
   <goal name="VC sem_swap_mat.4.1" expl="apply premises" proved="true">
   <proof prover="5"><result status="valid" time="1.73"/></proof>
   </goal>
   <goal name="VC sem_swap_mat.4.2" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC sem_swap_mat.4.2.0" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC sem_swap_mat.4.2.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make">
      <goal name="VC sem_swap_mat.4.2.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sem_swap_mat.4.2.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(if i = 0 then i else if i = 1 then 2 else if i = 2 then 1 else 3)" arg2="(swap_func_int i)">
        <goal name="VC sem_swap_mat.4.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="VC sem_swap_mat.4.2.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.36" steps="239"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.53" steps="241"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.2" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.56" steps="243"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.3" expl="equality hypothesis" proved="true">
          <proof prover="5"><result status="valid" time="1.48"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_swap_mat.4.2.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.41"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.4.2.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.58"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.5" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_swap_mat.5.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="2">
    <goal name="VC sem_swap_mat.5.0.0" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_sum_l_null_but_maybe_one_elt" arg2="(fun (bvx:bitvec) -&gt;
    get result (bv_to_int bvx) (ket_to_int (bv_to_ket x))
    *.. ket 2 (bv_to_int bvx)),(n_bvs 2),(swap_func x),2">
     <goal name="VC sem_swap_mat.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC sem_swap_mat.5.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sem_swap_mat.5.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
        <goal name="VC sem_swap_mat.5.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
          <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="ket_eq">
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.70" steps="255"/></proof>
           </goal>
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.72" steps="255"/></proof>
            </goal>
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
             <proof prover="5"><result status="valid" time="1.70"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.68" steps="255"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="swap_func_def">
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.60" steps="255"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_swap_mat.5.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="H4">
         <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get_indic">
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0.0.0" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.38" steps="241"/></proof>
              </goal>
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="1.21"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.21"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.53" steps="239"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.28"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC sem_swap_mat.5.0.0.0.3.0" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.56"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.4" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.01"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.5" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC sem_swap_mat.5.0.0.0.5.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="set_null_mat">
        <goal name="VC sem_swap_mat.5.0.0.0.5.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_values">
           <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="zero_mult_t">
            <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H7">
             <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
               <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="get_indic">
                <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="eliminate_if" proved="true" >
                 <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="x" arg2="(swap_func e&#39; )" arg3="in" arg4="H2">
                   <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="1.11"/></proof>
                   </goal>
                   <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <transf name="eliminate_definition" proved="true" >
                    <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="swap_func_int_def" arg2="in" arg3="H">
                     <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
                     <proof prover="5"><result status="valid" time="1.48"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.51" steps="247"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC sem_swap_mat.5.0.0.0.5.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="0"><result status="valid" time="1.17"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.29"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_swap_mat.5.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="2.91" steps="241"/></proof>
   </goal>
   <goal name="VC sem_swap_mat.5.2" expl="rewrite premises" proved="true">
   <proof prover="5"><result status="valid" time="1.40"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC sem_swap_mat.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="swap_func_def">
    <goal name="VC sem_swap_mat.6.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="H1">
     <goal name="VC sem_swap_mat.6.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.72" steps="255"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.6.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.53" steps="255"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.7" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(ket 2 i)" arg2="(bv_to_ket (int_to_bv i 2))">
   <goal name="VC sem_swap_mat.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H2">
    <goal name="VC sem_swap_mat.7.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC sem_swap_mat.7.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
      <goal name="VC sem_swap_mat.7.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_eq">
       <goal name="VC sem_swap_mat.7.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="1.33"/></proof>
       </goal>
       <goal name="VC sem_swap_mat.7.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="5.95"/></proof>
       </goal>
       <goal name="VC sem_swap_mat.7.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(bv_to_int (swap_func (int_to_bv i 2)))" arg2="(swap_func_int i)">
        <goal name="VC sem_swap_mat.7.0.0.0.0.2.0" expl="apply premises" proved="true">
        <transf name="eliminate_if" proved="true" >
         <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.74" steps="259"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.70" steps="261"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.72" steps="263"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.3" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.56" steps="263"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_swap_mat.7.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
        <proof prover="5"><result status="valid" time="1.23"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.7.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="3.06" steps="243"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_swap_mat.7.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.12"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_swap_apply_basis">
   <goal name="VC sem_swap_mat.8.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(bv_to_ket x)" arg2="(ket 2 (bv_to_int x) )">
    <goal name="VC sem_swap_mat.8.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC sem_swap_mat.8.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC sem_swap_mat.8.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="5"><result status="valid" time="1.45"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.8.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="1.20"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_swap_mat.8.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.50" steps="245"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Semantics" proved="true">
 <goal name="VC path_sem_decomp" expl="VC for path_sem_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_decomp.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_def">
   <goal name="VC path_sem_decomp.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq">
    <goal name="VC path_sem_decomp.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.39" steps="270"/></proof>
    </goal>
    <goal name="VC path_sem_decomp.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.61" steps="268"/></proof>
    </goal>
    <goal name="VC path_sem_decomp.0.0.2" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC path_sem_decomp.0.0.2.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC path_sem_decomp.0.0.2.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC path_sem_decomp.0.0.2.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_decomp.0.0.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.38" steps="274"/></proof>
        </goal>
        <goal name="VC path_sem_decomp.0.0.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.34" steps="274"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_decomp.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.48" steps="268"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_" expl="VC for path_sem_scal_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="y" arg2="(path_sem c x)">
   <goal name="VC path_sem_scal_.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_path_sem">
    <goal name="VC path_sem_scal_.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="VC path_sem_scal_.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="scalar_assoc_rev">
      <goal name="VC path_sem_scal_.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="get_path_sem">
       <goal name="VC path_sem_scal_.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
        <goal name="VC path_sem_scal_.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq">
         <goal name="VC path_sem_scal_.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.22" steps="272"/></proof>
         </goal>
         <goal name="VC path_sem_scal_.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.56" steps="270"/></proof>
         </goal>
         <goal name="VC path_sem_scal_.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_scal_.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.24" steps="272"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_scal_.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.58" steps="270"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_scal_.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="3.22" steps="272"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_scal_.0.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.58" steps="270"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal" expl="VC for path_sem_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.43" steps="270"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_rev" expl="VC for path_sem_scal_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_rev.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="3.44" steps="270"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_add" expl="VC for path_sem_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_add.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem">
   <goal name="VC path_sem_add.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="y" arg2="(path_sem c x)">
    <goal name="VC path_sem_add.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="y&#39;" arg2="(path_sem c x&#39;)">
     <goal name="VC path_sem_add.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_path_sem">
      <goal name="VC path_sem_add.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="get_path_sem">
       <goal name="VC path_sem_add.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_comp_l_rev">
        <goal name="VC path_sem_add.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq">
         <goal name="VC path_sem_add.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="3.32" steps="276"/></proof>
         </goal>
         <goal name="VC path_sem_add.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.58" steps="274"/></proof>
         </goal>
         <goal name="VC path_sem_add.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="set_equal_ket_l">
            <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <transf name="exists" proved="true" arg1="(width c)">
             <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.0.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.0.0.0" proved="true">
              <transf name="apply" proved="true" arg1="scalar_ket_l">
               <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="3.34" steps="278"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.0.0.1" proved="true">
              <proof prover="2"><result status="valid" time="3.32" steps="278"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="add_ket_l_value">
              <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="add_ket_l_spec1">
                <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                 <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                  <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="scalar_ket_value">
                   <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="5.48" steps="282"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="3.36" steps="282"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="5"><result status="valid" time="1.32"/></proof>
              </goal>
              <goal name="VC path_sem_add.0.0.0.0.0.0.0.2.0.0.1.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="3.20" steps="282"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_add.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="3.21" steps="276"/></proof>
        </goal>
        <goal name="VC path_sem_add.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC path_sem_add.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC path_sem_add.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_ket_l">
           <goal name="VC path_sem_add.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="3.28" steps="278"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_add.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC path_sem_add.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC path_sem_add.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_ket_l">
           <goal name="VC path_sem_add.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="3.26" steps="278"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC path_sem_add.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.57" steps="274"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_add.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.51" steps="274"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_add.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.55" steps="274"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_add.0.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="0.56" steps="274"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_add.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.69" steps="276"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_add_ket_l" expl="VC for path_sem_scal_add_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_add_ket_l.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal_rev">
   <goal name="VC path_sem_scal_add_ket_l.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_scal_rev">
    <goal name="VC path_sem_scal_add_ket_l.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="n" arg2="(width c)">
     <goal name="VC path_sem_scal_add_ket_l.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="path_sem_add">
      <goal name="VC path_sem_scal_add_ket_l.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="3.67" steps="274"/></proof>
      </goal>
      <goal name="VC path_sem_scal_add_ket_l.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="3.37" steps="274"/></proof>
      </goal>
      <goal name="VC path_sem_scal_add_ket_l.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.58" steps="272"/></proof>
      </goal>
      <goal name="VC path_sem_scal_add_ket_l.0.0.0.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.59" steps="272"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_scal_add_ket_l.0.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.46" steps="272"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_scal_add_ket_l.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.57" steps="272"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_scal_add_ket_l.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.48" steps="272"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_substr" expl="VC for path_sem_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_substr.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_substr_def">
   <goal name="VC path_sem_substr.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_substr_def">
    <goal name="VC path_sem_substr.0.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(add_mat x ((-. c_one) *.. x&#39;))" arg2="(add_ket_l x ((-. c_one) *.. x&#39;) (width c))">
     <goal name="VC path_sem_substr.0.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(add_mat y ((-. c_one) *.. y&#39;))" arg2="(add_ket_l y ((-. c_one) *.. y&#39;) (width c))">
      <goal name="VC path_sem_substr.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="path_sem_add">
       <goal name="VC path_sem_substr.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.44" steps="274"/></proof>
       </goal>
       <goal name="VC path_sem_substr.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="3.33" steps="276"/></proof>
       </goal>
       <goal name="VC path_sem_substr.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.61" steps="274"/></proof>
       </goal>
       <goal name="VC path_sem_substr.0.0.0.0.0.3" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="3.23" steps="276"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_substr.0.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="add_ket_l_to_add_mat">
       <goal name="VC path_sem_substr.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="0.42" steps="274"/></proof>
       </goal>
       <goal name="VC path_sem_substr.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.18" steps="276"/></proof>
       </goal>
       <goal name="VC path_sem_substr.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="3.12" steps="276"/></proof>
       </goal>
       <goal name="VC path_sem_substr.0.0.0.0.1.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.26"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_substr.0.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="rewrite" proved="true" arg1="add_ket_l_to_add_mat">
      <goal name="VC path_sem_substr.0.0.0.1.0" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="0.51" steps="274"/></proof>
      </goal>
      <goal name="VC path_sem_substr.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="3.36" steps="276"/></proof>
      </goal>
      <goal name="VC path_sem_substr.0.0.0.1.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.55" steps="274"/></proof>
      </goal>
      <goal name="VC path_sem_substr.0.0.0.1.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="3.35" steps="276"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_substr.0.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(rows y)" arg2="(power_ 2 (ket_length y))">
     <goal name="VC path_sem_substr.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="(rows y&#39;)" arg2="(power_ 2 (ket_length y&#39;))">
      <goal name="VC path_sem_substr.0.0.1.0.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="power__eq">
       <goal name="VC path_sem_substr.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.62" steps="274"/></proof>
       </goal>
       <goal name="VC path_sem_substr.0.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(ket_length y)" arg2="(width c)">
        <goal name="VC path_sem_substr.0.0.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="goal_comm">
         <goal name="VC path_sem_substr.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC path_sem_substr.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="ket_l_to_ket">
           <goal name="VC path_sem_substr.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="3.08" steps="276"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_substr.0.0.1.0.0.1.1" expl="equality hypothesis" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC path_sem_substr.0.0.1.0.0.1.1.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ket_l_to_ket">
          <goal name="VC path_sem_substr.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="3.07" steps="276"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_substr.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="0"><result status="valid" time="1.10"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_substr.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.90"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_substr.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.90"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_substr.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.10"/></proof>
   </goal>
   <goal name="VC path_sem_substr.0.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.23"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_add" expl="VC for path_sem_scal_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_add.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal">
   <goal name="VC path_sem_scal_add.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="3.18" steps="276"/></proof>
   </goal>
   <goal name="VC path_sem_scal_add.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.23" steps="276"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_substr" expl="VC for path_sem_scal_substr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_substr.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal">
   <goal name="VC path_sem_scal_substr.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="3.25" steps="276"/></proof>
   </goal>
   <goal name="VC path_sem_scal_substr.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.16"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum" expl="VC for path_sem_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum.0" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC path_sem_sum.0.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="3.21" steps="277"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_sem_sum.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.23"/></proof>
  </goal>
  <goal name="VC path_sem_sum.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60" steps="278"/></proof>
  </goal>
  <goal name="VC path_sem_sum.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.41"/></proof>
  </goal>
  <goal name="VC path_sem_sum.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.10" steps="279"/></proof>
  </goal>
  <goal name="VC path_sem_sum.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.27"/></proof>
  </goal>
  <goal name="VC path_sem_sum.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.48" steps="280"/></proof>
  </goal>
  <goal name="VC path_sem_sum.7" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(g (choose s))" arg2="(path_sem c (f @ (choose s)))">
   <goal name="VC path_sem_sum.7.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.00"/></proof>
   </goal>
   <goal name="VC path_sem_sum.7.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC path_sem_sum.8" expl="variant decrease" proved="true">
  <proof prover="0"><result status="valid" time="1.20"/></proof>
  </goal>
  <goal name="VC path_sem_sum.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.28"/></proof>
  </goal>
  <goal name="VC path_sem_sum.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.58" steps="280"/></proof>
  </goal>
  <goal name="VC path_sem_sum.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.45" steps="285"/></proof>
  </goal>
  <goal name="VC path_sem_sum.12" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="3.39" steps="285"/></proof>
  </goal>
  <goal name="VC path_sem_sum.13" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC path_sem_sum.13.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
    <goal name="VC path_sem_sum.13.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC path_sem_sum.13.0.0.0" expl="postcondition" proved="true">
     <proof prover="2"><result status="valid" time="3.06" steps="274"/></proof>
     </goal>
     <goal name="VC path_sem_sum.13.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="3.06" steps="274"/></proof>
     </goal>
     <goal name="VC path_sem_sum.13.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.54" steps="272"/></proof>
     </goal>
     <goal name="VC path_sem_sum.13.0.0.3" expl="rewrite premises" proved="true">
     <transf name="replace" proved="true" arg1="((g @ choose s))" arg2="(path_sem c (f (choose s)))">
      <goal name="VC path_sem_sum.13.0.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.30"/></proof>
      </goal>
      <goal name="VC path_sem_sum.13.0.0.3.1" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="3.15" steps="274"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_sum.13.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="3.33" steps="274"/></proof>
    </goal>
    <goal name="VC path_sem_sum.13.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.60" steps="272"/></proof>
    </goal>
    <goal name="VC path_sem_sum.13.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="3.15" steps="274"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_sum.13.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="1.44"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum_diag" expl="VC for path_sem_sum_diag" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_diag.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="ket_sum_l_diag_def">
   <goal name="VC path_sem_sum_diag.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H1">
    <goal name="VC path_sem_sum_diag.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_sum">
     <goal name="VC path_sem_sum_diag.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.40"/></proof>
     </goal>
     <goal name="VC path_sem_sum_diag.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.55" steps="270"/></proof>
     </goal>
     <goal name="VC path_sem_sum_diag.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_sum_diag.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_sum_diag.0.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.29"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_sum_diag.0.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC path_sem_sum_diag.0.0.0.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_sum_diag.0.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.31"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_sum_diag.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.49" steps="272"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum_" expl="VC for path_sem_sum_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_sum">
   <goal name="VC path_sem_sum_.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.58" steps="270"/></proof>
   </goal>
   <goal name="VC path_sem_sum_.0.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.64" steps="270"/></proof>
   </goal>
   <goal name="VC path_sem_sum_.0.2" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.37" steps="274"/></proof>
   </goal>
   <goal name="VC path_sem_sum_.0.3" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.40" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_sum_gen" expl="VC for path_sem_sum_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_sum_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_sem_sum">
   <goal name="VC path_sem_sum_gen.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="270"/></proof>
   </goal>
   <goal name="VC path_sem_sum_gen.0.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="270"/></proof>
   </goal>
   <goal name="VC path_sem_sum_gen.0.2" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.29" steps="274"/></proof>
   </goal>
   <goal name="VC path_sem_sum_gen.0.3" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.32" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_path_sem_sum_gen" expl="VC for scal_path_sem_sum_gen" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_path_sem_sum_gen.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="VC scal_path_sem_sum_gen.0.0" expl="apply premises" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC scal_path_sem_sum_gen.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="path_sem_sum_gen">
     <goal name="VC scal_path_sem_sum_gen.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.62" steps="274"/></proof>
     </goal>
     <goal name="VC scal_path_sem_sum_gen.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.62" steps="274"/></proof>
     </goal>
     <goal name="VC scal_path_sem_sum_gen.0.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="3.66" steps="278"/></proof>
     </goal>
     <goal name="VC scal_path_sem_sum_gen.0.0.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="3.61" steps="278"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC scal_path_sem_sum_gen.0.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC scal_path_sem_sum" expl="VC for scal_path_sem_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC scal_path_sem_sum.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="scalar_eq_gen">
   <goal name="VC scal_path_sem_sum.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="path_sem_sum">
    <goal name="VC scal_path_sem_sum.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.60" steps="270"/></proof>
    </goal>
    <goal name="VC scal_path_sem_sum.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.59" steps="270"/></proof>
    </goal>
    <goal name="VC scal_path_sem_sum.0.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.40" steps="274"/></proof>
    </goal>
    <goal name="VC scal_path_sem_sum.0.0.3" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.43" steps="274"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC scal_path_sem_sum.0.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="270"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_scal_sum" expl="VC for path_sem_scal_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_scal_sum.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_scal">
   <goal name="VC path_sem_scal_sum.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="scal_path_sem_sum">
    <goal name="VC path_sem_scal_sum.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.51" steps="270"/></proof>
    </goal>
    <goal name="VC path_sem_scal_sum.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.60" steps="270"/></proof>
    </goal>
    <goal name="VC path_sem_scal_sum.0.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="3.01" steps="274"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_scal_sum.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.39"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_comp_basis" expl="VC for path_sem_comp_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_comp_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply">
   <goal name="VC path_sem_comp_basis.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
    <goal name="VC path_sem_comp_basis.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
     <goal name="VC path_sem_comp_basis.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_sequence">
      <goal name="VC path_sem_comp_basis.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="5"><result status="valid" time="1.53"/></proof>
      </goal>
      <goal name="VC path_sem_comp_basis.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.56" steps="272"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_comp_basis.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.60" steps="272"/></proof>
     </goal>
     <goal name="VC path_sem_comp_basis.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.46" steps="272"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_comp_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.31"/></proof>
    </goal>
    <goal name="VC path_sem_comp_basis.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.53" steps="272"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_comp_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.57" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_comp_pre" expl="VC for path_sem_comp_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_comp_pre.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_path_sem">
   <goal name="VC path_sem_comp_pre.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="get_path_sem" arg2="d,x">
    <goal name="VC path_sem_comp_pre.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC path_sem_comp_pre.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="path_sem_sum_">
      <goal name="VC path_sem_comp_pre.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC path_sem_comp_pre.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="3.56" steps="274"/></proof>
       </goal>
       <goal name="VC path_sem_comp_pre.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.18"/></proof>
       </goal>
       <goal name="VC path_sem_comp_pre.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="3.08" steps="274"/></proof>
       </goal>
       <goal name="VC path_sem_comp_pre.0.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="path_sem_comp_basis">
          <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="path_sem_scal">
           <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.59" steps="274"/></proof>
           </goal>
           <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(width e)" arg2="(width d)">
            <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="path_sem_basis_spec1">
              <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.34"/></proof>
              </goal>
              <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="3.28" steps="276"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="0.61" steps="274"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.22"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="3.40" steps="276"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre.0.0.0.0.0.3.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.61" steps="274"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_comp_pre.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="3.31" steps="274"/></proof>
      </goal>
      <goal name="VC path_sem_comp_pre.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.56" steps="272"/></proof>
      </goal>
      <goal name="VC path_sem_comp_pre.0.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC path_sem_comp_pre.0.0.0.0.3.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC path_sem_comp_pre.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="VC path_sem_comp_pre.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="path_sem_basis_ket_l">
          <goal name="VC path_sem_comp_pre.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="3.35" steps="276"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.61" steps="274"/></proof>
          </goal>
          <goal name="VC path_sem_comp_pre.0.0.0.0.3.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="3.24" steps="276"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_comp_pre.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.58" steps="272"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_comp_pre.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="1.26"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_comp" expl="VC for path_sem_comp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_comp.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_comp_pre">
   <goal name="VC path_sem_comp.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.58" steps="274"/></proof>
   </goal>
   <goal name="VC path_sem_comp.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.51" steps="274"/></proof>
   </goal>
   <goal name="VC path_sem_comp.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.57" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_kron_basis" expl="VC for path_sem_kron_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
   <goal name="VC path_sem_kron_basis.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
    <goal name="VC path_sem_kron_basis.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_basis_apply">
     <goal name="VC path_sem_kron_basis.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="ket_to_bv_kronecker">
      <goal name="VC path_sem_kron_basis.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel">
       <goal name="VC path_sem_kron_basis.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_apply_basis_par">
        <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(tpart (concat (ket_to_bv x) (ket_to_bv y)) (h_width (circ_to_pps d)))" arg2="(ket_to_bv y)">
          <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.38"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="1.59"/></proof>
           </goal>
           <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.36"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(hpart (concat (ket_to_bv x) (ket_to_bv y)) (h_width (circ_to_pps d)))" arg2="(ket_to_bv x)">
          <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.45"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="set_equal_bv">
           <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.39"/></proof>
           </goal>
           <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.47"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC path_sem_kron_basis.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.63"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC path_sem_kron_basis.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.52" steps="274"/></proof>
      </goal>
      <goal name="VC path_sem_kron_basis.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.49" steps="274"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_kron_basis.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.58" steps="274"/></proof>
     </goal>
     <goal name="VC path_sem_kron_basis.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.60" steps="274"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_kron_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.59" steps="274"/></proof>
    </goal>
    <goal name="VC path_sem_kron_basis.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.62" steps="274"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_kron_basis.0.1" expl="rewrite premises" proved="true">
   <transf name="replace" proved="true" arg1="(width (parallel d e))" arg2="(width d + width e)">
    <goal name="VC path_sem_kron_basis.0.1.0" expl="rewrite premises" proved="true">
    <transf name="apply" proved="true" arg1="kronecker_ket_l">
     <goal name="VC path_sem_kron_basis.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="3.64" steps="276"/></proof>
     </goal>
     <goal name="VC path_sem_kron_basis.0.1.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="3.67" steps="276"/></proof>
     </goal>
     <goal name="VC path_sem_kron_basis.0.1.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.64" steps="274"/></proof>
     </goal>
     <goal name="VC path_sem_kron_basis.0.1.0.3" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.62" steps="274"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_kron_basis.0.1.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="parallel_width">
     <goal name="VC path_sem_kron_basis.0.1.1.0" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.59" steps="274"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_kron_basis.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.31" steps="276"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_kron_pre" expl="VC for path_sem_kron_pre" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron_pre.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply">
   <goal name="VC path_sem_kron_pre.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_apply">
    <goal name="VC path_sem_kron_pre.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_apply">
     <goal name="VC path_sem_kron_pre.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="circ_to_pps_parallel">
      <goal name="VC path_sem_kron_pre.0.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="5"><result status="valid" time="1.64"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_sem_kron_pre.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.61" steps="270"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC path_sem_kron_pre.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.60" steps="270"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_sem_kron_pre.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="3.52" steps="272"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_kron" expl="VC for path_sem_kron" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_kron.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_kron_pre">
   <goal name="VC path_sem_kron.0.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="274"/></proof>
   </goal>
   <goal name="VC path_sem_kron.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="274"/></proof>
   </goal>
   <goal name="VC path_sem_kron.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.62" steps="274"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC ancilla_g" expl="VC for ancilla_g" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC ancilla_g.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.50" steps="268"/></proof>
  </goal>
  <goal name="VC ancilla_g.1" expl="precondition" proved="true">
  <transf name="exists" proved="true" arg1="path_sem_target">
   <goal name="VC ancilla_g.1.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC ancilla_g.1.0.0" proved="true">
    <transf name="apply" proved="true" arg1="H2">
     <goal name="VC ancilla_g.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.62" steps="270"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60" steps="274"/></proof>
  </goal>
  <goal name="VC ancilla_g.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.60" steps="274"/></proof>
  </goal>
  <goal name="VC ancilla_g.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_g.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC ancilla_g.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ancilla_range">
     <goal name="VC ancilla_g.4.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.87" steps="292"/></proof>
     </goal>
     <goal name="VC ancilla_g.4.0.0.1" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla_g.4.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ancilla_g.4.0.0.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="H6">
        <goal name="VC ancilla_g.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.85" steps="294"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_g.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC ancilla_g.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ancilla_width">
     <goal name="VC ancilla_g.5.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.86" steps="294"/></proof>
     </goal>
     <goal name="VC ancilla_g.5.0.0.1" expl="apply premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla_g.5.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ancilla_g.5.0.0.1.0.0" proved="true">
       <transf name="apply" proved="true" arg1="H7">
        <goal name="VC ancilla_g.5.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.90" steps="296"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_g.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC ancilla_g.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ancilla_basis_ket">
     <goal name="VC ancilla_g.6.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC ancilla_g.6.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.91" steps="296"/></proof>
     </goal>
     <goal name="VC ancilla_g.6.0.0.2" expl="rewrite premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla_g.6.0.0.2.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ancilla_g.6.0.0.2.0.0" proved="true">
       <transf name="apply" proved="true" arg1="H8">
        <goal name="VC ancilla_g.6.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.89" steps="298"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g.7" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC ancilla_g.7.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC ancilla_g.7.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ancilla_angle">
     <goal name="VC ancilla_g.7.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC ancilla_g.7.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.66" steps="296"/></proof>
     </goal>
     <goal name="VC ancilla_g.7.0.0.2" expl="rewrite premises" proved="true">
     <transf name="exists" proved="true" arg1="path_sem_target">
      <goal name="VC ancilla_g.7.0.0.2.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC ancilla_g.7.0.0.2.0.0" proved="true">
       <transf name="apply" proved="true" arg1="H9">
        <goal name="VC ancilla_g.7.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.76" steps="298"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="path_sem_apply">
   <goal name="VC ancilla_g.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="path_sem_apply">
    <goal name="VC ancilla_g.8.0.0" expl="postcondition" proved="true">
    <transf name="eliminate_definition" proved="true" >
     <goal name="VC ancilla_g.8.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="result_def">
      <goal name="VC ancilla_g.8.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="circ_to_pps_ancilla">
       <goal name="VC ancilla_g.8.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps c) (kronecker x (ket 1 0)))" arg2="(path_sem c (kronecker x (ket 1 0)))">
        <goal name="VC ancilla_g.8.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="H10">
         <goal name="VC ancilla_g.8.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_eq">
          <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="pps_apply_anc">
           <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="1.47"/></proof>
           </goal>
           <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="6.20"/></proof>
           </goal>
           <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(pps_apply (circ_to_pps c) (kronecker x (ket 1 0)))" arg2="( path_sem c (kronecker x (ket 1 0)))">
             <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="H11">
              <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="6.18"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="apply_path_sem">
              <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="0.85" steps="300"/></proof>
              </goal>
              <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1)">
               <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.87" steps="300"/></proof>
                </goal>
                <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.1.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.82" steps="300"/></proof>
                </goal>
                <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.1.0.2" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="1.45"/></proof>
                </goal>
                <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.1.0.3" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="1.53"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.2.0.1.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.92" steps="300"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="6.52"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ancilla_g.8.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.82" steps="298"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC ancilla_g.8.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.78" steps="298"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC ancilla_g.8.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="apply_path_sem">
         <goal name="VC ancilla_g.8.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="0.80" steps="298"/></proof>
         </goal>
         <goal name="VC ancilla_g.8.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1)">
          <goal name="VC ancilla_g.8.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC ancilla_g.8.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.84" steps="298"/></proof>
           </goal>
           <goal name="VC ancilla_g.8.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.81" steps="298"/></proof>
           </goal>
           <goal name="VC ancilla_g.8.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.81" steps="298"/></proof>
           </goal>
           <goal name="VC ancilla_g.8.0.0.0.0.0.1.1.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="7.19"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC ancilla_g.8.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.87" steps="298"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC ancilla_g.8.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.87" steps="298"/></proof>
       </goal>
       <goal name="VC ancilla_g.8.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="VC ancilla_g.8.0.0.0.0.2.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC ancilla_g.8.0.0.0.0.2.0.0" proved="true">
         <transf name="apply" proved="true" arg1="H11">
          <goal name="VC ancilla_g.8.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.91" steps="300"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla_g.8.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1)">
     <goal name="VC ancilla_g.8.0.1.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC ancilla_g.8.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.69" steps="280"/></proof>
      </goal>
      <goal name="VC ancilla_g.8.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.58" steps="280"/></proof>
      </goal>
      <goal name="VC ancilla_g.8.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.58" steps="280"/></proof>
      </goal>
      <goal name="VC ancilla_g.8.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="3.42" steps="282"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ancilla_g.8.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.64" steps="280"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC ancilla_g.8.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.60" steps="280"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC ancilla_g.9" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="kronecker_injec_eq_left" arg2="(path_sem result x),(path_sem_target @ x),(ket 1 0)">
   <goal name="VC ancilla_g.9.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC ancilla_g.9.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H1">
     <goal name="VC ancilla_g.9.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="H11">
      <goal name="VC ancilla_g.9.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.60" steps="280"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC ancilla_g.9.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.57" steps="280"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC ancilla_g.9.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(get (ket 1 0) 0 0 = c_one)">
     <goal name="VC ancilla_g.9.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="1.26"/></proof>
     </goal>
     <goal name="VC ancilla_g.9.0.1.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(valid_index (ket 1 0) 0 0 )">
      <goal name="VC ancilla_g.9.0.1.1.0" expl="asserted formula" proved="true">
      <transf name="apply" proved="true" arg1="set_valid_index">
       <goal name="VC ancilla_g.9.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ancilla_g.9.0.1.1.0.0.0" proved="true">
        <proof prover="2"><result status="valid" time="0.37" steps="282"/></proof>
        </goal>
        <goal name="VC ancilla_g.9.0.1.1.0.0.1" proved="true">
        <proof prover="2"><result status="valid" time="3.34" steps="285"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC ancilla_g.9.0.1.1.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC ancilla_g.9.0.1.1.0.1.0" proved="true">
        <proof prover="2"><result status="valid" time="0.61" steps="282"/></proof>
        </goal>
        <goal name="VC ancilla_g.9.0.1.1.0.1.1" proved="true">
        <proof prover="2"><result status="valid" time="3.28" steps="285"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC ancilla_g.9.0.1.1.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.25"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_seq" expl="VC for mat_sem_seq" proved="true">
 <proof prover="0"><result status="valid" time="1.13"/></proof>
 </goal>
 <goal name="VC mat_sem_par" expl="VC for mat_sem_par" proved="true">
 <proof prover="0"><result status="valid" time="1.25"/></proof>
 </goal>
 <goal name="VC mat_sem_anc" expl="VC for mat_sem_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_anc.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="mat_sem_ancilla" arg2="c">
   <goal name="VC mat_sem_anc.0.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Hinst">
    <goal name="VC mat_sem_anc.0.0.0" expl="destruct premise" proved="true">
    <proof prover="2"><result status="valid" time="0.58" steps="276"/></proof>
    </goal>
    <goal name="VC mat_sem_anc.0.0.1" expl="postcondition" proved="true">
    <transf name="instantiate" proved="true" arg1="Hinst" arg2="mat_sem_target">
     <goal name="VC mat_sem_anc.0.0.1.0" expl="postcondition" proved="true">
     <proof prover="0"><result status="valid" time="1.22"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_anc_" expl="VC for mat_sem_anc_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_anc_.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.56" steps="280"/></proof>
  </goal>
  <goal name="VC mat_sem_anc_.1" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x">
   <goal name="VC mat_sem_anc_.1.0" expl="precondition" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(width c -1)">
    <goal name="VC mat_sem_anc_.1.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC mat_sem_anc_.1.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
      <goal name="VC mat_sem_anc_.1.0.0.0.0" expl="precondition" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_mult_ket_sum_l">
       <goal name="VC mat_sem_anc_.1.0.0.0.0.0" expl="precondition" proved="true">
       <transf name="rewrite" proved="true" arg1="mat_mult_ket_sum_l">
        <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0" expl="precondition" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
         <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0" expl="precondition" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq">
          <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="1.68"/></proof>
          </goal>
          <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.56" steps="282"/></proof>
          </goal>
          <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_mut_scal">
             <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
              <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
               <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(kronecker (mat_mult mat_sem_target (bv_to_ket a)) (ket 1 0))" arg2="(mat_mult (mat_sem c) (kronecker (bv_to_ket a) (ket 1 0)))">
                <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_mut_scal">
                 <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.56" steps="284"/></proof>
                 </goal>
                 <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="kronecker_rows">
                  <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(rows (bv_to_ket a))" arg2="(power_ 2 (width c - 1))">
                   <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="replace" proved="true" arg1="(rows (ket 1 0))" arg2="(power_ 2 1)">
                    <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="power__sum_rev">
                     <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.0" expl="rewrite premises" proved="true">
                     <proof prover="0"><result status="valid" time="1.36"/></proof>
                     </goal>
                     <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.57" steps="284"/></proof>
                     </goal>
                     <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.57" steps="284"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                    <proof prover="5"><result status="valid" time="1.57"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                   <transf name="split_all_full" proved="true" >
                    <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_spec2">
                     <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis" proved="true">
                     <proof prover="0"><result status="valid" time="1.31"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="1"><result status="valid" time="0.35"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_to_ket_spec2">
               <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.0.2.0.0.1.0.0" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="1.29"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="mat_mult_ket_l">
            <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="1.55"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.04"/></proof>
            </goal>
            <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.19"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.31"/></proof>
         </goal>
         <goal name="VC mat_sem_anc_.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="1.61"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_anc_.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.61"/></proof>
        </goal>
        <goal name="VC mat_sem_anc_.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sem_anc_.1.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC mat_sem_anc_.1.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="1.59"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC mat_sem_anc_.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC mat_sem_anc_.1.0.0.0.0.0.3.0" proved="true">
         <proof prover="2"><result status="valid" time="0.45" steps="282"/></proof>
         </goal>
         <goal name="VC mat_sem_anc_.1.0.0.0.0.0.3.1" proved="true">
         <proof prover="2"><result status="valid" time="0.55" steps="282"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sem_anc_.1.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.63"/></proof>
       </goal>
       <goal name="VC mat_sem_anc_.1.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sem_anc_.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC mat_sem_anc_.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="kronecker_ket_l">
          <goal name="VC mat_sem_anc_.1.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.46" steps="284"/></proof>
          </goal>
          <goal name="VC mat_sem_anc_.1.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="1.44"/></proof>
          </goal>
          <goal name="VC mat_sem_anc_.1.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="1.20"/></proof>
          </goal>
          <goal name="VC mat_sem_anc_.1.0.0.0.0.2.0.0.3" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="1.20"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC mat_sem_anc_.1.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC mat_sem_anc_.1.0.0.0.0.3.0" proved="true">
        <proof prover="0"><result status="valid" time="1.17"/></proof>
        </goal>
        <goal name="VC mat_sem_anc_.1.0.0.0.0.3.1" proved="true">
        <transf name="replace" proved="true" arg1="(ket_length (ket 1 0))" arg2="1">
         <goal name="VC mat_sem_anc_.1.0.0.0.0.3.1.0" proved="true">
         <proof prover="0"><result status="valid" time="1.19"/></proof>
         </goal>
         <goal name="VC mat_sem_anc_.1.0.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
         <proof prover="5"><result status="valid" time="1.43"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sem_anc_.1.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC mat_sem_anc_.1.0.0.0.1.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC mat_sem_anc_.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.45"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC mat_sem_anc_.1.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="1"><result status="valid" time="0.35"/></proof>
      </goal>
      <goal name="VC mat_sem_anc_.1.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.75"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_sem_anc_.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.61" steps="282"/></proof>
     </goal>
     <goal name="VC mat_sem_anc_.1.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.04"/></proof>
     </goal>
     <goal name="VC mat_sem_anc_.1.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.23"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC mat_sem_anc_.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.53" steps="282"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_id" expl="VC for mat_sem_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_id.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_sem_identity">
   <goal name="VC mat_sem_id.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC mat_sem_id.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC mat_sem_id.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="2.01"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_correct_path_sum" expl="VC for set_correct_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_path_sum.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC set_correct_path_sum.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_definition" proved="true" >
    <goal name="VC set_correct_path_sum.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="correct_path_sum_def">
     <goal name="VC set_correct_path_sum.0.0.0.0" expl="VC for set_correct_path_sum" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_correct_path_sum.0.0.0.0.0" expl="VC for set_correct_path_sum" proved="true">
      <proof prover="2"><result status="valid" time="0.82" steps="294"/></proof>
      </goal>
      <goal name="VC set_correct_path_sum.0.0.0.0.1" expl="VC for set_correct_path_sum" proved="true">
      <proof prover="5"><result status="valid" time="1.75"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_correct_path_sum" expl="VC for get_correct_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_correct_path_sum.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC get_correct_path_sum.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="correct_path_sum_def" arg2="in" arg3="H">
    <goal name="VC get_correct_path_sum.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC get_correct_path_sum.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="H">
      <goal name="VC get_correct_path_sum.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.84" steps="296"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_correct_path_sum_basis" expl="VC for set_correct_path_sum_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_path_sum_basis.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.54" steps="278"/></proof>
  </goal>
  <goal name="VC set_correct_path_sum_basis.1" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_pps_apply">
   <goal name="VC set_correct_path_sum_basis.1.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="mat_mult_ket_bv_gen">
    <goal name="VC set_correct_path_sum_basis.1.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="VC set_correct_path_sum_basis.1.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.15"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_basis.1.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.07"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_basis.1.0.0.2" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.12"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_basis.1.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC set_correct_path_sum_basis.1.0.0.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC set_correct_path_sum_basis.1.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="VC set_correct_path_sum_basis.1.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(ket (ket_length x) (bv_to_int a))" arg2="(bv_to_ket a)">
         <goal name="VC set_correct_path_sum_basis.1.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis_rev">
          <goal name="VC set_correct_path_sum_basis.1.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.35"/></proof>
          </goal>
          <goal name="VC set_correct_path_sum_basis.1.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.17"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC set_correct_path_sum_basis.1.0.0.3.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.27"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC set_correct_path_sum_basis.1.0.0.3.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.57" steps="282"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC set_correct_path_sum_basis.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="1.12"/></proof>
    </goal>
    <goal name="VC set_correct_path_sum_basis.1.0.2" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_correct_path_sum_basis.1.0.2.0" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.11"/></proof>
     </goal>
     <goal name="VC set_correct_path_sum_basis.1.0.2.1" expl="rewrite premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC set_correct_path_sum_basis.1.0.2.1.0" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sem_spec">
       <goal name="VC set_correct_path_sum_basis.1.0.2.1.0.0" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.76"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC set_correct_path_sum_basis.1.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.52" steps="280"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_correct_path_sum_basis.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.39" steps="280"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_seq" expl="VC for correct_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_seq.0" expl="precondition" proved="true">
  <transf name="replace" proved="true" arg1="(h_width h&#39;)" arg2="(width c)">
   <goal name="VC correct_seq.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="1.05"/></proof>
   </goal>
   <goal name="VC correct_seq.0.1" expl="equality hypothesis" proved="true">
   <proof prover="0"><result status="valid" time="1.04"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.56" steps="290"/></proof>
  </goal>
  <goal name="VC correct_seq.2" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
   <goal name="VC correct_seq.2.0" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.2.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.06"/></proof>
    </goal>
    <goal name="VC correct_seq.2.0.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.14"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_seq.2.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.2.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.14"/></proof>
    </goal>
    <goal name="VC correct_seq.2.1.1" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.14"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC correct_seq.2.2" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_seq.2.2.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.60" steps="294"/></proof>
    </goal>
    <goal name="VC correct_seq.2.2.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.61" steps="294"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H6">
   <goal name="VC correct_seq.3.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.68" steps="295"/></proof>
   </goal>
   <goal name="VC correct_seq.3.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="3.66" steps="295"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_seq.4" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC correct_seq.4.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="correct_path_sum_def">
    <goal name="VC correct_seq.4.0.0" expl="VC for correct_seq" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC correct_seq.4.0.0.0" expl="VC for correct_seq" proved="true">
     <proof prover="5"><result status="valid" time="1.59"/></proof>
     </goal>
     <goal name="VC correct_seq.4.0.0.1" expl="VC for correct_seq" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_sem_sequence">
      <goal name="VC correct_seq.4.0.0.1.0" expl="VC for correct_seq" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_mult_assoc">
       <goal name="VC correct_seq.4.0.0.1.0.0" expl="VC for correct_seq" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC correct_seq.4.0.0.1.0.0.0" expl="VC for correct_seq" proved="true">
        <transf name="replace" proved="true" arg1="(pps_apply h x)" arg2="(mat_mult (mat_sem c) x)">
         <goal name="VC correct_seq.4.0.0.1.0.0.0.0" expl="VC for correct_seq" proved="true">
         <transf name="apply" proved="true" arg1="get_correct_path_sum">
          <goal name="VC correct_seq.4.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="1.57"/></proof>
          </goal>
          <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="set_is_a_ket_l">
           <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="5"><result status="valid" time="1.48"/></proof>
           </goal>
           <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_mult_columns">
            <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <proof prover="5"><result status="valid" time="1.48"/></proof>
            </goal>
            <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mat_sem_spec1">
              <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.1.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="5"><result status="valid" time="1.79"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.2" expl="apply premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.2.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_mult_rows">
             <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mat_sem_spec">
              <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.2.0.0.0" expl="apply premises" proved="true">
              <proof prover="5"><result status="valid" time="1.81"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.2.0.1" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="mat_sem_spec1">
              <goal name="VC correct_seq.4.0.0.1.0.0.0.0.1.2.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="5"><result status="valid" time="1.89"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_seq.4.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.97" steps="306"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_seq.4.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="5"><result status="valid" time="1.59"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_seq.4.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.83" steps="306"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_seq.4.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.57"/></proof>
       </goal>
       <goal name="VC correct_seq.4.0.0.1.0.2" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC correct_seq.4.0.0.1.0.2.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="mat_sem_spec1">
         <goal name="VC correct_seq.4.0.0.1.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="5"><result status="valid" time="1.86"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC correct_seq.4.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.85" steps="306"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_par" expl="VC for correct_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_par.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.33"/></proof>
  </goal>
  <goal name="VC correct_par.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.59" steps="286"/></proof>
  </goal>
  <goal name="VC correct_par.2" expl="precondition" proved="true">
  <transf name="eliminate_if" proved="true" >
   <goal name="VC correct_par.2.0" expl="VC for correct_par" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par.2.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="H8">
     <goal name="VC correct_par.2.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.53"/></proof>
     </goal>
     <goal name="VC correct_par.2.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.61"/></proof>
     </goal>
     <goal name="VC correct_par.2.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.74" steps="292"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC correct_par.2.0.1" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="H7">
     <goal name="VC correct_par.2.0.1.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.23"/></proof>
     </goal>
     <goal name="VC correct_par.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.23"/></proof>
     </goal>
     <goal name="VC correct_par.2.0.1.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.49" steps="292"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_par.3" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H7">
   <goal name="VC correct_par.3.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.26"/></proof>
   </goal>
   <goal name="VC correct_par.3.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.21"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_par.4" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis">
   <goal name="VC correct_par.4.0" expl="apply premises" proved="true">
   <proof prover="5"><result status="valid" time="1.52"/></proof>
   </goal>
   <goal name="VC correct_par.4.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC correct_par.4.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="x" arg2="(kronecker (hpart_ket x (width c)) (tpart_ket x (width c)))">
     <goal name="VC correct_par.4.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="H2">
      <goal name="VC correct_par.4.1.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sem_parallel">
       <goal name="VC correct_par.4.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_mult_commut_p">
        <goal name="VC correct_par.4.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_eq">
         <goal name="VC correct_par.4.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="get_correct_path_sum">
          <goal name="VC correct_par.4.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.13"/></proof>
          </goal>
          <goal name="VC correct_par.4.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="1.62"/></proof>
          </goal>
          <goal name="VC correct_par.4.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.59" steps="288"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_par.4.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="get_correct_path_sum">
          <goal name="VC correct_par.4.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.13"/></proof>
          </goal>
          <goal name="VC correct_par.4.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="5"><result status="valid" time="1.48"/></proof>
          </goal>
          <goal name="VC correct_par.4.1.0.0.0.0.0.1.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.41" steps="288"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par.4.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="hpart_ket_rows">
         <goal name="VC correct_par.4.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="power_to_">
          <goal name="VC correct_par.4.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <proof prover="5"><result status="valid" time="1.27"/></proof>
          </goal>
          <goal name="VC correct_par.4.1.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.18"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_par.4.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.50" steps="288"/></proof>
         </goal>
         <goal name="VC correct_par.4.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.23"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par.4.1.0.0.0.0.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="tpart_ket_rows">
         <goal name="VC correct_par.4.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="power_to_">
          <goal name="VC correct_par.4.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="(ket_length x - width c)" arg2="(width c&#39;)">
           <goal name="VC correct_par.4.1.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
           <proof prover="5"><result status="valid" time="1.58"/></proof>
           </goal>
           <goal name="VC correct_par.4.1.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.19"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_par.4.1.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.37"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_par.4.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.69" steps="288"/></proof>
         </goal>
         <goal name="VC correct_par.4.1.0.0.0.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.29"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par.4.1.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par.4.1.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par.4.1.0.0.0.0.3.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width c)">
           <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(width c)">
            <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0.0.0" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_spec">
               <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0.0.0.0.0" proved="true">
               <proof prover="5"><result status="valid" time="1.80"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0.0.1" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0.0.1.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_spec1">
               <goal name="VC correct_par.4.1.0.0.0.0.3.0.0.0.0.1.0.0" proved="true">
               <proof prover="5"><result status="valid" time="1.76"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par.4.1.0.0.0.0.4" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par.4.1.0.0.0.0.4.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par.4.1.0.0.0.0.4.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width c&#39;)">
           <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="(width c&#39;)">
            <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0.0.0" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_spec">
               <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0.0.0.0.0" proved="true">
               <proof prover="5"><result status="valid" time="1.82"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0.0.1" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0.0.1.0" proved="true">
              <transf name="rewrite" proved="true" arg1="mat_sem_spec1">
               <goal name="VC correct_par.4.1.0.0.0.0.4.0.0.0.0.1.0.0" proved="true">
               <proof prover="5"><result status="valid" time="1.82"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par.4.1.0.0.0.0.5" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par.4.1.0.0.0.0.5.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par.4.1.0.0.0.0.5.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width c)">
           <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="0">
            <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.0" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.0.0" proved="true">
              <transf name="rewrite" proved="true" arg1="hpart_ket_rows">
               <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.0.0.0" proved="true">
               <proof prover="2"><result status="valid" time="0.85" steps="304"/></proof>
               </goal>
               <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="0.84" steps="304"/></proof>
               </goal>
               <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                <proof prover="5"><result status="valid" time="1.88"/></proof>
                </goal>
                <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                <proof prover="5"><result status="valid" time="1.84"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0" proved="true">
              <transf name="replace" proved="true" arg1="(power 2 0)" arg2="1">
               <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.0" proved="true">
               <transf name="assert" proved="true" arg1="(forall x. is_a_ket x -&gt; columns x = 1)">
                <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.0.0.0" expl="asserted formula" proved="true">
                 <proof prover="5"><result status="valid" time="1.88"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1" proved="true">
                <transf name="apply" proved="true" arg1="h">
                 <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="ket_l_to_ket_gen">
                  <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(width c)">
                   <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.0.1.0.0.0" proved="true">
                   <proof prover="5"><result status="valid" time="1.92"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_par.4.1.0.0.0.0.5.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
               <proof prover="5"><result status="valid" time="1.80"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_par.4.1.0.0.0.0.6" expl="rewrite premises" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC correct_par.4.1.0.0.0.0.6.0" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pow2dim_def">
          <goal name="VC correct_par.4.1.0.0.0.0.6.0.0" proved="true">
          <transf name="exists" proved="true" arg1="(width c&#39;)">
           <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0" proved="true">
           <transf name="exists" proved="true" arg1="0">
            <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.0" proved="true">
             <transf name="rewrite" proved="true" arg1="tpart_ket_rows">
              <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.0.0" proved="true">
              <proof prover="5"><result status="valid" time="1.91"/></proof>
              </goal>
              <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.84" steps="304"/></proof>
              </goal>
              <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.74"/></proof>
               </goal>
               <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
               <proof prover="5"><result status="valid" time="1.71"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1" proved="true">
             <transf name="replace" proved="true" arg1="(power 2 0)" arg2="1">
              <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.0" proved="true">
              <transf name="assert" proved="true" arg1="(forall x. is_a_ket x -&gt; columns x = 1)">
               <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                <proof prover="5"><result status="valid" time="1.90"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.0.1" proved="true">
               <transf name="apply" proved="true" arg1="h">
                <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="ket_l_to_ket_gen">
                 <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="exists" proved="true" arg1="(width c&#39;)">
                  <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.0.1.0.0.0" proved="true">
                  <proof prover="5"><result status="valid" time="1.90"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC correct_par.4.1.0.0.0.0.6.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
              <proof prover="5"><result status="valid" time="1.65"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC correct_par.4.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.43"/></proof>
      </goal>
      <goal name="VC correct_par.4.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="5"><result status="valid" time="1.63"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC correct_par.4.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="5"><result status="valid" time="1.65"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_ancilla" expl="VC for correct_ancilla" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_ancilla.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.63" steps="296"/></proof>
  </goal>
  <goal name="VC correct_ancilla.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.70" steps="297"/></proof>
  </goal>
  <goal name="VC correct_ancilla.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.72" steps="298"/></proof>
  </goal>
  <goal name="VC correct_ancilla.3" expl="precondition" proved="true">
  <transf name="destruct" proved="true" arg1="H15">
   <goal name="VC correct_ancilla.3.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(mat_mult (pps_to_mat h&#39;) x)" arg2="(path_sem_target @ x)">
    <goal name="VC correct_ancilla.3.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="( mat_mult (mat_sem c) (kronecker x (ket 1 0)))" arg2="(path_sem c (kronecker x (ket 1 0)))">
     <goal name="VC correct_ancilla.3.0.0.0" expl="precondition" proved="true">
     <proof prover="0"><result status="valid" time="1.56"/></proof>
     </goal>
     <goal name="VC correct_ancilla.3.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC correct_ancilla.3.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="path_sem_spec">
       <goal name="VC correct_ancilla.3.0.0.1.0.0" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="goal_comm">
        <goal name="VC correct_ancilla.3.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="get_correct_path_sum">
         <goal name="VC correct_ancilla.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.47"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1 )">
          <goal name="VC correct_ancilla.3.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="kronecker_ket_l">
           <goal name="VC correct_ancilla.3.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.60" steps="298"/></proof>
           </goal>
           <goal name="VC correct_ancilla.3.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.59" steps="298"/></proof>
           </goal>
           <goal name="VC correct_ancilla.3.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.58" steps="298"/></proof>
           </goal>
           <goal name="VC correct_ancilla.3.0.0.1.0.0.0.1.0.3" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.39"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_ancilla.3.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.60" steps="298"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_ancilla.3.0.0.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="1.93"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_ancilla.3.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1 )">
        <goal name="VC correct_ancilla.3.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="kronecker_ket_l">
         <goal name="VC correct_ancilla.3.0.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.61" steps="298"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.0.1.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.60" steps="298"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.0.1.0.1.0.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.60" steps="298"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.0.1.0.1.0.3" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.47"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC correct_ancilla.3.0.0.1.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="0.43" steps="298"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC correct_ancilla.3.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="H5">
     <goal name="VC correct_ancilla.3.0.1.0" expl="equality hypothesis" proved="true">
     <transf name="instantiate" proved="true" arg1="pps_anc_pred" arg2="h,h&#39;">
      <goal name="VC correct_ancilla.3.0.1.0.0" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
       <goal name="VC correct_ancilla.3.0.1.0.0.0" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="Hinst" arg2="(fun x -&gt; path_sem_target (bv_to_ket x))">
        <goal name="VC correct_ancilla.3.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
         <proof prover="0"><result status="valid" time="1.62"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.34"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="replace" proved="true" arg1="(pps_apply_basis h (concat y (make_bv (fun (_:int) -&gt; 0) 1)))" arg2="(path_sem c (kronecker (bv_to_ket y) (ket 1 0)))">
           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H16">
            <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.64"/></proof>
            </goal>
            <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.31"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0" expl="equality hypothesis" proved="true">
            <transf name="replace" proved="true" arg1="(path_sem c (kronecker (bv_to_ket y) (ket 1 0)))" arg2="(mat_mult (mat_sem c) (kronecker (bv_to_ket y) (ket 1 0)))">
             <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis_rev">
              <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0" expl="equality hypothesis" proved="true">
              <transf name="replace" proved="true" arg1="(bv_to_ket (concat y (make_bv (fun (_:int) -&gt; 0) 1)))" arg2="(kronecker (bv_to_ket y) (ket 1 0))">
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="get_correct_path_sum">
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.66"/></proof>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1 )">
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="kronecker_ket_l">
                  <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.62" steps="300"/></proof>
                  </goal>
                  <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.76" steps="300"/></proof>
                  </goal>
                  <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.60"/></proof>
                  </goal>
                  <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.62"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                 <proof prover="2"><result status="valid" time="0.51" steps="300"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.51" steps="300"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
               <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_eq">
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.63" steps="300"/></proof>
                 </goal>
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_equal_ket_l">
                  <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="1">
                   <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bvs">
                     <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.64" steps="300"/></proof>
                     </goal>
                     <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="in_n_bvs">
                      <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.45" steps="300"/></proof>
                      </goal>
                      <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="make_bv_length">
                       <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="1.54"/></proof>
                       </goal>
                       <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.0.1.1.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.61" steps="300"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.0.0.1" proved="true">
                    <proof prover="0"><result status="valid" time="1.46"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                   <transf name="eliminate_definition" proved="true" >
                    <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
                     <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                       <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="ind_isum_one">
                        <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                          </transf>
                          </goal>
                          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.94"/></proof>
                           </goal>
                           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.99"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.96" steps="320"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="make_bv_length">
                         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.95" steps="320"/></proof>
                         </goal>
                         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.95"/></proof>
                          </goal>
                          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.96"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.92" steps="320"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="5"><result status="valid" time="1.77"/></proof>
                       </goal>
                       <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                       <proof prover="5"><result status="valid" time="1.82"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.0.1.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.01" steps="320"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.1" expl="rewrite premises" proved="true">
              <transf name="rewrite" proved="true" arg1="concat_length">
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="0.68" steps="300"/></proof>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="1.34"/></proof>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="0.46" steps="300"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="path_sem_spec">
              <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0" expl="equality hypothesis" proved="true">
              <transf name="apply" proved="true" arg1="get_correct_path_sum">
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.41"/></proof>
               </goal>
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.1" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1 )">
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.62" steps="300"/></proof>
                 </goal>
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.52" steps="300"/></proof>
                 </goal>
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.1.0.2" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.30"/></proof>
                 </goal>
                 <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.1.0.3" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.19"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="2"><result status="valid" time="0.41" steps="300"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.0.2" expl="apply premises" proved="true">
               <proof prover="5"><result status="valid" time="1.83"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.1" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(width c)" arg2="(width c -1 +1 )">
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_ket_l">
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.56" steps="300"/></proof>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.42" steps="300"/></proof>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.24"/></proof>
                </goal>
                <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.1.0.3" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="1.27"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC correct_ancilla.3.0.1.0.0.0.0.2.0.1.0.1.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.41" steps="300"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.12"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.4" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.55" steps="298"/></proof>
         </goal>
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.5" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.5.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H16">
           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.5.0.0" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width h)" arg2="(width c)">
            <goal name="VC correct_ancilla.3.0.1.0.0.0.0.5.0.0.0" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC correct_ancilla.3.0.1.0.0.0.0.5.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="0"><result status="valid" time="1.18"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.5.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.21"/></proof>
           </goal>
           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.5.0.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.22"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.6" expl="rewrite premises" proved="true">
         <transf name="replace" proved="true" arg1="(h_width h)" arg2="(width c)">
          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.6.0" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="H11">
           <goal name="VC correct_ancilla.3.0.1.0.0.0.0.6.0.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC correct_ancilla.3.0.1.0.0.0.0.6.1" expl="equality hypothesis" proved="true">
          <proof prover="0"><result status="valid" time="1.19"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC correct_ancilla.3.0.1.0.0.0.0.7" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.35"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_ancilla.3.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.67" steps="298"/></proof>
       </goal>
       <goal name="VC correct_ancilla.3.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.79" steps="298"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC correct_ancilla.3.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.64" steps="298"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC correct_ancilla.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC correct_ancilla.4.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(ancilla c)" arg2="(ancilla_g c path_sem_target)">
    <goal name="VC correct_ancilla.4.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_correct_path_sum_basis">
     <goal name="VC correct_ancilla.4.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="ancilla_g_def">
      <goal name="VC correct_ancilla.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ancilla_width">
       <goal name="VC correct_ancilla.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.62" steps="294"/></proof>
       </goal>
       <goal name="VC correct_ancilla.4.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.64" steps="294"/></proof>
       </goal>
       <goal name="VC correct_ancilla.4.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="exists" proved="true" arg1="path_sem_target">
        <goal name="VC correct_ancilla.4.0.0.0.0.2.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC correct_ancilla.4.0.0.0.0.2.0.0" proved="true">
         <transf name="apply" proved="true" arg1="H12">
          <goal name="VC correct_ancilla.4.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.51" steps="296"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC correct_ancilla.4.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.51" steps="294"/></proof>
      </goal>
      <goal name="VC correct_ancilla.4.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC correct_ancilla.4.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="H12">
        <goal name="VC correct_ancilla.4.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.65" steps="296"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC correct_ancilla.4.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC correct_ancilla.4.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="ancilla_g_def">
       <goal name="VC correct_ancilla.4.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H2">
        <goal name="VC correct_ancilla.4.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_to_mat_spec">
          <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.62" steps="298"/></proof>
          </goal>
          <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="ancilla_g_def" arg2="in" arg3="H1">
           <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width h&#39;)" arg2="(width (ancilla c))">
            <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.65" steps="298"/></proof>
            </goal>
            <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="ancilla_width">
             <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.1.0" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="0.64" steps="298"/></proof>
             </goal>
             <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.66" steps="298"/></proof>
             </goal>
             <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
             <transf name="exists" proved="true" arg1="path_sem_target">
              <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.1.2.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.1.2.0.0" proved="true">
               <transf name="apply" proved="true" arg1="H14">
                <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.0.1.2.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.65" steps="300"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.59" steps="298"/></proof>
           </goal>
           <goal name="VC correct_ancilla.4.0.0.1.0.0.0.0.1.2" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.75"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC correct_ancilla.4.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.57" steps="298"/></proof>
       </goal>
       <goal name="VC correct_ancilla.4.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.81"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC correct_ancilla.4.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="ancilla_g_def">
     <goal name="VC correct_ancilla.4.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="0.73" steps="294"/></proof>
     </goal>
     <goal name="VC correct_ancilla.4.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.53" steps="294"/></proof>
     </goal>
     <goal name="VC correct_ancilla.4.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.57"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_correct_main_path_sum" expl="VC for set_correct_main_path_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_main_path_sum.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis">
   <goal name="VC set_correct_main_path_sum.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.65" steps="280"/></proof>
   </goal>
   <goal name="VC set_correct_main_path_sum.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_correct_main_path_sum.0.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(mat_mult (mat_sem c) x)" arg2="(pps_apply (circ_to_pps c) x)">
     <goal name="VC set_correct_main_path_sum.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
      <goal name="VC set_correct_main_path_sum.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
        <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
         <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
          <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq_gen">
           <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
            <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.42"/></proof>
            </goal>
            <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.42"/></proof>
            </goal>
            <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="1.53"/></proof>
            </goal>
            <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_eq_gen">
               <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.67"/></proof>
                  </goal>
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="2.23"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="2.04"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.56" steps="290"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="1.88"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="1.97"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.60" steps="290"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="0"><result status="valid" time="1.37"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="1.25"/></proof>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="1.37"/></proof>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.75" steps="290"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="1.93"/></proof>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="1.86"/></proof>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.69" steps="290"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="0"><result status="valid" time="1.52"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="H5">
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.72"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.74" steps="290"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                       <proof prover="5"><result status="valid" time="1.89"/></proof>
                       </goal>
                       <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                       <proof prover="5"><result status="valid" time="1.93"/></proof>
                       </goal>
                       <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.63" steps="294"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
                       <proof prover="5"><result status="valid" time="2.22"/></proof>
                       </goal>
                       <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.1" expl="apply premises" proved="true">
                       <proof prover="5"><result status="valid" time="2.20"/></proof>
                       </goal>
                       <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.1.1.2" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.64" steps="294"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1.2" expl="rewrite premises" proved="true">
                     <proof prover="0"><result status="valid" time="1.45"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.48"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.30"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.79"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.1" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.75"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.43" steps="294"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.85"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.1" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.94"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.55" steps="294"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.21"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0" expl="apply premises" proved="true">
                      <proof prover="5"><result status="valid" time="1.77"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.1" expl="apply premises" proved="true">
                      <proof prover="5"><result status="valid" time="1.85"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.54" steps="294"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0" expl="apply premises" proved="true">
                      <proof prover="5"><result status="valid" time="1.76"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.1" expl="apply premises" proved="true">
                      <proof prover="5"><result status="valid" time="1.85"/></proof>
                      </goal>
                      <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.57" steps="294"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="1.29"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="1.80"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.1" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="1.88"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.57" steps="294"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="1.99"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.1" expl="apply premises" proved="true">
                    <proof prover="5"><result status="valid" time="2.18"/></proof>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.65" steps="294"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.61" steps="290"/></proof>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.76"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.1" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.74"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.39" steps="294"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.88"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.1" expl="apply premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.96"/></proof>
                     </goal>
                     <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.55" steps="294"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
                   <proof prover="0"><result status="valid" time="1.27"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.45"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.28"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.29"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="1.32"/></proof>
         </goal>
         <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.56" steps="284"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC set_correct_main_path_sum.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.54"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_correct_main_path_sum.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.60" steps="284"/></proof>
      </goal>
      <goal name="VC set_correct_main_path_sum.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.65" steps="284"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_correct_main_path_sum.0.1.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC set_correct_main_path_sum.0.1.0.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="get_correct_path_sum">
       <goal name="VC set_correct_main_path_sum.0.1.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.31"/></proof>
       </goal>
       <goal name="VC set_correct_main_path_sum.0.1.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.58" steps="284"/></proof>
       </goal>
       <goal name="VC set_correct_main_path_sum.0.1.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="1.69"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_to_mat_sem" expl="VC for path_to_mat_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_to_mat_sem.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="y" arg2="(path_sem c x)">
   <goal name="VC path_to_mat_sem.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC path_to_mat_sem.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_spec">
     <goal name="VC path_to_mat_sem.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC path_to_mat_sem.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="get_correct_path_sum">
       <goal name="VC path_to_mat_sem.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.51"/></proof>
       </goal>
       <goal name="VC path_to_mat_sem.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.62" steps="280"/></proof>
       </goal>
       <goal name="VC path_to_mat_sem.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="5"><result status="valid" time="2.03"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC path_to_mat_sem.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.59" steps="280"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC path_to_mat_sem.0.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.65" steps="280"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_to_mat_sem_rev" expl="VC for path_to_mat_sem_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_to_mat_sem_rev.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="goal_comm">
   <goal name="VC path_to_mat_sem_rev.0.0" expl="apply premises" proved="true">
   <transf name="apply" proved="true" arg1="path_to_mat_sem">
    <goal name="VC path_to_mat_sem_rev.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.54" steps="280"/></proof>
    </goal>
    <goal name="VC path_to_mat_sem_rev.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.57" steps="280"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_to_path_sem" expl="VC for mat_to_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_to_path_sem.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="y" arg2="(mat_mult (mat_sem c) x )">
   <goal name="VC mat_to_path_sem.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC mat_to_path_sem.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="path_sem_spec">
     <goal name="VC mat_to_path_sem.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="get_correct_path_sum">
      <goal name="VC mat_to_path_sem.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="1.41"/></proof>
      </goal>
      <goal name="VC mat_to_path_sem.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.58" steps="280"/></proof>
      </goal>
      <goal name="VC mat_to_path_sem.0.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="5"><result status="valid" time="2.02"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC mat_to_path_sem.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.69" steps="280"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC mat_to_path_sem.0.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="0.59" steps="280"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_to_mat_sem_exp" expl="VC for path_to_mat_sem_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_to_mat_sem_exp.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_to_path_sem">
   <goal name="VC path_to_mat_sem_exp.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.59" steps="278"/></proof>
   </goal>
   <goal name="VC path_to_mat_sem_exp.0.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.57" steps="278"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_to_path_sem_exp" expl="VC for mat_to_path_sem_exp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_to_path_sem_exp.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="path_to_mat_sem">
   <goal name="VC mat_to_path_sem_exp.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.56" steps="278"/></proof>
   </goal>
   <goal name="VC mat_to_path_sem_exp.0.1" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.44" steps="278"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_path_sem_by_correct_pps" expl="VC for set_path_sem_by_correct_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_path_sem_by_correct_pps.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="mat_to_path_sem">
   <goal name="VC set_path_sem_by_correct_pps.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.59" steps="282"/></proof>
   </goal>
   <goal name="VC set_path_sem_by_correct_pps.0.1" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.34"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_path_sem_by_correct_pps_gen" expl="VC for set_path_sem_by_correct_pps_gen" proved="true">
 <proof prover="0"><result status="valid" time="1.31"/></proof>
 </goal>
 <goal name="VC set_correct_path_sum_sim" expl="VC for set_correct_path_sum_sim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_correct_path_sum_sim.0" expl="precondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_correct_path_sum_sim.0.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="set_correct_path_sum">
    <goal name="VC set_correct_path_sum_sim.0.0.0" expl="apply premises" proved="true">
    <proof prover="5"><result status="valid" time="1.66"/></proof>
    </goal>
    <goal name="VC set_correct_path_sum_sim.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_correct_path_sum_sim.0.0.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(mat_mult (mat_sem c) x)" arg2="(pps_apply h x )">
      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_pps_apply">
       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="get_pps_apply">
        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="5"><result status="valid" time="1.69"/></proof>
         </goal>
         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.18" steps="300"/></proof>
         </goal>
         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.25" steps="300"/></proof>
         </goal>
         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
              <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="scalar_eq_gen">
               <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="5"><result status="valid" time="1.70"/></proof>
                </goal>
                <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.94" steps="302"/></proof>
                </goal>
                <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.97" steps="302"/></proof>
                </goal>
                <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="scalar_eq_gen">
                   <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                    <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length">
                     <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.98" steps="304"/></proof>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.95"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="2.00"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.94"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.97"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.87" steps="308"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="2.16"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="2.10"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="2.09"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="2.10"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.97" steps="308"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="5"><result status="valid" time="1.61"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.73"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="2.02"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="2.02"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.99"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.92" steps="308"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.96"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.98"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.86"/></proof>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.1.1" expl="apply premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.87"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.82" steps="308"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="5"><result status="valid" time="1.59"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="H6">
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.77" steps="308"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="5"><result status="valid" time="1.59"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                        <proof prover="5"><result status="valid" time="1.56"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3" expl="rewrite premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.0" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.0.0" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.75" steps="308"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.0.1" expl="rewrite premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.65"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0" expl="rewrite premises" proved="true">
                          <transf name="split_all_full" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.0.0" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="2.04"/></proof>
                             </goal>
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.0.1" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="1.84"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.1.0" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="1.74"/></proof>
                             </goal>
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.1.1" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="2.03"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.0.0.2" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.95" steps="312"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1" expl="rewrite premises" proved="true">
                          <transf name="split_all_full" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.0.0" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="1.91"/></proof>
                             </goal>
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.0.1" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="1.93"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.1.0" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="1.91"/></proof>
                             </goal>
                             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.1.1" expl="apply premises" proved="true">
                             <proof prover="5"><result status="valid" time="1.89"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.1.1.0.2" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.86" steps="312"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.0.3.2" expl="rewrite premises" proved="true">
                         <proof prover="5"><result status="valid" time="1.61"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.86"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.83"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.80"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.89"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.84" steps="312"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.80"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.78"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.68"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.52"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.1.1.0.2" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.90" steps="312"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.89" steps="308"/></proof>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                         <transf name="split_all_full" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.0.0" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.95"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.0.1" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.89"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.1.0" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.85"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.1.1" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.87"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.0.0.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.87" steps="312"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                         <transf name="split_all_full" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.0.0" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.94"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.0.1" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.85"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.1.0" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.85"/></proof>
                            </goal>
                            <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.1.1" expl="apply premises" proved="true">
                            <proof prover="5"><result status="valid" time="1.93"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.1.1.0.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.95" steps="312"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
                        <proof prover="5"><result status="valid" time="1.61"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.96"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.90"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.87"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.97"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.90" steps="312"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.94"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.0.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.89"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.1.0" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.81"/></proof>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.1.1" expl="apply premises" proved="true">
                          <proof prover="5"><result status="valid" time="1.86"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.96" steps="312"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.95" steps="308"/></proof>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.0" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.85"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.88"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.1" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.1.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.96"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.1.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.95"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.2" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.2.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.97" steps="312"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.0.0.2.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.91" steps="312"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1" expl="rewrite premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0" expl="rewrite premises" proved="true">
                         <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.82"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.0.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.78"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.1" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.1.0" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.81"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.1.1" expl="apply premises" proved="true">
                           <proof prover="5"><result status="valid" time="1.89"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.2" expl="apply premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.2.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.88" steps="312"/></proof>
                           </goal>
                           <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.1.1.0.2.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.85" steps="312"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
                       <proof prover="5"><result status="valid" time="1.41"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                   <proof prover="5"><result status="valid" time="1.65"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.74" steps="302"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="5"><result status="valid" time="1.40"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="5"><result status="valid" time="1.17"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.15"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC set_correct_path_sum_sim.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="5"><result status="valid" time="1.33"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_correct_path_sum_sim.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <proof prover="5"><result status="valid" time="1.46"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC set_correct_path_sum_sim.1" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis">
   <goal name="VC set_correct_path_sum_sim.1.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="1.11"/></proof>
   </goal>
   <goal name="VC set_correct_path_sum_sim.1.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_correct_path_sum_sim.1.1.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(pps_apply h&#39; x)" arg2="(path_sem c x)">
     <goal name="VC set_correct_path_sum_sim.1.1.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC set_correct_path_sum_sim.1.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="path_to_mat_sem">
       <goal name="VC set_correct_path_sum_sim.1.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.58" steps="286"/></proof>
       </goal>
       <goal name="VC set_correct_path_sum_sim.1.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.57" steps="286"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_correct_path_sum_sim.1.1.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="1.28"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sum_equiv" expl="VC for path_sum_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sum_equiv.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.56" steps="284"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.59" steps="284"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.29"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="1.88"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.41" steps="284"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.49" steps="286"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.48" steps="286"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.24"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="1.58"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.9" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.42" steps="286"/></proof>
  </goal>
  <goal name="VC path_sum_equiv.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC path_sum_equiv.10.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.43" steps="286"/></proof>
   </goal>
   <goal name="VC path_sum_equiv.10.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.45" steps="286"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_to_path_sem" expl="VC for correct_to_path_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_to_path_sem.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.08"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC correct_to_mat_sem" expl="VC for correct_to_mat_sem" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC correct_to_mat_sem.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="1.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC mat_sem_to_correct" expl="VC for mat_sem_to_correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC mat_sem_to_correct.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis">
   <goal name="VC mat_sem_to_correct.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.44" steps="278"/></proof>
   </goal>
   <goal name="VC mat_sem_to_correct.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC mat_sem_to_correct.0.1.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.11"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC path_sem_to_correct" expl="VC for path_sem_to_correct" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC path_sem_to_correct.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_correct_path_sum_basis">
   <goal name="VC path_sem_to_correct.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.49" steps="278"/></proof>
   </goal>
   <goal name="VC path_sem_to_correct.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC path_sem_to_correct.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_to_path_sem_exp">
     <goal name="VC path_sem_to_correct.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.09"/></proof>
     </goal>
     <goal name="VC path_sem_to_correct.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.51" steps="282"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
