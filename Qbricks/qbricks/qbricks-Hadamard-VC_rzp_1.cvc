%%% this is a prelude for CVC3 
%%% this is a prelude for CVC3 real arithmetic
div_by_zero: (REAL) -> REAL;
%%% this is a prelude for CVC3 integer arithmetic
uni : TYPE;

ty : TYPE;

sort: (ty, uni) -> BOOLEAN;

witness: (ty) -> uni;

% witness_sort
  ASSERT (FORALL (a : ty): (sort(a, witness(a))));

int: ty;

real: ty;

t : TYPE;

t1: ty;

tone: t;

infix_pldt: (t, t) -> t;

infix_asdt: (t, t) -> t;

infix_sldt: (t, t) -> t;

from_int: (INT) -> REAL;

im: t;

r_to_t: (REAL) -> t;

pi: t;

infix_mngt: (ty, ty) -> ty;

quantum_circuit : TYPE;

quantum_circuit1: ty;

infix_at: (ty, ty, uni, uni) -> uni;

% infix @_sort
  ASSERT
  (FORALL (a : ty, b : ty):
  (FORALL (x369 : uni, x370 : uni): (sort(b, infix_at(b, a, x369, x370)))));

i_to_t: (INT) -> t;

% i_to_t_def
  ASSERT (FORALL (i26 : INT): (i_to_t(i26) = r_to_t(from_int(i26))));

power: (INT, INT) -> INT;

exp: (t) -> t;

p_omega: (INT, INT) -> t;

d_frac : TYPE;

d_frac1: ty;

arg: (d_frac) -> t;

value: (d_frac) -> t;

% value_def
  ASSERT
  (FORALL (d18 : d_frac): (value(d18) = exp(infix_asdt(infix_asdt(
  infix_asdt(im, pi), infix_pldt(tone, tone)), arg(d18)))));

div_two: (d_frac) -> d_frac;

dyadic: (INT, INT) -> d_frac;

phase_inv_: (INT, d_frac) -> d_frac;

shift: (ty, uni, INT, INT) -> uni;

% shift_sort
  ASSERT
  (FORALL (a : ty):
  (FORALL (x369 : uni, x370 : INT, x371 : INT): (sort(a, shift(a, x369, x370,
  x371)))));

t2tb3: ((ARRAY INT OF INT)) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x369 : (ARRAY INT OF INT)): (sort(infix_mngt(int, int), 
  t2tb3(x369))));

tb2t3: (uni) -> (ARRAY INT OF INT);

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF INT)):PATTERN (t2tb3(i26)):  (tb2t3(
  t2tb3(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb3(tb2t3(j))):  (t2tb3(tb2t3(j)) = j));

t2tb4: ((ARRAY INT OF (ARRAY INT OF INT))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x369 : (ARRAY INT OF (ARRAY INT OF INT))): (sort(infix_mngt(int, 
  infix_mngt(int, int)), t2tb4(x369))));

tb2t4: (uni) -> (ARRAY INT OF (ARRAY INT OF INT));

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF (ARRAY INT OF INT))):PATTERN (t2tb4(i26)):  (
  tb2t4(t2tb4(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb4(tb2t4(j))):  (t2tb4(tb2t4(j)) = j));

% shift_def
  ASSERT
  (FORALL (f : (ARRAY INT OF (ARRAY INT OF INT)), i26 : INT, k : INT): (
  tb2t3(shift(infix_mngt(int, int), t2tb4(f), i26, k)) = (f[(k + i26)])));

t2tb2: (INT) -> uni;

% t2tb_sort
  ASSERT (FORALL (x369 : INT): (sort(int, t2tb2(x369))));

tb2t2: (uni) -> INT;

% BridgeL
  ASSERT
  (FORALL (i26 : INT):PATTERN (t2tb2(i26)):  (tb2t2(t2tb2(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb2(tb2t2(j))):  (t2tb2(tb2t2(j)) = j));

% shift_def
  ASSERT
  (FORALL (f : (ARRAY INT OF INT), i26 : INT, k : INT): (tb2t2(shift(int, 
  t2tb3(f), i26, k)) = (f[(k + i26)])));

% shift_def
  ASSERT
  (FORALL (a : ty):
  (FORALL (f : uni, i26 : INT, k : INT): (shift(a, f, i26, k) = infix_at(a,
  int, f, t2tb2((k + i26))))));

binary: ((ARRAY INT OF INT)) -> BOOLEAN;

% binary_def
  ASSERT
  (FORALL (t2 : (ARRAY INT OF INT)):
  ((binary(t2)) <=> (FORALL (k : INT): ((0 <= (t2[k])) AND ((t2[k]) < 2)))));

quantum_circuit_pre : TYPE;

quantum_circuit_pre1: ty;

Phase: (d_frac) -> quantum_circuit_pre;

Rx: (d_frac) -> quantum_circuit_pre;

Ry: (d_frac) -> quantum_circuit_pre;

Rz: (d_frac) -> quantum_circuit_pre;

Cnot: quantum_circuit_pre;

Sequence: (quantum_circuit_pre, quantum_circuit_pre) -> quantum_circuit_pre;

Parallel: (quantum_circuit_pre, quantum_circuit_pre) -> quantum_circuit_pre;

match_quantum_circuit_pre137: (ty, quantum_circuit_pre, uni, uni, uni, uni,
  uni, uni, uni) -> uni;

% match_quantum_circuit_pre_sort
  ASSERT
  (FORALL (a : ty):
  (FORALL (x369 : quantum_circuit_pre, x370 : uni, x371 : uni, x372 : uni,
  x373 : uni, x374 : uni, x375 : uni, x376 : uni): (sort(a, 
  match_quantum_circuit_pre137(a, x369, x370, x371, x372, x373, x374, x375,
  x376)))));

% match_quantum_circuit_pre_Phase
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni, z2 : uni, z3 : uni, z4 : uni, z5 : uni,
  z6 : uni, u : d_frac):
  ((sort(a, z)) => (match_quantum_circuit_pre137(a, Phase(u), z, z1, z2, z3,
  z4, z5, z6) = z))));

% match_quantum_circuit_pre_Rx
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni, z2 : uni, z3 : uni, z4 : uni, z5 : uni,
  z6 : uni, u : d_frac):
  ((sort(a, z1)) => (match_quantum_circuit_pre137(a, Rx(u), z, z1, z2, z3,
  z4, z5, z6) = z1))));

% match_quantum_circuit_pre_Ry
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni, z2 : uni, z3 : uni, z4 : uni, z5 : uni,
  z6 : uni, u : d_frac):
  ((sort(a, z2)) => (match_quantum_circuit_pre137(a, Ry(u), z, z1, z2, z3,
  z4, z5, z6) = z2))));

% match_quantum_circuit_pre_Rz
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni, z2 : uni, z3 : uni, z4 : uni, z5 : uni,
  z6 : uni, u : d_frac):
  ((sort(a, z3)) => (match_quantum_circuit_pre137(a, Rz(u), z, z1, z2, z3,
  z4, z5, z6) = z3))));

% match_quantum_circuit_pre_Cnot
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni, z2 : uni, z3 : uni, z4 : uni, z5 : uni,
  z6 : uni):
  ((sort(a, z4)) => (match_quantum_circuit_pre137(a, Cnot, z, z1, z2, z3, z4,
  z5, z6) = z4))));

% match_quantum_circuit_pre_Sequence
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni, z2 : uni, z3 : uni, z4 : uni, z5 : uni,
  z6 : uni, u : quantum_circuit_pre, u1 : quantum_circuit_pre):
  ((sort(a, z5)) => (match_quantum_circuit_pre137(a, Sequence(u, u1), z, z1,
  z2, z3, z4, z5, z6) = z5))));

% match_quantum_circuit_pre_Parallel
  ASSERT
  (FORALL (a : ty):
  (FORALL (z : uni, z1 : uni, z2 : uni, z3 : uni, z4 : uni, z5 : uni,
  z6 : uni, u : quantum_circuit_pre, u1 : quantum_circuit_pre):
  ((sort(a, z6)) => (match_quantum_circuit_pre137(a, Parallel(u, u1), z, z1,
  z2, z3, z4, z5, z6) = z6))));

index_quantum_circuit_pre137: (quantum_circuit_pre) -> INT;

% index_quantum_circuit_pre_Phase
  ASSERT
  (FORALL (u : d_frac):PATTERN (Phase(u)):  (index_quantum_circuit_pre137(
  Phase(u)) = 0));

% index_quantum_circuit_pre_Rx
  ASSERT
  (FORALL (u : d_frac):PATTERN (Rx(u)):  (index_quantum_circuit_pre137(
  Rx(u)) = 1));

% index_quantum_circuit_pre_Ry
  ASSERT
  (FORALL (u : d_frac):PATTERN (Ry(u)):  (index_quantum_circuit_pre137(
  Ry(u)) = 2));

% index_quantum_circuit_pre_Rz
  ASSERT
  (FORALL (u : d_frac):PATTERN (Rz(u)):  (index_quantum_circuit_pre137(
  Rz(u)) = 3));

% index_quantum_circuit_pre_Cnot
  ASSERT (index_quantum_circuit_pre137(Cnot) = 4);

% index_quantum_circuit_pre_Sequence
  ASSERT
  (FORALL (u : quantum_circuit_pre, u1 : quantum_circuit_pre):PATTERN (
  Sequence(u, u1)):  (index_quantum_circuit_pre137(Sequence(u, u1)) = 5));

% index_quantum_circuit_pre_Parallel
  ASSERT
  (FORALL (u : quantum_circuit_pre, u1 : quantum_circuit_pre):PATTERN (
  Parallel(u, u1)):  (index_quantum_circuit_pre137(Parallel(u, u1)) = 6));

Phase_proj_1137: (quantum_circuit_pre) -> d_frac;

% Phase_proj_1_def
  ASSERT (FORALL (u : d_frac): (Phase_proj_1137(Phase(u)) = u));

Rx_proj_1137: (quantum_circuit_pre) -> d_frac;

% Rx_proj_1_def
  ASSERT (FORALL (u : d_frac): (Rx_proj_1137(Rx(u)) = u));

Ry_proj_1137: (quantum_circuit_pre) -> d_frac;

% Ry_proj_1_def
  ASSERT (FORALL (u : d_frac): (Ry_proj_1137(Ry(u)) = u));

Rz_proj_1137: (quantum_circuit_pre) -> d_frac;

% Rz_proj_1_def
  ASSERT (FORALL (u : d_frac): (Rz_proj_1137(Rz(u)) = u));

Sequence_proj_1137: (quantum_circuit_pre) -> quantum_circuit_pre;

% Sequence_proj_1_def
  ASSERT
  (FORALL (u : quantum_circuit_pre, u1 : quantum_circuit_pre): (
  Sequence_proj_1137(Sequence(u, u1)) = u));

Sequence_proj_2137: (quantum_circuit_pre) -> quantum_circuit_pre;

% Sequence_proj_2_def
  ASSERT
  (FORALL (u : quantum_circuit_pre, u1 : quantum_circuit_pre): (
  Sequence_proj_2137(Sequence(u, u1)) = u1));

Parallel_proj_1137: (quantum_circuit_pre) -> quantum_circuit_pre;

% Parallel_proj_1_def
  ASSERT
  (FORALL (u : quantum_circuit_pre, u1 : quantum_circuit_pre): (
  Parallel_proj_1137(Parallel(u, u1)) = u));

Parallel_proj_2137: (quantum_circuit_pre) -> quantum_circuit_pre;

% Parallel_proj_2_def
  ASSERT
  (FORALL (u : quantum_circuit_pre, u1 : quantum_circuit_pre): (
  Parallel_proj_2137(Parallel(u, u1)) = u1));

% quantum_circuit_pre_inversion
  ASSERT
  (FORALL (u : quantum_circuit_pre):
  (((((((u = Phase(Phase_proj_1137(u))) OR (u = Rx(Rx_proj_1137(u))))
      OR (u = Ry(Ry_proj_1137(u))))
     OR (u = Rz(Rz_proj_1137(u))))
    OR (u = Cnot))
   OR (u = Sequence(Sequence_proj_1137(u), Sequence_proj_2137(u))))
  OR (u = Parallel(Parallel_proj_1137(u), Parallel_proj_2137(u)))));

depth_pre: (quantum_circuit_pre) -> INT;

% depth_pre_def
  ASSERT
  (((((((FORALL (w : d_frac): (depth_pre(Phase(w)) = 1))
       AND (FORALL (w : d_frac): (depth_pre(Rx(w)) = 1)))
      AND (FORALL (w : d_frac): (depth_pre(Ry(w)) = 1)))
     AND (FORALL (w : d_frac): (depth_pre(Rz(w)) = 1)))
    AND (depth_pre(Cnot) = 2))
   AND (FORALL (x369 : quantum_circuit_pre, x370 : quantum_circuit_pre): (
       depth_pre(Sequence(x369, x370)) = depth_pre(x369))))
  AND (FORALL (x369 : quantum_circuit_pre, x370 : quantum_circuit_pre): (
      depth_pre(Parallel(x369, x370)) = (depth_pre(x369) + depth_pre(x370)))));

to_pre: (quantum_circuit) -> quantum_circuit_pre;

depth: (quantum_circuit) -> INT;

% depth_def
  ASSERT
  (FORALL (c84 : quantum_circuit): (depth(c84) = depth_pre(to_pre(c84))));

sum_range: (quantum_circuit) -> INT;

ket_part: (quantum_circuit, (ARRAY INT OF INT), (ARRAY INT OF INT),
  INT) -> INT;

phase_part: (quantum_circuit, (ARRAY INT OF INT), (ARRAY INT OF INT)) -> t;

phase: (d_frac) -> quantum_circuit;

rz: (d_frac) -> quantum_circuit;

sequence: (quantum_circuit, quantum_circuit) -> quantum_circuit;

% h
  ASSERT FALSE;

ket_part_closure: (ARRAY quantum_circuit OF (ARRAY (ARRAY INT OF INT) OF (ARRAY (ARRAY INT OF INT) OF (ARRAY INT OF INT))));

shift_closure: (ty) -> uni;

% shift_closure_sort
  ASSERT
  (FORALL (a : ty): (sort(infix_mngt(infix_mngt(int, a), infix_mngt(int, 
  infix_mngt(int, a))), shift_closure(a))));

shift_closure1: (ARRAY (ARRAY INT OF INT) OF (ARRAY INT OF (ARRAY INT OF INT)));

% ket_part_closure_def
  ASSERT
  (FORALL (y : quantum_circuit, y1 : (ARRAY INT OF INT),
  y2 : (ARRAY INT OF INT), y3 : INT):
  (((((ket_part_closure[y])[y1])[y2])[y3]) = ket_part(y, y1, y2, y3)));

t2tb25: ((ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT)))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL (x369 : (ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT)))): (sort(
  infix_mngt(int, infix_mngt(int, infix_mngt(int, int))), t2tb25(x369))));

tb2t25: (uni) -> (ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT)));

% BridgeL
  ASSERT
  (FORALL (i26 : (ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT)))):PATTERN (
  t2tb25(i26)):  (tb2t25(t2tb25(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb25(tb2t25(j))):  (t2tb25(tb2t25(j)) = j));

t2tb35: ((ARRAY (ARRAY INT OF (ARRAY INT OF INT)) OF (ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT))))) -> uni;

% t2tb_sort
  ASSERT
  (FORALL
  (x369 : (ARRAY (ARRAY INT OF (ARRAY INT OF INT)) OF (ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT))))):
  (sort(infix_mngt(infix_mngt(int, infix_mngt(int, int)), infix_mngt(int, 
  infix_mngt(int, infix_mngt(int, int)))), t2tb35(x369))));

tb2t35: (uni) -> (ARRAY (ARRAY INT OF (ARRAY INT OF INT)) OF (ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT))));

% BridgeL
  ASSERT
  (FORALL
  (i26 : (ARRAY (ARRAY INT OF (ARRAY INT OF INT)) OF (ARRAY INT OF (ARRAY INT OF (ARRAY INT OF INT))))):PATTERN (
  t2tb35(i26)):  (tb2t35(t2tb35(i26)) = i26));

% BridgeR
  ASSERT
  (FORALL (j : uni):PATTERN (t2tb35(tb2t35(j))):  (t2tb35(tb2t35(j)) = j));

% shift_closure_def
  ASSERT
  (FORALL (y : (ARRAY INT OF (ARRAY INT OF INT)), y1 : INT, y2 : INT): ((
  tb2t4(infix_at(infix_mngt(int, infix_mngt(int, int)), int, infix_at(
  infix_mngt(int, infix_mngt(int, infix_mngt(int, int))), infix_mngt(int, 
  infix_mngt(int, int)), shift_closure(infix_mngt(int, int)), t2tb4(y)), 
  t2tb2(y1)))[y2]) = tb2t3(shift(infix_mngt(int, int), t2tb4(y), y1, y2))));

% shift_closure_def
  ASSERT
  (FORALL (y : (ARRAY INT OF INT), y1 : INT, y2 : INT):
  ((((shift_closure1[y])[y1])[y2]) = tb2t2(shift(int, t2tb3(y), y1, y2))));

% shift_closure_def
  ASSERT
  (FORALL (a : ty):
  (FORALL (y : uni, y1 : INT, y2 : INT): (infix_at(a, int, infix_at(
  infix_mngt(int, a), int, infix_at(infix_mngt(int, infix_mngt(int, a)), 
  infix_mngt(int, a), shift_closure(a), y), t2tb2(y1)), t2tb2(y2)) = shift(a,
  y, y1, y2))));

QUERY
% VC_rzp
 % File "qbricks/../qbricks.mlw", line 915, characters 14-17
  (FORALL (n7 : INT):
  ((0 <= n7)
  => ((0 <= n7)
     AND (LET o100 = dyadic(1, n7) IN
         (((value(o100) = p_omega(n7, 1)) AND (arg(o100) = infix_sldt(
          i_to_t(1), i_to_t(power(2, n7)))))
         => (LET o101 = rz(o100) IN
            (((sum_range(o101) = 0)
             AND ((depth(o101) = 1)
                 AND ((FORALL (bvx70 : (ARRAY INT OF INT),
                      bvy70 : (ARRAY INT OF INT)):
                      ((binary(bvx70))
                      => ((binary(bvy70)) => (ket_part(o101, bvx70, bvy70,
                         0) = (bvx70[0])))))
                     AND (FORALL (bvx70 : (ARRAY INT OF INT),
                         bvy70 : (ARRAY INT OF INT)):
                         ((binary(bvx70))
                         => ((binary(bvy70)) => (phase_part(o101, bvx70,
                            bvy70) = value(phase_inv_((1 - (bvx70[0])), 
                            div_two(o100))))))))))
            => (LET o102 = (n7 + 1) IN
               ((0 <= o102)
               AND (LET o103 = dyadic(1, o102) IN
                   (((value(o103) = p_omega(o102, 1)) AND (arg(o103) = 
                    infix_sldt(i_to_t(1), i_to_t(power(2, o102)))))
                   => (LET o104 = phase(o103) IN
                      (((sum_range(o104) = 0)
                       AND ((depth(o104) = 1)
                           AND ((FORALL (bvx70 : (ARRAY INT OF INT),
                                bvy70 : (ARRAY INT OF INT)):
                                ((binary(bvx70))
                                => ((binary(bvy70)) => (ket_part(o104, bvx70,
                                   bvy70, 0) = (bvx70[0])))))
                               AND (FORALL (bvx70 : (ARRAY INT OF INT),
                                   bvy70 : (ARRAY INT OF INT)):
                                   ((binary(bvx70))
                                   => ((binary(bvy70)) => (phase_part(o104,
                                      bvx70, bvy70) = value(o103))))))))
                      => ((depth(o104) = depth(o101))
                         AND (LET result71 = sequence(o104, o101) IN
                             (((sum_range(result71) = (sum_range(o104) + 
                              sum_range(o101)))
                              AND ((depth(result71) = depth(o104))
                                  AND ((FORALL (bvx70 : (ARRAY INT OF INT),
                                       bvy70 : (ARRAY INT OF INT)):
                                       (FORALL (i26 : INT):
                                       ((binary(bvx70))
                                       => ((binary(bvy70)) => (
                                          ket_part(result71, bvx70, bvy70,
                                          i26) = ket_part(o101,
                                          (((ket_part_closure[o104])[bvx70])[bvy70]),
                                          ((shift_closure1[bvy70])[
                                          sum_range(o104)]), i26))))))
                                      AND (FORALL
                                          (bvx70 : (ARRAY INT OF INT),
                                          bvy70 : (ARRAY INT OF INT)):
                                          ((binary(bvx70))
                                          => ((binary(bvy70)) => (
                                             phase_part(result71, bvx70,
                                             bvy70) = infix_asdt(
                                             phase_part(o104, bvx70, bvy70), 
                                             phase_part(o101,
                                             (((ket_part_closure[o104])[bvx70])[bvy70]),
                                             ((shift_closure1[bvy70])[
                                             sum_range(o104)]))))))))))
                             => ((depth(result71) = 1)
                                AND ((sum_range(result71) = 0)
                                    AND ((FORALL (bvx70 : (ARRAY INT OF INT),
                                         bvy70 : (ARRAY INT OF INT)):
                                         ((binary(bvx70))
                                         => ((binary(bvy70)) => (
                                            ket_part(result71, bvx70, bvy70,
                                            0) = (bvx70[0])))))
                                        AND (FORALL
                                            (bvx70 : (ARRAY INT OF INT),
                                            bvy70 : (ARRAY INT OF INT)):
                                            ((binary(bvx70))
                                            => ((binary(bvy70)) => (
                                               phase_part(result71, bvx70,
                                               bvy70) = value(
                                               dyadic((bvx70[0]), n7)))))))))))))))))))))))));
